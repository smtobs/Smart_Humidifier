
SmartHumidfier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026f1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004604  080270cc  080270cc  000370cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001956  0802b6d0  0802b6d0  0003b6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  0802d028  0802d028  0003d028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00037580  0802d034  0802d034  0003d034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000001c  080645b4  080645b4  000745b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080645d0  080645d0  00080180  2**0
                  CONTENTS
  8 .ARM          00000008  080645d0  080645d0  000745d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080645d8  080645d8  00080180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080645d8  080645d8  000745d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080645ec  080645ec  000745ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000180  20000000  080645f4  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000b148  20000180  08064774  00080180  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  2000b2c8  08064774  0008b2c8  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00080180  2**0
                  CONTENTS, READONLY
 16 .debug_info   000b0c7b  00000000  00000000  000801b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001356e  00000000  00000000  00130e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003f28  00000000  00000000  001443a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003978  00000000  00000000  001482c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00038f5f  00000000  00000000  0014bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004ca30  00000000  00000000  00184b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00116828  00000000  00000000  001d15cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  002e7df7  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00012704  00000000  00000000  002e7ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000180 	.word	0x20000180
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080270b4 	.word	0x080270b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000184 	.word	0x20000184
 80001ec:	080270b4 	.word	0x080270b4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96e 	b.w	8000e6c <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468c      	mov	ip, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 8083 	bne.w	8000cbe <__udivmoddi4+0x116>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4617      	mov	r7, r2
 8000bbc:	d947      	bls.n	8000c4e <__udivmoddi4+0xa6>
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	b142      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc4:	f1c2 0020 	rsb	r0, r2, #32
 8000bc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	4097      	lsls	r7, r2
 8000bd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bda:	0c23      	lsrs	r3, r4, #16
 8000bdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000be0:	fa1f fe87 	uxth.w	lr, r7
 8000be4:	fb08 c116 	mls	r1, r8, r6, ip
 8000be8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bec:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x60>
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 8119 	bcs.w	8000e30 <__udivmoddi4+0x288>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 8116 	bls.w	8000e30 <__udivmoddi4+0x288>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	443b      	add	r3, r7
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x8c>
 8000c20:	193c      	adds	r4, r7, r4
 8000c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c26:	f080 8105 	bcs.w	8000e34 <__udivmoddi4+0x28c>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f240 8102 	bls.w	8000e34 <__udivmoddi4+0x28c>
 8000c30:	3802      	subs	r0, #2
 8000c32:	443c      	add	r4, r7
 8000c34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c38:	eba4 040e 	sub.w	r4, r4, lr
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa0>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xaa>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	d150      	bne.n	8000cfc <__udivmoddi4+0x154>
 8000c5a:	1bcb      	subs	r3, r1, r7
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	fa1f f887 	uxth.w	r8, r7
 8000c64:	2601      	movs	r6, #1
 8000c66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6a:	0c21      	lsrs	r1, r4, #16
 8000c6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c74:	fb08 f30c 	mul.w	r3, r8, ip
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0xe4>
 8000c7c:	1879      	adds	r1, r7, r1
 8000c7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0xe2>
 8000c84:	428b      	cmp	r3, r1
 8000c86:	f200 80e9 	bhi.w	8000e5c <__udivmoddi4+0x2b4>
 8000c8a:	4684      	mov	ip, r0
 8000c8c:	1ac9      	subs	r1, r1, r3
 8000c8e:	b2a3      	uxth	r3, r4
 8000c90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c9c:	fb08 f800 	mul.w	r8, r8, r0
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x10c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x10a>
 8000cac:	45a0      	cmp	r8, r4
 8000cae:	f200 80d9 	bhi.w	8000e64 <__udivmoddi4+0x2bc>
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	eba4 0408 	sub.w	r4, r4, r8
 8000cb8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cbc:	e7bf      	b.n	8000c3e <__udivmoddi4+0x96>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0x12e>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	f000 80b1 	beq.w	8000e2a <__udivmoddi4+0x282>
 8000cc8:	2600      	movs	r6, #0
 8000cca:	e9c5 0100 	strd	r0, r1, [r5]
 8000cce:	4630      	mov	r0, r6
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f683 	clz	r6, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d14a      	bne.n	8000d74 <__udivmoddi4+0x1cc>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0x140>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80b8 	bhi.w	8000e58 <__udivmoddi4+0x2b0>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0103 	sbc.w	r1, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d0a8      	beq.n	8000c48 <__udivmoddi4+0xa0>
 8000cf6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f603 	lsr.w	r6, r0, r3
 8000d04:	4097      	lsls	r7, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0e:	40d9      	lsrs	r1, r3
 8000d10:	4330      	orrs	r0, r6
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d18:	fa1f f887 	uxth.w	r8, r7
 8000d1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb06 f108 	mul.w	r1, r6, r8
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x19c>
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d36:	f080 808d 	bcs.w	8000e54 <__udivmoddi4+0x2ac>
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	f240 808a 	bls.w	8000e54 <__udivmoddi4+0x2ac>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	443b      	add	r3, r7
 8000d44:	1a5b      	subs	r3, r3, r1
 8000d46:	b281      	uxth	r1, r0
 8000d48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb00 f308 	mul.w	r3, r0, r8
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x1c4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d62:	d273      	bcs.n	8000e4c <__udivmoddi4+0x2a4>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d971      	bls.n	8000e4c <__udivmoddi4+0x2a4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4439      	add	r1, r7
 8000d6c:	1acb      	subs	r3, r1, r3
 8000d6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d72:	e778      	b.n	8000c66 <__udivmoddi4+0xbe>
 8000d74:	f1c6 0c20 	rsb	ip, r6, #32
 8000d78:	fa03 f406 	lsl.w	r4, r3, r6
 8000d7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d80:	431c      	orrs	r4, r3
 8000d82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d86:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d92:	431f      	orrs	r7, r3
 8000d94:	0c3b      	lsrs	r3, r7, #16
 8000d96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9a:	fa1f f884 	uxth.w	r8, r4
 8000d9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000da6:	fb09 fa08 	mul.w	sl, r9, r8
 8000daa:	458a      	cmp	sl, r1
 8000dac:	fa02 f206 	lsl.w	r2, r2, r6
 8000db0:	fa00 f306 	lsl.w	r3, r0, r6
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x220>
 8000db6:	1861      	adds	r1, r4, r1
 8000db8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dbc:	d248      	bcs.n	8000e50 <__udivmoddi4+0x2a8>
 8000dbe:	458a      	cmp	sl, r1
 8000dc0:	d946      	bls.n	8000e50 <__udivmoddi4+0x2a8>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4421      	add	r1, r4
 8000dc8:	eba1 010a 	sub.w	r1, r1, sl
 8000dcc:	b2bf      	uxth	r7, r7
 8000dce:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dd6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dda:	fb00 f808 	mul.w	r8, r0, r8
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x24a>
 8000de2:	19e7      	adds	r7, r4, r7
 8000de4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de8:	d22e      	bcs.n	8000e48 <__udivmoddi4+0x2a0>
 8000dea:	45b8      	cmp	r8, r7
 8000dec:	d92c      	bls.n	8000e48 <__udivmoddi4+0x2a0>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4427      	add	r7, r4
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	eba7 0708 	sub.w	r7, r7, r8
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	454f      	cmp	r7, r9
 8000e00:	46c6      	mov	lr, r8
 8000e02:	4649      	mov	r1, r9
 8000e04:	d31a      	bcc.n	8000e3c <__udivmoddi4+0x294>
 8000e06:	d017      	beq.n	8000e38 <__udivmoddi4+0x290>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x27a>
 8000e0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e16:	40f2      	lsrs	r2, r6
 8000e18:	ea4c 0202 	orr.w	r2, ip, r2
 8000e1c:	40f7      	lsrs	r7, r6
 8000e1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	462e      	mov	r6, r5
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	e70b      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000e30:	4606      	mov	r6, r0
 8000e32:	e6e9      	b.n	8000c08 <__udivmoddi4+0x60>
 8000e34:	4618      	mov	r0, r3
 8000e36:	e6fd      	b.n	8000c34 <__udivmoddi4+0x8c>
 8000e38:	4543      	cmp	r3, r8
 8000e3a:	d2e5      	bcs.n	8000e08 <__udivmoddi4+0x260>
 8000e3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e40:	eb69 0104 	sbc.w	r1, r9, r4
 8000e44:	3801      	subs	r0, #1
 8000e46:	e7df      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e48:	4608      	mov	r0, r1
 8000e4a:	e7d2      	b.n	8000df2 <__udivmoddi4+0x24a>
 8000e4c:	4660      	mov	r0, ip
 8000e4e:	e78d      	b.n	8000d6c <__udivmoddi4+0x1c4>
 8000e50:	4681      	mov	r9, r0
 8000e52:	e7b9      	b.n	8000dc8 <__udivmoddi4+0x220>
 8000e54:	4666      	mov	r6, ip
 8000e56:	e775      	b.n	8000d44 <__udivmoddi4+0x19c>
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e74a      	b.n	8000cf2 <__udivmoddi4+0x14a>
 8000e5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e60:	4439      	add	r1, r7
 8000e62:	e713      	b.n	8000c8c <__udivmoddi4+0xe4>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	e724      	b.n	8000cb4 <__udivmoddi4+0x10c>
 8000e6a:	bf00      	nop

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <cJSON_strdup+0x1c>
    {
        return NULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e015      	b.n	8000eb8 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff f9ff 	bl	8000290 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	4798      	blx	r3
 8000ea0:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <cJSON_strdup+0x3c>
    {
        return NULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e005      	b.n	8000eb8 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	68b8      	ldr	r0, [r7, #8]
 8000eb2:	f024 f981 	bl	80251b8 <memcpy>

    return copy;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2028      	movs	r0, #40	; 0x28
 8000ece:	4798      	blx	r3
 8000ed0:	60f8      	str	r0, [r7, #12]
    if (node)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000ed8:	2228      	movs	r2, #40	; 0x28
 8000eda:	2100      	movs	r1, #0
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f024 f993 	bl	8025208 <memset>
    }

    return node;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000ef8:	e037      	b.n	8000f6a <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d108      	bne.n	8000f1e <cJSON_Delete+0x32>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffe7 	bl	8000eec <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d109      	bne.n	8000f3e <cJSON_Delete+0x52>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <cJSON_Delete+0x90>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6912      	ldr	r2, [r2, #16]
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <cJSON_Delete+0x72>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <cJSON_Delete+0x90>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6a12      	ldr	r2, [r2, #32]
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <cJSON_Delete+0x90>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
        item = next;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1c4      	bne.n	8000efa <cJSON_Delete+0xe>
    }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000004 	.word	0x20000004

08000f80 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000f84:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <ensure+0x20>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <ensure+0x24>
    {
        return NULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e083      	b.n	80010bc <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <ensure+0x3c>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d301      	bcc.n	8000fcc <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e077      	b.n	80010bc <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	da01      	bge.n	8000fd6 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e072      	b.n	80010bc <ensure+0x12c>
    }

    needed += p->offset + 1;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	3301      	adds	r3, #1
 8000fe0:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d805      	bhi.n	8000ff8 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	e061      	b.n	80010bc <ensure+0x12c>
    }

    if (p->noalloc) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <ensure+0x74>
        return NULL;
 8001000:	2300      	movs	r3, #0
 8001002:	e05b      	b.n	80010bc <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800100a:	d308      	bcc.n	800101e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db03      	blt.n	800101a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001012:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	e004      	b.n	8001024 <ensure+0x94>
        }
        else
        {
            return NULL;
 800101a:	2300      	movs	r3, #0
 800101c:	e04e      	b.n	80010bc <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d018      	beq.n	800105e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4610      	mov	r0, r2
 8001038:	4798      	blx	r3
 800103a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d132      	bne.n	80010a8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	4610      	mov	r0, r2
 800104c:	4798      	blx	r3
            p->length = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]

            return NULL;
 800105a:	2300      	movs	r3, #0
 800105c:	e02e      	b.n	80010bc <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	68b8      	ldr	r0, [r7, #8]
 8001064:	4798      	blx	r3
 8001066:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10d      	bne.n	800108a <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	4610      	mov	r0, r2
 8001078:	4798      	blx	r3
            p->length = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]

            return NULL;
 8001086:	2300      	movs	r3, #0
 8001088:	e018      	b.n	80010bc <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	3301      	adds	r3, #1
 8001094:	461a      	mov	r2, r3
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f024 f88e 	bl	80251b8 <memcpy>
        p->hooks.deallocate(p->buffer);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	4610      	mov	r0, r2
 80010a6:	4798      	blx	r3
    }
    p->length = newsize;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4413      	add	r3, r2
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d013      	beq.n	80010fe <update_offset+0x3a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00f      	beq.n	80010fe <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689c      	ldr	r4, [r3, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff f8ce 	bl	8000290 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	18e2      	adds	r2, r4, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	e000      	b.n	8001100 <update_offset+0x3c>
        return;
 80010fe:	bf00      	nop
}
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}
	...

08001108 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800110c:	b087      	sub	sp, #28
 800110e:	af00      	add	r7, sp, #0
 8001110:	ed87 0b02 	vstr	d0, [r7, #8]
 8001114:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	68fe      	ldr	r6, [r7, #12]
 800111c:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	687e      	ldr	r6, [r7, #4]
 8001124:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8001128:	f7ff fd06 	bl	8000b38 <__aeabi_dcmpgt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d004      	beq.n	800113c <compare_double+0x34>
 8001132:	68bc      	ldr	r4, [r7, #8]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800113a:	e003      	b.n	8001144 <compare_double+0x3c>
 800113c:	683c      	ldr	r4, [r7, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001144:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800114c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001150:	f7ff f8aa 	bl	80002a8 <__aeabi_dsub>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4690      	mov	r8, r2
 800115a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <compare_double+0x8c>)
 8001164:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001168:	f7ff fa56 	bl	8000618 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	2101      	movs	r1, #1
 8001172:	460c      	mov	r4, r1
 8001174:	4640      	mov	r0, r8
 8001176:	4649      	mov	r1, r9
 8001178:	f7ff fcca 	bl	8000b10 <__aeabi_dcmple>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <compare_double+0x7e>
 8001182:	2300      	movs	r3, #0
 8001184:	461c      	mov	r4, r3
 8001186:	b2e3      	uxtb	r3, r4
}
 8001188:	4618      	mov	r0, r3
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001192:	bf00      	nop
 8001194:	3cb00000 	.word	0x3cb00000

08001198 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	b093      	sub	sp, #76	; 0x4c
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 80011ce:	f7ff fed7 	bl	8000f80 <get_decimal_point>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <print_number+0x56>
    {
        return false;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e0b4      	b.n	8001358 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 80011ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011f6:	f7ff fca9 	bl	8000b4c <__aeabi_dcmpun>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d121      	bne.n	8001244 <print_number+0xac>
 8001200:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001204:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001208:	2301      	movs	r3, #1
 800120a:	461e      	mov	r6, r3
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <print_number+0x1c8>)
 8001212:	4620      	mov	r0, r4
 8001214:	4629      	mov	r1, r5
 8001216:	f7ff fc99 	bl	8000b4c <__aeabi_dcmpun>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10b      	bne.n	8001238 <print_number+0xa0>
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <print_number+0x1c8>)
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff fc71 	bl	8000b10 <__aeabi_dcmple>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <print_number+0xa0>
 8001234:	2300      	movs	r3, #0
 8001236:	461e      	mov	r6, r3
 8001238:	b2f3      	uxtb	r3, r6
 800123a:	f083 0301 	eor.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4946      	ldr	r1, [pc, #280]	; (8001364 <print_number+0x1cc>)
 800124a:	4618      	mov	r0, r3
 800124c:	f024 fc0c 	bl	8025a68 <siprintf>
 8001250:	6478      	str	r0, [r7, #68]	; 0x44
 8001252:	e03f      	b.n	80012d4 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f973 	bl	8000544 <__aeabi_i2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001266:	f7ff fc3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695a      	ldr	r2, [r3, #20]
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	493b      	ldr	r1, [pc, #236]	; (8001368 <print_number+0x1d0>)
 800127a:	4618      	mov	r0, r3
 800127c:	f024 fbf4 	bl	8025a68 <siprintf>
 8001280:	6478      	str	r0, [r7, #68]	; 0x44
 8001282:	e027      	b.n	80012d4 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001284:	f107 0014 	add.w	r0, r7, #20
 8001288:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800128c:	4937      	ldr	r1, [pc, #220]	; (800136c <print_number+0x1d4>)
 800128e:	f024 fbeb 	bl	8025a68 <siprintf>
 8001292:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001294:	f107 0208 	add.w	r2, r7, #8
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4934      	ldr	r1, [pc, #208]	; (8001370 <print_number+0x1d8>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f024 fc02 	bl	8025aa8 <siscanf>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10c      	bne.n	80012c4 <print_number+0x12c>
 80012aa:	ed97 7b02 	vldr	d7, [r7, #8]
 80012ae:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80012b2:	eeb0 0a47 	vmov.f32	s0, s14
 80012b6:	eef0 0a67 	vmov.f32	s1, s15
 80012ba:	f7ff ff25 	bl	8001108 <compare_double>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80012c4:	f107 0014 	add.w	r0, r7, #20
 80012c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012cc:	4929      	ldr	r1, [pc, #164]	; (8001374 <print_number+0x1dc>)
 80012ce:	f024 fbcb 	bl	8025a68 <siprintf>
 80012d2:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80012d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db02      	blt.n	80012e0 <print_number+0x148>
 80012da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012dc:	2b19      	cmp	r3, #25
 80012de:	dd01      	ble.n	80012e4 <print_number+0x14c>
    {
        return false;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e039      	b.n	8001358 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80012e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012e6:	3301      	adds	r3, #1
 80012e8:	4619      	mov	r1, r3
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f7ff fe50 	bl	8000f90 <ensure>
 80012f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 80012f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <print_number+0x164>
    {
        return false;
 80012f8:	2300      	movs	r3, #0
 80012fa:	e02d      	b.n	8001358 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40
 8001300:	e01a      	b.n	8001338 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001302:	f107 0214 	add.w	r2, r7, #20
 8001306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001310:	429a      	cmp	r2, r3
 8001312:	d105      	bne.n	8001320 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001318:	4413      	add	r3, r2
 800131a:	222e      	movs	r2, #46	; 0x2e
 800131c:	701a      	strb	r2, [r3, #0]
            continue;
 800131e:	e008      	b.n	8001332 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001324:	4413      	add	r3, r2
 8001326:	f107 0114 	add.w	r1, r7, #20
 800132a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800132c:	440a      	add	r2, r1
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8001332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001334:	3301      	adds	r3, #1
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
 8001338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800133a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800133c:	429a      	cmp	r2, r3
 800133e:	d3e0      	bcc.n	8001302 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8001340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001344:	4413      	add	r3, r2
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001350:	441a      	add	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	609a      	str	r2, [r3, #8]

    return true;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	374c      	adds	r7, #76	; 0x4c
 800135c:	46bd      	mov	sp, r7
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001360:	7fefffff 	.word	0x7fefffff
 8001364:	080270d8 	.word	0x080270d8
 8001368:	080270e0 	.word	0x080270e0
 800136c:	080270e4 	.word	0x080270e4
 8001370:	080270ec 	.word	0x080270ec
 8001374:	080270f0 	.word	0x080270f0

08001378 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <print_string_ptr+0x28>
    {
        return false;
 800139c:	2300      	movs	r3, #0
 800139e:	e110      	b.n	80015c2 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d111      	bne.n	80013ca <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80013a6:	2103      	movs	r1, #3
 80013a8:	6838      	ldr	r0, [r7, #0]
 80013aa:	f7ff fdf1 	bl	8000f90 <ensure>
 80013ae:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <print_string_ptr+0x42>
        {
            return false;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e103      	b.n	80015c2 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4a83      	ldr	r2, [pc, #524]	; (80015cc <print_string_ptr+0x254>)
 80013be:	8811      	ldrh	r1, [r2, #0]
 80013c0:	7892      	ldrb	r2, [r2, #2]
 80013c2:	8019      	strh	r1, [r3, #0]
 80013c4:	709a      	strb	r2, [r3, #2]

        return true;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0fb      	b.n	80015c2 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	e023      	b.n	8001418 <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b22      	cmp	r3, #34	; 0x22
 80013d6:	dc0e      	bgt.n	80013f6 <print_string_ptr+0x7e>
 80013d8:	2b08      	cmp	r3, #8
 80013da:	db12      	blt.n	8001402 <print_string_ptr+0x8a>
 80013dc:	3b08      	subs	r3, #8
 80013de:	2201      	movs	r2, #1
 80013e0:	409a      	lsls	r2, r3
 80013e2:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <print_string_ptr+0x258>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bf14      	ite	ne
 80013ea:	2301      	movne	r3, #1
 80013ec:	2300      	moveq	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <print_string_ptr+0x82>
 80013f4:	e005      	b.n	8001402 <print_string_ptr+0x8a>
 80013f6:	2b5c      	cmp	r3, #92	; 0x5c
 80013f8:	d103      	bne.n	8001402 <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
                break;
 8001400:	e007      	b.n	8001412 <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b1f      	cmp	r3, #31
 8001408:	d802      	bhi.n	8001410 <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3305      	adds	r3, #5
 800140e:	617b      	str	r3, [r7, #20]
                }
                break;
 8001410:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1d7      	bne.n	80013d0 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	461a      	mov	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3303      	adds	r3, #3
 8001432:	4619      	mov	r1, r3
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f7ff fdab 	bl	8000f90 <ensure>
 800143a:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <print_string_ptr+0xce>
    {
        return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e0bd      	b.n	80015c2 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d117      	bne.n	800147c <print_string_ptr+0x104>
    {
        output[0] = '\"';
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	2222      	movs	r2, #34	; 0x22
 8001450:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	3301      	adds	r3, #1
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f023 feac 	bl	80251b8 <memcpy>
        output[output_length + 1] = '\"';
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4413      	add	r3, r2
 8001468:	2222      	movs	r2, #34	; 0x22
 800146a:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3302      	adds	r3, #2
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4413      	add	r3, r2
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]

        return true;
 8001478:	2301      	movs	r3, #1
 800147a:	e0a2      	b.n	80015c2 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2222      	movs	r2, #34	; 0x22
 8001480:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	3301      	adds	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	e087      	b.n	800159e <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b1f      	cmp	r3, #31
 8001494:	d90c      	bls.n	80014b0 <print_string_ptr+0x138>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b22      	cmp	r3, #34	; 0x22
 800149c:	d008      	beq.n	80014b0 <print_string_ptr+0x138>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b5c      	cmp	r3, #92	; 0x5c
 80014a4:	d004      	beq.n	80014b0 <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	701a      	strb	r2, [r3, #0]
 80014ae:	e070      	b.n	8001592 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	61ba      	str	r2, [r7, #24]
 80014b6:	225c      	movs	r2, #92	; 0x5c
 80014b8:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b22      	cmp	r3, #34	; 0x22
 80014c0:	dc3e      	bgt.n	8001540 <print_string_ptr+0x1c8>
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	db5a      	blt.n	800157c <print_string_ptr+0x204>
 80014c6:	3b08      	subs	r3, #8
 80014c8:	2b1a      	cmp	r3, #26
 80014ca:	d857      	bhi.n	800157c <print_string_ptr+0x204>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <print_string_ptr+0x15c>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	08001555 	.word	0x08001555
 80014d8:	08001575 	.word	0x08001575
 80014dc:	08001565 	.word	0x08001565
 80014e0:	0800157d 	.word	0x0800157d
 80014e4:	0800155d 	.word	0x0800155d
 80014e8:	0800156d 	.word	0x0800156d
 80014ec:	0800157d 	.word	0x0800157d
 80014f0:	0800157d 	.word	0x0800157d
 80014f4:	0800157d 	.word	0x0800157d
 80014f8:	0800157d 	.word	0x0800157d
 80014fc:	0800157d 	.word	0x0800157d
 8001500:	0800157d 	.word	0x0800157d
 8001504:	0800157d 	.word	0x0800157d
 8001508:	0800157d 	.word	0x0800157d
 800150c:	0800157d 	.word	0x0800157d
 8001510:	0800157d 	.word	0x0800157d
 8001514:	0800157d 	.word	0x0800157d
 8001518:	0800157d 	.word	0x0800157d
 800151c:	0800157d 	.word	0x0800157d
 8001520:	0800157d 	.word	0x0800157d
 8001524:	0800157d 	.word	0x0800157d
 8001528:	0800157d 	.word	0x0800157d
 800152c:	0800157d 	.word	0x0800157d
 8001530:	0800157d 	.word	0x0800157d
 8001534:	0800157d 	.word	0x0800157d
 8001538:	0800157d 	.word	0x0800157d
 800153c:	0800154d 	.word	0x0800154d
 8001540:	2b5c      	cmp	r3, #92	; 0x5c
 8001542:	d11b      	bne.n	800157c <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	225c      	movs	r2, #92	; 0x5c
 8001548:	701a      	strb	r2, [r3, #0]
                    break;
 800154a:	e022      	b.n	8001592 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2222      	movs	r2, #34	; 0x22
 8001550:	701a      	strb	r2, [r3, #0]
                    break;
 8001552:	e01e      	b.n	8001592 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2262      	movs	r2, #98	; 0x62
 8001558:	701a      	strb	r2, [r3, #0]
                    break;
 800155a:	e01a      	b.n	8001592 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2266      	movs	r2, #102	; 0x66
 8001560:	701a      	strb	r2, [r3, #0]
                    break;
 8001562:	e016      	b.n	8001592 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	226e      	movs	r2, #110	; 0x6e
 8001568:	701a      	strb	r2, [r3, #0]
                    break;
 800156a:	e012      	b.n	8001592 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2272      	movs	r2, #114	; 0x72
 8001570:	701a      	strb	r2, [r3, #0]
                    break;
 8001572:	e00e      	b.n	8001592 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2274      	movs	r2, #116	; 0x74
 8001578:	701a      	strb	r2, [r3, #0]
                    break;
 800157a:	e00a      	b.n	8001592 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4914      	ldr	r1, [pc, #80]	; (80015d4 <print_string_ptr+0x25c>)
 8001584:	69b8      	ldr	r0, [r7, #24]
 8001586:	f024 fa6f 	bl	8025a68 <siprintf>
                    output_pointer += 4;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	3304      	adds	r3, #4
 800158e:	61bb      	str	r3, [r7, #24]
                    break;
 8001590:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3301      	adds	r3, #1
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	3301      	adds	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f47f af73 	bne.w	800148e <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4413      	add	r3, r2
 80015b0:	2222      	movs	r2, #34	; 0x22
 80015b2:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3302      	adds	r3, #2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4413      	add	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]

    return true;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	080270f8 	.word	0x080270f8
 80015d0:	04000037 	.word	0x04000037
 80015d4:	080270fc 	.word	0x080270fc

080015d8 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fec5 	bl	8001378 <print_string_ptr>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	2224      	movs	r2, #36	; 0x24
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f023 fdf9 	bl	8025208 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a38      	ldr	r2, [pc, #224]	; (80016fc <print+0x104>)
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	4610      	mov	r0, r2
 8001620:	4798      	blx	r3
 8001622:	4603      	mov	r3, r0
 8001624:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8001626:	4b35      	ldr	r3, [pc, #212]	; (80016fc <print+0x104>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001636:	ca07      	ldmia	r2, {r0, r1, r2}
 8001638:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d040      	beq.n	80016c4 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4619      	mov	r1, r3
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 f869 	bl	8001720 <print_value>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d039      	beq.n	80016c8 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fd33 	bl	80010c4 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	6938      	ldr	r0, [r7, #16]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	3201      	adds	r2, #1
 8001670:	4611      	mov	r1, r2
 8001672:	4798      	blx	r3
 8001674:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8001676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001678:	2b00      	cmp	r3, #0
 800167a:	d027      	beq.n	80016cc <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	e01e      	b.n	80016c0 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	3201      	adds	r2, #1
 800168a:	4610      	mov	r0, r2
 800168c:	4798      	blx	r3
 800168e:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8001690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01c      	beq.n	80016d0 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8001696:	6939      	ldr	r1, [r7, #16]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4293      	cmp	r3, r2
 80016a0:	bf28      	it	cs
 80016a2:	4613      	movcs	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016a8:	f023 fd86 	bl	80251b8 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016b0:	4413      	add	r3, r2
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4610      	mov	r0, r2
 80016be:	4798      	blx	r3
    }

    return printed;
 80016c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c2:	e016      	b.n	80016f2 <print+0xfa>
        goto fail;
 80016c4:	bf00      	nop
 80016c6:	e004      	b.n	80016d2 <print+0xda>
        goto fail;
 80016c8:	bf00      	nop
 80016ca:	e002      	b.n	80016d2 <print+0xda>
            goto fail;
 80016cc:	bf00      	nop
 80016ce:	e000      	b.n	80016d2 <print+0xda>
            goto fail;
 80016d0:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4610      	mov	r0, r2
 80016e0:	4798      	blx	r3
    }

    if (printed != NULL)
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <print+0xf8>
    {
        hooks->deallocate(printed);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016ee:	4798      	blx	r3
    }

    return NULL;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3738      	adds	r7, #56	; 0x38
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	080283e0 	.word	0x080283e0

08001700 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <cJSON_Print+0x1c>)
 800170a:	2101      	movs	r1, #1
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff73 	bl	80015f8 <print>
 8001712:	4603      	mov	r3, r0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000004 	.word	0x20000004

08001720 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <print_value+0x1a>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <print_value+0x1e>
    {
        return false;
 800173a:	2300      	movs	r3, #0
 800173c:	e0c9      	b.n	80018d2 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b80      	cmp	r3, #128	; 0x80
 8001746:	f000 808e 	beq.w	8001866 <print_value+0x146>
 800174a:	2b80      	cmp	r3, #128	; 0x80
 800174c:	f300 80c0 	bgt.w	80018d0 <print_value+0x1b0>
 8001750:	2b20      	cmp	r3, #32
 8001752:	dc49      	bgt.n	80017e8 <print_value+0xc8>
 8001754:	2b00      	cmp	r3, #0
 8001756:	f340 80bb 	ble.w	80018d0 <print_value+0x1b0>
 800175a:	3b01      	subs	r3, #1
 800175c:	2b1f      	cmp	r3, #31
 800175e:	f200 80b7 	bhi.w	80018d0 <print_value+0x1b0>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <print_value+0x48>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001813 	.word	0x08001813
 800176c:	08001837 	.word	0x08001837
 8001770:	080018d1 	.word	0x080018d1
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080018d1 	.word	0x080018d1
 800177c:	080018d1 	.word	0x080018d1
 8001780:	080018d1 	.word	0x080018d1
 8001784:	0800185b 	.word	0x0800185b
 8001788:	080018d1 	.word	0x080018d1
 800178c:	080018d1 	.word	0x080018d1
 8001790:	080018d1 	.word	0x080018d1
 8001794:	080018d1 	.word	0x080018d1
 8001798:	080018d1 	.word	0x080018d1
 800179c:	080018d1 	.word	0x080018d1
 80017a0:	080018d1 	.word	0x080018d1
 80017a4:	080018ad 	.word	0x080018ad
 80017a8:	080018d1 	.word	0x080018d1
 80017ac:	080018d1 	.word	0x080018d1
 80017b0:	080018d1 	.word	0x080018d1
 80017b4:	080018d1 	.word	0x080018d1
 80017b8:	080018d1 	.word	0x080018d1
 80017bc:	080018d1 	.word	0x080018d1
 80017c0:	080018d1 	.word	0x080018d1
 80017c4:	080018d1 	.word	0x080018d1
 80017c8:	080018d1 	.word	0x080018d1
 80017cc:	080018d1 	.word	0x080018d1
 80017d0:	080018d1 	.word	0x080018d1
 80017d4:	080018d1 	.word	0x080018d1
 80017d8:	080018d1 	.word	0x080018d1
 80017dc:	080018d1 	.word	0x080018d1
 80017e0:	080018d1 	.word	0x080018d1
 80017e4:	080018b9 	.word	0x080018b9
 80017e8:	2b40      	cmp	r3, #64	; 0x40
 80017ea:	d06b      	beq.n	80018c4 <print_value+0x1a4>
 80017ec:	e070      	b.n	80018d0 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80017ee:	2105      	movs	r1, #5
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff fbcd 	bl	8000f90 <ensure>
 80017f6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <print_value+0xe2>
            {
                return false;
 80017fe:	2300      	movs	r3, #0
 8001800:	e067      	b.n	80018d2 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4a35      	ldr	r2, [pc, #212]	; (80018dc <print_value+0x1bc>)
 8001806:	6810      	ldr	r0, [r2, #0]
 8001808:	6018      	str	r0, [r3, #0]
 800180a:	7912      	ldrb	r2, [r2, #4]
 800180c:	711a      	strb	r2, [r3, #4]
            return true;
 800180e:	2301      	movs	r3, #1
 8001810:	e05f      	b.n	80018d2 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001812:	2106      	movs	r1, #6
 8001814:	6838      	ldr	r0, [r7, #0]
 8001816:	f7ff fbbb 	bl	8000f90 <ensure>
 800181a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <print_value+0x106>
            {
                return false;
 8001822:	2300      	movs	r3, #0
 8001824:	e055      	b.n	80018d2 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4a2d      	ldr	r2, [pc, #180]	; (80018e0 <print_value+0x1c0>)
 800182a:	6810      	ldr	r0, [r2, #0]
 800182c:	6018      	str	r0, [r3, #0]
 800182e:	8892      	ldrh	r2, [r2, #4]
 8001830:	809a      	strh	r2, [r3, #4]
            return true;
 8001832:	2301      	movs	r3, #1
 8001834:	e04d      	b.n	80018d2 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8001836:	2105      	movs	r1, #5
 8001838:	6838      	ldr	r0, [r7, #0]
 800183a:	f7ff fba9 	bl	8000f90 <ensure>
 800183e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <print_value+0x12a>
            {
                return false;
 8001846:	2300      	movs	r3, #0
 8001848:	e043      	b.n	80018d2 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <print_value+0x1c4>)
 800184e:	6810      	ldr	r0, [r2, #0]
 8001850:	6018      	str	r0, [r3, #0]
 8001852:	7912      	ldrb	r2, [r2, #4]
 8001854:	711a      	strb	r2, [r3, #4]
            return true;
 8001856:	2301      	movs	r3, #1
 8001858:	e03b      	b.n	80018d2 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fc9b 	bl	8001198 <print_number>
 8001862:	4603      	mov	r3, r0
 8001864:	e035      	b.n	80018d2 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <print_value+0x156>
            {
                return false;
 8001872:	2300      	movs	r3, #0
 8001874:	e02d      	b.n	80018d2 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fd08 	bl	8000290 <strlen>
 8001880:	4603      	mov	r3, r0
 8001882:	3301      	adds	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8001886:	68b9      	ldr	r1, [r7, #8]
 8001888:	6838      	ldr	r0, [r7, #0]
 800188a:	f7ff fb81 	bl	8000f90 <ensure>
 800188e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <print_value+0x17a>
            {
                return false;
 8001896:	2300      	movs	r3, #0
 8001898:	e01b      	b.n	80018d2 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	4619      	mov	r1, r3
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f023 fc88 	bl	80251b8 <memcpy>
            return true;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e012      	b.n	80018d2 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fe92 	bl	80015d8 <print_string>
 80018b4:	4603      	mov	r3, r0
 80018b6:	e00c      	b.n	80018d2 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f814 	bl	80018e8 <print_array>
 80018c0:	4603      	mov	r3, r0
 80018c2:	e006      	b.n	80018d2 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f894 	bl	80019f4 <print_object>
 80018cc:	4603      	mov	r3, r0
 80018ce:	e000      	b.n	80018d2 <print_value+0x1b2>

        default:
            return false;
 80018d0:	2300      	movs	r3, #0
    }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	080270d8 	.word	0x080270d8
 80018e0:	08027108 	.word	0x08027108
 80018e4:	08027110 	.word	0x08027110

080018e8 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <print_array+0x22>
    {
        return false;
 8001906:	2300      	movs	r3, #0
 8001908:	e070      	b.n	80019ec <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800190a:	2101      	movs	r1, #1
 800190c:	6838      	ldr	r0, [r7, #0]
 800190e:	f7ff fb3f 	bl	8000f90 <ensure>
 8001912:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <print_array+0x36>
    {
        return false;
 800191a:	2300      	movs	r3, #0
 800191c:	e066      	b.n	80019ec <print_array+0x104>
    }

    *output_pointer = '[';
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	225b      	movs	r2, #91	; 0x5b
 8001922:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8001938:	e03d      	b.n	80019b6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	6938      	ldr	r0, [r7, #16]
 800193e:	f7ff feef 	bl	8001720 <print_value>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <print_array+0x64>
        {
            return false;
 8001948:	2300      	movs	r3, #0
 800194a:	e04f      	b.n	80019ec <print_array+0x104>
        }
        update_offset(output_buffer);
 800194c:	6838      	ldr	r0, [r7, #0]
 800194e:	f7ff fbb9 	bl	80010c4 <update_offset>
        if (current_element->next)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d02a      	beq.n	80019b0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <print_array+0x7e>
 8001962:	2302      	movs	r3, #2
 8001964:	e000      	b.n	8001968 <print_array+0x80>
 8001966:	2301      	movs	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3301      	adds	r3, #1
 800196e:	4619      	mov	r1, r3
 8001970:	6838      	ldr	r0, [r7, #0]
 8001972:	f7ff fb0d 	bl	8000f90 <ensure>
 8001976:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <print_array+0x9a>
            {
                return false;
 800197e:	2300      	movs	r3, #0
 8001980:	e034      	b.n	80019ec <print_array+0x104>
            }
            *output_pointer++ = ',';
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	617a      	str	r2, [r7, #20]
 8001988:	222c      	movs	r2, #44	; 0x2c
 800198a:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	617a      	str	r2, [r7, #20]
 800199a:	2220      	movs	r2, #32
 800199c:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	441a      	add	r2, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1be      	bne.n	800193a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80019bc:	2102      	movs	r1, #2
 80019be:	6838      	ldr	r0, [r7, #0]
 80019c0:	f7ff fae6 	bl	8000f90 <ensure>
 80019c4:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <print_array+0xe8>
    {
        return false;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e00d      	b.n	80019ec <print_array+0x104>
    }
    *output_pointer++ = ']';
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	617a      	str	r2, [r7, #20]
 80019d6:	225d      	movs	r2, #93	; 0x5d
 80019d8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	1e5a      	subs	r2, r3, #1
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	60da      	str	r2, [r3, #12]

    return true;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <print_object+0x22>
    {
        return false;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e108      	b.n	8001c28 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <print_object+0x2e>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e000      	b.n	8001a24 <print_object+0x30>
 8001a22:	2301      	movs	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6838      	ldr	r0, [r7, #0]
 8001a2e:	f7ff faaf 	bl	8000f90 <ensure>
 8001a32:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <print_object+0x4a>
    {
        return false;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e0f4      	b.n	8001c28 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	61fa      	str	r2, [r7, #28]
 8001a44:	227b      	movs	r2, #123	; 0x7b
 8001a46:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	61fa      	str	r2, [r7, #28]
 8001a60:	220a      	movs	r2, #10
 8001a62:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001a70:	e0a0      	b.n	8001bb4 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d022      	beq.n	8001ac0 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6838      	ldr	r0, [r7, #0]
 8001a82:	f7ff fa85 	bl	8000f90 <ensure>
 8001a86:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <print_object+0x9e>
            {
                return false;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e0ca      	b.n	8001c28 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e007      	b.n	8001aa8 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	61fa      	str	r2, [r7, #28]
 8001a9e:	2209      	movs	r2, #9
 8001aa0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3f2      	bcc.n	8001a98 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	441a      	add	r2, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	6839      	ldr	r1, [r7, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fc56 	bl	8001378 <print_string_ptr>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <print_object+0xe2>
        {
            return false;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e0a8      	b.n	8001c28 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001ad6:	6838      	ldr	r0, [r7, #0]
 8001ad8:	f7ff faf4 	bl	80010c4 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <print_object+0xf4>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e000      	b.n	8001aea <print_object+0xf6>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	6838      	ldr	r0, [r7, #0]
 8001af0:	f7ff fa4e 	bl	8000f90 <ensure>
 8001af4:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <print_object+0x10c>
        {
            return false;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e093      	b.n	8001c28 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	61fa      	str	r2, [r7, #28]
 8001b06:	223a      	movs	r2, #58	; 0x3a
 8001b08:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	61fa      	str	r2, [r7, #28]
 8001b18:	2209      	movs	r2, #9
 8001b1a:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	441a      	add	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	69b8      	ldr	r0, [r7, #24]
 8001b2c:	f7ff fdf8 	bl	8001720 <print_value>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <print_object+0x146>
        {
            return false;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e076      	b.n	8001c28 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001b3a:	6838      	ldr	r0, [r7, #0]
 8001b3c:	f7ff fac2 	bl	80010c4 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <print_object+0x158>
 8001b48:	2201      	movs	r2, #1
 8001b4a:	e000      	b.n	8001b4e <print_object+0x15a>
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <print_object+0x166>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <print_object+0x168>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	4619      	mov	r1, r3
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f7ff fa12 	bl	8000f90 <ensure>
 8001b6c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <print_object+0x184>
        {
            return false;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e057      	b.n	8001c28 <print_object+0x234>
        }
        if (current_item->next)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <print_object+0x196>
        {
            *output_pointer++ = ',';
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	61fa      	str	r2, [r7, #28]
 8001b86:	222c      	movs	r2, #44	; 0x2c
 8001b88:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	61fa      	str	r2, [r7, #28]
 8001b98:	220a      	movs	r2, #10
 8001b9a:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	441a      	add	r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f47f af5b 	bne.w	8001a72 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <print_object+0x1d8>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	e000      	b.n	8001bce <print_object+0x1da>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6838      	ldr	r0, [r7, #0]
 8001bd2:	f7ff f9dd 	bl	8000f90 <ensure>
 8001bd6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <print_object+0x1ee>
    {
        return false;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e022      	b.n	8001c28 <print_object+0x234>
    }
    if (output_buffer->format)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d010      	beq.n	8001c0c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e007      	b.n	8001c00 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	61fa      	str	r2, [r7, #28]
 8001bf6:	2209      	movs	r2, #9
 8001bf8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d3f1      	bcc.n	8001bf0 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	61fa      	str	r2, [r7, #28]
 8001c12:	227d      	movs	r2, #125	; 0x7d
 8001c14:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	60da      	str	r2, [r3, #12]

    return true;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	605a      	str	r2, [r3, #4]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <add_item_to_array+0x22>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <add_item_to_array+0x22>
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d101      	bne.n	8001c78 <add_item_to_array+0x26>
    {
        return false;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e01e      	b.n	8001cb6 <add_item_to_array+0x64>
    }

    child = array->child;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e00d      	b.n	8001cb4 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ffc2 	bl	8001c30 <suffix_object>
            array->child->prev = item;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001cc6:	687b      	ldr	r3, [r7, #4]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <add_item_to_object+0x30>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <add_item_to_object+0x30>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <add_item_to_object+0x30>
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d101      	bne.n	8001d08 <add_item_to_object+0x34>
    {
        return false;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e036      	b.n	8001d76 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001d0e:	68b8      	ldr	r0, [r7, #8]
 8001d10:	f7ff ffd5 	bl	8001cbe <cast_away_const>
 8001d14:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	e00e      	b.n	8001d40 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	68b8      	ldr	r0, [r7, #8]
 8001d26:	f7ff f8a3 	bl	8000e70 <cJSON_strdup>
 8001d2a:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <add_item_to_object+0x62>
        {
            return false;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e01f      	b.n	8001d76 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d3e:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <add_item_to_object+0x8c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6a12      	ldr	r2, [r2, #32]
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4798      	blx	r3
    }

    item->string = new_key;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff ff6f 	bl	8001c52 <add_item_to_array>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <cJSON_AddItemToObject+0x28>)
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7ff ff9c 	bl	8001cd4 <add_item_to_object>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000004 	.word	0x20000004

08001dac <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001db4:	480f      	ldr	r0, [pc, #60]	; (8001df4 <cJSON_CreateString+0x48>)
 8001db6:	f7ff f883 	bl	8000ec0 <cJSON_New_Item>
 8001dba:	60f8      	str	r0, [r7, #12]
    if(item)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d012      	beq.n	8001de8 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8001dc8:	490a      	ldr	r1, [pc, #40]	; (8001df4 <cJSON_CreateString+0x48>)
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff f850 	bl	8000e70 <cJSON_strdup>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff f884 	bl	8000eec <cJSON_Delete>
            return NULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e000      	b.n	8001dea <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8001de8:	68fb      	ldr	r3, [r7, #12]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000004 	.word	0x20000004

08001df8 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001dfe:	4807      	ldr	r0, [pc, #28]	; (8001e1c <cJSON_CreateObject+0x24>)
 8001e00:	f7ff f85e 	bl	8000ec0 <cJSON_New_Item>
 8001e04:	6078      	str	r0, [r7, #4]
    if (item)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000004 	.word	0x20000004

08001e20 <eventLoopTask>:

#include "event_loop.h"
#include "dht11.h"

void eventLoopTask(void const * argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osEvent evt;
	int32_t i;
	DEBUG_PRINT("eventLoopTask..");
 8001e28:	2310      	movs	r3, #16
 8001e2a:	4a33      	ldr	r2, [pc, #204]	; (8001ef8 <eventLoopTask+0xd8>)
 8001e2c:	4933      	ldr	r1, [pc, #204]	; (8001efc <eventLoopTask+0xdc>)
 8001e2e:	4834      	ldr	r0, [pc, #208]	; (8001f00 <eventLoopTask+0xe0>)
 8001e30:	f002 fd54 	bl	80048dc <_debugPrint>
  /* Infinite loop */
  for (;;)
  {
		evt = osSignalWait(0x00FF, 50);
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	2232      	movs	r2, #50	; 0x32
 8001e3a:	21ff      	movs	r1, #255	; 0xff
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f008 ff59 	bl	800acf4 <osSignalWait>
		if (evt.status == osEventSignal)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d152      	bne.n	8001eee <eventLoopTask+0xce>
		{
			for (i=0; i<=5; i++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	e04c      	b.n	8001ee8 <eventLoopTask+0xc8>
			{
				switch ((evt.value.signals) & (1U << i))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4619      	mov	r1, r3
 8001e52:	2201      	movs	r2, #1
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	2b0f      	cmp	r3, #15
 8001e60:	d83e      	bhi.n	8001ee0 <eventLoopTask+0xc0>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <eventLoopTask+0x48>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001ec5 	.word	0x08001ec5
 8001e6c:	08001ec5 	.word	0x08001ec5
 8001e70:	08001ee1 	.word	0x08001ee1
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	08001ee1 	.word	0x08001ee1
 8001e7c:	08001ee1 	.word	0x08001ee1
 8001e80:	08001ee1 	.word	0x08001ee1
 8001e84:	08001ec5 	.word	0x08001ec5
 8001e88:	08001ee1 	.word	0x08001ee1
 8001e8c:	08001ee1 	.word	0x08001ee1
 8001e90:	08001ee1 	.word	0x08001ee1
 8001e94:	08001ee1 	.word	0x08001ee1
 8001e98:	08001ee1 	.word	0x08001ee1
 8001e9c:	08001ee1 	.word	0x08001ee1
 8001ea0:	08001ee1 	.word	0x08001ee1
 8001ea4:	08001ea9 	.word	0x08001ea9
				{
					case UPDATE_SENSOR_VALUE:
						ring_buffer_queue(&ring_buffer, (char)(evt.value.signals) & (1U << i));
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	2101      	movs	r1, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4811      	ldr	r0, [pc, #68]	; (8001f04 <eventLoopTask+0xe4>)
 8001ebe:	f000 fc33 	bl	8002728 <ring_buffer_queue>
						break;
 8001ec2:	e00e      	b.n	8001ee2 <eventLoopTask+0xc2>
					case BUZZER_ON:
					case BUZZER_OFF:
					case HUM_ON:
					case HUM_OFF:

						ring_buffer_queue(&ring_buffer, (char)(evt.value.signals) & (1U << i));
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	2101      	movs	r1, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480a      	ldr	r0, [pc, #40]	; (8001f04 <eventLoopTask+0xe4>)
 8001eda:	f000 fc25 	bl	8002728 <ring_buffer_queue>
						break;
 8001ede:	e000      	b.n	8001ee2 <eventLoopTask+0xc2>

					default:
						break;
 8001ee0:	bf00      	nop
			for (i=0; i<=5; i++)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	ddaf      	ble.n	8001e4e <eventLoopTask+0x2e>
				}
			}
		}
		osDelay(1);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f008 feac 	bl	800ac4c <osDelay>
		evt = osSignalWait(0x00FF, 50);
 8001ef4:	e79e      	b.n	8001e34 <eventLoopTask+0x14>
 8001ef6:	bf00      	nop
 8001ef8:	080283e4 	.word	0x080283e4
 8001efc:	08027118 	.word	0x08027118
 8001f00:	08027138 	.word	0x08027138
 8001f04:	2000a330 	.word	0x2000a330

08001f08 <eventLoopInit>:
  }
  /* USER CODE END StartDefaultTask */
}

void eventLoopInit(osPriority Priority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	; 0x30
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(eventLoopHandle);
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
	eventLoopHandle = osSemaphoreCreate(osSemaphore(eventLoopHandle), 1);
 8001f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4618      	mov	r0, r3
 8001f22:	f008 ff33 	bl	800ad8c <osSemaphoreCreate>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <eventLoopInit+0x5c>)
 8001f2a:	6013      	str	r3, [r2, #0]
	osThreadDef(eventLoopTaskName, eventLoopTask, Priority, 0, _EVENT_LOOP_TASK_SIZE);
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <eventLoopInit+0x60>)
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <eventLoopInit+0x64>)
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	82bb      	strh	r3, [r7, #20]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
	eventLoopTaskHandle = osThreadCreate(osThread(eventLoopTaskName), NULL);
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f008 fe2f 	bl	800abb4 <osThreadCreate>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <eventLoopInit+0x68>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	3730      	adds	r7, #48	; 0x30
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000a30c 	.word	0x2000a30c
 8001f68:	08027148 	.word	0x08027148
 8001f6c:	08001e21 	.word	0x08001e21
 8001f70:	2000a300 	.word	0x2000a300

08001f74 <createJsonMessage>:
//osThreadId 		WifiTaskHandle;
extern osSemaphoreId 	WifiSemHandle;
PRODUCT_STATUS   productStatus;

static char *createJsonMessage()
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
	char value[8] = {0,};
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
	char *string = NULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
	cJSON *name  = NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
	cJSON *monitor = cJSON_CreateObject();
 8001f8a:	f7ff ff35 	bl	8001df8 <cJSON_CreateObject>
 8001f8e:	60f8      	str	r0, [r7, #12]

    if (monitor == NULL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d055      	beq.n	8002042 <createJsonMessage+0xce>
    {
        goto end;
    }

    /* Temp */
    snprintf(value, sizeof(value), "%u", dht11Dev.temparature);
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <createJsonMessage+0xf0>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	1d38      	adds	r0, r7, #4
 8001f9c:	4a32      	ldr	r2, [pc, #200]	; (8002068 <createJsonMessage+0xf4>)
 8001f9e:	2108      	movs	r1, #8
 8001fa0:	f023 fd2e 	bl	8025a00 <sniprintf>
    name = cJSON_CreateString(value);
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff00 	bl	8001dac <cJSON_CreateString>
 8001fac:	6138      	str	r0, [r7, #16]
    if (name == NULL)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d048      	beq.n	8002046 <createJsonMessage+0xd2>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "temp", name);
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	492d      	ldr	r1, [pc, #180]	; (800206c <createJsonMessage+0xf8>)
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff fee1 	bl	8001d80 <cJSON_AddItemToObject>


    memset(value, 0x0, sizeof(value));
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f023 f91f 	bl	8025208 <memset>
    /* Humidity */
    snprintf(value, sizeof(value), "%u", dht11Dev.humidity);
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <createJsonMessage+0xf0>)
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	1d38      	adds	r0, r7, #4
 8001fd0:	4a25      	ldr	r2, [pc, #148]	; (8002068 <createJsonMessage+0xf4>)
 8001fd2:	2108      	movs	r1, #8
 8001fd4:	f023 fd14 	bl	8025a00 <sniprintf>
    name = cJSON_CreateString(value);
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fee6 	bl	8001dac <cJSON_CreateString>
 8001fe0:	6138      	str	r0, [r7, #16]
    if (name == NULL)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d030      	beq.n	800204a <createJsonMessage+0xd6>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "humidity", name);
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4921      	ldr	r1, [pc, #132]	; (8002070 <createJsonMessage+0xfc>)
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7ff fec7 	bl	8001d80 <cJSON_AddItemToObject>

    memset(value, 0x0, sizeof(value));
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f023 f905 	bl	8025208 <memset>
    /* Humidity */
    snprintf(value, sizeof(value), "%d", productStatus);
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <createJsonMessage+0x100>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	1d38      	adds	r0, r7, #4
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <createJsonMessage+0x104>)
 8002006:	2108      	movs	r1, #8
 8002008:	f023 fcfa 	bl	8025a00 <sniprintf>
    name = cJSON_CreateString(value);
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fecc 	bl	8001dac <cJSON_CreateString>
 8002014:	6138      	str	r0, [r7, #16]
    if (name == NULL)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d018      	beq.n	800204e <createJsonMessage+0xda>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "status", name);
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4917      	ldr	r1, [pc, #92]	; (800207c <createJsonMessage+0x108>)
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7ff fead 	bl	8001d80 <cJSON_AddItemToObject>


    string = cJSON_Print(monitor);
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff fb6a 	bl	8001700 <cJSON_Print>
 800202c:	6178      	str	r0, [r7, #20]
    if (string == NULL)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10e      	bne.n	8002052 <createJsonMessage+0xde>
    {

        DEBUG_PRINT("Failed to print monitor.");
 8002034:	2345      	movs	r3, #69	; 0x45
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <createJsonMessage+0x10c>)
 8002038:	4912      	ldr	r1, [pc, #72]	; (8002084 <createJsonMessage+0x110>)
 800203a:	4813      	ldr	r0, [pc, #76]	; (8002088 <createJsonMessage+0x114>)
 800203c:	f002 fc4e 	bl	80048dc <_debugPrint>
 8002040:	e008      	b.n	8002054 <createJsonMessage+0xe0>
        goto end;
 8002042:	bf00      	nop
 8002044:	e006      	b.n	8002054 <createJsonMessage+0xe0>
        goto end;
 8002046:	bf00      	nop
 8002048:	e004      	b.n	8002054 <createJsonMessage+0xe0>
        goto end;
 800204a:	bf00      	nop
 800204c:	e002      	b.n	8002054 <createJsonMessage+0xe0>
        goto end;
 800204e:	bf00      	nop
 8002050:	e000      	b.n	8002054 <createJsonMessage+0xe0>
    }

    end:
 8002052:	bf00      	nop
        cJSON_Delete(monitor);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7fe ff49 	bl	8000eec <cJSON_Delete>
        return string;
 800205a:	697b      	ldr	r3, [r7, #20]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000a314 	.word	0x2000a314
 8002068:	0802715c 	.word	0x0802715c
 800206c:	08027160 	.word	0x08027160
 8002070:	08027168 	.word	0x08027168
 8002074:	2000a328 	.word	0x2000a328
 8002078:	08027174 	.word	0x08027174
 800207c:	08027178 	.word	0x08027178
 8002080:	080283f4 	.word	0x080283f4
 8002084:	08027180 	.word	0x08027180
 8002088:	080271a0 	.word	0x080271a0

0800208c <messageForwardServer>:

static void messageForwardServer()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
	char *message = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]

	DEBUG_PRINT("createJsonMessage..");
 8002096:	2351      	movs	r3, #81	; 0x51
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <messageForwardServer+0x44>)
 800209a:	490e      	ldr	r1, [pc, #56]	; (80020d4 <messageForwardServer+0x48>)
 800209c:	480e      	ldr	r0, [pc, #56]	; (80020d8 <messageForwardServer+0x4c>)
 800209e:	f002 fc1d 	bl	80048dc <_debugPrint>

	message = createJsonMessage();
 80020a2:	f7ff ff67 	bl	8001f74 <createJsonMessage>
 80020a6:	6078      	str	r0, [r7, #4]

	publish("test", message);
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	480c      	ldr	r0, [pc, #48]	; (80020dc <messageForwardServer+0x50>)
 80020ac:	f000 fa78 	bl	80025a0 <publish>

	if (message)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <messageForwardServer+0x30>
	{
		free(message);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f023 f876 	bl	80251a8 <free>
	}
	DEBUG_PRINT("publish req");
 80020bc:	235b      	movs	r3, #91	; 0x5b
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <messageForwardServer+0x44>)
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <messageForwardServer+0x48>)
 80020c2:	4807      	ldr	r0, [pc, #28]	; (80020e0 <messageForwardServer+0x54>)
 80020c4:	f002 fc0a 	bl	80048dc <_debugPrint>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	08028408 	.word	0x08028408
 80020d4:	08027180 	.word	0x08027180
 80020d8:	080271bc 	.word	0x080271bc
 80020dc:	080271d0 	.word	0x080271d0
 80020e0:	080271d8 	.word	0x080271d8

080020e4 <messageForwardLcdTask>:

osStatus messageForwardLcdTask(ENV_MSG *envData)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	return osMessagePut(envQueueHandle, (uint32_t)envData, 10);
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <messageForwardLcdTask+0x20>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	220a      	movs	r2, #10
 80020f4:	4618      	mov	r0, r3
 80020f6:	f008 ff35 	bl	800af64 <osMessagePut>
 80020fa:	4603      	mov	r3, r0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2000afa0 	.word	0x2000afa0

08002108 <sensorEventHandling>:

void sensorEventHandling()
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
	ENV_MSG envData;

	if (osSemaphoreWait(sensorSemHandle, 1) == osOK)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <sensorEventHandling+0x48>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2101      	movs	r1, #1
 8002114:	4618      	mov	r0, r3
 8002116:	f008 fe79 	bl	800ae0c <osSemaphoreWait>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d113      	bne.n	8002148 <sensorEventHandling+0x40>
	{
		envData.humid    = (int)dht11Dev.humidity;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <sensorEventHandling+0x4c>)
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	607b      	str	r3, [r7, #4]
		envData.temp     = (int)dht11Dev.temparature;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <sensorEventHandling+0x4c>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	603b      	str	r3, [r7, #0]

		if ( (messageForwardLcdTask(&envData) == osOK) && (isConnectBroker == true) )
 800212c:	463b      	mov	r3, r7
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ffd8 	bl	80020e4 <messageForwardLcdTask>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <sensorEventHandling+0x40>
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <sensorEventHandling+0x50>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <sensorEventHandling+0x40>
		{
			messageForwardServer(&dht11Dev);
 8002142:	4804      	ldr	r0, [pc, #16]	; (8002154 <sensorEventHandling+0x4c>)
 8002144:	f7ff ffa2 	bl	800208c <messageForwardServer>
		}
	}
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2000af94 	.word	0x2000af94
 8002154:	2000a314 	.word	0x2000a314
 8002158:	2000a3b2 	.word	0x2000a3b2

0800215c <_workTask>:

void _workTask(void const * argument)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	//ENV_MSG envData;
	char buf;
	int cnt;
	char debug[32] = {0,};
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	615a      	str	r2, [r3, #20]
 800217a:	619a      	str	r2, [r3, #24]

	ring_buffer_init(&ring_buffer);
 800217c:	4834      	ldr	r0, [pc, #208]	; (8002250 <_workTask+0xf4>)
 800217e:	f000 fac1 	bl	8002704 <ring_buffer_init>

	DEBUG_PRINT("_workTask... init !!!!");
 8002182:	237c      	movs	r3, #124	; 0x7c
 8002184:	4a33      	ldr	r2, [pc, #204]	; (8002254 <_workTask+0xf8>)
 8002186:	4934      	ldr	r1, [pc, #208]	; (8002258 <_workTask+0xfc>)
 8002188:	4834      	ldr	r0, [pc, #208]	; (800225c <_workTask+0x100>)
 800218a:	f002 fba7 	bl	80048dc <_debugPrint>

	for (;;)
	{
		for (cnt = 0; ring_buffer_dequeue(&ring_buffer, &buf) > 0; cnt++)
 800218e:	2300      	movs	r3, #0
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
 8002192:	e04f      	b.n	8002234 <_workTask+0xd8>
		{
			/* Do something with buf... */
			int32_t evn=0;
 8002194:	2300      	movs	r3, #0
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
			evn = (int32_t)buf;
 8002198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
			snprintf(debug, sizeof(debug), "dev:[%lu]\r\n", evn);
 800219e:	f107 000c 	add.w	r0, r7, #12
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	4a2e      	ldr	r2, [pc, #184]	; (8002260 <_workTask+0x104>)
 80021a6:	2120      	movs	r1, #32
 80021a8:	f023 fc2a 	bl	8025a00 <sniprintf>
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	3b01      	subs	r3, #1
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d83b      	bhi.n	800222c <_workTask+0xd0>
 80021b4:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <_workTask+0x60>)
 80021b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ba:	bf00      	nop
 80021bc:	08002203 	.word	0x08002203
 80021c0:	08002203 	.word	0x08002203
 80021c4:	0800222d 	.word	0x0800222d
 80021c8:	0800220f 	.word	0x0800220f
 80021cc:	0800222d 	.word	0x0800222d
 80021d0:	0800222d 	.word	0x0800222d
 80021d4:	0800222d 	.word	0x0800222d
 80021d8:	08002217 	.word	0x08002217
 80021dc:	0800222d 	.word	0x0800222d
 80021e0:	0800222d 	.word	0x0800222d
 80021e4:	0800222d 	.word	0x0800222d
 80021e8:	0800222d 	.word	0x0800222d
 80021ec:	0800222d 	.word	0x0800222d
 80021f0:	0800222d 	.word	0x0800222d
 80021f4:	0800222d 	.word	0x0800222d
 80021f8:	080021fd 	.word	0x080021fd

			switch (evn)
			{
				case UPDATE_SENSOR_VALUE:
					sensorEventHandling();
 80021fc:	f7ff ff84 	bl	8002108 <sensorEventHandling>
					break;
 8002200:	e015      	b.n	800222e <_workTask+0xd2>

				case BUZZER_ON:
				case BUZZER_OFF:
					HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002206:	4817      	ldr	r0, [pc, #92]	; (8002264 <_workTask+0x108>)
 8002208:	f004 fa75 	bl	80066f6 <HAL_GPIO_TogglePin>
					break;
 800220c:	e00f      	b.n	800222e <_workTask+0xd2>
				case HUM_ON:
					productStatus = ON;
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <_workTask+0x10c>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
					break;
 8002214:	e00b      	b.n	800222e <_workTask+0xd2>
				case HUM_OFF:
					//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
					productStatus = OFF;
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <_workTask+0x10c>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
					DEBUG_PRINT(debug);
 800221c:	f107 000c 	add.w	r0, r7, #12
 8002220:	2397      	movs	r3, #151	; 0x97
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <_workTask+0xf8>)
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <_workTask+0xfc>)
 8002226:	f002 fb59 	bl	80048dc <_debugPrint>
					break;
 800222a:	e000      	b.n	800222e <_workTask+0xd2>

				default:
					break;
 800222c:	bf00      	nop
		for (cnt = 0; ring_buffer_dequeue(&ring_buffer, &buf) > 0; cnt++)
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	3301      	adds	r3, #1
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
 8002234:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002238:	4619      	mov	r1, r3
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <_workTask+0xf4>)
 800223c:	f000 faa1 	bl	8002782 <ring_buffer_dequeue>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1a6      	bne.n	8002194 <_workTask+0x38>
			}
		}
	    osDelay(1);
 8002246:	2001      	movs	r0, #1
 8002248:	f008 fd00 	bl	800ac4c <osDelay>
		for (cnt = 0; ring_buffer_dequeue(&ring_buffer, &buf) > 0; cnt++)
 800224c:	e79f      	b.n	800218e <_workTask+0x32>
 800224e:	bf00      	nop
 8002250:	2000a330 	.word	0x2000a330
 8002254:	08028420 	.word	0x08028420
 8002258:	08027180 	.word	0x08027180
 800225c:	080271e4 	.word	0x080271e4
 8002260:	080271fc 	.word	0x080271fc
 8002264:	40021800 	.word	0x40021800
 8002268:	2000a328 	.word	0x2000a328

0800226c <workTaskInit>:
	}
}

void workTaskInit(osPriority Priority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(workHandle);
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
	workHandle = osSemaphoreCreate(osSemaphore(workHandle), 1);
 800227e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002282:	2101      	movs	r1, #1
 8002284:	4618      	mov	r0, r3
 8002286:	f008 fd81 	bl	800ad8c <osSemaphoreCreate>
 800228a:	4603      	mov	r3, r0
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <workTaskInit+0x5c>)
 800228e:	6013      	str	r3, [r2, #0]
	osThreadDef(workTaskName, _workTask, Priority, 0, _WORK_TASK_SIZE);
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <workTaskInit+0x60>)
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <workTaskInit+0x64>)
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	82bb      	strh	r3, [r7, #20]
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
	workTaskHandle = osThreadCreate(osThread(workTaskName), NULL);
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f008 fc7d 	bl	800abb4 <osThreadCreate>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <workTaskInit+0x68>)
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	3730      	adds	r7, #48	; 0x30
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2000a32c 	.word	0x2000a32c
 80022cc:	08027208 	.word	0x08027208
 80022d0:	0800215d 	.word	0x0800215d
 80022d4:	2000a3b4 	.word	0x2000a3b4

080022d8 <Connect_Broker>:
	HAL_TIM_Base_Start_IT(&htim7);
	osSemaphoreWait(WifiSemHandle, osWaitForever);
}
#elif (1)
void Connect_Broker(char *Ip ,char *Port)
{
 80022d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022da:	b091      	sub	sp, #68	; 0x44
 80022dc:	af0a      	add	r7, sp, #40	; 0x28
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIPCLOSE\r\n",strlen("AT+CIPCLOSE\r\n"),1000);
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	220d      	movs	r2, #13
 80022e8:	4963      	ldr	r1, [pc, #396]	; (8002478 <Connect_Broker+0x1a0>)
 80022ea:	4864      	ldr	r0, [pc, #400]	; (800247c <Connect_Broker+0x1a4>)
 80022ec:	f007 ffbd 	bl	800a26a <HAL_UART_Transmit>
	HAL_Delay(100);
 80022f0:	2064      	movs	r0, #100	; 0x64
 80022f2:	f003 fc21 	bl	8005b38 <HAL_Delay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"),1000);
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	220d      	movs	r2, #13
 80022fc:	4960      	ldr	r1, [pc, #384]	; (8002480 <Connect_Broker+0x1a8>)
 80022fe:	485f      	ldr	r0, [pc, #380]	; (800247c <Connect_Broker+0x1a4>)
 8002300:	f007 ffb3 	bl	800a26a <HAL_UART_Transmit>
	HAL_Delay(100);
 8002304:	2064      	movs	r0, #100	; 0x64
 8002306:	f003 fc17 	bl	8005b38 <HAL_Delay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),1000);
 800230a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230e:	220a      	movs	r2, #10
 8002310:	495c      	ldr	r1, [pc, #368]	; (8002484 <Connect_Broker+0x1ac>)
 8002312:	485a      	ldr	r0, [pc, #360]	; (800247c <Connect_Broker+0x1a4>)
 8002314:	f007 ffa9 	bl	800a26a <HAL_UART_Transmit>
	HAL_Delay(100);
 8002318:	2064      	movs	r0, #100	; 0x64
 800231a:	f003 fc0d 	bl	8005b38 <HAL_Delay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n",Ip,Port),5000);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4959      	ldr	r1, [pc, #356]	; (8002488 <Connect_Broker+0x1b0>)
 8002324:	4859      	ldr	r0, [pc, #356]	; (800248c <Connect_Broker+0x1b4>)
 8002326:	f023 fb9f 	bl	8025a68 <siprintf>
 800232a:	4603      	mov	r3, r0
 800232c:	b29a      	uxth	r2, r3
 800232e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002332:	4956      	ldr	r1, [pc, #344]	; (800248c <Connect_Broker+0x1b4>)
 8002334:	4851      	ldr	r0, [pc, #324]	; (800247c <Connect_Broker+0x1a4>)
 8002336:	f007 ff98 	bl	800a26a <HAL_UART_Transmit>
	HAL_Delay(2000);
 800233a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800233e:	f003 fbfb 	bl	8005b38 <HAL_Delay>

	//connect packet

	ProtocolNameLength = strlen(protocolName);
 8002342:	4b53      	ldr	r3, [pc, #332]	; (8002490 <Connect_Broker+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fd ffa2 	bl	8000290 <strlen>
 800234c:	4603      	mov	r3, r0
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <Connect_Broker+0x1bc>)
 8002352:	801a      	strh	r2, [r3, #0]
	ClientIDLength     = strlen(clientID1);
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <Connect_Broker+0x1c0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fd ff99 	bl	8000290 <strlen>
 800235e:	4603      	mov	r3, r0
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b4e      	ldr	r3, [pc, #312]	; (800249c <Connect_Broker+0x1c4>)
 8002364:	801a      	strh	r2, [r3, #0]
	uint8_t Remainlength;
	Remainlength = 2+ProtocolNameLength+6+ClientIDLength;
 8002366:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <Connect_Broker+0x1bc>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <Connect_Broker+0x1c4>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4413      	add	r3, r2
 8002374:	b2db      	uxtb	r3, r3
 8002376:	3308      	adds	r3, #8
 8002378:	75fb      	strb	r3, [r7, #23]
	uint16_t length = sprintf(tx_buffer,"%c%c%c%c%s%c%c%c%c%c%c%s",(char)connect,(char)Remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocolName,(char)level,(char)flag,(char)(keepAlive << 8),(char)keepAlive,(char)(ClientIDLength << 8),(char)ClientIDLength,clientID1);
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <Connect_Broker+0x1c8>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	469c      	mov	ip, r3
 8002380:	7df9      	ldrb	r1, [r7, #23]
 8002382:	4b44      	ldr	r3, [pc, #272]	; (8002494 <Connect_Broker+0x1bc>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <Connect_Broker+0x1b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a45      	ldr	r2, [pc, #276]	; (80024a4 <Connect_Broker+0x1cc>)
 8002390:	7812      	ldrb	r2, [r2, #0]
 8002392:	4614      	mov	r4, r2
 8002394:	4a44      	ldr	r2, [pc, #272]	; (80024a8 <Connect_Broker+0x1d0>)
 8002396:	7812      	ldrb	r2, [r2, #0]
 8002398:	4615      	mov	r5, r2
 800239a:	4a44      	ldr	r2, [pc, #272]	; (80024ac <Connect_Broker+0x1d4>)
 800239c:	8812      	ldrh	r2, [r2, #0]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4616      	mov	r6, r2
 80023a2:	4a3e      	ldr	r2, [pc, #248]	; (800249c <Connect_Broker+0x1c4>)
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <Connect_Broker+0x1c0>)
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	9209      	str	r2, [sp, #36]	; 0x24
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	9208      	str	r2, [sp, #32]
 80023b4:	2200      	movs	r2, #0
 80023b6:	9207      	str	r2, [sp, #28]
 80023b8:	9606      	str	r6, [sp, #24]
 80023ba:	2200      	movs	r2, #0
 80023bc:	9205      	str	r2, [sp, #20]
 80023be:	9504      	str	r5, [sp, #16]
 80023c0:	9403      	str	r4, [sp, #12]
 80023c2:	9302      	str	r3, [sp, #8]
 80023c4:	9001      	str	r0, [sp, #4]
 80023c6:	2300      	movs	r3, #0
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	460b      	mov	r3, r1
 80023cc:	4662      	mov	r2, ip
 80023ce:	4938      	ldr	r1, [pc, #224]	; (80024b0 <Connect_Broker+0x1d8>)
 80023d0:	482e      	ldr	r0, [pc, #184]	; (800248c <Connect_Broker+0x1b4>)
 80023d2:	f023 fb49 	bl	8025a68 <siprintf>
 80023d6:	4603      	mov	r3, r0
 80023d8:	82bb      	strh	r3, [r7, #20]

	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length),1000);
 80023da:	8abb      	ldrh	r3, [r7, #20]
 80023dc:	461a      	mov	r2, r3
 80023de:	4935      	ldr	r1, [pc, #212]	; (80024b4 <Connect_Broker+0x1dc>)
 80023e0:	482a      	ldr	r0, [pc, #168]	; (800248c <Connect_Broker+0x1b4>)
 80023e2:	f023 fb41 	bl	8025a68 <siprintf>
 80023e6:	4603      	mov	r3, r0
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ee:	4927      	ldr	r1, [pc, #156]	; (800248c <Connect_Broker+0x1b4>)
 80023f0:	4822      	ldr	r0, [pc, #136]	; (800247c <Connect_Broker+0x1a4>)
 80023f2:	f007 ff3a 	bl	800a26a <HAL_UART_Transmit>
	HAL_Delay(100);
 80023f6:	2064      	movs	r0, #100	; 0x64
 80023f8:	f003 fb9e 	bl	8005b38 <HAL_Delay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%s%c%c%c%c%c%c%s",(char)connect,(char)Remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocolName,(char)level,(char)flag,(char)(keepAlive << 8),(char)keepAlive,(char)(ClientIDLength << 8),(char)ClientIDLength,clientID1),5000);
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <Connect_Broker+0x1c8>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	469c      	mov	ip, r3
 8002402:	7df9      	ldrb	r1, [r7, #23]
 8002404:	4b23      	ldr	r3, [pc, #140]	; (8002494 <Connect_Broker+0x1bc>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	4618      	mov	r0, r3
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <Connect_Broker+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <Connect_Broker+0x1cc>)
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	4614      	mov	r4, r2
 8002416:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <Connect_Broker+0x1d0>)
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	4615      	mov	r5, r2
 800241c:	4a23      	ldr	r2, [pc, #140]	; (80024ac <Connect_Broker+0x1d4>)
 800241e:	8812      	ldrh	r2, [r2, #0]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4616      	mov	r6, r2
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <Connect_Broker+0x1c4>)
 8002426:	8812      	ldrh	r2, [r2, #0]
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <Connect_Broker+0x1c0>)
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	9209      	str	r2, [sp, #36]	; 0x24
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	9208      	str	r2, [sp, #32]
 8002436:	2200      	movs	r2, #0
 8002438:	9207      	str	r2, [sp, #28]
 800243a:	9606      	str	r6, [sp, #24]
 800243c:	2200      	movs	r2, #0
 800243e:	9205      	str	r2, [sp, #20]
 8002440:	9504      	str	r5, [sp, #16]
 8002442:	9403      	str	r4, [sp, #12]
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	9001      	str	r0, [sp, #4]
 8002448:	2300      	movs	r3, #0
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	460b      	mov	r3, r1
 800244e:	4662      	mov	r2, ip
 8002450:	4917      	ldr	r1, [pc, #92]	; (80024b0 <Connect_Broker+0x1d8>)
 8002452:	480e      	ldr	r0, [pc, #56]	; (800248c <Connect_Broker+0x1b4>)
 8002454:	f023 fb08 	bl	8025a68 <siprintf>
 8002458:	4603      	mov	r3, r0
 800245a:	b29a      	uxth	r2, r3
 800245c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002460:	490a      	ldr	r1, [pc, #40]	; (800248c <Connect_Broker+0x1b4>)
 8002462:	4806      	ldr	r0, [pc, #24]	; (800247c <Connect_Broker+0x1a4>)
 8002464:	f007 ff01 	bl	800a26a <HAL_UART_Transmit>

	isConnectBroker = true;
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <Connect_Broker+0x1e0>)
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002476:	bf00      	nop
 8002478:	08027264 	.word	0x08027264
 800247c:	2000b21c 	.word	0x2000b21c
 8002480:	08027274 	.word	0x08027274
 8002484:	08027284 	.word	0x08027284
 8002488:	08027290 	.word	0x08027290
 800248c:	2000a5b8 	.word	0x2000a5b8
 8002490:	20000014 	.word	0x20000014
 8002494:	2000a3bc 	.word	0x2000a3bc
 8002498:	20000020 	.word	0x20000020
 800249c:	2000a5b4 	.word	0x2000a5b4
 80024a0:	20000010 	.word	0x20000010
 80024a4:	20000018 	.word	0x20000018
 80024a8:	20000019 	.word	0x20000019
 80024ac:	2000001a 	.word	0x2000001a
 80024b0:	080272ac 	.word	0x080272ac
 80024b4:	080272c8 	.word	0x080272c8
 80024b8:	2000a3b2 	.word	0x2000a3b2

080024bc <Subscribe>:

	isConnectBroker = true;
}
#endif
void Subscribe(char *topic)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b08b      	sub	sp, #44	; 0x2c
 80024c0:	af06      	add	r7, sp, #24
 80024c2:	6078      	str	r0, [r7, #4]
	uint16_t TopicLength = strlen(topic);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7fd fee3 	bl	8000290 <strlen>
 80024ca:	4603      	mov	r3, r0
 80024cc:	81fb      	strh	r3, [r7, #14]
	uint8_t RemainLength = 2+2+TopicLength+1; // packetIDlength(2) + topiclengthdata(2)+topiclength+Qos
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	3305      	adds	r3, #5
 80024d4:	737b      	strb	r3, [r7, #13]
	uint16_t length = sprintf(tx_buffer,"%c%c%c%c%c%c%s%c",(char)subscribeCon,(char)RemainLength,(char)(packetID << 8),(char)packetID,(char)(TopicLength << 8),(char)TopicLength,topic,(char)Qos);
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <Subscribe+0xc8>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461c      	mov	r4, r3
 80024dc:	7b7a      	ldrb	r2, [r7, #13]
 80024de:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <Subscribe+0xcc>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4619      	mov	r1, r3
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <Subscribe+0xd0>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	9305      	str	r3, [sp, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	9304      	str	r3, [sp, #16]
 80024f6:	9003      	str	r0, [sp, #12]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9302      	str	r3, [sp, #8]
 80024fc:	9101      	str	r1, [sp, #4]
 80024fe:	2300      	movs	r3, #0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	4622      	mov	r2, r4
 8002506:	4922      	ldr	r1, [pc, #136]	; (8002590 <Subscribe+0xd4>)
 8002508:	4822      	ldr	r0, [pc, #136]	; (8002594 <Subscribe+0xd8>)
 800250a:	f023 faad 	bl	8025a68 <siprintf>
 800250e:	4603      	mov	r3, r0
 8002510:	817b      	strh	r3, [r7, #10]



	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length),1000);
 8002512:	897b      	ldrh	r3, [r7, #10]
 8002514:	461a      	mov	r2, r3
 8002516:	4920      	ldr	r1, [pc, #128]	; (8002598 <Subscribe+0xdc>)
 8002518:	481e      	ldr	r0, [pc, #120]	; (8002594 <Subscribe+0xd8>)
 800251a:	f023 faa5 	bl	8025a68 <siprintf>
 800251e:	4603      	mov	r3, r0
 8002520:	b29a      	uxth	r2, r3
 8002522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002526:	491b      	ldr	r1, [pc, #108]	; (8002594 <Subscribe+0xd8>)
 8002528:	481c      	ldr	r0, [pc, #112]	; (800259c <Subscribe+0xe0>)
 800252a:	f007 fe9e 	bl	800a26a <HAL_UART_Transmit>
	//HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d,%d\r\n", 0, length),1000);
	osDelay(100);
 800252e:	2064      	movs	r0, #100	; 0x64
 8002530:	f008 fb8c 	bl	800ac4c <osDelay>
	//HAL_TIM_Base_Start_IT(&htim7);
	//osSemaphoreWait(WifiSemHandle, osWaitForever);
	//Wifi_RxClear();

	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%c%c%s%c",(char)subscribeCon,(char)RemainLength,(char)(packetID << 8),(char)packetID,(char)(TopicLength << 8),(char)TopicLength,topic,(char)Qos),5000);
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <Subscribe+0xc8>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461c      	mov	r4, r3
 800253a:	7b7a      	ldrb	r2, [r7, #13]
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <Subscribe+0xcc>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	89fb      	ldrh	r3, [r7, #14]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4618      	mov	r0, r3
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <Subscribe+0xd0>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	9305      	str	r3, [sp, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	9304      	str	r3, [sp, #16]
 8002554:	9003      	str	r0, [sp, #12]
 8002556:	2300      	movs	r3, #0
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	9101      	str	r1, [sp, #4]
 800255c:	2300      	movs	r3, #0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	4622      	mov	r2, r4
 8002564:	490a      	ldr	r1, [pc, #40]	; (8002590 <Subscribe+0xd4>)
 8002566:	480b      	ldr	r0, [pc, #44]	; (8002594 <Subscribe+0xd8>)
 8002568:	f023 fa7e 	bl	8025a68 <siprintf>
 800256c:	4603      	mov	r3, r0
 800256e:	b29a      	uxth	r2, r3
 8002570:	f241 3388 	movw	r3, #5000	; 0x1388
 8002574:	4907      	ldr	r1, [pc, #28]	; (8002594 <Subscribe+0xd8>)
 8002576:	4809      	ldr	r0, [pc, #36]	; (800259c <Subscribe+0xe0>)
 8002578:	f007 fe77 	bl	800a26a <HAL_UART_Transmit>

	//Wifi_RxClear();
	//HAL_TIM_Base_Start_IT(&htim7);
	//osSemaphoreWait(WifiSemHandle, osWaitForever);

}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	20000012 	.word	0x20000012
 8002588:	2000001c 	.word	0x2000001c
 800258c:	2000019c 	.word	0x2000019c
 8002590:	080272d8 	.word	0x080272d8
 8002594:	2000a5b8 	.word	0x2000a5b8
 8002598:	080272c8 	.word	0x080272c8
 800259c:	2000b21c 	.word	0x2000b21c

080025a0 <publish>:
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message),5000);
	osDelay(100);
}
#elif (1)
void publish(char *topic, char *message)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af04      	add	r7, sp, #16
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]

	if (!message || !(*message))
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d069      	beq.n	8002684 <publish+0xe4>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d065      	beq.n	8002684 <publish+0xe4>
	{
		return;
	}
	uint16_t topiclength = strlen(topic);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7fd fe69 	bl	8000290 <strlen>
 80025be:	4603      	mov	r3, r0
 80025c0:	81fb      	strh	r3, [r7, #14]
	uint8_t remainlength = 2+topiclength+strlen(message);
 80025c2:	89fb      	ldrh	r3, [r7, #14]
 80025c4:	b2dc      	uxtb	r4, r3
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	f7fd fe62 	bl	8000290 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4423      	add	r3, r4
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3302      	adds	r3, #2
 80025d6:	737b      	strb	r3, [r7, #13]

	int length = sprintf(tx_buffer,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message);
 80025d8:	4b2c      	ldr	r3, [pc, #176]	; (800268c <publish+0xec>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	7b7a      	ldrb	r2, [r7, #13]
 80025e0:	89fb      	ldrh	r3, [r7, #14]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	4619      	mov	r1, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	9303      	str	r3, [sp, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	9302      	str	r3, [sp, #8]
 80025ee:	9101      	str	r1, [sp, #4]
 80025f0:	2300      	movs	r3, #0
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	4602      	mov	r2, r0
 80025f8:	4925      	ldr	r1, [pc, #148]	; (8002690 <publish+0xf0>)
 80025fa:	4826      	ldr	r0, [pc, #152]	; (8002694 <publish+0xf4>)
 80025fc:	f023 fa34 	bl	8025a68 <siprintf>
 8002600:	60b8      	str	r0, [r7, #8]

	Wifi_RxClear();
 8002602:	f000 fad3 	bl	8002bac <Wifi_RxClear>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length),100);
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4923      	ldr	r1, [pc, #140]	; (8002698 <publish+0xf8>)
 800260a:	4822      	ldr	r0, [pc, #136]	; (8002694 <publish+0xf4>)
 800260c:	f023 fa2c 	bl	8025a68 <siprintf>
 8002610:	4603      	mov	r3, r0
 8002612:	b29a      	uxth	r2, r3
 8002614:	2364      	movs	r3, #100	; 0x64
 8002616:	491f      	ldr	r1, [pc, #124]	; (8002694 <publish+0xf4>)
 8002618:	4820      	ldr	r0, [pc, #128]	; (800269c <publish+0xfc>)
 800261a:	f007 fe26 	bl	800a26a <HAL_UART_Transmit>
	//HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d,%d\r\n",0, length),100);
	HAL_TIM_Base_Start_IT(&htim7);
 800261e:	4820      	ldr	r0, [pc, #128]	; (80026a0 <publish+0x100>)
 8002620:	f007 f9a4 	bl	800996c <HAL_TIM_Base_Start_IT>
	osSemaphoreWait(WifiSemHandle, osWaitForever);
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <publish+0x104>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	4618      	mov	r0, r3
 800262e:	f008 fbed 	bl	800ae0c <osSemaphoreWait>

	Wifi_RxClear();
 8002632:	f000 fabb 	bl	8002bac <Wifi_RxClear>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message),5000);
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <publish+0xec>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	7b7a      	ldrb	r2, [r7, #13]
 800263e:	89fb      	ldrh	r3, [r7, #14]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	9303      	str	r3, [sp, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	9101      	str	r1, [sp, #4]
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	4602      	mov	r2, r0
 8002656:	490e      	ldr	r1, [pc, #56]	; (8002690 <publish+0xf0>)
 8002658:	480e      	ldr	r0, [pc, #56]	; (8002694 <publish+0xf4>)
 800265a:	f023 fa05 	bl	8025a68 <siprintf>
 800265e:	4603      	mov	r3, r0
 8002660:	b29a      	uxth	r2, r3
 8002662:	f241 3388 	movw	r3, #5000	; 0x1388
 8002666:	490b      	ldr	r1, [pc, #44]	; (8002694 <publish+0xf4>)
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <publish+0xfc>)
 800266a:	f007 fdfe 	bl	800a26a <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim7);
 800266e:	480c      	ldr	r0, [pc, #48]	; (80026a0 <publish+0x100>)
 8002670:	f007 f97c 	bl	800996c <HAL_TIM_Base_Start_IT>
	osSemaphoreWait(WifiSemHandle, osWaitForever);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <publish+0x104>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	4618      	mov	r0, r3
 800267e:	f008 fbc5 	bl	800ae0c <osSemaphoreWait>
 8002682:	e000      	b.n	8002686 <publish+0xe6>
		return;
 8002684:	bf00      	nop

}
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}
 800268c:	20000011 	.word	0x20000011
 8002690:	080272ec 	.word	0x080272ec
 8002694:	2000a5b8 	.word	0x2000a5b8
 8002698:	080272c8 	.word	0x080272c8
 800269c:	2000b21c 	.word	0x2000b21c
 80026a0:	2000b190 	.word	0x2000b190
 80026a4:	2000a3b8 	.word	0x2000a3b8

080026a8 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026bc:	429a      	cmp	r2, r3
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ee:	2b7f      	cmp	r3, #127	; 0x7f
 80026f0:	bf0c      	ite	eq
 80026f2:	2301      	moveq	r3, #1
 80026f4:	2300      	movne	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  buffer->head_index = 0;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ffcc 	bl	80026d2 <ring_buffer_is_full>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002746:	3301      	adds	r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800274e:	b2da      	uxtb	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800275c:	4619      	mov	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800276a:	3301      	adds	r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002772:	b2da      	uxtb	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <ring_buffer_dequeue>:
  for(i = 0; i < size; i++) {
    ring_buffer_queue(buffer, data[i]);
  }
}

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff8b 	bl	80026a8 <ring_buffer_is_empty>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8002798:	2300      	movs	r3, #0
 800279a:	e013      	b.n	80027c4 <ring_buffer_dequeue+0x42>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	5c9a      	ldrb	r2, [r3, r2]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80027b2:	3301      	adds	r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return 1;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <dht11Init>:
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
}

/*********************************** DHT11 FUNCTIONS ********************************************/
void dht11Init(DHT11_Dev *dev)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	dev->port = DHT11_GPIO_Port;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <dht11Init+0x20>)
 80027d8:	605a      	str	r2, [r3, #4]
	dev->pin = DHT11_Pin;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2208      	movs	r2, #8
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40021000 	.word	0x40021000

080027f0 <sensorTask>:
extern osThreadId eventLoopTask;
extern osThreadId defaultTaskHandle;
extern osThreadId eventLoopTaskHandle;

void sensorTask(void const * argument)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	  uint8_t status = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]

	  dht11Init(&dht11Dev);
 80027fc:	4813      	ldr	r0, [pc, #76]	; (800284c <sensorTask+0x5c>)
 80027fe:	f7ff ffe5 	bl	80027cc <dht11Init>
	  DEBUG_PRINT("sensorTask init...");
 8002802:	2314      	movs	r3, #20
 8002804:	4a12      	ldr	r2, [pc, #72]	; (8002850 <sensorTask+0x60>)
 8002806:	4913      	ldr	r1, [pc, #76]	; (8002854 <sensorTask+0x64>)
 8002808:	4813      	ldr	r0, [pc, #76]	; (8002858 <sensorTask+0x68>)
 800280a:	f002 f867 	bl	80048dc <_debugPrint>
				Temp_byte2 = dht11Read(&dht11Dev);
				SUM = dht11Read(&dht11Dev);
#endif

#if (1)
				Rh_byte1 = (uint8_t)72;
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <sensorTask+0x6c>)
 8002810:	2248      	movs	r2, #72	; 0x48
 8002812:	701a      	strb	r2, [r3, #0]
				Temp_byte1 = (uint8_t)26;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <sensorTask+0x70>)
 8002816:	221a      	movs	r2, #26
 8002818:	701a      	strb	r2, [r3, #0]
#endif
				dht11Dev.temparature = Temp_byte1;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <sensorTask+0x70>)
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <sensorTask+0x5c>)
 8002820:	701a      	strb	r2, [r3, #0]
				dht11Dev.humidity    = Rh_byte1;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <sensorTask+0x6c>)
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <sensorTask+0x5c>)
 8002828:	705a      	strb	r2, [r3, #1]

				osSemaphoreRelease(sensorSemHandle);
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <sensorTask+0x74>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f008 fb3a 	bl	800aea8 <osSemaphoreRelease>
				osSignalSet(eventLoopTaskHandle, UPDATE_SENSOR_VALUE);
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <sensorTask+0x78>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2110      	movs	r1, #16
 800283a:	4618      	mov	r0, r3
 800283c:	f008 fa1a 	bl	800ac74 <osSignalSet>
				osDelay(1000);
 8002840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002844:	f008 fa02 	bl	800ac4c <osDelay>
				Rh_byte1 = (uint8_t)72;
 8002848:	e7e1      	b.n	800280e <sensorTask+0x1e>
 800284a:	bf00      	nop
 800284c:	2000a314 	.word	0x2000a314
 8002850:	0802842c 	.word	0x0802842c
 8002854:	080272fc 	.word	0x080272fc
 8002858:	08027318 	.word	0x08027318
 800285c:	2000a320 	.word	0x2000a320
 8002860:	2000a305 	.word	0x2000a305
 8002864:	2000af94 	.word	0x2000af94
 8002868:	2000a300 	.word	0x2000a300

0800286c <sensorInit>:
		  }
	  }
}

void sensorInit(osPriority Priority)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	; 0x30
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(sensorHandle);
 8002876:	2300      	movs	r3, #0
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
 800287a:	2300      	movs	r3, #0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sensorHandle = osSemaphoreCreate(osSemaphore(sensorHandle), 1);
 800287e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002882:	2101      	movs	r1, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f008 fa81 	bl	800ad8c <osSemaphoreCreate>
 800288a:	4603      	mov	r3, r0
 800288c:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <sensorInit+0x5c>)
 800288e:	6013      	str	r3, [r2, #0]
	osThreadDef(sensorTaskName, sensorTask, Priority, 0, _SENSOR_TASK_SIZE);
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <sensorInit+0x60>)
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <sensorInit+0x64>)
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	82bb      	strh	r3, [r7, #20]
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
	sensorTaskHandle = osThreadCreate(osThread(sensorTaskName), NULL);
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f008 f97d 	bl	800abb4 <osThreadCreate>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <sensorInit+0x68>)
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	3730      	adds	r7, #48	; 0x30
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2000a650 	.word	0x2000a650
 80028cc:	0802732c 	.word	0x0802732c
 80028d0:	080027f1 	.word	0x080027f1
 80028d4:	2000a654 	.word	0x2000a654

080028d8 <tftLcdInit>:
extern void TouchGFX_Task(void const * argument);

static LCD_DrvTypeDef* LcdDrv;

void tftLcdInit(osPriority	Priority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	; 0x30
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
	LcdDrv = &ili9341_drv;
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <tftLcdInit+0x74>)
 80028e4:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <tftLcdInit+0x78>)
 80028e6:	601a      	str	r2, [r3, #0]
	LcdDrv->Init();
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <tftLcdInit+0x74>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4798      	blx	r3
	LcdDrv->DisplayOff();
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <tftLcdInit+0x74>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4798      	blx	r3

	osSemaphoreDef(lcdHandle);
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fc:	2300      	movs	r3, #0
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	lcdHandle = osSemaphoreCreate(osSemaphore(lcdHandle), 1);
 8002900:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002904:	2101      	movs	r1, #1
 8002906:	4618      	mov	r0, r3
 8002908:	f008 fa40 	bl	800ad8c <osSemaphoreCreate>
 800290c:	4603      	mov	r3, r0
 800290e:	4a11      	ldr	r2, [pc, #68]	; (8002954 <tftLcdInit+0x7c>)
 8002910:	6013      	str	r3, [r2, #0]
	osThreadDef(lcdTaskName, TouchGFX_Task, Priority, 0, _LCD_TASK_SIZE);
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <tftLcdInit+0x80>)
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <tftLcdInit+0x84>)
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	82bb      	strh	r3, [r7, #20]
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
	lcdTaskHandle = osThreadCreate(osThread(lcdTaskName), NULL);
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f008 f93c 	bl	800abb4 <osThreadCreate>
 800293c:	4603      	mov	r3, r0
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <tftLcdInit+0x88>)
 8002940:	6013      	str	r3, [r2, #0]
}
 8002942:	bf00      	nop
 8002944:	3730      	adds	r7, #48	; 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200001a0 	.word	0x200001a0
 8002950:	20000028 	.word	0x20000028
 8002954:	2000a65c 	.word	0x2000a65c
 8002958:	0802733c 	.word	0x0802733c
 800295c:	0800dd81 	.word	0x0800dd81
 8002960:	2000a658 	.word	0x2000a658

08002964 <Wifi_SendRaw>:

extern char rx_buffer[500];

//#########################################################################################################
bool Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002976:	d812      	bhi.n	800299e <Wifi_SendRaw+0x3a>
	{
		memcpy(Wifi.TxBuffer,data,len);
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	461a      	mov	r2, r3
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	480a      	ldr	r0, [pc, #40]	; (80029a8 <Wifi_SendRaw+0x44>)
 8002980:	f022 fc1a 	bl	80251b8 <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,100) == HAL_OK)
 8002984:	887a      	ldrh	r2, [r7, #2]
 8002986:	2364      	movs	r3, #100	; 0x64
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4808      	ldr	r0, [pc, #32]	; (80029ac <Wifi_SendRaw+0x48>)
 800298c:	f007 fc6d 	bl	800a26a <HAL_UART_Transmit>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <Wifi_SendRaw+0x36>
			return true;
 8002996:	2301      	movs	r3, #1
 8002998:	e002      	b.n	80029a0 <Wifi_SendRaw+0x3c>
		else
			return false;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <Wifi_SendRaw+0x3c>
	}
	else
		return false;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	2000a861 	.word	0x2000a861
 80029ac:	2000b21c 	.word	0x2000b21c

080029b0 <Wifi_SendString>:

bool Wifi_SendString(char *data)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7fd fc69 	bl	8000290 <strlen>
 80029be:	4603      	mov	r3, r0
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffcd 	bl	8002964 <Wifi_SendRaw>
 80029ca:	4603      	mov	r3, r0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <Wifi_WaitForString>:
	osDelay(DelayMs);
	return true;
}

bool Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 80029d4:	b40c      	push	{r2, r3}
 80029d6:	b5b0      	push	{r4, r5, r7, lr}
 80029d8:	b088      	sub	sp, #32
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
 80029e0:	466b      	mov	r3, sp
 80029e2:	461d      	mov	r5, r3
	
	if(result == NULL)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <Wifi_WaitForString+0x1a>
		return false;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e070      	b.n	8002ad0 <Wifi_WaitForString+0xfc>
	if(CountOfParameter == 0)
 80029ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <Wifi_WaitForString+0x26>
		return false;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e06a      	b.n	8002ad0 <Wifi_WaitForString+0xfc>

	*result=0;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]

  va_list tag;
	va_start (tag,CountOfParameter);
 8002a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a04:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 8002a06:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	b2e0      	uxtb	r0, r4
 8002a12:	f04f 0100 	mov.w	r1, #0
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	014b      	lsls	r3, r1, #5
 8002a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a24:	0142      	lsls	r2, r0, #5
 8002a26:	b2e0      	uxtb	r0, r4
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	014b      	lsls	r3, r1, #5
 8002a36:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a3a:	0142      	lsls	r2, r0, #5
 8002a3c:	4623      	mov	r3, r4
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	3307      	adds	r3, #7
 8002a42:	08db      	lsrs	r3, r3, #3
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	ebad 0d03 	sub.w	sp, sp, r3
 8002a4a:	466b      	mov	r3, sp
 8002a4c:	3303      	adds	r3, #3
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
 8002a58:	e00a      	b.n	8002a70 <Wifi_WaitForString+0x9c>
		arg[i] = va_arg (tag, char *);	
 8002a5a:	7dfa      	ldrb	r2, [r7, #23]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1d19      	adds	r1, r3, #4
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	75fb      	strb	r3, [r7, #23]
 8002a70:	7dfa      	ldrb	r2, [r7, #23]
 8002a72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d3ef      	bcc.n	8002a5a <Wifi_WaitForString+0x86>
  va_end (tag);
	
		
	//////////////////////////////////	
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e022      	b.n	8002ac6 <Wifi_WaitForString+0xf2>
	{
		osDelay(50);
 8002a80:	2032      	movs	r0, #50	; 0x32
 8002a82:	f008 f8e3 	bl	800ac4c <osDelay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e014      	b.n	8002ab6 <Wifi_WaitForString+0xe2>
		{
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 8002a8c:	7ffa      	ldrb	r2, [r7, #31]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a94:	4619      	mov	r1, r3
 8002a96:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <Wifi_WaitForString+0x10c>)
 8002a98:	f023 f87f 	bl	8025b9a <strstr>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <Wifi_WaitForString+0xdc>
			{
				*result = mx+1;
 8002aa2:	7ffb      	ldrb	r3, [r7, #31]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	701a      	strb	r2, [r3, #0]
				return true;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e00f      	b.n	8002ad0 <Wifi_WaitForString+0xfc>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8002ab0:	7ffb      	ldrb	r3, [r7, #31]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	7ffa      	ldrb	r2, [r7, #31]
 8002ab8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d3e5      	bcc.n	8002a8c <Wifi_WaitForString+0xb8>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	3332      	adds	r3, #50	; 0x32
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d3d8      	bcc.n	8002a80 <Wifi_WaitForString+0xac>
			}				
		}				
	}
	// timeout
	return false;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	46ad      	mov	sp, r5
	
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002adc:	b002      	add	sp, #8
 8002ade:	4770      	bx	lr
 8002ae0:	2000a661 	.word	0x2000a661

08002ae4 <Wifi_ReturnString>:
//#########################################################################################################
bool Wifi_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	460b      	mov	r3, r1
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	72fb      	strb	r3, [r7, #11]
	if(result == NULL) 
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <Wifi_ReturnString+0x18>
		return false;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e02e      	b.n	8002b5a <Wifi_ReturnString+0x76>
	if(WantWhichOne==0)
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <Wifi_ReturnString+0x22>
		return false;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e029      	b.n	8002b5a <Wifi_ReturnString+0x76>

	char *str = (char*)Wifi.RxBuffer;
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <Wifi_ReturnString+0x80>)
 8002b08:	617b      	str	r3, [r7, #20]
	

	str = strtok (str,SplitterChars);
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	6978      	ldr	r0, [r7, #20]
 8002b0e:	f023 f85b 	bl	8025bc8 <strtok>
 8002b12:	6178      	str	r0, [r7, #20]
	if(str == NULL)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <Wifi_ReturnString+0x68>
	{
		strcpy(result,"");
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
		return false;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e01a      	b.n	8002b5a <Wifi_ReturnString+0x76>
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	2000      	movs	r0, #0
 8002b28:	f023 f84e 	bl	8025bc8 <strtok>
 8002b2c:	6178      	str	r0, [r7, #20]
		if(str != NULL)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <Wifi_ReturnString+0x56>
			WantWhichOne--;
 8002b34:	7afb      	ldrb	r3, [r7, #11]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	72fb      	strb	r3, [r7, #11]
		if(WantWhichOne==0)
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <Wifi_ReturnString+0x68>
		{
			strcpy(result,str);
 8002b40:	6979      	ldr	r1, [r7, #20]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f023 f821 	bl	8025b8a <strcpy>
			return true;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e006      	b.n	8002b5a <Wifi_ReturnString+0x76>
	while (str != NULL)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e8      	bne.n	8002b24 <Wifi_ReturnString+0x40>
		}
  }
	strcpy(result,"");
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
	return false;	
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	2000a661 	.word	0x2000a661

08002b68 <Wifi_ReturnInteger>:
	return false;	
	
}
//#########################################################################################################
bool	Wifi_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	460b      	mov	r3, r1
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	72fb      	strb	r3, [r7, #11]
	if((char*)Wifi.RxBuffer == NULL)
		return false;
	if(Wifi_ReturnString((char*)Wifi.RxBuffer,WantWhichOne,SplitterChars)==false)
 8002b76:	7afb      	ldrb	r3, [r7, #11]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <Wifi_ReturnInteger+0x40>)
 8002b7e:	f7ff ffb1 	bl	8002ae4 <Wifi_ReturnString>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f083 0301 	eor.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <Wifi_ReturnInteger+0x2a>
		return false;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e006      	b.n	8002ba0 <Wifi_ReturnInteger+0x38>
	*result = atoi((char*)Wifi.RxBuffer);
 8002b92:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <Wifi_ReturnInteger+0x40>)
 8002b94:	f022 fab2 	bl	80250fc <atoi>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	601a      	str	r2, [r3, #0]
	return true;
 8002b9e:	2301      	movs	r3, #1
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000a661 	.word	0x2000a661

08002bac <Wifi_RxClear>:
	}
	*dst = '\0';
}
//#########################################################################################################
void Wifi_RxClear(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 8002bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4807      	ldr	r0, [pc, #28]	; (8002bd4 <Wifi_RxClear+0x28>)
 8002bb8:	f022 fb26 	bl	8025208 <memset>
	Wifi.RxIndex=0;	
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <Wifi_RxClear+0x2c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
  HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <Wifi_RxClear+0x2c>)
 8002bc8:	4804      	ldr	r0, [pc, #16]	; (8002bdc <Wifi_RxClear+0x30>)
 8002bca:	f007 fbe0 	bl	800a38e <HAL_UART_Receive_IT>
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000a661 	.word	0x2000a661
 8002bd8:	2000a660 	.word	0x2000a660
 8002bdc:	2000b21c 	.word	0x2000b21c

08002be0 <Wifi_TxClear>:
//#########################################################################################################
void Wifi_TxClear(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 8002be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002be8:	2100      	movs	r1, #0
 8002bea:	4802      	ldr	r0, [pc, #8]	; (8002bf4 <Wifi_TxClear+0x14>)
 8002bec:	f022 fb0c 	bl	8025208 <memset>
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	2000a861 	.word	0x2000a861

08002bf8 <WifiTask>:
//#########################################################################################################
//#########################################################################################################
extern int32_t MQTT_Socket;

void WifiTask(void const * argument)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b092      	sub	sp, #72	; 0x48
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
#if (1)


#if (1)
	DEBUG_PRINT("Start WiFi Task !");
 8002c00:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8002c04:	4a34      	ldr	r2, [pc, #208]	; (8002cd8 <WifiTask+0xe0>)
 8002c06:	4935      	ldr	r1, [pc, #212]	; (8002cdc <WifiTask+0xe4>)
 8002c08:	4835      	ldr	r0, [pc, #212]	; (8002ce0 <WifiTask+0xe8>)
 8002c0a:	f001 fe67 	bl	80048dc <_debugPrint>

	HAL_UART_Transmit(&huart1, (uint8_t *)"hello\r\n", (uint16_t)strlen("hello\r\n"), 1000);
 8002c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c12:	2207      	movs	r2, #7
 8002c14:	4933      	ldr	r1, [pc, #204]	; (8002ce4 <WifiTask+0xec>)
 8002c16:	4834      	ldr	r0, [pc, #208]	; (8002ce8 <WifiTask+0xf0>)
 8002c18:	f007 fb27 	bl	800a26a <HAL_UART_Transmit>


	osDelay(1000);
 8002c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c20:	f008 f814 	bl	800ac4c <osDelay>
	Wifi_SendString("AT\r\n");
 8002c24:	4831      	ldr	r0, [pc, #196]	; (8002cec <WifiTask+0xf4>)
 8002c26:	f7ff fec3 	bl	80029b0 <Wifi_SendString>
 	Wifi_SetRfPower(82);
 8002c2a:	2052      	movs	r0, #82	; 0x52
 8002c2c:	f000 f8b6 	bl	8002d9c <Wifi_SetRfPower>


	HAL_UART_Transmit(&huart1, (uint8_t *)"hello1\r\n", (uint16_t)strlen("hello1\r\n"), 1000);
 8002c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c34:	2208      	movs	r2, #8
 8002c36:	492e      	ldr	r1, [pc, #184]	; (8002cf0 <WifiTask+0xf8>)
 8002c38:	482b      	ldr	r0, [pc, #172]	; (8002ce8 <WifiTask+0xf0>)
 8002c3a:	f007 fb16 	bl	800a26a <HAL_UART_Transmit>


    Wifi_TcpIp_GetMultiConnection();
 8002c3e:	f000 fb05 	bl	800324c <Wifi_TcpIp_GetMultiConnection>
    Wifi_TcpIp_Close(0);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 fb66 	bl	8003314 <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(1);
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f000 fb63 	bl	8003314 <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(2);
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f000 fb60 	bl	8003314 <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(3);
 8002c54:	2003      	movs	r0, #3
 8002c56:	f000 fb5d 	bl	8003314 <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(4);
 8002c5a:	2004      	movs	r0, #4
 8002c5c:	f000 fb5a 	bl	8003314 <Wifi_TcpIp_Close>
    Wifi_TcpIp_SetMultiConnection(true);
 8002c60:	2001      	movs	r0, #1
 8002c62:	f000 fa9f 	bl	80031a4 <Wifi_TcpIp_SetMultiConnection>

    HAL_UART_Transmit(&huart1, (uint8_t *)"hello2\r\n", (uint16_t)strlen("hello2\r\n"), 1000);
 8002c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	4921      	ldr	r1, [pc, #132]	; (8002cf4 <WifiTask+0xfc>)
 8002c6e:	481e      	ldr	r0, [pc, #120]	; (8002ce8 <WifiTask+0xf0>)
 8002c70:	f007 fafb 	bl	800a26a <HAL_UART_Transmit>

	Wifi_GetMode();
 8002c74:	f000 f934 	bl	8002ee0 <Wifi_GetMode>

	HAL_UART_Transmit(&huart1, (uint8_t *)"hello3\r\n", (uint16_t)strlen("hello3\r\n"), 1000);
 8002c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	491e      	ldr	r1, [pc, #120]	; (8002cf8 <WifiTask+0x100>)
 8002c80:	4819      	ldr	r0, [pc, #100]	; (8002ce8 <WifiTask+0xf0>)
 8002c82:	f007 faf2 	bl	800a26a <HAL_UART_Transmit>


	Wifi_Station_DhcpIsEnable();
 8002c86:	f000 f9ff 	bl	8003088 <Wifi_Station_DhcpIsEnable>

	HAL_UART_Transmit(&huart1, (uint8_t *)"hello4\r\n", (uint16_t)strlen("hello4\r\n"), 1000);
 8002c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8e:	2208      	movs	r2, #8
 8002c90:	491a      	ldr	r1, [pc, #104]	; (8002cfc <WifiTask+0x104>)
 8002c92:	4815      	ldr	r0, [pc, #84]	; (8002ce8 <WifiTask+0xf0>)
 8002c94:	f007 fae9 	bl	800a26a <HAL_UART_Transmit>

	Wifi_UserInit();
 8002c98:	f000 fb9c 	bl	80033d4 <Wifi_UserInit>

	HAL_UART_Transmit(&huart1, (uint8_t *)"hello5\r\n", (uint16_t)strlen("hello5\r\n"), 1000);
 8002c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	4917      	ldr	r1, [pc, #92]	; (8002d00 <WifiTask+0x108>)
 8002ca4:	4810      	ldr	r0, [pc, #64]	; (8002ce8 <WifiTask+0xf0>)
 8002ca6:	f007 fae0 	bl	800a26a <HAL_UART_Transmit>
	//HAL_UART_Receive_IT(&_WIFI_USART,(uint8_t *)rx_buffer,500);

	//Wifi_Connect("U+NetC568","P91352@4BB");
	//osDelay(5000);

	Connect_Broker("192.168.219.100", "1883");
 8002caa:	4916      	ldr	r1, [pc, #88]	; (8002d04 <WifiTask+0x10c>)
 8002cac:	4816      	ldr	r0, [pc, #88]	; (8002d08 <WifiTask+0x110>)
 8002cae:	f7ff fb13 	bl	80022d8 <Connect_Broker>
	//osSemaphoreRelease(WifiSemHandle);
	HAL_UART_Transmit(&huart1, (uint8_t *)"Connect_Broker\r\n", (uint16_t)strlen("Connect_Broker\r\n"), 1000);
 8002cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	4914      	ldr	r1, [pc, #80]	; (8002d0c <WifiTask+0x114>)
 8002cba:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <WifiTask+0xf0>)
 8002cbc:	f007 fad5 	bl	800a26a <HAL_UART_Transmit>

	osDelay(1000);
 8002cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cc4:	f007 ffc2 	bl	800ac4c <osDelay>
	Subscribe("demoTopic2017");
 8002cc8:	4811      	ldr	r0, [pc, #68]	; (8002d10 <WifiTask+0x118>)
 8002cca:	f7ff fbf7 	bl	80024bc <Subscribe>

	while (1)
	{
		//memset(rx_buffer, 0x0, sizeof(rx_buffer));
		//HAL_UART_Receive_IT(&_WIFI_USART,(uint8_t *)rx_buffer,500);
		osDelay(1);
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f007 ffbc 	bl	800ac4c <osDelay>
 8002cd4:	e7fb      	b.n	8002cce <WifiTask+0xd6>
 8002cd6:	bf00      	nop
 8002cd8:	08028438 	.word	0x08028438
 8002cdc:	08027348 	.word	0x08027348
 8002ce0:	08027360 	.word	0x08027360
 8002ce4:	08027374 	.word	0x08027374
 8002ce8:	2000b1d8 	.word	0x2000b1d8
 8002cec:	0802737c 	.word	0x0802737c
 8002cf0:	08027384 	.word	0x08027384
 8002cf4:	08027390 	.word	0x08027390
 8002cf8:	0802739c 	.word	0x0802739c
 8002cfc:	080273a8 	.word	0x080273a8
 8002d00:	080273b4 	.word	0x080273b4
 8002d04:	080273c0 	.word	0x080273c0
 8002d08:	080273c8 	.word	0x080273c8
 8002d0c:	080273d8 	.word	0x080273d8
 8002d10:	080273ec 	.word	0x080273ec

08002d14 <WifiInit>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void WifiInit(osPriority	Priority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4918      	ldr	r1, [pc, #96]	; (8002d84 <WifiInit+0x70>)
 8002d22:	4819      	ldr	r0, [pc, #100]	; (8002d88 <WifiInit+0x74>)
 8002d24:	f007 fb33 	bl	800a38e <HAL_UART_Receive_IT>
	Wifi_RxClear();
 8002d28:	f7ff ff40 	bl	8002bac <Wifi_RxClear>
	Wifi_TxClear();
 8002d2c:	f7ff ff58 	bl	8002be0 <Wifi_TxClear>
	osSemaphoreDef(WifiSemHandle);
 8002d30:	2300      	movs	r3, #0
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
	WifiSemHandle = osSemaphoreCreate(osSemaphore(WifiSemHandle), 1);
 8002d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f008 f824 	bl	800ad8c <osSemaphoreCreate>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <WifiInit+0x78>)
 8002d48:	6013      	str	r3, [r2, #0]
	osThreadDef(WifiTaskName, WifiTask, Priority, 0, _WIFI_TASK_SIZE);
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <WifiInit+0x7c>)
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <WifiInit+0x80>)
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	82bb      	strh	r3, [r7, #20]
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	2300      	movs	r3, #0
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
	WifiTaskHandle = osThreadCreate(osThread(WifiTaskName), NULL);	
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f007 ff20 	bl	800abb4 <osThreadCreate>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <WifiInit+0x84>)
 8002d78:	6013      	str	r3, [r2, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	3730      	adds	r7, #48	; 0x30
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000a660 	.word	0x2000a660
 8002d88:	2000b21c 	.word	0x2000b21c
 8002d8c:	2000a3b8 	.word	0x2000a3b8
 8002d90:	080273fc 	.word	0x080273fc
 8002d94:	08002bf9 	.word	0x08002bf9
 8002d98:	2000a324 	.word	0x2000a324

08002d9c <Wifi_SetRfPower>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;			
}
//#########################################################################################################
bool	Wifi_SetRfPower(uint8_t Power_0_to_82)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8002da6:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <Wifi_SetRfPower+0x88>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f04f 31ff 	mov.w	r1, #4294967295
 8002dae:	4618      	mov	r0, r3
 8002db0:	f008 f82c 	bl	800ae0c <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8002db8:	f7ff fef8 	bl	8002bac <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RFPOWER=%d\r\n",Power_0_to_82);
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4919      	ldr	r1, [pc, #100]	; (8002e28 <Wifi_SetRfPower+0x8c>)
 8002dc2:	481a      	ldr	r0, [pc, #104]	; (8002e2c <Wifi_SetRfPower+0x90>)
 8002dc4:	f022 fe50 	bl	8025a68 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8002dc8:	4818      	ldr	r0, [pc, #96]	; (8002e2c <Wifi_SetRfPower+0x90>)
 8002dca:	f7ff fdf1 	bl	80029b0 <Wifi_SendString>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f083 0301 	eor.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d115      	bne.n	8002e06 <Wifi_SetRfPower+0x6a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8002dda:	f107 010e 	add.w	r1, r7, #14
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <Wifi_SetRfPower+0x94>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <Wifi_SetRfPower+0x98>)
 8002de4:	2202      	movs	r2, #2
 8002de6:	f241 3088 	movw	r0, #5000	; 0x1388
 8002dea:	f7ff fdf3 	bl	80029d4 <Wifi_WaitForString>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f083 0301 	eor.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d107      	bne.n	8002e0a <Wifi_SetRfPower+0x6e>
			break;
		if(result == 2)
 8002dfa:	7bbb      	ldrb	r3, [r7, #14]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d006      	beq.n	8002e0e <Wifi_SetRfPower+0x72>
			break;			
		returnVal=true;	
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e004      	b.n	8002e10 <Wifi_SetRfPower+0x74>
			break;
 8002e06:	bf00      	nop
 8002e08:	e002      	b.n	8002e10 <Wifi_SetRfPower+0x74>
			break;
 8002e0a:	bf00      	nop
 8002e0c:	e000      	b.n	8002e10 <Wifi_SetRfPower+0x74>
			break;			
 8002e0e:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <Wifi_SetRfPower+0x88>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f008 f847 	bl	800aea8 <osSemaphoreRelease>
	return returnVal;		
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000a3b8 	.word	0x2000a3b8
 8002e28:	08027454 	.word	0x08027454
 8002e2c:	2000a861 	.word	0x2000a861
 8002e30:	0802741c 	.word	0x0802741c
 8002e34:	08027418 	.word	0x08027418

08002e38 <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool Wifi_SetMode(WifiMode_t	WifiMode_)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8002e42:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <Wifi_SetMode+0x90>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f007 ffde 	bl	800ae0c <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8002e54:	f7ff feaa 	bl	8002bac <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	491b      	ldr	r1, [pc, #108]	; (8002ecc <Wifi_SetMode+0x94>)
 8002e5e:	481c      	ldr	r0, [pc, #112]	; (8002ed0 <Wifi_SetMode+0x98>)
 8002e60:	f022 fe02 	bl	8025a68 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8002e64:	481a      	ldr	r0, [pc, #104]	; (8002ed0 <Wifi_SetMode+0x98>)
 8002e66:	f7ff fda3 	bl	80029b0 <Wifi_SendString>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f083 0301 	eor.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d119      	bne.n	8002eaa <Wifi_SetMode+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8002e76:	f107 010e 	add.w	r1, r7, #14
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <Wifi_SetMode+0x9c>)
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <Wifi_SetMode+0xa0>)
 8002e80:	2202      	movs	r2, #2
 8002e82:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e86:	f7ff fda5 	bl	80029d4 <Wifi_WaitForString>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10b      	bne.n	8002eae <Wifi_SetMode+0x76>
			break;
		if(result == 2)
 8002e96:	7bbb      	ldrb	r3, [r7, #14]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d00a      	beq.n	8002eb2 <Wifi_SetMode+0x7a>
			break;			
		Wifi.Mode = WifiMode_;
 8002e9c:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <Wifi_SetMode+0xa4>)
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f882 371a 	strb.w	r3, [r2, #1818]	; 0x71a
		returnVal=true;	
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
 8002ea8:	e004      	b.n	8002eb4 <Wifi_SetMode+0x7c>
			break;
 8002eaa:	bf00      	nop
 8002eac:	e002      	b.n	8002eb4 <Wifi_SetMode+0x7c>
			break;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <Wifi_SetMode+0x7c>
			break;			
 8002eb2:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <Wifi_SetMode+0x90>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f007 fff5 	bl	800aea8 <osSemaphoreRelease>
	return returnVal;		
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000a3b8 	.word	0x2000a3b8
 8002ecc:	08027464 	.word	0x08027464
 8002ed0:	2000a861 	.word	0x2000a861
 8002ed4:	0802741c 	.word	0x0802741c
 8002ed8:	08027418 	.word	0x08027418
 8002edc:	2000a660 	.word	0x2000a660

08002ee0 <Wifi_GetMode>:
//#########################################################################################################
bool Wifi_GetMode(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8002ee6:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <Wifi_GetMode+0xa4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f04f 31ff 	mov.w	r1, #4294967295
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f007 ff8c 	bl	800ae0c <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8002ef8:	f7ff fe58 	bl	8002bac <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR?\r\n");
 8002efc:	4922      	ldr	r1, [pc, #136]	; (8002f88 <Wifi_GetMode+0xa8>)
 8002efe:	4823      	ldr	r0, [pc, #140]	; (8002f8c <Wifi_GetMode+0xac>)
 8002f00:	f022 fdb2 	bl	8025a68 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8002f04:	4821      	ldr	r0, [pc, #132]	; (8002f8c <Wifi_GetMode+0xac>)
 8002f06:	f7ff fd53 	bl	80029b0 <Wifi_SendString>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f083 0301 	eor.w	r3, r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d126      	bne.n	8002f64 <Wifi_GetMode+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8002f16:	1db9      	adds	r1, r7, #6
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <Wifi_GetMode+0xb0>)
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <Wifi_GetMode+0xb4>)
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f241 3088 	movw	r0, #5000	; 0x1388
 8002f24:	f7ff fd56 	bl	80029d4 <Wifi_WaitForString>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f083 0301 	eor.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d119      	bne.n	8002f68 <Wifi_GetMode+0x88>
			break;
		if(result == 2)
 8002f34:	79bb      	ldrb	r3, [r7, #6]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d018      	beq.n	8002f6c <Wifi_GetMode+0x8c>
			break;			
		if(Wifi_ReturnInteger((int32_t*)&result,1,":"))
 8002f3a:	1dbb      	adds	r3, r7, #6
 8002f3c:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <Wifi_GetMode+0xb8>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fe11 	bl	8002b68 <Wifi_ReturnInteger>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <Wifi_GetMode+0x76>
			Wifi.Mode = (WifiMode_t)result ;
 8002f4c:	79ba      	ldrb	r2, [r7, #6]
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <Wifi_GetMode+0xbc>)
 8002f50:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 8002f54:	e003      	b.n	8002f5e <Wifi_GetMode+0x7e>
		else
			Wifi.Mode = WifiMode_Error;
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <Wifi_GetMode+0xbc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
		returnVal=true;	
 8002f5e:	2301      	movs	r3, #1
 8002f60:	71fb      	strb	r3, [r7, #7]
 8002f62:	e004      	b.n	8002f6e <Wifi_GetMode+0x8e>
			break;
 8002f64:	bf00      	nop
 8002f66:	e002      	b.n	8002f6e <Wifi_GetMode+0x8e>
			break;
 8002f68:	bf00      	nop
 8002f6a:	e000      	b.n	8002f6e <Wifi_GetMode+0x8e>
			break;			
 8002f6c:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <Wifi_GetMode+0xa4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f007 ff98 	bl	800aea8 <osSemaphoreRelease>
	return returnVal;
 8002f78:	79fb      	ldrb	r3, [r7, #7]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000a3b8 	.word	0x2000a3b8
 8002f88:	08027478 	.word	0x08027478
 8002f8c:	2000a861 	.word	0x2000a861
 8002f90:	0802741c 	.word	0x0802741c
 8002f94:	08027418 	.word	0x08027418
 8002f98:	0802748c 	.word	0x0802748c
 8002f9c:	2000a660 	.word	0x2000a660

08002fa0 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8002fac:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <Wifi_Station_ConnectToAp+0xc0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f007 ff29 	bl	800ae0c <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 8002fbe:	f7ff fdf5 	bl	8002bac <Wifi_RxClear>
		if(MAC==NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <Wifi_Station_ConnectToAp+0x36>
		{
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4925      	ldr	r1, [pc, #148]	; (8003064 <Wifi_Station_ConnectToAp+0xc4>)
 8002fce:	4826      	ldr	r0, [pc, #152]	; (8003068 <Wifi_Station_ConnectToAp+0xc8>)
 8002fd0:	f022 fd4a 	bl	8025a68 <siprintf>
 8002fd4:	e007      	b.n	8002fe6 <Wifi_Station_ConnectToAp+0x46>
			//sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,Pass);
		}
		else
		{
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4923      	ldr	r1, [pc, #140]	; (800306c <Wifi_Station_ConnectToAp+0xcc>)
 8002fe0:	4821      	ldr	r0, [pc, #132]	; (8003068 <Wifi_Station_ConnectToAp+0xc8>)
 8002fe2:	f022 fd41 	bl	8025a68 <siprintf>
			//sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
		}
		if (Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8002fe6:	4820      	ldr	r0, [pc, #128]	; (8003068 <Wifi_Station_ConnectToAp+0xc8>)
 8002fe8:	f7ff fce2 	bl	80029b0 <Wifi_SendString>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f083 0301 	eor.w	r3, r3, #1
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <Wifi_Station_ConnectToAp+0x68>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"111\r\n", (uint16_t)strlen("111\r\n"), 1000);
 8002ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ffc:	2205      	movs	r2, #5
 8002ffe:	491c      	ldr	r1, [pc, #112]	; (8003070 <Wifi_Station_ConnectToAp+0xd0>)
 8003000:	481c      	ldr	r0, [pc, #112]	; (8003074 <Wifi_Station_ConnectToAp+0xd4>)
 8003002:	f007 f932 	bl	800a26a <HAL_UART_Transmit>
			break;
 8003006:	e020      	b.n	800304a <Wifi_Station_ConnectToAp+0xaa>
		}
		if (Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 8003008:	f107 0116 	add.w	r1, r7, #22
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <Wifi_Station_ConnectToAp+0xd8>)
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	4b1a      	ldr	r3, [pc, #104]	; (800307c <Wifi_Station_ConnectToAp+0xdc>)
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <Wifi_Station_ConnectToAp+0xe0>)
 8003016:	2203      	movs	r2, #3
 8003018:	f64e 2060 	movw	r0, #60000	; 0xea60
 800301c:	f7ff fcda 	bl	80029d4 <Wifi_WaitForString>
 8003020:	4603      	mov	r3, r0
 8003022:	f083 0301 	eor.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <Wifi_Station_ConnectToAp+0x9c>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"ERROR!!!!!!!!!!!!!\r\n", (uint16_t)strlen("ERROR!!!!!!!!!!!!!\r\n"), 1000);
 800302c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003030:	2214      	movs	r2, #20
 8003032:	4914      	ldr	r1, [pc, #80]	; (8003084 <Wifi_Station_ConnectToAp+0xe4>)
 8003034:	480f      	ldr	r0, [pc, #60]	; (8003074 <Wifi_Station_ConnectToAp+0xd4>)
 8003036:	f007 f918 	bl	800a26a <HAL_UART_Transmit>
			break;
 800303a:	e006      	b.n	800304a <Wifi_Station_ConnectToAp+0xaa>
		}

#if (1)
		if( result > 1)
 800303c:	7dbb      	ldrb	r3, [r7, #22]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d802      	bhi.n	8003048 <Wifi_Station_ConnectToAp+0xa8>
		{
			//HAL_UART_Transmit(&huart1, (uint8_t *)"222\r\n", (uint16_t)strlen("222\r\n"), 1000);
			break;
		}
#endif
		returnVal=true;	
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
 8003046:	e000      	b.n	800304a <Wifi_Station_ConnectToAp+0xaa>
			break;
 8003048:	bf00      	nop
	}while(0);

	osSemaphoreRelease(WifiSemHandle);
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <Wifi_Station_ConnectToAp+0xc0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f007 ff2a 	bl	800aea8 <osSemaphoreRelease>
	return returnVal;		
 8003054:	7dfb      	ldrb	r3, [r7, #23]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000a3b8 	.word	0x2000a3b8
 8003064:	080274fc 	.word	0x080274fc
 8003068:	2000a861 	.word	0x2000a861
 800306c:	08027518 	.word	0x08027518
 8003070:	08027538 	.word	0x08027538
 8003074:	2000b1d8 	.word	0x2000b1d8
 8003078:	08027548 	.word	0x08027548
 800307c:	08027554 	.word	0x08027554
 8003080:	08027540 	.word	0x08027540
 8003084:	08027560 	.word	0x08027560

08003088 <Wifi_Station_DhcpIsEnable>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool	Wifi_Station_DhcpIsEnable(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800308e:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <Wifi_Station_DhcpIsEnable+0x100>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f04f 31ff 	mov.w	r1, #4294967295
 8003096:	4618      	mov	r0, r3
 8003098:	f007 feb8 	bl	800ae0c <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800309c:	2300      	movs	r3, #0
 800309e:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 80030a0:	f7ff fd84 	bl	8002bac <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWDHCP_CUR?\r\n");
 80030a4:	4939      	ldr	r1, [pc, #228]	; (800318c <Wifi_Station_DhcpIsEnable+0x104>)
 80030a6:	483a      	ldr	r0, [pc, #232]	; (8003190 <Wifi_Station_DhcpIsEnable+0x108>)
 80030a8:	f022 fcde 	bl	8025a68 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80030ac:	4838      	ldr	r0, [pc, #224]	; (8003190 <Wifi_Station_DhcpIsEnable+0x108>)
 80030ae:	f7ff fc7f 	bl	80029b0 <Wifi_SendString>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f083 0301 	eor.w	r3, r3, #1
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d153      	bne.n	8003166 <Wifi_Station_DhcpIsEnable+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80030be:	1db9      	adds	r1, r7, #6
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <Wifi_Station_DhcpIsEnable+0x10c>)
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	4b34      	ldr	r3, [pc, #208]	; (8003198 <Wifi_Station_DhcpIsEnable+0x110>)
 80030c6:	2202      	movs	r2, #2
 80030c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80030cc:	f7ff fc82 	bl	80029d4 <Wifi_WaitForString>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f083 0301 	eor.w	r3, r3, #1
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d146      	bne.n	800316a <Wifi_Station_DhcpIsEnable+0xe2>
			break;
		if(result == 2)
 80030dc:	79bb      	ldrb	r3, [r7, #6]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d045      	beq.n	800316e <Wifi_Station_DhcpIsEnable+0xe6>
			break;		
		if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 80030e2:	1dbb      	adds	r3, r7, #6
 80030e4:	4a2d      	ldr	r2, [pc, #180]	; (800319c <Wifi_Station_DhcpIsEnable+0x114>)
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fd3d 	bl	8002b68 <Wifi_ReturnInteger>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f083 0301 	eor.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d13b      	bne.n	8003172 <Wifi_Station_DhcpIsEnable+0xea>
			break;
		switch(result)
 80030fa:	79bb      	ldrb	r3, [r7, #6]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d82f      	bhi.n	8003160 <Wifi_Station_DhcpIsEnable+0xd8>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <Wifi_Station_DhcpIsEnable+0x80>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003119 	.word	0x08003119
 800310c:	0800312b 	.word	0x0800312b
 8003110:	0800313d 	.word	0x0800313d
 8003114:	0800314f 	.word	0x0800314f
		{
			case 0:
				Wifi.StationDhcp=false;
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <Wifi_Station_DhcpIsEnable+0x118>)
 800311a:	2200      	movs	r2, #0
 800311c:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 8003120:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <Wifi_Station_DhcpIsEnable+0x118>)
 8003122:	2200      	movs	r2, #0
 8003124:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8003128:	e01a      	b.n	8003160 <Wifi_Station_DhcpIsEnable+0xd8>
			case 1:
				Wifi.StationDhcp=false;
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <Wifi_Station_DhcpIsEnable+0x118>)
 800312c:	2200      	movs	r2, #0
 800312e:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 8003132:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <Wifi_Station_DhcpIsEnable+0x118>)
 8003134:	2201      	movs	r2, #1
 8003136:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 800313a:	e011      	b.n	8003160 <Wifi_Station_DhcpIsEnable+0xd8>
			case 2:
				Wifi.StationDhcp=true;
 800313c:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <Wifi_Station_DhcpIsEnable+0x118>)
 800313e:	2201      	movs	r2, #1
 8003140:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 8003144:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <Wifi_Station_DhcpIsEnable+0x118>)
 8003146:	2200      	movs	r2, #0
 8003148:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 800314c:	e008      	b.n	8003160 <Wifi_Station_DhcpIsEnable+0xd8>
			case 3:
				Wifi.StationDhcp=true;
 800314e:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <Wifi_Station_DhcpIsEnable+0x118>)
 8003150:	2201      	movs	r2, #1
 8003152:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <Wifi_Station_DhcpIsEnable+0x118>)
 8003158:	2201      	movs	r2, #1
 800315a:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;			
 800315e:	bf00      	nop
		}
		returnVal=true;	
 8003160:	2301      	movs	r3, #1
 8003162:	71fb      	strb	r3, [r7, #7]
 8003164:	e006      	b.n	8003174 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8003166:	bf00      	nop
 8003168:	e004      	b.n	8003174 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 800316a:	bf00      	nop
 800316c:	e002      	b.n	8003174 <Wifi_Station_DhcpIsEnable+0xec>
			break;		
 800316e:	bf00      	nop
 8003170:	e000      	b.n	8003174 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8003172:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <Wifi_Station_DhcpIsEnable+0x100>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f007 fe95 	bl	800aea8 <osSemaphoreRelease>
	return returnVal;		
 800317e:	79fb      	ldrb	r3, [r7, #7]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	2000a3b8 	.word	0x2000a3b8
 800318c:	0802759c 	.word	0x0802759c
 8003190:	2000a861 	.word	0x2000a861
 8003194:	0802741c 	.word	0x0802741c
 8003198:	08027418 	.word	0x08027418
 800319c:	0802748c 	.word	0x0802748c
 80031a0:	2000a660 	.word	0x2000a660

080031a4 <Wifi_TcpIp_SetMultiConnection>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <Wifi_TcpIp_SetMultiConnection+0x90>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f04f 31ff 	mov.w	r1, #4294967295
 80031b6:	4618      	mov	r0, r3
 80031b8:	f007 fe28 	bl	800ae0c <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80031c0:	f7ff fcf4 	bl	8002bac <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	461a      	mov	r2, r3
 80031c8:	491b      	ldr	r1, [pc, #108]	; (8003238 <Wifi_TcpIp_SetMultiConnection+0x94>)
 80031ca:	481c      	ldr	r0, [pc, #112]	; (800323c <Wifi_TcpIp_SetMultiConnection+0x98>)
 80031cc:	f022 fc4c 	bl	8025a68 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80031d0:	481a      	ldr	r0, [pc, #104]	; (800323c <Wifi_TcpIp_SetMultiConnection+0x98>)
 80031d2:	f7ff fbed 	bl	80029b0 <Wifi_SendString>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f083 0301 	eor.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d119      	bne.n	8003216 <Wifi_TcpIp_SetMultiConnection+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80031e2:	f107 010e 	add.w	r1, r7, #14
 80031e6:	4b16      	ldr	r3, [pc, #88]	; (8003240 <Wifi_TcpIp_SetMultiConnection+0x9c>)
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <Wifi_TcpIp_SetMultiConnection+0xa0>)
 80031ec:	2202      	movs	r2, #2
 80031ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80031f2:	f7ff fbef 	bl	80029d4 <Wifi_WaitForString>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f083 0301 	eor.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <Wifi_TcpIp_SetMultiConnection+0x76>
			break;
		if(result == 2)
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d00a      	beq.n	800321e <Wifi_TcpIp_SetMultiConnection+0x7a>
			break;				
    Wifi.TcpIpMultiConnection=EnableMultiConnections;		
 8003208:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <Wifi_TcpIp_SetMultiConnection+0xa4>)
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	f882 3819 	strb.w	r3, [r2, #2073]	; 0x819
		returnVal=true;	
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	e004      	b.n	8003220 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 8003216:	bf00      	nop
 8003218:	e002      	b.n	8003220 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 800321a:	bf00      	nop
 800321c:	e000      	b.n	8003220 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;				
 800321e:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <Wifi_TcpIp_SetMultiConnection+0x90>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f007 fe3f 	bl	800aea8 <osSemaphoreRelease>
	return returnVal;			
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	2000a3b8 	.word	0x2000a3b8
 8003238:	08027668 	.word	0x08027668
 800323c:	2000a861 	.word	0x2000a861
 8003240:	0802741c 	.word	0x0802741c
 8003244:	08027418 	.word	0x08027418
 8003248:	2000a660 	.word	0x2000a660

0800324c <Wifi_TcpIp_GetMultiConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_GetMultiConnection(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af02      	add	r7, sp, #8
  
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <Wifi_TcpIp_GetMultiConnection+0xac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f04f 31ff 	mov.w	r1, #4294967295
 800325a:	4618      	mov	r0, r3
 800325c:	f007 fdd6 	bl	800ae0c <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8003260:	2300      	movs	r3, #0
 8003262:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8003264:	f7ff fca2 	bl	8002bac <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX?\r\n");
 8003268:	4924      	ldr	r1, [pc, #144]	; (80032fc <Wifi_TcpIp_GetMultiConnection+0xb0>)
 800326a:	4825      	ldr	r0, [pc, #148]	; (8003300 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 800326c:	f022 fbfc 	bl	8025a68 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8003270:	4823      	ldr	r0, [pc, #140]	; (8003300 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 8003272:	f7ff fb9d 	bl	80029b0 <Wifi_SendString>
 8003276:	4603      	mov	r3, r0
 8003278:	f083 0301 	eor.w	r3, r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d129      	bne.n	80032d6 <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8003282:	1db9      	adds	r1, r7, #6
 8003284:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <Wifi_TcpIp_GetMultiConnection+0xb8>)
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <Wifi_TcpIp_GetMultiConnection+0xbc>)
 800328a:	2202      	movs	r2, #2
 800328c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003290:	f7ff fba0 	bl	80029d4 <Wifi_WaitForString>
 8003294:	4603      	mov	r3, r0
 8003296:	f083 0301 	eor.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11c      	bne.n	80032da <Wifi_TcpIp_GetMultiConnection+0x8e>
			break;
		if(result == 2)
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d01b      	beq.n	80032de <Wifi_TcpIp_GetMultiConnection+0x92>
			break;				
    if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 80032a6:	1dbb      	adds	r3, r7, #6
 80032a8:	4a18      	ldr	r2, [pc, #96]	; (800330c <Wifi_TcpIp_GetMultiConnection+0xc0>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fc5b 	bl	8002b68 <Wifi_ReturnInteger>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f083 0301 	eor.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d111      	bne.n	80032e2 <Wifi_TcpIp_GetMultiConnection+0x96>
      break;
    Wifi.TcpIpMultiConnection=(bool)result;		
 80032be:	79bb      	ldrb	r3, [r7, #6]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <Wifi_TcpIp_GetMultiConnection+0xc4>)
 80032cc:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
		returnVal=true;	
 80032d0:	2301      	movs	r3, #1
 80032d2:	71fb      	strb	r3, [r7, #7]
 80032d4:	e006      	b.n	80032e4 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 80032d6:	bf00      	nop
 80032d8:	e004      	b.n	80032e4 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;				
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <Wifi_TcpIp_GetMultiConnection+0x98>
      break;
 80032e2:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <Wifi_TcpIp_GetMultiConnection+0xac>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f007 fddd 	bl	800aea8 <osSemaphoreRelease>
	return returnVal;			
 80032ee:	79fb      	ldrb	r3, [r7, #7]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	2000a3b8 	.word	0x2000a3b8
 80032fc:	08027678 	.word	0x08027678
 8003300:	2000a861 	.word	0x2000a861
 8003304:	0802741c 	.word	0x0802741c
 8003308:	08027418 	.word	0x08027418
 800330c:	0802748c 	.word	0x0802748c
 8003310:	2000a660 	.word	0x2000a660

08003314 <Wifi_TcpIp_Close>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <Wifi_TcpIp_Close+0xa4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f04f 31ff 	mov.w	r1, #4294967295
 8003326:	4618      	mov	r0, r3
 8003328:	f007 fd70 	bl	800ae0c <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8003330:	f7ff fc3c 	bl	8002bac <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 8003334:	4b21      	ldr	r3, [pc, #132]	; (80033bc <Wifi_TcpIp_Close+0xa8>)
 8003336:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 800333a:	f083 0301 	eor.w	r3, r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <Wifi_TcpIp_Close+0x3a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 8003344:	491e      	ldr	r1, [pc, #120]	; (80033c0 <Wifi_TcpIp_Close+0xac>)
 8003346:	481f      	ldr	r0, [pc, #124]	; (80033c4 <Wifi_TcpIp_Close+0xb0>)
 8003348:	f022 fb8e 	bl	8025a68 <siprintf>
 800334c:	e005      	b.n	800335a <Wifi_TcpIp_Close+0x46>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	461a      	mov	r2, r3
 8003352:	491d      	ldr	r1, [pc, #116]	; (80033c8 <Wifi_TcpIp_Close+0xb4>)
 8003354:	481b      	ldr	r0, [pc, #108]	; (80033c4 <Wifi_TcpIp_Close+0xb0>)
 8003356:	f022 fb87 	bl	8025a68 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800335a:	481a      	ldr	r0, [pc, #104]	; (80033c4 <Wifi_TcpIp_Close+0xb0>)
 800335c:	f7ff fb28 	bl	80029b0 <Wifi_SendString>
 8003360:	4603      	mov	r3, r0
 8003362:	f083 0301 	eor.w	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d115      	bne.n	8003398 <Wifi_TcpIp_Close+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800336c:	f107 010e 	add.w	r1, r7, #14
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <Wifi_TcpIp_Close+0xb8>)
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <Wifi_TcpIp_Close+0xbc>)
 8003376:	2202      	movs	r2, #2
 8003378:	f241 3088 	movw	r0, #5000	; 0x1388
 800337c:	f7ff fb2a 	bl	80029d4 <Wifi_WaitForString>
 8003380:	4603      	mov	r3, r0
 8003382:	f083 0301 	eor.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <Wifi_TcpIp_Close+0x88>
			break;
		if(result == 2)
 800338c:	7bbb      	ldrb	r3, [r7, #14]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d006      	beq.n	80033a0 <Wifi_TcpIp_Close+0x8c>
			break;		
		returnVal=true;	
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	e004      	b.n	80033a2 <Wifi_TcpIp_Close+0x8e>
			break;
 8003398:	bf00      	nop
 800339a:	e002      	b.n	80033a2 <Wifi_TcpIp_Close+0x8e>
			break;
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <Wifi_TcpIp_Close+0x8e>
			break;		
 80033a0:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <Wifi_TcpIp_Close+0xa4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f007 fd7e 	bl	800aea8 <osSemaphoreRelease>
	return returnVal;		
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000a3b8 	.word	0x2000a3b8
 80033bc:	2000a660 	.word	0x2000a660
 80033c0:	08027734 	.word	0x08027734
 80033c4:	2000a861 	.word	0x2000a861
 80033c8:	08027744 	.word	0x08027744
 80033cc:	0802741c 	.word	0x0802741c
 80033d0:	08027418 	.word	0x08027418

080033d4 <Wifi_UserInit>:

#include "Wifi.h"

//#######################################################################################
void Wifi_UserInit(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
	Wifi_SetMode(WifiMode_Station);
 80033d8:	2001      	movs	r0, #1
 80033da:	f7ff fd2d 	bl	8002e38 <Wifi_SetMode>
  //Wifi_SetMode(WifiMode_SoftAp); 

  //while (Wifi_Station_ConnectToAp("L70_9587","33559366",NULL) == false);
	while (Wifi_Station_ConnectToAp("U+NetC568","P91352@4BB",NULL) == false);
 80033de:	bf00      	nop
 80033e0:	2200      	movs	r2, #0
 80033e2:	4906      	ldr	r1, [pc, #24]	; (80033fc <Wifi_UserInit+0x28>)
 80033e4:	4806      	ldr	r0, [pc, #24]	; (8003400 <Wifi_UserInit+0x2c>)
 80033e6:	f7ff fddb 	bl	8002fa0 <Wifi_Station_ConnectToAp>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f083 0301 	eor.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f4      	bne.n	80033e0 <Wifi_UserInit+0xc>
	//while (Wifi_Station_ConnectToAp("bsoh123","123456789as",NULL) == false);
 
    
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	08027840 	.word	0x08027840
 8003400:	0802784c 	.word	0x0802784c

08003404 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <MX_CRC_Init+0x20>)
 800340a:	4a07      	ldr	r2, [pc, #28]	; (8003428 <MX_CRC_Init+0x24>)
 800340c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800340e:	4805      	ldr	r0, [pc, #20]	; (8003424 <MX_CRC_Init+0x20>)
 8003410:	f002 fc98 	bl	8005d44 <HAL_CRC_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800341a:	f000 fe89 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	2000af14 	.word	0x2000af14
 8003428:	40023000 	.word	0x40023000

0800342c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <HAL_CRC_MspInit+0x3c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10d      	bne.n	800345a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_CRC_MspInit+0x40>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <HAL_CRC_MspInit+0x40>)
 8003448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <HAL_CRC_MspInit+0x40>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40023000 	.word	0x40023000
 800346c:	40023800 	.word	0x40023800

08003470 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003474:	4b15      	ldr	r3, [pc, #84]	; (80034cc <MX_DMA2D_Init+0x5c>)
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <MX_DMA2D_Init+0x60>)
 8003478:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <MX_DMA2D_Init+0x5c>)
 800347c:	2200      	movs	r2, #0
 800347e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <MX_DMA2D_Init+0x5c>)
 8003482:	2202      	movs	r2, #2
 8003484:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <MX_DMA2D_Init+0x5c>)
 8003488:	2200      	movs	r2, #0
 800348a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <MX_DMA2D_Init+0x5c>)
 800348e:	2200      	movs	r2, #0
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <MX_DMA2D_Init+0x5c>)
 8003494:	2202      	movs	r2, #2
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <MX_DMA2D_Init+0x5c>)
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <MX_DMA2D_Init+0x5c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80034a4:	4809      	ldr	r0, [pc, #36]	; (80034cc <MX_DMA2D_Init+0x5c>)
 80034a6:	f002 fc69 	bl	8005d7c <HAL_DMA2D_Init>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80034b0:	f000 fe3e 	bl	8004130 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80034b4:	2101      	movs	r1, #1
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <MX_DMA2D_Init+0x5c>)
 80034b8:	f002 fdba 	bl	8006030 <HAL_DMA2D_ConfigLayer>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80034c2:	f000 fe35 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	2000af1c 	.word	0x2000af1c
 80034d0:	4002b000 	.word	0x4002b000

080034d4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0e      	ldr	r2, [pc, #56]	; (800351c <HAL_DMA2D_MspInit+0x48>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d115      	bne.n	8003512 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_DMA2D_MspInit+0x4c>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a0c      	ldr	r2, [pc, #48]	; (8003520 <HAL_DMA2D_MspInit+0x4c>)
 80034f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <HAL_DMA2D_MspInit+0x4c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2105      	movs	r1, #5
 8003506:	205a      	movs	r0, #90	; 0x5a
 8003508:	f002 fbf2 	bl	8005cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800350c:	205a      	movs	r0, #90	; 0x5a
 800350e:	f002 fc0b 	bl	8005d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	4002b000 	.word	0x4002b000
 8003520:	40023800 	.word	0x40023800

08003524 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08c      	sub	sp, #48	; 0x30
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	615a      	str	r2, [r3, #20]
 800353c:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800353e:	4b45      	ldr	r3, [pc, #276]	; (8003654 <MX_FMC_Init+0x130>)
 8003540:	4a45      	ldr	r2, [pc, #276]	; (8003658 <MX_FMC_Init+0x134>)
 8003542:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8003544:	4b43      	ldr	r3, [pc, #268]	; (8003654 <MX_FMC_Init+0x130>)
 8003546:	2201      	movs	r2, #1
 8003548:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800354a:	4b42      	ldr	r3, [pc, #264]	; (8003654 <MX_FMC_Init+0x130>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003550:	4b40      	ldr	r3, [pc, #256]	; (8003654 <MX_FMC_Init+0x130>)
 8003552:	2204      	movs	r2, #4
 8003554:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003556:	4b3f      	ldr	r3, [pc, #252]	; (8003654 <MX_FMC_Init+0x130>)
 8003558:	2210      	movs	r2, #16
 800355a:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800355c:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <MX_FMC_Init+0x130>)
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003562:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <MX_FMC_Init+0x130>)
 8003564:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003568:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800356a:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <MX_FMC_Init+0x130>)
 800356c:	2200      	movs	r2, #0
 800356e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <MX_FMC_Init+0x130>)
 8003572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003576:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <MX_FMC_Init+0x130>)
 800357a:	2200      	movs	r2, #0
 800357c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800357e:	4b35      	ldr	r3, [pc, #212]	; (8003654 <MX_FMC_Init+0x130>)
 8003580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003584:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003586:	2302      	movs	r3, #2
 8003588:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800358a:	2307      	movs	r3, #7
 800358c:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 800358e:	2304      	movs	r3, #4
 8003590:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8003592:	2307      	movs	r3, #7
 8003594:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8003596:	2303      	movs	r3, #3
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 800359a:	2302      	movs	r3, #2
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 800359e:	2302      	movs	r3, #2
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	482a      	ldr	r0, [pc, #168]	; (8003654 <MX_FMC_Init+0x130>)
 80035aa:	f005 fb31 	bl	8008c10 <HAL_SDRAM_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 80035b4:	f000 fdbc 	bl	8004130 <Error_Handler>
       *
       */
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1386);
  }
  /* USER CODE END FMC_Init 2 */
}
 80035b8:	e048      	b.n	800364c <MX_FMC_Init+0x128>
      __IO uint32_t tmpmrd =0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
      Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80035be:	2301      	movs	r3, #1
 80035c0:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80035c2:	2308      	movs	r3, #8
 80035c4:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80035ce:	463b      	mov	r3, r7
 80035d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035d4:	4619      	mov	r1, r3
 80035d6:	481f      	ldr	r0, [pc, #124]	; (8003654 <MX_FMC_Init+0x130>)
 80035d8:	f005 fb4e 	bl	8008c78 <HAL_SDRAM_SendCommand>
      HAL_Delay(100);
 80035dc:	2064      	movs	r0, #100	; 0x64
 80035de:	f002 faab 	bl	8005b38 <HAL_Delay>
      Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80035e2:	2302      	movs	r3, #2
 80035e4:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80035e6:	2308      	movs	r3, #8
 80035e8:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80035f2:	463b      	mov	r3, r7
 80035f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035f8:	4619      	mov	r1, r3
 80035fa:	4816      	ldr	r0, [pc, #88]	; (8003654 <MX_FMC_Init+0x130>)
 80035fc:	f005 fb3c 	bl	8008c78 <HAL_SDRAM_SendCommand>
      Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003600:	2303      	movs	r3, #3
 8003602:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003604:	2308      	movs	r3, #8
 8003606:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 4;
 8003608:	2304      	movs	r3, #4
 800360a:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003610:	463b      	mov	r3, r7
 8003612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003616:	4619      	mov	r1, r3
 8003618:	480e      	ldr	r0, [pc, #56]	; (8003654 <MX_FMC_Init+0x130>)
 800361a:	f005 fb2d 	bl	8008c78 <HAL_SDRAM_SendCommand>
      tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800361e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003622:	613b      	str	r3, [r7, #16]
      Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003624:	2304      	movs	r3, #4
 8003626:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003628:	2308      	movs	r3, #8
 800362a:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 800362c:	2301      	movs	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = tmpmrd;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003634:	463b      	mov	r3, r7
 8003636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800363a:	4619      	mov	r1, r3
 800363c:	4805      	ldr	r0, [pc, #20]	; (8003654 <MX_FMC_Init+0x130>)
 800363e:	f005 fb1b 	bl	8008c78 <HAL_SDRAM_SendCommand>
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1386);
 8003642:	f240 516a 	movw	r1, #1386	; 0x56a
 8003646:	4803      	ldr	r0, [pc, #12]	; (8003654 <MX_FMC_Init+0x130>)
 8003648:	f005 fb41 	bl	8008cce <HAL_SDRAM_ProgramRefreshRate>
}
 800364c:	bf00      	nop
 800364e:	3730      	adds	r7, #48	; 0x30
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	2000af5c 	.word	0x2000af5c
 8003658:	a0000140 	.word	0xa0000140

0800365c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_FMC_MspInit+0x104>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d16f      	bne.n	8003758 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003678:	4b39      	ldr	r3, [pc, #228]	; (8003760 <HAL_FMC_MspInit+0x104>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <HAL_FMC_MspInit+0x108>)
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	4a37      	ldr	r2, [pc, #220]	; (8003764 <HAL_FMC_MspInit+0x108>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6393      	str	r3, [r2, #56]	; 0x38
 800368e:	4b35      	ldr	r3, [pc, #212]	; (8003764 <HAL_FMC_MspInit+0x108>)
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800369a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800369e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a0:	2302      	movs	r3, #2
 80036a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a8:	2303      	movs	r3, #3
 80036aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036ac:	230c      	movs	r3, #12
 80036ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	482c      	ldr	r0, [pc, #176]	; (8003768 <HAL_FMC_MspInit+0x10c>)
 80036b6:	f002 fd4d 	bl	8006154 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80036ba:	2301      	movs	r3, #1
 80036bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c6:	2303      	movs	r3, #3
 80036c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036ca:	230c      	movs	r3, #12
 80036cc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4826      	ldr	r0, [pc, #152]	; (800376c <HAL_FMC_MspInit+0x110>)
 80036d4:	f002 fd3e 	bl	8006154 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80036d8:	f248 1333 	movw	r3, #33075	; 0x8133
 80036dc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036ea:	230c      	movs	r3, #12
 80036ec:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	4619      	mov	r1, r3
 80036f2:	481f      	ldr	r0, [pc, #124]	; (8003770 <HAL_FMC_MspInit+0x114>)
 80036f4:	f002 fd2e 	bl	8006154 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80036f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80036fc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003706:	2303      	movs	r3, #3
 8003708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800370a:	230c      	movs	r3, #12
 800370c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800370e:	1d3b      	adds	r3, r7, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4818      	ldr	r0, [pc, #96]	; (8003774 <HAL_FMC_MspInit+0x118>)
 8003714:	f002 fd1e 	bl	8006154 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003718:	f24c 7303 	movw	r3, #50947	; 0xc703
 800371c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003726:	2303      	movs	r3, #3
 8003728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800372a:	230c      	movs	r3, #12
 800372c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	4619      	mov	r1, r3
 8003732:	4811      	ldr	r0, [pc, #68]	; (8003778 <HAL_FMC_MspInit+0x11c>)
 8003734:	f002 fd0e 	bl	8006154 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003738:	2360      	movs	r3, #96	; 0x60
 800373a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003744:	2303      	movs	r3, #3
 8003746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003748:	230c      	movs	r3, #12
 800374a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	4619      	mov	r1, r3
 8003750:	480a      	ldr	r0, [pc, #40]	; (800377c <HAL_FMC_MspInit+0x120>)
 8003752:	f002 fcff 	bl	8006154 <HAL_GPIO_Init>
 8003756:	e000      	b.n	800375a <HAL_FMC_MspInit+0xfe>
    return;
 8003758:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200001a4 	.word	0x200001a4
 8003764:	40023800 	.word	0x40023800
 8003768:	40021400 	.word	0x40021400
 800376c:	40020800 	.word	0x40020800
 8003770:	40021800 	.word	0x40021800
 8003774:	40021000 	.word	0x40021000
 8003778:	40020c00 	.word	0x40020c00
 800377c:	40020400 	.word	0x40020400

08003780 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003788:	f7ff ff68 	bl	800365c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80037d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4a06      	ldr	r2, [pc, #24]	; (80037f8 <vApplicationGetIdleTaskMemory+0x30>)
 80037de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	200001a8 	.word	0x200001a8
 80037f8:	20000200 	.word	0x20000200

080037fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80037fc:	b5b0      	push	{r4, r5, r7, lr}
 80037fe:	b08e      	sub	sp, #56	; 0x38
 8003800:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of sensorSem */
  osSemaphoreDef(sensorSem);
 8003802:	2300      	movs	r3, #0
 8003804:	633b      	str	r3, [r7, #48]	; 0x30
 8003806:	2300      	movs	r3, #0
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
  sensorSemHandle = osSemaphoreCreate(osSemaphore(sensorSem), 1);
 800380a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f007 fabb 	bl	800ad8c <osSemaphoreCreate>
 8003816:	4603      	mov	r3, r0
 8003818:	4a12      	ldr	r2, [pc, #72]	; (8003864 <MX_FREERTOS_Init+0x68>)
 800381a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of envQueue */
  osMessageQDef(envQueue, 16, ENV_MSG);
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <MX_FREERTOS_Init+0x6c>)
 800381e:	f107 0420 	add.w	r4, r7, #32
 8003822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  envQueueHandle = osMessageCreate(osMessageQ(envQueue), NULL);
 8003828:	f107 0320 	add.w	r3, r7, #32
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f007 fb70 	bl	800af14 <osMessageCreate>
 8003834:	4603      	mov	r3, r0
 8003836:	4a0d      	ldr	r2, [pc, #52]	; (800386c <MX_FREERTOS_Init+0x70>)
 8003838:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <MX_FREERTOS_Init+0x74>)
 800383c:	1d3c      	adds	r4, r7, #4
 800383e:	461d      	mov	r5, r3
 8003840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003844:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f007 f9af 	bl	800abb4 <osThreadCreate>
 8003856:	4603      	mov	r3, r0
 8003858:	4a06      	ldr	r2, [pc, #24]	; (8003874 <MX_FREERTOS_Init+0x78>)
 800385a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  //osThreadDef(touchTask, TouchGFX_Task, osPriorityNormal, 0, 4086);
  //touchGFXTaskHandle = osThreadCreate(osThread(touchTask), NULL);
  /* USER CODE END RTOS_THREADS */

}
 800385c:	bf00      	nop
 800385e:	3738      	adds	r7, #56	; 0x38
 8003860:	46bd      	mov	sp, r7
 8003862:	bdb0      	pop	{r4, r5, r7, pc}
 8003864:	2000af94 	.word	0x2000af94
 8003868:	08027870 	.word	0x08027870
 800386c:	2000afa0 	.word	0x2000afa0
 8003870:	08027880 	.word	0x08027880
 8003874:	2000afa4 	.word	0x2000afa4

08003878 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;)
  {
	  osDelay(1);
 8003880:	2001      	movs	r0, #1
 8003882:	f007 f9e3 	bl	800ac4c <osDelay>
 8003886:	e7fb      	b.n	8003880 <StartDefaultTask+0x8>

08003888 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08e      	sub	sp, #56	; 0x38
 800388c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	4b84      	ldr	r3, [pc, #528]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a83      	ldr	r2, [pc, #524]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038a8:	f043 0310 	orr.w	r3, r3, #16
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b81      	ldr	r3, [pc, #516]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	623b      	str	r3, [r7, #32]
 80038b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	4b7d      	ldr	r3, [pc, #500]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a7c      	ldr	r2, [pc, #496]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b7a      	ldr	r3, [pc, #488]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	4b76      	ldr	r3, [pc, #472]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a75      	ldr	r2, [pc, #468]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038e0:	f043 0320 	orr.w	r3, r3, #32
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b73      	ldr	r3, [pc, #460]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	4b6f      	ldr	r3, [pc, #444]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a6e      	ldr	r2, [pc, #440]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 80038fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b6c      	ldr	r3, [pc, #432]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a67      	ldr	r2, [pc, #412]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b65      	ldr	r3, [pc, #404]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b61      	ldr	r3, [pc, #388]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a60      	ldr	r2, [pc, #384]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b5e      	ldr	r3, [pc, #376]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	4b5a      	ldr	r3, [pc, #360]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a59      	ldr	r2, [pc, #356]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a52      	ldr	r2, [pc, #328]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 800396c:	f043 0308 	orr.w	r3, r3, #8
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b50      	ldr	r3, [pc, #320]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, HUMIDIFIER_SW_PIN_Pin|DHT11_Pin, GPIO_PIN_RESET);
 800397e:	2200      	movs	r2, #0
 8003980:	210c      	movs	r1, #12
 8003982:	484d      	ldr	r0, [pc, #308]	; (8003ab8 <MX_GPIO_Init+0x230>)
 8003984:	f002 fe9e 	bl	80066c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003988:	2200      	movs	r2, #0
 800398a:	2116      	movs	r1, #22
 800398c:	484b      	ldr	r0, [pc, #300]	; (8003abc <MX_GPIO_Init+0x234>)
 800398e:	f002 fe99 	bl	80066c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003992:	2200      	movs	r2, #0
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	484a      	ldr	r0, [pc, #296]	; (8003ac0 <MX_GPIO_Init+0x238>)
 8003998:	f002 fe94 	bl	80066c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800399c:	2200      	movs	r2, #0
 800399e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80039a2:	4848      	ldr	r0, [pc, #288]	; (8003ac4 <MX_GPIO_Init+0x23c>)
 80039a4:	f002 fe8e 	bl	80066c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80039ae:	4846      	ldr	r0, [pc, #280]	; (8003ac8 <MX_GPIO_Init+0x240>)
 80039b0:	f002 fe88 	bl	80066c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = HUMIDIFIER_SW_PIN_Pin|DHT11_Pin;
 80039b4:	230c      	movs	r3, #12
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b8:	2301      	movs	r3, #1
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	2300      	movs	r3, #0
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c8:	4619      	mov	r1, r3
 80039ca:	483b      	ldr	r0, [pc, #236]	; (8003ab8 <MX_GPIO_Init+0x230>)
 80039cc:	f002 fbc2 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80039d0:	2316      	movs	r3, #22
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d4:	2301      	movs	r3, #1
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039dc:	2300      	movs	r3, #0
 80039de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e4:	4619      	mov	r1, r3
 80039e6:	4835      	ldr	r0, [pc, #212]	; (8003abc <MX_GPIO_Init+0x234>)
 80039e8:	f002 fbb4 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80039ec:	f248 0307 	movw	r3, #32775	; 0x8007
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80039f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a00:	4619      	mov	r1, r3
 8003a02:	482f      	ldr	r0, [pc, #188]	; (8003ac0 <MX_GPIO_Init+0x238>)
 8003a04:	f002 fba6 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	2300      	movs	r3, #0
 8003a16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4828      	ldr	r0, [pc, #160]	; (8003ac0 <MX_GPIO_Init+0x238>)
 8003a20:	f002 fb98 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003a24:	2320      	movs	r3, #32
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003a28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a36:	4619      	mov	r1, r3
 8003a38:	4820      	ldr	r0, [pc, #128]	; (8003abc <MX_GPIO_Init+0x234>)
 8003a3a:	f002 fb8b 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003a3e:	2304      	movs	r3, #4
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a42:	2300      	movs	r3, #0
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4e:	4619      	mov	r1, r3
 8003a50:	481e      	ldr	r0, [pc, #120]	; (8003acc <MX_GPIO_Init+0x244>)
 8003a52:	f002 fb7f 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4816      	ldr	r0, [pc, #88]	; (8003ac4 <MX_GPIO_Init+0x23c>)
 8003a6c:	f002 fb72 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003a70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a76:	2301      	movs	r3, #1
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a86:	4619      	mov	r1, r3
 8003a88:	480e      	ldr	r0, [pc, #56]	; (8003ac4 <MX_GPIO_Init+0x23c>)
 8003a8a:	f002 fb63 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003a8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a94:	2301      	movs	r3, #1
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4808      	ldr	r0, [pc, #32]	; (8003ac8 <MX_GPIO_Init+0x240>)
 8003aa8:	f002 fb54 	bl	8006154 <HAL_GPIO_Init>

}
 8003aac:	bf00      	nop
 8003aae:	3738      	adds	r7, #56	; 0x38
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40020800 	.word	0x40020800
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	40020c00 	.word	0x40020c00
 8003ac8:	40021800 	.word	0x40021800
 8003acc:	40020400 	.word	0x40020400

08003ad0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003ad6:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <MX_I2C3_Init+0x78>)
 8003ad8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003adc:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <MX_I2C3_Init+0x7c>)
 8003ade:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ae0:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003aec:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003af2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003af4:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b00:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b0c:	480d      	ldr	r0, [pc, #52]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003b0e:	f002 fe0d 	bl	800672c <HAL_I2C_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003b18:	f000 fb0a 	bl	8004130 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4809      	ldr	r0, [pc, #36]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003b20:	f003 fe01 	bl	8007726 <HAL_I2CEx_ConfigAnalogFilter>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003b2a:	f000 fb01 	bl	8004130 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4804      	ldr	r0, [pc, #16]	; (8003b44 <MX_I2C3_Init+0x74>)
 8003b32:	f003 fe34 	bl	800779e <HAL_I2CEx_ConfigDigitalFilter>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003b3c:	f000 faf8 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	2000afac 	.word	0x2000afac
 8003b48:	40005c00 	.word	0x40005c00
 8003b4c:	000186a0 	.word	0x000186a0

08003b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
 8003b66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <HAL_I2C_MspInit+0xc4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d14b      	bne.n	8003c0a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_I2C_MspInit+0xc8>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	4a27      	ldr	r2, [pc, #156]	; (8003c18 <HAL_I2C_MspInit+0xc8>)
 8003b7c:	f043 0304 	orr.w	r3, r3, #4
 8003b80:	6313      	str	r3, [r2, #48]	; 0x30
 8003b82:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <HAL_I2C_MspInit+0xc8>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_I2C_MspInit+0xc8>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	4a20      	ldr	r2, [pc, #128]	; (8003c18 <HAL_I2C_MspInit+0xc8>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_I2C_MspInit+0xc8>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bb0:	2312      	movs	r3, #18
 8003bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4815      	ldr	r0, [pc, #84]	; (8003c1c <HAL_I2C_MspInit+0xcc>)
 8003bc8:	f002 fac4 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bd2:	2312      	movs	r3, #18
 8003bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003bde:	2304      	movs	r3, #4
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003be2:	f107 0314 	add.w	r3, r7, #20
 8003be6:	4619      	mov	r1, r3
 8003be8:	480d      	ldr	r0, [pc, #52]	; (8003c20 <HAL_I2C_MspInit+0xd0>)
 8003bea:	f002 fab3 	bl	8006154 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_I2C_MspInit+0xc8>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <HAL_I2C_MspInit+0xc8>)
 8003bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_I2C_MspInit+0xc8>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	3728      	adds	r7, #40	; 0x28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40005c00 	.word	0x40005c00
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020000 	.word	0x40020000

08003c24 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <HAL_I2C_MspDeInit+0x3c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10f      	bne.n	8003c56 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_I2C_MspDeInit+0x40>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_I2C_MspDeInit+0x40>)
 8003c3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c40:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8003c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c46:	4808      	ldr	r0, [pc, #32]	; (8003c68 <HAL_I2C_MspDeInit+0x44>)
 8003c48:	f002 fc30 	bl	80064ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8003c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c50:	4806      	ldr	r0, [pc, #24]	; (8003c6c <HAL_I2C_MspDeInit+0x48>)
 8003c52:	f002 fc2b 	bl	80064ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40005c00 	.word	0x40005c00
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40020800 	.word	0x40020800
 8003c6c:	40020000 	.word	0x40020000

08003c70 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08e      	sub	sp, #56	; 0x38
 8003c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	2234      	movs	r2, #52	; 0x34
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f021 fac3 	bl	8025208 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003c82:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <MX_LTDC_Init+0xfc>)
 8003c86:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003c88:	4b37      	ldr	r3, [pc, #220]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003c8e:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003c94:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003c9a:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8003ca0:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003ca2:	2209      	movs	r2, #9
 8003ca4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8003ca6:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8003cac:	4b2e      	ldr	r3, [pc, #184]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003cae:	221d      	movs	r2, #29
 8003cb0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003cba:	f240 120d 	movw	r2, #269	; 0x10d
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8003cc0:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003cc2:	f240 1243 	movw	r2, #323	; 0x143
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8003cc8:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003cca:	f240 1217 	movw	r2, #279	; 0x117
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003cd2:	f240 1247 	movw	r2, #327	; 0x147
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003cd8:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003cf0:	481d      	ldr	r0, [pc, #116]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003cf2:	f003 fd93 	bl	800781c <HAL_LTDC_Init>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003cfc:	f000 fa18 	bl	8004130 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8003d04:	23f0      	movs	r3, #240	; 0xf0
 8003d06:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8003d0c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003d10:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003d12:	2302      	movs	r3, #2
 8003d14:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003d16:	23ff      	movs	r3, #255	; 0xff
 8003d18:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d22:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003d24:	2305      	movs	r3, #5
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8003d28:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8003d2e:	23f0      	movs	r3, #240	; 0xf0
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8003d32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003d36:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003d4a:	1d3b      	adds	r3, r7, #4
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4805      	ldr	r0, [pc, #20]	; (8003d68 <MX_LTDC_Init+0xf8>)
 8003d52:	f003 feeb 	bl	8007b2c <HAL_LTDC_ConfigLayer>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8003d5c:	f000 f9e8 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003d60:	bf00      	nop
 8003d62:	3738      	adds	r7, #56	; 0x38
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	2000b000 	.word	0x2000b000
 8003d6c:	40016800 	.word	0x40016800

08003d70 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08e      	sub	sp, #56	; 0x38
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a7b      	ldr	r2, [pc, #492]	; (8003f7c <HAL_LTDC_MspInit+0x20c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	f040 80ef 	bne.w	8003f72 <HAL_LTDC_MspInit+0x202>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003d94:	2300      	movs	r3, #0
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	4b79      	ldr	r3, [pc, #484]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	4a78      	ldr	r2, [pc, #480]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003d9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003da2:	6453      	str	r3, [r2, #68]	; 0x44
 8003da4:	4b76      	ldr	r3, [pc, #472]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	4b72      	ldr	r3, [pc, #456]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	4a71      	ldr	r2, [pc, #452]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003dba:	f043 0320 	orr.w	r3, r3, #32
 8003dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc0:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	4b6b      	ldr	r3, [pc, #428]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	4a6a      	ldr	r2, [pc, #424]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	6313      	str	r3, [r2, #48]	; 0x30
 8003ddc:	4b68      	ldr	r3, [pc, #416]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	4b64      	ldr	r3, [pc, #400]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	4a63      	ldr	r2, [pc, #396]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	6313      	str	r3, [r2, #48]	; 0x30
 8003df8:	4b61      	ldr	r3, [pc, #388]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	4b5d      	ldr	r3, [pc, #372]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	4a5c      	ldr	r2, [pc, #368]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e12:	6313      	str	r3, [r2, #48]	; 0x30
 8003e14:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	4b56      	ldr	r3, [pc, #344]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	4a55      	ldr	r2, [pc, #340]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003e2a:	f043 0304 	orr.w	r3, r3, #4
 8003e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	4a4e      	ldr	r2, [pc, #312]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003e46:	f043 0308 	orr.w	r3, r3, #8
 8003e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4c:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <HAL_LTDC_MspInit+0x210>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e66:	2300      	movs	r3, #0
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e6a:	230e      	movs	r3, #14
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e72:	4619      	mov	r1, r3
 8003e74:	4843      	ldr	r0, [pc, #268]	; (8003f84 <HAL_LTDC_MspInit+0x214>)
 8003e76:	f002 f96d 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003e7a:	f641 0358 	movw	r3, #6232	; 0x1858
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e8c:	230e      	movs	r3, #14
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e94:	4619      	mov	r1, r3
 8003e96:	483c      	ldr	r0, [pc, #240]	; (8003f88 <HAL_LTDC_MspInit+0x218>)
 8003e98:	f002 f95c 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003eac:	2309      	movs	r3, #9
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4835      	ldr	r0, [pc, #212]	; (8003f8c <HAL_LTDC_MspInit+0x21c>)
 8003eb8:	f002 f94c 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003ebc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ece:	230e      	movs	r3, #14
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	482c      	ldr	r0, [pc, #176]	; (8003f8c <HAL_LTDC_MspInit+0x21c>)
 8003eda:	f002 f93b 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003ede:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eec:	2300      	movs	r3, #0
 8003eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ef0:	230e      	movs	r3, #14
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4825      	ldr	r0, [pc, #148]	; (8003f90 <HAL_LTDC_MspInit+0x220>)
 8003efc:	f002 f92a 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8003f00:	23c0      	movs	r3, #192	; 0xc0
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f04:	2302      	movs	r3, #2
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f10:	230e      	movs	r3, #14
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f18:	4619      	mov	r1, r3
 8003f1a:	481e      	ldr	r0, [pc, #120]	; (8003f94 <HAL_LTDC_MspInit+0x224>)
 8003f1c:	f002 f91a 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin;
 8003f20:	2308      	movs	r3, #8
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f30:	230e      	movs	r3, #14
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8003f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4817      	ldr	r0, [pc, #92]	; (8003f98 <HAL_LTDC_MspInit+0x228>)
 8003f3c:	f002 f90a 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003f40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003f52:	2309      	movs	r3, #9
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	480c      	ldr	r0, [pc, #48]	; (8003f90 <HAL_LTDC_MspInit+0x220>)
 8003f5e:	f002 f8f9 	bl	8006154 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003f62:	2200      	movs	r2, #0
 8003f64:	2105      	movs	r1, #5
 8003f66:	2058      	movs	r0, #88	; 0x58
 8003f68:	f001 fec2 	bl	8005cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003f6c:	2058      	movs	r0, #88	; 0x58
 8003f6e:	f001 fedb 	bl	8005d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003f72:	bf00      	nop
 8003f74:	3738      	adds	r7, #56	; 0x38
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40016800 	.word	0x40016800
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40021400 	.word	0x40021400
 8003f88:	40020000 	.word	0x40020000
 8003f8c:	40020400 	.word	0x40020400
 8003f90:	40021800 	.word	0x40021800
 8003f94:	40020800 	.word	0x40020800
 8003f98:	40020c00 	.word	0x40020c00

08003f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fa0:	f001 fd88 	bl	8005ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fa4:	f000 f82e 	bl	8004004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fa8:	f7ff fc6e 	bl	8003888 <MX_GPIO_Init>
  MX_CRC_Init();
 8003fac:	f7ff fa2a 	bl	8003404 <MX_CRC_Init>
  MX_DMA2D_Init();
 8003fb0:	f7ff fa5e 	bl	8003470 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003fb4:	f7ff fab6 	bl	8003524 <MX_FMC_Init>
  MX_LTDC_Init();
 8003fb8:	f7ff fe5a 	bl	8003c70 <MX_LTDC_Init>
  MX_SPI5_Init();
 8003fbc:	f000 f8be 	bl	800413c <MX_SPI5_Init>
  MX_TIM1_Init();
 8003fc0:	f000 faf4 	bl	80045ac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003fc4:	f000 fbb6 	bl	8004734 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003fc8:	f000 fb40 	bl	800464c <MX_TIM7_Init>
  MX_I2C3_Init();
 8003fcc:	f7ff fd80 	bl	8003ad0 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8003fd0:	f000 fbda 	bl	8004788 <MX_USART3_UART_Init>
  MX_TouchGFX_Init();
 8003fd4:	f009 fece 	bl	800dd74 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
#if (1)
  sensorInit(osPriorityRealtime);
 8003fd8:	2003      	movs	r0, #3
 8003fda:	f7fe fc47 	bl	800286c <sensorInit>
  tftLcdInit(osPriorityHigh);
 8003fde:	2002      	movs	r0, #2
 8003fe0:	f7fe fc7a 	bl	80028d8 <tftLcdInit>
  workTaskInit(osPriorityAboveNormal);
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f7fe f941 	bl	800226c <workTaskInit>
  eventLoopInit(osPriorityNormal);
 8003fea:	2000      	movs	r0, #0
 8003fec:	f7fd ff8c 	bl	8001f08 <eventLoopInit>
  WifiInit(osPriorityLow);
 8003ff0:	f06f 0001 	mvn.w	r0, #1
 8003ff4:	f7fe fe8e 	bl	8002d14 <WifiInit>
#endif
  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003ff8:	f7ff fc00 	bl	80037fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003ffc:	f006 fdd3 	bl	800aba6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004000:	e7fe      	b.n	8004000 <main+0x64>
	...

08004004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b0a0      	sub	sp, #128	; 0x80
 8004008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800400a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800400e:	2230      	movs	r2, #48	; 0x30
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f021 f8f8 	bl	8025208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004018:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	2230      	movs	r2, #48	; 0x30
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f021 f8e9 	bl	8025208 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	4b32      	ldr	r3, [pc, #200]	; (8004104 <SystemClock_Config+0x100>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4a31      	ldr	r2, [pc, #196]	; (8004104 <SystemClock_Config+0x100>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
 8004046:	4b2f      	ldr	r3, [pc, #188]	; (8004104 <SystemClock_Config+0x100>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <SystemClock_Config+0x104>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800405e:	4a2a      	ldr	r2, [pc, #168]	; (8004108 <SystemClock_Config+0x104>)
 8004060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b28      	ldr	r3, [pc, #160]	; (8004108 <SystemClock_Config+0x104>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004072:	2301      	movs	r3, #1
 8004074:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800407a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800407c:	2302      	movs	r3, #2
 800407e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004080:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004084:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004086:	2304      	movs	r3, #4
 8004088:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800408a:	2348      	movs	r3, #72	; 0x48
 800408c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800408e:	2302      	movs	r3, #2
 8004090:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004092:	2303      	movs	r3, #3
 8004094:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004096:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800409a:	4618      	mov	r0, r3
 800409c:	f003 ff54 	bl	8007f48 <HAL_RCC_OscConfig>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80040a6:	f000 f843 	bl	8004130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040aa:	230f      	movs	r3, #15
 80040ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040ae:	2302      	movs	r3, #2
 80040b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040b2:	2300      	movs	r3, #0
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040bc:	2300      	movs	r3, #0
 80040be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f004 f9b6 	bl	8008438 <HAL_RCC_ClockConfig>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80040d2:	f000 f82d 	bl	8004130 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80040d6:	2308      	movs	r3, #8
 80040d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80040da:	233c      	movs	r3, #60	; 0x3c
 80040dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80040de:	2305      	movs	r3, #5
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80040e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040e8:	f107 030c 	add.w	r3, r7, #12
 80040ec:	4618      	mov	r0, r3
 80040ee:	f004 fbd1 	bl	8008894 <HAL_RCCEx_PeriphCLKConfig>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80040f8:	f000 f81a 	bl	8004130 <Error_Handler>
  }
}
 80040fc:	bf00      	nop
 80040fe:	3780      	adds	r7, #128	; 0x80
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40023800 	.word	0x40023800
 8004108:	40007000 	.word	0x40007000

0800410c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  static int32_t timeOut = 0;

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a04      	ldr	r2, [pc, #16]	; (800412c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800411e:	f001 fceb 	bl	8005af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40001000 	.word	0x40001000

08004130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004134:	b672      	cpsid	i
}
 8004136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004138:	e7fe      	b.n	8004138 <Error_Handler+0x8>
	...

0800413c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004140:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004142:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <MX_SPI5_Init+0x68>)
 8004144:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800414c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004150:	2200      	movs	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004156:	2200      	movs	r2, #0
 8004158:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <MX_SPI5_Init+0x64>)
 800415c:	2200      	movs	r2, #0
 800415e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004162:	2200      	movs	r2, #0
 8004164:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800416c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004170:	2218      	movs	r2, #24
 8004172:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004176:	2200      	movs	r2, #0
 8004178:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <MX_SPI5_Init+0x64>)
 800417c:	2200      	movs	r2, #0
 800417e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004182:	2200      	movs	r2, #0
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <MX_SPI5_Init+0x64>)
 8004188:	220a      	movs	r2, #10
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800418c:	4804      	ldr	r0, [pc, #16]	; (80041a0 <MX_SPI5_Init+0x64>)
 800418e:	f004 fdbe 	bl	8008d0e <HAL_SPI_Init>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004198:	f7ff ffca 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	2000b0a8 	.word	0x2000b0a8
 80041a4:	40015000 	.word	0x40015000

080041a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a19      	ldr	r2, [pc, #100]	; (800422c <HAL_SPI_MspInit+0x84>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d12c      	bne.n	8004224 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	4b18      	ldr	r3, [pc, #96]	; (8004230 <HAL_SPI_MspInit+0x88>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	4a17      	ldr	r2, [pc, #92]	; (8004230 <HAL_SPI_MspInit+0x88>)
 80041d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d8:	6453      	str	r3, [r2, #68]	; 0x44
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <HAL_SPI_MspInit+0x88>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_SPI_MspInit+0x88>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	4a10      	ldr	r2, [pc, #64]	; (8004230 <HAL_SPI_MspInit+0x88>)
 80041f0:	f043 0320 	orr.w	r3, r3, #32
 80041f4:	6313      	str	r3, [r2, #48]	; 0x30
 80041f6:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <HAL_SPI_MspInit+0x88>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004202:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004208:	2302      	movs	r3, #2
 800420a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004210:	2300      	movs	r3, #0
 8004212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004214:	2305      	movs	r3, #5
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	4619      	mov	r1, r3
 800421e:	4805      	ldr	r0, [pc, #20]	; (8004234 <HAL_SPI_MspInit+0x8c>)
 8004220:	f001 ff98 	bl	8006154 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004224:	bf00      	nop
 8004226:	3728      	adds	r7, #40	; 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40015000 	.word	0x40015000
 8004230:	40023800 	.word	0x40023800
 8004234:	40021400 	.word	0x40021400

08004238 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a08      	ldr	r2, [pc, #32]	; (8004268 <HAL_SPI_MspDeInit+0x30>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10a      	bne.n	8004260 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_SPI_MspDeInit+0x34>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	4a07      	ldr	r2, [pc, #28]	; (800426c <HAL_SPI_MspDeInit+0x34>)
 8004250:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004254:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004256:	f44f 7160 	mov.w	r1, #896	; 0x380
 800425a:	4805      	ldr	r0, [pc, #20]	; (8004270 <HAL_SPI_MspDeInit+0x38>)
 800425c:	f002 f926 	bl	80064ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40015000 	.word	0x40015000
 800426c:	40023800 	.word	0x40023800
 8004270:	40021400 	.word	0x40021400

08004274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_MspInit+0x54>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <HAL_MspInit+0x54>)
 8004284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004288:	6453      	str	r3, [r2, #68]	; 0x44
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <HAL_MspInit+0x54>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_MspInit+0x54>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <HAL_MspInit+0x54>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <HAL_MspInit+0x54>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80042b2:	2200      	movs	r2, #0
 80042b4:	210f      	movs	r1, #15
 80042b6:	f06f 0001 	mvn.w	r0, #1
 80042ba:	f001 fd19 	bl	8005cf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800

080042cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	; 0x30
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80042dc:	2200      	movs	r2, #0
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	2036      	movs	r0, #54	; 0x36
 80042e2:	f001 fd05 	bl	8005cf0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80042e6:	2036      	movs	r0, #54	; 0x36
 80042e8:	f001 fd1e 	bl	8005d28 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <HAL_InitTick+0xa4>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <HAL_InitTick+0xa4>)
 80042f6:	f043 0310 	orr.w	r3, r3, #16
 80042fa:	6413      	str	r3, [r2, #64]	; 0x40
 80042fc:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <HAL_InitTick+0xa4>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004308:	f107 0210 	add.w	r2, r7, #16
 800430c:	f107 0314 	add.w	r3, r7, #20
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f004 fa8c 	bl	8008830 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004318:	f004 fa62 	bl	80087e0 <HAL_RCC_GetPCLK1Freq>
 800431c:	4603      	mov	r3, r0
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	4a13      	ldr	r2, [pc, #76]	; (8004374 <HAL_InitTick+0xa8>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	0c9b      	lsrs	r3, r3, #18
 800432c:	3b01      	subs	r3, #1
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <HAL_InitTick+0xac>)
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <HAL_InitTick+0xb0>)
 8004334:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <HAL_InitTick+0xac>)
 8004338:	f240 32e7 	movw	r2, #999	; 0x3e7
 800433c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <HAL_InitTick+0xac>)
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <HAL_InitTick+0xac>)
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_InitTick+0xac>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004350:	4809      	ldr	r0, [pc, #36]	; (8004378 <HAL_InitTick+0xac>)
 8004352:	f005 fabb 	bl	80098cc <HAL_TIM_Base_Init>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800435c:	4806      	ldr	r0, [pc, #24]	; (8004378 <HAL_InitTick+0xac>)
 800435e:	f005 fb05 	bl	800996c <HAL_TIM_Base_Start_IT>
 8004362:	4603      	mov	r3, r0
 8004364:	e000      	b.n	8004368 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
}
 8004368:	4618      	mov	r0, r3
 800436a:	3730      	adds	r7, #48	; 0x30
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	431bde83 	.word	0x431bde83
 8004378:	2000b100 	.word	0x2000b100
 800437c:	40001000 	.word	0x40001000

08004380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004384:	e7fe      	b.n	8004384 <NMI_Handler+0x4>

08004386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004386:	b480      	push	{r7}
 8004388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800438a:	e7fe      	b.n	800438a <HardFault_Handler+0x4>

0800438c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004390:	e7fe      	b.n	8004390 <MemManage_Handler+0x4>

08004392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004396:	e7fe      	b.n	8004396 <BusFault_Handler+0x4>

08004398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800439c:	e7fe      	b.n	800439c <UsageFault_Handler+0x4>

0800439e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043b0:	4802      	ldr	r0, [pc, #8]	; (80043bc <TIM6_DAC_IRQHandler+0x10>)
 80043b2:	f005 fb4b 	bl	8009a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	2000b100 	.word	0x2000b100

080043c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80043c4:	4802      	ldr	r0, [pc, #8]	; (80043d0 <TIM7_IRQHandler+0x10>)
 80043c6:	f005 fb41 	bl	8009a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	2000b190 	.word	0x2000b190

080043d4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80043d8:	4802      	ldr	r0, [pc, #8]	; (80043e4 <LTDC_IRQHandler+0x10>)
 80043da:	f003 faef 	bl	80079bc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	2000b000 	.word	0x2000b000

080043e8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80043ec:	4802      	ldr	r0, [pc, #8]	; (80043f8 <DMA2D_IRQHandler+0x10>)
 80043ee:	f001 fd0e 	bl	8005e0e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000af1c 	.word	0x2000af1c

080043fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
	return 1;
 8004400:	2301      	movs	r3, #1
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <_kill>:

int _kill(int pid, int sig)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004416:	f020 fe83 	bl	8025120 <__errno>
 800441a:	4603      	mov	r3, r0
 800441c:	2216      	movs	r2, #22
 800441e:	601a      	str	r2, [r3, #0]
	return -1;
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <_exit>:

void _exit (int status)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004434:	f04f 31ff 	mov.w	r1, #4294967295
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ffe7 	bl	800440c <_kill>
	while (1) {}		/* Make sure we hang here */
 800443e:	e7fe      	b.n	800443e <_exit+0x12>

08004440 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e00a      	b.n	8004468 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004452:	f3af 8000 	nop.w
 8004456:	4601      	mov	r1, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	60ba      	str	r2, [r7, #8]
 800445e:	b2ca      	uxtb	r2, r1
 8004460:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	3301      	adds	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	dbf0      	blt.n	8004452 <_read+0x12>
	}

return len;
 8004470:	687b      	ldr	r3, [r7, #4]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e009      	b.n	80044a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	60ba      	str	r2, [r7, #8]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	3301      	adds	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	dbf1      	blt.n	800448c <_write+0x12>
	}
	return len;
 80044a8:	687b      	ldr	r3, [r7, #4]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <_close>:

int _close(int file)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
	return -1;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044da:	605a      	str	r2, [r3, #4]
	return 0;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <_isatty>:

int _isatty(int file)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
	return 1;
 80044f2:	2301      	movs	r3, #1
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
	return 0;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004524:	4a14      	ldr	r2, [pc, #80]	; (8004578 <_sbrk+0x5c>)
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <_sbrk+0x60>)
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004530:	4b13      	ldr	r3, [pc, #76]	; (8004580 <_sbrk+0x64>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d102      	bne.n	800453e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004538:	4b11      	ldr	r3, [pc, #68]	; (8004580 <_sbrk+0x64>)
 800453a:	4a12      	ldr	r2, [pc, #72]	; (8004584 <_sbrk+0x68>)
 800453c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800453e:	4b10      	ldr	r3, [pc, #64]	; (8004580 <_sbrk+0x64>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	429a      	cmp	r2, r3
 800454a:	d207      	bcs.n	800455c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800454c:	f020 fde8 	bl	8025120 <__errno>
 8004550:	4603      	mov	r3, r0
 8004552:	220c      	movs	r2, #12
 8004554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
 800455a:	e009      	b.n	8004570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800455c:	4b08      	ldr	r3, [pc, #32]	; (8004580 <_sbrk+0x64>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <_sbrk+0x64>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	4a05      	ldr	r2, [pc, #20]	; (8004580 <_sbrk+0x64>)
 800456c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800456e:	68fb      	ldr	r3, [r7, #12]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20030000 	.word	0x20030000
 800457c:	00000400 	.word	0x00000400
 8004580:	20000400 	.word	0x20000400
 8004584:	2000b2c8 	.word	0x2000b2c8

08004588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <SystemInit+0x20>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	4a05      	ldr	r2, [pc, #20]	; (80045a8 <SystemInit+0x20>)
 8004594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045b2:	f107 0308 	add.w	r3, r7, #8
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	609a      	str	r2, [r3, #8]
 80045be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045c0:	463b      	mov	r3, r7
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <MX_TIM1_Init+0x98>)
 80045ca:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <MX_TIM1_Init+0x9c>)
 80045cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80045ce:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <MX_TIM1_Init+0x98>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <MX_TIM1_Init+0x98>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80045da:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <MX_TIM1_Init+0x98>)
 80045dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045e2:	4b18      	ldr	r3, [pc, #96]	; (8004644 <MX_TIM1_Init+0x98>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80045e8:	4b16      	ldr	r3, [pc, #88]	; (8004644 <MX_TIM1_Init+0x98>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ee:	4b15      	ldr	r3, [pc, #84]	; (8004644 <MX_TIM1_Init+0x98>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80045f4:	4813      	ldr	r0, [pc, #76]	; (8004644 <MX_TIM1_Init+0x98>)
 80045f6:	f005 f969 	bl	80098cc <HAL_TIM_Base_Init>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004600:	f7ff fd96 	bl	8004130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	4619      	mov	r1, r3
 8004610:	480c      	ldr	r0, [pc, #48]	; (8004644 <MX_TIM1_Init+0x98>)
 8004612:	f005 fb23 	bl	8009c5c <HAL_TIM_ConfigClockSource>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800461c:	f7ff fd88 	bl	8004130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004620:	2300      	movs	r3, #0
 8004622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004624:	2300      	movs	r3, #0
 8004626:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004628:	463b      	mov	r3, r7
 800462a:	4619      	mov	r1, r3
 800462c:	4805      	ldr	r0, [pc, #20]	; (8004644 <MX_TIM1_Init+0x98>)
 800462e:	f005 fd3f 	bl	800a0b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004638:	f7ff fd7a 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800463c:	bf00      	nop
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	2000b148 	.word	0x2000b148
 8004648:	40010000 	.word	0x40010000

0800464c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004652:	463b      	mov	r3, r7
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <MX_TIM7_Init+0x64>)
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <MX_TIM7_Init+0x68>)
 800465e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 360;
 8004660:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <MX_TIM7_Init+0x64>)
 8004662:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8004666:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004668:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <MX_TIM7_Init+0x64>)
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <MX_TIM7_Init+0x64>)
 8004670:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004674:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004676:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <MX_TIM7_Init+0x64>)
 8004678:	2200      	movs	r2, #0
 800467a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800467c:	480c      	ldr	r0, [pc, #48]	; (80046b0 <MX_TIM7_Init+0x64>)
 800467e:	f005 f925 	bl	80098cc <HAL_TIM_Base_Init>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004688:	f7ff fd52 	bl	8004130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800468c:	2300      	movs	r3, #0
 800468e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004690:	2300      	movs	r3, #0
 8004692:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004694:	463b      	mov	r3, r7
 8004696:	4619      	mov	r1, r3
 8004698:	4805      	ldr	r0, [pc, #20]	; (80046b0 <MX_TIM7_Init+0x64>)
 800469a:	f005 fd09 	bl	800a0b0 <HAL_TIMEx_MasterConfigSynchronization>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80046a4:	f7ff fd44 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	2000b190 	.word	0x2000b190
 80046b4:	40001400 	.word	0x40001400

080046b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_TIM_Base_MspInit+0x70>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10e      	bne.n	80046e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	4b17      	ldr	r3, [pc, #92]	; (800472c <HAL_TIM_Base_MspInit+0x74>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	4a16      	ldr	r2, [pc, #88]	; (800472c <HAL_TIM_Base_MspInit+0x74>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	6453      	str	r3, [r2, #68]	; 0x44
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <HAL_TIM_Base_MspInit+0x74>)
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80046e6:	e01a      	b.n	800471e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a10      	ldr	r2, [pc, #64]	; (8004730 <HAL_TIM_Base_MspInit+0x78>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d115      	bne.n	800471e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	4b0d      	ldr	r3, [pc, #52]	; (800472c <HAL_TIM_Base_MspInit+0x74>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4a0c      	ldr	r2, [pc, #48]	; (800472c <HAL_TIM_Base_MspInit+0x74>)
 80046fc:	f043 0320 	orr.w	r3, r3, #32
 8004700:	6413      	str	r3, [r2, #64]	; 0x40
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_TIM_Base_MspInit+0x74>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800470e:	2200      	movs	r2, #0
 8004710:	2105      	movs	r1, #5
 8004712:	2037      	movs	r0, #55	; 0x37
 8004714:	f001 faec 	bl	8005cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004718:	2037      	movs	r0, #55	; 0x37
 800471a:	f001 fb05 	bl	8005d28 <HAL_NVIC_EnableIRQ>
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40010000 	.word	0x40010000
 800472c:	40023800 	.word	0x40023800
 8004730:	40001400 	.word	0x40001400

08004734 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004738:	4b11      	ldr	r3, [pc, #68]	; (8004780 <MX_USART1_UART_Init+0x4c>)
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <MX_USART1_UART_Init+0x50>)
 800473c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <MX_USART1_UART_Init+0x4c>)
 8004740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004746:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <MX_USART1_UART_Init+0x4c>)
 8004748:	2200      	movs	r2, #0
 800474a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <MX_USART1_UART_Init+0x4c>)
 800474e:	2200      	movs	r2, #0
 8004750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <MX_USART1_UART_Init+0x4c>)
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <MX_USART1_UART_Init+0x4c>)
 800475a:	220c      	movs	r2, #12
 800475c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <MX_USART1_UART_Init+0x4c>)
 8004760:	2200      	movs	r2, #0
 8004762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <MX_USART1_UART_Init+0x4c>)
 8004766:	2200      	movs	r2, #0
 8004768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800476a:	4805      	ldr	r0, [pc, #20]	; (8004780 <MX_USART1_UART_Init+0x4c>)
 800476c:	f005 fd30 	bl	800a1d0 <HAL_UART_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004776:	f7ff fcdb 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	2000b1d8 	.word	0x2000b1d8
 8004784:	40011000 	.word	0x40011000

08004788 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800478c:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <MX_USART3_UART_Init+0x4c>)
 800478e:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <MX_USART3_UART_Init+0x50>)
 8004790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <MX_USART3_UART_Init+0x4c>)
 8004794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <MX_USART3_UART_Init+0x4c>)
 800479c:	2200      	movs	r2, #0
 800479e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <MX_USART3_UART_Init+0x4c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <MX_USART3_UART_Init+0x4c>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <MX_USART3_UART_Init+0x4c>)
 80047ae:	220c      	movs	r2, #12
 80047b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047b2:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <MX_USART3_UART_Init+0x4c>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <MX_USART3_UART_Init+0x4c>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80047be:	4805      	ldr	r0, [pc, #20]	; (80047d4 <MX_USART3_UART_Init+0x4c>)
 80047c0:	f005 fd06 	bl	800a1d0 <HAL_UART_Init>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80047ca:	f7ff fcb1 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	2000b21c 	.word	0x2000b21c
 80047d8:	40004800 	.word	0x40004800

080047dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	f107 031c 	add.w	r3, r7, #28
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a33      	ldr	r2, [pc, #204]	; (80048c8 <HAL_UART_MspInit+0xec>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d12d      	bne.n	800485a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	4b32      	ldr	r3, [pc, #200]	; (80048cc <HAL_UART_MspInit+0xf0>)
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	4a31      	ldr	r2, [pc, #196]	; (80048cc <HAL_UART_MspInit+0xf0>)
 8004808:	f043 0310 	orr.w	r3, r3, #16
 800480c:	6453      	str	r3, [r2, #68]	; 0x44
 800480e:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <HAL_UART_MspInit+0xf0>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <HAL_UART_MspInit+0xf0>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <HAL_UART_MspInit+0xf0>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6313      	str	r3, [r2, #48]	; 0x30
 800482a:	4b28      	ldr	r3, [pc, #160]	; (80048cc <HAL_UART_MspInit+0xf0>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004836:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800483a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2302      	movs	r3, #2
 800483e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	2300      	movs	r3, #0
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004844:	2303      	movs	r3, #3
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004848:	2307      	movs	r3, #7
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484c:	f107 031c 	add.w	r3, r7, #28
 8004850:	4619      	mov	r1, r3
 8004852:	481f      	ldr	r0, [pc, #124]	; (80048d0 <HAL_UART_MspInit+0xf4>)
 8004854:	f001 fc7e 	bl	8006154 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004858:	e031      	b.n	80048be <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART3)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <HAL_UART_MspInit+0xf8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d12c      	bne.n	80048be <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	4b18      	ldr	r3, [pc, #96]	; (80048cc <HAL_UART_MspInit+0xf0>)
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	4a17      	ldr	r2, [pc, #92]	; (80048cc <HAL_UART_MspInit+0xf0>)
 800486e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004872:	6413      	str	r3, [r2, #64]	; 0x40
 8004874:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_UART_MspInit+0xf0>)
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_UART_MspInit+0xf0>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	4a10      	ldr	r2, [pc, #64]	; (80048cc <HAL_UART_MspInit+0xf0>)
 800488a:	f043 0304 	orr.w	r3, r3, #4
 800488e:	6313      	str	r3, [r2, #48]	; 0x30
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <HAL_UART_MspInit+0xf0>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800489c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a2:	2302      	movs	r3, #2
 80048a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048aa:	2303      	movs	r3, #3
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048ae:	2307      	movs	r3, #7
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048b2:	f107 031c 	add.w	r3, r7, #28
 80048b6:	4619      	mov	r1, r3
 80048b8:	4807      	ldr	r0, [pc, #28]	; (80048d8 <HAL_UART_MspInit+0xfc>)
 80048ba:	f001 fc4b 	bl	8006154 <HAL_GPIO_Init>
}
 80048be:	bf00      	nop
 80048c0:	3730      	adds	r7, #48	; 0x30
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40011000 	.word	0x40011000
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40020000 	.word	0x40020000
 80048d4:	40004800 	.word	0x40004800
 80048d8:	40020800 	.word	0x40020800

080048dc <_debugPrint>:
#include "util.h"

char debugBuff[MAX_DEBUG_BUFF] = {0,};

void _debugPrint(char *debugMsg, char *file, const char *func, int line)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af04      	add	r7, sp, #16
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
	int n;

	n = snprintf(debugBuff, MAX_DEBUG_BUFF,
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	9302      	str	r3, [sp, #8]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4a12      	ldr	r2, [pc, #72]	; (8004944 <_debugPrint+0x68>)
 80048fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048fe:	4812      	ldr	r0, [pc, #72]	; (8004948 <_debugPrint+0x6c>)
 8004900:	f021 f87e 	bl	8025a00 <sniprintf>
 8004904:	6178      	str	r0, [r7, #20]
				"File : %s \r\nFunction : %s \r\nLine : %d \r\nDebug : %s\r\n\r\n", file, func, line, debugMsg);
	if ( n < 0 || n >= MAX_DEBUG_BUFF )
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	db03      	blt.n	8004914 <_debugPrint+0x38>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004912:	db06      	blt.n	8004922 <_debugPrint+0x46>

	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)"debugPrint Error!!!\r\n", strlen("debugPrint Error!!!r\n"), 100);
 8004914:	2364      	movs	r3, #100	; 0x64
 8004916:	2215      	movs	r2, #21
 8004918:	490c      	ldr	r1, [pc, #48]	; (800494c <_debugPrint+0x70>)
 800491a:	480d      	ldr	r0, [pc, #52]	; (8004950 <_debugPrint+0x74>)
 800491c:	f005 fca5 	bl	800a26a <HAL_UART_Transmit>
 8004920:	e006      	b.n	8004930 <_debugPrint+0x54>
	}
	else
	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)debugBuff, n, 100);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	b29a      	uxth	r2, r3
 8004926:	2364      	movs	r3, #100	; 0x64
 8004928:	4907      	ldr	r1, [pc, #28]	; (8004948 <_debugPrint+0x6c>)
 800492a:	4809      	ldr	r0, [pc, #36]	; (8004950 <_debugPrint+0x74>)
 800492c:	f005 fc9d 	bl	800a26a <HAL_UART_Transmit>
	}
	memset(debugBuff, 0x0, MAX_DEBUG_BUFF);
 8004930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004934:	2100      	movs	r1, #0
 8004936:	4804      	ldr	r0, [pc, #16]	; (8004948 <_debugPrint+0x6c>)
 8004938:	f020 fc66 	bl	8025208 <memset>
}
 800493c:	bf00      	nop
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	0802789c 	.word	0x0802789c
 8004948:	20000404 	.word	0x20000404
 800494c:	080278d4 	.word	0x080278d4
 8004950:	2000b1d8 	.word	0x2000b1d8

08004954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800498c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004958:	480d      	ldr	r0, [pc, #52]	; (8004990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800495a:	490e      	ldr	r1, [pc, #56]	; (8004994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800495c:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800495e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004960:	e002      	b.n	8004968 <LoopCopyDataInit>

08004962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004966:	3304      	adds	r3, #4

08004968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800496a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800496c:	d3f9      	bcc.n	8004962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800496e:	4a0b      	ldr	r2, [pc, #44]	; (800499c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004970:	4c0b      	ldr	r4, [pc, #44]	; (80049a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004974:	e001      	b.n	800497a <LoopFillZerobss>

08004976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004978:	3204      	adds	r2, #4

0800497a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800497a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800497c:	d3fb      	bcc.n	8004976 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800497e:	f7ff fe03 	bl	8004588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004982:	f020 fbe5 	bl	8025150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004986:	f7ff fb09 	bl	8003f9c <main>
  bx  lr    
 800498a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800498c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004994:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8004998:	080645f4 	.word	0x080645f4
  ldr r2, =_sbss
 800499c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80049a0:	2000b2c8 	.word	0x2000b2c8

080049a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049a4:	e7fe      	b.n	80049a4 <ADC_IRQHandler>

080049a6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80049aa:	f000 fe49 	bl	8005640 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80049ae:	20ca      	movs	r0, #202	; 0xca
 80049b0:	f000 f95d 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80049b4:	20c3      	movs	r0, #195	; 0xc3
 80049b6:	f000 f967 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80049ba:	2008      	movs	r0, #8
 80049bc:	f000 f964 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80049c0:	2050      	movs	r0, #80	; 0x50
 80049c2:	f000 f961 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80049c6:	20cf      	movs	r0, #207	; 0xcf
 80049c8:	f000 f951 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80049cc:	2000      	movs	r0, #0
 80049ce:	f000 f95b 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80049d2:	20c1      	movs	r0, #193	; 0xc1
 80049d4:	f000 f958 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80049d8:	2030      	movs	r0, #48	; 0x30
 80049da:	f000 f955 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80049de:	20ed      	movs	r0, #237	; 0xed
 80049e0:	f000 f945 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80049e4:	2064      	movs	r0, #100	; 0x64
 80049e6:	f000 f94f 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80049ea:	2003      	movs	r0, #3
 80049ec:	f000 f94c 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80049f0:	2012      	movs	r0, #18
 80049f2:	f000 f949 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80049f6:	2081      	movs	r0, #129	; 0x81
 80049f8:	f000 f946 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80049fc:	20e8      	movs	r0, #232	; 0xe8
 80049fe:	f000 f936 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8004a02:	2085      	movs	r0, #133	; 0x85
 8004a04:	f000 f940 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f000 f93d 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8004a0e:	2078      	movs	r0, #120	; 0x78
 8004a10:	f000 f93a 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8004a14:	20cb      	movs	r0, #203	; 0xcb
 8004a16:	f000 f92a 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8004a1a:	2039      	movs	r0, #57	; 0x39
 8004a1c:	f000 f934 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8004a20:	202c      	movs	r0, #44	; 0x2c
 8004a22:	f000 f931 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004a26:	2000      	movs	r0, #0
 8004a28:	f000 f92e 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8004a2c:	2034      	movs	r0, #52	; 0x34
 8004a2e:	f000 f92b 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8004a32:	2002      	movs	r0, #2
 8004a34:	f000 f928 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8004a38:	20f7      	movs	r0, #247	; 0xf7
 8004a3a:	f000 f918 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8004a3e:	2020      	movs	r0, #32
 8004a40:	f000 f922 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8004a44:	20ea      	movs	r0, #234	; 0xea
 8004a46:	f000 f912 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f000 f91c 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f000 f919 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8004a56:	20b1      	movs	r0, #177	; 0xb1
 8004a58:	f000 f909 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f000 f913 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8004a62:	201b      	movs	r0, #27
 8004a64:	f000 f910 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8004a68:	20b6      	movs	r0, #182	; 0xb6
 8004a6a:	f000 f900 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8004a6e:	200a      	movs	r0, #10
 8004a70:	f000 f90a 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8004a74:	20a2      	movs	r0, #162	; 0xa2
 8004a76:	f000 f907 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8004a7a:	20c0      	movs	r0, #192	; 0xc0
 8004a7c:	f000 f8f7 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8004a80:	2010      	movs	r0, #16
 8004a82:	f000 f901 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8004a86:	20c1      	movs	r0, #193	; 0xc1
 8004a88:	f000 f8f1 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8004a8c:	2010      	movs	r0, #16
 8004a8e:	f000 f8fb 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8004a92:	20c5      	movs	r0, #197	; 0xc5
 8004a94:	f000 f8eb 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8004a98:	2045      	movs	r0, #69	; 0x45
 8004a9a:	f000 f8f5 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8004a9e:	2015      	movs	r0, #21
 8004aa0:	f000 f8f2 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8004aa4:	20c7      	movs	r0, #199	; 0xc7
 8004aa6:	f000 f8e2 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8004aaa:	2090      	movs	r0, #144	; 0x90
 8004aac:	f000 f8ec 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8004ab0:	2036      	movs	r0, #54	; 0x36
 8004ab2:	f000 f8dc 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8004ab6:	20c8      	movs	r0, #200	; 0xc8
 8004ab8:	f000 f8e6 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8004abc:	20f2      	movs	r0, #242	; 0xf2
 8004abe:	f000 f8d6 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f000 f8e0 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8004ac8:	20b0      	movs	r0, #176	; 0xb0
 8004aca:	f000 f8d0 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8004ace:	20c2      	movs	r0, #194	; 0xc2
 8004ad0:	f000 f8da 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8004ad4:	20b6      	movs	r0, #182	; 0xb6
 8004ad6:	f000 f8ca 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8004ada:	200a      	movs	r0, #10
 8004adc:	f000 f8d4 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8004ae0:	20a7      	movs	r0, #167	; 0xa7
 8004ae2:	f000 f8d1 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8004ae6:	2027      	movs	r0, #39	; 0x27
 8004ae8:	f000 f8ce 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8004aec:	2004      	movs	r0, #4
 8004aee:	f000 f8cb 	bl	8004c88 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8004af2:	202a      	movs	r0, #42	; 0x2a
 8004af4:	f000 f8bb 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004af8:	2000      	movs	r0, #0
 8004afa:	f000 f8c5 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004afe:	2000      	movs	r0, #0
 8004b00:	f000 f8c2 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004b04:	2000      	movs	r0, #0
 8004b06:	f000 f8bf 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8004b0a:	20ef      	movs	r0, #239	; 0xef
 8004b0c:	f000 f8bc 	bl	8004c88 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8004b10:	202b      	movs	r0, #43	; 0x2b
 8004b12:	f000 f8ac 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004b16:	2000      	movs	r0, #0
 8004b18:	f000 f8b6 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f000 f8b3 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8004b22:	2001      	movs	r0, #1
 8004b24:	f000 f8b0 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8004b28:	203f      	movs	r0, #63	; 0x3f
 8004b2a:	f000 f8ad 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8004b2e:	20f6      	movs	r0, #246	; 0xf6
 8004b30:	f000 f89d 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8004b34:	2001      	movs	r0, #1
 8004b36:	f000 f8a7 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f000 f8a4 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8004b40:	2006      	movs	r0, #6
 8004b42:	f000 f8a1 	bl	8004c88 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8004b46:	202c      	movs	r0, #44	; 0x2c
 8004b48:	f000 f891 	bl	8004c6e <ili9341_WriteReg>
  LCD_Delay(200);
 8004b4c:	20c8      	movs	r0, #200	; 0xc8
 8004b4e:	f000 fe65 	bl	800581c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8004b52:	2026      	movs	r0, #38	; 0x26
 8004b54:	f000 f88b 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8004b58:	2001      	movs	r0, #1
 8004b5a:	f000 f895 	bl	8004c88 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8004b5e:	20e0      	movs	r0, #224	; 0xe0
 8004b60:	f000 f885 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8004b64:	200f      	movs	r0, #15
 8004b66:	f000 f88f 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8004b6a:	2029      	movs	r0, #41	; 0x29
 8004b6c:	f000 f88c 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8004b70:	2024      	movs	r0, #36	; 0x24
 8004b72:	f000 f889 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8004b76:	200c      	movs	r0, #12
 8004b78:	f000 f886 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8004b7c:	200e      	movs	r0, #14
 8004b7e:	f000 f883 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8004b82:	2009      	movs	r0, #9
 8004b84:	f000 f880 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8004b88:	204e      	movs	r0, #78	; 0x4e
 8004b8a:	f000 f87d 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8004b8e:	2078      	movs	r0, #120	; 0x78
 8004b90:	f000 f87a 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8004b94:	203c      	movs	r0, #60	; 0x3c
 8004b96:	f000 f877 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8004b9a:	2009      	movs	r0, #9
 8004b9c:	f000 f874 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8004ba0:	2013      	movs	r0, #19
 8004ba2:	f000 f871 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8004ba6:	2005      	movs	r0, #5
 8004ba8:	f000 f86e 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8004bac:	2017      	movs	r0, #23
 8004bae:	f000 f86b 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8004bb2:	2011      	movs	r0, #17
 8004bb4:	f000 f868 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f000 f865 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8004bbe:	20e1      	movs	r0, #225	; 0xe1
 8004bc0:	f000 f855 	bl	8004c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	f000 f85f 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8004bca:	2016      	movs	r0, #22
 8004bcc:	f000 f85c 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8004bd0:	201b      	movs	r0, #27
 8004bd2:	f000 f859 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8004bd6:	2004      	movs	r0, #4
 8004bd8:	f000 f856 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8004bdc:	2011      	movs	r0, #17
 8004bde:	f000 f853 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8004be2:	2007      	movs	r0, #7
 8004be4:	f000 f850 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8004be8:	2031      	movs	r0, #49	; 0x31
 8004bea:	f000 f84d 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8004bee:	2033      	movs	r0, #51	; 0x33
 8004bf0:	f000 f84a 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8004bf4:	2042      	movs	r0, #66	; 0x42
 8004bf6:	f000 f847 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8004bfa:	2005      	movs	r0, #5
 8004bfc:	f000 f844 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8004c00:	200c      	movs	r0, #12
 8004c02:	f000 f841 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8004c06:	200a      	movs	r0, #10
 8004c08:	f000 f83e 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8004c0c:	2028      	movs	r0, #40	; 0x28
 8004c0e:	f000 f83b 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8004c12:	202f      	movs	r0, #47	; 0x2f
 8004c14:	f000 f838 	bl	8004c88 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8004c18:	200f      	movs	r0, #15
 8004c1a:	f000 f835 	bl	8004c88 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8004c1e:	2011      	movs	r0, #17
 8004c20:	f000 f825 	bl	8004c6e <ili9341_WriteReg>
  LCD_Delay(200);
 8004c24:	20c8      	movs	r0, #200	; 0xc8
 8004c26:	f000 fdf9 	bl	800581c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8004c2a:	2029      	movs	r0, #41	; 0x29
 8004c2c:	f000 f81f 	bl	8004c6e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8004c30:	202c      	movs	r0, #44	; 0x2c
 8004c32:	f000 f81c 	bl	8004c6e <ili9341_WriteReg>
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8004c3e:	f000 fcff 	bl	8005640 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8004c42:	2103      	movs	r1, #3
 8004c44:	20d3      	movs	r0, #211	; 0xd3
 8004c46:	f000 f82c 	bl	8004ca2 <ili9341_ReadData>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	b29b      	uxth	r3, r3
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8004c56:	2029      	movs	r0, #41	; 0x29
 8004c58:	f000 f809 	bl	8004c6e <ili9341_WriteReg>
}
 8004c5c:	bf00      	nop
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8004c64:	2028      	movs	r0, #40	; 0x28
 8004c66:	f000 f802 	bl	8004c6e <ili9341_WriteReg>
}
 8004c6a:	bf00      	nop
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	4603      	mov	r3, r0
 8004c76:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fd7a 	bl	8005774 <LCD_IO_WriteReg>
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fd4b 	bl	8005730 <LCD_IO_WriteData>
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	460a      	mov	r2, r1
 8004cac:	80fb      	strh	r3, [r7, #6]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8004cb2:	797a      	ldrb	r2, [r7, #5]
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fd7d 	bl	80057b8 <LCD_IO_ReadData>
 8004cbe:	4603      	mov	r3, r0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8004ccc:	23f0      	movs	r3, #240	; 0xf0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8004cdc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fa59 	bl	80051b0 <stmpe811_GetInstance>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	2bff      	cmp	r3, #255	; 0xff
 8004d06:	d112      	bne.n	8004d2e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f000 fa51 	bl	80051b0 <stmpe811_GetInstance>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8004d12:	7bbb      	ldrb	r3, [r7, #14]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d80a      	bhi.n	8004d2e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	b2d1      	uxtb	r1, r2
 8004d1e:	4a06      	ldr	r2, [pc, #24]	; (8004d38 <stmpe811_Init+0x4c>)
 8004d20:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8004d22:	f000 fd86 	bl	8005832 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f807 	bl	8004d3c <stmpe811_Reset>
    }
  }
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000c04 	.word	0x20000c04

08004d3c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	2103      	movs	r1, #3
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fd7b 	bl	800584a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8004d54:	200a      	movs	r0, #10
 8004d56:	f000 fdb5 	bl	80058c4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2103      	movs	r1, #3
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fd71 	bl	800584a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8004d68:	2002      	movs	r0, #2
 8004d6a:	f000 fdab 	bl	80058c4 <IOE_Delay>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8004d76:	b590      	push	{r4, r7, lr}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8004d80:	f000 fd57 	bl	8005832 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2100      	movs	r1, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fd70 	bl	8005870 <IOE_Read>
 8004d90:	4603      	mov	r3, r0
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fd67 	bl	8005870 <IOE_Read>
 8004da2:	4603      	mov	r3, r0
 8004da4:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004da6:	4323      	orrs	r3, r4
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	b29b      	uxth	r3, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd90      	pop	{r4, r7, pc}

08004db4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2109      	movs	r1, #9
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fd51 	bl	8005870 <IOE_Read>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	7bfa      	ldrb	r2, [r7, #15]
 8004de0:	2109      	movs	r1, #9
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fd31 	bl	800584a <IOE_Write>
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2109      	movs	r1, #9
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fd33 	bl	8005870 <IOE_Read>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	2109      	movs	r1, #9
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fd13 	bl	800584a <IOE_Write>
    
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	460a      	mov	r2, r1
 8004e36:	80fb      	strh	r3, [r7, #6]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	210a      	movs	r1, #10
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fd12 	bl	8005870 <IOE_Read>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	797b      	ldrb	r3, [r7, #5]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	210a      	movs	r1, #10
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fcf2 	bl	800584a <IOE_Write>
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	4603      	mov	r3, r0
 8004e76:	460a      	mov	r2, r1
 8004e78:	80fb      	strh	r3, [r7, #6]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	210a      	movs	r1, #10
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fcf1 	bl	8005870 <IOE_Read>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8004e92:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004e96:	43db      	mvns	r3, r3
 8004e98:	b25a      	sxtb	r2, r3
 8004e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	b25b      	sxtb	r3, r3
 8004ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	210a      	movs	r1, #10
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fccc 	bl	800584a <IOE_Write>
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	460a      	mov	r2, r1
 8004ec4:	80fb      	strh	r3, [r7, #6]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	210b      	movs	r1, #11
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fccd 	bl	8005870 <IOE_Read>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	797b      	ldrb	r3, [r7, #5]
 8004edc:	4013      	ands	r3, r2
 8004ede:	b2db      	uxtb	r3, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	460a      	mov	r2, r1
 8004ef2:	80fb      	strh	r3, [r7, #6]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	797a      	ldrb	r2, [r7, #5]
 8004efe:	210b      	movs	r1, #11
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fca2 	bl	800584a <IOE_Write>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	4603      	mov	r3, r0
 8004f16:	6039      	str	r1, [r7, #0]
 8004f18:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2117      	movs	r1, #23
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fca3 	bl	8005870 <IOE_Read>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	b25b      	sxtb	r3, r3
 8004f32:	43db      	mvns	r3, r3
 8004f34:	b25a      	sxtb	r2, r3
 8004f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	b25b      	sxtb	r3, r3
 8004f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	2117      	movs	r1, #23
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fc7e 	bl	800584a <IOE_Write>
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2104      	movs	r1, #4
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fc82 	bl	8005870 <IOE_Read>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	f023 0304 	bic.w	r3, r3, #4
 8004f76:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	7bfa      	ldrb	r2, [r7, #15]
 8004f7e:	2104      	movs	r1, #4
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fc62 	bl	800584a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	21f0      	movs	r1, #240	; 0xf0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ffbf 	bl	8004f0e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	f023 0303 	bic.w	r3, r3, #3
 8004f96:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004f98:	88fb      	ldrh	r3, [r7, #6]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	7bfa      	ldrb	r2, [r7, #15]
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fc52 	bl	800584a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2249      	movs	r2, #73	; 0x49
 8004fac:	2120      	movs	r1, #32
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fc4b 	bl	800584a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8004fb4:	2002      	movs	r0, #2
 8004fb6:	f000 fc85 	bl	80058c4 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	2121      	movs	r1, #33	; 0x21
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fc41 	bl	800584a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	229a      	movs	r2, #154	; 0x9a
 8004fce:	2141      	movs	r1, #65	; 0x41
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fc3a 	bl	800584a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2201      	movs	r2, #1
 8004fdc:	214a      	movs	r1, #74	; 0x4a
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fc33 	bl	800584a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2201      	movs	r2, #1
 8004fea:	214b      	movs	r1, #75	; 0x4b
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fc2c 	bl	800584a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	214b      	movs	r1, #75	; 0x4b
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fc25 	bl	800584a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2201      	movs	r2, #1
 8005006:	2156      	movs	r1, #86	; 0x56
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fc1e 	bl	800584a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2201      	movs	r2, #1
 8005014:	2158      	movs	r1, #88	; 0x58
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fc17 	bl	800584a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2201      	movs	r2, #1
 8005022:	2140      	movs	r1, #64	; 0x40
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fc10 	bl	800584a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	22ff      	movs	r2, #255	; 0xff
 8005030:	210b      	movs	r1, #11
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fc09 	bl	800584a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8005038:	2002      	movs	r0, #2
 800503a:	f000 fc43 	bl	80058c4 <IOE_Delay>
}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	4603      	mov	r3, r0
 800504e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2140      	movs	r1, #64	; 0x40
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fc08 	bl	8005870 <IOE_Read>
 8005060:	4603      	mov	r3, r0
 8005062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	bf0c      	ite	eq
 800506a:	2301      	moveq	r3, #1
 800506c:	2300      	movne	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8005072:	7bbb      	ldrb	r3, [r7, #14]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00b      	beq.n	8005090 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	214c      	movs	r1, #76	; 0x4c
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fbf6 	bl	8005870 <IOE_Read>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d010      	beq.n	80050ac <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800508a:	2301      	movs	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
 800508e:	e00d      	b.n	80050ac <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2201      	movs	r2, #1
 8005096:	214b      	movs	r1, #75	; 0x4b
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fbd6 	bl	800584a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2200      	movs	r2, #0
 80050a4:	214b      	movs	r1, #75	; 0x4b
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fbcf 	bl	800584a <IOE_Write>
  }
  
  return ret;
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b086      	sub	sp, #24
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	4603      	mov	r3, r0
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
 80050c2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80050c4:	89fb      	ldrh	r3, [r7, #14]
 80050c6:	b2d8      	uxtb	r0, r3
 80050c8:	f107 0210 	add.w	r2, r7, #16
 80050cc:	2304      	movs	r3, #4
 80050ce:	21d7      	movs	r1, #215	; 0xd7
 80050d0:	f000 fbe1 	bl	8005896 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80050d4:	7c3b      	ldrb	r3, [r7, #16]
 80050d6:	061a      	lsls	r2, r3, #24
 80050d8:	7c7b      	ldrb	r3, [r7, #17]
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	431a      	orrs	r2, r3
 80050de:	7cbb      	ldrb	r3, [r7, #18]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	4313      	orrs	r3, r2
 80050e4:	7cfa      	ldrb	r2, [r7, #19]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	0d1b      	lsrs	r3, r3, #20
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fe:	b29a      	uxth	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8005104:	89fb      	ldrh	r3, [r7, #14]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2201      	movs	r2, #1
 800510a:	214b      	movs	r1, #75	; 0x4b
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fb9c 	bl	800584a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8005112:	89fb      	ldrh	r3, [r7, #14]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2200      	movs	r2, #0
 8005118:	214b      	movs	r1, #75	; 0x4b
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fb95 	bl	800584a <IOE_Write>
}
 8005120:	bf00      	nop
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8005132:	f000 fb84 	bl	800583e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	211f      	movs	r1, #31
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff fe76 	bl	8004e2c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fe36 	bl	8004db4 <stmpe811_EnableGlobalIT>
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fe47 	bl	8004df0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	211f      	movs	r1, #31
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fe81 	bl	8004e6e <stmpe811_DisableITSource>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	211f      	movs	r1, #31
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fe99 	bl	8004eba <stmpe811_ReadGITStatus>
 8005188:	4603      	mov	r3, r0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	4603      	mov	r3, r0
 800519a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	211f      	movs	r1, #31
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fea1 	bl	8004ee8 <stmpe811_ClearGlobalIT>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
 80051c2:	e00b      	b.n	80051dc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <stmpe811_GetInstance+0x40>)
 80051c8:	5cd3      	ldrb	r3, [r2, r3]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d101      	bne.n	80051d6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	e006      	b.n	80051e4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	3301      	adds	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d9f0      	bls.n	80051c4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80051e2:	23ff      	movs	r3, #255	; 0xff
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	20000c04 	.word	0x20000c04

080051f4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <I2Cx_MspInit+0xdc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d15f      	bne.n	80052c6 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	4b32      	ldr	r3, [pc, #200]	; (80052d4 <I2Cx_MspInit+0xe0>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	4a31      	ldr	r2, [pc, #196]	; (80052d4 <I2Cx_MspInit+0xe0>)
 8005210:	f043 0304 	orr.w	r3, r3, #4
 8005214:	6313      	str	r3, [r2, #48]	; 0x30
 8005216:	4b2f      	ldr	r3, [pc, #188]	; (80052d4 <I2Cx_MspInit+0xe0>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <I2Cx_MspInit+0xe0>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <I2Cx_MspInit+0xe0>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	6313      	str	r3, [r2, #48]	; 0x30
 8005232:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <I2Cx_MspInit+0xe0>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800523e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8005244:	2312      	movs	r3, #18
 8005246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800524c:	2302      	movs	r3, #2
 800524e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8005250:	2304      	movs	r3, #4
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005254:	f107 0314 	add.w	r3, r7, #20
 8005258:	4619      	mov	r1, r3
 800525a:	481f      	ldr	r0, [pc, #124]	; (80052d8 <I2Cx_MspInit+0xe4>)
 800525c:	f000 ff7a 	bl	8006154 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8005260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005264:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005266:	f107 0314 	add.w	r3, r7, #20
 800526a:	4619      	mov	r1, r3
 800526c:	481b      	ldr	r0, [pc, #108]	; (80052dc <I2Cx_MspInit+0xe8>)
 800526e:	f000 ff71 	bl	8006154 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <I2Cx_MspInit+0xe0>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	4a16      	ldr	r2, [pc, #88]	; (80052d4 <I2Cx_MspInit+0xe0>)
 800527c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005280:	6413      	str	r3, [r2, #64]	; 0x40
 8005282:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <I2Cx_MspInit+0xe0>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800528a:	60bb      	str	r3, [r7, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800528e:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <I2Cx_MspInit+0xe0>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	4a10      	ldr	r2, [pc, #64]	; (80052d4 <I2Cx_MspInit+0xe0>)
 8005294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005298:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800529a:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <I2Cx_MspInit+0xe0>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <I2Cx_MspInit+0xe0>)
 80052a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052a4:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80052a6:	2200      	movs	r2, #0
 80052a8:	210f      	movs	r1, #15
 80052aa:	2048      	movs	r0, #72	; 0x48
 80052ac:	f000 fd20 	bl	8005cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80052b0:	2048      	movs	r0, #72	; 0x48
 80052b2:	f000 fd39 	bl	8005d28 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80052b6:	2200      	movs	r2, #0
 80052b8:	210f      	movs	r1, #15
 80052ba:	2049      	movs	r0, #73	; 0x49
 80052bc:	f000 fd18 	bl	8005cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80052c0:	2049      	movs	r0, #73	; 0x49
 80052c2:	f000 fd31 	bl	8005d28 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80052c6:	bf00      	nop
 80052c8:	3728      	adds	r7, #40	; 0x28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40005c00 	.word	0x40005c00
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40020000 	.word	0x40020000
 80052dc:	40020800 	.word	0x40020800

080052e0 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80052e4:	4814      	ldr	r0, [pc, #80]	; (8005338 <I2Cx_Init+0x58>)
 80052e6:	f001 feb5 	bl	8007054 <HAL_I2C_GetState>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d121      	bne.n	8005334 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80052f0:	4b11      	ldr	r3, [pc, #68]	; (8005338 <I2Cx_Init+0x58>)
 80052f2:	4a12      	ldr	r2, [pc, #72]	; (800533c <I2Cx_Init+0x5c>)
 80052f4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <I2Cx_Init+0x58>)
 80052f8:	4a11      	ldr	r2, [pc, #68]	; (8005340 <I2Cx_Init+0x60>)
 80052fa:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80052fc:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <I2Cx_Init+0x58>)
 80052fe:	2200      	movs	r2, #0
 8005300:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <I2Cx_Init+0x58>)
 8005304:	2200      	movs	r2, #0
 8005306:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <I2Cx_Init+0x58>)
 800530a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800530e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8005310:	4b09      	ldr	r3, [pc, #36]	; (8005338 <I2Cx_Init+0x58>)
 8005312:	2200      	movs	r2, #0
 8005314:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <I2Cx_Init+0x58>)
 8005318:	2200      	movs	r2, #0
 800531a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <I2Cx_Init+0x58>)
 800531e:	2200      	movs	r2, #0
 8005320:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <I2Cx_Init+0x58>)
 8005324:	2200      	movs	r2, #0
 8005326:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8005328:	4803      	ldr	r0, [pc, #12]	; (8005338 <I2Cx_Init+0x58>)
 800532a:	f7ff ff63 	bl	80051f4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800532e:	4802      	ldr	r0, [pc, #8]	; (8005338 <I2Cx_Init+0x58>)
 8005330:	f001 f9fc 	bl	800672c <HAL_I2C_Init>
  }
}
 8005334:	bf00      	nop
 8005336:	bd80      	pop	{r7, pc}
 8005338:	2000b260 	.word	0x2000b260
 800533c:	40005c00 	.word	0x40005c00
 8005340:	000186a0 	.word	0x000186a0

08005344 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4b13      	ldr	r3, [pc, #76]	; (800539c <I2Cx_ITConfig+0x58>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	4a12      	ldr	r2, [pc, #72]	; (800539c <I2Cx_ITConfig+0x58>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	6313      	str	r3, [r2, #48]	; 0x30
 800535a:	4b10      	ldr	r3, [pc, #64]	; (800539c <I2Cx_ITConfig+0x58>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8005366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800536c:	2301      	movs	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8005374:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005378:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800537a:	1d3b      	adds	r3, r7, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4808      	ldr	r0, [pc, #32]	; (80053a0 <I2Cx_ITConfig+0x5c>)
 8005380:	f000 fee8 	bl	8006154 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8005384:	2200      	movs	r2, #0
 8005386:	210f      	movs	r1, #15
 8005388:	2028      	movs	r0, #40	; 0x28
 800538a:	f000 fcb1 	bl	8005cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800538e:	2028      	movs	r0, #40	; 0x28
 8005390:	f000 fcca 	bl	8005d28 <HAL_NVIC_EnableIRQ>
}
 8005394:	bf00      	nop
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	40020000 	.word	0x40020000

080053a4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af04      	add	r7, sp, #16
 80053aa:	4603      	mov	r3, r0
 80053ac:	71fb      	strb	r3, [r7, #7]
 80053ae:	460b      	mov	r3, r1
 80053b0:	71bb      	strb	r3, [r7, #6]
 80053b2:	4613      	mov	r3, r2
 80053b4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	b299      	uxth	r1, r3
 80053be:	79bb      	ldrb	r3, [r7, #6]
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <I2Cx_WriteData+0x4c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	9302      	str	r3, [sp, #8]
 80053c8:	2301      	movs	r3, #1
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	1d7b      	adds	r3, r7, #5
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	2301      	movs	r3, #1
 80053d2:	4808      	ldr	r0, [pc, #32]	; (80053f4 <I2Cx_WriteData+0x50>)
 80053d4:	f001 fb1e 	bl	8006a14 <HAL_I2C_Mem_Write>
 80053d8:	4603      	mov	r3, r0
 80053da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80053e2:	f000 f863 	bl	80054ac <I2Cx_Error>
  }        
}
 80053e6:	bf00      	nop
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000088 	.word	0x20000088
 80053f4:	2000b260 	.word	0x2000b260

080053f8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af04      	add	r7, sp, #16
 80053fe:	4603      	mov	r3, r0
 8005400:	460a      	mov	r2, r1
 8005402:	71fb      	strb	r3, [r7, #7]
 8005404:	4613      	mov	r3, r2
 8005406:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	b299      	uxth	r1, r3
 8005414:	79bb      	ldrb	r3, [r7, #6]
 8005416:	b29a      	uxth	r2, r3
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <I2Cx_ReadData+0x50>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	9302      	str	r3, [sp, #8]
 800541e:	2301      	movs	r3, #1
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	f107 030e 	add.w	r3, r7, #14
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2301      	movs	r3, #1
 800542a:	4808      	ldr	r0, [pc, #32]	; (800544c <I2Cx_ReadData+0x54>)
 800542c:	f001 fbec 	bl	8006c08 <HAL_I2C_Mem_Read>
 8005430:	4603      	mov	r3, r0
 8005432:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800543a:	f000 f837 	bl	80054ac <I2Cx_Error>
  
  }
  return value;
 800543e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000088 	.word	0x20000088
 800544c:	2000b260 	.word	0x2000b260

08005450 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af04      	add	r7, sp, #16
 8005456:	603a      	str	r2, [r7, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
 800545e:	460b      	mov	r3, r1
 8005460:	71bb      	strb	r3, [r7, #6]
 8005462:	4613      	mov	r3, r2
 8005464:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	b299      	uxth	r1, r3
 800546e:	79bb      	ldrb	r3, [r7, #6]
 8005470:	b29a      	uxth	r2, r3
 8005472:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <I2Cx_ReadBuffer+0x54>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	9302      	str	r3, [sp, #8]
 8005478:	88bb      	ldrh	r3, [r7, #4]
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	2301      	movs	r3, #1
 8005482:	4809      	ldr	r0, [pc, #36]	; (80054a8 <I2Cx_ReadBuffer+0x58>)
 8005484:	f001 fbc0 	bl	8006c08 <HAL_I2C_Mem_Read>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8005492:	2300      	movs	r3, #0
 8005494:	e002      	b.n	800549c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8005496:	f000 f809 	bl	80054ac <I2Cx_Error>

    return 1;
 800549a:	2301      	movs	r3, #1
  }
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000088 	.word	0x20000088
 80054a8:	2000b260 	.word	0x2000b260

080054ac <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80054b0:	4803      	ldr	r0, [pc, #12]	; (80054c0 <I2Cx_Error+0x14>)
 80054b2:	f001 fa7f 	bl	80069b4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80054b6:	f7ff ff13 	bl	80052e0 <I2Cx_Init>
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	2000b260 	.word	0x2000b260

080054c4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80054c8:	4819      	ldr	r0, [pc, #100]	; (8005530 <SPIx_Init+0x6c>)
 80054ca:	f004 f8c0 	bl	800964e <HAL_SPI_GetState>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d12b      	bne.n	800552c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80054d4:	4b16      	ldr	r3, [pc, #88]	; (8005530 <SPIx_Init+0x6c>)
 80054d6:	4a17      	ldr	r2, [pc, #92]	; (8005534 <SPIx_Init+0x70>)
 80054d8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <SPIx_Init+0x6c>)
 80054dc:	2218      	movs	r2, #24
 80054de:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80054e0:	4b13      	ldr	r3, [pc, #76]	; (8005530 <SPIx_Init+0x6c>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80054e6:	4b12      	ldr	r3, [pc, #72]	; (8005530 <SPIx_Init+0x6c>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80054ec:	4b10      	ldr	r3, [pc, #64]	; (8005530 <SPIx_Init+0x6c>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <SPIx_Init+0x6c>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80054f8:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <SPIx_Init+0x6c>)
 80054fa:	2207      	movs	r2, #7
 80054fc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <SPIx_Init+0x6c>)
 8005500:	2200      	movs	r2, #0
 8005502:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8005504:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <SPIx_Init+0x6c>)
 8005506:	2200      	movs	r2, #0
 8005508:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <SPIx_Init+0x6c>)
 800550c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005510:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <SPIx_Init+0x6c>)
 8005514:	2200      	movs	r2, #0
 8005516:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <SPIx_Init+0x6c>)
 800551a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800551e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8005520:	4803      	ldr	r0, [pc, #12]	; (8005530 <SPIx_Init+0x6c>)
 8005522:	f000 f853 	bl	80055cc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8005526:	4802      	ldr	r0, [pc, #8]	; (8005530 <SPIx_Init+0x6c>)
 8005528:	f003 fbf1 	bl	8008d0e <HAL_SPI_Init>
  } 
}
 800552c:	bf00      	nop
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000c08 	.word	0x20000c08
 8005534:	40015000 	.word	0x40015000

08005538 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	b29a      	uxth	r2, r3
 800554a:	4b09      	ldr	r3, [pc, #36]	; (8005570 <SPIx_Read+0x38>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f107 0108 	add.w	r1, r7, #8
 8005552:	4808      	ldr	r0, [pc, #32]	; (8005574 <SPIx_Read+0x3c>)
 8005554:	f003 fdc8 	bl	80090e8 <HAL_SPI_Receive>
 8005558:	4603      	mov	r3, r0
 800555a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8005562:	f000 f827 	bl	80055b4 <SPIx_Error>
  }
  
  return readvalue;
 8005566:	68bb      	ldr	r3, [r7, #8]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	2000008c 	.word	0x2000008c
 8005574:	20000c08 	.word	0x20000c08

08005578 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8005586:	4b09      	ldr	r3, [pc, #36]	; (80055ac <SPIx_Write+0x34>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	1db9      	adds	r1, r7, #6
 800558c:	2201      	movs	r2, #1
 800558e:	4808      	ldr	r0, [pc, #32]	; (80055b0 <SPIx_Write+0x38>)
 8005590:	f003 fc6e 	bl	8008e70 <HAL_SPI_Transmit>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800559e:	f000 f809 	bl	80055b4 <SPIx_Error>
  }
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	2000008c 	.word	0x2000008c
 80055b0:	20000c08 	.word	0x20000c08

080055b4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80055b8:	4803      	ldr	r0, [pc, #12]	; (80055c8 <SPIx_Error+0x14>)
 80055ba:	f003 fc31 	bl	8008e20 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80055be:	f7ff ff81 	bl	80054c4 <SPIx_Init>
}
 80055c2:	bf00      	nop
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000c08 	.word	0x20000c08

080055cc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80055d4:	2300      	movs	r3, #0
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	4b17      	ldr	r3, [pc, #92]	; (8005638 <SPIx_MspInit+0x6c>)
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	4a16      	ldr	r2, [pc, #88]	; (8005638 <SPIx_MspInit+0x6c>)
 80055de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055e2:	6453      	str	r3, [r2, #68]	; 0x44
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <SPIx_MspInit+0x6c>)
 80055e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	4b10      	ldr	r3, [pc, #64]	; (8005638 <SPIx_MspInit+0x6c>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	4a0f      	ldr	r2, [pc, #60]	; (8005638 <SPIx_MspInit+0x6c>)
 80055fa:	f043 0320 	orr.w	r3, r3, #32
 80055fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005600:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <SPIx_MspInit+0x6c>)
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800560c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005610:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8005612:	2302      	movs	r3, #2
 8005614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8005616:	2302      	movs	r3, #2
 8005618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800561a:	2301      	movs	r3, #1
 800561c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800561e:	2305      	movs	r3, #5
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005622:	f107 0314 	add.w	r3, r7, #20
 8005626:	4619      	mov	r1, r3
 8005628:	4804      	ldr	r0, [pc, #16]	; (800563c <SPIx_MspInit+0x70>)
 800562a:	f000 fd93 	bl	8006154 <HAL_GPIO_Init>
}
 800562e:	bf00      	nop
 8005630:	3728      	adds	r7, #40	; 0x28
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800
 800563c:	40021400 	.word	0x40021400

08005640 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8005646:	4b36      	ldr	r3, [pc, #216]	; (8005720 <LCD_IO_Init+0xe0>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d164      	bne.n	8005718 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800564e:	4b34      	ldr	r3, [pc, #208]	; (8005720 <LCD_IO_Init+0xe0>)
 8005650:	2201      	movs	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	4b32      	ldr	r3, [pc, #200]	; (8005724 <LCD_IO_Init+0xe4>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	4a31      	ldr	r2, [pc, #196]	; (8005724 <LCD_IO_Init+0xe4>)
 800565e:	f043 0308 	orr.w	r3, r3, #8
 8005662:	6313      	str	r3, [r2, #48]	; 0x30
 8005664:	4b2f      	ldr	r3, [pc, #188]	; (8005724 <LCD_IO_Init+0xe4>)
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8005670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005674:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005676:	2301      	movs	r3, #1
 8005678:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800567e:	2302      	movs	r3, #2
 8005680:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8005682:	f107 030c 	add.w	r3, r7, #12
 8005686:	4619      	mov	r1, r3
 8005688:	4827      	ldr	r0, [pc, #156]	; (8005728 <LCD_IO_Init+0xe8>)
 800568a:	f000 fd63 	bl	8006154 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	4b24      	ldr	r3, [pc, #144]	; (8005724 <LCD_IO_Init+0xe4>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	4a23      	ldr	r2, [pc, #140]	; (8005724 <LCD_IO_Init+0xe4>)
 8005698:	f043 0308 	orr.w	r3, r3, #8
 800569c:	6313      	str	r3, [r2, #48]	; 0x30
 800569e:	4b21      	ldr	r3, [pc, #132]	; (8005724 <LCD_IO_Init+0xe4>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	607b      	str	r3, [r7, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80056aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80056b0:	2301      	movs	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80056b8:	2302      	movs	r3, #2
 80056ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	4619      	mov	r1, r3
 80056c2:	4819      	ldr	r0, [pc, #100]	; (8005728 <LCD_IO_Init+0xe8>)
 80056c4:	f000 fd46 	bl	8006154 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80056c8:	2300      	movs	r3, #0
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4b15      	ldr	r3, [pc, #84]	; (8005724 <LCD_IO_Init+0xe4>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	4a14      	ldr	r2, [pc, #80]	; (8005724 <LCD_IO_Init+0xe4>)
 80056d2:	f043 0304 	orr.w	r3, r3, #4
 80056d6:	6313      	str	r3, [r2, #48]	; 0x30
 80056d8:	4b12      	ldr	r3, [pc, #72]	; (8005724 <LCD_IO_Init+0xe4>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80056e4:	2304      	movs	r3, #4
 80056e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80056e8:	2301      	movs	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80056f0:	2302      	movs	r3, #2
 80056f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80056f4:	f107 030c 	add.w	r3, r7, #12
 80056f8:	4619      	mov	r1, r3
 80056fa:	480c      	ldr	r0, [pc, #48]	; (800572c <LCD_IO_Init+0xec>)
 80056fc:	f000 fd2a 	bl	8006154 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8005700:	2200      	movs	r2, #0
 8005702:	2104      	movs	r1, #4
 8005704:	4809      	ldr	r0, [pc, #36]	; (800572c <LCD_IO_Init+0xec>)
 8005706:	f000 ffdd 	bl	80066c4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800570a:	2201      	movs	r2, #1
 800570c:	2104      	movs	r1, #4
 800570e:	4807      	ldr	r0, [pc, #28]	; (800572c <LCD_IO_Init+0xec>)
 8005710:	f000 ffd8 	bl	80066c4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8005714:	f7ff fed6 	bl	80054c4 <SPIx_Init>
  }
}
 8005718:	bf00      	nop
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20000c60 	.word	0x20000c60
 8005724:	40023800 	.word	0x40023800
 8005728:	40020c00 	.word	0x40020c00
 800572c:	40020800 	.word	0x40020800

08005730 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800573a:	2201      	movs	r2, #1
 800573c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005740:	480a      	ldr	r0, [pc, #40]	; (800576c <LCD_IO_WriteData+0x3c>)
 8005742:	f000 ffbf 	bl	80066c4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8005746:	2200      	movs	r2, #0
 8005748:	2104      	movs	r1, #4
 800574a:	4809      	ldr	r0, [pc, #36]	; (8005770 <LCD_IO_WriteData+0x40>)
 800574c:	f000 ffba 	bl	80066c4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8005750:	88fb      	ldrh	r3, [r7, #6]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff ff10 	bl	8005578 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005758:	2201      	movs	r2, #1
 800575a:	2104      	movs	r1, #4
 800575c:	4804      	ldr	r0, [pc, #16]	; (8005770 <LCD_IO_WriteData+0x40>)
 800575e:	f000 ffb1 	bl	80066c4 <HAL_GPIO_WritePin>
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40020c00 	.word	0x40020c00
 8005770:	40020800 	.word	0x40020800

08005774 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800577e:	2200      	movs	r2, #0
 8005780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005784:	480a      	ldr	r0, [pc, #40]	; (80057b0 <LCD_IO_WriteReg+0x3c>)
 8005786:	f000 ff9d 	bl	80066c4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800578a:	2200      	movs	r2, #0
 800578c:	2104      	movs	r1, #4
 800578e:	4809      	ldr	r0, [pc, #36]	; (80057b4 <LCD_IO_WriteReg+0x40>)
 8005790:	f000 ff98 	bl	80066c4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	b29b      	uxth	r3, r3
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff feed 	bl	8005578 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800579e:	2201      	movs	r2, #1
 80057a0:	2104      	movs	r1, #4
 80057a2:	4804      	ldr	r0, [pc, #16]	; (80057b4 <LCD_IO_WriteReg+0x40>)
 80057a4:	f000 ff8e 	bl	80066c4 <HAL_GPIO_WritePin>
}
 80057a8:	bf00      	nop
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40020c00 	.word	0x40020c00
 80057b4:	40020800 	.word	0x40020800

080057b8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	460a      	mov	r2, r1
 80057c2:	80fb      	strh	r3, [r7, #6]
 80057c4:	4613      	mov	r3, r2
 80057c6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80057cc:	2200      	movs	r2, #0
 80057ce:	2104      	movs	r1, #4
 80057d0:	4810      	ldr	r0, [pc, #64]	; (8005814 <LCD_IO_ReadData+0x5c>)
 80057d2:	f000 ff77 	bl	80066c4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057dc:	480e      	ldr	r0, [pc, #56]	; (8005818 <LCD_IO_ReadData+0x60>)
 80057de:	f000 ff71 	bl	80066c4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fec7 	bl	8005578 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80057ea:	797b      	ldrb	r3, [r7, #5]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fea3 	bl	8005538 <SPIx_Read>
 80057f2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80057f4:	2201      	movs	r2, #1
 80057f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057fa:	4807      	ldr	r0, [pc, #28]	; (8005818 <LCD_IO_ReadData+0x60>)
 80057fc:	f000 ff62 	bl	80066c4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005800:	2201      	movs	r2, #1
 8005802:	2104      	movs	r1, #4
 8005804:	4803      	ldr	r0, [pc, #12]	; (8005814 <LCD_IO_ReadData+0x5c>)
 8005806:	f000 ff5d 	bl	80066c4 <HAL_GPIO_WritePin>
  
  return readvalue;
 800580a:	68fb      	ldr	r3, [r7, #12]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40020800 	.word	0x40020800
 8005818:	40020c00 	.word	0x40020c00

0800581c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f987 	bl	8005b38 <HAL_Delay>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8005832:	b580      	push	{r7, lr}
 8005834:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8005836:	f7ff fd53 	bl	80052e0 <I2Cx_Init>
}
 800583a:	bf00      	nop
 800583c:	bd80      	pop	{r7, pc}

0800583e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8005842:	f7ff fd7f 	bl	8005344 <I2Cx_ITConfig>
}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}

0800584a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	4603      	mov	r3, r0
 8005852:	71fb      	strb	r3, [r7, #7]
 8005854:	460b      	mov	r3, r1
 8005856:	71bb      	strb	r3, [r7, #6]
 8005858:	4613      	mov	r3, r2
 800585a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800585c:	797a      	ldrb	r2, [r7, #5]
 800585e:	79b9      	ldrb	r1, [r7, #6]
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fd9e 	bl	80053a4 <I2Cx_WriteData>
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	460a      	mov	r2, r1
 800587a:	71fb      	strb	r3, [r7, #7]
 800587c:	4613      	mov	r3, r2
 800587e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8005880:	79ba      	ldrb	r2, [r7, #6]
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fdb6 	bl	80053f8 <I2Cx_ReadData>
 800588c:	4603      	mov	r3, r0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	603a      	str	r2, [r7, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	4603      	mov	r3, r0
 80058a2:	71fb      	strb	r3, [r7, #7]
 80058a4:	460b      	mov	r3, r1
 80058a6:	71bb      	strb	r3, [r7, #6]
 80058a8:	4613      	mov	r3, r2
 80058aa:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80058ac:	88bb      	ldrh	r3, [r7, #4]
 80058ae:	79b9      	ldrb	r1, [r7, #6]
 80058b0:	79f8      	ldrb	r0, [r7, #7]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	f7ff fdcc 	bl	8005450 <I2Cx_ReadBuffer>
 80058b8:	4603      	mov	r3, r0
 80058ba:	b29b      	uxth	r3, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f933 	bl	8005b38 <HAL_Delay>
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	460a      	mov	r2, r1
 80058e6:	80fb      	strh	r3, [r7, #6]
 80058e8:	4613      	mov	r3, r2
 80058ea:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <BSP_TS_Init+0x64>)
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80058f6:	4a13      	ldr	r2, [pc, #76]	; (8005944 <BSP_TS_Init+0x68>)
 80058f8:	88bb      	ldrh	r3, [r7, #4]
 80058fa:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <BSP_TS_Init+0x6c>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2082      	movs	r0, #130	; 0x82
 8005902:	4798      	blx	r3
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	f640 0311 	movw	r3, #2065	; 0x811
 800590c:	429a      	cmp	r2, r3
 800590e:	d104      	bne.n	800591a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8005910:	4b0e      	ldr	r3, [pc, #56]	; (800594c <BSP_TS_Init+0x70>)
 8005912:	4a0d      	ldr	r2, [pc, #52]	; (8005948 <BSP_TS_Init+0x6c>)
 8005914:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <BSP_TS_Init+0x70>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2082      	movs	r0, #130	; 0x82
 8005928:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800592a:	4b08      	ldr	r3, [pc, #32]	; (800594c <BSP_TS_Init+0x70>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2082      	movs	r0, #130	; 0x82
 8005932:	4798      	blx	r3
  }

  return ret;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000c68 	.word	0x20000c68
 8005944:	20000c6a 	.word	0x20000c6a
 8005948:	20000060 	.word	0x20000060
 800594c:	20000c64 	.word	0x20000c64

08005950 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8005958:	4b4f      	ldr	r3, [pc, #316]	; (8005a98 <BSP_TS_GetState+0x148>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2082      	movs	r0, #130	; 0x82
 8005960:	4798      	blx	r3
 8005962:	4603      	mov	r3, r0
 8005964:	b29a      	uxth	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 808d 	beq.w	8005a8e <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8005974:	4b48      	ldr	r3, [pc, #288]	; (8005a98 <BSP_TS_GetState+0x148>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f107 020c 	add.w	r2, r7, #12
 800597e:	f107 010e 	add.w	r1, r7, #14
 8005982:	2082      	movs	r0, #130	; 0x82
 8005984:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;
 8005986:	89bb      	ldrh	r3, [r7, #12]
 8005988:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800598c:	b29b      	uxth	r3, r3
 800598e:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8005990:	89bb      	ldrh	r3, [r7, #12]
 8005992:	4a42      	ldr	r2, [pc, #264]	; (8005a9c <BSP_TS_GetState+0x14c>)
 8005994:	fba2 2303 	umull	r2, r3, r2, r3
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 800599c:	8abb      	ldrh	r3, [r7, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	82bb      	strh	r3, [r7, #20]
 80059a6:	e008      	b.n	80059ba <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80059a8:	4b3d      	ldr	r3, [pc, #244]	; (8005aa0 <BSP_TS_GetState+0x150>)
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	8aba      	ldrh	r2, [r7, #20]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d903      	bls.n	80059ba <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80059b2:	4b3b      	ldr	r3, [pc, #236]	; (8005aa0 <BSP_TS_GetState+0x150>)
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80059ba:	8abb      	ldrh	r3, [r7, #20]
 80059bc:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80059be:	89fb      	ldrh	r3, [r7, #14]
 80059c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d806      	bhi.n	80059d6 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80059c8:	89fb      	ldrh	r3, [r7, #14]
 80059ca:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80059ce:	330e      	adds	r3, #14
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	81fb      	strh	r3, [r7, #14]
 80059d4:	e005      	b.n	80059e2 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80059d6:	89fb      	ldrh	r3, [r7, #14]
 80059d8:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80059dc:	3308      	adds	r3, #8
 80059de:	b29b      	uxth	r3, r3
 80059e0:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80059e2:	89fb      	ldrh	r3, [r7, #14]
 80059e4:	4a2f      	ldr	r2, [pc, #188]	; (8005aa4 <BSP_TS_GetState+0x154>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	08db      	lsrs	r3, r3, #3
 80059ec:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80059ee:	8afb      	ldrh	r3, [r7, #22]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	82fb      	strh	r3, [r7, #22]
 80059f8:	e008      	b.n	8005a0c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80059fa:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <BSP_TS_GetState+0x158>)
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	8afa      	ldrh	r2, [r7, #22]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d903      	bls.n	8005a0c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8005a04:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <BSP_TS_GetState+0x158>)
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8005a0c:	8afb      	ldrh	r3, [r7, #22]
 8005a0e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8005a10:	89fb      	ldrh	r3, [r7, #14]
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b25      	ldr	r3, [pc, #148]	; (8005aac <BSP_TS_GetState+0x15c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d906      	bls.n	8005a2a <BSP_TS_GetState+0xda>
 8005a1c:	89fa      	ldrh	r2, [r7, #14]
 8005a1e:	4b23      	ldr	r3, [pc, #140]	; (8005aac <BSP_TS_GetState+0x15c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	e005      	b.n	8005a36 <BSP_TS_GetState+0xe6>
 8005a2a:	4b20      	ldr	r3, [pc, #128]	; (8005aac <BSP_TS_GetState+0x15c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	89fb      	ldrh	r3, [r7, #14]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8005a38:	89bb      	ldrh	r3, [r7, #12]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b1c      	ldr	r3, [pc, #112]	; (8005ab0 <BSP_TS_GetState+0x160>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d906      	bls.n	8005a52 <BSP_TS_GetState+0x102>
 8005a44:	89ba      	ldrh	r2, [r7, #12]
 8005a46:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <BSP_TS_GetState+0x160>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	e005      	b.n	8005a5e <BSP_TS_GetState+0x10e>
 8005a52:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <BSP_TS_GetState+0x160>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	89bb      	ldrh	r3, [r7, #12]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8005a60:	8a7a      	ldrh	r2, [r7, #18]
 8005a62:	8a3b      	ldrh	r3, [r7, #16]
 8005a64:	4413      	add	r3, r2
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	dd07      	ble.n	8005a7a <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8005a6a:	89fb      	ldrh	r3, [r7, #14]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <BSP_TS_GetState+0x15c>)
 8005a70:	601a      	str	r2, [r3, #0]
      _y = y; 
 8005a72:	89bb      	ldrh	r3, [r7, #12]
 8005a74:	461a      	mov	r2, r3
 8005a76:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <BSP_TS_GetState+0x160>)
 8005a78:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8005a7a:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <BSP_TS_GetState+0x15c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <BSP_TS_GetState+0x160>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	809a      	strh	r2, [r3, #4]
  }
}
 8005a8e:	bf00      	nop
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000c64 	.word	0x20000c64
 8005a9c:	ba2e8ba3 	.word	0xba2e8ba3
 8005aa0:	20000c6a 	.word	0x20000c6a
 8005aa4:	88888889 	.word	0x88888889
 8005aa8:	20000c68 	.word	0x20000c68
 8005aac:	20000c6c 	.word	0x20000c6c
 8005ab0:	20000c70 	.word	0x20000c70

08005ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ab8:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <HAL_Init+0x40>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <HAL_Init+0x40>)
 8005abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_Init+0x40>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a0a      	ldr	r2, [pc, #40]	; (8005af4 <HAL_Init+0x40>)
 8005aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ad0:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <HAL_Init+0x40>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a07      	ldr	r2, [pc, #28]	; (8005af4 <HAL_Init+0x40>)
 8005ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005adc:	2003      	movs	r0, #3
 8005ade:	f000 f8fc 	bl	8005cda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f7fe fbf2 	bl	80042cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ae8:	f7fe fbc4 	bl	8004274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023c00 	.word	0x40023c00

08005af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <HAL_IncTick+0x20>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_IncTick+0x24>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4413      	add	r3, r2
 8005b08:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <HAL_IncTick+0x24>)
 8005b0a:	6013      	str	r3, [r2, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000094 	.word	0x20000094
 8005b1c:	2000b2b4 	.word	0x2000b2b4

08005b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  return uwTick;
 8005b24:	4b03      	ldr	r3, [pc, #12]	; (8005b34 <HAL_GetTick+0x14>)
 8005b26:	681b      	ldr	r3, [r3, #0]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	2000b2b4 	.word	0x2000b2b4

08005b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b40:	f7ff ffee 	bl	8005b20 <HAL_GetTick>
 8005b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d005      	beq.n	8005b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <HAL_Delay+0x44>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b5e:	bf00      	nop
 8005b60:	f7ff ffde 	bl	8005b20 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d8f7      	bhi.n	8005b60 <HAL_Delay+0x28>
  {
  }
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000094 	.word	0x20000094

08005b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b90:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bb2:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	60d3      	str	r3, [r2, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	e000ed00 	.word	0xe000ed00

08005bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bcc:	4b04      	ldr	r3, [pc, #16]	; (8005be0 <__NVIC_GetPriorityGrouping+0x18>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	0a1b      	lsrs	r3, r3, #8
 8005bd2:	f003 0307 	and.w	r3, r3, #7
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	e000ed00 	.word	0xe000ed00

08005be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	db0b      	blt.n	8005c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	f003 021f 	and.w	r2, r3, #31
 8005bfc:	4907      	ldr	r1, [pc, #28]	; (8005c1c <__NVIC_EnableIRQ+0x38>)
 8005bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2001      	movs	r0, #1
 8005c06:	fa00 f202 	lsl.w	r2, r0, r2
 8005c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	e000e100 	.word	0xe000e100

08005c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	db0a      	blt.n	8005c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	490c      	ldr	r1, [pc, #48]	; (8005c6c <__NVIC_SetPriority+0x4c>)
 8005c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3e:	0112      	lsls	r2, r2, #4
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	440b      	add	r3, r1
 8005c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c48:	e00a      	b.n	8005c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	4908      	ldr	r1, [pc, #32]	; (8005c70 <__NVIC_SetPriority+0x50>)
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	3b04      	subs	r3, #4
 8005c58:	0112      	lsls	r2, r2, #4
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	761a      	strb	r2, [r3, #24]
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	e000e100 	.word	0xe000e100
 8005c70:	e000ed00 	.word	0xe000ed00

08005c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b089      	sub	sp, #36	; 0x24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f1c3 0307 	rsb	r3, r3, #7
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	bf28      	it	cs
 8005c92:	2304      	movcs	r3, #4
 8005c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	2b06      	cmp	r3, #6
 8005c9c:	d902      	bls.n	8005ca4 <NVIC_EncodePriority+0x30>
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3b03      	subs	r3, #3
 8005ca2:	e000      	b.n	8005ca6 <NVIC_EncodePriority+0x32>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43da      	mvns	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	43d9      	mvns	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ccc:	4313      	orrs	r3, r2
         );
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3724      	adds	r7, #36	; 0x24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff ff4c 	bl	8005b80 <__NVIC_SetPriorityGrouping>
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d02:	f7ff ff61 	bl	8005bc8 <__NVIC_GetPriorityGrouping>
 8005d06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	6978      	ldr	r0, [r7, #20]
 8005d0e:	f7ff ffb1 	bl	8005c74 <NVIC_EncodePriority>
 8005d12:	4602      	mov	r2, r0
 8005d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d18:	4611      	mov	r1, r2
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff ff80 	bl	8005c20 <__NVIC_SetPriority>
}
 8005d20:	bf00      	nop
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff ff54 	bl	8005be4 <__NVIC_EnableIRQ>
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e00e      	b.n	8005d74 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	795b      	ldrb	r3, [r3, #5]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fd fb60 	bl	800342c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e03b      	b.n	8005e06 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fd fb96 	bl	80034d4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	f023 0107 	bic.w	r1, r3, #7
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005de6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68d1      	ldr	r1, [r2, #12]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6812      	ldr	r2, [r2, #0]
 8005df2:	430b      	orrs	r3, r1
 8005df4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d026      	beq.n	8005e7e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d021      	beq.n	8005e7e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e48:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	f043 0201 	orr.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2204      	movs	r2, #4
 8005e62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d026      	beq.n	8005ed6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d021      	beq.n	8005ed6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	f043 0202 	orr.w	r2, r3, #2
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2204      	movs	r2, #4
 8005eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d026      	beq.n	8005f2e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d021      	beq.n	8005f2e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2208      	movs	r2, #8
 8005f00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	f043 0204 	orr.w	r2, r3, #4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2204      	movs	r2, #4
 8005f12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d013      	beq.n	8005f60 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f50:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2204      	movs	r2, #4
 8005f58:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f853 	bl	8006006 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d024      	beq.n	8005fb4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01f      	beq.n	8005fb4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f82:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01f      	beq.n	8005ffe <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01a      	beq.n	8005ffe <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fd6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2210      	movs	r2, #16
 8005fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f80e 	bl	800601a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_DMA2D_ConfigLayer+0x20>
 800604c:	2302      	movs	r3, #2
 800604e:	e079      	b.n	8006144 <HAL_DMA2D_ConfigLayer+0x114>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	3318      	adds	r3, #24
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4413      	add	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	041b      	lsls	r3, r3, #16
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800607a:	4b35      	ldr	r3, [pc, #212]	; (8006150 <HAL_DMA2D_ConfigLayer+0x120>)
 800607c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b0a      	cmp	r3, #10
 8006084:	d003      	beq.n	800608e <HAL_DMA2D_ConfigLayer+0x5e>
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b09      	cmp	r3, #9
 800608c:	d107      	bne.n	800609e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e005      	b.n	80060aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	061b      	lsls	r3, r3, #24
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d120      	bne.n	80060f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	43db      	mvns	r3, r3
 80060ba:	ea02 0103 	and.w	r1, r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b0a      	cmp	r3, #10
 80060d8:	d003      	beq.n	80060e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b09      	cmp	r3, #9
 80060e0:	d127      	bne.n	8006132 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80060ee:	629a      	str	r2, [r3, #40]	; 0x28
 80060f0:	e01f      	b.n	8006132 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	43db      	mvns	r3, r3
 80060fc:	ea02 0103 	and.w	r1, r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	430a      	orrs	r2, r1
 8006108:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	6812      	ldr	r2, [r2, #0]
 8006112:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b0a      	cmp	r3, #10
 800611a:	d003      	beq.n	8006124 <HAL_DMA2D_ConfigLayer+0xf4>
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b09      	cmp	r3, #9
 8006122:	d106      	bne.n	8006132 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006130:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	ff03000f 	.word	0xff03000f

08006154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	; 0x24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006162:	2300      	movs	r3, #0
 8006164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	e177      	b.n	8006460 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006170:	2201      	movs	r2, #1
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4013      	ands	r3, r2
 8006182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	429a      	cmp	r2, r3
 800618a:	f040 8166 	bne.w	800645a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b01      	cmp	r3, #1
 8006198:	d005      	beq.n	80061a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d130      	bne.n	8006208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	2203      	movs	r2, #3
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061dc:	2201      	movs	r2, #1
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f003 0201 	and.w	r2, r3, #1
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4313      	orrs	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	2b03      	cmp	r3, #3
 8006212:	d017      	beq.n	8006244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	2203      	movs	r2, #3
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	43db      	mvns	r3, r3
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	4013      	ands	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4313      	orrs	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d123      	bne.n	8006298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	08da      	lsrs	r2, r3, #3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3208      	adds	r2, #8
 8006258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	220f      	movs	r2, #15
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	43db      	mvns	r3, r3
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4013      	ands	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4313      	orrs	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	08da      	lsrs	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3208      	adds	r2, #8
 8006292:	69b9      	ldr	r1, [r7, #24]
 8006294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	2203      	movs	r2, #3
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4013      	ands	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f003 0203 	and.w	r2, r3, #3
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80c0 	beq.w	800645a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	4b66      	ldr	r3, [pc, #408]	; (8006478 <HAL_GPIO_Init+0x324>)
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	4a65      	ldr	r2, [pc, #404]	; (8006478 <HAL_GPIO_Init+0x324>)
 80062e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062e8:	6453      	str	r3, [r2, #68]	; 0x44
 80062ea:	4b63      	ldr	r3, [pc, #396]	; (8006478 <HAL_GPIO_Init+0x324>)
 80062ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062f6:	4a61      	ldr	r2, [pc, #388]	; (800647c <HAL_GPIO_Init+0x328>)
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	3302      	adds	r3, #2
 80062fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	220f      	movs	r2, #15
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a58      	ldr	r2, [pc, #352]	; (8006480 <HAL_GPIO_Init+0x32c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d037      	beq.n	8006392 <HAL_GPIO_Init+0x23e>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a57      	ldr	r2, [pc, #348]	; (8006484 <HAL_GPIO_Init+0x330>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d031      	beq.n	800638e <HAL_GPIO_Init+0x23a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a56      	ldr	r2, [pc, #344]	; (8006488 <HAL_GPIO_Init+0x334>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d02b      	beq.n	800638a <HAL_GPIO_Init+0x236>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a55      	ldr	r2, [pc, #340]	; (800648c <HAL_GPIO_Init+0x338>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d025      	beq.n	8006386 <HAL_GPIO_Init+0x232>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a54      	ldr	r2, [pc, #336]	; (8006490 <HAL_GPIO_Init+0x33c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01f      	beq.n	8006382 <HAL_GPIO_Init+0x22e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a53      	ldr	r2, [pc, #332]	; (8006494 <HAL_GPIO_Init+0x340>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d019      	beq.n	800637e <HAL_GPIO_Init+0x22a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a52      	ldr	r2, [pc, #328]	; (8006498 <HAL_GPIO_Init+0x344>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_GPIO_Init+0x226>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a51      	ldr	r2, [pc, #324]	; (800649c <HAL_GPIO_Init+0x348>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00d      	beq.n	8006376 <HAL_GPIO_Init+0x222>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a50      	ldr	r2, [pc, #320]	; (80064a0 <HAL_GPIO_Init+0x34c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d007      	beq.n	8006372 <HAL_GPIO_Init+0x21e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a4f      	ldr	r2, [pc, #316]	; (80064a4 <HAL_GPIO_Init+0x350>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d101      	bne.n	800636e <HAL_GPIO_Init+0x21a>
 800636a:	2309      	movs	r3, #9
 800636c:	e012      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800636e:	230a      	movs	r3, #10
 8006370:	e010      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006372:	2308      	movs	r3, #8
 8006374:	e00e      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006376:	2307      	movs	r3, #7
 8006378:	e00c      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800637a:	2306      	movs	r3, #6
 800637c:	e00a      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800637e:	2305      	movs	r3, #5
 8006380:	e008      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006382:	2304      	movs	r3, #4
 8006384:	e006      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006386:	2303      	movs	r3, #3
 8006388:	e004      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800638a:	2302      	movs	r3, #2
 800638c:	e002      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006392:	2300      	movs	r3, #0
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	f002 0203 	and.w	r2, r2, #3
 800639a:	0092      	lsls	r2, r2, #2
 800639c:	4093      	lsls	r3, r2
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063a4:	4935      	ldr	r1, [pc, #212]	; (800647c <HAL_GPIO_Init+0x328>)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	089b      	lsrs	r3, r3, #2
 80063aa:	3302      	adds	r3, #2
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063b2:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <HAL_GPIO_Init+0x354>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	43db      	mvns	r3, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4013      	ands	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063d6:	4a34      	ldr	r2, [pc, #208]	; (80064a8 <HAL_GPIO_Init+0x354>)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063dc:	4b32      	ldr	r3, [pc, #200]	; (80064a8 <HAL_GPIO_Init+0x354>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	43db      	mvns	r3, r3
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	4013      	ands	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006400:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <HAL_GPIO_Init+0x354>)
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006406:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <HAL_GPIO_Init+0x354>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	43db      	mvns	r3, r3
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4013      	ands	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800642a:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <HAL_GPIO_Init+0x354>)
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006430:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <HAL_GPIO_Init+0x354>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	43db      	mvns	r3, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4013      	ands	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006454:	4a14      	ldr	r2, [pc, #80]	; (80064a8 <HAL_GPIO_Init+0x354>)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3301      	adds	r3, #1
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b0f      	cmp	r3, #15
 8006464:	f67f ae84 	bls.w	8006170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	3724      	adds	r7, #36	; 0x24
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40023800 	.word	0x40023800
 800647c:	40013800 	.word	0x40013800
 8006480:	40020000 	.word	0x40020000
 8006484:	40020400 	.word	0x40020400
 8006488:	40020800 	.word	0x40020800
 800648c:	40020c00 	.word	0x40020c00
 8006490:	40021000 	.word	0x40021000
 8006494:	40021400 	.word	0x40021400
 8006498:	40021800 	.word	0x40021800
 800649c:	40021c00 	.word	0x40021c00
 80064a0:	40022000 	.word	0x40022000
 80064a4:	40022400 	.word	0x40022400
 80064a8:	40013c00 	.word	0x40013c00

080064ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e0d9      	b.n	800667c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064c8:	2201      	movs	r2, #1
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4013      	ands	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	429a      	cmp	r2, r3
 80064e0:	f040 80c9 	bne.w	8006676 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80064e4:	4a6b      	ldr	r2, [pc, #428]	; (8006694 <HAL_GPIO_DeInit+0x1e8>)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	089b      	lsrs	r3, r3, #2
 80064ea:	3302      	adds	r3, #2
 80064ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	220f      	movs	r2, #15
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	4013      	ands	r3, r2
 8006504:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a63      	ldr	r2, [pc, #396]	; (8006698 <HAL_GPIO_DeInit+0x1ec>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d037      	beq.n	800657e <HAL_GPIO_DeInit+0xd2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a62      	ldr	r2, [pc, #392]	; (800669c <HAL_GPIO_DeInit+0x1f0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d031      	beq.n	800657a <HAL_GPIO_DeInit+0xce>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a61      	ldr	r2, [pc, #388]	; (80066a0 <HAL_GPIO_DeInit+0x1f4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02b      	beq.n	8006576 <HAL_GPIO_DeInit+0xca>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a60      	ldr	r2, [pc, #384]	; (80066a4 <HAL_GPIO_DeInit+0x1f8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d025      	beq.n	8006572 <HAL_GPIO_DeInit+0xc6>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a5f      	ldr	r2, [pc, #380]	; (80066a8 <HAL_GPIO_DeInit+0x1fc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01f      	beq.n	800656e <HAL_GPIO_DeInit+0xc2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a5e      	ldr	r2, [pc, #376]	; (80066ac <HAL_GPIO_DeInit+0x200>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d019      	beq.n	800656a <HAL_GPIO_DeInit+0xbe>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a5d      	ldr	r2, [pc, #372]	; (80066b0 <HAL_GPIO_DeInit+0x204>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <HAL_GPIO_DeInit+0xba>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a5c      	ldr	r2, [pc, #368]	; (80066b4 <HAL_GPIO_DeInit+0x208>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00d      	beq.n	8006562 <HAL_GPIO_DeInit+0xb6>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a5b      	ldr	r2, [pc, #364]	; (80066b8 <HAL_GPIO_DeInit+0x20c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <HAL_GPIO_DeInit+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a5a      	ldr	r2, [pc, #360]	; (80066bc <HAL_GPIO_DeInit+0x210>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d101      	bne.n	800655a <HAL_GPIO_DeInit+0xae>
 8006556:	2309      	movs	r3, #9
 8006558:	e012      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 800655a:	230a      	movs	r3, #10
 800655c:	e010      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 800655e:	2308      	movs	r3, #8
 8006560:	e00e      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 8006562:	2307      	movs	r3, #7
 8006564:	e00c      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 8006566:	2306      	movs	r3, #6
 8006568:	e00a      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 800656a:	2305      	movs	r3, #5
 800656c:	e008      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 800656e:	2304      	movs	r3, #4
 8006570:	e006      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 8006572:	2303      	movs	r3, #3
 8006574:	e004      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 8006576:	2302      	movs	r3, #2
 8006578:	e002      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <HAL_GPIO_DeInit+0xd4>
 800657e:	2300      	movs	r3, #0
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	f002 0203 	and.w	r2, r2, #3
 8006586:	0092      	lsls	r2, r2, #2
 8006588:	4093      	lsls	r3, r2
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	429a      	cmp	r2, r3
 800658e:	d132      	bne.n	80065f6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006590:	4b4b      	ldr	r3, [pc, #300]	; (80066c0 <HAL_GPIO_DeInit+0x214>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	43db      	mvns	r3, r3
 8006598:	4949      	ldr	r1, [pc, #292]	; (80066c0 <HAL_GPIO_DeInit+0x214>)
 800659a:	4013      	ands	r3, r2
 800659c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800659e:	4b48      	ldr	r3, [pc, #288]	; (80066c0 <HAL_GPIO_DeInit+0x214>)
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	43db      	mvns	r3, r3
 80065a6:	4946      	ldr	r1, [pc, #280]	; (80066c0 <HAL_GPIO_DeInit+0x214>)
 80065a8:	4013      	ands	r3, r2
 80065aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80065ac:	4b44      	ldr	r3, [pc, #272]	; (80066c0 <HAL_GPIO_DeInit+0x214>)
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	4942      	ldr	r1, [pc, #264]	; (80066c0 <HAL_GPIO_DeInit+0x214>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065ba:	4b41      	ldr	r3, [pc, #260]	; (80066c0 <HAL_GPIO_DeInit+0x214>)
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	493f      	ldr	r1, [pc, #252]	; (80066c0 <HAL_GPIO_DeInit+0x214>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	220f      	movs	r2, #15
 80065d2:	fa02 f303 	lsl.w	r3, r2, r3
 80065d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80065d8:	4a2e      	ldr	r2, [pc, #184]	; (8006694 <HAL_GPIO_DeInit+0x1e8>)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	089b      	lsrs	r3, r3, #2
 80065de:	3302      	adds	r3, #2
 80065e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	43da      	mvns	r2, r3
 80065e8:	482a      	ldr	r0, [pc, #168]	; (8006694 <HAL_GPIO_DeInit+0x1e8>)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	089b      	lsrs	r3, r3, #2
 80065ee:	400a      	ands	r2, r1
 80065f0:	3302      	adds	r3, #2
 80065f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	2103      	movs	r1, #3
 8006600:	fa01 f303 	lsl.w	r3, r1, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	401a      	ands	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	08da      	lsrs	r2, r3, #3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3208      	adds	r2, #8
 8006614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	220f      	movs	r2, #15
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	43db      	mvns	r3, r3
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	08d2      	lsrs	r2, r2, #3
 800662c:	4019      	ands	r1, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3208      	adds	r2, #8
 8006632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	2103      	movs	r1, #3
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	43db      	mvns	r3, r3
 8006646:	401a      	ands	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	2101      	movs	r1, #1
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	401a      	ands	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	2103      	movs	r1, #3
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	43db      	mvns	r3, r3
 8006670:	401a      	ands	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	3301      	adds	r3, #1
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2b0f      	cmp	r3, #15
 8006680:	f67f af22 	bls.w	80064c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40013800 	.word	0x40013800
 8006698:	40020000 	.word	0x40020000
 800669c:	40020400 	.word	0x40020400
 80066a0:	40020800 	.word	0x40020800
 80066a4:	40020c00 	.word	0x40020c00
 80066a8:	40021000 	.word	0x40021000
 80066ac:	40021400 	.word	0x40021400
 80066b0:	40021800 	.word	0x40021800
 80066b4:	40021c00 	.word	0x40021c00
 80066b8:	40022000 	.word	0x40022000
 80066bc:	40022400 	.word	0x40022400
 80066c0:	40013c00 	.word	0x40013c00

080066c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	807b      	strh	r3, [r7, #2]
 80066d0:	4613      	mov	r3, r2
 80066d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066d4:	787b      	ldrb	r3, [r7, #1]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066da:	887a      	ldrh	r2, [r7, #2]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066e0:	e003      	b.n	80066ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066e2:	887b      	ldrh	r3, [r7, #2]
 80066e4:	041a      	lsls	r2, r3, #16
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	619a      	str	r2, [r3, #24]
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006708:	887a      	ldrh	r2, [r7, #2]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4013      	ands	r3, r2
 800670e:	041a      	lsls	r2, r3, #16
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	43d9      	mvns	r1, r3
 8006714:	887b      	ldrh	r3, [r7, #2]
 8006716:	400b      	ands	r3, r1
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	619a      	str	r2, [r3, #24]
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e12b      	b.n	8006996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7fd f9fc 	bl	8003b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2224      	movs	r2, #36	; 0x24
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0201 	bic.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800677e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800678e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006790:	f002 f826 	bl	80087e0 <HAL_RCC_GetPCLK1Freq>
 8006794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	4a81      	ldr	r2, [pc, #516]	; (80069a0 <HAL_I2C_Init+0x274>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d807      	bhi.n	80067b0 <HAL_I2C_Init+0x84>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a80      	ldr	r2, [pc, #512]	; (80069a4 <HAL_I2C_Init+0x278>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	bf94      	ite	ls
 80067a8:	2301      	movls	r3, #1
 80067aa:	2300      	movhi	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	e006      	b.n	80067be <HAL_I2C_Init+0x92>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a7d      	ldr	r2, [pc, #500]	; (80069a8 <HAL_I2C_Init+0x27c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	bf94      	ite	ls
 80067b8:	2301      	movls	r3, #1
 80067ba:	2300      	movhi	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e0e7      	b.n	8006996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a78      	ldr	r2, [pc, #480]	; (80069ac <HAL_I2C_Init+0x280>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	0c9b      	lsrs	r3, r3, #18
 80067d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	4a6a      	ldr	r2, [pc, #424]	; (80069a0 <HAL_I2C_Init+0x274>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d802      	bhi.n	8006800 <HAL_I2C_Init+0xd4>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	3301      	adds	r3, #1
 80067fe:	e009      	b.n	8006814 <HAL_I2C_Init+0xe8>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	4a69      	ldr	r2, [pc, #420]	; (80069b0 <HAL_I2C_Init+0x284>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	099b      	lsrs	r3, r3, #6
 8006812:	3301      	adds	r3, #1
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	430b      	orrs	r3, r1
 800681a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006826:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	495c      	ldr	r1, [pc, #368]	; (80069a0 <HAL_I2C_Init+0x274>)
 8006830:	428b      	cmp	r3, r1
 8006832:	d819      	bhi.n	8006868 <HAL_I2C_Init+0x13c>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	1e59      	subs	r1, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006842:	1c59      	adds	r1, r3, #1
 8006844:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006848:	400b      	ands	r3, r1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <HAL_I2C_Init+0x138>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	1e59      	subs	r1, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	fbb1 f3f3 	udiv	r3, r1, r3
 800685c:	3301      	adds	r3, #1
 800685e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006862:	e051      	b.n	8006908 <HAL_I2C_Init+0x1dc>
 8006864:	2304      	movs	r3, #4
 8006866:	e04f      	b.n	8006908 <HAL_I2C_Init+0x1dc>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d111      	bne.n	8006894 <HAL_I2C_Init+0x168>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1e58      	subs	r0, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6859      	ldr	r1, [r3, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	440b      	add	r3, r1
 800687e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006882:	3301      	adds	r3, #1
 8006884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006888:	2b00      	cmp	r3, #0
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	e012      	b.n	80068ba <HAL_I2C_Init+0x18e>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1e58      	subs	r0, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6859      	ldr	r1, [r3, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	0099      	lsls	r1, r3, #2
 80068a4:	440b      	add	r3, r1
 80068a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068aa:	3301      	adds	r3, #1
 80068ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bf0c      	ite	eq
 80068b4:	2301      	moveq	r3, #1
 80068b6:	2300      	movne	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_I2C_Init+0x196>
 80068be:	2301      	movs	r3, #1
 80068c0:	e022      	b.n	8006908 <HAL_I2C_Init+0x1dc>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10e      	bne.n	80068e8 <HAL_I2C_Init+0x1bc>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	1e58      	subs	r0, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6859      	ldr	r1, [r3, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	440b      	add	r3, r1
 80068d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80068dc:	3301      	adds	r3, #1
 80068de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e6:	e00f      	b.n	8006908 <HAL_I2C_Init+0x1dc>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1e58      	subs	r0, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6859      	ldr	r1, [r3, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	0099      	lsls	r1, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80068fe:	3301      	adds	r3, #1
 8006900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	6809      	ldr	r1, [r1, #0]
 800690c:	4313      	orrs	r3, r2
 800690e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69da      	ldr	r2, [r3, #28]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6911      	ldr	r1, [r2, #16]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68d2      	ldr	r2, [r2, #12]
 8006942:	4311      	orrs	r1, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	430b      	orrs	r3, r1
 800694a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	000186a0 	.word	0x000186a0
 80069a4:	001e847f 	.word	0x001e847f
 80069a8:	003d08ff 	.word	0x003d08ff
 80069ac:	431bde83 	.word	0x431bde83
 80069b0:	10624dd3 	.word	0x10624dd3

080069b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e021      	b.n	8006a0a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2224      	movs	r2, #36	; 0x24
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7fd f920 	bl	8003c24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	817b      	strh	r3, [r7, #10]
 8006a26:	460b      	mov	r3, r1
 8006a28:	813b      	strh	r3, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a2e:	f7ff f877 	bl	8005b20 <HAL_GetTick>
 8006a32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	f040 80d9 	bne.w	8006bf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	2319      	movs	r3, #25
 8006a48:	2201      	movs	r2, #1
 8006a4a:	496d      	ldr	r1, [pc, #436]	; (8006c00 <HAL_I2C_Mem_Write+0x1ec>)
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fc8d 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e0cc      	b.n	8006bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_I2C_Mem_Write+0x56>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e0c5      	b.n	8006bf6 <HAL_I2C_Mem_Write+0x1e2>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d007      	beq.n	8006a90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2221      	movs	r2, #33	; 0x21
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2240      	movs	r2, #64	; 0x40
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a3a      	ldr	r2, [r7, #32]
 8006aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a4d      	ldr	r2, [pc, #308]	; (8006c04 <HAL_I2C_Mem_Write+0x1f0>)
 8006ad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ad2:	88f8      	ldrh	r0, [r7, #6]
 8006ad4:	893a      	ldrh	r2, [r7, #8]
 8006ad6:	8979      	ldrh	r1, [r7, #10]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	9301      	str	r3, [sp, #4]
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fac4 	bl	8007070 <I2C_RequestMemoryWrite>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d052      	beq.n	8006b94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e081      	b.n	8006bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fd0e 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00d      	beq.n	8006b1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d107      	bne.n	8006b1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e06b      	b.n	8006bf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	781a      	ldrb	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d11b      	bne.n	8006b94 <HAL_I2C_Mem_Write+0x180>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d017      	beq.n	8006b94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1aa      	bne.n	8006af2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fcfa 	bl	800759a <I2C_WaitOnBTFFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00d      	beq.n	8006bc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d107      	bne.n	8006bc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e016      	b.n	8006bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e000      	b.n	8006bf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bf4:	2302      	movs	r3, #2
  }
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	00100002 	.word	0x00100002
 8006c04:	ffff0000 	.word	0xffff0000

08006c08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	; 0x30
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	4608      	mov	r0, r1
 8006c12:	4611      	mov	r1, r2
 8006c14:	461a      	mov	r2, r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	817b      	strh	r3, [r7, #10]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	813b      	strh	r3, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c22:	f7fe ff7d 	bl	8005b20 <HAL_GetTick>
 8006c26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	f040 8208 	bne.w	8007046 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	2319      	movs	r3, #25
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	497b      	ldr	r1, [pc, #492]	; (8006e2c <HAL_I2C_Mem_Read+0x224>)
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fb93 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e1fb      	b.n	8007048 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d101      	bne.n	8006c5e <HAL_I2C_Mem_Read+0x56>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e1f4      	b.n	8007048 <HAL_I2C_Mem_Read+0x440>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d007      	beq.n	8006c84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2222      	movs	r2, #34	; 0x22
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2240      	movs	r2, #64	; 0x40
 8006ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4a5b      	ldr	r2, [pc, #364]	; (8006e30 <HAL_I2C_Mem_Read+0x228>)
 8006cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cc6:	88f8      	ldrh	r0, [r7, #6]
 8006cc8:	893a      	ldrh	r2, [r7, #8]
 8006cca:	8979      	ldrh	r1, [r7, #10]
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fa60 	bl	800719c <I2C_RequestMemoryRead>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e1b0      	b.n	8007048 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d113      	bne.n	8006d16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	623b      	str	r3, [r7, #32]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	623b      	str	r3, [r7, #32]
 8006d02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e184      	b.n	8007020 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d11b      	bne.n	8006d56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	61fb      	str	r3, [r7, #28]
 8006d42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e164      	b.n	8007020 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d11b      	bne.n	8006d96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	e144      	b.n	8007020 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d96:	2300      	movs	r3, #0
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dac:	e138      	b.n	8007020 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	f200 80f1 	bhi.w	8006f9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d123      	bne.n	8006e08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fc29 	bl	800761c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e139      	b.n	8007048 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691a      	ldr	r2, [r3, #16]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e06:	e10b      	b.n	8007020 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d14e      	bne.n	8006eae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	2200      	movs	r2, #0
 8006e18:	4906      	ldr	r1, [pc, #24]	; (8006e34 <HAL_I2C_Mem_Read+0x22c>)
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 faa6 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e10e      	b.n	8007048 <HAL_I2C_Mem_Read+0x440>
 8006e2a:	bf00      	nop
 8006e2c:	00100002 	.word	0x00100002
 8006e30:	ffff0000 	.word	0xffff0000
 8006e34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eac:	e0b8      	b.n	8007020 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4966      	ldr	r1, [pc, #408]	; (8007050 <HAL_I2C_Mem_Read+0x448>)
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fa57 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e0bf      	b.n	8007048 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2200      	movs	r2, #0
 8006f12:	494f      	ldr	r1, [pc, #316]	; (8007050 <HAL_I2C_Mem_Read+0x448>)
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fa29 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e091      	b.n	8007048 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f98:	e042      	b.n	8007020 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 fb3c 	bl	800761c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e04c      	b.n	8007048 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d118      	bne.n	8007020 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007016:	b29b      	uxth	r3, r3
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007024:	2b00      	cmp	r3, #0
 8007026:	f47f aec2 	bne.w	8006dae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	e000      	b.n	8007048 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007046:	2302      	movs	r3, #2
  }
}
 8007048:	4618      	mov	r0, r3
 800704a:	3728      	adds	r7, #40	; 0x28
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	00010004 	.word	0x00010004

08007054 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007062:	b2db      	uxtb	r3, r3
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	4608      	mov	r0, r1
 800707a:	4611      	mov	r1, r2
 800707c:	461a      	mov	r2, r3
 800707e:	4603      	mov	r3, r0
 8007080:	817b      	strh	r3, [r7, #10]
 8007082:	460b      	mov	r3, r1
 8007084:	813b      	strh	r3, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007098:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f960 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c0:	d103      	bne.n	80070ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e05f      	b.n	800718e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ce:	897b      	ldrh	r3, [r7, #10]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	461a      	mov	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	492d      	ldr	r1, [pc, #180]	; (8007198 <I2C_RequestMemoryWrite+0x128>)
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f998 	bl	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e04c      	b.n	800718e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800710a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710c:	6a39      	ldr	r1, [r7, #32]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fa02 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2b04      	cmp	r3, #4
 8007120:	d107      	bne.n	8007132 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007130:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e02b      	b.n	800718e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d105      	bne.n	8007148 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800713c:	893b      	ldrh	r3, [r7, #8]
 800713e:	b2da      	uxtb	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	611a      	str	r2, [r3, #16]
 8007146:	e021      	b.n	800718c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007148:	893b      	ldrh	r3, [r7, #8]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	b29b      	uxth	r3, r3
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007158:	6a39      	ldr	r1, [r7, #32]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f9dc 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00d      	beq.n	8007182 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	2b04      	cmp	r3, #4
 800716c:	d107      	bne.n	800717e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800717c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e005      	b.n	800718e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007182:	893b      	ldrh	r3, [r7, #8]
 8007184:	b2da      	uxtb	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	00010002 	.word	0x00010002

0800719c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	4608      	mov	r0, r1
 80071a6:	4611      	mov	r1, r2
 80071a8:	461a      	mov	r2, r3
 80071aa:	4603      	mov	r3, r0
 80071ac:	817b      	strh	r3, [r7, #10]
 80071ae:	460b      	mov	r3, r1
 80071b0:	813b      	strh	r3, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	2200      	movs	r2, #0
 80071de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f8c2 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00d      	beq.n	800720a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fc:	d103      	bne.n	8007206 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e0aa      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007218:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	6a3a      	ldr	r2, [r7, #32]
 800721e:	4952      	ldr	r1, [pc, #328]	; (8007368 <I2C_RequestMemoryRead+0x1cc>)
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f8fa 	bl	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e097      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007230:	2300      	movs	r3, #0
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007248:	6a39      	ldr	r1, [r7, #32]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f964 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00d      	beq.n	8007272 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	2b04      	cmp	r3, #4
 800725c:	d107      	bne.n	800726e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800726c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e076      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d105      	bne.n	8007284 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007278:	893b      	ldrh	r3, [r7, #8]
 800727a:	b2da      	uxtb	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	611a      	str	r2, [r3, #16]
 8007282:	e021      	b.n	80072c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007284:	893b      	ldrh	r3, [r7, #8]
 8007286:	0a1b      	lsrs	r3, r3, #8
 8007288:	b29b      	uxth	r3, r3
 800728a:	b2da      	uxtb	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007294:	6a39      	ldr	r1, [r7, #32]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 f93e 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00d      	beq.n	80072be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d107      	bne.n	80072ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e050      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072be:	893b      	ldrh	r3, [r7, #8]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ca:	6a39      	ldr	r1, [r7, #32]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f923 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00d      	beq.n	80072f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d107      	bne.n	80072f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e035      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007302:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	2200      	movs	r2, #0
 800730c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f82b 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00d      	beq.n	8007338 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800732a:	d103      	bne.n	8007334 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e013      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007338:	897b      	ldrh	r3, [r7, #10]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f043 0301 	orr.w	r3, r3, #1
 8007340:	b2da      	uxtb	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	6a3a      	ldr	r2, [r7, #32]
 800734c:	4906      	ldr	r1, [pc, #24]	; (8007368 <I2C_RequestMemoryRead+0x1cc>)
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f863 	bl	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	00010002 	.word	0x00010002

0800736c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	4613      	mov	r3, r2
 800737a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800737c:	e025      	b.n	80073ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007384:	d021      	beq.n	80073ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007386:	f7fe fbcb 	bl	8005b20 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d302      	bcc.n	800739c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d116      	bne.n	80073ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f043 0220 	orr.w	r2, r3, #32
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e023      	b.n	8007412 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	0c1b      	lsrs	r3, r3, #16
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d10d      	bne.n	80073f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	43da      	mvns	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4013      	ands	r3, r2
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bf0c      	ite	eq
 80073e6:	2301      	moveq	r3, #1
 80073e8:	2300      	movne	r3, #0
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	e00c      	b.n	800740a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	43da      	mvns	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4013      	ands	r3, r2
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bf0c      	ite	eq
 8007402:	2301      	moveq	r3, #1
 8007404:	2300      	movne	r3, #0
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	429a      	cmp	r2, r3
 800740e:	d0b6      	beq.n	800737e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007428:	e051      	b.n	80074ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007438:	d123      	bne.n	8007482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007448:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007452:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	f043 0204 	orr.w	r2, r3, #4
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e046      	b.n	8007510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d021      	beq.n	80074ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800748a:	f7fe fb49 	bl	8005b20 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	d302      	bcc.n	80074a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d116      	bne.n	80074ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f043 0220 	orr.w	r2, r3, #32
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e020      	b.n	8007510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	0c1b      	lsrs	r3, r3, #16
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d10c      	bne.n	80074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	43da      	mvns	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4013      	ands	r3, r2
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bf14      	ite	ne
 80074ea:	2301      	movne	r3, #1
 80074ec:	2300      	moveq	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	e00b      	b.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	43da      	mvns	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	4013      	ands	r3, r2
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	bf14      	ite	ne
 8007504:	2301      	movne	r3, #1
 8007506:	2300      	moveq	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d18d      	bne.n	800742a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007524:	e02d      	b.n	8007582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 f8ce 	bl	80076c8 <I2C_IsAcknowledgeFailed>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e02d      	b.n	8007592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d021      	beq.n	8007582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753e:	f7fe faef 	bl	8005b20 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	429a      	cmp	r2, r3
 800754c:	d302      	bcc.n	8007554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d116      	bne.n	8007582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f043 0220 	orr.w	r2, r3, #32
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e007      	b.n	8007592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758c:	2b80      	cmp	r3, #128	; 0x80
 800758e:	d1ca      	bne.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075a6:	e02d      	b.n	8007604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f88d 	bl	80076c8 <I2C_IsAcknowledgeFailed>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e02d      	b.n	8007614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075be:	d021      	beq.n	8007604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c0:	f7fe faae 	bl	8005b20 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d302      	bcc.n	80075d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d116      	bne.n	8007604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2220      	movs	r2, #32
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	f043 0220 	orr.w	r2, r3, #32
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e007      	b.n	8007614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b04      	cmp	r3, #4
 8007610:	d1ca      	bne.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007628:	e042      	b.n	80076b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b10      	cmp	r3, #16
 8007636:	d119      	bne.n	800766c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f06f 0210 	mvn.w	r2, #16
 8007640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2220      	movs	r2, #32
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e029      	b.n	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766c:	f7fe fa58 	bl	8005b20 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	429a      	cmp	r2, r3
 800767a:	d302      	bcc.n	8007682 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d116      	bne.n	80076b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	f043 0220 	orr.w	r2, r3, #32
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e007      	b.n	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d1b5      	bne.n	800762a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076de:	d11b      	bne.n	8007718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	f043 0204 	orr.w	r2, r3, #4
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b20      	cmp	r3, #32
 800773a:	d129      	bne.n	8007790 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2224      	movs	r2, #36	; 0x24
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0201 	bic.w	r2, r2, #1
 8007752:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0210 	bic.w	r2, r2, #16
 8007762:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0201 	orr.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	e000      	b.n	8007792 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007790:	2302      	movs	r3, #2
  }
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d12a      	bne.n	800780e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2224      	movs	r2, #36	; 0x24
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80077d8:	89fb      	ldrh	r3, [r7, #14]
 80077da:	f023 030f 	bic.w	r3, r3, #15
 80077de:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	89fb      	ldrh	r3, [r7, #14]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	89fa      	ldrh	r2, [r7, #14]
 80077f0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0201 	orr.w	r2, r2, #1
 8007800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	e000      	b.n	8007810 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800780e:	2302      	movs	r3, #2
  }
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e0bf      	b.n	80079ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fc fa94 	bl	8003d70 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800785e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6999      	ldr	r1, [r3, #24]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007874:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6899      	ldr	r1, [r3, #8]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	4b4a      	ldr	r3, [pc, #296]	; (80079b8 <HAL_LTDC_Init+0x19c>)
 8007890:	400b      	ands	r3, r1
 8007892:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	041b      	lsls	r3, r3, #16
 800789a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6899      	ldr	r1, [r3, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68d9      	ldr	r1, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	4b3e      	ldr	r3, [pc, #248]	; (80079b8 <HAL_LTDC_Init+0x19c>)
 80078be:	400b      	ands	r3, r1
 80078c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68d9      	ldr	r1, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1a      	ldr	r2, [r3, #32]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6919      	ldr	r1, [r3, #16]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b33      	ldr	r3, [pc, #204]	; (80079b8 <HAL_LTDC_Init+0x19c>)
 80078ec:	400b      	ands	r3, r1
 80078ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	041b      	lsls	r3, r3, #16
 80078f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6919      	ldr	r1, [r3, #16]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6959      	ldr	r1, [r3, #20]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	4b27      	ldr	r3, [pc, #156]	; (80079b8 <HAL_LTDC_Init+0x19c>)
 800791a:	400b      	ands	r3, r1
 800791c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007922:	041b      	lsls	r3, r3, #16
 8007924:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6959      	ldr	r1, [r3, #20]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800794c:	041b      	lsls	r3, r3, #16
 800794e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800795e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0206 	orr.w	r2, r2, #6
 800798a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	f000f800 	.word	0xf000f800

080079bc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f003 0304 	and.w	r3, r3, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d023      	beq.n	8007a26 <HAL_LTDC_IRQHandler+0x6a>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01e      	beq.n	8007a26 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0204 	bic.w	r2, r2, #4
 80079f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2204      	movs	r2, #4
 80079fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a06:	f043 0201 	orr.w	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2204      	movs	r2, #4
 8007a14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f86f 	bl	8007b04 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d023      	beq.n	8007a78 <HAL_LTDC_IRQHandler+0xbc>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01e      	beq.n	8007a78 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0202 	bic.w	r2, r2, #2
 8007a48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a58:	f043 0202 	orr.w	r2, r3, #2
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2204      	movs	r2, #4
 8007a66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f846 	bl	8007b04 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d01b      	beq.n	8007aba <HAL_LTDC_IRQHandler+0xfe>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d016      	beq.n	8007aba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0201 	bic.w	r2, r2, #1
 8007a9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f00a ffc9 	bl	8012a4c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 0308 	and.w	r3, r3, #8
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01b      	beq.n	8007afc <HAL_LTDC_IRQHandler+0x140>
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d016      	beq.n	8007afc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0208 	bic.w	r2, r2, #8
 8007adc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2208      	movs	r2, #8
 8007ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f80e 	bl	8007b18 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007b2c:	b5b0      	push	{r4, r5, r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_LTDC_ConfigLayer+0x1a>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e02c      	b.n	8007ba0 <HAL_LTDC_ConfigLayer+0x74>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2202      	movs	r2, #2
 8007b52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2134      	movs	r1, #52	; 0x34
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	4413      	add	r3, r2
 8007b62:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4614      	mov	r4, r2
 8007b6a:	461d      	mov	r5, r3
 8007b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f849 	bl	8007c18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bdb0      	pop	{r4, r5, r7, pc}

08007ba8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_LTDC_ProgramLineEvent+0x18>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e023      	b.n	8007c08 <HAL_LTDC_ProgramLineEvent+0x60>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0201 	bic.w	r2, r2, #1
 8007bde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007be0:	4a0c      	ldr	r2, [pc, #48]	; (8007c14 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0201 	orr.w	r2, r2, #1
 8007bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	40016800 	.word	0x40016800

08007c18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b089      	sub	sp, #36	; 0x24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	0c1b      	lsrs	r3, r3, #16
 8007c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c34:	4413      	add	r3, r2
 8007c36:	041b      	lsls	r3, r3, #16
 8007c38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	01db      	lsls	r3, r3, #7
 8007c44:	4413      	add	r3, r2
 8007c46:	3384      	adds	r3, #132	; 0x84
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	01d2      	lsls	r2, r2, #7
 8007c54:	440a      	add	r2, r1
 8007c56:	3284      	adds	r2, #132	; 0x84
 8007c58:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007c5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	0c1b      	lsrs	r3, r3, #16
 8007c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c6e:	4413      	add	r3, r2
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4619      	mov	r1, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	01db      	lsls	r3, r3, #7
 8007c7c:	440b      	add	r3, r1
 8007c7e:	3384      	adds	r3, #132	; 0x84
 8007c80:	4619      	mov	r1, r3
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c96:	4413      	add	r3, r2
 8007c98:	041b      	lsls	r3, r3, #16
 8007c9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	01db      	lsls	r3, r3, #7
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3384      	adds	r3, #132	; 0x84
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	6812      	ldr	r2, [r2, #0]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	01d2      	lsls	r2, r2, #7
 8007cb6:	440a      	add	r2, r1
 8007cb8:	3284      	adds	r2, #132	; 0x84
 8007cba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007cbe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cce:	4413      	add	r3, r2
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	01db      	lsls	r3, r3, #7
 8007cdc:	440b      	add	r3, r1
 8007cde:	3384      	adds	r3, #132	; 0x84
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	01db      	lsls	r3, r3, #7
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3384      	adds	r3, #132	; 0x84
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	01d2      	lsls	r2, r2, #7
 8007d02:	440a      	add	r2, r1
 8007d04:	3284      	adds	r2, #132	; 0x84
 8007d06:	f023 0307 	bic.w	r3, r3, #7
 8007d0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	01db      	lsls	r3, r3, #7
 8007d16:	4413      	add	r3, r2
 8007d18:	3384      	adds	r3, #132	; 0x84
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007d32:	041b      	lsls	r3, r3, #16
 8007d34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	061b      	lsls	r3, r3, #24
 8007d3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	01db      	lsls	r3, r3, #7
 8007d48:	4413      	add	r3, r2
 8007d4a:	3384      	adds	r3, #132	; 0x84
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	01db      	lsls	r3, r3, #7
 8007d58:	4413      	add	r3, r2
 8007d5a:	3384      	adds	r3, #132	; 0x84
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	2300      	movs	r3, #0
 8007d60:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d68:	461a      	mov	r2, r3
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	431a      	orrs	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4619      	mov	r1, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	01db      	lsls	r3, r3, #7
 8007d7c:	440b      	add	r3, r1
 8007d7e:	3384      	adds	r3, #132	; 0x84
 8007d80:	4619      	mov	r1, r3
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	01db      	lsls	r3, r3, #7
 8007d92:	4413      	add	r3, r2
 8007d94:	3384      	adds	r3, #132	; 0x84
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	01d2      	lsls	r2, r2, #7
 8007da2:	440a      	add	r2, r1
 8007da4:	3284      	adds	r2, #132	; 0x84
 8007da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007daa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	01db      	lsls	r3, r3, #7
 8007db6:	4413      	add	r3, r2
 8007db8:	3384      	adds	r3, #132	; 0x84
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	01db      	lsls	r3, r3, #7
 8007dcc:	4413      	add	r3, r2
 8007dce:	3384      	adds	r3, #132	; 0x84
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	6812      	ldr	r2, [r2, #0]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	01d2      	lsls	r2, r2, #7
 8007ddc:	440a      	add	r2, r1
 8007dde:	3284      	adds	r2, #132	; 0x84
 8007de0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007de4:	f023 0307 	bic.w	r3, r3, #7
 8007de8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	69da      	ldr	r2, [r3, #28]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	6809      	ldr	r1, [r1, #0]
 8007df6:	4608      	mov	r0, r1
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	01c9      	lsls	r1, r1, #7
 8007dfc:	4401      	add	r1, r0
 8007dfe:	3184      	adds	r1, #132	; 0x84
 8007e00:	4313      	orrs	r3, r2
 8007e02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	01db      	lsls	r3, r3, #7
 8007e0e:	4413      	add	r3, r2
 8007e10:	3384      	adds	r3, #132	; 0x84
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	01db      	lsls	r3, r3, #7
 8007e1e:	4413      	add	r3, r2
 8007e20:	3384      	adds	r3, #132	; 0x84
 8007e22:	461a      	mov	r2, r3
 8007e24:	2300      	movs	r3, #0
 8007e26:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	01db      	lsls	r3, r3, #7
 8007e32:	4413      	add	r3, r2
 8007e34:	3384      	adds	r3, #132	; 0x84
 8007e36:	461a      	mov	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007e46:	2304      	movs	r3, #4
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	e01b      	b.n	8007e84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d102      	bne.n	8007e5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007e54:	2303      	movs	r3, #3
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	e014      	b.n	8007e84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d00b      	beq.n	8007e7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d007      	beq.n	8007e7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d003      	beq.n	8007e7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007e76:	2b07      	cmp	r3, #7
 8007e78:	d102      	bne.n	8007e80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	61fb      	str	r3, [r7, #28]
 8007e7e:	e001      	b.n	8007e84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007e80:	2301      	movs	r3, #1
 8007e82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	01db      	lsls	r3, r3, #7
 8007e8e:	4413      	add	r3, r2
 8007e90:	3384      	adds	r3, #132	; 0x84
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	6812      	ldr	r2, [r2, #0]
 8007e98:	4611      	mov	r1, r2
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	01d2      	lsls	r2, r2, #7
 8007e9e:	440a      	add	r2, r1
 8007ea0:	3284      	adds	r2, #132	; 0x84
 8007ea2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	fb02 f303 	mul.w	r3, r2, r3
 8007eb2:	041a      	lsls	r2, r3, #16
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	6859      	ldr	r1, [r3, #4]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	1acb      	subs	r3, r1, r3
 8007ebe:	69f9      	ldr	r1, [r7, #28]
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	3303      	adds	r3, #3
 8007ec6:	68f9      	ldr	r1, [r7, #12]
 8007ec8:	6809      	ldr	r1, [r1, #0]
 8007eca:	4608      	mov	r0, r1
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	01c9      	lsls	r1, r1, #7
 8007ed0:	4401      	add	r1, r0
 8007ed2:	3184      	adds	r1, #132	; 0x84
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	01db      	lsls	r3, r3, #7
 8007ee2:	4413      	add	r3, r2
 8007ee4:	3384      	adds	r3, #132	; 0x84
 8007ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	6812      	ldr	r2, [r2, #0]
 8007eec:	4611      	mov	r1, r2
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	01d2      	lsls	r2, r2, #7
 8007ef2:	440a      	add	r2, r1
 8007ef4:	3284      	adds	r2, #132	; 0x84
 8007ef6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007efa:	f023 0307 	bic.w	r3, r3, #7
 8007efe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	01db      	lsls	r3, r3, #7
 8007f0a:	4413      	add	r3, r2
 8007f0c:	3384      	adds	r3, #132	; 0x84
 8007f0e:	461a      	mov	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	01db      	lsls	r3, r3, #7
 8007f20:	4413      	add	r3, r2
 8007f22:	3384      	adds	r3, #132	; 0x84
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	01d2      	lsls	r2, r2, #7
 8007f30:	440a      	add	r2, r1
 8007f32:	3284      	adds	r2, #132	; 0x84
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	6013      	str	r3, [r2, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	3724      	adds	r7, #36	; 0x24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
	...

08007f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e264      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d075      	beq.n	8008052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f66:	4ba3      	ldr	r3, [pc, #652]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 030c 	and.w	r3, r3, #12
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d00c      	beq.n	8007f8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f72:	4ba0      	ldr	r3, [pc, #640]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d112      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f7e:	4b9d      	ldr	r3, [pc, #628]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f8a:	d10b      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f8c:	4b99      	ldr	r3, [pc, #612]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d05b      	beq.n	8008050 <HAL_RCC_OscConfig+0x108>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d157      	bne.n	8008050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e23f      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fac:	d106      	bne.n	8007fbc <HAL_RCC_OscConfig+0x74>
 8007fae:	4b91      	ldr	r3, [pc, #580]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a90      	ldr	r2, [pc, #576]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	e01d      	b.n	8007ff8 <HAL_RCC_OscConfig+0xb0>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fc4:	d10c      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x98>
 8007fc6:	4b8b      	ldr	r3, [pc, #556]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a8a      	ldr	r2, [pc, #552]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4b88      	ldr	r3, [pc, #544]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a87      	ldr	r2, [pc, #540]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	e00b      	b.n	8007ff8 <HAL_RCC_OscConfig+0xb0>
 8007fe0:	4b84      	ldr	r3, [pc, #528]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a83      	ldr	r2, [pc, #524]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	4b81      	ldr	r3, [pc, #516]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a80      	ldr	r2, [pc, #512]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8007ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d013      	beq.n	8008028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008000:	f7fd fd8e 	bl	8005b20 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008008:	f7fd fd8a 	bl	8005b20 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b64      	cmp	r3, #100	; 0x64
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e204      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800801a:	4b76      	ldr	r3, [pc, #472]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f0      	beq.n	8008008 <HAL_RCC_OscConfig+0xc0>
 8008026:	e014      	b.n	8008052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008028:	f7fd fd7a 	bl	8005b20 <HAL_GetTick>
 800802c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008030:	f7fd fd76 	bl	8005b20 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b64      	cmp	r3, #100	; 0x64
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e1f0      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008042:	4b6c      	ldr	r3, [pc, #432]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f0      	bne.n	8008030 <HAL_RCC_OscConfig+0xe8>
 800804e:	e000      	b.n	8008052 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d063      	beq.n	8008126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800805e:	4b65      	ldr	r3, [pc, #404]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 030c 	and.w	r3, r3, #12
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800806a:	4b62      	ldr	r3, [pc, #392]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008072:	2b08      	cmp	r3, #8
 8008074:	d11c      	bne.n	80080b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008076:	4b5f      	ldr	r3, [pc, #380]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d116      	bne.n	80080b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008082:	4b5c      	ldr	r3, [pc, #368]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <HAL_RCC_OscConfig+0x152>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d001      	beq.n	800809a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e1c4      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800809a:	4b56      	ldr	r3, [pc, #344]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	4952      	ldr	r1, [pc, #328]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080ae:	e03a      	b.n	8008126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d020      	beq.n	80080fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080b8:	4b4f      	ldr	r3, [pc, #316]	; (80081f8 <HAL_RCC_OscConfig+0x2b0>)
 80080ba:	2201      	movs	r2, #1
 80080bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080be:	f7fd fd2f 	bl	8005b20 <HAL_GetTick>
 80080c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c4:	e008      	b.n	80080d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080c6:	f7fd fd2b 	bl	8005b20 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d901      	bls.n	80080d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e1a5      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d8:	4b46      	ldr	r3, [pc, #280]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0f0      	beq.n	80080c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080e4:	4b43      	ldr	r3, [pc, #268]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	4940      	ldr	r1, [pc, #256]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	600b      	str	r3, [r1, #0]
 80080f8:	e015      	b.n	8008126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080fa:	4b3f      	ldr	r3, [pc, #252]	; (80081f8 <HAL_RCC_OscConfig+0x2b0>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008100:	f7fd fd0e 	bl	8005b20 <HAL_GetTick>
 8008104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008106:	e008      	b.n	800811a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008108:	f7fd fd0a 	bl	8005b20 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b02      	cmp	r3, #2
 8008114:	d901      	bls.n	800811a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e184      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800811a:	4b36      	ldr	r3, [pc, #216]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1f0      	bne.n	8008108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d030      	beq.n	8008194 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d016      	beq.n	8008168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800813a:	4b30      	ldr	r3, [pc, #192]	; (80081fc <HAL_RCC_OscConfig+0x2b4>)
 800813c:	2201      	movs	r2, #1
 800813e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008140:	f7fd fcee 	bl	8005b20 <HAL_GetTick>
 8008144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008146:	e008      	b.n	800815a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008148:	f7fd fcea 	bl	8005b20 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d901      	bls.n	800815a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e164      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800815a:	4b26      	ldr	r3, [pc, #152]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 800815c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0f0      	beq.n	8008148 <HAL_RCC_OscConfig+0x200>
 8008166:	e015      	b.n	8008194 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008168:	4b24      	ldr	r3, [pc, #144]	; (80081fc <HAL_RCC_OscConfig+0x2b4>)
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800816e:	f7fd fcd7 	bl	8005b20 <HAL_GetTick>
 8008172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008174:	e008      	b.n	8008188 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008176:	f7fd fcd3 	bl	8005b20 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	2b02      	cmp	r3, #2
 8008182:	d901      	bls.n	8008188 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e14d      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008188:	4b1a      	ldr	r3, [pc, #104]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 800818a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1f0      	bne.n	8008176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 80a0 	beq.w	80082e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081a6:	4b13      	ldr	r3, [pc, #76]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10f      	bne.n	80081d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	4a0e      	ldr	r2, [pc, #56]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 80081bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081c0:	6413      	str	r3, [r2, #64]	; 0x40
 80081c2:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <HAL_RCC_OscConfig+0x2ac>)
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ca:	60bb      	str	r3, [r7, #8]
 80081cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081ce:	2301      	movs	r3, #1
 80081d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081d2:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <HAL_RCC_OscConfig+0x2b8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d121      	bne.n	8008222 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081de:	4b08      	ldr	r3, [pc, #32]	; (8008200 <HAL_RCC_OscConfig+0x2b8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a07      	ldr	r2, [pc, #28]	; (8008200 <HAL_RCC_OscConfig+0x2b8>)
 80081e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081ea:	f7fd fc99 	bl	8005b20 <HAL_GetTick>
 80081ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081f0:	e011      	b.n	8008216 <HAL_RCC_OscConfig+0x2ce>
 80081f2:	bf00      	nop
 80081f4:	40023800 	.word	0x40023800
 80081f8:	42470000 	.word	0x42470000
 80081fc:	42470e80 	.word	0x42470e80
 8008200:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008204:	f7fd fc8c 	bl	8005b20 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e106      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008216:	4b85      	ldr	r3, [pc, #532]	; (800842c <HAL_RCC_OscConfig+0x4e4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0f0      	beq.n	8008204 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d106      	bne.n	8008238 <HAL_RCC_OscConfig+0x2f0>
 800822a:	4b81      	ldr	r3, [pc, #516]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	4a80      	ldr	r2, [pc, #512]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 8008230:	f043 0301 	orr.w	r3, r3, #1
 8008234:	6713      	str	r3, [r2, #112]	; 0x70
 8008236:	e01c      	b.n	8008272 <HAL_RCC_OscConfig+0x32a>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b05      	cmp	r3, #5
 800823e:	d10c      	bne.n	800825a <HAL_RCC_OscConfig+0x312>
 8008240:	4b7b      	ldr	r3, [pc, #492]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 8008242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008244:	4a7a      	ldr	r2, [pc, #488]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 8008246:	f043 0304 	orr.w	r3, r3, #4
 800824a:	6713      	str	r3, [r2, #112]	; 0x70
 800824c:	4b78      	ldr	r3, [pc, #480]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 800824e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008250:	4a77      	ldr	r2, [pc, #476]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 8008252:	f043 0301 	orr.w	r3, r3, #1
 8008256:	6713      	str	r3, [r2, #112]	; 0x70
 8008258:	e00b      	b.n	8008272 <HAL_RCC_OscConfig+0x32a>
 800825a:	4b75      	ldr	r3, [pc, #468]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 800825c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825e:	4a74      	ldr	r2, [pc, #464]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 8008260:	f023 0301 	bic.w	r3, r3, #1
 8008264:	6713      	str	r3, [r2, #112]	; 0x70
 8008266:	4b72      	ldr	r3, [pc, #456]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 8008268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826a:	4a71      	ldr	r2, [pc, #452]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 800826c:	f023 0304 	bic.w	r3, r3, #4
 8008270:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d015      	beq.n	80082a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827a:	f7fd fc51 	bl	8005b20 <HAL_GetTick>
 800827e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008280:	e00a      	b.n	8008298 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008282:	f7fd fc4d 	bl	8005b20 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008290:	4293      	cmp	r3, r2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e0c5      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008298:	4b65      	ldr	r3, [pc, #404]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 800829a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d0ee      	beq.n	8008282 <HAL_RCC_OscConfig+0x33a>
 80082a4:	e014      	b.n	80082d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082a6:	f7fd fc3b 	bl	8005b20 <HAL_GetTick>
 80082aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ac:	e00a      	b.n	80082c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ae:	f7fd fc37 	bl	8005b20 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082bc:	4293      	cmp	r3, r2
 80082be:	d901      	bls.n	80082c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e0af      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082c4:	4b5a      	ldr	r3, [pc, #360]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 80082c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1ee      	bne.n	80082ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d105      	bne.n	80082e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082d6:	4b56      	ldr	r3, [pc, #344]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	4a55      	ldr	r2, [pc, #340]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 80082dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 809b 	beq.w	8008422 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082ec:	4b50      	ldr	r3, [pc, #320]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f003 030c 	and.w	r3, r3, #12
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d05c      	beq.n	80083b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d141      	bne.n	8008384 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008300:	4b4c      	ldr	r3, [pc, #304]	; (8008434 <HAL_RCC_OscConfig+0x4ec>)
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008306:	f7fd fc0b 	bl	8005b20 <HAL_GetTick>
 800830a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800830c:	e008      	b.n	8008320 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800830e:	f7fd fc07 	bl	8005b20 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d901      	bls.n	8008320 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e081      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008320:	4b43      	ldr	r3, [pc, #268]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f0      	bne.n	800830e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	431a      	orrs	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	019b      	lsls	r3, r3, #6
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	3b01      	subs	r3, #1
 8008346:	041b      	lsls	r3, r3, #16
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	061b      	lsls	r3, r3, #24
 8008350:	4937      	ldr	r1, [pc, #220]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 8008352:	4313      	orrs	r3, r2
 8008354:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008356:	4b37      	ldr	r3, [pc, #220]	; (8008434 <HAL_RCC_OscConfig+0x4ec>)
 8008358:	2201      	movs	r2, #1
 800835a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800835c:	f7fd fbe0 	bl	8005b20 <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008364:	f7fd fbdc 	bl	8005b20 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e056      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008376:	4b2e      	ldr	r3, [pc, #184]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0f0      	beq.n	8008364 <HAL_RCC_OscConfig+0x41c>
 8008382:	e04e      	b.n	8008422 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008384:	4b2b      	ldr	r3, [pc, #172]	; (8008434 <HAL_RCC_OscConfig+0x4ec>)
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800838a:	f7fd fbc9 	bl	8005b20 <HAL_GetTick>
 800838e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008390:	e008      	b.n	80083a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008392:	f7fd fbc5 	bl	8005b20 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d901      	bls.n	80083a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e03f      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083a4:	4b22      	ldr	r3, [pc, #136]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1f0      	bne.n	8008392 <HAL_RCC_OscConfig+0x44a>
 80083b0:	e037      	b.n	8008422 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e032      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083be:	4b1c      	ldr	r3, [pc, #112]	; (8008430 <HAL_RCC_OscConfig+0x4e8>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d028      	beq.n	800841e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d121      	bne.n	800841e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d11a      	bne.n	800841e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80083ee:	4013      	ands	r3, r2
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d111      	bne.n	800841e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	085b      	lsrs	r3, r3, #1
 8008406:	3b01      	subs	r3, #1
 8008408:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800840a:	429a      	cmp	r2, r3
 800840c:	d107      	bne.n	800841e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800841a:	429a      	cmp	r2, r3
 800841c:	d001      	beq.n	8008422 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40007000 	.word	0x40007000
 8008430:	40023800 	.word	0x40023800
 8008434:	42470060 	.word	0x42470060

08008438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e0cc      	b.n	80085e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800844c:	4b68      	ldr	r3, [pc, #416]	; (80085f0 <HAL_RCC_ClockConfig+0x1b8>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d90c      	bls.n	8008474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800845a:	4b65      	ldr	r3, [pc, #404]	; (80085f0 <HAL_RCC_ClockConfig+0x1b8>)
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008462:	4b63      	ldr	r3, [pc, #396]	; (80085f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d001      	beq.n	8008474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e0b8      	b.n	80085e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d020      	beq.n	80084c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800848c:	4b59      	ldr	r3, [pc, #356]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	4a58      	ldr	r2, [pc, #352]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084a4:	4b53      	ldr	r3, [pc, #332]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	4a52      	ldr	r2, [pc, #328]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 80084aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084b0:	4b50      	ldr	r3, [pc, #320]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	494d      	ldr	r1, [pc, #308]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d044      	beq.n	8008558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d107      	bne.n	80084e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084d6:	4b47      	ldr	r3, [pc, #284]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d119      	bne.n	8008516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e07f      	b.n	80085e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d003      	beq.n	80084f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d107      	bne.n	8008506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084f6:	4b3f      	ldr	r3, [pc, #252]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e06f      	b.n	80085e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008506:	4b3b      	ldr	r3, [pc, #236]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e067      	b.n	80085e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008516:	4b37      	ldr	r3, [pc, #220]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f023 0203 	bic.w	r2, r3, #3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	4934      	ldr	r1, [pc, #208]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008524:	4313      	orrs	r3, r2
 8008526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008528:	f7fd fafa 	bl	8005b20 <HAL_GetTick>
 800852c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800852e:	e00a      	b.n	8008546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008530:	f7fd faf6 	bl	8005b20 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	f241 3288 	movw	r2, #5000	; 0x1388
 800853e:	4293      	cmp	r3, r2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e04f      	b.n	80085e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008546:	4b2b      	ldr	r3, [pc, #172]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f003 020c 	and.w	r2, r3, #12
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	429a      	cmp	r2, r3
 8008556:	d1eb      	bne.n	8008530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008558:	4b25      	ldr	r3, [pc, #148]	; (80085f0 <HAL_RCC_ClockConfig+0x1b8>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 030f 	and.w	r3, r3, #15
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	429a      	cmp	r2, r3
 8008564:	d20c      	bcs.n	8008580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008566:	4b22      	ldr	r3, [pc, #136]	; (80085f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800856e:	4b20      	ldr	r3, [pc, #128]	; (80085f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	d001      	beq.n	8008580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e032      	b.n	80085e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d008      	beq.n	800859e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800858c:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	4916      	ldr	r1, [pc, #88]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 800859a:	4313      	orrs	r3, r2
 800859c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d009      	beq.n	80085be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085aa:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	490e      	ldr	r1, [pc, #56]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085be:	f000 f821 	bl	8008604 <HAL_RCC_GetSysClockFreq>
 80085c2:	4602      	mov	r2, r0
 80085c4:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <HAL_RCC_ClockConfig+0x1bc>)
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	091b      	lsrs	r3, r3, #4
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	490a      	ldr	r1, [pc, #40]	; (80085f8 <HAL_RCC_ClockConfig+0x1c0>)
 80085d0:	5ccb      	ldrb	r3, [r1, r3]
 80085d2:	fa22 f303 	lsr.w	r3, r2, r3
 80085d6:	4a09      	ldr	r2, [pc, #36]	; (80085fc <HAL_RCC_ClockConfig+0x1c4>)
 80085d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <HAL_RCC_ClockConfig+0x1c8>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fb fe74 	bl	80042cc <HAL_InitTick>

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	40023c00 	.word	0x40023c00
 80085f4:	40023800 	.word	0x40023800
 80085f8:	08028444 	.word	0x08028444
 80085fc:	20000024 	.word	0x20000024
 8008600:	20000090 	.word	0x20000090

08008604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008604:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	607b      	str	r3, [r7, #4]
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	2300      	movs	r3, #0
 8008616:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800861c:	4b67      	ldr	r3, [pc, #412]	; (80087bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f003 030c 	and.w	r3, r3, #12
 8008624:	2b08      	cmp	r3, #8
 8008626:	d00d      	beq.n	8008644 <HAL_RCC_GetSysClockFreq+0x40>
 8008628:	2b08      	cmp	r3, #8
 800862a:	f200 80bd 	bhi.w	80087a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <HAL_RCC_GetSysClockFreq+0x34>
 8008632:	2b04      	cmp	r3, #4
 8008634:	d003      	beq.n	800863e <HAL_RCC_GetSysClockFreq+0x3a>
 8008636:	e0b7      	b.n	80087a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008638:	4b61      	ldr	r3, [pc, #388]	; (80087c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800863a:	60bb      	str	r3, [r7, #8]
       break;
 800863c:	e0b7      	b.n	80087ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800863e:	4b61      	ldr	r3, [pc, #388]	; (80087c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008640:	60bb      	str	r3, [r7, #8]
      break;
 8008642:	e0b4      	b.n	80087ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008644:	4b5d      	ldr	r3, [pc, #372]	; (80087bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800864c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800864e:	4b5b      	ldr	r3, [pc, #364]	; (80087bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d04d      	beq.n	80086f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800865a:	4b58      	ldr	r3, [pc, #352]	; (80087bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	099b      	lsrs	r3, r3, #6
 8008660:	461a      	mov	r2, r3
 8008662:	f04f 0300 	mov.w	r3, #0
 8008666:	f240 10ff 	movw	r0, #511	; 0x1ff
 800866a:	f04f 0100 	mov.w	r1, #0
 800866e:	ea02 0800 	and.w	r8, r2, r0
 8008672:	ea03 0901 	and.w	r9, r3, r1
 8008676:	4640      	mov	r0, r8
 8008678:	4649      	mov	r1, r9
 800867a:	f04f 0200 	mov.w	r2, #0
 800867e:	f04f 0300 	mov.w	r3, #0
 8008682:	014b      	lsls	r3, r1, #5
 8008684:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008688:	0142      	lsls	r2, r0, #5
 800868a:	4610      	mov	r0, r2
 800868c:	4619      	mov	r1, r3
 800868e:	ebb0 0008 	subs.w	r0, r0, r8
 8008692:	eb61 0109 	sbc.w	r1, r1, r9
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	f04f 0300 	mov.w	r3, #0
 800869e:	018b      	lsls	r3, r1, #6
 80086a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086a4:	0182      	lsls	r2, r0, #6
 80086a6:	1a12      	subs	r2, r2, r0
 80086a8:	eb63 0301 	sbc.w	r3, r3, r1
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	f04f 0100 	mov.w	r1, #0
 80086b4:	00d9      	lsls	r1, r3, #3
 80086b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086ba:	00d0      	lsls	r0, r2, #3
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	eb12 0208 	adds.w	r2, r2, r8
 80086c4:	eb43 0309 	adc.w	r3, r3, r9
 80086c8:	f04f 0000 	mov.w	r0, #0
 80086cc:	f04f 0100 	mov.w	r1, #0
 80086d0:	0259      	lsls	r1, r3, #9
 80086d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80086d6:	0250      	lsls	r0, r2, #9
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4610      	mov	r0, r2
 80086de:	4619      	mov	r1, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f04f 0300 	mov.w	r3, #0
 80086e8:	f7f8 fa46 	bl	8000b78 <__aeabi_uldivmod>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4613      	mov	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e04a      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086f6:	4b31      	ldr	r3, [pc, #196]	; (80087bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	099b      	lsrs	r3, r3, #6
 80086fc:	461a      	mov	r2, r3
 80086fe:	f04f 0300 	mov.w	r3, #0
 8008702:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008706:	f04f 0100 	mov.w	r1, #0
 800870a:	ea02 0400 	and.w	r4, r2, r0
 800870e:	ea03 0501 	and.w	r5, r3, r1
 8008712:	4620      	mov	r0, r4
 8008714:	4629      	mov	r1, r5
 8008716:	f04f 0200 	mov.w	r2, #0
 800871a:	f04f 0300 	mov.w	r3, #0
 800871e:	014b      	lsls	r3, r1, #5
 8008720:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008724:	0142      	lsls	r2, r0, #5
 8008726:	4610      	mov	r0, r2
 8008728:	4619      	mov	r1, r3
 800872a:	1b00      	subs	r0, r0, r4
 800872c:	eb61 0105 	sbc.w	r1, r1, r5
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	f04f 0300 	mov.w	r3, #0
 8008738:	018b      	lsls	r3, r1, #6
 800873a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800873e:	0182      	lsls	r2, r0, #6
 8008740:	1a12      	subs	r2, r2, r0
 8008742:	eb63 0301 	sbc.w	r3, r3, r1
 8008746:	f04f 0000 	mov.w	r0, #0
 800874a:	f04f 0100 	mov.w	r1, #0
 800874e:	00d9      	lsls	r1, r3, #3
 8008750:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008754:	00d0      	lsls	r0, r2, #3
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	1912      	adds	r2, r2, r4
 800875c:	eb45 0303 	adc.w	r3, r5, r3
 8008760:	f04f 0000 	mov.w	r0, #0
 8008764:	f04f 0100 	mov.w	r1, #0
 8008768:	0299      	lsls	r1, r3, #10
 800876a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800876e:	0290      	lsls	r0, r2, #10
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4610      	mov	r0, r2
 8008776:	4619      	mov	r1, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	461a      	mov	r2, r3
 800877c:	f04f 0300 	mov.w	r3, #0
 8008780:	f7f8 f9fa 	bl	8000b78 <__aeabi_uldivmod>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4613      	mov	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800878c:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	0c1b      	lsrs	r3, r3, #16
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	3301      	adds	r3, #1
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a4:	60bb      	str	r3, [r7, #8]
      break;
 80087a6:	e002      	b.n	80087ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087a8:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80087aa:	60bb      	str	r3, [r7, #8]
      break;
 80087ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087ae:	68bb      	ldr	r3, [r7, #8]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80087ba:	bf00      	nop
 80087bc:	40023800 	.word	0x40023800
 80087c0:	00f42400 	.word	0x00f42400
 80087c4:	007a1200 	.word	0x007a1200

080087c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087c8:	b480      	push	{r7}
 80087ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087cc:	4b03      	ldr	r3, [pc, #12]	; (80087dc <HAL_RCC_GetHCLKFreq+0x14>)
 80087ce:	681b      	ldr	r3, [r3, #0]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000024 	.word	0x20000024

080087e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087e4:	f7ff fff0 	bl	80087c8 <HAL_RCC_GetHCLKFreq>
 80087e8:	4602      	mov	r2, r0
 80087ea:	4b05      	ldr	r3, [pc, #20]	; (8008800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	0a9b      	lsrs	r3, r3, #10
 80087f0:	f003 0307 	and.w	r3, r3, #7
 80087f4:	4903      	ldr	r1, [pc, #12]	; (8008804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087f6:	5ccb      	ldrb	r3, [r1, r3]
 80087f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40023800 	.word	0x40023800
 8008804:	08028454 	.word	0x08028454

08008808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800880c:	f7ff ffdc 	bl	80087c8 <HAL_RCC_GetHCLKFreq>
 8008810:	4602      	mov	r2, r0
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	0b5b      	lsrs	r3, r3, #13
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	4903      	ldr	r1, [pc, #12]	; (800882c <HAL_RCC_GetPCLK2Freq+0x24>)
 800881e:	5ccb      	ldrb	r3, [r1, r3]
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008824:	4618      	mov	r0, r3
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40023800 	.word	0x40023800
 800882c:	08028454 	.word	0x08028454

08008830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	220f      	movs	r2, #15
 800883e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008840:	4b12      	ldr	r3, [pc, #72]	; (800888c <HAL_RCC_GetClockConfig+0x5c>)
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f003 0203 	and.w	r2, r3, #3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800884c:	4b0f      	ldr	r3, [pc, #60]	; (800888c <HAL_RCC_GetClockConfig+0x5c>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008858:	4b0c      	ldr	r3, [pc, #48]	; (800888c <HAL_RCC_GetClockConfig+0x5c>)
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008864:	4b09      	ldr	r3, [pc, #36]	; (800888c <HAL_RCC_GetClockConfig+0x5c>)
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	08db      	lsrs	r3, r3, #3
 800886a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008872:	4b07      	ldr	r3, [pc, #28]	; (8008890 <HAL_RCC_GetClockConfig+0x60>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 020f 	and.w	r2, r3, #15
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	601a      	str	r2, [r3, #0]
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	40023800 	.word	0x40023800
 8008890:	40023c00 	.word	0x40023c00

08008894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10b      	bne.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d105      	bne.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d075      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088c8:	4bad      	ldr	r3, [pc, #692]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088ce:	f7fd f927 	bl	8005b20 <HAL_GetTick>
 80088d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088d4:	e008      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088d6:	f7fd f923 	bl	8005b20 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d901      	bls.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e18b      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088e8:	4ba6      	ldr	r3, [pc, #664]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1f0      	bne.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d009      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	019a      	lsls	r2, r3, #6
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	071b      	lsls	r3, r3, #28
 800890c:	499d      	ldr	r1, [pc, #628]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800890e:	4313      	orrs	r3, r2
 8008910:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01f      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008920:	4b98      	ldr	r3, [pc, #608]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008926:	0f1b      	lsrs	r3, r3, #28
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	019a      	lsls	r2, r3, #6
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	431a      	orrs	r2, r3
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	071b      	lsls	r3, r3, #28
 8008940:	4990      	ldr	r1, [pc, #576]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008942:	4313      	orrs	r3, r2
 8008944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008948:	4b8e      	ldr	r3, [pc, #568]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800894a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800894e:	f023 021f 	bic.w	r2, r3, #31
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	3b01      	subs	r3, #1
 8008958:	498a      	ldr	r1, [pc, #552]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800895a:	4313      	orrs	r3, r2
 800895c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00d      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	019a      	lsls	r2, r3, #6
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	061b      	lsls	r3, r3, #24
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	071b      	lsls	r3, r3, #28
 8008980:	4980      	ldr	r1, [pc, #512]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008982:	4313      	orrs	r3, r2
 8008984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008988:	4b7d      	ldr	r3, [pc, #500]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800898a:	2201      	movs	r2, #1
 800898c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800898e:	f7fd f8c7 	bl	8005b20 <HAL_GetTick>
 8008992:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008994:	e008      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008996:	f7fd f8c3 	bl	8005b20 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e12b      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089a8:	4b76      	ldr	r3, [pc, #472]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0304 	and.w	r3, r3, #4
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d105      	bne.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d079      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089cc:	4b6e      	ldr	r3, [pc, #440]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089d2:	f7fd f8a5 	bl	8005b20 <HAL_GetTick>
 80089d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089d8:	e008      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80089da:	f7fd f8a1 	bl	8005b20 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d901      	bls.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e109      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089ec:	4b65      	ldr	r3, [pc, #404]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f8:	d0ef      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0304 	and.w	r3, r3, #4
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d020      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a06:	4b5f      	ldr	r3, [pc, #380]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a0c:	0f1b      	lsrs	r3, r3, #28
 8008a0e:	f003 0307 	and.w	r3, r3, #7
 8008a12:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	019a      	lsls	r2, r3, #6
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	061b      	lsls	r3, r3, #24
 8008a20:	431a      	orrs	r2, r3
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	071b      	lsls	r3, r3, #28
 8008a26:	4957      	ldr	r1, [pc, #348]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a2e:	4b55      	ldr	r3, [pc, #340]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	4950      	ldr	r1, [pc, #320]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01e      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a54:	4b4b      	ldr	r3, [pc, #300]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a5a:	0e1b      	lsrs	r3, r3, #24
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	019a      	lsls	r2, r3, #6
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	061b      	lsls	r3, r3, #24
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	071b      	lsls	r3, r3, #28
 8008a74:	4943      	ldr	r1, [pc, #268]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a7c:	4b41      	ldr	r3, [pc, #260]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	493e      	ldr	r1, [pc, #248]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a92:	4b3d      	ldr	r3, [pc, #244]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a94:	2201      	movs	r2, #1
 8008a96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a98:	f7fd f842 	bl	8005b20 <HAL_GetTick>
 8008a9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008aa0:	f7fd f83e 	bl	8005b20 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e0a6      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ab2:	4b34      	ldr	r3, [pc, #208]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008abe:	d1ef      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0320 	and.w	r3, r3, #32
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 808d 	beq.w	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	4b2c      	ldr	r3, [pc, #176]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	4a2b      	ldr	r2, [pc, #172]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008adc:	6413      	str	r3, [r2, #64]	; 0x40
 8008ade:	4b29      	ldr	r3, [pc, #164]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008aea:	4b28      	ldr	r3, [pc, #160]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a27      	ldr	r2, [pc, #156]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008af4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008af6:	f7fd f813 	bl	8005b20 <HAL_GetTick>
 8008afa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008afc:	e008      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008afe:	f7fd f80f 	bl	8005b20 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e077      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b10:	4b1e      	ldr	r3, [pc, #120]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0f0      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b1c:	4b19      	ldr	r3, [pc, #100]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d039      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d032      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b3a:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b44:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008b46:	2201      	movs	r2, #1
 8008b48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b4a:	4b11      	ldr	r3, [pc, #68]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b50:	4a0c      	ldr	r2, [pc, #48]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d11e      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b62:	f7fc ffdd 	bl	8005b20 <HAL_GetTick>
 8008b66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b68:	e014      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b6a:	f7fc ffd9 	bl	8005b20 <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d90b      	bls.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e03f      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008b80:	42470068 	.word	0x42470068
 8008b84:	40023800 	.word	0x40023800
 8008b88:	42470070 	.word	0x42470070
 8008b8c:	40007000 	.word	0x40007000
 8008b90:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b94:	4b1c      	ldr	r3, [pc, #112]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0e4      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bac:	d10d      	bne.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008bae:	4b16      	ldr	r3, [pc, #88]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc2:	4911      	ldr	r1, [pc, #68]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	608b      	str	r3, [r1, #8]
 8008bc8:	e005      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008bca:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	4a0e      	ldr	r2, [pc, #56]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bd0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008bd4:	6093      	str	r3, [r2, #8]
 8008bd6:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008be2:	4909      	ldr	r1, [pc, #36]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0310 	and.w	r3, r3, #16
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d004      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008bfa:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008bfc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40023800 	.word	0x40023800
 8008c0c:	424711e0 	.word	0x424711e0

08008c10 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e025      	b.n	8008c70 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d106      	bne.n	8008c3e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7fa fda1 	bl	8003780 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4610      	mov	r0, r2
 8008c52:	f001 fe3d 	bl	800a8d0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	f001 fea8 	bl	800a9b6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d101      	bne.n	8008c94 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008c90:	2302      	movs	r3, #2
 8008c92:	e018      	b.n	8008cc6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 ff05 	bl	800aab4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d104      	bne.n	8008cbc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2205      	movs	r2, #5
 8008cb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008cba:	e003      	b.n	8008cc4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d101      	bne.n	8008ce8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e00e      	b.n	8008d06 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 ff18 	bl	800ab2c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e07b      	b.n	8008e18 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d108      	bne.n	8008d3a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d30:	d009      	beq.n	8008d46 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	61da      	str	r2, [r3, #28]
 8008d38:	e005      	b.n	8008d46 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7fb fa21 	bl	80041a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d7c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	431a      	orrs	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	431a      	orrs	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dca:	ea42 0103 	orr.w	r1, r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	0c1b      	lsrs	r3, r3, #16
 8008de4:	f003 0104 	and.w	r1, r3, #4
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	f003 0210 	and.w	r2, r3, #16
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69da      	ldr	r2, [r3, #28]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e01a      	b.n	8008e68 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7fb f9f4 	bl	8004238 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <HAL_SPI_Transmit+0x22>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e126      	b.n	80090e0 <HAL_SPI_Transmit+0x270>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e9a:	f7fc fe41 	bl	8005b20 <HAL_GetTick>
 8008e9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ea0:	88fb      	ldrh	r3, [r7, #6]
 8008ea2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d002      	beq.n	8008eb6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008eb4:	e10b      	b.n	80090ce <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <HAL_SPI_Transmit+0x52>
 8008ebc:	88fb      	ldrh	r3, [r7, #6]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d102      	bne.n	8008ec8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ec6:	e102      	b.n	80090ce <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2203      	movs	r2, #3
 8008ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	88fa      	ldrh	r2, [r7, #6]
 8008ee0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	88fa      	ldrh	r2, [r7, #6]
 8008ee6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f0e:	d10f      	bne.n	8008f30 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3a:	2b40      	cmp	r3, #64	; 0x40
 8008f3c:	d007      	beq.n	8008f4e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f56:	d14b      	bne.n	8008ff0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_SPI_Transmit+0xf6>
 8008f60:	8afb      	ldrh	r3, [r7, #22]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d13e      	bne.n	8008fe4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6a:	881a      	ldrh	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f76:	1c9a      	adds	r2, r3, #2
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	3b01      	subs	r3, #1
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f8a:	e02b      	b.n	8008fe4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d112      	bne.n	8008fc0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9e:	881a      	ldrh	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	1c9a      	adds	r2, r3, #2
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8008fbe:	e011      	b.n	8008fe4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fc0:	f7fc fdae 	bl	8005b20 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d803      	bhi.n	8008fd8 <HAL_SPI_Transmit+0x168>
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd6:	d102      	bne.n	8008fde <HAL_SPI_Transmit+0x16e>
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008fe2:	e074      	b.n	80090ce <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1ce      	bne.n	8008f8c <HAL_SPI_Transmit+0x11c>
 8008fee:	e04c      	b.n	800908a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <HAL_SPI_Transmit+0x18e>
 8008ff8:	8afb      	ldrh	r3, [r7, #22]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d140      	bne.n	8009080 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	330c      	adds	r3, #12
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b01      	subs	r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009024:	e02c      	b.n	8009080 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b02      	cmp	r3, #2
 8009032:	d113      	bne.n	800905c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	330c      	adds	r3, #12
 800903e:	7812      	ldrb	r2, [r2, #0]
 8009040:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b29a      	uxth	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	86da      	strh	r2, [r3, #54]	; 0x36
 800905a:	e011      	b.n	8009080 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800905c:	f7fc fd60 	bl	8005b20 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d803      	bhi.n	8009074 <HAL_SPI_Transmit+0x204>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009072:	d102      	bne.n	800907a <HAL_SPI_Transmit+0x20a>
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d102      	bne.n	8009080 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800907e:	e026      	b.n	80090ce <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009084:	b29b      	uxth	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1cd      	bne.n	8009026 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fbda 	bl	8009848 <SPI_EndRxTxTransaction>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2220      	movs	r2, #32
 800909e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090a8:	2300      	movs	r3, #0
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	613b      	str	r3, [r7, #16]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	77fb      	strb	r3, [r7, #31]
 80090ca:	e000      	b.n	80090ce <HAL_SPI_Transmit+0x25e>
  }

error:
 80090cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80090de:	7ffb      	ldrb	r3, [r7, #31]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009104:	d112      	bne.n	800912c <HAL_SPI_Receive+0x44>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10e      	bne.n	800912c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2204      	movs	r2, #4
 8009112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009116:	88fa      	ldrh	r2, [r7, #6]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	4613      	mov	r3, r2
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 f8f1 	bl	800930a <HAL_SPI_TransmitReceive>
 8009128:	4603      	mov	r3, r0
 800912a:	e0ea      	b.n	8009302 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009132:	2b01      	cmp	r3, #1
 8009134:	d101      	bne.n	800913a <HAL_SPI_Receive+0x52>
 8009136:	2302      	movs	r3, #2
 8009138:	e0e3      	b.n	8009302 <HAL_SPI_Receive+0x21a>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009142:	f7fc fced 	bl	8005b20 <HAL_GetTick>
 8009146:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b01      	cmp	r3, #1
 8009152:	d002      	beq.n	800915a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009154:	2302      	movs	r3, #2
 8009156:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009158:	e0ca      	b.n	80092f0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <HAL_SPI_Receive+0x7e>
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d102      	bne.n	800916c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	75fb      	strb	r3, [r7, #23]
    goto error;
 800916a:	e0c1      	b.n	80092f0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2204      	movs	r2, #4
 8009170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	88fa      	ldrh	r2, [r7, #6]
 800918a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091b2:	d10f      	bne.n	80091d4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091d2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091de:	2b40      	cmp	r3, #64	; 0x40
 80091e0:	d007      	beq.n	80091f2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d162      	bne.n	80092c0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80091fa:	e02e      	b.n	800925a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b01      	cmp	r3, #1
 8009208:	d115      	bne.n	8009236 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f103 020c 	add.w	r2, r3, #12
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	7812      	ldrb	r2, [r2, #0]
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800922a:	b29b      	uxth	r3, r3
 800922c:	3b01      	subs	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009234:	e011      	b.n	800925a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009236:	f7fc fc73 	bl	8005b20 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d803      	bhi.n	800924e <HAL_SPI_Receive+0x166>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924c:	d102      	bne.n	8009254 <HAL_SPI_Receive+0x16c>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d102      	bne.n	800925a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009258:	e04a      	b.n	80092f0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800925e:	b29b      	uxth	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1cb      	bne.n	80091fc <HAL_SPI_Receive+0x114>
 8009264:	e031      	b.n	80092ca <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b01      	cmp	r3, #1
 8009272:	d113      	bne.n	800929c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	b292      	uxth	r2, r2
 8009280:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	1c9a      	adds	r2, r3, #2
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	b29a      	uxth	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	87da      	strh	r2, [r3, #62]	; 0x3e
 800929a:	e011      	b.n	80092c0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800929c:	f7fc fc40 	bl	8005b20 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d803      	bhi.n	80092b4 <HAL_SPI_Receive+0x1cc>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d102      	bne.n	80092ba <HAL_SPI_Receive+0x1d2>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d102      	bne.n	80092c0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80092be:	e017      	b.n	80092f0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1cd      	bne.n	8009266 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fa54 	bl	800977c <SPI_EndRxTransaction>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2220      	movs	r2, #32
 80092de:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	75fb      	strb	r3, [r7, #23]
 80092ec:	e000      	b.n	80092f0 <HAL_SPI_Receive+0x208>
  }

error :
 80092ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009300:	7dfb      	ldrb	r3, [r7, #23]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b08c      	sub	sp, #48	; 0x30
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009318:	2301      	movs	r3, #1
 800931a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009328:	2b01      	cmp	r3, #1
 800932a:	d101      	bne.n	8009330 <HAL_SPI_TransmitReceive+0x26>
 800932c:	2302      	movs	r3, #2
 800932e:	e18a      	b.n	8009646 <HAL_SPI_TransmitReceive+0x33c>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009338:	f7fc fbf2 	bl	8005b20 <HAL_GetTick>
 800933c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800934e:	887b      	ldrh	r3, [r7, #2]
 8009350:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009356:	2b01      	cmp	r3, #1
 8009358:	d00f      	beq.n	800937a <HAL_SPI_TransmitReceive+0x70>
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009360:	d107      	bne.n	8009372 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d103      	bne.n	8009372 <HAL_SPI_TransmitReceive+0x68>
 800936a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800936e:	2b04      	cmp	r3, #4
 8009370:	d003      	beq.n	800937a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009372:	2302      	movs	r3, #2
 8009374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009378:	e15b      	b.n	8009632 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d005      	beq.n	800938c <HAL_SPI_TransmitReceive+0x82>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <HAL_SPI_TransmitReceive+0x82>
 8009386:	887b      	ldrh	r3, [r7, #2]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009392:	e14e      	b.n	8009632 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b04      	cmp	r3, #4
 800939e:	d003      	beq.n	80093a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2205      	movs	r2, #5
 80093a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	887a      	ldrh	r2, [r7, #2]
 80093b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	887a      	ldrh	r2, [r7, #2]
 80093be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	887a      	ldrh	r2, [r7, #2]
 80093ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	887a      	ldrh	r2, [r7, #2]
 80093d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	d007      	beq.n	80093fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009404:	d178      	bne.n	80094f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <HAL_SPI_TransmitReceive+0x10a>
 800940e:	8b7b      	ldrh	r3, [r7, #26]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d166      	bne.n	80094e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009418:	881a      	ldrh	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009424:	1c9a      	adds	r2, r3, #2
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800942e:	b29b      	uxth	r3, r3
 8009430:	3b01      	subs	r3, #1
 8009432:	b29a      	uxth	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009438:	e053      	b.n	80094e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b02      	cmp	r3, #2
 8009446:	d11b      	bne.n	8009480 <HAL_SPI_TransmitReceive+0x176>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800944c:	b29b      	uxth	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d016      	beq.n	8009480 <HAL_SPI_TransmitReceive+0x176>
 8009452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009454:	2b01      	cmp	r3, #1
 8009456:	d113      	bne.n	8009480 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945c:	881a      	ldrh	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009468:	1c9a      	adds	r2, r3, #2
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009472:	b29b      	uxth	r3, r3
 8009474:	3b01      	subs	r3, #1
 8009476:	b29a      	uxth	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	2b01      	cmp	r3, #1
 800948c:	d119      	bne.n	80094c2 <HAL_SPI_TransmitReceive+0x1b8>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009492:	b29b      	uxth	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d014      	beq.n	80094c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	b292      	uxth	r2, r2
 80094a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	1c9a      	adds	r2, r3, #2
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	3b01      	subs	r3, #1
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094be:	2301      	movs	r3, #1
 80094c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80094c2:	f7fc fb2d 	bl	8005b20 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d807      	bhi.n	80094e2 <HAL_SPI_TransmitReceive+0x1d8>
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d8:	d003      	beq.n	80094e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094e0:	e0a7      	b.n	8009632 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1a6      	bne.n	800943a <HAL_SPI_TransmitReceive+0x130>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1a1      	bne.n	800943a <HAL_SPI_TransmitReceive+0x130>
 80094f6:	e07c      	b.n	80095f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <HAL_SPI_TransmitReceive+0x1fc>
 8009500:	8b7b      	ldrh	r3, [r7, #26]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d16b      	bne.n	80095de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	330c      	adds	r3, #12
 8009510:	7812      	ldrb	r2, [r2, #0]
 8009512:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009522:	b29b      	uxth	r3, r3
 8009524:	3b01      	subs	r3, #1
 8009526:	b29a      	uxth	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800952c:	e057      	b.n	80095de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b02      	cmp	r3, #2
 800953a:	d11c      	bne.n	8009576 <HAL_SPI_TransmitReceive+0x26c>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009540:	b29b      	uxth	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d017      	beq.n	8009576 <HAL_SPI_TransmitReceive+0x26c>
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	2b01      	cmp	r3, #1
 800954a:	d114      	bne.n	8009576 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	7812      	ldrb	r2, [r2, #0]
 8009558:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009568:	b29b      	uxth	r3, r3
 800956a:	3b01      	subs	r3, #1
 800956c:	b29a      	uxth	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009572:	2300      	movs	r3, #0
 8009574:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b01      	cmp	r3, #1
 8009582:	d119      	bne.n	80095b8 <HAL_SPI_TransmitReceive+0x2ae>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009588:	b29b      	uxth	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d014      	beq.n	80095b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68da      	ldr	r2, [r3, #12]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009598:	b2d2      	uxtb	r2, r2
 800959a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	3b01      	subs	r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095b4:	2301      	movs	r3, #1
 80095b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095b8:	f7fc fab2 	bl	8005b20 <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d803      	bhi.n	80095d0 <HAL_SPI_TransmitReceive+0x2c6>
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ce:	d102      	bne.n	80095d6 <HAL_SPI_TransmitReceive+0x2cc>
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d103      	bne.n	80095de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80095dc:	e029      	b.n	8009632 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1a2      	bne.n	800952e <HAL_SPI_TransmitReceive+0x224>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d19d      	bne.n	800952e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 f926 	bl	8009848 <SPI_EndRxTxTransaction>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d006      	beq.n	8009610 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2220      	movs	r2, #32
 800960c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800960e:	e010      	b.n	8009632 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10b      	bne.n	8009630 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009618:	2300      	movs	r3, #0
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	e000      	b.n	8009632 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009630:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009646:	4618      	mov	r0, r3
 8009648:	3730      	adds	r7, #48	; 0x30
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800965c:	b2db      	uxtb	r3, r3
}
 800965e:	4618      	mov	r0, r3
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	603b      	str	r3, [r7, #0]
 8009678:	4613      	mov	r3, r2
 800967a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800967c:	f7fc fa50 	bl	8005b20 <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	4413      	add	r3, r2
 800968a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800968c:	f7fc fa48 	bl	8005b20 <HAL_GetTick>
 8009690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009692:	4b39      	ldr	r3, [pc, #228]	; (8009778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	015b      	lsls	r3, r3, #5
 8009698:	0d1b      	lsrs	r3, r3, #20
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	fb02 f303 	mul.w	r3, r2, r3
 80096a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096a2:	e054      	b.n	800974e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096aa:	d050      	beq.n	800974e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096ac:	f7fc fa38 	bl	8005b20 <HAL_GetTick>
 80096b0:	4602      	mov	r2, r0
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	69fa      	ldr	r2, [r7, #28]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d902      	bls.n	80096c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d13d      	bne.n	800973e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096da:	d111      	bne.n	8009700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e4:	d004      	beq.n	80096f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096ee:	d107      	bne.n	8009700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009708:	d10f      	bne.n	800972a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e017      	b.n	800976e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	3b01      	subs	r3, #1
 800974c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	4013      	ands	r3, r2
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	429a      	cmp	r2, r3
 800975c:	bf0c      	ite	eq
 800975e:	2301      	moveq	r3, #1
 8009760:	2300      	movne	r3, #0
 8009762:	b2db      	uxtb	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	429a      	cmp	r2, r3
 800976a:	d19b      	bne.n	80096a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3720      	adds	r7, #32
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000024 	.word	0x20000024

0800977c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af02      	add	r7, sp, #8
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009790:	d111      	bne.n	80097b6 <SPI_EndRxTransaction+0x3a>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800979a:	d004      	beq.n	80097a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097a4:	d107      	bne.n	80097b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097be:	d12a      	bne.n	8009816 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c8:	d012      	beq.n	80097f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2200      	movs	r2, #0
 80097d2:	2180      	movs	r1, #128	; 0x80
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f7ff ff49 	bl	800966c <SPI_WaitFlagStateUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d02d      	beq.n	800983c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e4:	f043 0220 	orr.w	r2, r3, #32
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e026      	b.n	800983e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2200      	movs	r2, #0
 80097f8:	2101      	movs	r1, #1
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7ff ff36 	bl	800966c <SPI_WaitFlagStateUntilTimeout>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d01a      	beq.n	800983c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980a:	f043 0220 	orr.w	r2, r3, #32
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e013      	b.n	800983e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2200      	movs	r2, #0
 800981e:	2101      	movs	r1, #1
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f7ff ff23 	bl	800966c <SPI_WaitFlagStateUntilTimeout>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d007      	beq.n	800983c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009830:	f043 0220 	orr.w	r2, r3, #32
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e000      	b.n	800983e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af02      	add	r7, sp, #8
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009854:	4b1b      	ldr	r3, [pc, #108]	; (80098c4 <SPI_EndRxTxTransaction+0x7c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a1b      	ldr	r2, [pc, #108]	; (80098c8 <SPI_EndRxTxTransaction+0x80>)
 800985a:	fba2 2303 	umull	r2, r3, r2, r3
 800985e:	0d5b      	lsrs	r3, r3, #21
 8009860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009864:	fb02 f303 	mul.w	r3, r2, r3
 8009868:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009872:	d112      	bne.n	800989a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2200      	movs	r2, #0
 800987c:	2180      	movs	r1, #128	; 0x80
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff fef4 	bl	800966c <SPI_WaitFlagStateUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d016      	beq.n	80098b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988e:	f043 0220 	orr.w	r2, r3, #32
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e00f      	b.n	80098ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00a      	beq.n	80098b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b0:	2b80      	cmp	r3, #128	; 0x80
 80098b2:	d0f2      	beq.n	800989a <SPI_EndRxTxTransaction+0x52>
 80098b4:	e000      	b.n	80098b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80098b6:	bf00      	nop
  }

  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000024 	.word	0x20000024
 80098c8:	165e9f81 	.word	0x165e9f81

080098cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e041      	b.n	8009962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7fa fee0 	bl	80046b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3304      	adds	r3, #4
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f000 fa96 	bl	8009e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800997a:	b2db      	uxtb	r3, r3
 800997c:	2b01      	cmp	r3, #1
 800997e:	d001      	beq.n	8009984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e04e      	b.n	8009a22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0201 	orr.w	r2, r2, #1
 800999a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a23      	ldr	r2, [pc, #140]	; (8009a30 <HAL_TIM_Base_Start_IT+0xc4>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d022      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ae:	d01d      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a1f      	ldr	r2, [pc, #124]	; (8009a34 <HAL_TIM_Base_Start_IT+0xc8>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d018      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a1e      	ldr	r2, [pc, #120]	; (8009a38 <HAL_TIM_Base_Start_IT+0xcc>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d013      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a1c      	ldr	r2, [pc, #112]	; (8009a3c <HAL_TIM_Base_Start_IT+0xd0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00e      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a1b      	ldr	r2, [pc, #108]	; (8009a40 <HAL_TIM_Base_Start_IT+0xd4>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d009      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a19      	ldr	r2, [pc, #100]	; (8009a44 <HAL_TIM_Base_Start_IT+0xd8>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d004      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <HAL_TIM_Base_Start_IT+0xdc>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d111      	bne.n	8009a10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b06      	cmp	r3, #6
 80099fc:	d010      	beq.n	8009a20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f042 0201 	orr.w	r2, r2, #1
 8009a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a0e:	e007      	b.n	8009a20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f042 0201 	orr.w	r2, r2, #1
 8009a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	40010000 	.word	0x40010000
 8009a34:	40000400 	.word	0x40000400
 8009a38:	40000800 	.word	0x40000800
 8009a3c:	40000c00 	.word	0x40000c00
 8009a40:	40010400 	.word	0x40010400
 8009a44:	40014000 	.word	0x40014000
 8009a48:	40001800 	.word	0x40001800

08009a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	f003 0302 	and.w	r3, r3, #2
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d122      	bne.n	8009aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d11b      	bne.n	8009aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f06f 0202 	mvn.w	r2, #2
 8009a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f003 0303 	and.w	r3, r3, #3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f9b5 	bl	8009dfe <HAL_TIM_IC_CaptureCallback>
 8009a94:	e005      	b.n	8009aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f9a7 	bl	8009dea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f9b8 	bl	8009e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d122      	bne.n	8009afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d11b      	bne.n	8009afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f06f 0204 	mvn.w	r2, #4
 8009acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f98b 	bl	8009dfe <HAL_TIM_IC_CaptureCallback>
 8009ae8:	e005      	b.n	8009af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f97d 	bl	8009dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f98e 	bl	8009e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	2b08      	cmp	r3, #8
 8009b08:	d122      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f003 0308 	and.w	r3, r3, #8
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d11b      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f06f 0208 	mvn.w	r2, #8
 8009b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2204      	movs	r2, #4
 8009b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f961 	bl	8009dfe <HAL_TIM_IC_CaptureCallback>
 8009b3c:	e005      	b.n	8009b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f953 	bl	8009dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f964 	bl	8009e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f003 0310 	and.w	r3, r3, #16
 8009b5a:	2b10      	cmp	r3, #16
 8009b5c:	d122      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f003 0310 	and.w	r3, r3, #16
 8009b68:	2b10      	cmp	r3, #16
 8009b6a:	d11b      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f06f 0210 	mvn.w	r2, #16
 8009b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2208      	movs	r2, #8
 8009b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f937 	bl	8009dfe <HAL_TIM_IC_CaptureCallback>
 8009b90:	e005      	b.n	8009b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f929 	bl	8009dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f93a 	bl	8009e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d10e      	bne.n	8009bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d107      	bne.n	8009bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f06f 0201 	mvn.w	r2, #1
 8009bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7fa fa9e 	bl	800410c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bda:	2b80      	cmp	r3, #128	; 0x80
 8009bdc:	d10e      	bne.n	8009bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be8:	2b80      	cmp	r3, #128	; 0x80
 8009bea:	d107      	bne.n	8009bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fae0 	bl	800a1bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c06:	2b40      	cmp	r3, #64	; 0x40
 8009c08:	d10e      	bne.n	8009c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c14:	2b40      	cmp	r3, #64	; 0x40
 8009c16:	d107      	bne.n	8009c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f8ff 	bl	8009e26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d10e      	bne.n	8009c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f003 0320 	and.w	r3, r3, #32
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d107      	bne.n	8009c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f06f 0220 	mvn.w	r2, #32
 8009c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 faaa 	bl	800a1a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <HAL_TIM_ConfigClockSource+0x1c>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e0b4      	b.n	8009de2 <HAL_TIM_ConfigClockSource+0x186>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb0:	d03e      	beq.n	8009d30 <HAL_TIM_ConfigClockSource+0xd4>
 8009cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb6:	f200 8087 	bhi.w	8009dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cbe:	f000 8086 	beq.w	8009dce <HAL_TIM_ConfigClockSource+0x172>
 8009cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc6:	d87f      	bhi.n	8009dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cc8:	2b70      	cmp	r3, #112	; 0x70
 8009cca:	d01a      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0xa6>
 8009ccc:	2b70      	cmp	r3, #112	; 0x70
 8009cce:	d87b      	bhi.n	8009dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd0:	2b60      	cmp	r3, #96	; 0x60
 8009cd2:	d050      	beq.n	8009d76 <HAL_TIM_ConfigClockSource+0x11a>
 8009cd4:	2b60      	cmp	r3, #96	; 0x60
 8009cd6:	d877      	bhi.n	8009dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd8:	2b50      	cmp	r3, #80	; 0x50
 8009cda:	d03c      	beq.n	8009d56 <HAL_TIM_ConfigClockSource+0xfa>
 8009cdc:	2b50      	cmp	r3, #80	; 0x50
 8009cde:	d873      	bhi.n	8009dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce0:	2b40      	cmp	r3, #64	; 0x40
 8009ce2:	d058      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0x13a>
 8009ce4:	2b40      	cmp	r3, #64	; 0x40
 8009ce6:	d86f      	bhi.n	8009dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce8:	2b30      	cmp	r3, #48	; 0x30
 8009cea:	d064      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x15a>
 8009cec:	2b30      	cmp	r3, #48	; 0x30
 8009cee:	d86b      	bhi.n	8009dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cf0:	2b20      	cmp	r3, #32
 8009cf2:	d060      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x15a>
 8009cf4:	2b20      	cmp	r3, #32
 8009cf6:	d867      	bhi.n	8009dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d05c      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x15a>
 8009cfc:	2b10      	cmp	r3, #16
 8009cfe:	d05a      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x15a>
 8009d00:	e062      	b.n	8009dc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6818      	ldr	r0, [r3, #0]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	6899      	ldr	r1, [r3, #8]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	f000 f9ad 	bl	800a070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	609a      	str	r2, [r3, #8]
      break;
 8009d2e:	e04f      	b.n	8009dd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	6899      	ldr	r1, [r3, #8]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f000 f996 	bl	800a070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689a      	ldr	r2, [r3, #8]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d52:	609a      	str	r2, [r3, #8]
      break;
 8009d54:	e03c      	b.n	8009dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	6859      	ldr	r1, [r3, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	461a      	mov	r2, r3
 8009d64:	f000 f90a 	bl	8009f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2150      	movs	r1, #80	; 0x50
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 f963 	bl	800a03a <TIM_ITRx_SetConfig>
      break;
 8009d74:	e02c      	b.n	8009dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6818      	ldr	r0, [r3, #0]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	6859      	ldr	r1, [r3, #4]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	461a      	mov	r2, r3
 8009d84:	f000 f929 	bl	8009fda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2160      	movs	r1, #96	; 0x60
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f953 	bl	800a03a <TIM_ITRx_SetConfig>
      break;
 8009d94:	e01c      	b.n	8009dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6818      	ldr	r0, [r3, #0]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6859      	ldr	r1, [r3, #4]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f000 f8ea 	bl	8009f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2140      	movs	r1, #64	; 0x40
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 f943 	bl	800a03a <TIM_ITRx_SetConfig>
      break;
 8009db4:	e00c      	b.n	8009dd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	f000 f93a 	bl	800a03a <TIM_ITRx_SetConfig>
      break;
 8009dc6:	e003      	b.n	8009dd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]
      break;
 8009dcc:	e000      	b.n	8009dd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009df2:	bf00      	nop
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b083      	sub	sp, #12
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e1a:	bf00      	nop
 8009e1c:	370c      	adds	r7, #12
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e2e:	bf00      	nop
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
	...

08009e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a40      	ldr	r2, [pc, #256]	; (8009f50 <TIM_Base_SetConfig+0x114>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d013      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e5a:	d00f      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a3d      	ldr	r2, [pc, #244]	; (8009f54 <TIM_Base_SetConfig+0x118>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00b      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a3c      	ldr	r2, [pc, #240]	; (8009f58 <TIM_Base_SetConfig+0x11c>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d007      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a3b      	ldr	r2, [pc, #236]	; (8009f5c <TIM_Base_SetConfig+0x120>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d003      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a3a      	ldr	r2, [pc, #232]	; (8009f60 <TIM_Base_SetConfig+0x124>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d108      	bne.n	8009e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a2f      	ldr	r2, [pc, #188]	; (8009f50 <TIM_Base_SetConfig+0x114>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d02b      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e9c:	d027      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a2c      	ldr	r2, [pc, #176]	; (8009f54 <TIM_Base_SetConfig+0x118>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d023      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a2b      	ldr	r2, [pc, #172]	; (8009f58 <TIM_Base_SetConfig+0x11c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d01f      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <TIM_Base_SetConfig+0x120>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d01b      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a29      	ldr	r2, [pc, #164]	; (8009f60 <TIM_Base_SetConfig+0x124>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d017      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a28      	ldr	r2, [pc, #160]	; (8009f64 <TIM_Base_SetConfig+0x128>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d013      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a27      	ldr	r2, [pc, #156]	; (8009f68 <TIM_Base_SetConfig+0x12c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d00f      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a26      	ldr	r2, [pc, #152]	; (8009f6c <TIM_Base_SetConfig+0x130>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d00b      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a25      	ldr	r2, [pc, #148]	; (8009f70 <TIM_Base_SetConfig+0x134>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d007      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a24      	ldr	r2, [pc, #144]	; (8009f74 <TIM_Base_SetConfig+0x138>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d003      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a23      	ldr	r2, [pc, #140]	; (8009f78 <TIM_Base_SetConfig+0x13c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d108      	bne.n	8009f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a0a      	ldr	r2, [pc, #40]	; (8009f50 <TIM_Base_SetConfig+0x114>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d003      	beq.n	8009f34 <TIM_Base_SetConfig+0xf8>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a0c      	ldr	r2, [pc, #48]	; (8009f60 <TIM_Base_SetConfig+0x124>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d103      	bne.n	8009f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	691a      	ldr	r2, [r3, #16]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	615a      	str	r2, [r3, #20]
}
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	40010000 	.word	0x40010000
 8009f54:	40000400 	.word	0x40000400
 8009f58:	40000800 	.word	0x40000800
 8009f5c:	40000c00 	.word	0x40000c00
 8009f60:	40010400 	.word	0x40010400
 8009f64:	40014000 	.word	0x40014000
 8009f68:	40014400 	.word	0x40014400
 8009f6c:	40014800 	.word	0x40014800
 8009f70:	40001800 	.word	0x40001800
 8009f74:	40001c00 	.word	0x40001c00
 8009f78:	40002000 	.word	0x40002000

08009f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	f023 0201 	bic.w	r2, r3, #1
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	699b      	ldr	r3, [r3, #24]
 8009f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f023 030a 	bic.w	r3, r3, #10
 8009fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	621a      	str	r2, [r3, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	371c      	adds	r7, #28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b087      	sub	sp, #28
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	f023 0210 	bic.w	r2, r3, #16
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	031b      	lsls	r3, r3, #12
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	011b      	lsls	r3, r3, #4
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	4313      	orrs	r3, r2
 800a020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	621a      	str	r2, [r3, #32]
}
 800a02e:	bf00      	nop
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b085      	sub	sp, #20
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	4313      	orrs	r3, r2
 800a058:	f043 0307 	orr.w	r3, r3, #7
 800a05c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	609a      	str	r2, [r3, #8]
}
 800a064:	bf00      	nop
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a08a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	021a      	lsls	r2, r3, #8
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	431a      	orrs	r2, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	4313      	orrs	r3, r2
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	609a      	str	r2, [r3, #8]
}
 800a0a4:	bf00      	nop
 800a0a6:	371c      	adds	r7, #28
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d101      	bne.n	800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	e05a      	b.n	800a17e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a21      	ldr	r2, [pc, #132]	; (800a18c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d022      	beq.n	800a152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a114:	d01d      	beq.n	800a152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a1d      	ldr	r2, [pc, #116]	; (800a190 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d018      	beq.n	800a152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a1b      	ldr	r2, [pc, #108]	; (800a194 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d013      	beq.n	800a152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a1a      	ldr	r2, [pc, #104]	; (800a198 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d00e      	beq.n	800a152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a18      	ldr	r2, [pc, #96]	; (800a19c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d009      	beq.n	800a152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a17      	ldr	r2, [pc, #92]	; (800a1a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d004      	beq.n	800a152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a15      	ldr	r2, [pc, #84]	; (800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d10c      	bne.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	4313      	orrs	r3, r2
 800a162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	40010000 	.word	0x40010000
 800a190:	40000400 	.word	0x40000400
 800a194:	40000800 	.word	0x40000800
 800a198:	40000c00 	.word	0x40000c00
 800a19c:	40010400 	.word	0x40010400
 800a1a0:	40014000 	.word	0x40014000
 800a1a4:	40001800 	.word	0x40001800

0800a1a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e03f      	b.n	800a262 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d106      	bne.n	800a1fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7fa faf0 	bl	80047dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2224      	movs	r2, #36	; 0x24
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f993 	bl	800a540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	691a      	ldr	r2, [r3, #16]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	695a      	ldr	r2, [r3, #20]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2220      	movs	r2, #32
 800a25c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b08a      	sub	sp, #40	; 0x28
 800a26e:	af02      	add	r7, sp, #8
 800a270:	60f8      	str	r0, [r7, #12]
 800a272:	60b9      	str	r1, [r7, #8]
 800a274:	603b      	str	r3, [r7, #0]
 800a276:	4613      	mov	r3, r2
 800a278:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b20      	cmp	r3, #32
 800a288:	d17c      	bne.n	800a384 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <HAL_UART_Transmit+0x2c>
 800a290:	88fb      	ldrh	r3, [r7, #6]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e075      	b.n	800a386 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_UART_Transmit+0x3e>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e06e      	b.n	800a386 <HAL_UART_Transmit+0x11c>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2221      	movs	r2, #33	; 0x21
 800a2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2be:	f7fb fc2f 	bl	8005b20 <HAL_GetTick>
 800a2c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	88fa      	ldrh	r2, [r7, #6]
 800a2ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d8:	d108      	bne.n	800a2ec <HAL_UART_Transmit+0x82>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d104      	bne.n	800a2ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	61bb      	str	r3, [r7, #24]
 800a2ea:	e003      	b.n	800a2f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a2fc:	e02a      	b.n	800a354 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2200      	movs	r2, #0
 800a306:	2180      	movs	r1, #128	; 0x80
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f870 	bl	800a3ee <UART_WaitOnFlagUntilTimeout>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e036      	b.n	800a386 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10b      	bne.n	800a336 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a32c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	3302      	adds	r3, #2
 800a332:	61bb      	str	r3, [r7, #24]
 800a334:	e007      	b.n	800a346 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	781a      	ldrb	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	3301      	adds	r3, #1
 800a344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	3b01      	subs	r3, #1
 800a34e:	b29a      	uxth	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1cf      	bne.n	800a2fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2200      	movs	r2, #0
 800a366:	2140      	movs	r1, #64	; 0x40
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 f840 	bl	800a3ee <UART_WaitOnFlagUntilTimeout>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e006      	b.n	800a386 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2220      	movs	r2, #32
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	e000      	b.n	800a386 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a384:	2302      	movs	r3, #2
  }
}
 800a386:	4618      	mov	r0, r3
 800a388:	3720      	adds	r7, #32
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b084      	sub	sp, #16
 800a392:	af00      	add	r7, sp, #0
 800a394:	60f8      	str	r0, [r7, #12]
 800a396:	60b9      	str	r1, [r7, #8]
 800a398:	4613      	mov	r3, r2
 800a39a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b20      	cmp	r3, #32
 800a3a6:	d11d      	bne.n	800a3e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <HAL_UART_Receive_IT+0x26>
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e016      	b.n	800a3e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d101      	bne.n	800a3c6 <HAL_UART_Receive_IT+0x38>
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e00f      	b.n	800a3e6 <HAL_UART_Receive_IT+0x58>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	68b9      	ldr	r1, [r7, #8]
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f000 f875 	bl	800a4ca <UART_Start_Receive_IT>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	e000      	b.n	800a3e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a3e4:	2302      	movs	r3, #2
  }
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b090      	sub	sp, #64	; 0x40
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	603b      	str	r3, [r7, #0]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3fe:	e050      	b.n	800a4a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a406:	d04c      	beq.n	800a4a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d007      	beq.n	800a41e <UART_WaitOnFlagUntilTimeout+0x30>
 800a40e:	f7fb fb87 	bl	8005b20 <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d241      	bcs.n	800a4a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	330c      	adds	r3, #12
 800a424:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	e853 3f00 	ldrex	r3, [r3]
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a434:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	330c      	adds	r3, #12
 800a43c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a43e:	637a      	str	r2, [r7, #52]	; 0x34
 800a440:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a446:	e841 2300 	strex	r3, r2, [r1]
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1e5      	bne.n	800a41e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3314      	adds	r3, #20
 800a458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	e853 3f00 	ldrex	r3, [r3]
 800a460:	613b      	str	r3, [r7, #16]
   return(result);
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	f023 0301 	bic.w	r3, r3, #1
 800a468:	63bb      	str	r3, [r7, #56]	; 0x38
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3314      	adds	r3, #20
 800a470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a472:	623a      	str	r2, [r7, #32]
 800a474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a476:	69f9      	ldr	r1, [r7, #28]
 800a478:	6a3a      	ldr	r2, [r7, #32]
 800a47a:	e841 2300 	strex	r3, r2, [r1]
 800a47e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1e5      	bne.n	800a452 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2220      	movs	r2, #32
 800a48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2220      	movs	r2, #32
 800a492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	e00f      	b.n	800a4c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	bf0c      	ite	eq
 800a4b2:	2301      	moveq	r3, #1
 800a4b4:	2300      	movne	r3, #0
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	79fb      	ldrb	r3, [r7, #7]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d09f      	beq.n	800a400 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3740      	adds	r7, #64	; 0x40
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	88fa      	ldrh	r2, [r7, #6]
 800a4e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	88fa      	ldrh	r2, [r7, #6]
 800a4e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2222      	movs	r2, #34	; 0x22
 800a4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a50e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	695a      	ldr	r2, [r3, #20]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f042 0201 	orr.w	r2, r2, #1
 800a51e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68da      	ldr	r2, [r3, #12]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f042 0220 	orr.w	r2, r2, #32
 800a52e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
	...

0800a540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a544:	b09f      	sub	sp, #124	; 0x7c
 800a546:	af00      	add	r7, sp, #0
 800a548:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a556:	68d9      	ldr	r1, [r3, #12]
 800a558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	ea40 0301 	orr.w	r3, r0, r1
 800a560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a564:	689a      	ldr	r2, [r3, #8]
 800a566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	431a      	orrs	r2, r3
 800a572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	4313      	orrs	r3, r2
 800a578:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a57a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a584:	f021 010c 	bic.w	r1, r1, #12
 800a588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a58e:	430b      	orrs	r3, r1
 800a590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a59c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a59e:	6999      	ldr	r1, [r3, #24]
 800a5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	ea40 0301 	orr.w	r3, r0, r1
 800a5a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	4bc5      	ldr	r3, [pc, #788]	; (800a8c4 <UART_SetConfig+0x384>)
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d004      	beq.n	800a5be <UART_SetConfig+0x7e>
 800a5b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	4bc3      	ldr	r3, [pc, #780]	; (800a8c8 <UART_SetConfig+0x388>)
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d103      	bne.n	800a5c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5be:	f7fe f923 	bl	8008808 <HAL_RCC_GetPCLK2Freq>
 800a5c2:	6778      	str	r0, [r7, #116]	; 0x74
 800a5c4:	e002      	b.n	800a5cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5c6:	f7fe f90b 	bl	80087e0 <HAL_RCC_GetPCLK1Freq>
 800a5ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5d4:	f040 80b6 	bne.w	800a744 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5da:	461c      	mov	r4, r3
 800a5dc:	f04f 0500 	mov.w	r5, #0
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	1891      	adds	r1, r2, r2
 800a5e6:	6439      	str	r1, [r7, #64]	; 0x40
 800a5e8:	415b      	adcs	r3, r3
 800a5ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a5ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5f0:	1912      	adds	r2, r2, r4
 800a5f2:	eb45 0303 	adc.w	r3, r5, r3
 800a5f6:	f04f 0000 	mov.w	r0, #0
 800a5fa:	f04f 0100 	mov.w	r1, #0
 800a5fe:	00d9      	lsls	r1, r3, #3
 800a600:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a604:	00d0      	lsls	r0, r2, #3
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	1911      	adds	r1, r2, r4
 800a60c:	6639      	str	r1, [r7, #96]	; 0x60
 800a60e:	416b      	adcs	r3, r5
 800a610:	667b      	str	r3, [r7, #100]	; 0x64
 800a612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	461a      	mov	r2, r3
 800a618:	f04f 0300 	mov.w	r3, #0
 800a61c:	1891      	adds	r1, r2, r2
 800a61e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a620:	415b      	adcs	r3, r3
 800a622:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a628:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a62c:	f7f6 faa4 	bl	8000b78 <__aeabi_uldivmod>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4ba5      	ldr	r3, [pc, #660]	; (800a8cc <UART_SetConfig+0x38c>)
 800a636:	fba3 2302 	umull	r2, r3, r3, r2
 800a63a:	095b      	lsrs	r3, r3, #5
 800a63c:	011e      	lsls	r6, r3, #4
 800a63e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a640:	461c      	mov	r4, r3
 800a642:	f04f 0500 	mov.w	r5, #0
 800a646:	4622      	mov	r2, r4
 800a648:	462b      	mov	r3, r5
 800a64a:	1891      	adds	r1, r2, r2
 800a64c:	6339      	str	r1, [r7, #48]	; 0x30
 800a64e:	415b      	adcs	r3, r3
 800a650:	637b      	str	r3, [r7, #52]	; 0x34
 800a652:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a656:	1912      	adds	r2, r2, r4
 800a658:	eb45 0303 	adc.w	r3, r5, r3
 800a65c:	f04f 0000 	mov.w	r0, #0
 800a660:	f04f 0100 	mov.w	r1, #0
 800a664:	00d9      	lsls	r1, r3, #3
 800a666:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a66a:	00d0      	lsls	r0, r2, #3
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	1911      	adds	r1, r2, r4
 800a672:	65b9      	str	r1, [r7, #88]	; 0x58
 800a674:	416b      	adcs	r3, r5
 800a676:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	461a      	mov	r2, r3
 800a67e:	f04f 0300 	mov.w	r3, #0
 800a682:	1891      	adds	r1, r2, r2
 800a684:	62b9      	str	r1, [r7, #40]	; 0x28
 800a686:	415b      	adcs	r3, r3
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a68a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a68e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a692:	f7f6 fa71 	bl	8000b78 <__aeabi_uldivmod>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4b8c      	ldr	r3, [pc, #560]	; (800a8cc <UART_SetConfig+0x38c>)
 800a69c:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a0:	095b      	lsrs	r3, r3, #5
 800a6a2:	2164      	movs	r1, #100	; 0x64
 800a6a4:	fb01 f303 	mul.w	r3, r1, r3
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	3332      	adds	r3, #50	; 0x32
 800a6ae:	4a87      	ldr	r2, [pc, #540]	; (800a8cc <UART_SetConfig+0x38c>)
 800a6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6bc:	441e      	add	r6, r3
 800a6be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f04f 0100 	mov.w	r1, #0
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	1894      	adds	r4, r2, r2
 800a6cc:	623c      	str	r4, [r7, #32]
 800a6ce:	415b      	adcs	r3, r3
 800a6d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6d6:	1812      	adds	r2, r2, r0
 800a6d8:	eb41 0303 	adc.w	r3, r1, r3
 800a6dc:	f04f 0400 	mov.w	r4, #0
 800a6e0:	f04f 0500 	mov.w	r5, #0
 800a6e4:	00dd      	lsls	r5, r3, #3
 800a6e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6ea:	00d4      	lsls	r4, r2, #3
 800a6ec:	4622      	mov	r2, r4
 800a6ee:	462b      	mov	r3, r5
 800a6f0:	1814      	adds	r4, r2, r0
 800a6f2:	653c      	str	r4, [r7, #80]	; 0x50
 800a6f4:	414b      	adcs	r3, r1
 800a6f6:	657b      	str	r3, [r7, #84]	; 0x54
 800a6f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	f04f 0300 	mov.w	r3, #0
 800a702:	1891      	adds	r1, r2, r2
 800a704:	61b9      	str	r1, [r7, #24]
 800a706:	415b      	adcs	r3, r3
 800a708:	61fb      	str	r3, [r7, #28]
 800a70a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a70e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a712:	f7f6 fa31 	bl	8000b78 <__aeabi_uldivmod>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4b6c      	ldr	r3, [pc, #432]	; (800a8cc <UART_SetConfig+0x38c>)
 800a71c:	fba3 1302 	umull	r1, r3, r3, r2
 800a720:	095b      	lsrs	r3, r3, #5
 800a722:	2164      	movs	r1, #100	; 0x64
 800a724:	fb01 f303 	mul.w	r3, r1, r3
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	3332      	adds	r3, #50	; 0x32
 800a72e:	4a67      	ldr	r2, [pc, #412]	; (800a8cc <UART_SetConfig+0x38c>)
 800a730:	fba2 2303 	umull	r2, r3, r2, r3
 800a734:	095b      	lsrs	r3, r3, #5
 800a736:	f003 0207 	and.w	r2, r3, #7
 800a73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4432      	add	r2, r6
 800a740:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a742:	e0b9      	b.n	800a8b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a746:	461c      	mov	r4, r3
 800a748:	f04f 0500 	mov.w	r5, #0
 800a74c:	4622      	mov	r2, r4
 800a74e:	462b      	mov	r3, r5
 800a750:	1891      	adds	r1, r2, r2
 800a752:	6139      	str	r1, [r7, #16]
 800a754:	415b      	adcs	r3, r3
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a75c:	1912      	adds	r2, r2, r4
 800a75e:	eb45 0303 	adc.w	r3, r5, r3
 800a762:	f04f 0000 	mov.w	r0, #0
 800a766:	f04f 0100 	mov.w	r1, #0
 800a76a:	00d9      	lsls	r1, r3, #3
 800a76c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a770:	00d0      	lsls	r0, r2, #3
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	eb12 0804 	adds.w	r8, r2, r4
 800a77a:	eb43 0905 	adc.w	r9, r3, r5
 800a77e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	4618      	mov	r0, r3
 800a784:	f04f 0100 	mov.w	r1, #0
 800a788:	f04f 0200 	mov.w	r2, #0
 800a78c:	f04f 0300 	mov.w	r3, #0
 800a790:	008b      	lsls	r3, r1, #2
 800a792:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a796:	0082      	lsls	r2, r0, #2
 800a798:	4640      	mov	r0, r8
 800a79a:	4649      	mov	r1, r9
 800a79c:	f7f6 f9ec 	bl	8000b78 <__aeabi_uldivmod>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4b49      	ldr	r3, [pc, #292]	; (800a8cc <UART_SetConfig+0x38c>)
 800a7a6:	fba3 2302 	umull	r2, r3, r3, r2
 800a7aa:	095b      	lsrs	r3, r3, #5
 800a7ac:	011e      	lsls	r6, r3, #4
 800a7ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f04f 0100 	mov.w	r1, #0
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	1894      	adds	r4, r2, r2
 800a7bc:	60bc      	str	r4, [r7, #8]
 800a7be:	415b      	adcs	r3, r3
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7c6:	1812      	adds	r2, r2, r0
 800a7c8:	eb41 0303 	adc.w	r3, r1, r3
 800a7cc:	f04f 0400 	mov.w	r4, #0
 800a7d0:	f04f 0500 	mov.w	r5, #0
 800a7d4:	00dd      	lsls	r5, r3, #3
 800a7d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a7da:	00d4      	lsls	r4, r2, #3
 800a7dc:	4622      	mov	r2, r4
 800a7de:	462b      	mov	r3, r5
 800a7e0:	1814      	adds	r4, r2, r0
 800a7e2:	64bc      	str	r4, [r7, #72]	; 0x48
 800a7e4:	414b      	adcs	r3, r1
 800a7e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f04f 0100 	mov.w	r1, #0
 800a7f2:	f04f 0200 	mov.w	r2, #0
 800a7f6:	f04f 0300 	mov.w	r3, #0
 800a7fa:	008b      	lsls	r3, r1, #2
 800a7fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a800:	0082      	lsls	r2, r0, #2
 800a802:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a806:	f7f6 f9b7 	bl	8000b78 <__aeabi_uldivmod>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4b2f      	ldr	r3, [pc, #188]	; (800a8cc <UART_SetConfig+0x38c>)
 800a810:	fba3 1302 	umull	r1, r3, r3, r2
 800a814:	095b      	lsrs	r3, r3, #5
 800a816:	2164      	movs	r1, #100	; 0x64
 800a818:	fb01 f303 	mul.w	r3, r1, r3
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	3332      	adds	r3, #50	; 0x32
 800a822:	4a2a      	ldr	r2, [pc, #168]	; (800a8cc <UART_SetConfig+0x38c>)
 800a824:	fba2 2303 	umull	r2, r3, r2, r3
 800a828:	095b      	lsrs	r3, r3, #5
 800a82a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a82e:	441e      	add	r6, r3
 800a830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a832:	4618      	mov	r0, r3
 800a834:	f04f 0100 	mov.w	r1, #0
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	1894      	adds	r4, r2, r2
 800a83e:	603c      	str	r4, [r7, #0]
 800a840:	415b      	adcs	r3, r3
 800a842:	607b      	str	r3, [r7, #4]
 800a844:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a848:	1812      	adds	r2, r2, r0
 800a84a:	eb41 0303 	adc.w	r3, r1, r3
 800a84e:	f04f 0400 	mov.w	r4, #0
 800a852:	f04f 0500 	mov.w	r5, #0
 800a856:	00dd      	lsls	r5, r3, #3
 800a858:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a85c:	00d4      	lsls	r4, r2, #3
 800a85e:	4622      	mov	r2, r4
 800a860:	462b      	mov	r3, r5
 800a862:	eb12 0a00 	adds.w	sl, r2, r0
 800a866:	eb43 0b01 	adc.w	fp, r3, r1
 800a86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	4618      	mov	r0, r3
 800a870:	f04f 0100 	mov.w	r1, #0
 800a874:	f04f 0200 	mov.w	r2, #0
 800a878:	f04f 0300 	mov.w	r3, #0
 800a87c:	008b      	lsls	r3, r1, #2
 800a87e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a882:	0082      	lsls	r2, r0, #2
 800a884:	4650      	mov	r0, sl
 800a886:	4659      	mov	r1, fp
 800a888:	f7f6 f976 	bl	8000b78 <__aeabi_uldivmod>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	4b0e      	ldr	r3, [pc, #56]	; (800a8cc <UART_SetConfig+0x38c>)
 800a892:	fba3 1302 	umull	r1, r3, r3, r2
 800a896:	095b      	lsrs	r3, r3, #5
 800a898:	2164      	movs	r1, #100	; 0x64
 800a89a:	fb01 f303 	mul.w	r3, r1, r3
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	011b      	lsls	r3, r3, #4
 800a8a2:	3332      	adds	r3, #50	; 0x32
 800a8a4:	4a09      	ldr	r2, [pc, #36]	; (800a8cc <UART_SetConfig+0x38c>)
 800a8a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8aa:	095b      	lsrs	r3, r3, #5
 800a8ac:	f003 020f 	and.w	r2, r3, #15
 800a8b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4432      	add	r2, r6
 800a8b6:	609a      	str	r2, [r3, #8]
}
 800a8b8:	bf00      	nop
 800a8ba:	377c      	adds	r7, #124	; 0x7c
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c2:	bf00      	nop
 800a8c4:	40011000 	.word	0x40011000
 800a8c8:	40011400 	.word	0x40011400
 800a8cc:	51eb851f 	.word	0x51eb851f

0800a8d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d029      	beq.n	800a93e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a8f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8fa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a904:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a90a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a910:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a916:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a91c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a922:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a928:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a92e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	4313      	orrs	r3, r2
 800a934:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	e034      	b.n	800a9a8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a94a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a954:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a95a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	4313      	orrs	r3, r2
 800a960:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a96e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a972:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a97c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a982:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a988:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a98e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a994:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	4313      	orrs	r3, r2
 800a99a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b087      	sub	sp, #28
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	60f8      	str	r0, [r7, #12]
 800a9be:	60b9      	str	r1, [r7, #8]
 800a9c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d02e      	beq.n	800aa2e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9dc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a9ec:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a9f6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800aa00:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aa0a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aa14:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	609a      	str	r2, [r3, #8]
 800aa2c:	e03b      	b.n	800aaa6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa3e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aa50:	4313      	orrs	r3, r2
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa64:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800aa74:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800aa7e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800aa88:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800aa92:	4313      	orrs	r3, r2
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	371c      	adds	r7, #28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aad0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800aada:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aae2:	4313      	orrs	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800aaec:	f7fb f818 	bl	8005b20 <HAL_GetTick>
 800aaf0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800aaf2:	e010      	b.n	800ab16 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aafa:	d00c      	beq.n	800ab16 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d007      	beq.n	800ab12 <FMC_SDRAM_SendCommand+0x5e>
 800ab02:	f7fb f80d 	bl	8005b20 <HAL_GetTick>
 800ab06:	4602      	mov	r2, r0
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d201      	bcs.n	800ab16 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800ab12:	2303      	movs	r3, #3
 800ab14:	e006      	b.n	800ab24 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	f003 0320 	and.w	r3, r3, #32
 800ab1e:	2b20      	cmp	r3, #32
 800ab20:	d0e8      	beq.n	800aaf4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	695a      	ldr	r2, [r3, #20]
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b085      	sub	sp, #20
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	4603      	mov	r3, r0
 800ab5a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ab60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab64:	2b84      	cmp	r3, #132	; 0x84
 800ab66:	d005      	beq.n	800ab74 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ab68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	3303      	adds	r3, #3
 800ab72:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ab74:	68fb      	ldr	r3, [r7, #12]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3714      	adds	r7, #20
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b083      	sub	sp, #12
 800ab86:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab88:	f3ef 8305 	mrs	r3, IPSR
 800ab8c:	607b      	str	r3, [r7, #4]
  return(result);
 800ab8e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	bf14      	ite	ne
 800ab94:	2301      	movne	r3, #1
 800ab96:	2300      	moveq	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800abaa:	f001 fc73 	bl	800c494 <vTaskStartScheduler>
  
  return osOK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800abb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb6:	b089      	sub	sp, #36	; 0x24
 800abb8:	af04      	add	r7, sp, #16
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d020      	beq.n	800ac08 <osThreadCreate+0x54>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d01c      	beq.n	800ac08 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685c      	ldr	r4, [r3, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681d      	ldr	r5, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	691e      	ldr	r6, [r3, #16]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7ff ffb6 	bl	800ab52 <makeFreeRtosPriority>
 800abe6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abf0:	9202      	str	r2, [sp, #8]
 800abf2:	9301      	str	r3, [sp, #4]
 800abf4:	9100      	str	r1, [sp, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	4632      	mov	r2, r6
 800abfa:	4629      	mov	r1, r5
 800abfc:	4620      	mov	r0, r4
 800abfe:	f001 fa77 	bl	800c0f0 <xTaskCreateStatic>
 800ac02:	4603      	mov	r3, r0
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	e01c      	b.n	800ac42 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685c      	ldr	r4, [r3, #4]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac14:	b29e      	uxth	r6, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff ff98 	bl	800ab52 <makeFreeRtosPriority>
 800ac22:	4602      	mov	r2, r0
 800ac24:	f107 030c 	add.w	r3, r7, #12
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	9200      	str	r2, [sp, #0]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	4632      	mov	r2, r6
 800ac30:	4629      	mov	r1, r5
 800ac32:	4620      	mov	r0, r4
 800ac34:	f001 fab9 	bl	800c1aa <xTaskCreate>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d001      	beq.n	800ac42 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e000      	b.n	800ac44 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ac42:	68fb      	ldr	r3, [r7, #12]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <osDelay+0x16>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	e000      	b.n	800ac64 <osDelay+0x18>
 800ac62:	2301      	movs	r3, #1
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 fbe1 	bl	800c42c <vTaskDelay>
  
  return osOK;
 800ac6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af02      	add	r7, sp, #8
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800ac86:	f7ff ff7c 	bl	800ab82 <inHandlerMode>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d01c      	beq.n	800acca <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	f107 0208 	add.w	r2, r7, #8
 800ac96:	f107 030c 	add.w	r3, r7, #12
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	2201      	movs	r2, #1
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f002 fae7 	bl	800d274 <xTaskGenericNotifyFromISR>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d002      	beq.n	800acb2 <osSignalSet+0x3e>
      return 0x80000000;
 800acac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acb0:	e019      	b.n	800ace6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d015      	beq.n	800ace4 <osSignalSet+0x70>
 800acb8:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <osSignalSet+0x7c>)
 800acba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	e00c      	b.n	800ace4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	f107 0308 	add.w	r3, r7, #8
 800acd0:	2201      	movs	r2, #1
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f002 fa18 	bl	800d108 <xTaskGenericNotify>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d002      	beq.n	800ace4 <osSignalSet+0x70>
    return 0x80000000;
 800acde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ace2:	e000      	b.n	800ace6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800ace4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	e000ed04 	.word	0xe000ed04

0800acf4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800acf4:	b590      	push	{r4, r7, lr}
 800acf6:	b089      	sub	sp, #36	; 0x24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800ad00:	2300      	movs	r3, #0
 800ad02:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0e:	d103      	bne.n	800ad18 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800ad10:	f04f 33ff 	mov.w	r3, #4294967295
 800ad14:	61fb      	str	r3, [r7, #28]
 800ad16:	e009      	b.n	800ad2c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d006      	beq.n	800ad2c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <osSignalWait+0x38>
      ticks = 1;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800ad2c:	f7ff ff29 	bl	800ab82 <inHandlerMode>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d002      	beq.n	800ad3c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800ad36:	2382      	movs	r3, #130	; 0x82
 800ad38:	613b      	str	r3, [r7, #16]
 800ad3a:	e01b      	b.n	800ad74 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	f107 0310 	add.w	r3, r7, #16
 800ad42:	1d1a      	adds	r2, r3, #4
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	2000      	movs	r0, #0
 800ad48:	f002 f984 	bl	800d054 <xTaskNotifyWait>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d008      	beq.n	800ad64 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <osSignalWait+0x6a>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	613b      	str	r3, [r7, #16]
 800ad5c:	e00a      	b.n	800ad74 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	613b      	str	r3, [r7, #16]
 800ad62:	e007      	b.n	800ad74 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	da02      	bge.n	800ad70 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800ad6a:	2386      	movs	r3, #134	; 0x86
 800ad6c:	613b      	str	r3, [r7, #16]
 800ad6e:	e001      	b.n	800ad74 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800ad70:	2308      	movs	r3, #8
 800ad72:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	461c      	mov	r4, r3
 800ad78:	f107 0310 	add.w	r3, r7, #16
 800ad7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	3724      	adds	r7, #36	; 0x24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd90      	pop	{r4, r7, pc}

0800ad8c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af02      	add	r7, sp, #8
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d016      	beq.n	800adcc <osSemaphoreCreate+0x40>
    if (count == 1) {
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d10a      	bne.n	800adba <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	2203      	movs	r2, #3
 800adaa:	9200      	str	r2, [sp, #0]
 800adac:	2200      	movs	r2, #0
 800adae:	2100      	movs	r1, #0
 800adb0:	2001      	movs	r0, #1
 800adb2:	f000 faa7 	bl	800b304 <xQueueGenericCreateStatic>
 800adb6:	4603      	mov	r3, r0
 800adb8:	e023      	b.n	800ae02 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800adba:	6838      	ldr	r0, [r7, #0]
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	461a      	mov	r2, r3
 800adc4:	f000 fb6f 	bl	800b4a6 <xQueueCreateCountingSemaphoreStatic>
 800adc8:	4603      	mov	r3, r0
 800adca:	e01a      	b.n	800ae02 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d110      	bne.n	800adf4 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800add2:	2203      	movs	r2, #3
 800add4:	2100      	movs	r1, #0
 800add6:	2001      	movs	r0, #1
 800add8:	f000 fb0c 	bl	800b3f4 <xQueueGenericCreate>
 800addc:	60f8      	str	r0, [r7, #12]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <osSemaphoreCreate+0x64>
 800ade4:	2300      	movs	r3, #0
 800ade6:	2200      	movs	r2, #0
 800ade8:	2100      	movs	r1, #0
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 fbc6 	bl	800b57c <xQueueGenericSend>
      return sema;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	e006      	b.n	800ae02 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	4611      	mov	r1, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 fb8a 	bl	800b514 <xQueueCreateCountingSemaphore>
 800ae00:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
	...

0800ae0c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ae16:	2300      	movs	r3, #0
 800ae18:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ae20:	2380      	movs	r3, #128	; 0x80
 800ae22:	e03a      	b.n	800ae9a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2e:	d103      	bne.n	800ae38 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ae30:	f04f 33ff 	mov.w	r3, #4294967295
 800ae34:	60fb      	str	r3, [r7, #12]
 800ae36:	e009      	b.n	800ae4c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d006      	beq.n	800ae4c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <osSemaphoreWait+0x40>
      ticks = 1;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ae4c:	f7ff fe99 	bl	800ab82 <inHandlerMode>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d017      	beq.n	800ae86 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ae56:	f107 0308 	add.w	r3, r7, #8
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 ff9e 	bl	800bda0 <xQueueReceiveFromISR>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d001      	beq.n	800ae6e <osSemaphoreWait+0x62>
      return osErrorOS;
 800ae6a:	23ff      	movs	r3, #255	; 0xff
 800ae6c:	e015      	b.n	800ae9a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d011      	beq.n	800ae98 <osSemaphoreWait+0x8c>
 800ae74:	4b0b      	ldr	r3, [pc, #44]	; (800aea4 <osSemaphoreWait+0x98>)
 800ae76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7a:	601a      	str	r2, [r3, #0]
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	e008      	b.n	800ae98 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ae86:	68f9      	ldr	r1, [r7, #12]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fe7d 	bl	800bb88 <xQueueSemaphoreTake>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d001      	beq.n	800ae98 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ae94:	23ff      	movs	r3, #255	; 0xff
 800ae96:	e000      	b.n	800ae9a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	e000ed04 	.word	0xe000ed04

0800aea8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800aeb8:	f7ff fe63 	bl	800ab82 <inHandlerMode>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d016      	beq.n	800aef0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aec2:	f107 0308 	add.w	r3, r7, #8
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fcf0 	bl	800b8ae <xQueueGiveFromISR>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d001      	beq.n	800aed8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800aed4:	23ff      	movs	r3, #255	; 0xff
 800aed6:	e017      	b.n	800af08 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d013      	beq.n	800af06 <osSemaphoreRelease+0x5e>
 800aede:	4b0c      	ldr	r3, [pc, #48]	; (800af10 <osSemaphoreRelease+0x68>)
 800aee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	e00a      	b.n	800af06 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800aef0:	2300      	movs	r3, #0
 800aef2:	2200      	movs	r2, #0
 800aef4:	2100      	movs	r1, #0
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fb40 	bl	800b57c <xQueueGenericSend>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d001      	beq.n	800af06 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800af02:	23ff      	movs	r3, #255	; 0xff
 800af04:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800af06:	68fb      	ldr	r3, [r7, #12]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	e000ed04 	.word	0xe000ed04

0800af14 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800af14:	b590      	push	{r4, r7, lr}
 800af16:	b085      	sub	sp, #20
 800af18:	af02      	add	r7, sp, #8
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d011      	beq.n	800af4a <osMessageCreate+0x36>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00d      	beq.n	800af4a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6818      	ldr	r0, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6859      	ldr	r1, [r3, #4]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	689a      	ldr	r2, [r3, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	2400      	movs	r4, #0
 800af40:	9400      	str	r4, [sp, #0]
 800af42:	f000 f9df 	bl	800b304 <xQueueGenericCreateStatic>
 800af46:	4603      	mov	r3, r0
 800af48:	e008      	b.n	800af5c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6818      	ldr	r0, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	4619      	mov	r1, r3
 800af56:	f000 fa4d 	bl	800b3f4 <xQueueGenericCreate>
 800af5a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	bd90      	pop	{r4, r7, pc}

0800af64 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800af70:	2300      	movs	r3, #0
 800af72:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <osMessagePut+0x1e>
    ticks = 1;
 800af7e:	2301      	movs	r3, #1
 800af80:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800af82:	f7ff fdfe 	bl	800ab82 <inHandlerMode>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d018      	beq.n	800afbe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800af8c:	f107 0210 	add.w	r2, r7, #16
 800af90:	f107 0108 	add.w	r1, r7, #8
 800af94:	2300      	movs	r3, #0
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 fbee 	bl	800b778 <xQueueGenericSendFromISR>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d001      	beq.n	800afa6 <osMessagePut+0x42>
      return osErrorOS;
 800afa2:	23ff      	movs	r3, #255	; 0xff
 800afa4:	e018      	b.n	800afd8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d014      	beq.n	800afd6 <osMessagePut+0x72>
 800afac:	4b0c      	ldr	r3, [pc, #48]	; (800afe0 <osMessagePut+0x7c>)
 800afae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	e00b      	b.n	800afd6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800afbe:	f107 0108 	add.w	r1, r7, #8
 800afc2:	2300      	movs	r3, #0
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 fad8 	bl	800b57c <xQueueGenericSend>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d001      	beq.n	800afd6 <osMessagePut+0x72>
      return osErrorOS;
 800afd2:	23ff      	movs	r3, #255	; 0xff
 800afd4:	e000      	b.n	800afd8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3718      	adds	r7, #24
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	e000ed04 	.word	0xe000ed04

0800afe4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800afe4:	b590      	push	{r4, r7, lr}
 800afe6:	b08b      	sub	sp, #44	; 0x2c
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10a      	bne.n	800b014 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800affe:	2380      	movs	r3, #128	; 0x80
 800b000:	617b      	str	r3, [r7, #20]
    return event;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	461c      	mov	r4, r3
 800b006:	f107 0314 	add.w	r3, r7, #20
 800b00a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b00e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b012:	e054      	b.n	800b0be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b014:	2300      	movs	r3, #0
 800b016:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b022:	d103      	bne.n	800b02c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b024:	f04f 33ff 	mov.w	r3, #4294967295
 800b028:	627b      	str	r3, [r7, #36]	; 0x24
 800b02a:	e009      	b.n	800b040 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d006      	beq.n	800b040 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <osMessageGet+0x5c>
      ticks = 1;
 800b03c:	2301      	movs	r3, #1
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b040:	f7ff fd9f 	bl	800ab82 <inHandlerMode>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d01c      	beq.n	800b084 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b04a:	f107 0220 	add.w	r2, r7, #32
 800b04e:	f107 0314 	add.w	r3, r7, #20
 800b052:	3304      	adds	r3, #4
 800b054:	4619      	mov	r1, r3
 800b056:	68b8      	ldr	r0, [r7, #8]
 800b058:	f000 fea2 	bl	800bda0 <xQueueReceiveFromISR>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d102      	bne.n	800b068 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b062:	2310      	movs	r3, #16
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	e001      	b.n	800b06c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b068:	2300      	movs	r3, #0
 800b06a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d01d      	beq.n	800b0ae <osMessageGet+0xca>
 800b072:	4b15      	ldr	r3, [pc, #84]	; (800b0c8 <osMessageGet+0xe4>)
 800b074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	e014      	b.n	800b0ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b084:	f107 0314 	add.w	r3, r7, #20
 800b088:	3304      	adds	r3, #4
 800b08a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b08c:	4619      	mov	r1, r3
 800b08e:	68b8      	ldr	r0, [r7, #8]
 800b090:	f000 fc9a 	bl	800b9c8 <xQueueReceive>
 800b094:	4603      	mov	r3, r0
 800b096:	2b01      	cmp	r3, #1
 800b098:	d102      	bne.n	800b0a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b09a:	2310      	movs	r3, #16
 800b09c:	617b      	str	r3, [r7, #20]
 800b09e:	e006      	b.n	800b0ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <osMessageGet+0xc6>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e000      	b.n	800b0ac <osMessageGet+0xc8>
 800b0aa:	2340      	movs	r3, #64	; 0x40
 800b0ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	461c      	mov	r4, r3
 800b0b2:	f107 0314 	add.w	r3, r7, #20
 800b0b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	372c      	adds	r7, #44	; 0x2c
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd90      	pop	{r4, r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f103 0208 	add.w	r2, r3, #8
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f103 0208 	add.w	r2, r3, #8
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f103 0208 	add.w	r2, r3, #8
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b11a:	bf00      	nop
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b126:	b480      	push	{r7}
 800b128:	b085      	sub	sp, #20
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	689a      	ldr	r2, [r3, #8]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	1c5a      	adds	r2, r3, #1
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	601a      	str	r2, [r3, #0]
}
 800b162:	bf00      	nop
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b16e:	b480      	push	{r7}
 800b170:	b085      	sub	sp, #20
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b184:	d103      	bne.n	800b18e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	e00c      	b.n	800b1a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3308      	adds	r3, #8
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	e002      	b.n	800b19c <vListInsert+0x2e>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d2f6      	bcs.n	800b196 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	685a      	ldr	r2, [r3, #4]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	601a      	str	r2, [r3, #0]
}
 800b1d4:	bf00      	nop
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	6892      	ldr	r2, [r2, #8]
 800b1f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	6852      	ldr	r2, [r2, #4]
 800b200:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d103      	bne.n	800b214 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689a      	ldr	r2, [r3, #8]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	1e5a      	subs	r2, r3, #1
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b25e:	f002 fa79 	bl	800d754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b26a:	68f9      	ldr	r1, [r7, #12]
 800b26c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b26e:	fb01 f303 	mul.w	r3, r1, r3
 800b272:	441a      	add	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28e:	3b01      	subs	r3, #1
 800b290:	68f9      	ldr	r1, [r7, #12]
 800b292:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b294:	fb01 f303 	mul.w	r3, r1, r3
 800b298:	441a      	add	r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	22ff      	movs	r2, #255	; 0xff
 800b2a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	22ff      	movs	r2, #255	; 0xff
 800b2aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d114      	bne.n	800b2de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01a      	beq.n	800b2f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3310      	adds	r3, #16
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f001 fb4d 	bl	800c960 <xTaskRemoveFromEventList>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d012      	beq.n	800b2f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b2cc:	4b0c      	ldr	r3, [pc, #48]	; (800b300 <xQueueGenericReset+0xcc>)
 800b2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	e009      	b.n	800b2f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	3310      	adds	r3, #16
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7ff fef2 	bl	800b0cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	3324      	adds	r3, #36	; 0x24
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff feed 	bl	800b0cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b2f2:	f002 fa5f 	bl	800d7b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b2f6:	2301      	movs	r3, #1
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	e000ed04 	.word	0xe000ed04

0800b304 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08e      	sub	sp, #56	; 0x38
 800b308:	af02      	add	r7, sp, #8
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d10a      	bne.n	800b32e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31c:	f383 8811 	msr	BASEPRI, r3
 800b320:	f3bf 8f6f 	isb	sy
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b32a:	bf00      	nop
 800b32c:	e7fe      	b.n	800b32c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <xQueueGenericCreateStatic+0x52>
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <xQueueGenericCreateStatic+0x56>
 800b356:	2301      	movs	r3, #1
 800b358:	e000      	b.n	800b35c <xQueueGenericCreateStatic+0x58>
 800b35a:	2300      	movs	r3, #0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	623b      	str	r3, [r7, #32]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d102      	bne.n	800b382 <xQueueGenericCreateStatic+0x7e>
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <xQueueGenericCreateStatic+0x82>
 800b382:	2301      	movs	r3, #1
 800b384:	e000      	b.n	800b388 <xQueueGenericCreateStatic+0x84>
 800b386:	2300      	movs	r3, #0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10a      	bne.n	800b3a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	61fb      	str	r3, [r7, #28]
}
 800b39e:	bf00      	nop
 800b3a0:	e7fe      	b.n	800b3a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b3a2:	2348      	movs	r3, #72	; 0x48
 800b3a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2b48      	cmp	r3, #72	; 0x48
 800b3aa:	d00a      	beq.n	800b3c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	61bb      	str	r3, [r7, #24]
}
 800b3be:	bf00      	nop
 800b3c0:	e7fe      	b.n	800b3c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b3c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00d      	beq.n	800b3ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3dc:	9300      	str	r3, [sp, #0]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	68b9      	ldr	r1, [r7, #8]
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 f83f 	bl	800b468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3730      	adds	r7, #48	; 0x30
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08a      	sub	sp, #40	; 0x28
 800b3f8:	af02      	add	r7, sp, #8
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	4613      	mov	r3, r2
 800b400:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10a      	bne.n	800b41e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	613b      	str	r3, [r7, #16]
}
 800b41a:	bf00      	nop
 800b41c:	e7fe      	b.n	800b41c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	fb02 f303 	mul.w	r3, r2, r3
 800b426:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	3348      	adds	r3, #72	; 0x48
 800b42c:	4618      	mov	r0, r3
 800b42e:	f002 fab3 	bl	800d998 <pvPortMalloc>
 800b432:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d011      	beq.n	800b45e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	3348      	adds	r3, #72	; 0x48
 800b442:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b44c:	79fa      	ldrb	r2, [r7, #7]
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	4613      	mov	r3, r2
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 f805 	bl	800b468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b45e:	69bb      	ldr	r3, [r7, #24]
	}
 800b460:	4618      	mov	r0, r3
 800b462:	3720      	adds	r7, #32
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d103      	bne.n	800b484 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	69ba      	ldr	r2, [r7, #24]
 800b480:	601a      	str	r2, [r3, #0]
 800b482:	e002      	b.n	800b48a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b496:	2101      	movs	r1, #1
 800b498:	69b8      	ldr	r0, [r7, #24]
 800b49a:	f7ff fecb 	bl	800b234 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b49e:	bf00      	nop
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b08a      	sub	sp, #40	; 0x28
 800b4aa:	af02      	add	r7, sp, #8
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	61bb      	str	r3, [r7, #24]
}
 800b4ca:	bf00      	nop
 800b4cc:	e7fe      	b.n	800b4cc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d90a      	bls.n	800b4ec <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	617b      	str	r3, [r7, #20]
}
 800b4e8:	bf00      	nop
 800b4ea:	e7fe      	b.n	800b4ea <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f7ff ff04 	bl	800b304 <xQueueGenericCreateStatic>
 800b4fc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b50a:	69fb      	ldr	r3, [r7, #28]
	}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3720      	adds	r7, #32
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	613b      	str	r3, [r7, #16]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d90a      	bls.n	800b558 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	60fb      	str	r3, [r7, #12]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b558:	2202      	movs	r2, #2
 800b55a:	2100      	movs	r1, #0
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7ff ff49 	bl	800b3f4 <xQueueGenericCreate>
 800b562:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d002      	beq.n	800b570 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b570:	697b      	ldr	r3, [r7, #20]
	}
 800b572:	4618      	mov	r0, r3
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08e      	sub	sp, #56	; 0x38
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b58a:	2300      	movs	r3, #0
 800b58c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10a      	bne.n	800b5ae <xQueueGenericSend+0x32>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5aa:	bf00      	nop
 800b5ac:	e7fe      	b.n	800b5ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d103      	bne.n	800b5bc <xQueueGenericSend+0x40>
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <xQueueGenericSend+0x44>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e000      	b.n	800b5c2 <xQueueGenericSend+0x46>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10a      	bne.n	800b5dc <xQueueGenericSend+0x60>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5d8:	bf00      	nop
 800b5da:	e7fe      	b.n	800b5da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d103      	bne.n	800b5ea <xQueueGenericSend+0x6e>
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d101      	bne.n	800b5ee <xQueueGenericSend+0x72>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e000      	b.n	800b5f0 <xQueueGenericSend+0x74>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10a      	bne.n	800b60a <xQueueGenericSend+0x8e>
	__asm volatile
 800b5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f8:	f383 8811 	msr	BASEPRI, r3
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	623b      	str	r3, [r7, #32]
}
 800b606:	bf00      	nop
 800b608:	e7fe      	b.n	800b608 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b60a:	f001 fb67 	bl	800ccdc <xTaskGetSchedulerState>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d102      	bne.n	800b61a <xQueueGenericSend+0x9e>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <xQueueGenericSend+0xa2>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e000      	b.n	800b620 <xQueueGenericSend+0xa4>
 800b61e:	2300      	movs	r3, #0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10a      	bne.n	800b63a <xQueueGenericSend+0xbe>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	61fb      	str	r3, [r7, #28]
}
 800b636:	bf00      	nop
 800b638:	e7fe      	b.n	800b638 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b63a:	f002 f88b 	bl	800d754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b646:	429a      	cmp	r2, r3
 800b648:	d302      	bcc.n	800b650 <xQueueGenericSend+0xd4>
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d129      	bne.n	800b6a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	68b9      	ldr	r1, [r7, #8]
 800b654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b656:	f000 fc3b 	bl	800bed0 <prvCopyDataToQueue>
 800b65a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	2b00      	cmp	r3, #0
 800b662:	d010      	beq.n	800b686 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	3324      	adds	r3, #36	; 0x24
 800b668:	4618      	mov	r0, r3
 800b66a:	f001 f979 	bl	800c960 <xTaskRemoveFromEventList>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d013      	beq.n	800b69c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b674:	4b3f      	ldr	r3, [pc, #252]	; (800b774 <xQueueGenericSend+0x1f8>)
 800b676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	e00a      	b.n	800b69c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d007      	beq.n	800b69c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b68c:	4b39      	ldr	r3, [pc, #228]	; (800b774 <xQueueGenericSend+0x1f8>)
 800b68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b69c:	f002 f88a 	bl	800d7b4 <vPortExitCritical>
				return pdPASS;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e063      	b.n	800b76c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d103      	bne.n	800b6b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6aa:	f002 f883 	bl	800d7b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e05c      	b.n	800b76c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d106      	bne.n	800b6c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6b8:	f107 0314 	add.w	r3, r7, #20
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f001 f9b1 	bl	800ca24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6c6:	f002 f875 	bl	800d7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6ca:	f000 ff43 	bl	800c554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6ce:	f002 f841 	bl	800d754 <vPortEnterCritical>
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6d8:	b25b      	sxtb	r3, r3
 800b6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6de:	d103      	bne.n	800b6e8 <xQueueGenericSend+0x16c>
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6ee:	b25b      	sxtb	r3, r3
 800b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f4:	d103      	bne.n	800b6fe <xQueueGenericSend+0x182>
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6fe:	f002 f859 	bl	800d7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b702:	1d3a      	adds	r2, r7, #4
 800b704:	f107 0314 	add.w	r3, r7, #20
 800b708:	4611      	mov	r1, r2
 800b70a:	4618      	mov	r0, r3
 800b70c:	f001 f9a0 	bl	800ca50 <xTaskCheckForTimeOut>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d124      	bne.n	800b760 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b718:	f000 fcd2 	bl	800c0c0 <prvIsQueueFull>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d018      	beq.n	800b754 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	3310      	adds	r3, #16
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	4611      	mov	r1, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f001 f8f4 	bl	800c918 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b732:	f000 fc5d 	bl	800bff0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b736:	f000 ff1b 	bl	800c570 <xTaskResumeAll>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f47f af7c 	bne.w	800b63a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b742:	4b0c      	ldr	r3, [pc, #48]	; (800b774 <xQueueGenericSend+0x1f8>)
 800b744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	e772      	b.n	800b63a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b756:	f000 fc4b 	bl	800bff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b75a:	f000 ff09 	bl	800c570 <xTaskResumeAll>
 800b75e:	e76c      	b.n	800b63a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b762:	f000 fc45 	bl	800bff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b766:	f000 ff03 	bl	800c570 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b76a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3738      	adds	r7, #56	; 0x38
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	e000ed04 	.word	0xe000ed04

0800b778 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b090      	sub	sp, #64	; 0x40
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
 800b784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10a      	bne.n	800b7a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7a2:	bf00      	nop
 800b7a4:	e7fe      	b.n	800b7a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d103      	bne.n	800b7b4 <xQueueGenericSendFromISR+0x3c>
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <xQueueGenericSendFromISR+0x40>
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e000      	b.n	800b7ba <xQueueGenericSendFromISR+0x42>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d103      	bne.n	800b7e2 <xQueueGenericSendFromISR+0x6a>
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d101      	bne.n	800b7e6 <xQueueGenericSendFromISR+0x6e>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e000      	b.n	800b7e8 <xQueueGenericSendFromISR+0x70>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10a      	bne.n	800b802 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	623b      	str	r3, [r7, #32]
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b802:	f002 f889 	bl	800d918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b806:	f3ef 8211 	mrs	r2, BASEPRI
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	61fa      	str	r2, [r7, #28]
 800b81c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b81e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b820:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d302      	bcc.n	800b834 <xQueueGenericSendFromISR+0xbc>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b02      	cmp	r3, #2
 800b832:	d12f      	bne.n	800b894 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b842:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b84a:	f000 fb41 	bl	800bed0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b84e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b856:	d112      	bne.n	800b87e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d016      	beq.n	800b88e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	3324      	adds	r3, #36	; 0x24
 800b864:	4618      	mov	r0, r3
 800b866:	f001 f87b 	bl	800c960 <xTaskRemoveFromEventList>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00e      	beq.n	800b88e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2201      	movs	r2, #1
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	e007      	b.n	800b88e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b87e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b882:	3301      	adds	r3, #1
 800b884:	b2db      	uxtb	r3, r3
 800b886:	b25a      	sxtb	r2, r3
 800b888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b88e:	2301      	movs	r3, #1
 800b890:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b892:	e001      	b.n	800b898 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b894:	2300      	movs	r3, #0
 800b896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3740      	adds	r7, #64	; 0x40
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b08e      	sub	sp, #56	; 0x38
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10a      	bne.n	800b8d8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	623b      	str	r3, [r7, #32]
}
 800b8d4:	bf00      	nop
 800b8d6:	e7fe      	b.n	800b8d6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00a      	beq.n	800b8f6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	61fb      	str	r3, [r7, #28]
}
 800b8f2:	bf00      	nop
 800b8f4:	e7fe      	b.n	800b8f4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d103      	bne.n	800b906 <xQueueGiveFromISR+0x58>
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <xQueueGiveFromISR+0x5c>
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <xQueueGiveFromISR+0x5e>
 800b90a:	2300      	movs	r3, #0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	61bb      	str	r3, [r7, #24]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b926:	f001 fff7 	bl	800d918 <vPortValidateInterruptPriority>
	__asm volatile
 800b92a:	f3ef 8211 	mrs	r2, BASEPRI
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	617a      	str	r2, [r7, #20]
 800b940:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b942:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b944:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b952:	429a      	cmp	r2, r3
 800b954:	d22b      	bcs.n	800b9ae <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b95c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b968:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b970:	d112      	bne.n	800b998 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b976:	2b00      	cmp	r3, #0
 800b978:	d016      	beq.n	800b9a8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97c:	3324      	adds	r3, #36	; 0x24
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 ffee 	bl	800c960 <xTaskRemoveFromEventList>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00e      	beq.n	800b9a8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00b      	beq.n	800b9a8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2201      	movs	r2, #1
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	e007      	b.n	800b9a8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b99c:	3301      	adds	r3, #1
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	b25a      	sxtb	r2, r3
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ac:	e001      	b.n	800b9b2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f383 8811 	msr	BASEPRI, r3
}
 800b9bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3738      	adds	r7, #56	; 0x38
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b08c      	sub	sp, #48	; 0x30
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10a      	bne.n	800b9f8 <xQueueReceive+0x30>
	__asm volatile
 800b9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e6:	f383 8811 	msr	BASEPRI, r3
 800b9ea:	f3bf 8f6f 	isb	sy
 800b9ee:	f3bf 8f4f 	dsb	sy
 800b9f2:	623b      	str	r3, [r7, #32]
}
 800b9f4:	bf00      	nop
 800b9f6:	e7fe      	b.n	800b9f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d103      	bne.n	800ba06 <xQueueReceive+0x3e>
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d101      	bne.n	800ba0a <xQueueReceive+0x42>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e000      	b.n	800ba0c <xQueueReceive+0x44>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <xQueueReceive+0x5e>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	61fb      	str	r3, [r7, #28]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba26:	f001 f959 	bl	800ccdc <xTaskGetSchedulerState>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d102      	bne.n	800ba36 <xQueueReceive+0x6e>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <xQueueReceive+0x72>
 800ba36:	2301      	movs	r3, #1
 800ba38:	e000      	b.n	800ba3c <xQueueReceive+0x74>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10a      	bne.n	800ba56 <xQueueReceive+0x8e>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	61bb      	str	r3, [r7, #24]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba56:	f001 fe7d 	bl	800d754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d01f      	beq.n	800baa6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba66:	68b9      	ldr	r1, [r7, #8]
 800ba68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba6a:	f000 fa9b 	bl	800bfa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	1e5a      	subs	r2, r3, #1
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00f      	beq.n	800ba9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	3310      	adds	r3, #16
 800ba82:	4618      	mov	r0, r3
 800ba84:	f000 ff6c 	bl	800c960 <xTaskRemoveFromEventList>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d007      	beq.n	800ba9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba8e:	4b3d      	ldr	r3, [pc, #244]	; (800bb84 <xQueueReceive+0x1bc>)
 800ba90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba94:	601a      	str	r2, [r3, #0]
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba9e:	f001 fe89 	bl	800d7b4 <vPortExitCritical>
				return pdPASS;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e069      	b.n	800bb7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d103      	bne.n	800bab4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800baac:	f001 fe82 	bl	800d7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bab0:	2300      	movs	r3, #0
 800bab2:	e062      	b.n	800bb7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d106      	bne.n	800bac8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800baba:	f107 0310 	add.w	r3, r7, #16
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 ffb0 	bl	800ca24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bac4:	2301      	movs	r3, #1
 800bac6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bac8:	f001 fe74 	bl	800d7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bacc:	f000 fd42 	bl	800c554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bad0:	f001 fe40 	bl	800d754 <vPortEnterCritical>
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bada:	b25b      	sxtb	r3, r3
 800badc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae0:	d103      	bne.n	800baea <xQueueReceive+0x122>
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baf0:	b25b      	sxtb	r3, r3
 800baf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf6:	d103      	bne.n	800bb00 <xQueueReceive+0x138>
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb00:	f001 fe58 	bl	800d7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb04:	1d3a      	adds	r2, r7, #4
 800bb06:	f107 0310 	add.w	r3, r7, #16
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 ff9f 	bl	800ca50 <xTaskCheckForTimeOut>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d123      	bne.n	800bb60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb1a:	f000 fabb 	bl	800c094 <prvIsQueueEmpty>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d017      	beq.n	800bb54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	3324      	adds	r3, #36	; 0x24
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 fef3 	bl	800c918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb34:	f000 fa5c 	bl	800bff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb38:	f000 fd1a 	bl	800c570 <xTaskResumeAll>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d189      	bne.n	800ba56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bb42:	4b10      	ldr	r3, [pc, #64]	; (800bb84 <xQueueReceive+0x1bc>)
 800bb44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	e780      	b.n	800ba56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb56:	f000 fa4b 	bl	800bff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb5a:	f000 fd09 	bl	800c570 <xTaskResumeAll>
 800bb5e:	e77a      	b.n	800ba56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb62:	f000 fa45 	bl	800bff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb66:	f000 fd03 	bl	800c570 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb6c:	f000 fa92 	bl	800c094 <prvIsQueueEmpty>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f43f af6f 	beq.w	800ba56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3730      	adds	r7, #48	; 0x30
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	e000ed04 	.word	0xe000ed04

0800bb88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08e      	sub	sp, #56	; 0x38
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10a      	bne.n	800bbba <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	623b      	str	r3, [r7, #32]
}
 800bbb6:	bf00      	nop
 800bbb8:	e7fe      	b.n	800bbb8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00a      	beq.n	800bbd8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	61fb      	str	r3, [r7, #28]
}
 800bbd4:	bf00      	nop
 800bbd6:	e7fe      	b.n	800bbd6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbd8:	f001 f880 	bl	800ccdc <xTaskGetSchedulerState>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d102      	bne.n	800bbe8 <xQueueSemaphoreTake+0x60>
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d101      	bne.n	800bbec <xQueueSemaphoreTake+0x64>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <xQueueSemaphoreTake+0x66>
 800bbec:	2300      	movs	r3, #0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10a      	bne.n	800bc08 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	61bb      	str	r3, [r7, #24]
}
 800bc04:	bf00      	nop
 800bc06:	e7fe      	b.n	800bc06 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc08:	f001 fda4 	bl	800d754 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc10:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d024      	beq.n	800bc62 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	1e5a      	subs	r2, r3, #1
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d104      	bne.n	800bc32 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bc28:	f001 fa00 	bl	800d02c <pvTaskIncrementMutexHeldCount>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc30:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00f      	beq.n	800bc5a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3c:	3310      	adds	r3, #16
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f000 fe8e 	bl	800c960 <xTaskRemoveFromEventList>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d007      	beq.n	800bc5a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc4a:	4b54      	ldr	r3, [pc, #336]	; (800bd9c <xQueueSemaphoreTake+0x214>)
 800bc4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc50:	601a      	str	r2, [r3, #0]
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc5a:	f001 fdab 	bl	800d7b4 <vPortExitCritical>
				return pdPASS;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e097      	b.n	800bd92 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d111      	bne.n	800bc8c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00a      	beq.n	800bc84 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	617b      	str	r3, [r7, #20]
}
 800bc80:	bf00      	nop
 800bc82:	e7fe      	b.n	800bc82 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bc84:	f001 fd96 	bl	800d7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	e082      	b.n	800bd92 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d106      	bne.n	800bca0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc92:	f107 030c 	add.w	r3, r7, #12
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 fec4 	bl	800ca24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bca0:	f001 fd88 	bl	800d7b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bca4:	f000 fc56 	bl	800c554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bca8:	f001 fd54 	bl	800d754 <vPortEnterCritical>
 800bcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcb2:	b25b      	sxtb	r3, r3
 800bcb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb8:	d103      	bne.n	800bcc2 <xQueueSemaphoreTake+0x13a>
 800bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcc8:	b25b      	sxtb	r3, r3
 800bcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcce:	d103      	bne.n	800bcd8 <xQueueSemaphoreTake+0x150>
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcd8:	f001 fd6c 	bl	800d7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcdc:	463a      	mov	r2, r7
 800bcde:	f107 030c 	add.w	r3, r7, #12
 800bce2:	4611      	mov	r1, r2
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 feb3 	bl	800ca50 <xTaskCheckForTimeOut>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d132      	bne.n	800bd56 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcf2:	f000 f9cf 	bl	800c094 <prvIsQueueEmpty>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d026      	beq.n	800bd4a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d109      	bne.n	800bd18 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bd04:	f001 fd26 	bl	800d754 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f001 f803 	bl	800cd18 <xTaskPriorityInherit>
 800bd12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bd14:	f001 fd4e 	bl	800d7b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1a:	3324      	adds	r3, #36	; 0x24
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 fdf9 	bl	800c918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd28:	f000 f962 	bl	800bff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd2c:	f000 fc20 	bl	800c570 <xTaskResumeAll>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f47f af68 	bne.w	800bc08 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bd38:	4b18      	ldr	r3, [pc, #96]	; (800bd9c <xQueueSemaphoreTake+0x214>)
 800bd3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3e:	601a      	str	r2, [r3, #0]
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	e75e      	b.n	800bc08 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bd4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd4c:	f000 f950 	bl	800bff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd50:	f000 fc0e 	bl	800c570 <xTaskResumeAll>
 800bd54:	e758      	b.n	800bc08 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bd56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd58:	f000 f94a 	bl	800bff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd5c:	f000 fc08 	bl	800c570 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd62:	f000 f997 	bl	800c094 <prvIsQueueEmpty>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f43f af4d 	beq.w	800bc08 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00d      	beq.n	800bd90 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bd74:	f001 fcee 	bl	800d754 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bd78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd7a:	f000 f891 	bl	800bea0 <prvGetDisinheritPriorityAfterTimeout>
 800bd7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd86:	4618      	mov	r0, r3
 800bd88:	f001 f8c2 	bl	800cf10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bd8c:	f001 fd12 	bl	800d7b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3738      	adds	r7, #56	; 0x38
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	e000ed04 	.word	0xe000ed04

0800bda0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b08e      	sub	sp, #56	; 0x38
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10a      	bne.n	800bdcc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	623b      	str	r3, [r7, #32]
}
 800bdc8:	bf00      	nop
 800bdca:	e7fe      	b.n	800bdca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d103      	bne.n	800bdda <xQueueReceiveFromISR+0x3a>
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <xQueueReceiveFromISR+0x3e>
 800bdda:	2301      	movs	r3, #1
 800bddc:	e000      	b.n	800bde0 <xQueueReceiveFromISR+0x40>
 800bdde:	2300      	movs	r3, #0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10a      	bne.n	800bdfa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	61fb      	str	r3, [r7, #28]
}
 800bdf6:	bf00      	nop
 800bdf8:	e7fe      	b.n	800bdf8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdfa:	f001 fd8d 	bl	800d918 <vPortValidateInterruptPriority>
	__asm volatile
 800bdfe:	f3ef 8211 	mrs	r2, BASEPRI
 800be02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	61ba      	str	r2, [r7, #24]
 800be14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800be16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	2b00      	cmp	r3, #0
 800be24:	d02f      	beq.n	800be86 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be30:	68b9      	ldr	r1, [r7, #8]
 800be32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be34:	f000 f8b6 	bl	800bfa4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	1e5a      	subs	r2, r3, #1
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800be40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be48:	d112      	bne.n	800be70 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d016      	beq.n	800be80 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	3310      	adds	r3, #16
 800be56:	4618      	mov	r0, r3
 800be58:	f000 fd82 	bl	800c960 <xTaskRemoveFromEventList>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00e      	beq.n	800be80 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00b      	beq.n	800be80 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	e007      	b.n	800be80 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800be70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be74:	3301      	adds	r3, #1
 800be76:	b2db      	uxtb	r3, r3
 800be78:	b25a      	sxtb	r2, r3
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800be80:	2301      	movs	r3, #1
 800be82:	637b      	str	r3, [r7, #52]	; 0x34
 800be84:	e001      	b.n	800be8a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800be86:	2300      	movs	r3, #0
 800be88:	637b      	str	r3, [r7, #52]	; 0x34
 800be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f383 8811 	msr	BASEPRI, r3
}
 800be94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3738      	adds	r7, #56	; 0x38
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beac:	2b00      	cmp	r3, #0
 800beae:	d006      	beq.n	800bebe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f1c3 0307 	rsb	r3, r3, #7
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	e001      	b.n	800bec2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bec2:	68fb      	ldr	r3, [r7, #12]
	}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bedc:	2300      	movs	r3, #0
 800bede:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	2b00      	cmp	r3, #0
 800beec:	d10d      	bne.n	800bf0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d14d      	bne.n	800bf92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	4618      	mov	r0, r3
 800befc:	f000 ff82 	bl	800ce04 <xTaskPriorityDisinherit>
 800bf00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	609a      	str	r2, [r3, #8]
 800bf08:	e043      	b.n	800bf92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d119      	bne.n	800bf44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6858      	ldr	r0, [r3, #4]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf18:	461a      	mov	r2, r3
 800bf1a:	68b9      	ldr	r1, [r7, #8]
 800bf1c:	f019 f94c 	bl	80251b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf28:	441a      	add	r2, r3
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d32b      	bcc.n	800bf92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	605a      	str	r2, [r3, #4]
 800bf42:	e026      	b.n	800bf92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	68d8      	ldr	r0, [r3, #12]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	68b9      	ldr	r1, [r7, #8]
 800bf50:	f019 f932 	bl	80251b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5c:	425b      	negs	r3, r3
 800bf5e:	441a      	add	r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	68da      	ldr	r2, [r3, #12]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d207      	bcs.n	800bf80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf78:	425b      	negs	r3, r3
 800bf7a:	441a      	add	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d105      	bne.n	800bf92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf9a:	697b      	ldr	r3, [r7, #20]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3718      	adds	r7, #24
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d018      	beq.n	800bfe8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbe:	441a      	add	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d303      	bcc.n	800bfd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68d9      	ldr	r1, [r3, #12]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	6838      	ldr	r0, [r7, #0]
 800bfe4:	f019 f8e8 	bl	80251b8 <memcpy>
	}
}
 800bfe8:	bf00      	nop
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bff8:	f001 fbac 	bl	800d754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c002:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c004:	e011      	b.n	800c02a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d012      	beq.n	800c034 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3324      	adds	r3, #36	; 0x24
 800c012:	4618      	mov	r0, r3
 800c014:	f000 fca4 	bl	800c960 <xTaskRemoveFromEventList>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d001      	beq.n	800c022 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c01e:	f000 fd79 	bl	800cb14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c022:	7bfb      	ldrb	r3, [r7, #15]
 800c024:	3b01      	subs	r3, #1
 800c026:	b2db      	uxtb	r3, r3
 800c028:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	dce9      	bgt.n	800c006 <prvUnlockQueue+0x16>
 800c032:	e000      	b.n	800c036 <prvUnlockQueue+0x46>
					break;
 800c034:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	22ff      	movs	r2, #255	; 0xff
 800c03a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c03e:	f001 fbb9 	bl	800d7b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c042:	f001 fb87 	bl	800d754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c04c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c04e:	e011      	b.n	800c074 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d012      	beq.n	800c07e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	3310      	adds	r3, #16
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 fc7f 	bl	800c960 <xTaskRemoveFromEventList>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c068:	f000 fd54 	bl	800cb14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	3b01      	subs	r3, #1
 800c070:	b2db      	uxtb	r3, r3
 800c072:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dce9      	bgt.n	800c050 <prvUnlockQueue+0x60>
 800c07c:	e000      	b.n	800c080 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c07e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	22ff      	movs	r2, #255	; 0xff
 800c084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c088:	f001 fb94 	bl	800d7b4 <vPortExitCritical>
}
 800c08c:	bf00      	nop
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c09c:	f001 fb5a 	bl	800d754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d102      	bne.n	800c0ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	e001      	b.n	800c0b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0b2:	f001 fb7f 	bl	800d7b4 <vPortExitCritical>

	return xReturn;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0c8:	f001 fb44 	bl	800d754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d102      	bne.n	800c0de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	e001      	b.n	800c0e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0e2:	f001 fb67 	bl	800d7b4 <vPortExitCritical>

	return xReturn;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b08e      	sub	sp, #56	; 0x38
 800c0f4:	af04      	add	r7, sp, #16
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
 800c0fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10a      	bne.n	800c11a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	623b      	str	r3, [r7, #32]
}
 800c116:	bf00      	nop
 800c118:	e7fe      	b.n	800c118 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10a      	bne.n	800c136 <xTaskCreateStatic+0x46>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	61fb      	str	r3, [r7, #28]
}
 800c132:	bf00      	nop
 800c134:	e7fe      	b.n	800c134 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c136:	2358      	movs	r3, #88	; 0x58
 800c138:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	2b58      	cmp	r3, #88	; 0x58
 800c13e:	d00a      	beq.n	800c156 <xTaskCreateStatic+0x66>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	61bb      	str	r3, [r7, #24]
}
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c156:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d01e      	beq.n	800c19c <xTaskCreateStatic+0xac>
 800c15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c160:	2b00      	cmp	r3, #0
 800c162:	d01b      	beq.n	800c19c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c16c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	2202      	movs	r2, #2
 800c172:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c176:	2300      	movs	r3, #0
 800c178:	9303      	str	r3, [sp, #12]
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	9302      	str	r3, [sp, #8]
 800c17e:	f107 0314 	add.w	r3, r7, #20
 800c182:	9301      	str	r3, [sp, #4]
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	68b9      	ldr	r1, [r7, #8]
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f000 f850 	bl	800c234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c196:	f000 f8df 	bl	800c358 <prvAddNewTaskToReadyList>
 800c19a:	e001      	b.n	800c1a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c19c:	2300      	movs	r3, #0
 800c19e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1a0:	697b      	ldr	r3, [r7, #20]
	}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3728      	adds	r7, #40	; 0x28
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b08c      	sub	sp, #48	; 0x30
 800c1ae:	af04      	add	r7, sp, #16
 800c1b0:	60f8      	str	r0, [r7, #12]
 800c1b2:	60b9      	str	r1, [r7, #8]
 800c1b4:	603b      	str	r3, [r7, #0]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1ba:	88fb      	ldrh	r3, [r7, #6]
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f001 fbea 	bl	800d998 <pvPortMalloc>
 800c1c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00e      	beq.n	800c1ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c1cc:	2058      	movs	r0, #88	; 0x58
 800c1ce:	f001 fbe3 	bl	800d998 <pvPortMalloc>
 800c1d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d003      	beq.n	800c1e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	631a      	str	r2, [r3, #48]	; 0x30
 800c1e0:	e005      	b.n	800c1ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c1e2:	6978      	ldr	r0, [r7, #20]
 800c1e4:	f001 fca8 	bl	800db38 <vPortFree>
 800c1e8:	e001      	b.n	800c1ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d017      	beq.n	800c224 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c1fc:	88fa      	ldrh	r2, [r7, #6]
 800c1fe:	2300      	movs	r3, #0
 800c200:	9303      	str	r3, [sp, #12]
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	9302      	str	r3, [sp, #8]
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	68b9      	ldr	r1, [r7, #8]
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 f80e 	bl	800c234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c218:	69f8      	ldr	r0, [r7, #28]
 800c21a:	f000 f89d 	bl	800c358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c21e:	2301      	movs	r3, #1
 800c220:	61bb      	str	r3, [r7, #24]
 800c222:	e002      	b.n	800c22a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c224:	f04f 33ff 	mov.w	r3, #4294967295
 800c228:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c22a:	69bb      	ldr	r3, [r7, #24]
	}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3720      	adds	r7, #32
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b088      	sub	sp, #32
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	461a      	mov	r2, r3
 800c24c:	21a5      	movs	r1, #165	; 0xa5
 800c24e:	f018 ffdb 	bl	8025208 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c25c:	3b01      	subs	r3, #1
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	f023 0307 	bic.w	r3, r3, #7
 800c26a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	f003 0307 	and.w	r3, r3, #7
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00a      	beq.n	800c28c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	617b      	str	r3, [r7, #20]
}
 800c288:	bf00      	nop
 800c28a:	e7fe      	b.n	800c28a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d01f      	beq.n	800c2d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c292:	2300      	movs	r3, #0
 800c294:	61fb      	str	r3, [r7, #28]
 800c296:	e012      	b.n	800c2be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	4413      	add	r3, r2
 800c29e:	7819      	ldrb	r1, [r3, #0]
 800c2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	3334      	adds	r3, #52	; 0x34
 800c2a8:	460a      	mov	r2, r1
 800c2aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d006      	beq.n	800c2c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	61fb      	str	r3, [r7, #28]
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	2b0f      	cmp	r3, #15
 800c2c2:	d9e9      	bls.n	800c298 <prvInitialiseNewTask+0x64>
 800c2c4:	e000      	b.n	800c2c8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c2c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2d0:	e003      	b.n	800c2da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	2b06      	cmp	r3, #6
 800c2de:	d901      	bls.n	800c2e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c2e0:	2306      	movs	r3, #6
 800c2e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe ff06 	bl	800b10c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c302:	3318      	adds	r3, #24
 800c304:	4618      	mov	r0, r3
 800c306:	f7fe ff01 	bl	800b10c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c30e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	f1c3 0207 	rsb	r2, r3, #7
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c31e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	2200      	movs	r2, #0
 800c324:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	2200      	movs	r2, #0
 800c32a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c334:	683a      	ldr	r2, [r7, #0]
 800c336:	68f9      	ldr	r1, [r7, #12]
 800c338:	69b8      	ldr	r0, [r7, #24]
 800c33a:	f001 f8db 	bl	800d4f4 <pxPortInitialiseStack>
 800c33e:	4602      	mov	r2, r0
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c34e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c350:	bf00      	nop
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c360:	f001 f9f8 	bl	800d754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c364:	4b2a      	ldr	r3, [pc, #168]	; (800c410 <prvAddNewTaskToReadyList+0xb8>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3301      	adds	r3, #1
 800c36a:	4a29      	ldr	r2, [pc, #164]	; (800c410 <prvAddNewTaskToReadyList+0xb8>)
 800c36c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c36e:	4b29      	ldr	r3, [pc, #164]	; (800c414 <prvAddNewTaskToReadyList+0xbc>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d109      	bne.n	800c38a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c376:	4a27      	ldr	r2, [pc, #156]	; (800c414 <prvAddNewTaskToReadyList+0xbc>)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c37c:	4b24      	ldr	r3, [pc, #144]	; (800c410 <prvAddNewTaskToReadyList+0xb8>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b01      	cmp	r3, #1
 800c382:	d110      	bne.n	800c3a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c384:	f000 fbec 	bl	800cb60 <prvInitialiseTaskLists>
 800c388:	e00d      	b.n	800c3a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c38a:	4b23      	ldr	r3, [pc, #140]	; (800c418 <prvAddNewTaskToReadyList+0xc0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d109      	bne.n	800c3a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c392:	4b20      	ldr	r3, [pc, #128]	; (800c414 <prvAddNewTaskToReadyList+0xbc>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d802      	bhi.n	800c3a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3a0:	4a1c      	ldr	r2, [pc, #112]	; (800c414 <prvAddNewTaskToReadyList+0xbc>)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3a6:	4b1d      	ldr	r3, [pc, #116]	; (800c41c <prvAddNewTaskToReadyList+0xc4>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	4a1b      	ldr	r2, [pc, #108]	; (800c41c <prvAddNewTaskToReadyList+0xc4>)
 800c3ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	409a      	lsls	r2, r3
 800c3b8:	4b19      	ldr	r3, [pc, #100]	; (800c420 <prvAddNewTaskToReadyList+0xc8>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	4a18      	ldr	r2, [pc, #96]	; (800c420 <prvAddNewTaskToReadyList+0xc8>)
 800c3c0:	6013      	str	r3, [r2, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	4413      	add	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4a15      	ldr	r2, [pc, #84]	; (800c424 <prvAddNewTaskToReadyList+0xcc>)
 800c3d0:	441a      	add	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	4610      	mov	r0, r2
 800c3da:	f7fe fea4 	bl	800b126 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c3de:	f001 f9e9 	bl	800d7b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c3e2:	4b0d      	ldr	r3, [pc, #52]	; (800c418 <prvAddNewTaskToReadyList+0xc0>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00e      	beq.n	800c408 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3ea:	4b0a      	ldr	r3, [pc, #40]	; (800c414 <prvAddNewTaskToReadyList+0xbc>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d207      	bcs.n	800c408 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c3f8:	4b0b      	ldr	r3, [pc, #44]	; (800c428 <prvAddNewTaskToReadyList+0xd0>)
 800c3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c408:	bf00      	nop
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	20000d74 	.word	0x20000d74
 800c414:	20000c74 	.word	0x20000c74
 800c418:	20000d80 	.word	0x20000d80
 800c41c:	20000d90 	.word	0x20000d90
 800c420:	20000d7c 	.word	0x20000d7c
 800c424:	20000c78 	.word	0x20000c78
 800c428:	e000ed04 	.word	0xe000ed04

0800c42c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c434:	2300      	movs	r3, #0
 800c436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d017      	beq.n	800c46e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <vTaskDelay+0x60>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00a      	beq.n	800c45c <vTaskDelay+0x30>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	60bb      	str	r3, [r7, #8]
}
 800c458:	bf00      	nop
 800c45a:	e7fe      	b.n	800c45a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c45c:	f000 f87a 	bl	800c554 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c460:	2100      	movs	r1, #0
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 ffe0 	bl	800d428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c468:	f000 f882 	bl	800c570 <xTaskResumeAll>
 800c46c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d107      	bne.n	800c484 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c474:	4b06      	ldr	r3, [pc, #24]	; (800c490 <vTaskDelay+0x64>)
 800c476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c47a:	601a      	str	r2, [r3, #0]
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c484:	bf00      	nop
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	20000d9c 	.word	0x20000d9c
 800c490:	e000ed04 	.word	0xe000ed04

0800c494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b08a      	sub	sp, #40	; 0x28
 800c498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4a2:	463a      	mov	r2, r7
 800c4a4:	1d39      	adds	r1, r7, #4
 800c4a6:	f107 0308 	add.w	r3, r7, #8
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f7 f98c 	bl	80037c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	9202      	str	r2, [sp, #8]
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	460a      	mov	r2, r1
 800c4c2:	491e      	ldr	r1, [pc, #120]	; (800c53c <vTaskStartScheduler+0xa8>)
 800c4c4:	481e      	ldr	r0, [pc, #120]	; (800c540 <vTaskStartScheduler+0xac>)
 800c4c6:	f7ff fe13 	bl	800c0f0 <xTaskCreateStatic>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	4a1d      	ldr	r2, [pc, #116]	; (800c544 <vTaskStartScheduler+0xb0>)
 800c4ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c4d0:	4b1c      	ldr	r3, [pc, #112]	; (800c544 <vTaskStartScheduler+0xb0>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	617b      	str	r3, [r7, #20]
 800c4dc:	e001      	b.n	800c4e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d116      	bne.n	800c516 <vTaskStartScheduler+0x82>
	__asm volatile
 800c4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ec:	f383 8811 	msr	BASEPRI, r3
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	613b      	str	r3, [r7, #16]
}
 800c4fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c4fc:	4b12      	ldr	r3, [pc, #72]	; (800c548 <vTaskStartScheduler+0xb4>)
 800c4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c502:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c504:	4b11      	ldr	r3, [pc, #68]	; (800c54c <vTaskStartScheduler+0xb8>)
 800c506:	2201      	movs	r2, #1
 800c508:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c50a:	4b11      	ldr	r3, [pc, #68]	; (800c550 <vTaskStartScheduler+0xbc>)
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c510:	f001 f87e 	bl	800d610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c514:	e00e      	b.n	800c534 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51c:	d10a      	bne.n	800c534 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	60fb      	str	r3, [r7, #12]
}
 800c530:	bf00      	nop
 800c532:	e7fe      	b.n	800c532 <vTaskStartScheduler+0x9e>
}
 800c534:	bf00      	nop
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	080278ec 	.word	0x080278ec
 800c540:	0800cb2d 	.word	0x0800cb2d
 800c544:	20000d98 	.word	0x20000d98
 800c548:	20000d94 	.word	0x20000d94
 800c54c:	20000d80 	.word	0x20000d80
 800c550:	20000d78 	.word	0x20000d78

0800c554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c554:	b480      	push	{r7}
 800c556:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c558:	4b04      	ldr	r3, [pc, #16]	; (800c56c <vTaskSuspendAll+0x18>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	3301      	adds	r3, #1
 800c55e:	4a03      	ldr	r2, [pc, #12]	; (800c56c <vTaskSuspendAll+0x18>)
 800c560:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c562:	bf00      	nop
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	20000d9c 	.word	0x20000d9c

0800c570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c57a:	2300      	movs	r3, #0
 800c57c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c57e:	4b41      	ldr	r3, [pc, #260]	; (800c684 <xTaskResumeAll+0x114>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10a      	bne.n	800c59c <xTaskResumeAll+0x2c>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58a:	f383 8811 	msr	BASEPRI, r3
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	603b      	str	r3, [r7, #0]
}
 800c598:	bf00      	nop
 800c59a:	e7fe      	b.n	800c59a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c59c:	f001 f8da 	bl	800d754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5a0:	4b38      	ldr	r3, [pc, #224]	; (800c684 <xTaskResumeAll+0x114>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	4a37      	ldr	r2, [pc, #220]	; (800c684 <xTaskResumeAll+0x114>)
 800c5a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5aa:	4b36      	ldr	r3, [pc, #216]	; (800c684 <xTaskResumeAll+0x114>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d161      	bne.n	800c676 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5b2:	4b35      	ldr	r3, [pc, #212]	; (800c688 <xTaskResumeAll+0x118>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d05d      	beq.n	800c676 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5ba:	e02e      	b.n	800c61a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5bc:	4b33      	ldr	r3, [pc, #204]	; (800c68c <xTaskResumeAll+0x11c>)
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	3318      	adds	r3, #24
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fe09 	bl	800b1e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fe04 	bl	800b1e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5dc:	2201      	movs	r2, #1
 800c5de:	409a      	lsls	r2, r3
 800c5e0:	4b2b      	ldr	r3, [pc, #172]	; (800c690 <xTaskResumeAll+0x120>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	4a2a      	ldr	r2, [pc, #168]	; (800c690 <xTaskResumeAll+0x120>)
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4a27      	ldr	r2, [pc, #156]	; (800c694 <xTaskResumeAll+0x124>)
 800c5f8:	441a      	add	r2, r3
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	4619      	mov	r1, r3
 800c600:	4610      	mov	r0, r2
 800c602:	f7fe fd90 	bl	800b126 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60a:	4b23      	ldr	r3, [pc, #140]	; (800c698 <xTaskResumeAll+0x128>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c610:	429a      	cmp	r2, r3
 800c612:	d302      	bcc.n	800c61a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c614:	4b21      	ldr	r3, [pc, #132]	; (800c69c <xTaskResumeAll+0x12c>)
 800c616:	2201      	movs	r2, #1
 800c618:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c61a:	4b1c      	ldr	r3, [pc, #112]	; (800c68c <xTaskResumeAll+0x11c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1cc      	bne.n	800c5bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c628:	f000 fb38 	bl	800cc9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c62c:	4b1c      	ldr	r3, [pc, #112]	; (800c6a0 <xTaskResumeAll+0x130>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d010      	beq.n	800c65a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c638:	f000 f836 	bl	800c6a8 <xTaskIncrementTick>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d002      	beq.n	800c648 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c642:	4b16      	ldr	r3, [pc, #88]	; (800c69c <xTaskResumeAll+0x12c>)
 800c644:	2201      	movs	r2, #1
 800c646:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3b01      	subs	r3, #1
 800c64c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1f1      	bne.n	800c638 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c654:	4b12      	ldr	r3, [pc, #72]	; (800c6a0 <xTaskResumeAll+0x130>)
 800c656:	2200      	movs	r2, #0
 800c658:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c65a:	4b10      	ldr	r3, [pc, #64]	; (800c69c <xTaskResumeAll+0x12c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d009      	beq.n	800c676 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c662:	2301      	movs	r3, #1
 800c664:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c666:	4b0f      	ldr	r3, [pc, #60]	; (800c6a4 <xTaskResumeAll+0x134>)
 800c668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c676:	f001 f89d 	bl	800d7b4 <vPortExitCritical>

	return xAlreadyYielded;
 800c67a:	68bb      	ldr	r3, [r7, #8]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	20000d9c 	.word	0x20000d9c
 800c688:	20000d74 	.word	0x20000d74
 800c68c:	20000d34 	.word	0x20000d34
 800c690:	20000d7c 	.word	0x20000d7c
 800c694:	20000c78 	.word	0x20000c78
 800c698:	20000c74 	.word	0x20000c74
 800c69c:	20000d88 	.word	0x20000d88
 800c6a0:	20000d84 	.word	0x20000d84
 800c6a4:	e000ed04 	.word	0xe000ed04

0800c6a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6b2:	4b4e      	ldr	r3, [pc, #312]	; (800c7ec <xTaskIncrementTick+0x144>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f040 808e 	bne.w	800c7d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c6bc:	4b4c      	ldr	r3, [pc, #304]	; (800c7f0 <xTaskIncrementTick+0x148>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c6c4:	4a4a      	ldr	r2, [pc, #296]	; (800c7f0 <xTaskIncrementTick+0x148>)
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d120      	bne.n	800c712 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c6d0:	4b48      	ldr	r3, [pc, #288]	; (800c7f4 <xTaskIncrementTick+0x14c>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00a      	beq.n	800c6f0 <xTaskIncrementTick+0x48>
	__asm volatile
 800c6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6de:	f383 8811 	msr	BASEPRI, r3
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	603b      	str	r3, [r7, #0]
}
 800c6ec:	bf00      	nop
 800c6ee:	e7fe      	b.n	800c6ee <xTaskIncrementTick+0x46>
 800c6f0:	4b40      	ldr	r3, [pc, #256]	; (800c7f4 <xTaskIncrementTick+0x14c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	60fb      	str	r3, [r7, #12]
 800c6f6:	4b40      	ldr	r3, [pc, #256]	; (800c7f8 <xTaskIncrementTick+0x150>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a3e      	ldr	r2, [pc, #248]	; (800c7f4 <xTaskIncrementTick+0x14c>)
 800c6fc:	6013      	str	r3, [r2, #0]
 800c6fe:	4a3e      	ldr	r2, [pc, #248]	; (800c7f8 <xTaskIncrementTick+0x150>)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	4b3d      	ldr	r3, [pc, #244]	; (800c7fc <xTaskIncrementTick+0x154>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	3301      	adds	r3, #1
 800c70a:	4a3c      	ldr	r2, [pc, #240]	; (800c7fc <xTaskIncrementTick+0x154>)
 800c70c:	6013      	str	r3, [r2, #0]
 800c70e:	f000 fac5 	bl	800cc9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c712:	4b3b      	ldr	r3, [pc, #236]	; (800c800 <xTaskIncrementTick+0x158>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d348      	bcc.n	800c7ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c71c:	4b35      	ldr	r3, [pc, #212]	; (800c7f4 <xTaskIncrementTick+0x14c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d104      	bne.n	800c730 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c726:	4b36      	ldr	r3, [pc, #216]	; (800c800 <xTaskIncrementTick+0x158>)
 800c728:	f04f 32ff 	mov.w	r2, #4294967295
 800c72c:	601a      	str	r2, [r3, #0]
					break;
 800c72e:	e03e      	b.n	800c7ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c730:	4b30      	ldr	r3, [pc, #192]	; (800c7f4 <xTaskIncrementTick+0x14c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	429a      	cmp	r2, r3
 800c746:	d203      	bcs.n	800c750 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c748:	4a2d      	ldr	r2, [pc, #180]	; (800c800 <xTaskIncrementTick+0x158>)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c74e:	e02e      	b.n	800c7ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	3304      	adds	r3, #4
 800c754:	4618      	mov	r0, r3
 800c756:	f7fe fd43 	bl	800b1e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d004      	beq.n	800c76c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	3318      	adds	r3, #24
 800c766:	4618      	mov	r0, r3
 800c768:	f7fe fd3a 	bl	800b1e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c770:	2201      	movs	r2, #1
 800c772:	409a      	lsls	r2, r3
 800c774:	4b23      	ldr	r3, [pc, #140]	; (800c804 <xTaskIncrementTick+0x15c>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4313      	orrs	r3, r2
 800c77a:	4a22      	ldr	r2, [pc, #136]	; (800c804 <xTaskIncrementTick+0x15c>)
 800c77c:	6013      	str	r3, [r2, #0]
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c782:	4613      	mov	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	4a1f      	ldr	r2, [pc, #124]	; (800c808 <xTaskIncrementTick+0x160>)
 800c78c:	441a      	add	r2, r3
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	3304      	adds	r3, #4
 800c792:	4619      	mov	r1, r3
 800c794:	4610      	mov	r0, r2
 800c796:	f7fe fcc6 	bl	800b126 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c79e:	4b1b      	ldr	r3, [pc, #108]	; (800c80c <xTaskIncrementTick+0x164>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d3b9      	bcc.n	800c71c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7ac:	e7b6      	b.n	800c71c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c7ae:	4b17      	ldr	r3, [pc, #92]	; (800c80c <xTaskIncrementTick+0x164>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b4:	4914      	ldr	r1, [pc, #80]	; (800c808 <xTaskIncrementTick+0x160>)
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	4413      	add	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	440b      	add	r3, r1
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d901      	bls.n	800c7ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c7ca:	4b11      	ldr	r3, [pc, #68]	; (800c810 <xTaskIncrementTick+0x168>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d007      	beq.n	800c7e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	617b      	str	r3, [r7, #20]
 800c7d6:	e004      	b.n	800c7e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c7d8:	4b0e      	ldr	r3, [pc, #56]	; (800c814 <xTaskIncrementTick+0x16c>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	4a0d      	ldr	r2, [pc, #52]	; (800c814 <xTaskIncrementTick+0x16c>)
 800c7e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c7e2:	697b      	ldr	r3, [r7, #20]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	20000d9c 	.word	0x20000d9c
 800c7f0:	20000d78 	.word	0x20000d78
 800c7f4:	20000d2c 	.word	0x20000d2c
 800c7f8:	20000d30 	.word	0x20000d30
 800c7fc:	20000d8c 	.word	0x20000d8c
 800c800:	20000d94 	.word	0x20000d94
 800c804:	20000d7c 	.word	0x20000d7c
 800c808:	20000c78 	.word	0x20000c78
 800c80c:	20000c74 	.word	0x20000c74
 800c810:	20000d88 	.word	0x20000d88
 800c814:	20000d84 	.word	0x20000d84

0800c818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c81e:	4b39      	ldr	r3, [pc, #228]	; (800c904 <vTaskSwitchContext+0xec>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c826:	4b38      	ldr	r3, [pc, #224]	; (800c908 <vTaskSwitchContext+0xf0>)
 800c828:	2201      	movs	r2, #1
 800c82a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c82c:	e066      	b.n	800c8fc <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800c82e:	4b36      	ldr	r3, [pc, #216]	; (800c908 <vTaskSwitchContext+0xf0>)
 800c830:	2200      	movs	r2, #0
 800c832:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c834:	4b35      	ldr	r3, [pc, #212]	; (800c90c <vTaskSwitchContext+0xf4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83a:	61fb      	str	r3, [r7, #28]
 800c83c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c840:	61bb      	str	r3, [r7, #24]
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69ba      	ldr	r2, [r7, #24]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d111      	bne.n	800c870 <vTaskSwitchContext+0x58>
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	3304      	adds	r3, #4
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	69ba      	ldr	r2, [r7, #24]
 800c854:	429a      	cmp	r2, r3
 800c856:	d10b      	bne.n	800c870 <vTaskSwitchContext+0x58>
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	3308      	adds	r3, #8
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	429a      	cmp	r2, r3
 800c862:	d105      	bne.n	800c870 <vTaskSwitchContext+0x58>
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	330c      	adds	r3, #12
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	69ba      	ldr	r2, [r7, #24]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d008      	beq.n	800c882 <vTaskSwitchContext+0x6a>
 800c870:	4b26      	ldr	r3, [pc, #152]	; (800c90c <vTaskSwitchContext+0xf4>)
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	4b25      	ldr	r3, [pc, #148]	; (800c90c <vTaskSwitchContext+0xf4>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	3334      	adds	r3, #52	; 0x34
 800c87a:	4619      	mov	r1, r3
 800c87c:	4610      	mov	r0, r2
 800c87e:	f7f6 ff90 	bl	80037a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c882:	4b23      	ldr	r3, [pc, #140]	; (800c910 <vTaskSwitchContext+0xf8>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	fab3 f383 	clz	r3, r3
 800c88e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c890:	7afb      	ldrb	r3, [r7, #11]
 800c892:	f1c3 031f 	rsb	r3, r3, #31
 800c896:	617b      	str	r3, [r7, #20]
 800c898:	491e      	ldr	r1, [pc, #120]	; (800c914 <vTaskSwitchContext+0xfc>)
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	4613      	mov	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	4413      	add	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	440b      	add	r3, r1
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <vTaskSwitchContext+0xaa>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	607b      	str	r3, [r7, #4]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <vTaskSwitchContext+0xa8>
 800c8c2:	697a      	ldr	r2, [r7, #20]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4413      	add	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4a11      	ldr	r2, [pc, #68]	; (800c914 <vTaskSwitchContext+0xfc>)
 800c8ce:	4413      	add	r3, r2
 800c8d0:	613b      	str	r3, [r7, #16]
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	605a      	str	r2, [r3, #4]
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	3308      	adds	r3, #8
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d104      	bne.n	800c8f2 <vTaskSwitchContext+0xda>
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	605a      	str	r2, [r3, #4]
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	4a04      	ldr	r2, [pc, #16]	; (800c90c <vTaskSwitchContext+0xf4>)
 800c8fa:	6013      	str	r3, [r2, #0]
}
 800c8fc:	bf00      	nop
 800c8fe:	3720      	adds	r7, #32
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	20000d9c 	.word	0x20000d9c
 800c908:	20000d88 	.word	0x20000d88
 800c90c:	20000c74 	.word	0x20000c74
 800c910:	20000d7c 	.word	0x20000d7c
 800c914:	20000c78 	.word	0x20000c78

0800c918 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10a      	bne.n	800c93e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	60fb      	str	r3, [r7, #12]
}
 800c93a:	bf00      	nop
 800c93c:	e7fe      	b.n	800c93c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c93e:	4b07      	ldr	r3, [pc, #28]	; (800c95c <vTaskPlaceOnEventList+0x44>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	3318      	adds	r3, #24
 800c944:	4619      	mov	r1, r3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7fe fc11 	bl	800b16e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c94c:	2101      	movs	r1, #1
 800c94e:	6838      	ldr	r0, [r7, #0]
 800c950:	f000 fd6a 	bl	800d428 <prvAddCurrentTaskToDelayedList>
}
 800c954:	bf00      	nop
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	20000c74 	.word	0x20000c74

0800c960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10a      	bne.n	800c98c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60fb      	str	r3, [r7, #12]
}
 800c988:	bf00      	nop
 800c98a:	e7fe      	b.n	800c98a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	3318      	adds	r3, #24
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe fc25 	bl	800b1e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c996:	4b1d      	ldr	r3, [pc, #116]	; (800ca0c <xTaskRemoveFromEventList+0xac>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d11c      	bne.n	800c9d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe fc1c 	bl	800b1e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	409a      	lsls	r2, r3
 800c9b0:	4b17      	ldr	r3, [pc, #92]	; (800ca10 <xTaskRemoveFromEventList+0xb0>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	4a16      	ldr	r2, [pc, #88]	; (800ca10 <xTaskRemoveFromEventList+0xb0>)
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9be:	4613      	mov	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4a13      	ldr	r2, [pc, #76]	; (800ca14 <xTaskRemoveFromEventList+0xb4>)
 800c9c8:	441a      	add	r2, r3
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f7fe fba8 	bl	800b126 <vListInsertEnd>
 800c9d6:	e005      	b.n	800c9e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	3318      	adds	r3, #24
 800c9dc:	4619      	mov	r1, r3
 800c9de:	480e      	ldr	r0, [pc, #56]	; (800ca18 <xTaskRemoveFromEventList+0xb8>)
 800c9e0:	f7fe fba1 	bl	800b126 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ca1c <xTaskRemoveFromEventList+0xbc>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d905      	bls.n	800c9fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9f6:	4b0a      	ldr	r3, [pc, #40]	; (800ca20 <xTaskRemoveFromEventList+0xc0>)
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	601a      	str	r2, [r3, #0]
 800c9fc:	e001      	b.n	800ca02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca02:	697b      	ldr	r3, [r7, #20]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	20000d9c 	.word	0x20000d9c
 800ca10:	20000d7c 	.word	0x20000d7c
 800ca14:	20000c78 	.word	0x20000c78
 800ca18:	20000d34 	.word	0x20000d34
 800ca1c:	20000c74 	.word	0x20000c74
 800ca20:	20000d88 	.word	0x20000d88

0800ca24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca2c:	4b06      	ldr	r3, [pc, #24]	; (800ca48 <vTaskInternalSetTimeOutState+0x24>)
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca34:	4b05      	ldr	r3, [pc, #20]	; (800ca4c <vTaskInternalSetTimeOutState+0x28>)
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	605a      	str	r2, [r3, #4]
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	20000d8c 	.word	0x20000d8c
 800ca4c:	20000d78 	.word	0x20000d78

0800ca50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b088      	sub	sp, #32
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10a      	bne.n	800ca76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	613b      	str	r3, [r7, #16]
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10a      	bne.n	800ca92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	60fb      	str	r3, [r7, #12]
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca92:	f000 fe5f 	bl	800d754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca96:	4b1d      	ldr	r3, [pc, #116]	; (800cb0c <xTaskCheckForTimeOut+0xbc>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caae:	d102      	bne.n	800cab6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cab0:	2300      	movs	r3, #0
 800cab2:	61fb      	str	r3, [r7, #28]
 800cab4:	e023      	b.n	800cafe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	4b15      	ldr	r3, [pc, #84]	; (800cb10 <xTaskCheckForTimeOut+0xc0>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d007      	beq.n	800cad2 <xTaskCheckForTimeOut+0x82>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	69ba      	ldr	r2, [r7, #24]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d302      	bcc.n	800cad2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cacc:	2301      	movs	r3, #1
 800cace:	61fb      	str	r3, [r7, #28]
 800cad0:	e015      	b.n	800cafe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d20b      	bcs.n	800caf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	1ad2      	subs	r2, r2, r3
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff ff9b 	bl	800ca24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800caee:	2300      	movs	r3, #0
 800caf0:	61fb      	str	r3, [r7, #28]
 800caf2:	e004      	b.n	800cafe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	2200      	movs	r2, #0
 800caf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cafa:	2301      	movs	r3, #1
 800cafc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cafe:	f000 fe59 	bl	800d7b4 <vPortExitCritical>

	return xReturn;
 800cb02:	69fb      	ldr	r3, [r7, #28]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3720      	adds	r7, #32
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	20000d78 	.word	0x20000d78
 800cb10:	20000d8c 	.word	0x20000d8c

0800cb14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb14:	b480      	push	{r7}
 800cb16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb18:	4b03      	ldr	r3, [pc, #12]	; (800cb28 <vTaskMissedYield+0x14>)
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	601a      	str	r2, [r3, #0]
}
 800cb1e:	bf00      	nop
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	20000d88 	.word	0x20000d88

0800cb2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb34:	f000 f854 	bl	800cbe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb38:	4b07      	ldr	r3, [pc, #28]	; (800cb58 <prvIdleTask+0x2c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d907      	bls.n	800cb50 <prvIdleTask+0x24>
			{
				taskYIELD();
 800cb40:	4b06      	ldr	r3, [pc, #24]	; (800cb5c <prvIdleTask+0x30>)
 800cb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb46:	601a      	str	r2, [r3, #0]
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800cb50:	f7f6 fe20 	bl	8003794 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800cb54:	e7ee      	b.n	800cb34 <prvIdleTask+0x8>
 800cb56:	bf00      	nop
 800cb58:	20000c78 	.word	0x20000c78
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb66:	2300      	movs	r3, #0
 800cb68:	607b      	str	r3, [r7, #4]
 800cb6a:	e00c      	b.n	800cb86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4a12      	ldr	r2, [pc, #72]	; (800cbc0 <prvInitialiseTaskLists+0x60>)
 800cb78:	4413      	add	r3, r2
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe faa6 	bl	800b0cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3301      	adds	r3, #1
 800cb84:	607b      	str	r3, [r7, #4]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b06      	cmp	r3, #6
 800cb8a:	d9ef      	bls.n	800cb6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb8c:	480d      	ldr	r0, [pc, #52]	; (800cbc4 <prvInitialiseTaskLists+0x64>)
 800cb8e:	f7fe fa9d 	bl	800b0cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb92:	480d      	ldr	r0, [pc, #52]	; (800cbc8 <prvInitialiseTaskLists+0x68>)
 800cb94:	f7fe fa9a 	bl	800b0cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb98:	480c      	ldr	r0, [pc, #48]	; (800cbcc <prvInitialiseTaskLists+0x6c>)
 800cb9a:	f7fe fa97 	bl	800b0cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb9e:	480c      	ldr	r0, [pc, #48]	; (800cbd0 <prvInitialiseTaskLists+0x70>)
 800cba0:	f7fe fa94 	bl	800b0cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cba4:	480b      	ldr	r0, [pc, #44]	; (800cbd4 <prvInitialiseTaskLists+0x74>)
 800cba6:	f7fe fa91 	bl	800b0cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cbaa:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <prvInitialiseTaskLists+0x78>)
 800cbac:	4a05      	ldr	r2, [pc, #20]	; (800cbc4 <prvInitialiseTaskLists+0x64>)
 800cbae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cbb0:	4b0a      	ldr	r3, [pc, #40]	; (800cbdc <prvInitialiseTaskLists+0x7c>)
 800cbb2:	4a05      	ldr	r2, [pc, #20]	; (800cbc8 <prvInitialiseTaskLists+0x68>)
 800cbb4:	601a      	str	r2, [r3, #0]
}
 800cbb6:	bf00      	nop
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	20000c78 	.word	0x20000c78
 800cbc4:	20000d04 	.word	0x20000d04
 800cbc8:	20000d18 	.word	0x20000d18
 800cbcc:	20000d34 	.word	0x20000d34
 800cbd0:	20000d48 	.word	0x20000d48
 800cbd4:	20000d60 	.word	0x20000d60
 800cbd8:	20000d2c 	.word	0x20000d2c
 800cbdc:	20000d30 	.word	0x20000d30

0800cbe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbe6:	e019      	b.n	800cc1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbe8:	f000 fdb4 	bl	800d754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbec:	4b10      	ldr	r3, [pc, #64]	; (800cc30 <prvCheckTasksWaitingTermination+0x50>)
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3304      	adds	r3, #4
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe faf1 	bl	800b1e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbfe:	4b0d      	ldr	r3, [pc, #52]	; (800cc34 <prvCheckTasksWaitingTermination+0x54>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3b01      	subs	r3, #1
 800cc04:	4a0b      	ldr	r2, [pc, #44]	; (800cc34 <prvCheckTasksWaitingTermination+0x54>)
 800cc06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc08:	4b0b      	ldr	r3, [pc, #44]	; (800cc38 <prvCheckTasksWaitingTermination+0x58>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	4a0a      	ldr	r2, [pc, #40]	; (800cc38 <prvCheckTasksWaitingTermination+0x58>)
 800cc10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc12:	f000 fdcf 	bl	800d7b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f810 	bl	800cc3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <prvCheckTasksWaitingTermination+0x58>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1e1      	bne.n	800cbe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	20000d48 	.word	0x20000d48
 800cc34:	20000d74 	.word	0x20000d74
 800cc38:	20000d5c 	.word	0x20000d5c

0800cc3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d108      	bne.n	800cc60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 ff70 	bl	800db38 <vPortFree>
				vPortFree( pxTCB );
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 ff6d 	bl	800db38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc5e:	e018      	b.n	800cc92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d103      	bne.n	800cc72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 ff64 	bl	800db38 <vPortFree>
	}
 800cc70:	e00f      	b.n	800cc92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	d00a      	beq.n	800cc92 <prvDeleteTCB+0x56>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	60fb      	str	r3, [r7, #12]
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <prvDeleteTCB+0x54>
	}
 800cc92:	bf00      	nop
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
	...

0800cc9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cca2:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <prvResetNextTaskUnblockTime+0x38>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d104      	bne.n	800ccb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ccac:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ccb4:	e008      	b.n	800ccc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb6:	4b07      	ldr	r3, [pc, #28]	; (800ccd4 <prvResetNextTaskUnblockTime+0x38>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	4a04      	ldr	r2, [pc, #16]	; (800ccd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ccc6:	6013      	str	r3, [r2, #0]
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr
 800ccd4:	20000d2c 	.word	0x20000d2c
 800ccd8:	20000d94 	.word	0x20000d94

0800ccdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cce2:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <xTaskGetSchedulerState+0x34>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d102      	bne.n	800ccf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccea:	2301      	movs	r3, #1
 800ccec:	607b      	str	r3, [r7, #4]
 800ccee:	e008      	b.n	800cd02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccf0:	4b08      	ldr	r3, [pc, #32]	; (800cd14 <xTaskGetSchedulerState+0x38>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d102      	bne.n	800ccfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	607b      	str	r3, [r7, #4]
 800ccfc:	e001      	b.n	800cd02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd02:	687b      	ldr	r3, [r7, #4]
	}
 800cd04:	4618      	mov	r0, r3
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	20000d80 	.word	0x20000d80
 800cd14:	20000d9c 	.word	0x20000d9c

0800cd18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cd24:	2300      	movs	r3, #0
 800cd26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d05e      	beq.n	800cdec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd32:	4b31      	ldr	r3, [pc, #196]	; (800cdf8 <xTaskPriorityInherit+0xe0>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d24e      	bcs.n	800cdda <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	db06      	blt.n	800cd52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd44:	4b2c      	ldr	r3, [pc, #176]	; (800cdf8 <xTaskPriorityInherit+0xe0>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	f1c3 0207 	rsb	r2, r3, #7
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	6959      	ldr	r1, [r3, #20]
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4a26      	ldr	r2, [pc, #152]	; (800cdfc <xTaskPriorityInherit+0xe4>)
 800cd64:	4413      	add	r3, r2
 800cd66:	4299      	cmp	r1, r3
 800cd68:	d12f      	bne.n	800cdca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe fa36 	bl	800b1e0 <uxListRemove>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10a      	bne.n	800cd90 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7e:	2201      	movs	r2, #1
 800cd80:	fa02 f303 	lsl.w	r3, r2, r3
 800cd84:	43da      	mvns	r2, r3
 800cd86:	4b1e      	ldr	r3, [pc, #120]	; (800ce00 <xTaskPriorityInherit+0xe8>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	4a1c      	ldr	r2, [pc, #112]	; (800ce00 <xTaskPriorityInherit+0xe8>)
 800cd8e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd90:	4b19      	ldr	r3, [pc, #100]	; (800cdf8 <xTaskPriorityInherit+0xe0>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9e:	2201      	movs	r2, #1
 800cda0:	409a      	lsls	r2, r3
 800cda2:	4b17      	ldr	r3, [pc, #92]	; (800ce00 <xTaskPriorityInherit+0xe8>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	4a15      	ldr	r2, [pc, #84]	; (800ce00 <xTaskPriorityInherit+0xe8>)
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4a10      	ldr	r2, [pc, #64]	; (800cdfc <xTaskPriorityInherit+0xe4>)
 800cdba:	441a      	add	r2, r3
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	4610      	mov	r0, r2
 800cdc4:	f7fe f9af 	bl	800b126 <vListInsertEnd>
 800cdc8:	e004      	b.n	800cdd4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cdca:	4b0b      	ldr	r3, [pc, #44]	; (800cdf8 <xTaskPriorityInherit+0xe0>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	e008      	b.n	800cdec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdde:	4b06      	ldr	r3, [pc, #24]	; (800cdf8 <xTaskPriorityInherit+0xe0>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d201      	bcs.n	800cdec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cde8:	2301      	movs	r3, #1
 800cdea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdec:	68fb      	ldr	r3, [r7, #12]
	}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20000c74 	.word	0x20000c74
 800cdfc:	20000c78 	.word	0x20000c78
 800ce00:	20000d7c 	.word	0x20000d7c

0800ce04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce10:	2300      	movs	r3, #0
 800ce12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d06e      	beq.n	800cef8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ce1a:	4b3a      	ldr	r3, [pc, #232]	; (800cf04 <xTaskPriorityDisinherit+0x100>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	693a      	ldr	r2, [r7, #16]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d00a      	beq.n	800ce3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ce24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce28:	f383 8811 	msr	BASEPRI, r3
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f3bf 8f4f 	dsb	sy
 800ce34:	60fb      	str	r3, [r7, #12]
}
 800ce36:	bf00      	nop
 800ce38:	e7fe      	b.n	800ce38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10a      	bne.n	800ce58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	60bb      	str	r3, [r7, #8]
}
 800ce54:	bf00      	nop
 800ce56:	e7fe      	b.n	800ce56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce5c:	1e5a      	subs	r2, r3, #1
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d044      	beq.n	800cef8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d140      	bne.n	800cef8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	3304      	adds	r3, #4
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fe f9b0 	bl	800b1e0 <uxListRemove>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d115      	bne.n	800ceb2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8a:	491f      	ldr	r1, [pc, #124]	; (800cf08 <xTaskPriorityDisinherit+0x104>)
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	4413      	add	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	440b      	add	r3, r1
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10a      	bne.n	800ceb2 <xTaskPriorityDisinherit+0xae>
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea0:	2201      	movs	r2, #1
 800cea2:	fa02 f303 	lsl.w	r3, r2, r3
 800cea6:	43da      	mvns	r2, r3
 800cea8:	4b18      	ldr	r3, [pc, #96]	; (800cf0c <xTaskPriorityDisinherit+0x108>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4013      	ands	r3, r2
 800ceae:	4a17      	ldr	r2, [pc, #92]	; (800cf0c <xTaskPriorityDisinherit+0x108>)
 800ceb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebe:	f1c3 0207 	rsb	r2, r3, #7
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceca:	2201      	movs	r2, #1
 800cecc:	409a      	lsls	r2, r3
 800cece:	4b0f      	ldr	r3, [pc, #60]	; (800cf0c <xTaskPriorityDisinherit+0x108>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	4a0d      	ldr	r2, [pc, #52]	; (800cf0c <xTaskPriorityDisinherit+0x108>)
 800ced6:	6013      	str	r3, [r2, #0]
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cedc:	4613      	mov	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	4a08      	ldr	r2, [pc, #32]	; (800cf08 <xTaskPriorityDisinherit+0x104>)
 800cee6:	441a      	add	r2, r3
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	3304      	adds	r3, #4
 800ceec:	4619      	mov	r1, r3
 800ceee:	4610      	mov	r0, r2
 800cef0:	f7fe f919 	bl	800b126 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cef4:	2301      	movs	r3, #1
 800cef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cef8:	697b      	ldr	r3, [r7, #20]
	}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20000c74 	.word	0x20000c74
 800cf08:	20000c78 	.word	0x20000c78
 800cf0c:	20000d7c 	.word	0x20000d7c

0800cf10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b088      	sub	sp, #32
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d077      	beq.n	800d018 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10a      	bne.n	800cf46 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	60fb      	str	r3, [r7, #12]
}
 800cf42:	bf00      	nop
 800cf44:	e7fe      	b.n	800cf44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d902      	bls.n	800cf56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	61fb      	str	r3, [r7, #28]
 800cf54:	e002      	b.n	800cf5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	69fa      	ldr	r2, [r7, #28]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d058      	beq.n	800d018 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf6a:	697a      	ldr	r2, [r7, #20]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d153      	bne.n	800d018 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cf70:	4b2b      	ldr	r3, [pc, #172]	; (800d020 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	69ba      	ldr	r2, [r7, #24]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d10a      	bne.n	800cf90 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	60bb      	str	r3, [r7, #8]
}
 800cf8c:	bf00      	nop
 800cf8e:	e7fe      	b.n	800cf8e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	69fa      	ldr	r2, [r7, #28]
 800cf9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	699b      	ldr	r3, [r3, #24]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	db04      	blt.n	800cfae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	f1c3 0207 	rsb	r2, r3, #7
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	6959      	ldr	r1, [r3, #20]
 800cfb2:	693a      	ldr	r2, [r7, #16]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	4a19      	ldr	r2, [pc, #100]	; (800d024 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cfbe:	4413      	add	r3, r2
 800cfc0:	4299      	cmp	r1, r3
 800cfc2:	d129      	bne.n	800d018 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fe f909 	bl	800b1e0 <uxListRemove>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10a      	bne.n	800cfea <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	2201      	movs	r2, #1
 800cfda:	fa02 f303 	lsl.w	r3, r2, r3
 800cfde:	43da      	mvns	r2, r3
 800cfe0:	4b11      	ldr	r3, [pc, #68]	; (800d028 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	4a10      	ldr	r2, [pc, #64]	; (800d028 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfe8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfee:	2201      	movs	r2, #1
 800cff0:	409a      	lsls	r2, r3
 800cff2:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	4a0b      	ldr	r2, [pc, #44]	; (800d028 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d000:	4613      	mov	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4413      	add	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4a06      	ldr	r2, [pc, #24]	; (800d024 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d00a:	441a      	add	r2, r3
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	3304      	adds	r3, #4
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	f7fe f887 	bl	800b126 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d018:	bf00      	nop
 800d01a:	3720      	adds	r7, #32
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20000c74 	.word	0x20000c74
 800d024:	20000c78 	.word	0x20000c78
 800d028:	20000d7c 	.word	0x20000d7c

0800d02c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d02c:	b480      	push	{r7}
 800d02e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d030:	4b07      	ldr	r3, [pc, #28]	; (800d050 <pvTaskIncrementMutexHeldCount+0x24>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d004      	beq.n	800d042 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d038:	4b05      	ldr	r3, [pc, #20]	; (800d050 <pvTaskIncrementMutexHeldCount+0x24>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d03e:	3201      	adds	r2, #1
 800d040:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d042:	4b03      	ldr	r3, [pc, #12]	; (800d050 <pvTaskIncrementMutexHeldCount+0x24>)
 800d044:	681b      	ldr	r3, [r3, #0]
	}
 800d046:	4618      	mov	r0, r3
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr
 800d050:	20000c74 	.word	0x20000c74

0800d054 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d054:	b580      	push	{r7, lr}
 800d056:	b086      	sub	sp, #24
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	607a      	str	r2, [r7, #4]
 800d060:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d062:	f000 fb77 	bl	800d754 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d066:	4b26      	ldr	r3, [pc, #152]	; (800d100 <xTaskNotifyWait+0xac>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b02      	cmp	r3, #2
 800d072:	d01a      	beq.n	800d0aa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d074:	4b22      	ldr	r3, [pc, #136]	; (800d100 <xTaskNotifyWait+0xac>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	43d2      	mvns	r2, r2
 800d07e:	400a      	ands	r2, r1
 800d080:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d082:	4b1f      	ldr	r3, [pc, #124]	; (800d100 <xTaskNotifyWait+0xac>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2201      	movs	r2, #1
 800d088:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00b      	beq.n	800d0aa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d092:	2101      	movs	r1, #1
 800d094:	6838      	ldr	r0, [r7, #0]
 800d096:	f000 f9c7 	bl	800d428 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d09a:	4b1a      	ldr	r3, [pc, #104]	; (800d104 <xTaskNotifyWait+0xb0>)
 800d09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d0aa:	f000 fb83 	bl	800d7b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d0ae:	f000 fb51 	bl	800d754 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d004      	beq.n	800d0c2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d0b8:	4b11      	ldr	r3, [pc, #68]	; (800d100 <xTaskNotifyWait+0xac>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d0c2:	4b0f      	ldr	r3, [pc, #60]	; (800d100 <xTaskNotifyWait+0xac>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d002      	beq.n	800d0d6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	617b      	str	r3, [r7, #20]
 800d0d4:	e008      	b.n	800d0e8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d0d6:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <xTaskNotifyWait+0xac>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	43d2      	mvns	r2, r2
 800d0e0:	400a      	ands	r2, r1
 800d0e2:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0e8:	4b05      	ldr	r3, [pc, #20]	; (800d100 <xTaskNotifyWait+0xac>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 800d0f2:	f000 fb5f 	bl	800d7b4 <vPortExitCritical>

		return xReturn;
 800d0f6:	697b      	ldr	r3, [r7, #20]
	}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3718      	adds	r7, #24
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	20000c74 	.word	0x20000c74
 800d104:	e000ed04 	.word	0xe000ed04

0800d108 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08a      	sub	sp, #40	; 0x28
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	603b      	str	r3, [r7, #0]
 800d114:	4613      	mov	r3, r2
 800d116:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d118:	2301      	movs	r3, #1
 800d11a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10a      	bne.n	800d138 <xTaskGenericNotify+0x30>
	__asm volatile
 800d122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	61bb      	str	r3, [r7, #24]
}
 800d134:	bf00      	nop
 800d136:	e7fe      	b.n	800d136 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d13c:	f000 fb0a 	bl	800d754 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d146:	6a3b      	ldr	r3, [r7, #32]
 800d148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d14e:	6a3b      	ldr	r3, [r7, #32]
 800d150:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d154:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	2202      	movs	r2, #2
 800d15a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800d15e:	79fb      	ldrb	r3, [r7, #7]
 800d160:	2b04      	cmp	r3, #4
 800d162:	d828      	bhi.n	800d1b6 <xTaskGenericNotify+0xae>
 800d164:	a201      	add	r2, pc, #4	; (adr r2, 800d16c <xTaskGenericNotify+0x64>)
 800d166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d16a:	bf00      	nop
 800d16c:	0800d1d7 	.word	0x0800d1d7
 800d170:	0800d181 	.word	0x0800d181
 800d174:	0800d18f 	.word	0x0800d18f
 800d178:	0800d19b 	.word	0x0800d19b
 800d17c:	0800d1a3 	.word	0x0800d1a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d180:	6a3b      	ldr	r3, [r7, #32]
 800d182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	431a      	orrs	r2, r3
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800d18c:	e026      	b.n	800d1dc <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d18e:	6a3b      	ldr	r3, [r7, #32]
 800d190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d192:	1c5a      	adds	r2, r3, #1
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800d198:	e020      	b.n	800d1dc <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800d1a0:	e01c      	b.n	800d1dc <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d1a2:	7ffb      	ldrb	r3, [r7, #31]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d003      	beq.n	800d1b0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d1ae:	e015      	b.n	800d1dc <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d1b4:	e012      	b.n	800d1dc <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1be:	d00c      	beq.n	800d1da <xTaskGenericNotify+0xd2>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	617b      	str	r3, [r7, #20]
}
 800d1d2:	bf00      	nop
 800d1d4:	e7fe      	b.n	800d1d4 <xTaskGenericNotify+0xcc>
					break;
 800d1d6:	bf00      	nop
 800d1d8:	e000      	b.n	800d1dc <xTaskGenericNotify+0xd4>

					break;
 800d1da:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d1dc:	7ffb      	ldrb	r3, [r7, #31]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d139      	bne.n	800d256 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fd fffa 	bl	800b1e0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	409a      	lsls	r2, r3
 800d1f4:	4b1b      	ldr	r3, [pc, #108]	; (800d264 <xTaskGenericNotify+0x15c>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	4a1a      	ldr	r2, [pc, #104]	; (800d264 <xTaskGenericNotify+0x15c>)
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	6a3b      	ldr	r3, [r7, #32]
 800d200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d202:	4613      	mov	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4a17      	ldr	r2, [pc, #92]	; (800d268 <xTaskGenericNotify+0x160>)
 800d20c:	441a      	add	r2, r3
 800d20e:	6a3b      	ldr	r3, [r7, #32]
 800d210:	3304      	adds	r3, #4
 800d212:	4619      	mov	r1, r3
 800d214:	4610      	mov	r0, r2
 800d216:	f7fd ff86 	bl	800b126 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00a      	beq.n	800d238 <xTaskGenericNotify+0x130>
	__asm volatile
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	613b      	str	r3, [r7, #16]
}
 800d234:	bf00      	nop
 800d236:	e7fe      	b.n	800d236 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d238:	6a3b      	ldr	r3, [r7, #32]
 800d23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23c:	4b0b      	ldr	r3, [pc, #44]	; (800d26c <xTaskGenericNotify+0x164>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d242:	429a      	cmp	r2, r3
 800d244:	d907      	bls.n	800d256 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d246:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <xTaskGenericNotify+0x168>)
 800d248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d256:	f000 faad 	bl	800d7b4 <vPortExitCritical>

		return xReturn;
 800d25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3728      	adds	r7, #40	; 0x28
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	20000d7c 	.word	0x20000d7c
 800d268:	20000c78 	.word	0x20000c78
 800d26c:	20000c74 	.word	0x20000c74
 800d270:	e000ed04 	.word	0xe000ed04

0800d274 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d274:	b580      	push	{r7, lr}
 800d276:	b08e      	sub	sp, #56	; 0x38
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	603b      	str	r3, [r7, #0]
 800d280:	4613      	mov	r3, r2
 800d282:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d284:	2301      	movs	r3, #1
 800d286:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10a      	bne.n	800d2a4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2a0:	bf00      	nop
 800d2a2:	e7fe      	b.n	800d2a2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2a4:	f000 fb38 	bl	800d918 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d2ac:	f3ef 8211 	mrs	r2, BASEPRI
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	623a      	str	r2, [r7, #32]
 800d2c2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d2c4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d003      	beq.n	800d2d6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d2dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e2:	2202      	movs	r2, #2
 800d2e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800d2e8:	79fb      	ldrb	r3, [r7, #7]
 800d2ea:	2b04      	cmp	r3, #4
 800d2ec:	d828      	bhi.n	800d340 <xTaskGenericNotifyFromISR+0xcc>
 800d2ee:	a201      	add	r2, pc, #4	; (adr r2, 800d2f4 <xTaskGenericNotifyFromISR+0x80>)
 800d2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f4:	0800d361 	.word	0x0800d361
 800d2f8:	0800d309 	.word	0x0800d309
 800d2fc:	0800d317 	.word	0x0800d317
 800d300:	0800d323 	.word	0x0800d323
 800d304:	0800d32b 	.word	0x0800d32b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	431a      	orrs	r2, r3
 800d310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d312:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800d314:	e027      	b.n	800d366 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d31a:	1c5a      	adds	r2, r3, #1
 800d31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800d320:	e021      	b.n	800d366 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	68ba      	ldr	r2, [r7, #8]
 800d326:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800d328:	e01d      	b.n	800d366 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d32a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d32e:	2b02      	cmp	r3, #2
 800d330:	d003      	beq.n	800d33a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d338:	e015      	b.n	800d366 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800d33a:	2300      	movs	r3, #0
 800d33c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d33e:	e012      	b.n	800d366 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d348:	d00c      	beq.n	800d364 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	61bb      	str	r3, [r7, #24]
}
 800d35c:	bf00      	nop
 800d35e:	e7fe      	b.n	800d35e <xTaskGenericNotifyFromISR+0xea>
					break;
 800d360:	bf00      	nop
 800d362:	e000      	b.n	800d366 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800d364:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d145      	bne.n	800d3fa <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00a      	beq.n	800d38c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800d376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37a:	f383 8811 	msr	BASEPRI, r3
 800d37e:	f3bf 8f6f 	isb	sy
 800d382:	f3bf 8f4f 	dsb	sy
 800d386:	617b      	str	r3, [r7, #20]
}
 800d388:	bf00      	nop
 800d38a:	e7fe      	b.n	800d38a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d38c:	4b20      	ldr	r3, [pc, #128]	; (800d410 <xTaskGenericNotifyFromISR+0x19c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d11c      	bne.n	800d3ce <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d396:	3304      	adds	r3, #4
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fd ff21 	bl	800b1e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	409a      	lsls	r2, r3
 800d3a6:	4b1b      	ldr	r3, [pc, #108]	; (800d414 <xTaskGenericNotifyFromISR+0x1a0>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	4a19      	ldr	r2, [pc, #100]	; (800d414 <xTaskGenericNotifyFromISR+0x1a0>)
 800d3ae:	6013      	str	r3, [r2, #0]
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	4413      	add	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	4a16      	ldr	r2, [pc, #88]	; (800d418 <xTaskGenericNotifyFromISR+0x1a4>)
 800d3be:	441a      	add	r2, r3
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	f7fd fead 	bl	800b126 <vListInsertEnd>
 800d3cc:	e005      	b.n	800d3da <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d0:	3318      	adds	r3, #24
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4811      	ldr	r0, [pc, #68]	; (800d41c <xTaskGenericNotifyFromISR+0x1a8>)
 800d3d6:	f7fd fea6 	bl	800b126 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3de:	4b10      	ldr	r3, [pc, #64]	; (800d420 <xTaskGenericNotifyFromISR+0x1ac>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d908      	bls.n	800d3fa <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d3e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d002      	beq.n	800d3f4 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d3ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d3f4:	4b0b      	ldr	r3, [pc, #44]	; (800d424 <xTaskGenericNotifyFromISR+0x1b0>)
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	601a      	str	r2, [r3, #0]
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	f383 8811 	msr	BASEPRI, r3
}
 800d404:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d408:	4618      	mov	r0, r3
 800d40a:	3738      	adds	r7, #56	; 0x38
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	20000d9c 	.word	0x20000d9c
 800d414:	20000d7c 	.word	0x20000d7c
 800d418:	20000c78 	.word	0x20000c78
 800d41c:	20000d34 	.word	0x20000d34
 800d420:	20000c74 	.word	0x20000c74
 800d424:	20000d88 	.word	0x20000d88

0800d428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d432:	4b29      	ldr	r3, [pc, #164]	; (800d4d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d438:	4b28      	ldr	r3, [pc, #160]	; (800d4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3304      	adds	r3, #4
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fd fece 	bl	800b1e0 <uxListRemove>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d10b      	bne.n	800d462 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d44a:	4b24      	ldr	r3, [pc, #144]	; (800d4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d450:	2201      	movs	r2, #1
 800d452:	fa02 f303 	lsl.w	r3, r2, r3
 800d456:	43da      	mvns	r2, r3
 800d458:	4b21      	ldr	r3, [pc, #132]	; (800d4e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4013      	ands	r3, r2
 800d45e:	4a20      	ldr	r2, [pc, #128]	; (800d4e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d460:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d468:	d10a      	bne.n	800d480 <prvAddCurrentTaskToDelayedList+0x58>
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d007      	beq.n	800d480 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d470:	4b1a      	ldr	r3, [pc, #104]	; (800d4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3304      	adds	r3, #4
 800d476:	4619      	mov	r1, r3
 800d478:	481a      	ldr	r0, [pc, #104]	; (800d4e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d47a:	f7fd fe54 	bl	800b126 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d47e:	e026      	b.n	800d4ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4413      	add	r3, r2
 800d486:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d488:	4b14      	ldr	r3, [pc, #80]	; (800d4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d490:	68ba      	ldr	r2, [r7, #8]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	429a      	cmp	r2, r3
 800d496:	d209      	bcs.n	800d4ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d498:	4b13      	ldr	r3, [pc, #76]	; (800d4e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	4b0f      	ldr	r3, [pc, #60]	; (800d4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	f7fd fe62 	bl	800b16e <vListInsert>
}
 800d4aa:	e010      	b.n	800d4ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4ac:	4b0f      	ldr	r3, [pc, #60]	; (800d4ec <prvAddCurrentTaskToDelayedList+0xc4>)
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	f7fd fe58 	bl	800b16e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4be:	4b0c      	ldr	r3, [pc, #48]	; (800d4f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d202      	bcs.n	800d4ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d4c8:	4a09      	ldr	r2, [pc, #36]	; (800d4f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	6013      	str	r3, [r2, #0]
}
 800d4ce:	bf00      	nop
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	20000d78 	.word	0x20000d78
 800d4dc:	20000c74 	.word	0x20000c74
 800d4e0:	20000d7c 	.word	0x20000d7c
 800d4e4:	20000d60 	.word	0x20000d60
 800d4e8:	20000d30 	.word	0x20000d30
 800d4ec:	20000d2c 	.word	0x20000d2c
 800d4f0:	20000d94 	.word	0x20000d94

0800d4f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	3b04      	subs	r3, #4
 800d504:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3b04      	subs	r3, #4
 800d512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	f023 0201 	bic.w	r2, r3, #1
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3b04      	subs	r3, #4
 800d522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d524:	4a0c      	ldr	r2, [pc, #48]	; (800d558 <pxPortInitialiseStack+0x64>)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	3b14      	subs	r3, #20
 800d52e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	3b04      	subs	r3, #4
 800d53a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f06f 0202 	mvn.w	r2, #2
 800d542:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	3b20      	subs	r3, #32
 800d548:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d54a:	68fb      	ldr	r3, [r7, #12]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr
 800d558:	0800d55d 	.word	0x0800d55d

0800d55c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d566:	4b12      	ldr	r3, [pc, #72]	; (800d5b0 <prvTaskExitError+0x54>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56e:	d00a      	beq.n	800d586 <prvTaskExitError+0x2a>
	__asm volatile
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	60fb      	str	r3, [r7, #12]
}
 800d582:	bf00      	nop
 800d584:	e7fe      	b.n	800d584 <prvTaskExitError+0x28>
	__asm volatile
 800d586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58a:	f383 8811 	msr	BASEPRI, r3
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f3bf 8f4f 	dsb	sy
 800d596:	60bb      	str	r3, [r7, #8]
}
 800d598:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d59a:	bf00      	nop
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d0fc      	beq.n	800d59c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d5a2:	bf00      	nop
 800d5a4:	bf00      	nop
 800d5a6:	3714      	adds	r7, #20
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr
 800d5b0:	20000098 	.word	0x20000098
	...

0800d5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d5c0:	4b07      	ldr	r3, [pc, #28]	; (800d5e0 <pxCurrentTCBConst2>)
 800d5c2:	6819      	ldr	r1, [r3, #0]
 800d5c4:	6808      	ldr	r0, [r1, #0]
 800d5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ca:	f380 8809 	msr	PSP, r0
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f04f 0000 	mov.w	r0, #0
 800d5d6:	f380 8811 	msr	BASEPRI, r0
 800d5da:	4770      	bx	lr
 800d5dc:	f3af 8000 	nop.w

0800d5e0 <pxCurrentTCBConst2>:
 800d5e0:	20000c74 	.word	0x20000c74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5e4:	bf00      	nop
 800d5e6:	bf00      	nop

0800d5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5e8:	4808      	ldr	r0, [pc, #32]	; (800d60c <prvPortStartFirstTask+0x24>)
 800d5ea:	6800      	ldr	r0, [r0, #0]
 800d5ec:	6800      	ldr	r0, [r0, #0]
 800d5ee:	f380 8808 	msr	MSP, r0
 800d5f2:	f04f 0000 	mov.w	r0, #0
 800d5f6:	f380 8814 	msr	CONTROL, r0
 800d5fa:	b662      	cpsie	i
 800d5fc:	b661      	cpsie	f
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	f3bf 8f6f 	isb	sy
 800d606:	df00      	svc	0
 800d608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d60a:	bf00      	nop
 800d60c:	e000ed08 	.word	0xe000ed08

0800d610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d616:	4b46      	ldr	r3, [pc, #280]	; (800d730 <xPortStartScheduler+0x120>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a46      	ldr	r2, [pc, #280]	; (800d734 <xPortStartScheduler+0x124>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d10a      	bne.n	800d636 <xPortStartScheduler+0x26>
	__asm volatile
 800d620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	613b      	str	r3, [r7, #16]
}
 800d632:	bf00      	nop
 800d634:	e7fe      	b.n	800d634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d636:	4b3e      	ldr	r3, [pc, #248]	; (800d730 <xPortStartScheduler+0x120>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a3f      	ldr	r2, [pc, #252]	; (800d738 <xPortStartScheduler+0x128>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d10a      	bne.n	800d656 <xPortStartScheduler+0x46>
	__asm volatile
 800d640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	60fb      	str	r3, [r7, #12]
}
 800d652:	bf00      	nop
 800d654:	e7fe      	b.n	800d654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d656:	4b39      	ldr	r3, [pc, #228]	; (800d73c <xPortStartScheduler+0x12c>)
 800d658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	22ff      	movs	r2, #255	; 0xff
 800d666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d670:	78fb      	ldrb	r3, [r7, #3]
 800d672:	b2db      	uxtb	r3, r3
 800d674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	4b31      	ldr	r3, [pc, #196]	; (800d740 <xPortStartScheduler+0x130>)
 800d67c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d67e:	4b31      	ldr	r3, [pc, #196]	; (800d744 <xPortStartScheduler+0x134>)
 800d680:	2207      	movs	r2, #7
 800d682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d684:	e009      	b.n	800d69a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d686:	4b2f      	ldr	r3, [pc, #188]	; (800d744 <xPortStartScheduler+0x134>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	3b01      	subs	r3, #1
 800d68c:	4a2d      	ldr	r2, [pc, #180]	; (800d744 <xPortStartScheduler+0x134>)
 800d68e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d690:	78fb      	ldrb	r3, [r7, #3]
 800d692:	b2db      	uxtb	r3, r3
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	b2db      	uxtb	r3, r3
 800d698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d69a:	78fb      	ldrb	r3, [r7, #3]
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6a2:	2b80      	cmp	r3, #128	; 0x80
 800d6a4:	d0ef      	beq.n	800d686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d6a6:	4b27      	ldr	r3, [pc, #156]	; (800d744 <xPortStartScheduler+0x134>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f1c3 0307 	rsb	r3, r3, #7
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	d00a      	beq.n	800d6c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b6:	f383 8811 	msr	BASEPRI, r3
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	60bb      	str	r3, [r7, #8]
}
 800d6c4:	bf00      	nop
 800d6c6:	e7fe      	b.n	800d6c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d6c8:	4b1e      	ldr	r3, [pc, #120]	; (800d744 <xPortStartScheduler+0x134>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	021b      	lsls	r3, r3, #8
 800d6ce:	4a1d      	ldr	r2, [pc, #116]	; (800d744 <xPortStartScheduler+0x134>)
 800d6d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6d2:	4b1c      	ldr	r3, [pc, #112]	; (800d744 <xPortStartScheduler+0x134>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6da:	4a1a      	ldr	r2, [pc, #104]	; (800d744 <xPortStartScheduler+0x134>)
 800d6dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6e6:	4b18      	ldr	r3, [pc, #96]	; (800d748 <xPortStartScheduler+0x138>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a17      	ldr	r2, [pc, #92]	; (800d748 <xPortStartScheduler+0x138>)
 800d6ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d6f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d6f2:	4b15      	ldr	r3, [pc, #84]	; (800d748 <xPortStartScheduler+0x138>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a14      	ldr	r2, [pc, #80]	; (800d748 <xPortStartScheduler+0x138>)
 800d6f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d6fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d6fe:	f000 f8dd 	bl	800d8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d702:	4b12      	ldr	r3, [pc, #72]	; (800d74c <xPortStartScheduler+0x13c>)
 800d704:	2200      	movs	r2, #0
 800d706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d708:	f000 f8fc 	bl	800d904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d70c:	4b10      	ldr	r3, [pc, #64]	; (800d750 <xPortStartScheduler+0x140>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a0f      	ldr	r2, [pc, #60]	; (800d750 <xPortStartScheduler+0x140>)
 800d712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d718:	f7ff ff66 	bl	800d5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d71c:	f7ff f87c 	bl	800c818 <vTaskSwitchContext>
	prvTaskExitError();
 800d720:	f7ff ff1c 	bl	800d55c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d724:	2300      	movs	r3, #0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3718      	adds	r7, #24
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	e000ed00 	.word	0xe000ed00
 800d734:	410fc271 	.word	0x410fc271
 800d738:	410fc270 	.word	0x410fc270
 800d73c:	e000e400 	.word	0xe000e400
 800d740:	20000da0 	.word	0x20000da0
 800d744:	20000da4 	.word	0x20000da4
 800d748:	e000ed20 	.word	0xe000ed20
 800d74c:	20000098 	.word	0x20000098
 800d750:	e000ef34 	.word	0xe000ef34

0800d754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
	__asm volatile
 800d75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75e:	f383 8811 	msr	BASEPRI, r3
 800d762:	f3bf 8f6f 	isb	sy
 800d766:	f3bf 8f4f 	dsb	sy
 800d76a:	607b      	str	r3, [r7, #4]
}
 800d76c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d76e:	4b0f      	ldr	r3, [pc, #60]	; (800d7ac <vPortEnterCritical+0x58>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3301      	adds	r3, #1
 800d774:	4a0d      	ldr	r2, [pc, #52]	; (800d7ac <vPortEnterCritical+0x58>)
 800d776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d778:	4b0c      	ldr	r3, [pc, #48]	; (800d7ac <vPortEnterCritical+0x58>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d10f      	bne.n	800d7a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d780:	4b0b      	ldr	r3, [pc, #44]	; (800d7b0 <vPortEnterCritical+0x5c>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	b2db      	uxtb	r3, r3
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00a      	beq.n	800d7a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	603b      	str	r3, [r7, #0]
}
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <vPortEnterCritical+0x4a>
	}
}
 800d7a0:	bf00      	nop
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr
 800d7ac:	20000098 	.word	0x20000098
 800d7b0:	e000ed04 	.word	0xe000ed04

0800d7b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d7ba:	4b12      	ldr	r3, [pc, #72]	; (800d804 <vPortExitCritical+0x50>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10a      	bne.n	800d7d8 <vPortExitCritical+0x24>
	__asm volatile
 800d7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c6:	f383 8811 	msr	BASEPRI, r3
 800d7ca:	f3bf 8f6f 	isb	sy
 800d7ce:	f3bf 8f4f 	dsb	sy
 800d7d2:	607b      	str	r3, [r7, #4]
}
 800d7d4:	bf00      	nop
 800d7d6:	e7fe      	b.n	800d7d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d7d8:	4b0a      	ldr	r3, [pc, #40]	; (800d804 <vPortExitCritical+0x50>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	4a09      	ldr	r2, [pc, #36]	; (800d804 <vPortExitCritical+0x50>)
 800d7e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7e2:	4b08      	ldr	r3, [pc, #32]	; (800d804 <vPortExitCritical+0x50>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d105      	bne.n	800d7f6 <vPortExitCritical+0x42>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	f383 8811 	msr	BASEPRI, r3
}
 800d7f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d7f6:	bf00      	nop
 800d7f8:	370c      	adds	r7, #12
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	20000098 	.word	0x20000098
	...

0800d810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d810:	f3ef 8009 	mrs	r0, PSP
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	4b15      	ldr	r3, [pc, #84]	; (800d870 <pxCurrentTCBConst>)
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	f01e 0f10 	tst.w	lr, #16
 800d820:	bf08      	it	eq
 800d822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82a:	6010      	str	r0, [r2, #0]
 800d82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d834:	f380 8811 	msr	BASEPRI, r0
 800d838:	f3bf 8f4f 	dsb	sy
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f7fe ffea 	bl	800c818 <vTaskSwitchContext>
 800d844:	f04f 0000 	mov.w	r0, #0
 800d848:	f380 8811 	msr	BASEPRI, r0
 800d84c:	bc09      	pop	{r0, r3}
 800d84e:	6819      	ldr	r1, [r3, #0]
 800d850:	6808      	ldr	r0, [r1, #0]
 800d852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d856:	f01e 0f10 	tst.w	lr, #16
 800d85a:	bf08      	it	eq
 800d85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d860:	f380 8809 	msr	PSP, r0
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	f3af 8000 	nop.w

0800d870 <pxCurrentTCBConst>:
 800d870:	20000c74 	.word	0x20000c74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d874:	bf00      	nop
 800d876:	bf00      	nop

0800d878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	607b      	str	r3, [r7, #4]
}
 800d890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d892:	f7fe ff09 	bl	800c6a8 <xTaskIncrementTick>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d003      	beq.n	800d8a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d89c:	4b06      	ldr	r3, [pc, #24]	; (800d8b8 <SysTick_Handler+0x40>)
 800d89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	f383 8811 	msr	BASEPRI, r3
}
 800d8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	e000ed04 	.word	0xe000ed04

0800d8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8bc:	b480      	push	{r7}
 800d8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d8c0:	4b0b      	ldr	r3, [pc, #44]	; (800d8f0 <vPortSetupTimerInterrupt+0x34>)
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d8c6:	4b0b      	ldr	r3, [pc, #44]	; (800d8f4 <vPortSetupTimerInterrupt+0x38>)
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d8cc:	4b0a      	ldr	r3, [pc, #40]	; (800d8f8 <vPortSetupTimerInterrupt+0x3c>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a0a      	ldr	r2, [pc, #40]	; (800d8fc <vPortSetupTimerInterrupt+0x40>)
 800d8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8d6:	099b      	lsrs	r3, r3, #6
 800d8d8:	4a09      	ldr	r2, [pc, #36]	; (800d900 <vPortSetupTimerInterrupt+0x44>)
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d8de:	4b04      	ldr	r3, [pc, #16]	; (800d8f0 <vPortSetupTimerInterrupt+0x34>)
 800d8e0:	2207      	movs	r2, #7
 800d8e2:	601a      	str	r2, [r3, #0]
}
 800d8e4:	bf00      	nop
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	e000e010 	.word	0xe000e010
 800d8f4:	e000e018 	.word	0xe000e018
 800d8f8:	20000024 	.word	0x20000024
 800d8fc:	10624dd3 	.word	0x10624dd3
 800d900:	e000e014 	.word	0xe000e014

0800d904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d914 <vPortEnableVFP+0x10>
 800d908:	6801      	ldr	r1, [r0, #0]
 800d90a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d90e:	6001      	str	r1, [r0, #0]
 800d910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d912:	bf00      	nop
 800d914:	e000ed88 	.word	0xe000ed88

0800d918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d91e:	f3ef 8305 	mrs	r3, IPSR
 800d922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b0f      	cmp	r3, #15
 800d928:	d914      	bls.n	800d954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d92a:	4a17      	ldr	r2, [pc, #92]	; (800d988 <vPortValidateInterruptPriority+0x70>)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	4413      	add	r3, r2
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d934:	4b15      	ldr	r3, [pc, #84]	; (800d98c <vPortValidateInterruptPriority+0x74>)
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	7afa      	ldrb	r2, [r7, #11]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d20a      	bcs.n	800d954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	607b      	str	r3, [r7, #4]
}
 800d950:	bf00      	nop
 800d952:	e7fe      	b.n	800d952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d954:	4b0e      	ldr	r3, [pc, #56]	; (800d990 <vPortValidateInterruptPriority+0x78>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d95c:	4b0d      	ldr	r3, [pc, #52]	; (800d994 <vPortValidateInterruptPriority+0x7c>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	429a      	cmp	r2, r3
 800d962:	d90a      	bls.n	800d97a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	603b      	str	r3, [r7, #0]
}
 800d976:	bf00      	nop
 800d978:	e7fe      	b.n	800d978 <vPortValidateInterruptPriority+0x60>
	}
 800d97a:	bf00      	nop
 800d97c:	3714      	adds	r7, #20
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	e000e3f0 	.word	0xe000e3f0
 800d98c:	20000da0 	.word	0x20000da0
 800d990:	e000ed0c 	.word	0xe000ed0c
 800d994:	20000da4 	.word	0x20000da4

0800d998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08a      	sub	sp, #40	; 0x28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9a4:	f7fe fdd6 	bl	800c554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9a8:	4b5d      	ldr	r3, [pc, #372]	; (800db20 <pvPortMalloc+0x188>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9b0:	f000 f924 	bl	800dbfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9b4:	4b5b      	ldr	r3, [pc, #364]	; (800db24 <pvPortMalloc+0x18c>)
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f040 8093 	bne.w	800dae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d01d      	beq.n	800da04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d9c8:	2208      	movs	r2, #8
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f003 0307 	and.w	r3, r3, #7
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d014      	beq.n	800da04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f023 0307 	bic.w	r3, r3, #7
 800d9e0:	3308      	adds	r3, #8
 800d9e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f003 0307 	and.w	r3, r3, #7
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00a      	beq.n	800da04 <pvPortMalloc+0x6c>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	617b      	str	r3, [r7, #20]
}
 800da00:	bf00      	nop
 800da02:	e7fe      	b.n	800da02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d06e      	beq.n	800dae8 <pvPortMalloc+0x150>
 800da0a:	4b47      	ldr	r3, [pc, #284]	; (800db28 <pvPortMalloc+0x190>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	429a      	cmp	r2, r3
 800da12:	d869      	bhi.n	800dae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da14:	4b45      	ldr	r3, [pc, #276]	; (800db2c <pvPortMalloc+0x194>)
 800da16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da18:	4b44      	ldr	r3, [pc, #272]	; (800db2c <pvPortMalloc+0x194>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da1e:	e004      	b.n	800da2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	429a      	cmp	r2, r3
 800da32:	d903      	bls.n	800da3c <pvPortMalloc+0xa4>
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1f1      	bne.n	800da20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da3c:	4b38      	ldr	r3, [pc, #224]	; (800db20 <pvPortMalloc+0x188>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da42:	429a      	cmp	r2, r3
 800da44:	d050      	beq.n	800dae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2208      	movs	r2, #8
 800da4c:	4413      	add	r3, r2
 800da4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	685a      	ldr	r2, [r3, #4]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	1ad2      	subs	r2, r2, r3
 800da60:	2308      	movs	r3, #8
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	429a      	cmp	r2, r3
 800da66:	d91f      	bls.n	800daa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4413      	add	r3, r2
 800da6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	f003 0307 	and.w	r3, r3, #7
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <pvPortMalloc+0xf8>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	613b      	str	r3, [r7, #16]
}
 800da8c:	bf00      	nop
 800da8e:	e7fe      	b.n	800da8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da92:	685a      	ldr	r2, [r3, #4]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	1ad2      	subs	r2, r2, r3
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800daa2:	69b8      	ldr	r0, [r7, #24]
 800daa4:	f000 f90c 	bl	800dcc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800daa8:	4b1f      	ldr	r3, [pc, #124]	; (800db28 <pvPortMalloc+0x190>)
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	4a1d      	ldr	r2, [pc, #116]	; (800db28 <pvPortMalloc+0x190>)
 800dab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dab6:	4b1c      	ldr	r3, [pc, #112]	; (800db28 <pvPortMalloc+0x190>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	4b1d      	ldr	r3, [pc, #116]	; (800db30 <pvPortMalloc+0x198>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d203      	bcs.n	800daca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dac2:	4b19      	ldr	r3, [pc, #100]	; (800db28 <pvPortMalloc+0x190>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a1a      	ldr	r2, [pc, #104]	; (800db30 <pvPortMalloc+0x198>)
 800dac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	4b15      	ldr	r3, [pc, #84]	; (800db24 <pvPortMalloc+0x18c>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	431a      	orrs	r2, r3
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	2200      	movs	r2, #0
 800dadc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dade:	4b15      	ldr	r3, [pc, #84]	; (800db34 <pvPortMalloc+0x19c>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3301      	adds	r3, #1
 800dae4:	4a13      	ldr	r2, [pc, #76]	; (800db34 <pvPortMalloc+0x19c>)
 800dae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dae8:	f7fe fd42 	bl	800c570 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800daf2:	f7f5 fe61 	bl	80037b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	f003 0307 	and.w	r3, r3, #7
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d00a      	beq.n	800db16 <pvPortMalloc+0x17e>
	__asm volatile
 800db00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	60fb      	str	r3, [r7, #12]
}
 800db12:	bf00      	nop
 800db14:	e7fe      	b.n	800db14 <pvPortMalloc+0x17c>
	return pvReturn;
 800db16:	69fb      	ldr	r3, [r7, #28]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3728      	adds	r7, #40	; 0x28
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	20008db0 	.word	0x20008db0
 800db24:	20008dc4 	.word	0x20008dc4
 800db28:	20008db4 	.word	0x20008db4
 800db2c:	20008da8 	.word	0x20008da8
 800db30:	20008db8 	.word	0x20008db8
 800db34:	20008dbc 	.word	0x20008dbc

0800db38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d04d      	beq.n	800dbe6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db4a:	2308      	movs	r3, #8
 800db4c:	425b      	negs	r3, r3
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	4413      	add	r3, r2
 800db52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	685a      	ldr	r2, [r3, #4]
 800db5c:	4b24      	ldr	r3, [pc, #144]	; (800dbf0 <vPortFree+0xb8>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4013      	ands	r3, r2
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10a      	bne.n	800db7c <vPortFree+0x44>
	__asm volatile
 800db66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6a:	f383 8811 	msr	BASEPRI, r3
 800db6e:	f3bf 8f6f 	isb	sy
 800db72:	f3bf 8f4f 	dsb	sy
 800db76:	60fb      	str	r3, [r7, #12]
}
 800db78:	bf00      	nop
 800db7a:	e7fe      	b.n	800db7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00a      	beq.n	800db9a <vPortFree+0x62>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	60bb      	str	r3, [r7, #8]
}
 800db96:	bf00      	nop
 800db98:	e7fe      	b.n	800db98 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	685a      	ldr	r2, [r3, #4]
 800db9e:	4b14      	ldr	r3, [pc, #80]	; (800dbf0 <vPortFree+0xb8>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4013      	ands	r3, r2
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d01e      	beq.n	800dbe6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d11a      	bne.n	800dbe6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	685a      	ldr	r2, [r3, #4]
 800dbb4:	4b0e      	ldr	r3, [pc, #56]	; (800dbf0 <vPortFree+0xb8>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	43db      	mvns	r3, r3
 800dbba:	401a      	ands	r2, r3
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dbc0:	f7fe fcc8 	bl	800c554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	4b0a      	ldr	r3, [pc, #40]	; (800dbf4 <vPortFree+0xbc>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4413      	add	r3, r2
 800dbce:	4a09      	ldr	r2, [pc, #36]	; (800dbf4 <vPortFree+0xbc>)
 800dbd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dbd2:	6938      	ldr	r0, [r7, #16]
 800dbd4:	f000 f874 	bl	800dcc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dbd8:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <vPortFree+0xc0>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	4a06      	ldr	r2, [pc, #24]	; (800dbf8 <vPortFree+0xc0>)
 800dbe0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dbe2:	f7fe fcc5 	bl	800c570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbe6:	bf00      	nop
 800dbe8:	3718      	adds	r7, #24
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	20008dc4 	.word	0x20008dc4
 800dbf4:	20008db4 	.word	0x20008db4
 800dbf8:	20008dc0 	.word	0x20008dc0

0800dbfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc08:	4b27      	ldr	r3, [pc, #156]	; (800dca8 <prvHeapInit+0xac>)
 800dc0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f003 0307 	and.w	r3, r3, #7
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00c      	beq.n	800dc30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	3307      	adds	r3, #7
 800dc1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f023 0307 	bic.w	r3, r3, #7
 800dc22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	4a1f      	ldr	r2, [pc, #124]	; (800dca8 <prvHeapInit+0xac>)
 800dc2c:	4413      	add	r3, r2
 800dc2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc34:	4a1d      	ldr	r2, [pc, #116]	; (800dcac <prvHeapInit+0xb0>)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc3a:	4b1c      	ldr	r3, [pc, #112]	; (800dcac <prvHeapInit+0xb0>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	4413      	add	r3, r2
 800dc46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc48:	2208      	movs	r2, #8
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	1a9b      	subs	r3, r3, r2
 800dc4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f023 0307 	bic.w	r3, r3, #7
 800dc56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	4a15      	ldr	r2, [pc, #84]	; (800dcb0 <prvHeapInit+0xb4>)
 800dc5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc5e:	4b14      	ldr	r3, [pc, #80]	; (800dcb0 <prvHeapInit+0xb4>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2200      	movs	r2, #0
 800dc64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc66:	4b12      	ldr	r3, [pc, #72]	; (800dcb0 <prvHeapInit+0xb4>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	1ad2      	subs	r2, r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc7c:	4b0c      	ldr	r3, [pc, #48]	; (800dcb0 <prvHeapInit+0xb4>)
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	4a0a      	ldr	r2, [pc, #40]	; (800dcb4 <prvHeapInit+0xb8>)
 800dc8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	4a09      	ldr	r2, [pc, #36]	; (800dcb8 <prvHeapInit+0xbc>)
 800dc92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc94:	4b09      	ldr	r3, [pc, #36]	; (800dcbc <prvHeapInit+0xc0>)
 800dc96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc9a:	601a      	str	r2, [r3, #0]
}
 800dc9c:	bf00      	nop
 800dc9e:	3714      	adds	r7, #20
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr
 800dca8:	20000da8 	.word	0x20000da8
 800dcac:	20008da8 	.word	0x20008da8
 800dcb0:	20008db0 	.word	0x20008db0
 800dcb4:	20008db8 	.word	0x20008db8
 800dcb8:	20008db4 	.word	0x20008db4
 800dcbc:	20008dc4 	.word	0x20008dc4

0800dcc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcc8:	4b28      	ldr	r3, [pc, #160]	; (800dd6c <prvInsertBlockIntoFreeList+0xac>)
 800dcca:	60fb      	str	r3, [r7, #12]
 800dccc:	e002      	b.n	800dcd4 <prvInsertBlockIntoFreeList+0x14>
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d8f7      	bhi.n	800dcce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	4413      	add	r3, r2
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d108      	bne.n	800dd02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	685a      	ldr	r2, [r3, #4]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	441a      	add	r2, r3
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	441a      	add	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d118      	bne.n	800dd48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	4b15      	ldr	r3, [pc, #84]	; (800dd70 <prvInsertBlockIntoFreeList+0xb0>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d00d      	beq.n	800dd3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	685a      	ldr	r2, [r3, #4]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	441a      	add	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	e008      	b.n	800dd50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd3e:	4b0c      	ldr	r3, [pc, #48]	; (800dd70 <prvInsertBlockIntoFreeList+0xb0>)
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	601a      	str	r2, [r3, #0]
 800dd46:	e003      	b.n	800dd50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d002      	beq.n	800dd5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd5e:	bf00      	nop
 800dd60:	3714      	adds	r7, #20
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	20008da8 	.word	0x20008da8
 800dd70:	20008db0 	.word	0x20008db0

0800dd74 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800dd78:	f004 fa88 	bl	801228c <touchgfx_init>
}
 800dd7c:	bf00      	nop
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800dd88:	f004 faaa 	bl	80122e0 <touchgfx_taskEntry>
}
 800dd8c:	bf00      	nop
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
    {
 800dd9c:	4a04      	ldr	r2, [pc, #16]	; (800ddb0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	601a      	str	r2, [r3, #0]
    }
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4618      	mov	r0, r3
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr
 800ddb0:	08028478 	.word	0x08028478

0800ddb4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
    }
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff ffe9 	bl	800dd94 <_ZN8touchgfx12FontProviderD1Ev>
 800ddc2:	2104      	movs	r1, #4
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f017 f84a 	bl	8024e5e <_ZdlPvj>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800dde0:	887b      	ldrh	r3, [r7, #2]
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d010      	beq.n	800de08 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800dde6:	2b02      	cmp	r3, #2
 800dde8:	dc13      	bgt.n	800de12 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d002      	beq.n	800ddf4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d005      	beq.n	800ddfe <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800ddf2:	e00e      	b.n	800de12 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ddf4:	f002 fb1a 	bl	801042c <_ZN17TypedTextDatabase8getFontsEv>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	e00a      	b.n	800de14 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800ddfe:	f002 fb15 	bl	801042c <_ZN17TypedTextDatabase8getFontsEv>
 800de02:	4603      	mov	r3, r0
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	e005      	b.n	800de14 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800de08:	f002 fb10 	bl	801042c <_ZN17TypedTextDatabase8getFontsEv>
 800de0c:	4603      	mov	r3, r0
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	e000      	b.n	800de14 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800de12:	2300      	movs	r3, #0
    }
}
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	4a05      	ldr	r2, [pc, #20]	; (800de3c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	601a      	str	r2, [r3, #0]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7ff ffb1 	bl	800dd94 <_ZN8touchgfx12FontProviderD1Ev>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4618      	mov	r0, r3
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	08028464 	.word	0x08028464

0800de40 <_ZN23ApplicationFontProviderD0Ev>:
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff ffe7 	bl	800de1c <_ZN23ApplicationFontProviderD1Ev>
 800de4e:	2104      	movs	r1, #4
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f017 f804 	bl	8024e5e <_ZdlPvj>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4618      	mov	r0, r3
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
    {
 800de68:	4a04      	ldr	r2, [pc, #16]	; (800de7c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	601a      	str	r2, [r3, #0]
    }
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4618      	mov	r0, r3
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr
 800de7c:	08028818 	.word	0x08028818

0800de80 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
    }
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff ffe9 	bl	800de60 <_ZN8touchgfx4FontD1Ev>
 800de8e:	2110      	movs	r1, #16
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f016 ffe4 	bl	8024e5e <_ZdlPvj>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	4618      	mov	r0, r3
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800dea0:	b590      	push	{r4, r7, lr}
 800dea2:	b087      	sub	sp, #28
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800deac:	887b      	ldrh	r3, [r7, #2]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	e010      	b.n	800ded8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800deba:	2300      	movs	r3, #0
 800debc:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	3308      	adds	r3, #8
 800dec4:	681c      	ldr	r4, [r3, #0]
 800dec6:	f107 030f 	add.w	r3, r7, #15
 800deca:	f107 0210 	add.w	r2, r7, #16
 800dece:	8879      	ldrh	r1, [r7, #2]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	47a0      	blx	r4
 800ded4:	6178      	str	r0, [r7, #20]
        return glyph;
 800ded6:	697b      	ldr	r3, [r7, #20]
    }
 800ded8:	4618      	mov	r0, r3
 800deda:	371c      	adds	r7, #28
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd90      	pop	{r4, r7, pc}

0800dee0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	895b      	ldrh	r3, [r3, #10]
    }
 800deec:	4618      	mov	r0, r3
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	899b      	ldrh	r3, [r3, #12]
    }
 800df04:	4618      	mov	r0, r3
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800df10:	b480      	push	{r7}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	889b      	ldrh	r3, [r3, #4]
    }
 800df1c:	4618      	mov	r0, r3
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	889a      	ldrh	r2, [r3, #4]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	799b      	ldrb	r3, [r3, #6]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	4413      	add	r3, r2
 800df3c:	b29b      	uxth	r3, r3
    }
 800df3e:	4618      	mov	r0, r3
 800df40:	370c      	adds	r7, #12
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr

0800df4a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800df4a:	b480      	push	{r7}
 800df4c:	b083      	sub	sp, #12
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	79db      	ldrb	r3, [r3, #7]
 800df56:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800df5a:	b2db      	uxtb	r3, r3
    }
 800df5c:	4618      	mov	r0, r3
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	79db      	ldrb	r3, [r3, #7]
 800df74:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800df78:	b2db      	uxtb	r3, r3
    }
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
	...

0800df88 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	4a05      	ldr	r2, [pc, #20]	; (800dfa8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	601a      	str	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4618      	mov	r0, r3
 800df9a:	f7ff ff61 	bl	800de60 <_ZN8touchgfx4FontD1Ev>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	08029fec 	.word	0x08029fec

0800dfac <_ZN8touchgfx9ConstFontD0Ev>:
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7ff ffe7 	bl	800df88 <_ZN8touchgfx9ConstFontD1Ev>
 800dfba:	2118      	movs	r1, #24
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f016 ff4e 	bl	8024e5e <_ZdlPvj>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	4a05      	ldr	r2, [pc, #20]	; (800dfec <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7ff ffd3 	bl	800df88 <_ZN8touchgfx9ConstFontD1Ev>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	0802849c 	.word	0x0802849c

0800dff0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff ffe7 	bl	800dfcc <_ZN8touchgfx13GeneratedFontD1Ev>
 800dffe:	2124      	movs	r1, #36	; 0x24
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f016 ff2c 	bl	8024e5e <_ZdlPvj>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4618      	mov	r0, r3
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
    {
 800e018:	4a04      	ldr	r2, [pc, #16]	; (800e02c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	601a      	str	r2, [r3, #0]
    }
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4618      	mov	r0, r3
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr
 800e02c:	0802848c 	.word	0x0802848c

0800e030 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
    }
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f7ff ffe9 	bl	800e010 <_ZN8touchgfx9TypedTextD1Ev>
 800e03e:	2108      	movs	r1, #8
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f016 ff0c 	bl	8024e5e <_ZdlPvj>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4618      	mov	r0, r3
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6a1b      	ldr	r3, [r3, #32]
    }
 800e05c:	4618      	mov	r0, r3
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800e068:	b580      	push	{r7, lr}
 800e06a:	b08c      	sub	sp, #48	; 0x30
 800e06c:	af08      	add	r7, sp, #32
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	4611      	mov	r1, r2
 800e074:	461a      	mov	r2, r3
 800e076:	460b      	mov	r3, r1
 800e078:	80fb      	strh	r3, [r7, #6]
 800e07a:	4613      	mov	r3, r2
 800e07c:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	88b9      	ldrh	r1, [r7, #4]
 800e082:	88fa      	ldrh	r2, [r7, #6]
 800e084:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e086:	9306      	str	r3, [sp, #24]
 800e088:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e08a:	9305      	str	r3, [sp, #20]
 800e08c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e090:	9304      	str	r3, [sp, #16]
 800e092:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e096:	9303      	str	r3, [sp, #12]
 800e098:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e09c:	9302      	str	r3, [sp, #8]
 800e09e:	7f3b      	ldrb	r3, [r7, #28]
 800e0a0:	9301      	str	r3, [sp, #4]
 800e0a2:	7e3b      	ldrb	r3, [r7, #24]
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	68b9      	ldr	r1, [r7, #8]
 800e0aa:	f009 f903 	bl	80172b4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e0ae:	4a08      	ldr	r2, [pc, #32]	; (800e0d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0b8:	619a      	str	r2, [r3, #24]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0be:	61da      	str	r2, [r3, #28]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0c4:	621a      	str	r2, [r3, #32]
{
}
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3710      	adds	r7, #16
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	0802849c 	.word	0x0802849c

0800e0d4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b085      	sub	sp, #20
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	699b      	ldr	r3, [r3, #24]
 800e0e2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	889b      	ldrh	r3, [r3, #4]
 800e0e8:	0adb      	lsrs	r3, r3, #11
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4413      	add	r3, r2
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3714      	adds	r7, #20
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr

0800e106 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e106:	b480      	push	{r7}
 800e108:	b089      	sub	sp, #36	; 0x24
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	60f8      	str	r0, [r7, #12]
 800e10e:	460b      	mov	r3, r1
 800e110:	607a      	str	r2, [r7, #4]
 800e112:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d003      	beq.n	800e122 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	7b1b      	ldrb	r3, [r3, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d101      	bne.n	800e126 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e122:	2300      	movs	r3, #0
 800e124:	e030      	b.n	800e188 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	69da      	ldr	r2, [r3, #28]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	7b5b      	ldrb	r3, [r3, #13]
 800e132:	021b      	lsls	r3, r3, #8
 800e134:	b21b      	sxth	r3, r3
 800e136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e13a:	b219      	sxth	r1, r3
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	7adb      	ldrb	r3, [r3, #11]
 800e140:	b21b      	sxth	r3, r3
 800e142:	430b      	orrs	r3, r1
 800e144:	b21b      	sxth	r3, r3
 800e146:	b29b      	uxth	r3, r3
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4413      	add	r3, r2
 800e14c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	7b1b      	ldrb	r3, [r3, #12]
 800e152:	837b      	strh	r3, [r7, #26]
 800e154:	8b7b      	ldrh	r3, [r7, #26]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d015      	beq.n	800e186 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	881b      	ldrh	r3, [r3, #0]
 800e15e:	897a      	ldrh	r2, [r7, #10]
 800e160:	429a      	cmp	r2, r3
 800e162:	d103      	bne.n	800e16c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e16a:	e00d      	b.n	800e188 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	881b      	ldrh	r3, [r3, #0]
 800e170:	897a      	ldrh	r2, [r7, #10]
 800e172:	429a      	cmp	r2, r3
 800e174:	d306      	bcc.n	800e184 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e176:	8b7b      	ldrh	r3, [r7, #26]
 800e178:	3b01      	subs	r3, #1
 800e17a:	837b      	strh	r3, [r7, #26]
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	3304      	adds	r3, #4
 800e180:	61fb      	str	r3, [r7, #28]
 800e182:	e7e7      	b.n	800e154 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800e184:	bf00      	nop
        }
    }
    return 0;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3724      	adds	r7, #36	; 0x24
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 13, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e194:	b580      	push	{r7, lr}
 800e196:	af00      	add	r7, sp, #0
 800e198:	4801      	ldr	r0, [pc, #4]	; (800e1a0 <__tcf_0+0xc>)
 800e19a:	f7ff ff17 	bl	800dfcc <_ZN8touchgfx13GeneratedFontD1Ev>
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	20008dc8 	.word	0x20008dc8

0800e1a4 <_Z23getFont_verdana_10_4bppv>:
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b08a      	sub	sp, #40	; 0x28
 800e1a8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 13, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e1aa:	4b1e      	ldr	r3, [pc, #120]	; (800e224 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	f3bf 8f5b 	dmb	ish
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	f003 0301 	and.w	r3, r3, #1
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	bf0c      	ite	eq
 800e1bc:	2301      	moveq	r3, #1
 800e1be:	2300      	movne	r3, #0
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d02a      	beq.n	800e21c <_Z23getFont_verdana_10_4bppv+0x78>
 800e1c6:	4817      	ldr	r0, [pc, #92]	; (800e224 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e1c8:	f016 fe4b 	bl	8024e62 <__cxa_guard_acquire>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	bf14      	ite	ne
 800e1d2:	2301      	movne	r3, #1
 800e1d4:	2300      	moveq	r3, #0
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d01f      	beq.n	800e21c <_Z23getFont_verdana_10_4bppv+0x78>
 800e1dc:	2300      	movs	r3, #0
 800e1de:	9309      	str	r3, [sp, #36]	; 0x24
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	9308      	str	r3, [sp, #32]
 800e1e4:	233f      	movs	r3, #63	; 0x3f
 800e1e6:	9307      	str	r3, [sp, #28]
 800e1e8:	4b0f      	ldr	r3, [pc, #60]	; (800e228 <_Z23getFont_verdana_10_4bppv+0x84>)
 800e1ea:	9306      	str	r3, [sp, #24]
 800e1ec:	4b0f      	ldr	r3, [pc, #60]	; (800e22c <_Z23getFont_verdana_10_4bppv+0x88>)
 800e1ee:	9305      	str	r3, [sp, #20]
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	9304      	str	r3, [sp, #16]
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	9303      	str	r3, [sp, #12]
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	9302      	str	r3, [sp, #8]
 800e1fc:	2304      	movs	r3, #4
 800e1fe:	9301      	str	r3, [sp, #4]
 800e200:	2300      	movs	r3, #0
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	230a      	movs	r3, #10
 800e206:	220d      	movs	r2, #13
 800e208:	4909      	ldr	r1, [pc, #36]	; (800e230 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e20a:	480a      	ldr	r0, [pc, #40]	; (800e234 <_Z23getFont_verdana_10_4bppv+0x90>)
 800e20c:	f7ff ff2c 	bl	800e068 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e210:	4804      	ldr	r0, [pc, #16]	; (800e224 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e212:	f016 fe32 	bl	8024e7a <__cxa_guard_release>
 800e216:	4808      	ldr	r0, [pc, #32]	; (800e238 <_Z23getFont_verdana_10_4bppv+0x94>)
 800e218:	f016 ff6a 	bl	80250f0 <atexit>
    return verdana_10_4bpp;
 800e21c:	4b05      	ldr	r3, [pc, #20]	; (800e234 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 800e21e:	4618      	mov	r0, r3
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	20008dec 	.word	0x20008dec
 800e228:	0802d028 	.word	0x0802d028
 800e22c:	080284e8 	.word	0x080284e8
 800e230:	0802cdbc 	.word	0x0802cdbc
 800e234:	20008dc8 	.word	0x20008dc8
 800e238:	0800e195 	.word	0x0800e195

0800e23c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e23c:	b580      	push	{r7, lr}
 800e23e:	af00      	add	r7, sp, #0
 800e240:	4801      	ldr	r0, [pc, #4]	; (800e248 <__tcf_0+0xc>)
 800e242:	f7ff fec3 	bl	800dfcc <_ZN8touchgfx13GeneratedFontD1Ev>
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20008df0 	.word	0x20008df0

0800e24c <_Z23getFont_verdana_20_4bppv>:
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b08a      	sub	sp, #40	; 0x28
 800e250:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e252:	4b1e      	ldr	r3, [pc, #120]	; (800e2cc <_Z23getFont_verdana_20_4bppv+0x80>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	f3bf 8f5b 	dmb	ish
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	f003 0301 	and.w	r3, r3, #1
 800e260:	2b00      	cmp	r3, #0
 800e262:	bf0c      	ite	eq
 800e264:	2301      	moveq	r3, #1
 800e266:	2300      	movne	r3, #0
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d02a      	beq.n	800e2c4 <_Z23getFont_verdana_20_4bppv+0x78>
 800e26e:	4817      	ldr	r0, [pc, #92]	; (800e2cc <_Z23getFont_verdana_20_4bppv+0x80>)
 800e270:	f016 fdf7 	bl	8024e62 <__cxa_guard_acquire>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	bf14      	ite	ne
 800e27a:	2301      	movne	r3, #1
 800e27c:	2300      	moveq	r3, #0
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b00      	cmp	r3, #0
 800e282:	d01f      	beq.n	800e2c4 <_Z23getFont_verdana_20_4bppv+0x78>
 800e284:	2300      	movs	r3, #0
 800e286:	9309      	str	r3, [sp, #36]	; 0x24
 800e288:	2300      	movs	r3, #0
 800e28a:	9308      	str	r3, [sp, #32]
 800e28c:	233f      	movs	r3, #63	; 0x3f
 800e28e:	9307      	str	r3, [sp, #28]
 800e290:	4b0f      	ldr	r3, [pc, #60]	; (800e2d0 <_Z23getFont_verdana_20_4bppv+0x84>)
 800e292:	9306      	str	r3, [sp, #24]
 800e294:	4b0f      	ldr	r3, [pc, #60]	; (800e2d4 <_Z23getFont_verdana_20_4bppv+0x88>)
 800e296:	9305      	str	r3, [sp, #20]
 800e298:	2300      	movs	r3, #0
 800e29a:	9304      	str	r3, [sp, #16]
 800e29c:	2300      	movs	r3, #0
 800e29e:	9303      	str	r3, [sp, #12]
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	9302      	str	r3, [sp, #8]
 800e2a4:	2304      	movs	r3, #4
 800e2a6:	9301      	str	r3, [sp, #4]
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	2314      	movs	r3, #20
 800e2ae:	2212      	movs	r2, #18
 800e2b0:	4909      	ldr	r1, [pc, #36]	; (800e2d8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800e2b2:	480a      	ldr	r0, [pc, #40]	; (800e2dc <_Z23getFont_verdana_20_4bppv+0x90>)
 800e2b4:	f7ff fed8 	bl	800e068 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e2b8:	4804      	ldr	r0, [pc, #16]	; (800e2cc <_Z23getFont_verdana_20_4bppv+0x80>)
 800e2ba:	f016 fdde 	bl	8024e7a <__cxa_guard_release>
 800e2be:	4808      	ldr	r0, [pc, #32]	; (800e2e0 <_Z23getFont_verdana_20_4bppv+0x94>)
 800e2c0:	f016 ff16 	bl	80250f0 <atexit>
    return verdana_20_4bpp;
 800e2c4:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <_Z23getFont_verdana_20_4bppv+0x90>)
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	20008e14 	.word	0x20008e14
 800e2d0:	0802d02c 	.word	0x0802d02c
 800e2d4:	080284ec 	.word	0x080284ec
 800e2d8:	0802ce74 	.word	0x0802ce74
 800e2dc:	20008df0 	.word	0x20008df0
 800e2e0:	0800e23d 	.word	0x0800e23d

0800e2e4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	4801      	ldr	r0, [pc, #4]	; (800e2f0 <__tcf_0+0xc>)
 800e2ea:	f7ff fe6f 	bl	800dfcc <_ZN8touchgfx13GeneratedFontD1Ev>
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20008e18 	.word	0x20008e18

0800e2f4 <_Z23getFont_verdana_40_4bppv>:
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b08a      	sub	sp, #40	; 0x28
 800e2f8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e2fa:	4b1e      	ldr	r3, [pc, #120]	; (800e374 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	f3bf 8f5b 	dmb	ish
 800e302:	b2db      	uxtb	r3, r3
 800e304:	f003 0301 	and.w	r3, r3, #1
 800e308:	2b00      	cmp	r3, #0
 800e30a:	bf0c      	ite	eq
 800e30c:	2301      	moveq	r3, #1
 800e30e:	2300      	movne	r3, #0
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d02a      	beq.n	800e36c <_Z23getFont_verdana_40_4bppv+0x78>
 800e316:	4817      	ldr	r0, [pc, #92]	; (800e374 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e318:	f016 fda3 	bl	8024e62 <__cxa_guard_acquire>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	bf14      	ite	ne
 800e322:	2301      	movne	r3, #1
 800e324:	2300      	moveq	r3, #0
 800e326:	b2db      	uxtb	r3, r3
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d01f      	beq.n	800e36c <_Z23getFont_verdana_40_4bppv+0x78>
 800e32c:	2300      	movs	r3, #0
 800e32e:	9309      	str	r3, [sp, #36]	; 0x24
 800e330:	2300      	movs	r3, #0
 800e332:	9308      	str	r3, [sp, #32]
 800e334:	233f      	movs	r3, #63	; 0x3f
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	4b0f      	ldr	r3, [pc, #60]	; (800e378 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e33a:	9306      	str	r3, [sp, #24]
 800e33c:	4b0f      	ldr	r3, [pc, #60]	; (800e37c <_Z23getFont_verdana_40_4bppv+0x88>)
 800e33e:	9305      	str	r3, [sp, #20]
 800e340:	2300      	movs	r3, #0
 800e342:	9304      	str	r3, [sp, #16]
 800e344:	2300      	movs	r3, #0
 800e346:	9303      	str	r3, [sp, #12]
 800e348:	2301      	movs	r3, #1
 800e34a:	9302      	str	r3, [sp, #8]
 800e34c:	2304      	movs	r3, #4
 800e34e:	9301      	str	r3, [sp, #4]
 800e350:	2301      	movs	r3, #1
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	2328      	movs	r3, #40	; 0x28
 800e356:	220d      	movs	r2, #13
 800e358:	4909      	ldr	r1, [pc, #36]	; (800e380 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e35a:	480a      	ldr	r0, [pc, #40]	; (800e384 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e35c:	f7ff fe84 	bl	800e068 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e360:	4804      	ldr	r0, [pc, #16]	; (800e374 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e362:	f016 fd8a 	bl	8024e7a <__cxa_guard_release>
 800e366:	4808      	ldr	r0, [pc, #32]	; (800e388 <_Z23getFont_verdana_40_4bppv+0x94>)
 800e368:	f016 fec2 	bl	80250f0 <atexit>
    return verdana_40_4bpp;
 800e36c:	4b05      	ldr	r3, [pc, #20]	; (800e384 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 800e36e:	4618      	mov	r0, r3
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	20008e3c 	.word	0x20008e3c
 800e378:	0802d030 	.word	0x0802d030
 800e37c:	080284f0 	.word	0x080284f0
 800e380:	0802cf70 	.word	0x0802cf70
 800e384:	20008e18 	.word	0x20008e18
 800e388:	0800e2e5 	.word	0x0800e2e5

0800e38c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	4618      	mov	r0, r3
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
    {
    }
 800e3ae:	bf00      	nop
 800e3b0:	370c      	adds	r7, #12
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr

0800e3ba <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e3ba:	b480      	push	{r7}
 800e3bc:	b083      	sub	sp, #12
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	6039      	str	r1, [r7, #0]
    {
    }
 800e3c4:	bf00      	nop
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
    {
    }
 800e3da:	bf00      	nop
 800e3dc:	370c      	adds	r7, #12
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr

0800e3e6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800e3e6:	b480      	push	{r7}
 800e3e8:	b083      	sub	sp, #12
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	70fb      	strb	r3, [r7, #3]
    {
    }
 800e3f2:	bf00      	nop
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800e3fe:	b480      	push	{r7}
 800e400:	b083      	sub	sp, #12
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
    {
    }
 800e406:	bf00      	nop
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800e412:	b480      	push	{r7}
 800e414:	b083      	sub	sp, #12
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
    {
    }
 800e41a:	bf00      	nop
 800e41c:	370c      	adds	r7, #12
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr
	...

0800e428 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
    {
 800e430:	4a04      	ldr	r2, [pc, #16]	; (800e444 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	601a      	str	r2, [r3, #0]
    }
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr
 800e444:	080285fc 	.word	0x080285fc

0800e448 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
    }
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7ff ffe9 	bl	800e428 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e456:	2104      	movs	r1, #4
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f016 fd00 	bl	8024e5e <_ZdlPvj>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	4618      	mov	r0, r3
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	460b      	mov	r3, r1
 800e472:	70fb      	strb	r3, [r7, #3]
    {
    }
 800e474:	bf00      	nop
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr

0800e480 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	683a      	ldr	r2, [r7, #0]
 800e48e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e492:	6810      	ldr	r0, [r2, #0]
 800e494:	6851      	ldr	r1, [r2, #4]
 800e496:	c303      	stmia	r3!, {r0, r1}
    };
 800e498:	bf00      	nop
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
    {
 800e4ac:	4a04      	ldr	r2, [pc, #16]	; (800e4c0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	601a      	str	r2, [r3, #0]
    }
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	080285e4 	.word	0x080285e4

0800e4c4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
    }
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff ffe9 	bl	800e4a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e4d2:	2104      	movs	r1, #4
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f016 fcc2 	bl	8024e5e <_ZdlPvj>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e4e4:	b480      	push	{r7}
 800e4e6:	af00      	add	r7, sp, #0
    {
        return instance;
 800e4e8:	4b03      	ldr	r3, [pc, #12]	; (800e4f8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
    }
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	2000a060 	.word	0x2000a060

0800e4fc <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e4fc:	b480      	push	{r7}
 800e4fe:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800e500:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d008      	beq.n	800e51e <_ZN8touchgfx3HAL3lcdEv+0x22>
 800e50c:	4b08      	ldr	r3, [pc, #32]	; (800e530 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e512:	2b00      	cmp	r3, #0
 800e514:	d003      	beq.n	800e51e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800e516:	4b06      	ldr	r3, [pc, #24]	; (800e530 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e51c:	e002      	b.n	800e524 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800e51e:	4b04      	ldr	r3, [pc, #16]	; (800e530 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	689b      	ldr	r3, [r3, #8]
        }
    }
 800e524:	4618      	mov	r0, r3
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	2000a060 	.word	0x2000a060

0800e534 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800e53c:	4a07      	ldr	r2, [pc, #28]	; (800e55c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	601a      	str	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	605a      	str	r2, [r3, #4]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	721a      	strb	r2, [r3, #8]
    {
    }
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4618      	mov	r0, r3
 800e552:	370c      	adds	r7, #12
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr
 800e55c:	080285c0 	.word	0x080285c0

0800e560 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800e560:	b480      	push	{r7}
 800e562:	b083      	sub	sp, #12
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
    {
 800e568:	4a04      	ldr	r2, [pc, #16]	; (800e57c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	601a      	str	r2, [r3, #0]
    }
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4618      	mov	r0, r3
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	080285c0 	.word	0x080285c0

0800e580 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
    }
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f7ff ffe9 	bl	800e560 <_ZN8touchgfx10TransitionD1Ev>
 800e58e:	210c      	movs	r1, #12
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f016 fc64 	bl	8024e5e <_ZdlPvj>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4618      	mov	r0, r3
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
    {
    }
 800e5a8:	bf00      	nop
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
    {
    }
 800e5bc:	bf00      	nop
 800e5be:	370c      	adds	r7, #12
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr

0800e5c8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
    {
    }
 800e5d0:	bf00      	nop
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800e5e4:	f007 fe4a 	bl	801627c <_ZN8touchgfx11Application11getInstanceEv>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	3230      	adds	r2, #48	; 0x30
 800e5ee:	6812      	ldr	r2, [r2, #0]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	4790      	blx	r2
    }
 800e5f4:	bf00      	nop
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	605a      	str	r2, [r3, #4]
    }
 800e60c:	bf00      	nop
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	4a05      	ldr	r2, [pc, #20]	; (800e638 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	601a      	str	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4618      	mov	r0, r3
 800e62a:	f7ff fefd 	bl	800e428 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4618      	mov	r0, r3
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	08029e98 	.word	0x08029e98

0800e63c <_ZN8touchgfx11ApplicationD0Ev>:
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7ff ffe7 	bl	800e618 <_ZN8touchgfx11ApplicationD1Ev>
 800e64a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f016 fc05 	bl	8024e5e <_ZdlPvj>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4618      	mov	r0, r3
 800e658:	3708      	adds	r7, #8
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
	...

0800e660 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f007 fe26 	bl	80162bc <_ZN8touchgfx11ApplicationC1Ev>
 800e670:	4a09      	ldr	r2, [pc, #36]	; (800e698 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	601a      	str	r2, [r3, #0]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a04      	ldr	r2, [pc, #16]	; (800e69c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e68a:	6013      	str	r3, [r2, #0]
    }
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	4618      	mov	r0, r3
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	0802857c 	.word	0x0802857c
 800e69c:	2000a0ac 	.word	0x2000a0ac

0800e6a0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 f804 	bl	800e6b6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e6ae:	bf00      	nop
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b082      	sub	sp, #8
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00f      	beq.n	800e6e8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	330c      	adds	r3, #12
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4610      	mov	r0, r2
 800e6dc:	4798      	blx	r3
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d001      	beq.n	800e6e8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e000      	b.n	800e6ea <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00e      	beq.n	800e70c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3308      	adds	r3, #8
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4610      	mov	r0, r2
 800e702:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800e70c:	bf00      	nop
 800e70e:	3708      	adds	r7, #8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	601a      	str	r2, [r3, #0]
    }
 800e724:	bf00      	nop
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	4a05      	ldr	r2, [pc, #20]	; (800e750 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4618      	mov	r0, r3
 800e742:	f7ff ff69 	bl	800e618 <_ZN8touchgfx11ApplicationD1Ev>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4618      	mov	r0, r3
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	0802857c 	.word	0x0802857c

0800e754 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7ff ffe7 	bl	800e730 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e762:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f016 fb79 	bl	8024e5e <_ZdlPvj>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4618      	mov	r0, r3
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
	...

0800e778 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	4a08      	ldr	r2, [pc, #32]	; (800e7a4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	601a      	str	r2, [r3, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 fabd 	bl	800ed0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4618      	mov	r0, r3
 800e796:	f7ff ffcb 	bl	800e730 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4618      	mov	r0, r3
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	08028520 	.word	0x08028520

0800e7a8 <_ZN23FrontendApplicationBaseD0Ev>:
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7ff ffe1 	bl	800e778 <_ZN23FrontendApplicationBaseD1Ev>
 800e7b6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f016 fb4f 	bl	8024e5e <_ZdlPvj>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e7ca:	b480      	push	{r7}
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	721a      	strb	r2, [r3, #8]
    }
 800e7d8:	bf00      	nop
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	683a      	ldr	r2, [r7, #0]
 800e7f2:	605a      	str	r2, [r3, #4]
    }
 800e7f4:	bf00      	nop
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff ff26 	bl	800e660 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e814:	4a13      	ldr	r2, [pc, #76]	; (800e864 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	601a      	str	r2, [r3, #0]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e820:	4618      	mov	r0, r3
 800e822:	f000 f89f 	bl	800e964 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	68ba      	ldr	r2, [r7, #8]
 800e832:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800e836:	f7ff fe55 	bl	800e4e4 <_ZN8touchgfx3HAL11getInstanceEv>
 800e83a:	4603      	mov	r3, r0
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	3208      	adds	r2, #8
 800e840:	6812      	ldr	r2, [r2, #0]
 800e842:	2101      	movs	r1, #1
 800e844:	4618      	mov	r0, r3
 800e846:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800e848:	2000      	movs	r0, #0
 800e84a:	f001 fd77 	bl	801033c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e84e:	f7ff fe55 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 800e852:	4603      	mov	r3, r0
 800e854:	4618      	mov	r0, r3
 800e856:	f00f f9ea 	bl	801dc2e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	08028520 	.word	0x08028520

0800e868 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4618      	mov	r0, r3
 800e876:	370c      	adds	r7, #12
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	683a      	ldr	r2, [r7, #0]
 800e88e:	4611      	mov	r1, r2
 800e890:	4618      	mov	r0, r3
 800e892:	f7ff ffe9 	bl	800e868 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	685a      	ldr	r2, [r3, #4]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	605a      	str	r2, [r3, #4]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	683a      	ldr	r2, [r7, #0]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	3208      	adds	r2, #8
 800e8a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8aa:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800e8b8:	b590      	push	{r4, r7, lr}
 800e8ba:	b089      	sub	sp, #36	; 0x24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800e8c6:	4b10      	ldr	r3, [pc, #64]	; (800e908 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800e8c8:	61bb      	str	r3, [r7, #24]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	61fb      	str	r3, [r7, #28]
 800e8ce:	f107 0008 	add.w	r0, r7, #8
 800e8d2:	f107 0318 	add.w	r3, r7, #24
 800e8d6:	cb0c      	ldmia	r3, {r2, r3}
 800e8d8:	6879      	ldr	r1, [r7, #4]
 800e8da:	f000 f85f 	bl	800e99c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e8de:	f107 0308 	add.w	r3, r7, #8
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	f7ff ffcb 	bl	800e880 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e8ea:	f107 0308 	add.w	r3, r7, #8
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 fa0c 	bl	800ed0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800e900:	bf00      	nop
 800e902:	3724      	adds	r7, #36	; 0x24
 800e904:	46bd      	mov	sp, r7
 800e906:	bd90      	pop	{r4, r7, pc}
 800e908:	0800e90d 	.word	0x0800e90d

0800e90c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af02      	add	r7, sp, #8
 800e912:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e920:	461a      	mov	r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	4b04      	ldr	r3, [pc, #16]	; (800e93c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800e92c:	4804      	ldr	r0, [pc, #16]	; (800e940 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800e92e:	f000 f867 	bl	800ea00 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e932:	bf00      	nop
 800e934:	3708      	adds	r7, #8
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	2000a0a0 	.word	0x2000a0a0
 800e940:	2000a09c 	.word	0x2000a09c

0800e944 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	4a04      	ldr	r2, [pc, #16]	; (800e960 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4618      	mov	r0, r3
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	080285e4 	.word	0x080285e4

0800e964 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff ffe8 	bl	800e944 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e974:	4a08      	ldr	r2, [pc, #32]	; (800e998 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	601a      	str	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2200      	movs	r2, #0
 800e97e:	605a      	str	r2, [r3, #4]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2200      	movs	r2, #0
 800e984:	609a      	str	r2, [r3, #8]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	60da      	str	r2, [r3, #12]
    {
    }
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	4618      	mov	r0, r3
 800e990:	3708      	adds	r7, #8
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	08028564 	.word	0x08028564

0800e99c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7ff ffc8 	bl	800e944 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e9b4:	4a08      	ldr	r2, [pc, #32]	; (800e9d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	463a      	mov	r2, r7
 800e9c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	08028564 	.word	0x08028564

0800e9dc <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7ff fda4 	bl	800e534 <_ZN8touchgfx10TransitionC1Ev>
 800e9ec:	4a03      	ldr	r2, [pc, #12]	; (800e9fc <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	601a      	str	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	080284fc 	.word	0x080284fc

0800ea00 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ea00:	b590      	push	{r4, r7, lr}
 800ea02:	b08f      	sub	sp, #60	; 0x3c
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
 800ea0c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	689a      	ldr	r2, [r3, #8]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	3320      	adds	r3, #32
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	4798      	blx	r3
 800ea20:	4603      	mov	r3, r0
 800ea22:	f5b3 7f49 	cmp.w	r3, #804	; 0x324
 800ea26:	d205      	bcs.n	800ea34 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800ea28:	4b7e      	ldr	r3, [pc, #504]	; (800ec24 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ea2a:	4a7f      	ldr	r2, [pc, #508]	; (800ec28 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ea2c:	21a7      	movs	r1, #167	; 0xa7
 800ea2e:	487f      	ldr	r0, [pc, #508]	; (800ec2c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ea30:	f016 fb40 	bl	80250b4 <__assert_func>
 800ea34:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	685a      	ldr	r2, [r3, #4]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	3320      	adds	r3, #32
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4610      	mov	r0, r2
 800ea46:	4798      	blx	r3
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b0f      	cmp	r3, #15
 800ea4c:	d805      	bhi.n	800ea5a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800ea4e:	4b78      	ldr	r3, [pc, #480]	; (800ec30 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ea50:	4a75      	ldr	r2, [pc, #468]	; (800ec28 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ea52:	21a8      	movs	r1, #168	; 0xa8
 800ea54:	4875      	ldr	r0, [pc, #468]	; (800ec2c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ea56:	f016 fb2d 	bl	80250b4 <__assert_func>
 800ea5a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68da      	ldr	r2, [r3, #12]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	3320      	adds	r3, #32
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4610      	mov	r0, r2
 800ea6c:	4798      	blx	r3
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b0b      	cmp	r3, #11
 800ea72:	d805      	bhi.n	800ea80 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800ea74:	4b6f      	ldr	r3, [pc, #444]	; (800ec34 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800ea76:	4a6c      	ldr	r2, [pc, #432]	; (800ec28 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ea78:	21a9      	movs	r1, #169	; 0xa9
 800ea7a:	486c      	ldr	r0, [pc, #432]	; (800ec2c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ea7c:	f016 fb1a 	bl	80250b4 <__assert_func>
 800ea80:	bf00      	nop
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	627b      	str	r3, [r7, #36]	; 0x24
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800ea8e:	f007 fbf5 	bl	801627c <_ZN8touchgfx11Application11getInstanceEv>
 800ea92:	4603      	mov	r3, r0
 800ea94:	4618      	mov	r0, r3
 800ea96:	f007 fbf7 	bl	8016288 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800ea9a:	6a3b      	ldr	r3, [r7, #32]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d008      	beq.n	800eab4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800eaa2:	6a3b      	ldr	r3, [r7, #32]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	6a3b      	ldr	r3, [r7, #32]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	330c      	adds	r3, #12
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4610      	mov	r0, r2
 800eab2:	4798      	blx	r3
    if (*currentTrans)
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d007      	beq.n	800eacc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800eabc:	6a3b      	ldr	r3, [r7, #32]
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	6a3b      	ldr	r3, [r7, #32]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4610      	mov	r0, r2
 800eaca:	4798      	blx	r3
    if (*currentScreen)
 800eacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d008      	beq.n	800eae6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800ead4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	3314      	adds	r3, #20
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4610      	mov	r0, r2
 800eae4:	4798      	blx	r3
    if (*currentPresenter)
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d008      	beq.n	800eb00 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3304      	adds	r3, #4
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4610      	mov	r0, r2
 800eafe:	4798      	blx	r3
    if (*currentScreen)
 800eb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d007      	beq.n	800eb18 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4610      	mov	r0, r2
 800eb16:	4798      	blx	r3
    if (*currentPresenter)
 800eb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d008      	beq.n	800eb32 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	3308      	adds	r3, #8
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4610      	mov	r0, r2
 800eb30:	4798      	blx	r3
}
 800eb32:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	2100      	movs	r1, #0
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 f87c 	bl	800ec38 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800eb40:	4603      	mov	r3, r0
 800eb42:	4619      	mov	r1, r3
 800eb44:	200c      	movs	r0, #12
 800eb46:	f7ff fc21 	bl	800e38c <_ZnwjPv>
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f7ff ff45 	bl	800e9dc <_ZN8touchgfx12NoTransitionC1Ev>
 800eb52:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	2100      	movs	r1, #0
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f000 f87f 	bl	800ec5e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800eb60:	4603      	mov	r3, r0
 800eb62:	4619      	mov	r1, r3
 800eb64:	f44f 7049 	mov.w	r0, #804	; 0x324
 800eb68:	f7ff fc10 	bl	800e38c <_ZnwjPv>
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f001 ff06 	bl	8010980 <_ZN10screenViewC1Ev>
 800eb74:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f000 f881 	bl	800ec84 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800eb82:	4603      	mov	r3, r0
 800eb84:	4619      	mov	r1, r3
 800eb86:	2010      	movs	r0, #16
 800eb88:	f7ff fc00 	bl	800e38c <_ZnwjPv>
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb90:	4620      	mov	r0, r4
 800eb92:	f001 fdf7 	bl	8010784 <_ZN15screenPresenterC1ER10screenView>
 800eb96:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb9c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eba2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eba8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ebaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d002      	beq.n	800ebb6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800ebb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	e000      	b.n	800ebb8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ebbc:	f7ff fdaa 	bl	800e714 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ebc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc2:	3304      	adds	r3, #4
 800ebc4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7ff fe0c 	bl	800e7e4 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f000 f86a 	bl	800ecaa <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	61fb      	str	r3, [r7, #28]
 800ebda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebdc:	61bb      	str	r3, [r7, #24]
 800ebde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	330c      	adds	r3, #12
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	69f8      	ldr	r0, [r7, #28]
 800ebec:	4798      	blx	r3
    newPresenter->activate();
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	69b8      	ldr	r0, [r7, #24]
 800ebf6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ebf8:	6979      	ldr	r1, [r7, #20]
 800ebfa:	69f8      	ldr	r0, [r7, #28]
 800ebfc:	f008 ff55 	bl	8017aaa <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	3310      	adds	r3, #16
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	6978      	ldr	r0, [r7, #20]
 800ec0a:	4798      	blx	r3
    newTransition->invalidate();
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3314      	adds	r3, #20
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	6978      	ldr	r0, [r7, #20]
 800ec16:	4798      	blx	r3
}
 800ec18:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	373c      	adds	r7, #60	; 0x3c
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd90      	pop	{r4, r7, pc}
 800ec24:	080278f4 	.word	0x080278f4
 800ec28:	08027984 	.word	0x08027984
 800ec2c:	08027a88 	.word	0x08027a88
 800ec30:	08027acc 	.word	0x08027acc
 800ec34:	08027b70 	.word	0x08027b70

0800ec38 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	460b      	mov	r3, r1
 800ec42:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	3324      	adds	r3, #36	; 0x24
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	887a      	ldrh	r2, [r7, #2]
 800ec4e:	4611      	mov	r1, r2
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	4798      	blx	r3
 800ec54:	4603      	mov	r3, r0
    }
 800ec56:	4618      	mov	r0, r3
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b082      	sub	sp, #8
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
 800ec66:	460b      	mov	r3, r1
 800ec68:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3324      	adds	r3, #36	; 0x24
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	887a      	ldrh	r2, [r7, #2]
 800ec74:	4611      	mov	r1, r2
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	4798      	blx	r3
 800ec7a:	4603      	mov	r3, r0
    }
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	3324      	adds	r3, #36	; 0x24
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	887a      	ldrh	r2, [r7, #2]
 800ec9a:	4611      	mov	r1, r2
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	4798      	blx	r3
 800eca0:	4603      	mov	r3, r0
    }
 800eca2:	4618      	mov	r0, r3
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800ecaa:	b480      	push	{r7}
 800ecac:	b083      	sub	sp, #12
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
 800ecb2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ecba:	bf00      	nop
 800ecbc:	370c      	adds	r7, #12
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
	...

0800ecc8 <_ZN8touchgfx12NoTransitionD1Ev>:
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	4a05      	ldr	r2, [pc, #20]	; (800ece8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	601a      	str	r2, [r3, #0]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7ff fc41 	bl	800e560 <_ZN8touchgfx10TransitionD1Ev>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	3708      	adds	r7, #8
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	080284fc 	.word	0x080284fc

0800ecec <_ZN8touchgfx12NoTransitionD0Ev>:
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7ff ffe7 	bl	800ecc8 <_ZN8touchgfx12NoTransitionD1Ev>
 800ecfa:	210c      	movs	r1, #12
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f016 f8ae 	bl	8024e5e <_ZdlPvj>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	4618      	mov	r0, r3
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	4a05      	ldr	r2, [pc, #20]	; (800ed2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	601a      	str	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7ff fbc1 	bl	800e4a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4618      	mov	r0, r3
 800ed26:	3708      	adds	r7, #8
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	08028564 	.word	0x08028564

0800ed30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f7ff ffe7 	bl	800ed0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ed3e:	2110      	movs	r1, #16
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f016 f88c 	bl	8024e5e <_ZdlPvj>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	68d2      	ldr	r2, [r2, #12]
 800ed60:	1052      	asrs	r2, r2, #1
 800ed62:	1899      	adds	r1, r3, r2
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	f003 0301 	and.w	r3, r3, #1
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d102      	bne.n	800ed76 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	e00a      	b.n	800ed8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	68d2      	ldr	r2, [r2, #12]
 800ed7e:	1052      	asrs	r2, r2, #1
 800ed80:	4413      	add	r3, r2
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	6892      	ldr	r2, [r2, #8]
 800ed88:	4413      	add	r3, r2
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4608      	mov	r0, r1
 800ed8e:	4798      	blx	r3
    }
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d010      	beq.n	800edca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d107      	bne.n	800edc0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	f003 0301 	and.w	r3, r3, #1
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d101      	bne.n	800edc0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800edbc:	2301      	movs	r3, #1
 800edbe:	e000      	b.n	800edc2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800edc0:	2300      	movs	r3, #0
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d001      	beq.n	800edca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800edc6:	2301      	movs	r3, #1
 800edc8:	e000      	b.n	800edcc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800edca:	2300      	movs	r3, #0
    }
 800edcc:	4618      	mov	r0, r3
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	601a      	str	r2, [r3, #0]
    }
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4618      	mov	r0, r3
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800edf6:	b480      	push	{r7}
 800edf8:	b083      	sub	sp, #12
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	801a      	strh	r2, [r3, #0]
        y = 0;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	805a      	strh	r2, [r3, #2]
        width = 0;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	809a      	strh	r2, [r3, #4]
        height = 0;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2200      	movs	r2, #0
 800ee14:	80da      	strh	r2, [r3, #6]
    }
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800ee24:	b480      	push	{r7}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	4608      	mov	r0, r1
 800ee2e:	4611      	mov	r1, r2
 800ee30:	461a      	mov	r2, r3
 800ee32:	4603      	mov	r3, r0
 800ee34:	817b      	strh	r3, [r7, #10]
 800ee36:	460b      	mov	r3, r1
 800ee38:	813b      	strh	r3, [r7, #8]
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	897a      	ldrh	r2, [r7, #10]
 800ee42:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	893a      	ldrh	r2, [r7, #8]
 800ee48:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	88fa      	ldrh	r2, [r7, #6]
 800ee4e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	8b3a      	ldrh	r2, [r7, #24]
 800ee54:	80da      	strh	r2, [r3, #6]
    }
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3714      	adds	r7, #20
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	887a      	ldrh	r2, [r7, #2]
 800ee74:	801a      	strh	r2, [r3, #0]
    {
    }
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800ee8c:	4a13      	ldr	r2, [pc, #76]	; (800eedc <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	1d18      	adds	r0, r3, #4
 800ee96:	2300      	movs	r3, #0
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	2100      	movs	r1, #0
 800eea0:	f7ff ffc0 	bl	800ee24 <_ZN8touchgfx4RectC1Essss>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	330c      	adds	r3, #12
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff ffa4 	bl	800edf6 <_ZN8touchgfx4RectC1Ev>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	615a      	str	r2, [r3, #20]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	619a      	str	r2, [r3, #24]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	61da      	str	r2, [r3, #28]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4618      	mov	r0, r3
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	08029f88 	.word	0x08029f88

0800eee0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
    {
 800eee8:	4a04      	ldr	r2, [pc, #16]	; (800eefc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	601a      	str	r2, [r3, #0]
    }
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4618      	mov	r0, r3
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	08029f88 	.word	0x08029f88

0800ef00 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
    }
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f7ff ffe9 	bl	800eee0 <_ZN8touchgfx8DrawableD1Ev>
 800ef0e:	2128      	movs	r1, #40	; 0x28
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f015 ffa4 	bl	8024e5e <_ZdlPvj>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ef28:	2300      	movs	r3, #0
    }
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr

0800ef36 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b084      	sub	sp, #16
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	60f8      	str	r0, [r7, #12]
 800ef3e:	4608      	mov	r0, r1
 800ef40:	4611      	mov	r1, r2
 800ef42:	461a      	mov	r2, r3
 800ef44:	4603      	mov	r3, r0
 800ef46:	817b      	strh	r3, [r7, #10]
 800ef48:	460b      	mov	r3, r1
 800ef4a:	813b      	strh	r3, [r7, #8]
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800ef50:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ef54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ef58:	4619      	mov	r1, r3
 800ef5a:	68f8      	ldr	r0, [r7, #12]
 800ef5c:	f000 f82a 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800ef60:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ef64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f000 f87e 	bl	800f06c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800ef70:	bf00      	nop
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	887a      	ldrh	r2, [r7, #2]
 800ef88:	809a      	strh	r2, [r3, #4]
    }
 800ef8a:	bf00      	nop
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr

0800ef96 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800ef96:	b480      	push	{r7}
 800ef98:	b083      	sub	sp, #12
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
 800ef9e:	460b      	mov	r3, r1
 800efa0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	887a      	ldrh	r2, [r7, #2]
 800efa6:	80da      	strh	r2, [r3, #6]
    }
 800efa8:	bf00      	nop
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	460b      	mov	r3, r1
 800efbe:	807b      	strh	r3, [r7, #2]
 800efc0:	4613      	mov	r3, r2
 800efc2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	332c      	adds	r3, #44	; 0x2c
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800efd0:	4611      	mov	r1, r2
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	4798      	blx	r3
        setY(y);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	3330      	adds	r3, #48	; 0x30
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f9b7 2000 	ldrsh.w	r2, [r7]
 800efe2:	4611      	mov	r1, r2
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	4798      	blx	r3
    }
 800efe8:	bf00      	nop
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	460b      	mov	r3, r1
 800effa:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	887a      	ldrh	r2, [r7, #2]
 800f000:	811a      	strh	r2, [r3, #8]
    }
 800f002:	bf00      	nop
 800f004:	370c      	adds	r7, #12
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr

0800f00e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800f00e:	b480      	push	{r7}
 800f010:	b083      	sub	sp, #12
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
 800f016:	460b      	mov	r3, r1
 800f018:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	887a      	ldrh	r2, [r7, #2]
 800f01e:	815a      	strh	r2, [r3, #10]
    }
 800f020:	bf00      	nop
 800f022:	370c      	adds	r7, #12
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr

0800f02c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
    {
    }
 800f034:	bf00      	nop
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr

0800f040 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
    {
    }
 800f04a:	bf00      	nop
 800f04c:	370c      	adds	r7, #12
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800f056:	b480      	push	{r7}
 800f058:	b083      	sub	sp, #12
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
 800f05e:	6039      	str	r1, [r7, #0]
    {
    }
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	460b      	mov	r3, r1
 800f076:	807b      	strh	r3, [r7, #2]
 800f078:	4613      	mov	r3, r2
 800f07a:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	3334      	adds	r3, #52	; 0x34
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f088:	4611      	mov	r1, r2
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	4798      	blx	r3
        setHeight(height);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	3338      	adds	r3, #56	; 0x38
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f09a:	4611      	mov	r1, r2
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	4798      	blx	r3
    }
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
    {
    }
 800f0b2:	bf00      	nop
 800f0b4:	370c      	adds	r7, #12
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800f0be:	b480      	push	{r7}
 800f0c0:	b083      	sub	sp, #12
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
    {
    }
 800f0c6:	bf00      	nop
 800f0c8:	370c      	adds	r7, #12
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr

0800f0d2 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800f0d2:	b480      	push	{r7}
 800f0d4:	b083      	sub	sp, #12
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
 800f0da:	460b      	mov	r3, r1
 800f0dc:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	78fa      	ldrb	r2, [r7, #3]
 800f0e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800f0e6:	bf00      	nop
 800f0e8:	370c      	adds	r7, #12
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800f0f2:	b480      	push	{r7}
 800f0f4:	b083      	sub	sp, #12
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800f100:	4618      	mov	r0, r3
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr

0800f10c <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800f10c:	b480      	push	{r7}
 800f10e:	b083      	sub	sp, #12
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800f11a:	4618      	mov	r0, r3
 800f11c:	370c      	adds	r7, #12
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr

0800f126 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f126:	b580      	push	{r7, lr}
 800f128:	b082      	sub	sp, #8
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
 800f12e:	460b      	mov	r3, r1
 800f130:	807b      	strh	r3, [r7, #2]
 800f132:	4613      	mov	r3, r2
 800f134:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	3350      	adds	r3, #80	; 0x50
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	8879      	ldrh	r1, [r7, #2]
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f146:	b292      	uxth	r2, r2
 800f148:	1a8a      	subs	r2, r1, r2
 800f14a:	b292      	uxth	r2, r2
 800f14c:	b210      	sxth	r0, r2
 800f14e:	8839      	ldrh	r1, [r7, #0]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f156:	b292      	uxth	r2, r2
 800f158:	1a8a      	subs	r2, r1, r2
 800f15a:	b292      	uxth	r2, r2
 800f15c:	b212      	sxth	r2, r2
 800f15e:	4601      	mov	r1, r0
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	4798      	blx	r3
    }
 800f164:	bf00      	nop
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f17a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f182:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f18a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f7ff ffe1 	bl	800f16c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	601a      	str	r2, [r3, #0]
    }
 800f1b8:	bf00      	nop
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
    {
 800f1c8:	4a06      	ldr	r2, [pc, #24]	; (800f1e4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	601a      	str	r2, [r3, #0]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f000 fe34 	bl	800fe40 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	0802a07c 	.word	0x0802a07c

0800f1e8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
    }
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7ff ffe5 	bl	800f1c0 <_ZN8touchgfx6ScreenD1Ev>
 800f1f6:	213c      	movs	r1, #60	; 0x3c
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f015 fe30 	bl	8024e5e <_ZdlPvj>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4618      	mov	r0, r3
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
    {
    }
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
    {
    }
 800f224:	bf00      	nop
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
    {
    }
 800f238:	bf00      	nop
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
    {
    }
 800f24c:	bf00      	nop
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f264:	bf00      	nop
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	3304      	adds	r3, #4
 800f27e:	6839      	ldr	r1, [r7, #0]
 800f280:	4618      	mov	r0, r3
 800f282:	f003 ff41 	bl	8013108 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f286:	bf00      	nop
 800f288:	3708      	adds	r7, #8
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800f28e:	b580      	push	{r7, lr}
 800f290:	b084      	sub	sp, #16
 800f292:	af00      	add	r7, sp, #0
 800f294:	60f8      	str	r0, [r7, #12]
 800f296:	607b      	str	r3, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	817b      	strh	r3, [r7, #10]
 800f29c:	4613      	mov	r3, r2
 800f29e:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7ff ff25 	bl	800f0f2 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d008      	beq.n	800f2c0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7ff ff2b 	bl	800f10c <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f2bc:	2301      	movs	r3, #1
 800f2be:	e000      	b.n	800f2c2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d002      	beq.n	800f2cc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	601a      	str	r2, [r3, #0]
        }
    }
 800f2cc:	bf00      	nop
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7ff fdd0 	bl	800ee84 <_ZN8touchgfx8DrawableC1Ev>
 800f2e4:	4a03      	ldr	r2, [pc, #12]	; (800f2f4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	601a      	str	r2, [r3, #0]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	080286c4 	.word	0x080286c4

0800f2f8 <_ZN8touchgfx6WidgetD1Ev>:
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	4a05      	ldr	r2, [pc, #20]	; (800f318 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	601a      	str	r2, [r3, #0]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4618      	mov	r0, r3
 800f30a:	f7ff fde9 	bl	800eee0 <_ZN8touchgfx8DrawableD1Ev>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4618      	mov	r0, r3
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	080286c4 	.word	0x080286c4

0800f31c <_ZN8touchgfx6WidgetD0Ev>:
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7ff ffe7 	bl	800f2f8 <_ZN8touchgfx6WidgetD1Ev>
 800f32a:	2128      	movs	r1, #40	; 0x28
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f015 fd96 	bl	8024e5e <_ZdlPvj>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4618      	mov	r0, r3
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4618      	mov	r0, r3
 800f348:	2326      	movs	r3, #38	; 0x26
 800f34a:	461a      	mov	r2, r3
 800f34c:	2100      	movs	r1, #0
 800f34e:	f015 ff5b 	bl	8025208 <memset>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4618      	mov	r0, r3
 800f356:	f7ff ffbd 	bl	800f2d4 <_ZN8touchgfx6WidgetC1Ev>
 800f35a:	4a0a      	ldr	r2, [pc, #40]	; (800f384 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	601a      	str	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	629a      	str	r2, [r3, #40]	; 0x28
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2101      	movs	r1, #1
 800f372:	4618      	mov	r0, r3
 800f374:	f7ff fead 	bl	800f0d2 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	4618      	mov	r0, r3
 800f37c:	3708      	adds	r7, #8
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	080299b8 	.word	0x080299b8

0800f388 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	683a      	ldr	r2, [r7, #0]
 800f396:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f398:	bf00      	nop
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	4a05      	ldr	r2, [pc, #20]	; (800f3c4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	601a      	str	r2, [r3, #0]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7ff ff9f 	bl	800f2f8 <_ZN8touchgfx6WidgetD1Ev>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3708      	adds	r7, #8
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	080299b8 	.word	0x080299b8

0800f3c8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7ff ffe7 	bl	800f3a4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f3d6:	2130      	movs	r1, #48	; 0x30
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f015 fd40 	bl	8024e5e <_ZdlPvj>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7ff ffa2 	bl	800f33c <_ZN8touchgfx14AbstractButtonC1Ev>
 800f3f8:	4a0c      	ldr	r2, [pc, #48]	; (800f42c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	601a      	str	r2, [r3, #0]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	332e      	adds	r3, #46	; 0x2e
 800f402:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f406:	4618      	mov	r0, r3
 800f408:	f7ff fd2c 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	3330      	adds	r3, #48	; 0x30
 800f410:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f414:	4618      	mov	r0, r3
 800f416:	f7ff fd25 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	22ff      	movs	r2, #255	; 0xff
 800f41e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4618      	mov	r0, r3
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	08029c04 	.word	0x08029c04

0800f430 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4618      	mov	r0, r3
 800f43c:	2326      	movs	r3, #38	; 0x26
 800f43e:	461a      	mov	r2, r3
 800f440:	2100      	movs	r1, #0
 800f442:	f015 fee1 	bl	8025208 <memset>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4618      	mov	r0, r3
 800f44a:	f7ff ff43 	bl	800f2d4 <_ZN8touchgfx6WidgetC1Ev>
 800f44e:	4a09      	ldr	r2, [pc, #36]	; (800f474 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	22ff      	movs	r2, #255	; 0xff
 800f458:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	3328      	adds	r3, #40	; 0x28
 800f460:	2100      	movs	r1, #0
 800f462:	4618      	mov	r0, r3
 800f464:	f7ff fcb8 	bl	800edd8 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4618      	mov	r0, r3
 800f46c:	3708      	adds	r7, #8
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	08029b3c 	.word	0x08029b3c

0800f478 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	683a      	ldr	r2, [r7, #0]
 800f486:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f488:	bf00      	nop
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800f494:	b590      	push	{r4, r7, lr}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
 800f49a:	4603      	mov	r3, r0
 800f49c:	71fb      	strb	r3, [r7, #7]
 800f49e:	460b      	mov	r3, r1
 800f4a0:	71bb      	strb	r3, [r7, #6]
 800f4a2:	4613      	mov	r3, r2
 800f4a4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800f4a6:	f7ff f81d 	bl	800e4e4 <_ZN8touchgfx3HAL11getInstanceEv>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d105      	bne.n	800f4bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800f4b0:	4b0a      	ldr	r3, [pc, #40]	; (800f4dc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800f4b2:	4a0b      	ldr	r2, [pc, #44]	; (800f4e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800f4b4:	2135      	movs	r1, #53	; 0x35
 800f4b6:	480b      	ldr	r0, [pc, #44]	; (800f4e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800f4b8:	f015 fdfc 	bl	80250b4 <__assert_func>
 800f4bc:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800f4be:	f7ff f81d 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 800f4c2:	6803      	ldr	r3, [r0, #0]
 800f4c4:	3328      	adds	r3, #40	; 0x28
 800f4c6:	681c      	ldr	r4, [r3, #0]
 800f4c8:	797b      	ldrb	r3, [r7, #5]
 800f4ca:	79ba      	ldrb	r2, [r7, #6]
 800f4cc:	79f9      	ldrb	r1, [r7, #7]
 800f4ce:	47a0      	blx	r4
 800f4d0:	4603      	mov	r3, r0
    }
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	370c      	adds	r7, #12
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd90      	pop	{r4, r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	08027c14 	.word	0x08027c14
 800f4e0:	08027c58 	.word	0x08027c58
 800f4e4:	08027cb4 	.word	0x08027cb4

0800f4e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	2326      	movs	r3, #38	; 0x26
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	f015 fe84 	bl	8025208 <memset>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4618      	mov	r0, r3
 800f504:	f7ff fee6 	bl	800f2d4 <_ZN8touchgfx6WidgetC1Ev>
 800f508:	4a0b      	ldr	r2, [pc, #44]	; (800f538 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	601a      	str	r2, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	3326      	adds	r3, #38	; 0x26
 800f512:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f516:	4618      	mov	r0, r3
 800f518:	f7ff fca4 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	22ff      	movs	r2, #255	; 0xff
 800f520:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bitmap);
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f005 f9c2 	bl	80148b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4618      	mov	r0, r3
 800f530:	3708      	adds	r7, #8
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	08029d50 	.word	0x08029d50

0800f53c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	460b      	mov	r3, r1
 800f546:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f548:	4a06      	ldr	r2, [pc, #24]	; (800f564 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	887a      	ldrh	r2, [r7, #2]
 800f552:	809a      	strh	r2, [r3, #4]
    }
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4618      	mov	r0, r3
 800f558:	370c      	adds	r7, #12
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	0802848c 	.word	0x0802848c

0800f568 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4618      	mov	r0, r3
 800f574:	2326      	movs	r3, #38	; 0x26
 800f576:	461a      	mov	r2, r3
 800f578:	2100      	movs	r1, #0
 800f57a:	f015 fe45 	bl	8025208 <memset>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4618      	mov	r0, r3
 800f582:	f7ff fea7 	bl	800f2d4 <_ZN8touchgfx6WidgetC1Ev>
 800f586:	4a14      	ldr	r2, [pc, #80]	; (800f5d8 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	601a      	str	r2, [r3, #0]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	3328      	adds	r3, #40	; 0x28
 800f590:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f594:	4618      	mov	r0, r3
 800f596:	f7ff ffd1 	bl	800f53c <_ZN8touchgfx9TypedTextC1Et>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3330      	adds	r3, #48	; 0x30
 800f59e:	2100      	movs	r1, #0
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7ff fc19 	bl	800edd8 <_ZN8touchgfx9colortypeC1Em>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	869a      	strh	r2, [r3, #52]	; 0x34
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	22ff      	movs	r2, #255	; 0xff
 800f5b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	08029a94 	.word	0x08029a94

0800f5dc <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b082      	sub	sp, #8
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	4a08      	ldr	r2, [pc, #32]	; (800f608 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	601a      	str	r2, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	3328      	adds	r3, #40	; 0x28
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fe fd0e 	bl	800e010 <_ZN8touchgfx9TypedTextD1Ev>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7ff fe7e 	bl	800f2f8 <_ZN8touchgfx6WidgetD1Ev>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4618      	mov	r0, r3
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	08029a94 	.word	0x08029a94

0800f60c <_ZN8touchgfx8TextAreaD0Ev>:
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f7ff ffe1 	bl	800f5dc <_ZN8touchgfx8TextAreaD1Ev>
 800f61a:	213c      	movs	r1, #60	; 0x3c
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f015 fc1e 	bl	8024e5e <_ZdlPvj>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4618      	mov	r0, r3
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	4618      	mov	r0, r3
 800f638:	f7ff ff96 	bl	800f568 <_ZN8touchgfx8TextAreaC1Ev>
 800f63c:	4a05      	ldr	r2, [pc, #20]	; (800f654 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	601a      	str	r2, [r3, #0]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2200      	movs	r2, #0
 800f646:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4618      	mov	r0, r3
 800f64c:	3708      	adds	r7, #8
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	08029ca8 	.word	0x08029ca8

0800f658 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	460b      	mov	r3, r1
 800f662:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	78fa      	ldrb	r2, [r7, #3]
 800f668:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    }
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	8812      	ldrh	r2, [r2, #0]
 800f68a:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	68b9      	ldr	r1, [r7, #8]
 800f692:	4618      	mov	r0, r3
 800f694:	f004 ff9a 	bl	80145cc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800f698:	bf00      	nop
 800f69a:	3710      	adds	r7, #16
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	4a05      	ldr	r2, [pc, #20]	; (800f6c0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	601a      	str	r2, [r3, #0]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7ff fd85 	bl	800f1c0 <_ZN8touchgfx6ScreenD1Ev>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3708      	adds	r7, #8
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	08028678 	.word	0x08028678

0800f6c4 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7ff ffe7 	bl	800f6a0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800f6d2:	2140      	movs	r1, #64	; 0x40
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f015 fbc2 	bl	8024e5e <_ZdlPvj>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	4a25      	ldr	r2, [pc, #148]	; (800f784 <_ZN14screenViewBaseD1Ev+0xa0>)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f000 fb7f 	bl	800fdfc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800f704:	4618      	mov	r0, r3
 800f706:	f000 fc6d 	bl	800ffe4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800f710:	4618      	mov	r0, r3
 800f712:	f000 fc67 	bl	800ffe4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800f71c:	4618      	mov	r0, r3
 800f71e:	f000 f859 	bl	800f7d4 <_ZN8touchgfx6ButtonD1Ev>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 fc39 	bl	800ffa0 <_ZN8touchgfx12ToggleButtonD1Ev>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800f734:	4618      	mov	r0, r3
 800f736:	f000 fc11 	bl	800ff5c <_ZN8touchgfx5ImageD1Ev>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f740:	4618      	mov	r0, r3
 800f742:	f000 fc0b 	bl	800ff5c <_ZN8touchgfx5ImageD1Ev>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800f74c:	4618      	mov	r0, r3
 800f74e:	f000 fc05 	bl	800ff5c <_ZN8touchgfx5ImageD1Ev>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	33f8      	adds	r3, #248	; 0xf8
 800f756:	4618      	mov	r0, r3
 800f758:	f000 fc00 	bl	800ff5c <_ZN8touchgfx5ImageD1Ev>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	336c      	adds	r3, #108	; 0x6c
 800f760:	4618      	mov	r0, r3
 800f762:	f000 fbd3 	bl	800ff0c <_ZN8touchgfx12DigitalClockD1Ev>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	3340      	adds	r3, #64	; 0x40
 800f76a:	4618      	mov	r0, r3
 800f76c:	f000 fb8a 	bl	800fe84 <_ZN8touchgfx3BoxD1Ev>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4618      	mov	r0, r3
 800f774:	f7ff ff94 	bl	800f6a0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4618      	mov	r0, r3
 800f77c:	3708      	adds	r7, #8
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	08028624 	.word	0x08028624

0800f788 <_ZN14screenViewBaseD0Ev>:
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f7ff ffa7 	bl	800f6e4 <_ZN14screenViewBaseD1Ev>
 800f796:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f015 fb5f 	bl	8024e5e <_ZdlPvj>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3708      	adds	r7, #8
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <_ZN14screenViewBase22updateOnOffButtonStateEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void updateOnOffButtonState()
 800f7aa:	b480      	push	{r7}
 800f7ac:	b083      	sub	sp, #12
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 800f7b2:	bf00      	nop
 800f7b4:	370c      	adds	r7, #12
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr

0800f7be <_ZN14screenViewBase22updateSetUpButtonStateEv>:

    virtual void updateSetUpButtonState()
 800f7be:	b480      	push	{r7}
 800f7c0:	b083      	sub	sp, #12
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 800f7c6:	bf00      	nop
 800f7c8:	370c      	adds	r7, #12
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
	...

0800f7d4 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	4a05      	ldr	r2, [pc, #20]	; (800f7f4 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	601a      	str	r2, [r3, #0]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7ff fddd 	bl	800f3a4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	08029c04 	.word	0x08029c04

0800f7f8 <_ZN8touchgfx6ButtonD0Ev>:
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f7ff ffe7 	bl	800f7d4 <_ZN8touchgfx6ButtonD1Ev>
 800f806:	2134      	movs	r1, #52	; 0x34
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f015 fb28 	bl	8024e5e <_ZdlPvj>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	3708      	adds	r7, #8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4618      	mov	r0, r3
 800f824:	f7ff fde0 	bl	800f3e8 <_ZN8touchgfx6ButtonC1Ev>
 800f828:	4a07      	ldr	r2, [pc, #28]	; (800f848 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	3334      	adds	r3, #52	; 0x34
 800f832:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f836:	4618      	mov	r0, r3
 800f838:	f7ff fb14 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	4618      	mov	r0, r3
 800f840:	3708      	adds	r7, #8
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	08029a24 	.word	0x08029a24

0800f84c <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

screenViewBase::screenViewBase() :
 800f84c:	b590      	push	{r4, r7, lr}
 800f84e:	b0a1      	sub	sp, #132	; 0x84
 800f850:	af02      	add	r7, sp, #8
 800f852:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	4618      	mov	r0, r3
 800f858:	f000 fa6a 	bl	800fd30 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800f85c:	4ae0      	ldr	r2, [pc, #896]	; (800fbe0 <_ZN14screenViewBaseC1Ev+0x394>)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	601a      	str	r2, [r3, #0]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	3340      	adds	r3, #64	; 0x40
 800f866:	4618      	mov	r0, r3
 800f868:	f7ff fde2 	bl	800f430 <_ZN8touchgfx3BoxC1Ev>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	336c      	adds	r3, #108	; 0x6c
 800f870:	4618      	mov	r0, r3
 800f872:	f003 fb07 	bl	8012e84 <_ZN8touchgfx12DigitalClockC1Ev>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 800f87c:	f107 0310 	add.w	r3, r7, #16
 800f880:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f884:	4618      	mov	r0, r3
 800f886:	f7ff faed 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800f88a:	f107 0310 	add.w	r3, r7, #16
 800f88e:	4619      	mov	r1, r3
 800f890:	4620      	mov	r0, r4
 800f892:	f7ff fe29 	bl	800f4e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f503 7492 	add.w	r4, r3, #292	; 0x124
 800f89c:	f107 0314 	add.w	r3, r7, #20
 800f8a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7ff fadd 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800f8aa:	f107 0314 	add.w	r3, r7, #20
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f7ff fe19 	bl	800f4e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800f8bc:	f107 0318 	add.w	r3, r7, #24
 800f8c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7ff facd 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800f8ca:	f107 0318 	add.w	r3, r7, #24
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f7ff fe09 	bl	800f4e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800f8dc:	f107 031c 	add.w	r3, r7, #28
 800f8e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7ff fabd 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800f8ea:	f107 031c 	add.w	r3, r7, #28
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	f7ff fdf9 	bl	800f4e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7ff ff8b 	bl	800f818 <_ZN8touchgfx12ToggleButtonC1Ev>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800f908:	4618      	mov	r0, r3
 800f90a:	f7ff fd6d 	bl	800f3e8 <_ZN8touchgfx6ButtonC1Ev>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800f914:	4618      	mov	r0, r3
 800f916:	f7ff fe89 	bl	800f62c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800f920:	4618      	mov	r0, r3
 800f922:	f7ff fe83 	bl	800f62c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f503 7025 	add.w	r0, r3, #660	; 0x294
 800f92c:	4bad      	ldr	r3, [pc, #692]	; (800fbe4 <_ZN14screenViewBaseC1Ev+0x398>)
 800f92e:	623b      	str	r3, [r7, #32]
 800f930:	2300      	movs	r3, #0
 800f932:	627b      	str	r3, [r7, #36]	; 0x24
 800f934:	f107 0320 	add.w	r3, r7, #32
 800f938:	cb0c      	ldmia	r3, {r2, r3}
 800f93a:	6879      	ldr	r1, [r7, #4]
 800f93c:	f000 fa1e 	bl	800fd7c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 240, 320);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f946:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f94a:	9300      	str	r3, [sp, #0]
 800f94c:	23f0      	movs	r3, #240	; 0xf0
 800f94e:	2200      	movs	r2, #0
 800f950:	2100      	movs	r1, #0
 800f952:	f7ff faf0 	bl	800ef36 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f95c:	2200      	movs	r2, #0
 800f95e:	2100      	movs	r1, #0
 800f960:	2000      	movs	r0, #0
 800f962:	f7ff fd97 	bl	800f494 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f966:	4603      	mov	r3, r0
 800f968:	4619      	mov	r1, r3
 800f96a:	4620      	mov	r0, r4
 800f96c:	f7ff fd84 	bl	800f478 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    digitalClock1.setPosition(7, 16, 66, 31);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800f976:	231f      	movs	r3, #31
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	2342      	movs	r3, #66	; 0x42
 800f97c:	2210      	movs	r2, #16
 800f97e:	2107      	movs	r1, #7
 800f980:	f7ff fad9 	bl	800ef36 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f98a:	2200      	movs	r2, #0
 800f98c:	2100      	movs	r1, #0
 800f98e:	2000      	movs	r0, #0
 800f990:	f7ff fd80 	bl	800f494 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f994:	4603      	mov	r3, r0
 800f996:	4619      	mov	r1, r3
 800f998:	4620      	mov	r0, r4
 800f99a:	f003 f938 	bl	8012c0e <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f9a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7ff fdc6 	bl	800f53c <_ZN8touchgfx9TypedTextC1Et>
 800f9b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f003 f96e 	bl	8012c98 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 800f9bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7fe fb25 	bl	800e010 <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	336c      	adds	r3, #108	; 0x6c
 800f9ca:	2101      	movs	r1, #1
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f003 fa9b 	bl	8012f08 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	336c      	adds	r3, #108	; 0x6c
 800f9d6:	2101      	movs	r1, #1
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7ff fe3d 	bl	800f658 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock1.setTime24Hour(9, 10, 0);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	220a      	movs	r2, #10
 800f9e8:	2109      	movs	r1, #9
 800f9ea:	f003 fa90 	bl	8012f0e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>

    humImage.setXY(9, 160);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	33f8      	adds	r3, #248	; 0xf8
 800f9f2:	22a0      	movs	r2, #160	; 0xa0
 800f9f4:	2109      	movs	r1, #9
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff fadc 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
    humImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_HUMIDITY_64_ID));
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 800fa02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fa06:	2103      	movs	r1, #3
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7ff fa2b 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800fa0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fa12:	4619      	mov	r1, r3
 800fa14:	4620      	mov	r0, r4
 800fa16:	f004 ff4b 	bl	80148b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    tempImage.setXY(-7, 47);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800fa20:	222f      	movs	r2, #47	; 0x2f
 800fa22:	f06f 0106 	mvn.w	r1, #6
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7ff fac4 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
    tempImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_TEMPERATURE_96_ID));
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f503 7492 	add.w	r4, r3, #292	; 0x124
 800fa32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fa36:	2106      	movs	r1, #6
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7ff fa13 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800fa3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fa42:	4619      	mov	r1, r3
 800fa44:	4620      	mov	r0, r4
 800fa46:	f004 ff33 	bl	80148b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    wifiImage.setXY(185, 7);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa50:	2207      	movs	r2, #7
 800fa52:	21b9      	movs	r1, #185	; 0xb9
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff faad 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
    wifiImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_WI_FI_48_ID));
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800fa60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fa64:	2107      	movs	r1, #7
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7ff f9fc 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800fa6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fa70:	4619      	mov	r1, r3
 800fa72:	4620      	mov	r0, r4
 800fa74:	f004 ff1c 	bl	80148b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    celsiusImage.setXY(177, 79);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800fa7e:	224f      	movs	r2, #79	; 0x4f
 800fa80:	21b1      	movs	r1, #177	; 0xb1
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7ff fa96 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
    celsiusImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_CELSIUS_32_ID));
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800fa8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fa92:	2102      	movs	r1, #2
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7ff f9e5 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800fa9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fa9e:	4619      	mov	r1, r3
 800faa0:	4620      	mov	r0, r4
 800faa2:	f004 ff05 	bl	80148b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    humOnOffButton.setXY(92, 251);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800faac:	22fb      	movs	r2, #251	; 0xfb
 800faae:	215c      	movs	r1, #92	; 0x5c
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7ff fa7f 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
    humOnOffButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800fabc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fac0:	2100      	movs	r1, #0
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7ff f9ce 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800fac8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800facc:	2101      	movs	r1, #1
 800face:	4618      	mov	r0, r3
 800fad0:	f7ff f9c8 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800fad4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800fad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fadc:	4619      	mov	r1, r3
 800fade:	4620      	mov	r0, r4
 800fae0:	f7ff fdca 	bl	800f678 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    humOnOffButton.setAction(buttonCallback);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800faf0:	4619      	mov	r1, r3
 800faf2:	4610      	mov	r0, r2
 800faf4:	f7ff fc48 	bl	800f388 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    setUpButton.setXY(17, 246);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800fafe:	22f6      	movs	r2, #246	; 0xf6
 800fb00:	2111      	movs	r1, #17
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7ff fa56 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
    setUpButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_SETTINGS_48_ID), touchgfx::Bitmap(BITMAP_ICONS8_SETTINGS_48_ID));
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 800fb0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fb12:	2104      	movs	r1, #4
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7ff f9a5 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800fb1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fb1e:	2104      	movs	r1, #4
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7ff f99f 	bl	800ee64 <_ZN8touchgfx6BitmapC1Et>
 800fb26:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800fb2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fb2e:	4619      	mov	r1, r3
 800fb30:	4620      	mov	r0, r4
 800fb32:	f004 fd4b 	bl	80145cc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    setUpButton.setAction(buttonCallback);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800fb42:	4619      	mov	r1, r3
 800fb44:	4610      	mov	r0, r2
 800fb46:	f7ff fc1f 	bl	800f388 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    humText.setXY(164, 180);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fb50:	22b4      	movs	r2, #180	; 0xb4
 800fb52:	21a4      	movs	r1, #164	; 0xa4
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7ff fa2d 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
    humText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f503 7405 	add.w	r4, r3, #532	; 0x214
 800fb60:	22ff      	movs	r2, #255	; 0xff
 800fb62:	21ff      	movs	r1, #255	; 0xff
 800fb64:	20ff      	movs	r0, #255	; 0xff
 800fb66:	f7ff fc95 	bl	800f494 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	663c      	str	r4, [r7, #96]	; 0x60
 800fb6e:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800fb70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800fb76:	bf00      	nop
    humText.setLinespacing(0);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fb7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb80:	2300      	movs	r3, #0
 800fb82:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800fb86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb88:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800fb8c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800fb8e:	bf00      	nop
    humText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f503 7405 	add.w	r4, r3, #532	; 0x214
 800fb96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7ff fccd 	bl	800f53c <_ZN8touchgfx9TypedTextC1Et>
 800fba2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fba6:	4619      	mov	r1, r3
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f004 fcd8 	bl	801455e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800fbae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe fa2c 	bl	800e010 <_ZN8touchgfx9TypedTextD1Ev>

    tempText.setXY(156, 71);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800fbbe:	2247      	movs	r2, #71	; 0x47
 800fbc0:	219c      	movs	r1, #156	; 0x9c
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7ff f9f6 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
    tempText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f503 7415 	add.w	r4, r3, #596	; 0x254
 800fbce:	22ff      	movs	r2, #255	; 0xff
 800fbd0:	21ff      	movs	r1, #255	; 0xff
 800fbd2:	20ff      	movs	r0, #255	; 0xff
 800fbd4:	f7ff fc5e 	bl	800f494 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	66fc      	str	r4, [r7, #108]	; 0x6c
 800fbdc:	e004      	b.n	800fbe8 <_ZN14screenViewBaseC1Ev+0x39c>
 800fbde:	bf00      	nop
 800fbe0:	08028624 	.word	0x08028624
 800fbe4:	0800fced 	.word	0x0800fced
 800fbe8:	60bb      	str	r3, [r7, #8]
        this->color = color;
 800fbea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800fbf0:	bf00      	nop
    tempText.setLinespacing(0);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800fbf8:	677b      	str	r3, [r7, #116]	; 0x74
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        linespace = space;
 800fc00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc02:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800fc06:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800fc08:	bf00      	nop
    tempText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f503 7415 	add.w	r4, r3, #596	; 0x254
 800fc10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fc14:	2102      	movs	r1, #2
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff fc90 	bl	800f53c <_ZN8touchgfx9TypedTextC1Et>
 800fc1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fc20:	4619      	mov	r1, r3
 800fc22:	4620      	mov	r0, r4
 800fc24:	f004 fc9b 	bl	801455e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800fc28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7fe f9ef 	bl	800e010 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	3340      	adds	r3, #64	; 0x40
 800fc38:	4619      	mov	r1, r3
 800fc3a:	4610      	mov	r0, r2
 800fc3c:	f7ff fb18 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(digitalClock1);
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	336c      	adds	r3, #108	; 0x6c
 800fc46:	4619      	mov	r1, r3
 800fc48:	4610      	mov	r0, r2
 800fc4a:	f7ff fb11 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humImage);
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	33f8      	adds	r3, #248	; 0xf8
 800fc54:	4619      	mov	r1, r3
 800fc56:	4610      	mov	r0, r2
 800fc58:	f7ff fb0a 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempImage);
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800fc64:	4619      	mov	r1, r3
 800fc66:	4610      	mov	r0, r2
 800fc68:	f7ff fb02 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(wifiImage);
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fc74:	4619      	mov	r1, r3
 800fc76:	4610      	mov	r0, r2
 800fc78:	f7ff fafa 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(celsiusImage);
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800fc84:	4619      	mov	r1, r3
 800fc86:	4610      	mov	r0, r2
 800fc88:	f7ff faf2 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humOnOffButton);
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fc94:	4619      	mov	r1, r3
 800fc96:	4610      	mov	r0, r2
 800fc98:	f7ff faea 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(setUpButton);
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800fca4:	4619      	mov	r1, r3
 800fca6:	4610      	mov	r0, r2
 800fca8:	f7ff fae2 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humText);
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	4610      	mov	r0, r2
 800fcb8:	f7ff fada 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempText);
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	4610      	mov	r0, r2
 800fcc8:	f7ff fad2 	bl	800f270 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	377c      	adds	r7, #124	; 0x7c
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd90      	pop	{r4, r7, pc}
 800fcd6:	bf00      	nop

0800fcd8 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]

}
 800fce0:	bf00      	nop
 800fce2:	370c      	adds	r7, #12
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr

0800fcec <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
    if (&src == &humOnOffButton)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fcfc:	683a      	ldr	r2, [r7, #0]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d106      	bne.n	800fd10 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When humOnOffButton clicked call virtual function
        //Call updateOnOffButtonState
        updateOnOffButtonState();
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	332c      	adds	r3, #44	; 0x2c
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	4798      	blx	r3
        //Interaction2
        //When setUpButton clicked call virtual function
        //Call updateSetUpButtonState
        updateSetUpButtonState();
    }
}
 800fd0e:	e00b      	b.n	800fd28 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &setUpButton)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800fd16:	683a      	ldr	r2, [r7, #0]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d105      	bne.n	800fd28 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        updateSetUpButtonState();
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	3330      	adds	r3, #48	; 0x30
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	4798      	blx	r3
}
 800fd28:	bf00      	nop
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f007 fd3a 	bl	80177b4 <_ZN8touchgfx6ScreenC1Ev>
 800fd40:	4a05      	ldr	r2, [pc, #20]	; (800fd58 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	601a      	str	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	08028678 	.word	0x08028678

0800fd5c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	4a04      	ldr	r2, [pc, #16]	; (800fd78 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	601a      	str	r2, [r3, #0]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr
 800fd78:	080286ac 	.word	0x080286ac

0800fd7c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	4639      	mov	r1, r7
 800fd88:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7ff ffe4 	bl	800fd5c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800fd94:	4a08      	ldr	r2, [pc, #32]	; (800fdb8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	3308      	adds	r3, #8
 800fda4:	463a      	mov	r2, r7
 800fda6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdaa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	08028660 	.word	0x08028660

0800fdbc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
    }
 800fdc4:	4a04      	ldr	r2, [pc, #16]	; (800fdd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	601a      	str	r2, [r3, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr
 800fdd8:	080286ac 	.word	0x080286ac

0800fddc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
    }
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f7ff ffe9 	bl	800fdbc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fdea:	2104      	movs	r1, #4
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f015 f836 	bl	8024e5e <_ZdlPvj>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	4a05      	ldr	r2, [pc, #20]	; (800fe1c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	601a      	str	r2, [r3, #0]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7ff ffd5 	bl	800fdbc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	08028660 	.word	0x08028660

0800fe20 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7ff ffe7 	bl	800fdfc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800fe2e:	2110      	movs	r1, #16
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f015 f814 	bl	8024e5e <_ZdlPvj>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	4a05      	ldr	r2, [pc, #20]	; (800fe60 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7ff f845 	bl	800eee0 <_ZN8touchgfx8DrawableD1Ev>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	080291a4 	.word	0x080291a4

0800fe64 <_ZN8touchgfx9ContainerD0Ev>:
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7ff ffe7 	bl	800fe40 <_ZN8touchgfx9ContainerD1Ev>
 800fe72:	212c      	movs	r1, #44	; 0x2c
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f014 fff2 	bl	8024e5e <_ZdlPvj>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	4a05      	ldr	r2, [pc, #20]	; (800fea4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	601a      	str	r2, [r3, #0]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7ff fa2f 	bl	800f2f8 <_ZN8touchgfx6WidgetD1Ev>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	08029b3c 	.word	0x08029b3c

0800fea8 <_ZN8touchgfx3BoxD0Ev>:
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f7ff ffe7 	bl	800fe84 <_ZN8touchgfx3BoxD1Ev>
 800feb6:	212c      	movs	r1, #44	; 0x2c
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f014 ffd0 	bl	8024e5e <_ZdlPvj>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4618      	mov	r0, r3
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	4a05      	ldr	r2, [pc, #20]	; (800fee8 <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	601a      	str	r2, [r3, #0]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4618      	mov	r0, r3
 800feda:	f7ff ffb1 	bl	800fe40 <_ZN8touchgfx9ContainerD1Ev>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4618      	mov	r0, r3
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	08029048 	.word	0x08029048

0800feec <_ZN8touchgfx13AbstractClockD0Ev>:
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7ff ffe7 	bl	800fec8 <_ZN8touchgfx13AbstractClockD1Ev>
 800fefa:	2130      	movs	r1, #48	; 0x30
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f014 ffae 	bl	8024e5e <_ZdlPvj>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4618      	mov	r0, r3
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	4a08      	ldr	r2, [pc, #32]	; (800ff38 <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	3334      	adds	r3, #52	; 0x34
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 f860 	bl	800ffe4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7ff ffce 	bl	800fec8 <_ZN8touchgfx13AbstractClockD1Ev>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	08028f60 	.word	0x08028f60

0800ff3c <_ZN8touchgfx12DigitalClockD0Ev>:
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff ffe1 	bl	800ff0c <_ZN8touchgfx12DigitalClockD1Ev>
 800ff4a:	218c      	movs	r1, #140	; 0x8c
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f014 ff86 	bl	8024e5e <_ZdlPvj>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4618      	mov	r0, r3
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}

0800ff5c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	4a05      	ldr	r2, [pc, #20]	; (800ff7c <_ZN8touchgfx5ImageD1Ev+0x20>)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	601a      	str	r2, [r3, #0]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7ff f9c3 	bl	800f2f8 <_ZN8touchgfx6WidgetD1Ev>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	4618      	mov	r0, r3
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	08029d50 	.word	0x08029d50

0800ff80 <_ZN8touchgfx5ImageD0Ev>:
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff ffe7 	bl	800ff5c <_ZN8touchgfx5ImageD1Ev>
 800ff8e:	212c      	movs	r1, #44	; 0x2c
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f014 ff64 	bl	8024e5e <_ZdlPvj>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	4a05      	ldr	r2, [pc, #20]	; (800ffc0 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	601a      	str	r2, [r3, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7ff fc0f 	bl	800f7d4 <_ZN8touchgfx6ButtonD1Ev>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	08029a24 	.word	0x08029a24

0800ffc4 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7ff ffe7 	bl	800ffa0 <_ZN8touchgfx12ToggleButtonD1Ev>
 800ffd2:	2138      	movs	r1, #56	; 0x38
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f014 ff42 	bl	8024e5e <_ZdlPvj>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	4a05      	ldr	r2, [pc, #20]	; (8010004 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	601a      	str	r2, [r3, #0]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7ff faf1 	bl	800f5dc <_ZN8touchgfx8TextAreaD1Ev>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4618      	mov	r0, r3
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	08029ca8 	.word	0x08029ca8

08010008 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f7ff ffe7 	bl	800ffe4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010016:	2140      	movs	r1, #64	; 0x40
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f014 ff20 	bl	8024e5e <_ZdlPvj>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4618      	mov	r0, r3
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	68d2      	ldr	r2, [r2, #12]
 801003a:	1052      	asrs	r2, r2, #1
 801003c:	1898      	adds	r0, r3, r2
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	68db      	ldr	r3, [r3, #12]
 8010042:	f003 0301 	and.w	r3, r3, #1
 8010046:	2b00      	cmp	r3, #0
 8010048:	d102      	bne.n	8010050 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	e00a      	b.n	8010066 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	68d2      	ldr	r2, [r2, #12]
 8010058:	1052      	asrs	r2, r2, #1
 801005a:	4413      	add	r3, r2
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	6892      	ldr	r2, [r2, #8]
 8010062:	4413      	add	r3, r2
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	4798      	blx	r3
    }
 801006a:	bf00      	nop
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010072:	b480      	push	{r7}
 8010074:	b083      	sub	sp, #12
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d010      	beq.n	80100a4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	689b      	ldr	r3, [r3, #8]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d107      	bne.n	801009a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	f003 0301 	and.w	r3, r3, #1
 8010092:	2b00      	cmp	r3, #0
 8010094:	d101      	bne.n	801009a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010096:	2301      	movs	r3, #1
 8010098:	e000      	b.n	801009c <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801009a:	2300      	movs	r3, #0
 801009c:	2b01      	cmp	r3, #1
 801009e:	d001      	beq.n	80100a4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80100a0:	2301      	movs	r3, #1
 80100a2:	e000      	b.n	80100a6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80100a4:	2300      	movs	r3, #0
    }
 80100a6:	4618      	mov	r0, r3
 80100a8:	370c      	adds	r7, #12
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr
	...

080100b4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80100b4:	b480      	push	{r7}
 80100b6:	af00      	add	r7, sp, #0
    return bitmap_database;
 80100b8:	4b02      	ldr	r3, [pc, #8]	; (80100c4 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr
 80100c4:	08028720 	.word	0x08028720

080100c8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80100c8:	b480      	push	{r7}
 80100ca:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80100cc:	230c      	movs	r3, #12
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80100d8:	b480      	push	{r7}
 80100da:	b085      	sub	sp, #20
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	460b      	mov	r3, r1
 80100e2:	607a      	str	r2, [r7, #4]
 80100e4:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 80100e6:	2300      	movs	r3, #0
    }
 80100e8:	4618      	mov	r0, r3
 80100ea:	3714      	adds	r7, #20
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80100fc:	2300      	movs	r3, #0
    }
 80100fe:	4618      	mov	r0, r3
 8010100:	370c      	adds	r7, #12
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr
	...

0801010c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801010c:	b480      	push	{r7}
 801010e:	b085      	sub	sp, #20
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	4613      	mov	r3, r2
 8010118:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 801011a:	4a07      	ldr	r2, [pc, #28]	; (8010138 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010120:	4a06      	ldr	r2, [pc, #24]	; (801013c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010126:	4a06      	ldr	r2, [pc, #24]	; (8010140 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010128:	88fb      	ldrh	r3, [r7, #6]
 801012a:	8013      	strh	r3, [r2, #0]
    }
 801012c:	bf00      	nop
 801012e:	3714      	adds	r7, #20
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr
 8010138:	2000a0b0 	.word	0x2000a0b0
 801013c:	2000a0b8 	.word	0x2000a0b8
 8010140:	2000a0b4 	.word	0x2000a0b4

08010144 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010144:	b40e      	push	{r1, r2, r3}
 8010146:	b580      	push	{r7, lr}
 8010148:	b085      	sub	sp, #20
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 801014e:	f107 0320 	add.w	r3, r7, #32
 8010152:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	69fa      	ldr	r2, [r7, #28]
 8010158:	2100      	movs	r1, #0
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f006 fee0 	bl	8016f20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010160:	4603      	mov	r3, r0
 8010162:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010164:	89fb      	ldrh	r3, [r7, #14]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010170:	b003      	add	sp, #12
 8010172:	4770      	bx	lr

08010174 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010174:	b40c      	push	{r2, r3}
 8010176:	b580      	push	{r7, lr}
 8010178:	b084      	sub	sp, #16
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
 801017e:	460b      	mov	r3, r1
 8010180:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8010182:	f107 031c 	add.w	r3, r7, #28
 8010186:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010188:	78f9      	ldrb	r1, [r7, #3]
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	69ba      	ldr	r2, [r7, #24]
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f006 fec6 	bl	8016f20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010194:	4603      	mov	r3, r0
 8010196:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010198:	89fb      	ldrh	r3, [r7, #14]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3710      	adds	r7, #16
 801019e:	46bd      	mov	sp, r7
 80101a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80101a4:	b002      	add	sp, #8
 80101a6:	4770      	bx	lr

080101a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b08a      	sub	sp, #40	; 0x28
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	460b      	mov	r3, r1
 80101b2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d016      	beq.n	80101ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	331a      	adds	r3, #26
 80101c0:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80101c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c4:	8adb      	ldrh	r3, [r3, #22]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d105      	bne.n	80101d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80101ca:	4b43      	ldr	r3, [pc, #268]	; (80102d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80101cc:	4a43      	ldr	r2, [pc, #268]	; (80102dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80101ce:	21c0      	movs	r1, #192	; 0xc0
 80101d0:	4843      	ldr	r0, [pc, #268]	; (80102e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80101d2:	f014 ff6f 	bl	80250b4 <__assert_func>
            return buffer[pos];
 80101d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d8:	8a9b      	ldrh	r3, [r3, #20]
 80101da:	461a      	mov	r2, r3
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d001      	beq.n	80101ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80101e6:	2301      	movs	r3, #1
 80101e8:	e000      	b.n	80101ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80101ea:	2300      	movs	r3, #0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d06a      	beq.n	80102c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f008 f9b3 	bl	801855c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	331a      	adds	r3, #26
 80101fa:	623b      	str	r3, [r7, #32]
 80101fc:	2301      	movs	r3, #1
 80101fe:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010200:	6a3b      	ldr	r3, [r7, #32]
 8010202:	8adb      	ldrh	r3, [r3, #22]
 8010204:	8bfa      	ldrh	r2, [r7, #30]
 8010206:	429a      	cmp	r2, r3
 8010208:	d305      	bcc.n	8010216 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801020a:	4b36      	ldr	r3, [pc, #216]	; (80102e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801020c:	4a36      	ldr	r2, [pc, #216]	; (80102e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801020e:	21c5      	movs	r1, #197	; 0xc5
 8010210:	4833      	ldr	r0, [pc, #204]	; (80102e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010212:	f014 ff4f 	bl	80250b4 <__assert_func>
            const uint16_t index = pos + offset;
 8010216:	6a3b      	ldr	r3, [r7, #32]
 8010218:	8a9a      	ldrh	r2, [r3, #20]
 801021a:	8bfb      	ldrh	r3, [r7, #30]
 801021c:	4413      	add	r3, r2
 801021e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010220:	8bbb      	ldrh	r3, [r7, #28]
 8010222:	2b09      	cmp	r3, #9
 8010224:	d801      	bhi.n	801022a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010226:	8bbb      	ldrh	r3, [r7, #28]
 8010228:	e001      	b.n	801022e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801022a:	8bbb      	ldrh	r3, [r7, #28]
 801022c:	3b0a      	subs	r3, #10
 801022e:	6a3a      	ldr	r2, [r7, #32]
 8010230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010234:	f640 123f 	movw	r2, #2367	; 0x93f
 8010238:	4293      	cmp	r3, r2
 801023a:	bf0c      	ite	eq
 801023c:	2301      	moveq	r3, #1
 801023e:	2300      	movne	r3, #0
 8010240:	b2db      	uxtb	r3, r3
 8010242:	2b00      	cmp	r3, #0
 8010244:	d03f      	beq.n	80102c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	331a      	adds	r3, #26
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	321a      	adds	r2, #26
 801024e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010250:	68ba      	ldr	r2, [r7, #8]
 8010252:	8ad2      	ldrh	r2, [r2, #22]
 8010254:	2a00      	cmp	r2, #0
 8010256:	d105      	bne.n	8010264 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010258:	4b1f      	ldr	r3, [pc, #124]	; (80102d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801025a:	4a20      	ldr	r2, [pc, #128]	; (80102dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801025c:	21c0      	movs	r1, #192	; 0xc0
 801025e:	4820      	ldr	r0, [pc, #128]	; (80102e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010260:	f014 ff28 	bl	80250b4 <__assert_func>
            return buffer[pos];
 8010264:	68ba      	ldr	r2, [r7, #8]
 8010266:	8a92      	ldrh	r2, [r2, #20]
 8010268:	4611      	mov	r1, r2
 801026a:	68ba      	ldr	r2, [r7, #8]
 801026c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010270:	613b      	str	r3, [r7, #16]
 8010272:	4613      	mov	r3, r2
 8010274:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	8adb      	ldrh	r3, [r3, #22]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d806      	bhi.n	801028c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 801027e:	4b1b      	ldr	r3, [pc, #108]	; (80102ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8010280:	4a1b      	ldr	r2, [pc, #108]	; (80102f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8010282:	f240 110d 	movw	r1, #269	; 0x10d
 8010286:	4816      	ldr	r0, [pc, #88]	; (80102e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010288:	f014 ff14 	bl	80250b4 <__assert_func>
            const uint16_t index = pos + 1;
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	8a9b      	ldrh	r3, [r3, #20]
 8010290:	3301      	adds	r3, #1
 8010292:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010294:	89bb      	ldrh	r3, [r7, #12]
 8010296:	2b09      	cmp	r3, #9
 8010298:	d801      	bhi.n	801029e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801029a:	89bb      	ldrh	r3, [r7, #12]
 801029c:	e000      	b.n	80102a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801029e:	2300      	movs	r3, #0
 80102a0:	693a      	ldr	r2, [r7, #16]
 80102a2:	89f9      	ldrh	r1, [r7, #14]
 80102a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80102a8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	331a      	adds	r3, #26
 80102ae:	61bb      	str	r3, [r7, #24]
 80102b0:	f640 133f 	movw	r3, #2367	; 0x93f
 80102b4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	8a9b      	ldrh	r3, [r3, #20]
 80102ba:	4619      	mov	r1, r3
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	8afa      	ldrh	r2, [r7, #22]
 80102c0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80102c4:	bf00      	nop
        }
    }
    return getNextChar();
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f008 f82c 	bl	8018324 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80102cc:	4603      	mov	r3, r0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3728      	adds	r7, #40	; 0x28
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	08027cf4 	.word	0x08027cf4
 80102dc:	08027d00 	.word	0x08027d00
 80102e0:	08027dac 	.word	0x08027dac
 80102e4:	08027df4 	.word	0x08027df4
 80102e8:	08027e04 	.word	0x08027e04
 80102ec:	08027ed8 	.word	0x08027ed8
 80102f0:	08027ee4 	.word	0x08027ee4

080102f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f007 ffcb 	bl	8018298 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8010302:	bf00      	nop
 8010304:	3708      	adds	r7, #8
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}

0801030a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801030a:	b580      	push	{r7, lr}
 801030c:	b088      	sub	sp, #32
 801030e:	af02      	add	r7, sp, #8
 8010310:	60f8      	str	r0, [r7, #12]
 8010312:	1d38      	adds	r0, r7, #4
 8010314:	e880 0006 	stmia.w	r0, {r1, r2}
 8010318:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 801031a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801031e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8010320:	1d39      	adds	r1, r7, #4
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	9301      	str	r3, [sp, #4]
 8010326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	6a3b      	ldr	r3, [r7, #32]
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f005 fb3d 	bl	80159ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8010334:	bf00      	nop
 8010336:	3718      	adds	r7, #24
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801033c:	b590      	push	{r4, r7, lr}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
 8010342:	4603      	mov	r3, r0
 8010344:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010346:	2300      	movs	r3, #0
 8010348:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801034a:	88fb      	ldrh	r3, [r7, #6]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d127      	bne.n	80103a0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010350:	88fb      	ldrh	r3, [r7, #6]
 8010352:	4a1e      	ldr	r2, [pc, #120]	; (80103cc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d016      	beq.n	801038a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 801035c:	88fb      	ldrh	r3, [r7, #6]
 801035e:	4a1b      	ldr	r2, [pc, #108]	; (80103cc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010364:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	68ba      	ldr	r2, [r7, #8]
 801036c:	4413      	add	r3, r2
 801036e:	4a18      	ldr	r2, [pc, #96]	; (80103d0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010370:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	4413      	add	r3, r2
 801037a:	4a16      	ldr	r2, [pc, #88]	; (80103d4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801037c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	68ba      	ldr	r2, [r7, #8]
 8010384:	4413      	add	r3, r2
 8010386:	60fb      	str	r3, [r7, #12]
 8010388:	e00a      	b.n	80103a0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801038a:	4b11      	ldr	r3, [pc, #68]	; (80103d0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801038c:	4a12      	ldr	r2, [pc, #72]	; (80103d8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801038e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010390:	4a12      	ldr	r2, [pc, #72]	; (80103dc <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8010392:	4b10      	ldr	r3, [pc, #64]	; (80103d4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010394:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010396:	88fb      	ldrh	r3, [r7, #6]
 8010398:	4a11      	ldr	r2, [pc, #68]	; (80103e0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801039e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00d      	beq.n	80103c2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80103a6:	4a0f      	ldr	r2, [pc, #60]	; (80103e4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80103a8:	88fb      	ldrh	r3, [r7, #6]
 80103aa:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80103ac:	f000 f83e 	bl	801042c <_ZN17TypedTextDatabase8getFontsEv>
 80103b0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80103b2:	f000 f833 	bl	801041c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80103b6:	4603      	mov	r3, r0
 80103b8:	461a      	mov	r2, r3
 80103ba:	4621      	mov	r1, r4
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f7ff fea5 	bl	801010c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80103c2:	bf00      	nop
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd90      	pop	{r4, r7, pc}
 80103ca:	bf00      	nop
 80103cc:	20008e40 	.word	0x20008e40
 80103d0:	20008e48 	.word	0x20008e48
 80103d4:	20008e4c 	.word	0x20008e4c
 80103d8:	080645c0 	.word	0x080645c0
 80103dc:	080645b4 	.word	0x080645b4
 80103e0:	080645cc 	.word	0x080645cc
 80103e4:	20008e44 	.word	0x20008e44

080103e8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	460b      	mov	r3, r1
 80103f2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80103f4:	4b07      	ldr	r3, [pc, #28]	; (8010414 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	4b07      	ldr	r3, [pc, #28]	; (8010418 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80103fa:	6819      	ldr	r1, [r3, #0]
 80103fc:	887b      	ldrh	r3, [r7, #2]
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	440b      	add	r3, r1
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	005b      	lsls	r3, r3, #1
 8010406:	4413      	add	r3, r2
}
 8010408:	4618      	mov	r0, r3
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr
 8010414:	20008e48 	.word	0x20008e48
 8010418:	20008e4c 	.word	0x20008e4c

0801041c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801041c:	b480      	push	{r7}
 801041e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8010420:	2303      	movs	r3, #3
}
 8010422:	4618      	mov	r0, r3
 8010424:	46bd      	mov	sp, r7
 8010426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042a:	4770      	bx	lr

0801042c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 801042c:	b480      	push	{r7}
 801042e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8010430:	4b02      	ldr	r3, [pc, #8]	; (801043c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8010432:	4618      	mov	r0, r3
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr
 801043c:	20008e50 	.word	0x20008e50

08010440 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b01      	cmp	r3, #1
 801044e:	d113      	bne.n	8010478 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010456:	4293      	cmp	r3, r2
 8010458:	d10e      	bne.n	8010478 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801045a:	f7fd fef7 	bl	800e24c <_Z23getFont_verdana_20_4bppv>
 801045e:	4603      	mov	r3, r0
};
 8010460:	4a07      	ldr	r2, [pc, #28]	; (8010480 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010462:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8010464:	f7fd ff46 	bl	800e2f4 <_Z23getFont_verdana_40_4bppv>
 8010468:	4603      	mov	r3, r0
};
 801046a:	4a05      	ldr	r2, [pc, #20]	; (8010480 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801046c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 801046e:	f7fd fe99 	bl	800e1a4 <_Z23getFont_verdana_10_4bppv>
 8010472:	4603      	mov	r3, r0
};
 8010474:	4a02      	ldr	r2, [pc, #8]	; (8010480 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010476:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 8010478:	bf00      	nop
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	20008e50 	.word	0x20008e50

08010484 <_GLOBAL__sub_I_touchgfx_fonts>:
 8010484:	b580      	push	{r7, lr}
 8010486:	af00      	add	r7, sp, #0
 8010488:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801048c:	2001      	movs	r0, #1
 801048e:	f7ff ffd7 	bl	8010440 <_Z41__static_initialization_and_destruction_0ii>
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	4a05      	ldr	r2, [pc, #20]	; (80104b4 <_ZN19FrontendApplicationD1Ev+0x20>)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fe f967 	bl	800e778 <_ZN23FrontendApplicationBaseD1Ev>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4618      	mov	r0, r3
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	08028868 	.word	0x08028868

080104b8 <_ZN19FrontendApplicationD0Ev>:
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7ff ffe7 	bl	8010494 <_ZN19FrontendApplicationD1Ev>
 80104c6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f014 fcc7 	bl	8024e5e <_ZdlPvj>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	4618      	mov	r0, r3
 80104d4:	3708      	adds	r7, #8
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}

080104da <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80104da:	b580      	push	{r7, lr}
 80104dc:	b082      	sub	sp, #8
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80104e8:	4618      	mov	r0, r3
 80104ea:	f000 f82d 	bl	8010548 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f005 fda5 	bl	8016040 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80104f6:	bf00      	nop
 80104f8:	3708      	adds	r7, #8
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
	...

08010500 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	68b9      	ldr	r1, [r7, #8]
 8010512:	4618      	mov	r0, r3
 8010514:	f7fe f974 	bl	800e800 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8010518:	4a03      	ldr	r2, [pc, #12]	; (8010528 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	601a      	str	r2, [r3, #0]
{

}
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	4618      	mov	r0, r3
 8010522:	3710      	adds	r7, #16
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	08028868 	.word	0x08028868

0801052c <_ZN5ModelC1Ev>:
extern osThreadId    eventLoopTaskHandle;
extern osMessageQId  envQueueHandle;
extern osSemaphoreId envSemHandle;
extern osPoolId      Pool_ID;

Model::Model() : modelListener(0)
 801052c:	b480      	push	{r7}
 801052e:	b083      	sub	sp, #12
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2200      	movs	r2, #0
 8010538:	601a      	str	r2, [r3, #0]
{

}
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	4618      	mov	r0, r3
 801053e:	370c      	adds	r7, #12
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr

08010548 <_ZN5Model4tickEv>:

void Model::tick()
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b0aa      	sub	sp, #168	; 0xa8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6178      	str	r0, [r7, #20]
	//sensorUpdatePeriod=0;
	//if (sensorUpdatePeriod >=100)
	{

		osEvent event;
		event = osMessageGet(envQueueHandle, 1);
 8010550:	4b1c      	ldr	r3, [pc, #112]	; (80105c4 <_ZN5Model4tickEv+0x7c>)
 8010552:	6819      	ldr	r1, [r3, #0]
 8010554:	463b      	mov	r3, r7
 8010556:	2201      	movs	r2, #1
 8010558:	4618      	mov	r0, r3
 801055a:	f7fa fd43 	bl	800afe4 <osMessageGet>
 801055e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010562:	463a      	mov	r2, r7
 8010564:	ca07      	ldmia	r2, {r0, r1, r2}
 8010566:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if (event.status == osEventMessage)
 801056a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801056e:	2b10      	cmp	r3, #16
 8010570:	d124      	bne.n	80105bc <_ZN5Model4tickEv+0x74>
		{
			ENV_MSG *envData;


			char buf[128] = {0,};
 8010572:	2300      	movs	r3, #0
 8010574:	61bb      	str	r3, [r7, #24]
 8010576:	f107 031c 	add.w	r3, r7, #28
 801057a:	227c      	movs	r2, #124	; 0x7c
 801057c:	2100      	movs	r1, #0
 801057e:	4618      	mov	r0, r3
 8010580:	f014 fe42 	bl	8025208 <memset>

			envData = (ENV_MSG *)event.value.p;
 8010584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010588:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			snprintf(buf, sizeof(buf), "humid:%d\r\n", envData->humid);
			HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 100);
#endif

			//osPoolFree(Pool_ID, envData);
			modelListener->UpdateTemp((envData->temp));
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	6818      	ldr	r0, [r3, #0]
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	3308      	adds	r3, #8
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801059e:	6812      	ldr	r2, [r2, #0]
 80105a0:	4611      	mov	r1, r2
 80105a2:	4798      	blx	r3
			modelListener->UpdateHum((envData->humid));
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	6818      	ldr	r0, [r3, #0]
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	330c      	adds	r3, #12
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80105b6:	6852      	ldr	r2, [r2, #4]
 80105b8:	4611      	mov	r1, r2
 80105ba:	4798      	blx	r3
		}
		//sensorUpdatePeriod = 0;
	}
	//sensorUpdatePeriod++;
#endif
}
 80105bc:	bf00      	nop
 80105be:	37a8      	adds	r7, #168	; 0xa8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	2000afa0 	.word	0x2000afa0

080105c8 <_ZN5Model28updateHumidifierControlStateEb>:

void Model::updateHumidifierControlState(bool state)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	460b      	mov	r3, r1
 80105d2:	70fb      	strb	r3, [r7, #3]
	if (state == true)
 80105d4:	78fb      	ldrb	r3, [r7, #3]
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d106      	bne.n	80105e8 <_ZN5Model28updateHumidifierControlStateEb+0x20>
	{
		osSignalSet(eventLoopTaskHandle, BUZZER_ON | HUM_ON);
 80105da:	4b08      	ldr	r3, [pc, #32]	; (80105fc <_ZN5Model28updateHumidifierControlStateEb+0x34>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2105      	movs	r1, #5
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7fa fb47 	bl	800ac74 <osSignalSet>
	}
	else
	{
		osSignalSet(eventLoopTaskHandle, BUZZER_OFF | HUM_OFF);
	}
}
 80105e6:	e005      	b.n	80105f4 <_ZN5Model28updateHumidifierControlStateEb+0x2c>
		osSignalSet(eventLoopTaskHandle, BUZZER_OFF | HUM_OFF);
 80105e8:	4b04      	ldr	r3, [pc, #16]	; (80105fc <_ZN5Model28updateHumidifierControlStateEb+0x34>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	210a      	movs	r1, #10
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fa fb40 	bl	800ac74 <osSignalSet>
}
 80105f4:	bf00      	nop
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	2000a300 	.word	0x2000a300

08010600 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
    {
    }
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
    {
    }
 801061c:	bf00      	nop
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr

08010628 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
    {
 8010630:	4a04      	ldr	r2, [pc, #16]	; (8010644 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	601a      	str	r2, [r3, #0]
    }
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4618      	mov	r0, r3
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr
 8010644:	08028900 	.word	0x08028900

08010648 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
    }
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7ff ffe9 	bl	8010628 <_ZN8touchgfx9PresenterD1Ev>
 8010656:	2104      	movs	r1, #4
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f014 fc00 	bl	8024e5e <_ZdlPvj>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	4618      	mov	r0, r3
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8010668:	b480      	push	{r7}
 801066a:	b083      	sub	sp, #12
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
    {
 8010670:	4a04      	ldr	r2, [pc, #16]	; (8010684 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	601a      	str	r2, [r3, #0]
    }
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4618      	mov	r0, r3
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr
 8010684:	08028900 	.word	0x08028900

08010688 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	4a06      	ldr	r2, [pc, #24]	; (80106ac <_ZN13ModelListenerC1Ev+0x24>)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	601a      	str	r2, [r3, #0]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	605a      	str	r2, [r3, #4]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	4618      	mov	r0, r3
 80106a0:	370c      	adds	r7, #12
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop
 80106ac:	080288e8 	.word	0x080288e8

080106b0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	4a04      	ldr	r2, [pc, #16]	; (80106cc <_ZN13ModelListenerD1Ev+0x1c>)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr
 80106cc:	080288e8 	.word	0x080288e8

080106d0 <_ZN13ModelListenerD0Ev>:
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7ff ffe9 	bl	80106b0 <_ZN13ModelListenerD1Ev>
 80106de:	2108      	movs	r1, #8
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f014 fbbc 	bl	8024e5e <_ZdlPvj>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	4618      	mov	r0, r3
 80106ea:	3708      	adds	r7, #8
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <_ZN13ModelListener10UpdateTempEi>:
    //virtual void UpdateTemp(char *val)
    virtual void UpdateTemp(int) {};
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
 80106fa:	bf00      	nop
 80106fc:	370c      	adds	r7, #12
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr

08010706 <_ZN13ModelListener9UpdateHumEi>:
    virtual void UpdateHum(int) {};
 8010706:	b480      	push	{r7}
 8010708:	b083      	sub	sp, #12
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
 801070e:	6039      	str	r1, [r7, #0]
 8010710:	bf00      	nop
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	4a09      	ldr	r2, [pc, #36]	; (801074c <_ZN15screenPresenterD1Ev+0x30>)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	601a      	str	r2, [r3, #0]
 801072a:	4a09      	ldr	r2, [pc, #36]	; (8010750 <_ZN15screenPresenterD1Ev+0x34>)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	605a      	str	r2, [r3, #4]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	3304      	adds	r3, #4
 8010734:	4618      	mov	r0, r3
 8010736:	f7ff ffbb 	bl	80106b0 <_ZN13ModelListenerD1Ev>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	4618      	mov	r0, r3
 801073e:	f7ff ff73 	bl	8010628 <_ZN8touchgfx9PresenterD1Ev>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	4618      	mov	r0, r3
 8010746:	3708      	adds	r7, #8
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}
 801074c:	080288ac 	.word	0x080288ac
 8010750:	080288d0 	.word	0x080288d0

08010754 <_ZThn4_N15screenPresenterD1Ev>:
 8010754:	f1a0 0004 	sub.w	r0, r0, #4
 8010758:	e7e0      	b.n	801071c <_ZN15screenPresenterD1Ev>
 801075a:	bf00      	nop

0801075c <_ZN15screenPresenterD0Ev>:
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f7ff ffd9 	bl	801071c <_ZN15screenPresenterD1Ev>
 801076a:	2110      	movs	r1, #16
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f014 fb76 	bl	8024e5e <_ZdlPvj>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4618      	mov	r0, r3
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <_ZThn4_N15screenPresenterD0Ev>:
 801077c:	f1a0 0004 	sub.w	r0, r0, #4
 8010780:	e7ec      	b.n	801075c <_ZN15screenPresenterD0Ev>
	...

08010784 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
    : view(v)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	4618      	mov	r0, r3
 8010792:	f7ff ff69 	bl	8010668 <_ZN8touchgfx9PresenterC1Ev>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	3304      	adds	r3, #4
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff ff74 	bl	8010688 <_ZN13ModelListenerC1Ev>
 80107a0:	4a06      	ldr	r2, [pc, #24]	; (80107bc <_ZN15screenPresenterC1ER10screenView+0x38>)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	601a      	str	r2, [r3, #0]
 80107a6:	4a06      	ldr	r2, [pc, #24]	; (80107c0 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	605a      	str	r2, [r3, #4]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	683a      	ldr	r2, [r7, #0]
 80107b0:	60da      	str	r2, [r3, #12]
{

}
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4618      	mov	r0, r3
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	080288ac 	.word	0x080288ac
 80107c0:	080288d0 	.word	0x080288d0

080107c4 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]

}
 80107cc:	bf00      	nop
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 80107d8:	b480      	push	{r7}
 80107da:	b083      	sub	sp, #12
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]

}
 80107e0:	bf00      	nop
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr

080107ec <_ZN15screenPresenter28updateHumidifierControlStateEb>:

void screenPresenter::updateHumidifierControlState(bool state)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	460b      	mov	r3, r1
 80107f6:	70fb      	strb	r3, [r7, #3]
	model->updateHumidifierControlState(state);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	689b      	ldr	r3, [r3, #8]
 80107fc:	78fa      	ldrb	r2, [r7, #3]
 80107fe:	4611      	mov	r1, r2
 8010800:	4618      	mov	r0, r3
 8010802:	f7ff fee1 	bl	80105c8 <_ZN5Model28updateHumidifierControlStateEb>
}
 8010806:	bf00      	nop
 8010808:	3708      	adds	r7, #8
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <_ZN15screenPresenter10UpdateTempEi>:

void screenPresenter::UpdateTemp(int val)
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b082      	sub	sp, #8
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]
 8010816:	6039      	str	r1, [r7, #0]
	if (val >= 0 && val <= 50)
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	db0c      	blt.n	8010838 <_ZN15screenPresenter10UpdateTempEi+0x2a>
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	2b32      	cmp	r3, #50	; 0x32
 8010822:	dc09      	bgt.n	8010838 <_ZN15screenPresenter10UpdateTempEi+0x2a>
	{
		view.UpdateTempView(val);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	68da      	ldr	r2, [r3, #12]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	3338      	adds	r3, #56	; 0x38
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	6839      	ldr	r1, [r7, #0]
 8010834:	4610      	mov	r0, r2
 8010836:	4798      	blx	r3
	}
}
 8010838:	bf00      	nop
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <_ZThn4_N15screenPresenter10UpdateTempEi>:

    virtual void updateHumidifierControlState(bool state);

    virtual void UpdateTemp(int);
 8010840:	f1a0 0004 	sub.w	r0, r0, #4
 8010844:	f7ff bfe3 	b.w	801080e <_ZN15screenPresenter10UpdateTempEi>

08010848 <_ZN15screenPresenter9UpdateHumEi>:

void screenPresenter::UpdateHum(int val)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
	if (val >= 0 && val <= 100)
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	db0c      	blt.n	8010872 <_ZN15screenPresenter9UpdateHumEi+0x2a>
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	2b64      	cmp	r3, #100	; 0x64
 801085c:	dc09      	bgt.n	8010872 <_ZN15screenPresenter9UpdateHumEi+0x2a>
	{
		view.UpdateHumView(val);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	68da      	ldr	r2, [r3, #12]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	333c      	adds	r3, #60	; 0x3c
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	6839      	ldr	r1, [r7, #0]
 801086e:	4610      	mov	r0, r2
 8010870:	4798      	blx	r3
	}
}
 8010872:	bf00      	nop
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <_ZThn4_N15screenPresenter9UpdateHumEi>:
    virtual void UpdateHum(int);
 801087a:	f1a0 0004 	sub.w	r0, r0, #4
 801087e:	f7ff bfe3 	b.w	8010848 <_ZN15screenPresenter9UpdateHumEi>
	...

08010884 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 801088c:	4b07      	ldr	r3, [pc, #28]	; (80108ac <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d105      	bne.n	80108a0 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 8010894:	4b06      	ldr	r3, [pc, #24]	; (80108b0 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 8010896:	4a07      	ldr	r2, [pc, #28]	; (80108b4 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 8010898:	218b      	movs	r1, #139	; 0x8b
 801089a:	4807      	ldr	r0, [pc, #28]	; (80108b8 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 801089c:	f014 fc0a 	bl	80250b4 <__assert_func>
        return bitmapId;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	881b      	ldrh	r3, [r3, #0]
    }
 80108a4:	4618      	mov	r0, r3
 80108a6:	3708      	adds	r7, #8
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	2000a0e8 	.word	0x2000a0e8
 80108b0:	08027f98 	.word	0x08027f98
 80108b4:	08027fd4 	.word	0x08027fd4
 80108b8:	08028008 	.word	0x08028008

080108bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	683a      	ldr	r2, [r7, #0]
 80108ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80108cc:	bf00      	nop
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr

080108d8 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 80108d8:	b590      	push	{r4, r7, lr}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	332e      	adds	r3, #46	; 0x2e
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7ff ffcd 	bl	8010884 <_ZNK8touchgfx6Bitmap5getIdEv>
 80108ea:	4603      	mov	r3, r0
 80108ec:	461c      	mov	r4, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	3334      	adds	r3, #52	; 0x34
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7ff ffc6 	bl	8010884 <_ZNK8touchgfx6Bitmap5getIdEv>
 80108f8:	4603      	mov	r3, r0
 80108fa:	429c      	cmp	r4, r3
 80108fc:	bf0c      	ite	eq
 80108fe:	2301      	moveq	r3, #1
 8010900:	2300      	movne	r3, #0
 8010902:	b2db      	uxtb	r3, r3
    }
 8010904:	4618      	mov	r0, r3
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	bd90      	pop	{r4, r7, pc}

0801090c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	4a05      	ldr	r2, [pc, #20]	; (801092c <_ZN10screenViewD1Ev+0x20>)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	601a      	str	r2, [r3, #0]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4618      	mov	r0, r3
 801091e:	f7fe fee1 	bl	800f6e4 <_ZN14screenViewBaseD1Ev>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4618      	mov	r0, r3
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	08028918 	.word	0x08028918

08010930 <_ZN10screenViewD0Ev>:
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f7ff ffe7 	bl	801090c <_ZN10screenViewD1Ev>
 801093e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f014 fa8b 	bl	8024e5e <_ZdlPvj>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	4618      	mov	r0, r3
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
	...

08010954 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af02      	add	r7, sp, #8
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	4b04      	ldr	r3, [pc, #16]	; (8010978 <_ZNSt7__cxx119to_stringEi+0x24>)
 8010966:	2210      	movs	r2, #16
 8010968:	4904      	ldr	r1, [pc, #16]	; (801097c <_ZNSt7__cxx119to_stringEi+0x28>)
 801096a:	f000 f8eb 	bl	8010b44 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	0802804c 	.word	0x0802804c
 801097c:	08025df9 	.word	0x08025df9

08010980 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>
#include <string.h>
#include <string>

screenView::screenView()
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4618      	mov	r0, r3
 801098c:	f7fe ff5e 	bl	800f84c <_ZN14screenViewBaseC1Ev>
 8010990:	4a03      	ldr	r2, [pc, #12]	; (80109a0 <_ZN10screenViewC1Ev+0x20>)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	601a      	str	r2, [r3, #0]
{

}
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4618      	mov	r0, r3
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	08028918 	.word	0x08028918

080109a4 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af02      	add	r7, sp, #8
 80109aa:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7ff f992 	bl	800fcd8 <_ZN14screenViewBase11setupScreenEv>

	tempTextViewBuffer[0] = 0;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	humTextViewBuffer[0] = 0;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	//screenViewBase::tempText.setPosition(156, 71, 240, 320);

	screenViewBase::tempText.setPosition(100, 71, 240, 320);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f503 7015 	add.w	r0, r3, #596	; 0x254
 80109ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	23f0      	movs	r3, #240	; 0xf0
 80109d2:	2247      	movs	r2, #71	; 0x47
 80109d4:	2164      	movs	r1, #100	; 0x64
 80109d6:	f7fe faae 	bl	800ef36 <_ZN8touchgfx8Drawable11setPositionEssss>
	screenViewBase::tempText.setWildcard(tempTextViewBuffer);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f503 7215 	add.w	r2, r3, #596	; 0x254
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80109e6:	4619      	mov	r1, r3
 80109e8:	4610      	mov	r0, r2
 80109ea:	f7ff ff67 	bl	80108bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

    screenViewBase::humText.setPosition(100, 180, 240, 320);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80109f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80109f8:	9300      	str	r3, [sp, #0]
 80109fa:	23f0      	movs	r3, #240	; 0xf0
 80109fc:	22b4      	movs	r2, #180	; 0xb4
 80109fe:	2164      	movs	r1, #100	; 0x64
 8010a00:	f7fe fa99 	bl	800ef36 <_ZN8touchgfx8Drawable11setPositionEssss>
    screenViewBase::humText.setWildcard(humTextViewBuffer);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8010a10:	4619      	mov	r1, r3
 8010a12:	4610      	mov	r0, r2
 8010a14:	f7ff ff52 	bl	80108bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

}
 8010a18:	bf00      	nop
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f7fe fc00 	bl	800f230 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010a30:	bf00      	nop
 8010a32:	3708      	adds	r7, #8
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <_ZN10screenView28HumidifierControlButtonStateEv>:

void screenView::HumidifierControlButtonState()
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
	//presenter->updateHumidifierControlState(buttonOnOff.getState());
}
 8010a40:	bf00      	nop
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <_ZN10screenView22updateOnOffButtonStateEv>:

void screenView::updateOnOffButtonState()
{
 8010a4c:	b5b0      	push	{r4, r5, r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
	presenter->updateHumidifierControlState(humOnOffButton.getState());
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	3310      	adds	r3, #16
 8010a60:	681c      	ldr	r4, [r3, #0]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7ff ff35 	bl	80108d8 <_ZNK8touchgfx12ToggleButton8getStateEv>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	4619      	mov	r1, r3
 8010a72:	4628      	mov	r0, r5
 8010a74:	47a0      	blx	r4
}
 8010a76:	bf00      	nop
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bdb0      	pop	{r4, r5, r7, pc}

08010a7e <_ZN10screenView14UpdateTempViewEi>:

void screenView::UpdateTempView(int val)
{
 8010a7e:	b590      	push	{r4, r7, lr}
 8010a80:	b08b      	sub	sp, #44	; 0x2c
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	6078      	str	r0, [r7, #4]
 8010a86:	6039      	str	r1, [r7, #0]
	std::string s = std::to_string(val);
 8010a88:	f107 030c 	add.w	r3, r7, #12
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7ff ff60 	bl	8010954 <_ZNSt7__cxx119to_stringEi>
	char const *pchar = s.c_str();  //use char const* as target type
 8010a94:	f107 030c 	add.w	r3, r7, #12
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f014 fad3 	bl	8025044 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8010a9e:	6278      	str	r0, [r7, #36]	; 0x24

	//memset(tempTextViewBuffer, 0x0, sizeof(tempTextViewBuffer));

	Unicode::strncpy(tempTextViewBuffer, pchar, strlen(pchar));
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f503 7429 	add.w	r4, r3, #676	; 0x2a4
 8010aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010aa8:	f7ef fbf2 	bl	8000290 <strlen>
 8010aac:	4603      	mov	r3, r0
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f007 ffa4 	bl	8018a02 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	screenViewBase::tempText.invalidate();
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f006 fb36 	bl	8017132 <_ZNK8touchgfx8Drawable10invalidateEv>
	std::string s = std::to_string(val);
 8010ac6:	f107 030c 	add.w	r3, r7, #12
 8010aca:	4618      	mov	r0, r3
 8010acc:	f014 fa78 	bl	8024fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8010ad0:	bf00      	nop
 8010ad2:	372c      	adds	r7, #44	; 0x2c
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd90      	pop	{r4, r7, pc}

08010ad8 <_ZN10screenView13UpdateHumViewEi>:

void screenView::UpdateHumView(int val)
{
 8010ad8:	b590      	push	{r4, r7, lr}
 8010ada:	b08b      	sub	sp, #44	; 0x2c
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
	std::string s = std::to_string(val);
 8010ae2:	f107 030c 	add.w	r3, r7, #12
 8010ae6:	6839      	ldr	r1, [r7, #0]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff ff33 	bl	8010954 <_ZNSt7__cxx119to_stringEi>

	s += "%";
 8010aee:	f107 030c 	add.w	r3, r7, #12
 8010af2:	4913      	ldr	r1, [pc, #76]	; (8010b40 <_ZN10screenView13UpdateHumViewEi+0x68>)
 8010af4:	4618      	mov	r0, r3
 8010af6:	f014 faa1 	bl	802503c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	char const *pchar = s.c_str();  //use char const* as target type
 8010afa:	f107 030c 	add.w	r3, r7, #12
 8010afe:	4618      	mov	r0, r3
 8010b00:	f014 faa0 	bl	8025044 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8010b04:	6278      	str	r0, [r7, #36]	; 0x24

	//memset(humTextViewBuffer, 0x0, sizeof(humTextViewBuffer));

	Unicode::strncpy(humTextViewBuffer, pchar, strlen(pchar));
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 8010b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b0e:	f7ef fbbf 	bl	8000290 <strlen>
 8010b12:	4603      	mov	r3, r0
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	461a      	mov	r2, r3
 8010b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f007 ff71 	bl	8018a02 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	screenViewBase::humText.invalidate();
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010b26:	4618      	mov	r0, r3
 8010b28:	f006 fb03 	bl	8017132 <_ZNK8touchgfx8Drawable10invalidateEv>
	std::string s = std::to_string(val);
 8010b2c:	f107 030c 	add.w	r3, r7, #12
 8010b30:	4618      	mov	r0, r3
 8010b32:	f014 fa45 	bl	8024fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8010b36:	bf00      	nop
 8010b38:	372c      	adds	r7, #44	; 0x2c
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd90      	pop	{r4, r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	08028050 	.word	0x08028050

08010b44 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8010b44:	b408      	push	{r3}
 8010b46:	b590      	push	{r4, r7, lr}
 8010b48:	b088      	sub	sp, #32
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	60f8      	str	r0, [r7, #12]
 8010b4e:	60b9      	str	r1, [r7, #8]
 8010b50:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	3307      	adds	r3, #7
 8010b56:	08db      	lsrs	r3, r3, #3
 8010b58:	00db      	lsls	r3, r3, #3
 8010b5a:	ebad 0d03 	sub.w	sp, sp, r3
 8010b5e:	466b      	mov	r3, sp
 8010b60:	3307      	adds	r3, #7
 8010b62:	08db      	lsrs	r3, r3, #3
 8010b64:	00db      	lsls	r3, r3, #3
 8010b66:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8010b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010b6c:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8010b6e:	68bc      	ldr	r4, [r7, #8]
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b74:	6879      	ldr	r1, [r7, #4]
 8010b76:	69f8      	ldr	r0, [r7, #28]
 8010b78:	47a0      	blx	r4
 8010b7a:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8010b7c:	69bb      	ldr	r3, [r7, #24]
 8010b7e:	69fa      	ldr	r2, [r7, #28]
 8010b80:	18d4      	adds	r4, r2, r3
 8010b82:	f107 0314 	add.w	r3, r7, #20
 8010b86:	4618      	mov	r0, r3
 8010b88:	f014 f97d 	bl	8024e86 <_ZNSaIcEC1Ev>
 8010b8c:	f107 0314 	add.w	r3, r7, #20
 8010b90:	4622      	mov	r2, r4
 8010b92:	69f9      	ldr	r1, [r7, #28]
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	f000 f80d 	bl	8010bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8010b9a:	f107 0314 	add.w	r3, r7, #20
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f014 f972 	bl	8024e88 <_ZNSaIcED1Ev>
 8010ba4:	bf00      	nop
    }
 8010ba6:	68f8      	ldr	r0, [r7, #12]
 8010ba8:	3720      	adds	r7, #32
 8010baa:	46bd      	mov	sp, r7
 8010bac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8010bb0:	b001      	add	sp, #4
 8010bb2:	4770      	bx	lr

08010bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8010bb4:	b590      	push	{r4, r7, lr}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
 8010bc0:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8010bc2:	68fc      	ldr	r4, [r7, #12]
 8010bc4:	68f8      	ldr	r0, [r7, #12]
 8010bc6:	f014 f971 	bl	8024eac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	683a      	ldr	r2, [r7, #0]
 8010bce:	4619      	mov	r1, r3
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f014 fa39 	bl	8025048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	68b9      	ldr	r1, [r7, #8]
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f000 f805 	bl	8010bea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	4618      	mov	r0, r3
 8010be4:	3714      	adds	r7, #20
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd90      	pop	{r4, r7, pc}

08010bea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8010bea:	b580      	push	{r7, lr}
 8010bec:	b086      	sub	sp, #24
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	60f8      	str	r0, [r7, #12]
 8010bf2:	60b9      	str	r1, [r7, #8]
 8010bf4:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	68b9      	ldr	r1, [r7, #8]
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f000 f804 	bl	8010c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8010c00:	bf00      	nop
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8010c08:	b590      	push	{r4, r7, lr}
 8010c0a:	b087      	sub	sp, #28
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	607a      	str	r2, [r7, #4]
 8010c14:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8010c16:	4623      	mov	r3, r4
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	68b9      	ldr	r1, [r7, #8]
 8010c1c:	68f8      	ldr	r0, [r7, #12]
 8010c1e:	f000 f805 	bl	8010c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8010c22:	bf00      	nop
 8010c24:	371c      	adds	r7, #28
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd90      	pop	{r4, r7, pc}
	...

08010c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	607a      	str	r2, [r7, #4]
 8010c38:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8010c3a:	68b8      	ldr	r0, [r7, #8]
 8010c3c:	f000 f83e 	bl	8010cbc <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d005      	beq.n	8010c52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8010c46:	68ba      	ldr	r2, [r7, #8]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d001      	beq.n	8010c52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8010c4e:	2301      	movs	r3, #1
 8010c50:	e000      	b.n	8010c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8010c52:	2300      	movs	r3, #0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d002      	beq.n	8010c5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8010c58:	4817      	ldr	r0, [pc, #92]	; (8010cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8010c5a:	f014 f919 	bl	8024e90 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8010c5e:	6879      	ldr	r1, [r7, #4]
 8010c60:	68b8      	ldr	r0, [r7, #8]
 8010c62:	f000 f83b 	bl	8010cdc <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8010c66:	4603      	mov	r3, r0
 8010c68:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	2b0f      	cmp	r3, #15
 8010c6e:	d910      	bls.n	8010c92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8010c70:	f107 0314 	add.w	r3, r7, #20
 8010c74:	2200      	movs	r2, #0
 8010c76:	4619      	mov	r1, r3
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f014 f921 	bl	8024ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	4619      	mov	r1, r3
 8010c82:	68f8      	ldr	r0, [r7, #12]
 8010c84:	f014 f90e 	bl	8024ea4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f014 f90f 	bl	8024eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8010c92:	68f8      	ldr	r0, [r7, #12]
 8010c94:	f014 f908 	bl	8024ea8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	68b9      	ldr	r1, [r7, #8]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f014 f94d 	bl	8024f3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	f014 f903 	bl	8024eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8010cae:	bf00      	nop
 8010cb0:	3718      	adds	r7, #24
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	08028054 	.word	0x08028054

08010cbc <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8010cbc:	b480      	push	{r7}
 8010cbe:	b083      	sub	sp, #12
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	bf0c      	ite	eq
 8010cca:	2301      	moveq	r3, #1
 8010ccc:	2300      	movne	r3, #0
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	370c      	adds	r7, #12
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr

08010cdc <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8010cdc:	b5b0      	push	{r4, r5, r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8010ce6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8010ce8:	1d3b      	adds	r3, r7, #4
 8010cea:	4618      	mov	r0, r3
 8010cec:	f000 f80a 	bl	8010d04 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8010cf0:	462a      	mov	r2, r5
 8010cf2:	6839      	ldr	r1, [r7, #0]
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f000 f80f 	bl	8010d18 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8010cfa:	4603      	mov	r3, r0
    }
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bdb0      	pop	{r4, r5, r7, pc}

08010d04 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	370c      	adds	r7, #12
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr

08010d18 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	60b9      	str	r1, [r7, #8]
 8010d22:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8010d24:	68ba      	ldr	r2, [r7, #8]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	1ad3      	subs	r3, r2, r3
    }
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3714      	adds	r7, #20
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d34:	4770      	bx	lr
	...

08010d38 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
    {
 8010d40:	4a04      	ldr	r2, [pc, #16]	; (8010d54 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	601a      	str	r2, [r3, #0]
    }
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	370c      	adds	r7, #12
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr
 8010d54:	08028978 	.word	0x08028978

08010d58 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
    }
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f7ff ffe9 	bl	8010d38 <_ZN8touchgfx15TouchControllerD1Ev>
 8010d66:	2104      	movs	r1, #4
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f014 f878 	bl	8024e5e <_ZdlPvj>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4618      	mov	r0, r3
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <_ZN20STM32TouchController4initEv>:
//#include <cstring.h>

extern UART_HandleTypeDef huart1;

void STM32TouchController::init()
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	BSP_TS_Init(240, 320);
 8010d80:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010d84:	20f0      	movs	r0, #240	; 0xf0
 8010d86:	f7f4 fda9 	bl	80058dc <BSP_TS_Init>
}
 8010d8a:	bf00      	nop
 8010d8c:	3708      	adds	r7, #8
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b0a6      	sub	sp, #152	; 0x98
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	60f8      	str	r0, [r7, #12]
 8010d9a:	60b9      	str	r1, [r7, #8]
 8010d9c:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 8010d9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7f4 fdd4 	bl	8005950 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 8010da8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d01a      	beq.n	8010de6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x54>
    {
    	char buf[128] = {0,};
 8010db0:	2300      	movs	r3, #0
 8010db2:	613b      	str	r3, [r7, #16]
 8010db4:	f107 0314 	add.w	r3, r7, #20
 8010db8:	227c      	movs	r2, #124	; 0x7c
 8010dba:	2100      	movs	r1, #0
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f014 fa23 	bl	8025208 <memset>

        x = TS_State.X;
 8010dc2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	601a      	str	r2, [r3, #0]
        y = TS_State.Y;
 8010dcc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	601a      	str	r2, [r3, #0]

        //x = 240 - x;
        y = 320 - y;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	601a      	str	r2, [r3, #0]

        //snprintf(buf, sizeof(buf), "x=%lu y=%lu\r\n", x, y);
        //HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 100);
        //DEBUG_PRINT(buf);

        return true;
 8010de2:	2301      	movs	r3, #1
 8010de4:	e000      	b.n	8010de8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x56>
    }

    //DEBUG_PRINT("return false");
    return false;
 8010de6:	2300      	movs	r3, #0
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3798      	adds	r7, #152	; 0x98
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	4a05      	ldr	r2, [pc, #20]	; (8010e10 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	601a      	str	r2, [r3, #0]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7ff ff99 	bl	8010d38 <_ZN8touchgfx15TouchControllerD1Ev>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	08028960 	.word	0x08028960

08010e14 <_ZN20STM32TouchControllerD0Ev>:
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7ff ffe7 	bl	8010df0 <_ZN20STM32TouchControllerD1Ev>
 8010e22:	2104      	movs	r1, #4
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f014 f81a 	bl	8024e5e <_ZdlPvj>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	71fb      	strb	r3, [r7, #7]

}
 8010e3e:	bf00      	nop
 8010e40:	370c      	adds	r7, #12
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr

08010e4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8010e4a:	b480      	push	{r7}
 8010e4c:	b083      	sub	sp, #12
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	4603      	mov	r3, r0
 8010e52:	71fb      	strb	r3, [r7, #7]

}
 8010e54:	bf00      	nop
 8010e56:	370c      	adds	r7, #12
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr

08010e60 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	4603      	mov	r3, r0
 8010e68:	71fb      	strb	r3, [r7, #7]

}
 8010e6a:	bf00      	nop
 8010e6c:	370c      	adds	r7, #12
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr
	...

08010e78 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
    {
 8010e80:	4a04      	ldr	r2, [pc, #16]	; (8010e94 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	601a      	str	r2, [r3, #0]
    }
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	370c      	adds	r7, #12
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr
 8010e94:	08029448 	.word	0x08029448

08010e98 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
    }
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f7ff ffe9 	bl	8010e78 <_ZN8touchgfx3HALD1Ev>
 8010ea6:	217c      	movs	r1, #124	; 0x7c
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f013 ffd8 	bl	8024e5e <_ZdlPvj>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	78fa      	ldrb	r2, [r7, #3]
 8010ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2201      	movs	r2, #1
 8010ed0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8010ed4:	bf00      	nop
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d009      	beq.n	8010f06 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	685a      	ldr	r2, [r3, #4]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	4610      	mov	r0, r2
 8010f00:	4798      	blx	r3
 8010f02:	4603      	mov	r3, r0
 8010f04:	e000      	b.n	8010f08 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8010f06:	2300      	movs	r3, #0
        }
    }
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f002 ffcb 	bl	8013eb4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	3390      	adds	r3, #144	; 0x90
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	4798      	blx	r3
    }
 8010f2a:	bf00      	nop
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8010f32:	b480      	push	{r7}
 8010f34:	b083      	sub	sp, #12
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
 8010f3a:	6039      	str	r1, [r7, #0]
    {
        return false;
 8010f3c:	2300      	movs	r3, #0
    }
 8010f3e:	4618      	mov	r0, r3
 8010f40:	370c      	adds	r7, #12
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr
	...

08010f4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	607a      	str	r2, [r7, #4]
 8010f58:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d106      	bne.n	8010f6e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8010f60:	4b11      	ldr	r3, [pc, #68]	; (8010fa8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8010f62:	4a12      	ldr	r2, [pc, #72]	; (8010fac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8010f64:	f240 216b 	movw	r1, #619	; 0x26b
 8010f68:	4811      	ldr	r0, [pc, #68]	; (8010fb0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8010f6a:	f014 f8a3 	bl	80250b4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	687a      	ldr	r2, [r7, #4]
 8010f78:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	683a      	ldr	r2, [r7, #0]
 8010f7e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	bf14      	ite	ne
 8010f86:	2301      	movne	r3, #1
 8010f88:	2300      	moveq	r3, #0
 8010f8a:	b2da      	uxtb	r2, r3
 8010f8c:	4b09      	ldr	r3, [pc, #36]	; (8010fb4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8010f8e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	bf14      	ite	ne
 8010f96:	2301      	movne	r3, #1
 8010f98:	2300      	moveq	r3, #0
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	4b06      	ldr	r3, [pc, #24]	; (8010fb8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8010f9e:	701a      	strb	r2, [r3, #0]
    }
 8010fa0:	bf00      	nop
 8010fa2:	3710      	adds	r7, #16
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	08028080 	.word	0x08028080
 8010fac:	080280b8 	.word	0x080280b8
 8010fb0:	08028108 	.word	0x08028108
 8010fb4:	2000a05e 	.word	0x2000a05e
 8010fb8:	2000a05f 	.word	0x2000a05f

08010fbc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010fc4:	2300      	movs	r3, #0
    }
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	370c      	adds	r7, #12
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd0:	4770      	bx	lr

08010fd2 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b082      	sub	sp, #8
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
 8010fda:	460b      	mov	r3, r1
 8010fdc:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d004      	beq.n	8010ff0 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fea:	887a      	ldrh	r2, [r7, #2]
 8010fec:	4610      	mov	r0, r2
 8010fee:	4798      	blx	r3
        }
    }
 8010ff0:	bf00      	nop
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	685a      	ldr	r2, [r3, #4]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	3318      	adds	r3, #24
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	4610      	mov	r0, r2
 8011010:	4798      	blx	r3
 8011012:	4603      	mov	r3, r0
    }
 8011014:	4618      	mov	r0, r3
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011030:	429a      	cmp	r2, r3
 8011032:	d017      	beq.n	8011064 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8011034:	4b1a      	ldr	r3, [pc, #104]	; (80110a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d12a      	bne.n	8011092 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801103c:	4b19      	ldr	r3, [pc, #100]	; (80110a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801103e:	881a      	ldrh	r2, [r3, #0]
 8011040:	4b19      	ldr	r3, [pc, #100]	; (80110a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8011042:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8011044:	4b19      	ldr	r3, [pc, #100]	; (80110ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8011046:	881a      	ldrh	r2, [r3, #0]
 8011048:	4b19      	ldr	r3, [pc, #100]	; (80110b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801104a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801104c:	4b16      	ldr	r3, [pc, #88]	; (80110a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801104e:	881a      	ldrh	r2, [r3, #0]
 8011050:	4b16      	ldr	r3, [pc, #88]	; (80110ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8011052:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8011054:	4b16      	ldr	r3, [pc, #88]	; (80110b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8011056:	881a      	ldrh	r2, [r3, #0]
 8011058:	4b12      	ldr	r3, [pc, #72]	; (80110a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801105a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801105c:	4b10      	ldr	r3, [pc, #64]	; (80110a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801105e:	2201      	movs	r2, #1
 8011060:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8011062:	e016      	b.n	8011092 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8011064:	4b0e      	ldr	r3, [pc, #56]	; (80110a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d012      	beq.n	8011092 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801106c:	4b0f      	ldr	r3, [pc, #60]	; (80110ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801106e:	881a      	ldrh	r2, [r3, #0]
 8011070:	4b0d      	ldr	r3, [pc, #52]	; (80110a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8011072:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8011074:	4b0b      	ldr	r3, [pc, #44]	; (80110a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8011076:	881a      	ldrh	r2, [r3, #0]
 8011078:	4b0d      	ldr	r3, [pc, #52]	; (80110b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801107a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801107c:	4b0c      	ldr	r3, [pc, #48]	; (80110b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801107e:	881a      	ldrh	r2, [r3, #0]
 8011080:	4b0a      	ldr	r3, [pc, #40]	; (80110ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8011082:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8011084:	4b08      	ldr	r3, [pc, #32]	; (80110a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8011086:	881a      	ldrh	r2, [r3, #0]
 8011088:	4b06      	ldr	r3, [pc, #24]	; (80110a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801108a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801108c:	4b04      	ldr	r3, [pc, #16]	; (80110a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801108e:	2200      	movs	r2, #0
 8011090:	701a      	strb	r2, [r3, #0]
    }
 8011092:	bf00      	nop
 8011094:	370c      	adds	r7, #12
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	2000a058 	.word	0x2000a058
 80110a4:	2000a054 	.word	0x2000a054
 80110a8:	2000a05a 	.word	0x2000a05a
 80110ac:	2000a056 	.word	0x2000a056
 80110b0:	2000a05c 	.word	0x2000a05c

080110b4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingVariant when chaning rendering variant
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 80110b4:	b480      	push	{r7}
 80110b6:	b083      	sub	sp, #12
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
    {

    }
 80110bc:	bf00      	nop
 80110be:	370c      	adds	r7, #12
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingVariant when chaning rendering variant
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
    {

    }
 80110d0:	bf00      	nop
 80110d2:	370c      	adds	r7, #12
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	4618      	mov	r0, r3
 80110e8:	f002 f951 	bl	801338e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80110ec:	bf00      	nop
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	4a05      	ldr	r2, [pc, #20]	; (8011114 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	601a      	str	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	4618      	mov	r0, r3
 8011106:	f7ff feb7 	bl	8010e78 <_ZN8touchgfx3HALD1Ev>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4618      	mov	r0, r3
 801110e:	3708      	adds	r7, #8
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	08028ba4 	.word	0x08028ba4

08011118 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f7ff ffe7 	bl	80110f4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011126:	217c      	movs	r1, #124	; 0x7c
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f013 fe98 	bl	8024e5e <_ZdlPvj>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4618      	mov	r0, r3
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4618      	mov	r0, r3
 8011144:	f7ff ffca 	bl	80110dc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011148:	bf00      	nop
 801114a:	3708      	adds	r7, #8
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <_ZN11TouchGFXHAL10initializeEv>:
using namespace touchgfx;

extern UART_HandleTypeDef huart1;

void TouchGFXHAL::initialize()
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	4618      	mov	r0, r3
 801115c:	f001 fb84 	bl	8012868 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8011160:	bf00      	nop
 8011162:	3708      	adds	r7, #8
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
	enableLCDControllerInterrupt();
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	3368      	adds	r3, #104	; 0x68
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	4798      	blx	r3
	enableInterrupts();
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	3360      	adds	r3, #96	; 0x60
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	4798      	blx	r3

	OSWrappers::waitForVSync();
 8011188:	f000 f928 	bl	80113dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
	backPorchExited();
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	3358      	adds	r3, #88	; 0x58
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	4610      	mov	r0, r2
 8011198:	4798      	blx	r3

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 801119a:	2201      	movs	r2, #1
 801119c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80111a0:	480a      	ldr	r0, [pc, #40]	; (80111cc <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 80111a2:	f7f5 fa8f 	bl	80066c4 <HAL_GPIO_WritePin>

	LCD_IO_WriteReg(0x29);
 80111a6:	2029      	movs	r0, #41	; 0x29
 80111a8:	f7f4 fae4 	bl	8005774 <LCD_IO_WriteReg>

	HAL_UART_Transmit(&huart1,
 80111ac:	2364      	movs	r3, #100	; 0x64
 80111ae:	2218      	movs	r2, #24
 80111b0:	4907      	ldr	r1, [pc, #28]	; (80111d0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 80111b2:	4808      	ldr	r0, [pc, #32]	; (80111d4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
 80111b4:	f7f9 f859 	bl	800a26a <HAL_UART_Transmit>
					(uint8_t *)"taskEntry... init !!!!\r\n",
					strlen("taskEntry... init !!!!\r\n"), 100);
	for(;;)
	{
		OSWrappers::waitForVSync();
 80111b8:	f000 f910 	bl	80113dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
		backPorchExited();
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	3358      	adds	r3, #88	; 0x58
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4610      	mov	r0, r2
 80111c8:	4798      	blx	r3
		OSWrappers::waitForVSync();
 80111ca:	e7f5      	b.n	80111b8 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 80111cc:	40021800 	.word	0x40021800
 80111d0:	0802814c 	.word	0x0802814c
 80111d4:	2000b1d8 	.word	0x2000b1d8

080111d8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f001 fbcc 	bl	8012980 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80111e8:	4603      	mov	r3, r0
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b082      	sub	sp, #8
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
 80111fa:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6839      	ldr	r1, [r7, #0]
 8011200:	4618      	mov	r0, r3
 8011202:	f001 fbcb 	bl	801299c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011206:	bf00      	nop
 8011208:	3708      	adds	r7, #8
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801120e:	b580      	push	{r7, lr}
 8011210:	b082      	sub	sp, #8
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
 8011216:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6839      	ldr	r1, [r7, #0]
 801121c:	4618      	mov	r0, r3
 801121e:	f001 fbd3 	bl	80129c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8011222:	bf00      	nop
 8011224:	3708      	adds	r7, #8
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}

0801122a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801122a:	b580      	push	{r7, lr}
 801122c:	b084      	sub	sp, #16
 801122e:	af00      	add	r7, sp, #0
 8011230:	60f8      	str	r0, [r7, #12]
 8011232:	60b9      	str	r1, [r7, #8]
 8011234:	607a      	str	r2, [r7, #4]
 8011236:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011238:	68f8      	ldr	r0, [r7, #12]
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	687a      	ldr	r2, [r7, #4]
 801123e:	68b9      	ldr	r1, [r7, #8]
 8011240:	f001 fbd0 	bl	80129e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011244:	4603      	mov	r3, r0
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801124e:	b580      	push	{r7, lr}
 8011250:	b082      	sub	sp, #8
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	4618      	mov	r0, r3
 801125a:	f001 fb37 	bl	80128cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801125e:	bf00      	nop
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b082      	sub	sp, #8
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4618      	mov	r0, r3
 8011272:	f001 fb3b 	bl	80128ec <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011276:	bf00      	nop
 8011278:	3708      	adds	r7, #8
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b082      	sub	sp, #8
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4618      	mov	r0, r3
 801128a:	f001 fb3d 	bl	8012908 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801128e:	bf00      	nop
 8011290:	3708      	adds	r7, #8
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}

08011296 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011296:	b580      	push	{r7, lr}
 8011298:	b082      	sub	sp, #8
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f001 fb3f 	bl	8012924 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80112a6:	bf00      	nop
 80112a8:	3708      	adds	r7, #8
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
	...

080112b0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	4a05      	ldr	r2, [pc, #20]	; (80112d0 <_ZN11TouchGFXHALD1Ev+0x20>)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	601a      	str	r2, [r3, #0]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ff ff17 	bl	80110f4 <_ZN20TouchGFXGeneratedHALD1Ev>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4618      	mov	r0, r3
 80112ca:	3708      	adds	r7, #8
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	08028990 	.word	0x08028990

080112d4 <_ZN11TouchGFXHALD0Ev>:
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7ff ffe7 	bl	80112b0 <_ZN11TouchGFXHALD1Ev>
 80112e2:	217c      	movs	r1, #124	; 0x7c
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f013 fdba 	bl	8024e5e <_ZdlPvj>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	4618      	mov	r0, r3
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 80112f8:	2101      	movs	r1, #1
 80112fa:	4811      	ldr	r0, [pc, #68]	; (8011340 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80112fc:	f7f9 fd46 	bl	800ad8c <osSemaphoreCreate>
 8011300:	4603      	mov	r3, r0
 8011302:	4a10      	ldr	r2, [pc, #64]	; (8011344 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011304:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8011306:	4b0f      	ldr	r3, [pc, #60]	; (8011344 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d105      	bne.n	801131a <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 801130e:	4b0e      	ldr	r3, [pc, #56]	; (8011348 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8011310:	4a0e      	ldr	r2, [pc, #56]	; (801134c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011312:	2125      	movs	r1, #37	; 0x25
 8011314:	480e      	ldr	r0, [pc, #56]	; (8011350 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011316:	f013 fecd 	bl	80250b4 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 801131a:	2101      	movs	r1, #1
 801131c:	480d      	ldr	r0, [pc, #52]	; (8011354 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801131e:	f7f9 fd35 	bl	800ad8c <osSemaphoreCreate>
 8011322:	4603      	mov	r3, r0
 8011324:	4a0c      	ldr	r2, [pc, #48]	; (8011358 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8011326:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 8011328:	4b0b      	ldr	r3, [pc, #44]	; (8011358 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d105      	bne.n	801133c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 8011330:	4b0a      	ldr	r3, [pc, #40]	; (801135c <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 8011332:	4a06      	ldr	r2, [pc, #24]	; (801134c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011334:	2128      	movs	r1, #40	; 0x28
 8011336:	4806      	ldr	r0, [pc, #24]	; (8011350 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011338:	f013 febc 	bl	80250b4 <__assert_func>
}
 801133c:	bf00      	nop
 801133e:	bd80      	pop	{r7, pc}
 8011340:	08028a44 	.word	0x08028a44
 8011344:	20008e5c 	.word	0x20008e5c
 8011348:	08028168 	.word	0x08028168
 801134c:	080281b4 	.word	0x080281b4
 8011350:	080281e4 	.word	0x080281e4
 8011354:	08028a4c 	.word	0x08028a4c
 8011358:	20008e60 	.word	0x20008e60
 801135c:	08028210 	.word	0x08028210

08011360 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011360:	b580      	push	{r7, lr}
 8011362:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8011364:	4b04      	ldr	r3, [pc, #16]	; (8011378 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f04f 31ff 	mov.w	r1, #4294967295
 801136c:	4618      	mov	r0, r3
 801136e:	f7f9 fd4d 	bl	800ae0c <osSemaphoreWait>
}
 8011372:	bf00      	nop
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	20008e5c 	.word	0x20008e5c

0801137c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801137c:	b580      	push	{r7, lr}
 801137e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011380:	4b03      	ldr	r3, [pc, #12]	; (8011390 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4618      	mov	r0, r3
 8011386:	f7f9 fd8f 	bl	800aea8 <osSemaphoreRelease>
}
 801138a:	bf00      	nop
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	20008e5c 	.word	0x20008e5c

08011394 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011394:	b580      	push	{r7, lr}
 8011396:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8011398:	4b03      	ldr	r3, [pc, #12]	; (80113a8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2100      	movs	r1, #0
 801139e:	4618      	mov	r0, r3
 80113a0:	f7f9 fd34 	bl	800ae0c <osSemaphoreWait>
}
 80113a4:	bf00      	nop
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	20008e5c 	.word	0x20008e5c

080113ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 80113b0:	4b03      	ldr	r3, [pc, #12]	; (80113c0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7f9 fd77 	bl	800aea8 <osSemaphoreRelease>
}
 80113ba:	bf00      	nop
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	20008e5c 	.word	0x20008e5c

080113c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 80113c8:	4b03      	ldr	r3, [pc, #12]	; (80113d8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7f9 fd6b 	bl	800aea8 <osSemaphoreRelease>
}
 80113d2:	bf00      	nop
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	20008e60 	.word	0x20008e60

080113dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 80113e0:	4b07      	ldr	r3, [pc, #28]	; (8011400 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2100      	movs	r1, #0
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7f9 fd10 	bl	800ae0c <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 80113ec:	4b04      	ldr	r3, [pc, #16]	; (8011400 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f04f 31ff 	mov.w	r1, #4294967295
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7f9 fd09 	bl	800ae0c <osSemaphoreWait>
}
 80113fa:	bf00      	nop
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	20008e60 	.word	0x20008e60

08011404 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
 801140a:	4603      	mov	r3, r0
 801140c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 801140e:	88fb      	ldrh	r3, [r7, #6]
 8011410:	4618      	mov	r0, r3
 8011412:	f7f9 fc1b 	bl	800ac4c <osDelay>
}
 8011416:	bf00      	nop
 8011418:	3708      	adds	r7, #8
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
	...

08011420 <__NVIC_EnableIRQ>:
{
 8011420:	b480      	push	{r7}
 8011422:	b083      	sub	sp, #12
 8011424:	af00      	add	r7, sp, #0
 8011426:	4603      	mov	r3, r0
 8011428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801142e:	2b00      	cmp	r3, #0
 8011430:	db0b      	blt.n	801144a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011432:	79fb      	ldrb	r3, [r7, #7]
 8011434:	f003 021f 	and.w	r2, r3, #31
 8011438:	4907      	ldr	r1, [pc, #28]	; (8011458 <__NVIC_EnableIRQ+0x38>)
 801143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801143e:	095b      	lsrs	r3, r3, #5
 8011440:	2001      	movs	r0, #1
 8011442:	fa00 f202 	lsl.w	r2, r0, r2
 8011446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801144a:	bf00      	nop
 801144c:	370c      	adds	r7, #12
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr
 8011456:	bf00      	nop
 8011458:	e000e100 	.word	0xe000e100

0801145c <__NVIC_DisableIRQ>:
{
 801145c:	b480      	push	{r7}
 801145e:	b083      	sub	sp, #12
 8011460:	af00      	add	r7, sp, #0
 8011462:	4603      	mov	r3, r0
 8011464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801146a:	2b00      	cmp	r3, #0
 801146c:	db12      	blt.n	8011494 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801146e:	79fb      	ldrb	r3, [r7, #7]
 8011470:	f003 021f 	and.w	r2, r3, #31
 8011474:	490a      	ldr	r1, [pc, #40]	; (80114a0 <__NVIC_DisableIRQ+0x44>)
 8011476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801147a:	095b      	lsrs	r3, r3, #5
 801147c:	2001      	movs	r0, #1
 801147e:	fa00 f202 	lsl.w	r2, r0, r2
 8011482:	3320      	adds	r3, #32
 8011484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011488:	f3bf 8f4f 	dsb	sy
}
 801148c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801148e:	f3bf 8f6f 	isb	sy
}
 8011492:	bf00      	nop
}
 8011494:	bf00      	nop
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr
 80114a0:	e000e100 	.word	0xe000e100

080114a4 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
        : color(0)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2200      	movs	r2, #0
 80114b0:	601a      	str	r2, [r3, #0]
    }
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	4618      	mov	r0, r3
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80114c0:	b480      	push	{r7}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
        return color;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
    }
 80114cc:	4618      	mov	r0, r3
 80114ce:	370c      	adds	r7, #12
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80114d8:	b480      	push	{r7}
 80114da:	b083      	sub	sp, #12
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
    {
 80114e0:	4a04      	ldr	r2, [pc, #16]	; (80114f4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	601a      	str	r2, [r3, #0]
    }
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4618      	mov	r0, r3
 80114ea:	370c      	adds	r7, #12
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr
 80114f4:	08028aac 	.word	0x08028aac

080114f8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
    }
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f7ff ffe9 	bl	80114d8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011506:	2104      	movs	r1, #4
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f013 fca8 	bl	8024e5e <_ZdlPvj>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	4618      	mov	r0, r3
 8011512:	3708      	adds	r7, #8
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	3344      	adds	r3, #68	; 0x44
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	4798      	blx	r3
    }
 801152c:	bf00      	nop
 801152e:	3708      	adds	r7, #8
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8011534:	b480      	push	{r7}
 8011536:	b083      	sub	sp, #12
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
    {
 801153c:	4a04      	ldr	r2, [pc, #16]	; (8011550 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	601a      	str	r2, [r3, #0]
    }
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	4618      	mov	r0, r3
 8011546:	370c      	adds	r7, #12
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr
 8011550:	08029894 	.word	0x08029894

08011554 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
    }
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f7ff ffe9 	bl	8011534 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011562:	210c      	movs	r1, #12
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f013 fc7a 	bl	8024e5e <_ZdlPvj>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	4618      	mov	r0, r3
 801156e:	3708      	adds	r7, #8
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}

08011574 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801157e:	4a09      	ldr	r2, [pc, #36]	; (80115a4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	601a      	str	r2, [r3, #0]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	683a      	ldr	r2, [r7, #0]
 8011588:	605a      	str	r2, [r3, #4]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2200      	movs	r2, #0
 801158e:	721a      	strb	r2, [r3, #8]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	725a      	strb	r2, [r3, #9]
    {
    }
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	4618      	mov	r0, r3
 801159a:	370c      	adds	r7, #12
 801159c:	46bd      	mov	sp, r7
 801159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a2:	4770      	bx	lr
 80115a4:	08029894 	.word	0x08029894

080115a8 <_ZN10STM32F4DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80115b0:	2301      	movs	r3, #1
    }
 80115b2:	4618      	mov	r0, r3
 80115b4:	370c      	adds	r7, #12
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr

080115be <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80115be:	b580      	push	{r7, lr}
 80115c0:	b082      	sub	sp, #8
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	3328      	adds	r3, #40	; 0x28
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4610      	mov	r0, r2
 80115d2:	4798      	blx	r3
    }
 80115d4:	bf00      	nop
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	685a      	ldr	r2, [r3, #4]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	3314      	adds	r3, #20
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	4610      	mov	r0, r2
 80115f4:	4798      	blx	r3
    }
 80115f6:	bf00      	nop
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b082      	sub	sp, #8
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
    (void)handle; // Unused argument
    HAL::getInstance()->signalDMAInterrupt();
 8011606:	f7fc ff6d 	bl	800e4e4 <_ZN8touchgfx3HAL11getInstanceEv>
 801160a:	4603      	mov	r3, r0
 801160c:	4618      	mov	r0, r3
 801160e:	f7ff ffe5 	bl	80115dc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8011612:	bf00      	nop
 8011614:	3708      	adds	r7, #8
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}

0801161a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801161a:	b580      	push	{r7, lr}
 801161c:	b082      	sub	sp, #8
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	3318      	adds	r3, #24
 8011626:	4618      	mov	r0, r3
 8011628:	f7ff ff3c 	bl	80114a4 <_ZN8touchgfx9colortypeC1Ev>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	4618      	mov	r0, r3
 8011630:	3708      	adds	r7, #8
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
	...

08011638 <_ZN10STM32F4DMAC1Ev>:
}

STM32F4DMA::STM32F4DMA()
 8011638:	b5b0      	push	{r4, r5, r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	330c      	adds	r3, #12
 8011646:	4619      	mov	r1, r3
 8011648:	4610      	mov	r0, r2
 801164a:	f7ff ff93 	bl	8011574 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801164e:	4a0e      	ldr	r2, [pc, #56]	; (8011688 <_ZN10STM32F4DMAC1Ev+0x50>)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	601a      	str	r2, [r3, #0]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f103 000c 	add.w	r0, r3, #12
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	3320      	adds	r3, #32
 801165e:	2260      	movs	r2, #96	; 0x60
 8011660:	4619      	mov	r1, r3
 8011662:	f002 fd53 	bl	801410c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	3320      	adds	r3, #32
 801166a:	245f      	movs	r4, #95	; 0x5f
 801166c:	461d      	mov	r5, r3
 801166e:	2c00      	cmp	r4, #0
 8011670:	db05      	blt.n	801167e <_ZN10STM32F4DMAC1Ev+0x46>
 8011672:	4628      	mov	r0, r5
 8011674:	f7ff ffd1 	bl	801161a <_ZN8touchgfx6BlitOpC1Ev>
 8011678:	3520      	adds	r5, #32
 801167a:	3c01      	subs	r4, #1
 801167c:	e7f7      	b.n	801166e <_ZN10STM32F4DMAC1Ev+0x36>
{
}
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bdb0      	pop	{r4, r5, r7, pc}
 8011688:	08028a5c 	.word	0x08028a5c

0801168c <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	4a09      	ldr	r2, [pc, #36]	; (80116bc <_ZN10STM32F4DMAD1Ev+0x30>)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 801169a:	205a      	movs	r0, #90	; 0x5a
 801169c:	f7ff fede 	bl	801145c <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	330c      	adds	r3, #12
 80116a4:	4618      	mov	r0, r3
 80116a6:	f000 fb27 	bl	8011cf8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7ff ff41 	bl	8011534 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	4618      	mov	r0, r3
 80116b6:	3708      	adds	r7, #8
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}
 80116bc:	08028a5c 	.word	0x08028a5c

080116c0 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
}
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f7ff ffdf 	bl	801168c <_ZN10STM32F4DMAD1Ev>
 80116ce:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f013 fbc3 	bl	8024e5e <_ZdlPvj>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	4618      	mov	r0, r3
 80116dc:	3708      	adds	r7, #8
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
	...

080116e4 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80116ec:	2300      	movs	r3, #0
 80116ee:	60fb      	str	r3, [r7, #12]
 80116f0:	4b10      	ldr	r3, [pc, #64]	; (8011734 <_ZN10STM32F4DMA10initializeEv+0x50>)
 80116f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f4:	4a0f      	ldr	r2, [pc, #60]	; (8011734 <_ZN10STM32F4DMA10initializeEv+0x50>)
 80116f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80116fa:	6313      	str	r3, [r2, #48]	; 0x30
 80116fc:	4b0d      	ldr	r3, [pc, #52]	; (8011734 <_ZN10STM32F4DMA10initializeEv+0x50>)
 80116fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011700:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011704:	60fb      	str	r3, [r7, #12]
 8011706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8011708:	4b0a      	ldr	r3, [pc, #40]	; (8011734 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	4a09      	ldr	r2, [pc, #36]	; (8011734 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801170e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011712:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8011714:	4b07      	ldr	r3, [pc, #28]	; (8011734 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8011716:	691b      	ldr	r3, [r3, #16]
 8011718:	4a06      	ldr	r2, [pc, #24]	; (8011734 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801171a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801171e:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8011720:	4b05      	ldr	r3, [pc, #20]	; (8011738 <_ZN10STM32F4DMA10initializeEv+0x54>)
 8011722:	4a06      	ldr	r2, [pc, #24]	; (801173c <_ZN10STM32F4DMA10initializeEv+0x58>)
 8011724:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8011726:	205a      	movs	r0, #90	; 0x5a
 8011728:	f7ff fe7a 	bl	8011420 <__NVIC_EnableIRQ>
}
 801172c:	bf00      	nop
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	40023800 	.word	0x40023800
 8011738:	2000af1c 	.word	0x2000af1c
 801173c:	080115ff 	.word	0x080115ff

08011740 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	460b      	mov	r3, r1
 801174a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 801174c:	2300      	movs	r3, #0
 801174e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8011750:	78fb      	ldrb	r3, [r7, #3]
 8011752:	2b0b      	cmp	r3, #11
 8011754:	d826      	bhi.n	80117a4 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8011756:	a201      	add	r2, pc, #4	; (adr r2, 801175c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8011758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801175c:	08011799 	.word	0x08011799
 8011760:	08011793 	.word	0x08011793
 8011764:	0801178d 	.word	0x0801178d
 8011768:	080117a5 	.word	0x080117a5
 801176c:	080117a5 	.word	0x080117a5
 8011770:	080117a5 	.word	0x080117a5
 8011774:	080117a5 	.word	0x080117a5
 8011778:	0801179f 	.word	0x0801179f
 801177c:	0801179f 	.word	0x0801179f
 8011780:	0801179f 	.word	0x0801179f
 8011784:	0801179f 	.word	0x0801179f
 8011788:	0801179f 	.word	0x0801179f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 801178c:	2300      	movs	r3, #0
 801178e:	60fb      	str	r3, [r7, #12]
        break;
 8011790:	e00e      	b.n	80117b0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8011792:	2301      	movs	r3, #1
 8011794:	60fb      	str	r3, [r7, #12]
        break;
 8011796:	e00b      	b.n	80117b0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8011798:	2302      	movs	r3, #2
 801179a:	60fb      	str	r3, [r7, #12]
        break;
 801179c:	e008      	b.n	80117b0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 801179e:	2305      	movs	r3, #5
 80117a0:	60fb      	str	r3, [r7, #12]
        break;
 80117a2:	e005      	b.n	80117b0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80117a4:	4b05      	ldr	r3, [pc, #20]	; (80117bc <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80117a6:	4a06      	ldr	r2, [pc, #24]	; (80117c0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80117a8:	2165      	movs	r1, #101	; 0x65
 80117aa:	4806      	ldr	r0, [pc, #24]	; (80117c4 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80117ac:	f013 fc82 	bl	80250b4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80117b0:	68fb      	ldr	r3, [r7, #12]
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3710      	adds	r7, #16
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	bf00      	nop
 80117bc:	0802824c 	.word	0x0802824c
 80117c0:	08028268 	.word	0x08028268
 80117c4:	080282b4 	.word	0x080282b4

080117c8 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	460b      	mov	r3, r1
 80117d2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80117d4:	2300      	movs	r3, #0
 80117d6:	60fb      	str	r3, [r7, #12]

    switch (format)
 80117d8:	78fb      	ldrb	r3, [r7, #3]
 80117da:	2b0a      	cmp	r3, #10
 80117dc:	d821      	bhi.n	8011822 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80117de:	a201      	add	r2, pc, #4	; (adr r2, 80117e4 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80117e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117e4:	0801181d 	.word	0x0801181d
 80117e8:	08011817 	.word	0x08011817
 80117ec:	08011811 	.word	0x08011811
 80117f0:	08011823 	.word	0x08011823
 80117f4:	08011823 	.word	0x08011823
 80117f8:	08011823 	.word	0x08011823
 80117fc:	08011823 	.word	0x08011823
 8011800:	08011817 	.word	0x08011817
 8011804:	08011817 	.word	0x08011817
 8011808:	08011817 	.word	0x08011817
 801180c:	08011817 	.word	0x08011817
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011810:	2300      	movs	r3, #0
 8011812:	60fb      	str	r3, [r7, #12]
        break;
 8011814:	e00b      	b.n	801182e <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8011816:	2301      	movs	r3, #1
 8011818:	60fb      	str	r3, [r7, #12]
        break;
 801181a:	e008      	b.n	801182e <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 801181c:	2302      	movs	r3, #2
 801181e:	60fb      	str	r3, [r7, #12]
        break;
 8011820:	e005      	b.n	801182e <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8011822:	4b05      	ldr	r3, [pc, #20]	; (8011838 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8011824:	4a05      	ldr	r2, [pc, #20]	; (801183c <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8011826:	2186      	movs	r1, #134	; 0x86
 8011828:	4805      	ldr	r0, [pc, #20]	; (8011840 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801182a:	f013 fc43 	bl	80250b4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801182e:	68fb      	ldr	r3, [r7, #12]
}
 8011830:	4618      	mov	r0, r3
 8011832:	3710      	adds	r7, #16
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	0802824c 	.word	0x0802824c
 801183c:	080282e0 	.word	0x080282e0
 8011840:	080282b4 	.word	0x080282b4

08011844 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 801184c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8011850:	4618      	mov	r0, r3
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 801185c:	b590      	push	{r4, r7, lr}
 801185e:	b089      	sub	sp, #36	; 0x24
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	7f5b      	ldrb	r3, [r3, #29]
 801186a:	4619      	mov	r1, r3
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f7ff ff67 	bl	8011740 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011872:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	7f9b      	ldrb	r3, [r3, #30]
 8011878:	4619      	mov	r1, r3
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f7ff ff60 	bl	8011740 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011880:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	7f9b      	ldrb	r3, [r3, #30]
 8011886:	4619      	mov	r1, r3
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7ff ff9d 	bl	80117c8 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801188e:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	8adb      	ldrh	r3, [r3, #22]
 8011894:	461a      	mov	r2, r3
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	8a1b      	ldrh	r3, [r3, #16]
 801189a:	1ad2      	subs	r2, r2, r3
 801189c:	4b8e      	ldr	r3, [pc, #568]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801189e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	8adb      	ldrh	r3, [r3, #22]
 80118a4:	461a      	mov	r2, r3
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	8a1b      	ldrh	r3, [r3, #16]
 80118aa:	1ad2      	subs	r2, r2, r3
 80118ac:	4b8a      	ldr	r3, [pc, #552]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80118ae:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	8a9b      	ldrh	r3, [r3, #20]
 80118b4:	461a      	mov	r2, r3
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	8a1b      	ldrh	r3, [r3, #16]
 80118ba:	1ad2      	subs	r2, r2, r3
 80118bc:	4b86      	ldr	r3, [pc, #536]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80118be:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80118c0:	4a85      	ldr	r2, [pc, #532]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	8a5b      	ldrh	r3, [r3, #18]
 80118ca:	461a      	mov	r2, r3
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	8a1b      	ldrh	r3, [r3, #16]
 80118d0:	041b      	lsls	r3, r3, #16
 80118d2:	431a      	orrs	r2, r3
 80118d4:	4b80      	ldr	r3, [pc, #512]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80118d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	68da      	ldr	r2, [r3, #12]
 80118dc:	4b7e      	ldr	r3, [pc, #504]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80118de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	685a      	ldr	r2, [r3, #4]
 80118e4:	4b7c      	ldr	r3, [pc, #496]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80118e6:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118f0:	d047      	beq.n	8011982 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
 80118f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118f6:	f200 80f9 	bhi.w	8011aec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 80118fa:	2b80      	cmp	r3, #128	; 0x80
 80118fc:	d00e      	beq.n	801191c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 80118fe:	2b80      	cmp	r3, #128	; 0x80
 8011900:	f200 80f4 	bhi.w	8011aec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 8011904:	2b40      	cmp	r3, #64	; 0x40
 8011906:	f000 80d2 	beq.w	8011aae <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 801190a:	2b40      	cmp	r3, #64	; 0x40
 801190c:	f200 80ee 	bhi.w	8011aec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 8011910:	2b04      	cmp	r3, #4
 8011912:	d069      	beq.n	80119e8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>
 8011914:	2b20      	cmp	r3, #32
 8011916:	f000 80ca 	beq.w	8011aae <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 801191a:	e0e7      	b.n	8011aec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	7f1b      	ldrb	r3, [r3, #28]
 8011920:	061b      	lsls	r3, r3, #24
 8011922:	4a6d      	ldr	r2, [pc, #436]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011928:	f043 030a 	orr.w	r3, r3, #10
 801192c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	3318      	adds	r3, #24
 8011932:	4618      	mov	r0, r3
 8011934:	f7ff fdc4 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 8011938:	4603      	mov	r3, r0
 801193a:	021b      	lsls	r3, r3, #8
 801193c:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	3318      	adds	r3, #24
 8011944:	4618      	mov	r0, r3
 8011946:	f7ff fdbb 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 801194a:	4603      	mov	r3, r0
 801194c:	015b      	lsls	r3, r3, #5
 801194e:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8011952:	431c      	orrs	r4, r3
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	3318      	adds	r3, #24
 8011958:	4618      	mov	r0, r3
 801195a:	f7ff fdb1 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 801195e:	4603      	mov	r3, r0
 8011960:	00db      	lsls	r3, r3, #3
 8011962:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8011966:	4a5c      	ldr	r2, [pc, #368]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011968:	4323      	orrs	r3, r4
 801196a:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801196c:	4a5a      	ldr	r2, [pc, #360]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	68da      	ldr	r2, [r3, #12]
 8011976:	4b58      	ldr	r3, [pc, #352]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011978:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801197a:	4b57      	ldr	r3, [pc, #348]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801197c:	4a57      	ldr	r2, [pc, #348]	; (8011adc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 801197e:	601a      	str	r2, [r3, #0]
        break;
 8011980:	e0f7      	b.n	8011b72 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	7f1b      	ldrb	r3, [r3, #28]
 8011986:	061b      	lsls	r3, r3, #24
 8011988:	4a53      	ldr	r2, [pc, #332]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801198a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801198e:	f043 0309 	orr.w	r3, r3, #9
 8011992:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	3318      	adds	r3, #24
 8011998:	4618      	mov	r0, r3
 801199a:	f7ff fd91 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 801199e:	4603      	mov	r3, r0
 80119a0:	021b      	lsls	r3, r3, #8
 80119a2:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	3318      	adds	r3, #24
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7ff fd88 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 80119b0:	4603      	mov	r3, r0
 80119b2:	015b      	lsls	r3, r3, #5
 80119b4:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80119b8:	431c      	orrs	r4, r3
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	3318      	adds	r3, #24
 80119be:	4618      	mov	r0, r3
 80119c0:	f7ff fd7e 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 80119c4:	4603      	mov	r3, r0
 80119c6:	00db      	lsls	r3, r3, #3
 80119c8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80119cc:	4a42      	ldr	r2, [pc, #264]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80119ce:	4323      	orrs	r3, r4
 80119d0:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80119d2:	4a41      	ldr	r2, [pc, #260]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	68da      	ldr	r2, [r3, #12]
 80119dc:	4b3e      	ldr	r3, [pc, #248]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80119de:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80119e0:	4b3d      	ldr	r3, [pc, #244]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80119e2:	4a3e      	ldr	r2, [pc, #248]	; (8011adc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 80119e4:	601a      	str	r2, [r3, #0]
        break;
 80119e6:	e0c4      	b.n	8011b72 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	7f1b      	ldrb	r3, [r3, #28]
 80119ec:	061b      	lsls	r3, r3, #24
 80119ee:	461a      	mov	r2, r3
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	4313      	orrs	r3, r2
 80119f4:	4a38      	ldr	r2, [pc, #224]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80119f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80119fa:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80119fc:	4a36      	ldr	r2, [pc, #216]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	68da      	ldr	r2, [r3, #12]
 8011a06:	4b34      	ldr	r3, [pc, #208]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011a08:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	7f5b      	ldrb	r3, [r3, #29]
 8011a0e:	2b0b      	cmp	r3, #11
 8011a10:	d149      	bne.n	8011aa6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24a>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	689b      	ldr	r3, [r3, #8]
 8011a16:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	1d1a      	adds	r2, r3, #4
 8011a1c:	4b2e      	ldr	r3, [pc, #184]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011a1e:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	881b      	ldrh	r3, [r3, #0]
 8011a24:	b2db      	uxtb	r3, r3
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d002      	beq.n	8011a30 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	d00f      	beq.n	8011a4e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f2>
 8011a2e:	e01e      	b.n	8011a6e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011a30:	4b29      	ldr	r3, [pc, #164]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011a32:	69db      	ldr	r3, [r3, #28]
 8011a34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011a38:	f023 0310 	bic.w	r3, r3, #16
 8011a3c:	693a      	ldr	r2, [r7, #16]
 8011a3e:	8852      	ldrh	r2, [r2, #2]
 8011a40:	3a01      	subs	r2, #1
 8011a42:	0212      	lsls	r2, r2, #8
 8011a44:	4611      	mov	r1, r2
 8011a46:	4a24      	ldr	r2, [pc, #144]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011a48:	430b      	orrs	r3, r1
 8011a4a:	61d3      	str	r3, [r2, #28]
                break;
 8011a4c:	e015      	b.n	8011a7a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011a4e:	4b22      	ldr	r3, [pc, #136]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011a50:	69db      	ldr	r3, [r3, #28]
 8011a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011a56:	f023 0310 	bic.w	r3, r3, #16
 8011a5a:	693a      	ldr	r2, [r7, #16]
 8011a5c:	8852      	ldrh	r2, [r2, #2]
 8011a5e:	3a01      	subs	r2, #1
 8011a60:	0212      	lsls	r2, r2, #8
 8011a62:	4313      	orrs	r3, r2
 8011a64:	4a1c      	ldr	r2, [pc, #112]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011a66:	f043 0310 	orr.w	r3, r3, #16
 8011a6a:	61d3      	str	r3, [r2, #28]
                break;
 8011a6c:	e005      	b.n	8011a7a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8011a6e:	4b1c      	ldr	r3, [pc, #112]	; (8011ae0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 8011a70:	4a1c      	ldr	r2, [pc, #112]	; (8011ae4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8011a72:	21fc      	movs	r1, #252	; 0xfc
 8011a74:	481c      	ldr	r0, [pc, #112]	; (8011ae8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a76:	f013 fb1d 	bl	80250b4 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8011a7a:	4b17      	ldr	r3, [pc, #92]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011a7c:	69db      	ldr	r3, [r3, #28]
 8011a7e:	4a16      	ldr	r2, [pc, #88]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011a80:	f043 0320 	orr.w	r3, r3, #32
 8011a84:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8011a86:	4b14      	ldr	r3, [pc, #80]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011a88:	69db      	ldr	r3, [r3, #28]
 8011a8a:	f003 0320 	and.w	r3, r3, #32
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	bf14      	ite	ne
 8011a92:	2301      	movne	r3, #1
 8011a94:	2300      	moveq	r3, #0
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d001      	beq.n	8011aa0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
            {
                __NOP();
 8011a9c:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8011a9e:	e7f2      	b.n	8011a86 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22a>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8011aa0:	4b0d      	ldr	r3, [pc, #52]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011aa2:	2210      	movs	r2, #16
 8011aa4:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011aa6:	4b0c      	ldr	r3, [pc, #48]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011aa8:	4a0c      	ldr	r2, [pc, #48]	; (8011adc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8011aaa:	601a      	str	r2, [r3, #0]
        break;
 8011aac:	e061      	b.n	8011b72 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	7f1b      	ldrb	r3, [r3, #28]
 8011ab2:	061b      	lsls	r3, r3, #24
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	4313      	orrs	r3, r2
 8011aba:	4a07      	ldr	r2, [pc, #28]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011ac0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011ac2:	4a05      	ldr	r2, [pc, #20]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	68da      	ldr	r2, [r3, #12]
 8011acc:	4b02      	ldr	r3, [pc, #8]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011ace:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011ad0:	4b01      	ldr	r3, [pc, #4]	; (8011ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8011ad2:	4a02      	ldr	r2, [pc, #8]	; (8011adc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8011ad4:	601a      	str	r2, [r3, #0]
        break;
 8011ad6:	e04c      	b.n	8011b72 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
 8011ad8:	4002b000 	.word	0x4002b000
 8011adc:	00020201 	.word	0x00020201
 8011ae0:	08028330 	.word	0x08028330
 8011ae4:	0802834c 	.word	0x0802834c
 8011ae8:	080282b4 	.word	0x080282b4
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	7f1b      	ldrb	r3, [r3, #28]
 8011af0:	061b      	lsls	r3, r3, #24
 8011af2:	461a      	mov	r2, r3
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	4313      	orrs	r3, r2
 8011af8:	4a20      	ldr	r2, [pc, #128]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011afe:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	7f5b      	ldrb	r3, [r3, #29]
 8011b04:	2b0b      	cmp	r3, #11
 8011b06:	d12f      	bne.n	8011b68 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30c>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	689b      	ldr	r3, [r3, #8]
 8011b0c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	1d1a      	adds	r2, r3, #4
 8011b12:	4b1a      	ldr	r3, [pc, #104]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011b14:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011b16:	4b19      	ldr	r3, [pc, #100]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011b18:	69db      	ldr	r3, [r3, #28]
 8011b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011b1e:	f023 0310 	bic.w	r3, r3, #16
 8011b22:	68fa      	ldr	r2, [r7, #12]
 8011b24:	8852      	ldrh	r2, [r2, #2]
 8011b26:	3a01      	subs	r2, #1
 8011b28:	0212      	lsls	r2, r2, #8
 8011b2a:	4313      	orrs	r3, r2
 8011b2c:	4a13      	ldr	r2, [pc, #76]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011b2e:	f043 0310 	orr.w	r3, r3, #16
 8011b32:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8011b34:	4b11      	ldr	r3, [pc, #68]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011b36:	69db      	ldr	r3, [r3, #28]
 8011b38:	4a10      	ldr	r2, [pc, #64]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011b3a:	f043 0320 	orr.w	r3, r3, #32
 8011b3e:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8011b40:	4b0e      	ldr	r3, [pc, #56]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011b42:	69db      	ldr	r3, [r3, #28]
 8011b44:	f003 0320 	and.w	r3, r3, #32
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	bf14      	ite	ne
 8011b4c:	2301      	movne	r3, #1
 8011b4e:	2300      	moveq	r3, #0
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d001      	beq.n	8011b5a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fe>
            {
                __NOP();
 8011b56:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8011b58:	e7f2      	b.n	8011b40 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e4>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8011b5a:	4b08      	ldr	r3, [pc, #32]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011b5c:	2210      	movs	r2, #16
 8011b5e:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011b60:	4b06      	ldr	r3, [pc, #24]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011b62:	4a07      	ldr	r2, [pc, #28]	; (8011b80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 8011b64:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8011b66:	e003      	b.n	8011b70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x314>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8011b68:	4b04      	ldr	r3, [pc, #16]	; (8011b7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8011b6a:	f240 2201 	movw	r2, #513	; 0x201
 8011b6e:	601a      	str	r2, [r3, #0]
        break;
 8011b70:	bf00      	nop
    }
}
 8011b72:	bf00      	nop
 8011b74:	3724      	adds	r7, #36	; 0x24
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd90      	pop	{r4, r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	4002b000 	.word	0x4002b000
 8011b80:	00010201 	.word	0x00010201

08011b84 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F4DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8011b84:	b590      	push	{r4, r7, lr}
 8011b86:	b085      	sub	sp, #20
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	7f9b      	ldrb	r3, [r3, #30]
 8011b92:	4619      	mov	r1, r3
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f7ff fe17 	bl	80117c8 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011b9a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011b9c:	4a53      	ldr	r2, [pc, #332]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	8a5b      	ldrh	r3, [r3, #18]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	8a1b      	ldrh	r3, [r3, #16]
 8011bac:	041b      	lsls	r3, r3, #16
 8011bae:	431a      	orrs	r2, r3
 8011bb0:	4b4e      	ldr	r3, [pc, #312]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	68da      	ldr	r2, [r3, #12]
 8011bb8:	4b4c      	ldr	r3, [pc, #304]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011bba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	8adb      	ldrh	r3, [r3, #22]
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	8a1b      	ldrh	r3, [r3, #16]
 8011bc6:	1ad2      	subs	r2, r2, r3
 8011bc8:	4b48      	ldr	r3, [pc, #288]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011bca:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	2b08      	cmp	r3, #8
 8011bd2:	d14d      	bne.n	8011c70 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	8adb      	ldrh	r3, [r3, #22]
 8011bd8:	461a      	mov	r2, r3
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	8a1b      	ldrh	r3, [r3, #16]
 8011bde:	1ad2      	subs	r2, r2, r3
 8011be0:	4b42      	ldr	r3, [pc, #264]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011be2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	8adb      	ldrh	r3, [r3, #22]
 8011be8:	461a      	mov	r2, r3
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	8a1b      	ldrh	r3, [r3, #16]
 8011bee:	1ad2      	subs	r2, r2, r3
 8011bf0:	4b3e      	ldr	r3, [pc, #248]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011bf2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011bf4:	4a3d      	ldr	r2, [pc, #244]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	7f1b      	ldrb	r3, [r3, #28]
 8011bfe:	061b      	lsls	r3, r3, #24
 8011c00:	4a3a      	ldr	r2, [pc, #232]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c06:	f043 0309 	orr.w	r3, r3, #9
 8011c0a:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	7f1b      	ldrb	r3, [r3, #28]
 8011c10:	061b      	lsls	r3, r3, #24
 8011c12:	461c      	mov	r4, r3
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	3318      	adds	r3, #24
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7ff fc51 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	021b      	lsls	r3, r3, #8
 8011c22:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8011c26:	431c      	orrs	r4, r3
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	3318      	adds	r3, #24
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7ff fc47 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 8011c32:	4603      	mov	r3, r0
 8011c34:	015b      	lsls	r3, r3, #5
 8011c36:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8011c3a:	431c      	orrs	r4, r3
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	3318      	adds	r3, #24
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7ff fc3d 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 8011c46:	4603      	mov	r3, r0
 8011c48:	00db      	lsls	r3, r3, #3
 8011c4a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8011c4e:	4323      	orrs	r3, r4
 8011c50:	4a26      	ldr	r2, [pc, #152]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011c52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011c56:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	68da      	ldr	r2, [r3, #12]
 8011c5c:	4b23      	ldr	r3, [pc, #140]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011c5e:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	68da      	ldr	r2, [r3, #12]
 8011c64:	4b21      	ldr	r3, [pc, #132]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011c66:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011c68:	4b20      	ldr	r3, [pc, #128]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011c6a:	4a21      	ldr	r2, [pc, #132]	; (8011cf0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x16c>)
 8011c6c:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8011c6e:	e039      	b.n	8011ce4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c70:	4a1e      	ldr	r2, [pc, #120]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8011c76:	4b1d      	ldr	r3, [pc, #116]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011c78:	2200      	movs	r2, #0
 8011c7a:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	7f9b      	ldrb	r3, [r3, #30]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d108      	bne.n	8011c96 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	3318      	adds	r3, #24
 8011c88:	4c18      	ldr	r4, [pc, #96]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7ff fc18 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 8011c90:	4603      	mov	r3, r0
 8011c92:	63a3      	str	r3, [r4, #56]	; 0x38
 8011c94:	e023      	b.n	8011cde <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15a>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	7f1b      	ldrb	r3, [r3, #28]
 8011c9a:	061b      	lsls	r3, r3, #24
 8011c9c:	461c      	mov	r4, r3
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	3318      	adds	r3, #24
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7ff fc0c 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	021b      	lsls	r3, r3, #8
 8011cac:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8011cb0:	431c      	orrs	r4, r3
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	3318      	adds	r3, #24
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7ff fc02 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	015b      	lsls	r3, r3, #5
 8011cc0:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8011cc4:	431c      	orrs	r4, r3
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	3318      	adds	r3, #24
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7ff fbf8 	bl	80114c0 <_ZNK8touchgfx9colortypecvmEv>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	00db      	lsls	r3, r3, #3
 8011cd4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8011cd8:	4a04      	ldr	r2, [pc, #16]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011cda:	4323      	orrs	r3, r4
 8011cdc:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8011cde:	4b03      	ldr	r3, [pc, #12]	; (8011cec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8011ce0:	4a04      	ldr	r2, [pc, #16]	; (8011cf4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x170>)
 8011ce2:	601a      	str	r2, [r3, #0]
}
 8011ce4:	bf00      	nop
 8011ce6:	3714      	adds	r7, #20
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd90      	pop	{r4, r7, pc}
 8011cec:	4002b000 	.word	0x4002b000
 8011cf0:	00020201 	.word	0x00020201
 8011cf4:	00030201 	.word	0x00030201

08011cf8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	4a05      	ldr	r2, [pc, #20]	; (8011d18 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	601a      	str	r2, [r3, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7ff fbe5 	bl	80114d8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	080298e4 	.word	0x080298e4

08011d1c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff ffe7 	bl	8011cf8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011d2a:	2114      	movs	r1, #20
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f013 f896 	bl	8024e5e <_ZdlPvj>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	4618      	mov	r0, r3
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8011d44:	4a04      	ldr	r2, [pc, #16]	; (8011d58 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6013      	str	r3, [r2, #0]
    }
 8011d4a:	bf00      	nop
 8011d4c:	370c      	adds	r7, #12
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr
 8011d56:	bf00      	nop
 8011d58:	2000a0bc 	.word	0x2000a0bc

08011d5c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011d5c:	b480      	push	{r7}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	60f8      	str	r0, [r7, #12]
 8011d64:	60b9      	str	r1, [r7, #8]
 8011d66:	607a      	str	r2, [r7, #4]
 8011d68:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8011d6a:	4a0b      	ldr	r2, [pc, #44]	; (8011d98 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	601a      	str	r2, [r3, #0]
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	68ba      	ldr	r2, [r7, #8]
 8011d74:	605a      	str	r2, [r3, #4]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	687a      	ldr	r2, [r7, #4]
 8011d7a:	609a      	str	r2, [r3, #8]
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	683a      	ldr	r2, [r7, #0]
 8011d80:	60da      	str	r2, [r3, #12]
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	69ba      	ldr	r2, [r7, #24]
 8011d86:	611a      	str	r2, [r3, #16]
    {
    }
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3714      	adds	r7, #20
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop
 8011d98:	08028b94 	.word	0x08028b94

08011d9c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
    {
 8011da4:	4a04      	ldr	r2, [pc, #16]	; (8011db8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	601a      	str	r2, [r3, #0]
    }
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	4618      	mov	r0, r3
 8011dae:	370c      	adds	r7, #12
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr
 8011db8:	08028b94 	.word	0x08028b94

08011dbc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
    }
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f7ff ffe9 	bl	8011d9c <_ZN8touchgfx7MVPHeapD1Ev>
 8011dca:	2114      	movs	r1, #20
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f013 f846 	bl	8024e5e <_ZdlPvj>
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3708      	adds	r7, #8
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8011ddc:	b480      	push	{r7}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
    {
 8011de4:	4a04      	ldr	r2, [pc, #16]	; (8011df8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	601a      	str	r2, [r3, #0]
    }
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4618      	mov	r0, r3
 8011dee:	370c      	adds	r7, #12
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr
 8011df8:	08029db8 	.word	0x08029db8

08011dfc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
    }
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7ff ffe9 	bl	8011ddc <_ZN8touchgfx3LCDD1Ev>
 8011e0a:	2108      	movs	r1, #8
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f013 f826 	bl	8024e5e <_ZdlPvj>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	4618      	mov	r0, r3
 8011e16:	3708      	adds	r7, #8
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8011e1c:	b480      	push	{r7}
 8011e1e:	b083      	sub	sp, #12
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	801a      	strh	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	805a      	strh	r2, [r3, #2]
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2200      	movs	r2, #0
 8011e34:	809a      	strh	r2, [r3, #4]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	80da      	strh	r2, [r3, #6]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	811a      	strh	r2, [r3, #8]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2200      	movs	r2, #0
 8011e46:	815a      	strh	r2, [r3, #10]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	819a      	strh	r2, [r3, #12]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2200      	movs	r2, #0
 8011e52:	739a      	strb	r2, [r3, #14]
        {
        }
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	4618      	mov	r0, r3
 8011e58:	370c      	adds	r7, #12
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr

08011e62 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8011e62:	b580      	push	{r7, lr}
 8011e64:	b082      	sub	sp, #8
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7ff ffd5 	bl	8011e1c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2200      	movs	r2, #0
 8011e76:	611a      	str	r2, [r3, #16]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	829a      	strh	r2, [r3, #20]
    {
    }
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	4618      	mov	r0, r3
 8011e82:	3708      	adds	r7, #8
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b084      	sub	sp, #16
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	607a      	str	r2, [r7, #4]
 8011e94:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 8011e96:	4a4a      	ldr	r2, [pc, #296]	; (8011fc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	601a      	str	r2, [r3, #0]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	68ba      	ldr	r2, [r7, #8]
 8011ea0:	605a      	str	r2, [r3, #4]
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	609a      	str	r2, [r3, #8]
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	683a      	ldr	r2, [r7, #0]
 8011eac:	60da      	str	r2, [r3, #12]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	611a      	str	r2, [r3, #16]
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	615a      	str	r2, [r3, #20]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	619a      	str	r2, [r3, #24]
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	331c      	adds	r3, #28
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7ff ffcc 	bl	8011e62 <_ZN8touchgfx8GesturesC1Ev>
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	639a      	str	r2, [r3, #56]	; 0x38
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	63da      	str	r2, [r3, #60]	; 0x3c
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2200      	movs	r2, #0
 8011eda:	641a      	str	r2, [r3, #64]	; 0x40
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	645a      	str	r2, [r3, #68]	; 0x44
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2201      	movs	r2, #1
 8011eee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2200      	movs	r2, #0
 8011efe:	64da      	str	r2, [r3, #76]	; 0x4c
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	3350      	adds	r3, #80	; 0x50
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7fc ff76 	bl	800edf6 <_ZN8touchgfx4RectC1Ev>
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	2200      	movs	r2, #0
 8011f16:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2201      	movs	r2, #1
 8011f26:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	2200      	movs	r2, #0
 8011f36:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2200      	movs	r2, #0
 8011f46:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2200      	movs	r2, #0
 8011f56:	671a      	str	r2, [r3, #112]	; 0x70
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2200      	movs	r2, #0
 8011f64:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2201      	movs	r2, #1
 8011f74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8011f78:	4a12      	ldr	r2, [pc, #72]	; (8011fc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8011f7e:	4a12      	ldr	r2, [pc, #72]	; (8011fc8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8011f80:	8b3b      	ldrh	r3, [r7, #24]
 8011f82:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8011f84:	4a11      	ldr	r2, [pc, #68]	; (8011fcc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 8011f86:	8bbb      	ldrh	r3, [r7, #28]
 8011f88:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8011f8a:	4b11      	ldr	r3, [pc, #68]	; (8011fd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8011f90:	4b0d      	ldr	r3, [pc, #52]	; (8011fc8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8011f92:	881a      	ldrh	r2, [r3, #0]
 8011f94:	4b0f      	ldr	r3, [pc, #60]	; (8011fd4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 8011f96:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8011f98:	4b0c      	ldr	r3, [pc, #48]	; (8011fcc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 8011f9a:	881a      	ldrh	r2, [r3, #0]
 8011f9c:	4b0e      	ldr	r3, [pc, #56]	; (8011fd8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 8011f9e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011fa0:	8b3a      	ldrh	r2, [r7, #24]
 8011fa2:	8bbb      	ldrh	r3, [r7, #28]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	bf34      	ite	cc
 8011fa8:	2301      	movcc	r3, #1
 8011faa:	2300      	movcs	r3, #0
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	461a      	mov	r2, r3
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	08029448 	.word	0x08029448
 8011fc4:	2000a060 	.word	0x2000a060
 8011fc8:	2000a054 	.word	0x2000a054
 8011fcc:	2000a056 	.word	0x2000a056
 8011fd0:	2000a058 	.word	0x2000a058
 8011fd4:	2000a05a 	.word	0x2000a05a
 8011fd8:	2000a05c 	.word	0x2000a05c

08011fdc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b082      	sub	sp, #8
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fc fc65 	bl	800e8b8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8011fee:	bf00      	nop
 8011ff0:	3708      	adds	r7, #8
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
	...

08011ff8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b086      	sub	sp, #24
 8011ffc:	af02      	add	r7, sp, #8
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]
 8012004:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8012006:	68f8      	ldr	r0, [r7, #12]
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	68b9      	ldr	r1, [r7, #8]
 8012012:	f7ff fea3 	bl	8011d5c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8012016:	4a04      	ldr	r2, [pc, #16]	; (8012028 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	601a      	str	r2, [r3, #0]
    {

    }
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	4618      	mov	r0, r3
 8012020:	3710      	adds	r7, #16
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	08028b80 	.word	0x08028b80

0801202c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801202c:	b580      	push	{r7, lr}
 801202e:	af00      	add	r7, sp, #0
 8012030:	4801      	ldr	r0, [pc, #4]	; (8012038 <__tcf_0+0xc>)
 8012032:	f000 f95f 	bl	80122f4 <_ZN12FrontendHeapD1Ev>
 8012036:	bd80      	pop	{r7, pc}
 8012038:	20008e64 	.word	0x20008e64

0801203c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801203c:	b580      	push	{r7, lr}
 801203e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012040:	4b12      	ldr	r3, [pc, #72]	; (801208c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	f3bf 8f5b 	dmb	ish
 8012048:	b2db      	uxtb	r3, r3
 801204a:	f003 0301 	and.w	r3, r3, #1
 801204e:	2b00      	cmp	r3, #0
 8012050:	bf0c      	ite	eq
 8012052:	2301      	moveq	r3, #1
 8012054:	2300      	movne	r3, #0
 8012056:	b2db      	uxtb	r3, r3
 8012058:	2b00      	cmp	r3, #0
 801205a:	d013      	beq.n	8012084 <_ZN12FrontendHeap11getInstanceEv+0x48>
 801205c:	480b      	ldr	r0, [pc, #44]	; (801208c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801205e:	f012 ff00 	bl	8024e62 <__cxa_guard_acquire>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	bf14      	ite	ne
 8012068:	2301      	movne	r3, #1
 801206a:	2300      	moveq	r3, #0
 801206c:	b2db      	uxtb	r3, r3
 801206e:	2b00      	cmp	r3, #0
 8012070:	d008      	beq.n	8012084 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8012072:	4807      	ldr	r0, [pc, #28]	; (8012090 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012074:	f000 f868 	bl	8012148 <_ZN12FrontendHeapC1Ev>
 8012078:	4804      	ldr	r0, [pc, #16]	; (801208c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801207a:	f012 fefe 	bl	8024e7a <__cxa_guard_release>
 801207e:	4805      	ldr	r0, [pc, #20]	; (8012094 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8012080:	f013 f836 	bl	80250f0 <atexit>
        return instance;
 8012084:	4b02      	ldr	r3, [pc, #8]	; (8012090 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8012086:	4618      	mov	r0, r3
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	20009330 	.word	0x20009330
 8012090:	20008e64 	.word	0x20008e64
 8012094:	0801202d 	.word	0x0801202d

08012098 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	4a05      	ldr	r2, [pc, #20]	; (80120b8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	601a      	str	r2, [r3, #0]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7ff fe77 	bl	8011d9c <_ZN8touchgfx7MVPHeapD1Ev>
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	4618      	mov	r0, r3
 80120b2:	3708      	adds	r7, #8
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	08028b80 	.word	0x08028b80

080120bc <_ZN16FrontendHeapBaseD0Ev>:
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f7ff ffe7 	bl	8012098 <_ZN16FrontendHeapBaseD1Ev>
 80120ca:	2114      	movs	r1, #20
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f012 fec6 	bl	8024e5e <_ZdlPvj>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4618      	mov	r0, r3
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	4618      	mov	r0, r3
 80120e8:	f000 fd76 	bl	8012bd8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80120ec:	4a03      	ldr	r2, [pc, #12]	; (80120fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	601a      	str	r2, [r3, #0]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	4618      	mov	r0, r3
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	08028b4c 	.word	0x08028b4c

08012100 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	4618      	mov	r0, r3
 801210c:	f000 fd64 	bl	8012bd8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012110:	4a03      	ldr	r2, [pc, #12]	; (8012120 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	4618      	mov	r0, r3
 801211a:	3708      	adds	r7, #8
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}
 8012120:	08028b18 	.word	0x08028b18

08012124 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	4618      	mov	r0, r3
 8012130:	f000 fd52 	bl	8012bd8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012134:	4a03      	ldr	r2, [pc, #12]	; (8012144 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	601a      	str	r2, [r3, #0]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	4618      	mov	r0, r3
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	08028ae4 	.word	0x08028ae4

08012148 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012148:	b590      	push	{r4, r7, lr}
 801214a:	b085      	sub	sp, #20
 801214c:	af02      	add	r7, sp, #8
 801214e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f103 0114 	add.w	r1, r3, #20
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f503 7456 	add.w	r4, r3, #856	; 0x358
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f503 735d 	add.w	r3, r3, #884	; 0x374
                     app(model, *this)
 801216a:	9300      	str	r3, [sp, #0]
 801216c:	4623      	mov	r3, r4
 801216e:	f7ff ff43 	bl	8011ff8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012172:	4a18      	ldr	r2, [pc, #96]	; (80121d4 <_ZN12FrontendHeapC1Ev+0x8c>)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	601a      	str	r2, [r3, #0]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	3314      	adds	r3, #20
 801217c:	4618      	mov	r0, r3
 801217e:	f7ff ffad 	bl	80120dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	332c      	adds	r3, #44	; 0x2c
 8012186:	4618      	mov	r0, r3
 8012188:	f7ff ffba 	bl	8012100 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012192:	4618      	mov	r0, r3
 8012194:	f7ff ffc6 	bl	8012124 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801219e:	4618      	mov	r0, r3
 80121a0:	f7fe f9c4 	bl	801052c <_ZN5ModelC1Ev>
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f503 705d 	add.w	r0, r3, #884	; 0x374
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	4619      	mov	r1, r3
 80121b4:	f7fe f9a4 	bl	8010500 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80121c0:	4619      	mov	r1, r3
 80121c2:	4610      	mov	r0, r2
 80121c4:	f7ff ff0a 	bl	8011fdc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	4618      	mov	r0, r3
 80121cc:	370c      	adds	r7, #12
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd90      	pop	{r4, r7, pc}
 80121d2:	bf00      	nop
 80121d4:	08028ad0 	.word	0x08028ad0

080121d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80121d8:	b580      	push	{r7, lr}
 80121da:	b086      	sub	sp, #24
 80121dc:	af02      	add	r7, sp, #8
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
 80121e4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	8bbb      	ldrh	r3, [r7, #28]
 80121ea:	9301      	str	r3, [sp, #4]
 80121ec:	8b3b      	ldrh	r3, [r7, #24]
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	68b9      	ldr	r1, [r7, #8]
 80121f6:	f7ff fe47 	bl	8011e88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80121fa:	4a04      	ldr	r2, [pc, #16]	; (801220c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	601a      	str	r2, [r3, #0]
    }
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	4618      	mov	r0, r3
 8012204:	3710      	adds	r7, #16
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	08028ba4 	.word	0x08028ba4

08012210 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8012210:	b580      	push	{r7, lr}
 8012212:	b086      	sub	sp, #24
 8012214:	af02      	add	r7, sp, #8
 8012216:	60f8      	str	r0, [r7, #12]
 8012218:	60b9      	str	r1, [r7, #8]
 801221a:	607a      	str	r2, [r7, #4]
 801221c:	603b      	str	r3, [r7, #0]
 801221e:	68f8      	ldr	r0, [r7, #12]
 8012220:	8bbb      	ldrh	r3, [r7, #28]
 8012222:	9301      	str	r3, [sp, #4]
 8012224:	8b3b      	ldrh	r3, [r7, #24]
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	687a      	ldr	r2, [r7, #4]
 801222c:	68b9      	ldr	r1, [r7, #8]
 801222e:	f7ff ffd3 	bl	80121d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012232:	4a04      	ldr	r2, [pc, #16]	; (8012244 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	601a      	str	r2, [r3, #0]
    }
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	4618      	mov	r0, r3
 801223c:	3710      	adds	r7, #16
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}
 8012242:	bf00      	nop
 8012244:	08028990 	.word	0x08028990

08012248 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8012248:	b480      	push	{r7}
 801224a:	b083      	sub	sp, #12
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	4a04      	ldr	r2, [pc, #16]	; (8012264 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	601a      	str	r2, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	4618      	mov	r0, r3
 801225a:	370c      	adds	r7, #12
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr
 8012264:	08028978 	.word	0x08028978

08012268 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	4618      	mov	r0, r3
 8012274:	f7ff ffe8 	bl	8012248 <_ZN8touchgfx15TouchControllerC1Ev>
 8012278:	4a03      	ldr	r2, [pc, #12]	; (8012288 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	601a      	str	r2, [r3, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	4618      	mov	r0, r3
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}
 8012288:	08028960 	.word	0x08028960

0801228c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 801228c:	b590      	push	{r4, r7, lr}
 801228e:	b085      	sub	sp, #20
 8012290:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012292:	f7fd ff0f 	bl	80100b4 <_ZN14BitmapDatabase11getInstanceEv>
 8012296:	4604      	mov	r4, r0
 8012298:	f7fd ff16 	bl	80100c8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801229c:	4603      	mov	r3, r0
 801229e:	4619      	mov	r1, r3
 80122a0:	2300      	movs	r3, #0
 80122a2:	9300      	str	r3, [sp, #0]
 80122a4:	2300      	movs	r3, #0
 80122a6:	2200      	movs	r2, #0
 80122a8:	4620      	mov	r0, r4
 80122aa:	f006 ffdd 	bl	8019268 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80122ae:	4809      	ldr	r0, [pc, #36]	; (80122d4 <touchgfx_init+0x48>)
 80122b0:	f7ff fd44 	bl	8011d3c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80122b4:	2000      	movs	r0, #0
 80122b6:	f7fe f841 	bl	801033c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80122ba:	4807      	ldr	r0, [pc, #28]	; (80122d8 <touchgfx_init+0x4c>)
 80122bc:	f006 ff16 	bl	80190ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80122c0:	f7ff febc 	bl	801203c <_ZN12FrontendHeap11getInstanceEv>
 80122c4:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 80122c6:	4805      	ldr	r0, [pc, #20]	; (80122dc <touchgfx_init+0x50>)
 80122c8:	f7fe ff42 	bl	8011150 <_ZN11TouchGFXHAL10initializeEv>
}
 80122cc:	bf00      	nop
 80122ce:	370c      	adds	r7, #12
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd90      	pop	{r4, r7, pc}
 80122d4:	20009fd0 	.word	0x20009fd0
 80122d8:	2000009c 	.word	0x2000009c
 80122dc:	20009fd4 	.word	0x20009fd4

080122e0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80122e4:	4802      	ldr	r0, [pc, #8]	; (80122f0 <touchgfx_taskEntry+0x10>)
 80122e6:	f7fe ff3f 	bl	8011168 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80122ea:	bf00      	nop
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	20009fd4 	.word	0x20009fd4

080122f4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	4a10      	ldr	r2, [pc, #64]	; (8012340 <_ZN12FrontendHeapD1Ev+0x4c>)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	601a      	str	r2, [r3, #0]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8012308:	4618      	mov	r0, r3
 801230a:	f7fe f8c3 	bl	8010494 <_ZN19FrontendApplicationD1Ev>
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012314:	4618      	mov	r0, r3
 8012316:	f000 f827 	bl	8012368 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	332c      	adds	r3, #44	; 0x2c
 801231e:	4618      	mov	r0, r3
 8012320:	f000 f844 	bl	80123ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3314      	adds	r3, #20
 8012328:	4618      	mov	r0, r3
 801232a:	f000 f863 	bl	80123f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	4618      	mov	r0, r3
 8012332:	f7ff feb1 	bl	8012098 <_ZN16FrontendHeapBaseD1Ev>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	4618      	mov	r0, r3
 801233a:	3708      	adds	r7, #8
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	08028ad0 	.word	0x08028ad0

08012344 <_ZN12FrontendHeapD0Ev>:
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f7ff ffd1 	bl	80122f4 <_ZN12FrontendHeapD1Ev>
 8012352:	f240 41cc 	movw	r1, #1228	; 0x4cc
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f012 fd81 	bl	8024e5e <_ZdlPvj>
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	4618      	mov	r0, r3
 8012360:	3708      	adds	r7, #8
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
	...

08012368 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	4a05      	ldr	r2, [pc, #20]	; (8012388 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	601a      	str	r2, [r3, #0]
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4618      	mov	r0, r3
 801237a:	f000 fc2b 	bl	8012bd4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	4618      	mov	r0, r3
 8012382:	3708      	adds	r7, #8
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}
 8012388:	08028ae4 	.word	0x08028ae4

0801238c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7ff ffe7 	bl	8012368 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801239a:	2114      	movs	r1, #20
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f012 fd5e 	bl	8024e5e <_ZdlPvj>
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	4618      	mov	r0, r3
 80123a6:	3708      	adds	r7, #8
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	4a05      	ldr	r2, [pc, #20]	; (80123cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	601a      	str	r2, [r3, #0]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	4618      	mov	r0, r3
 80123be:	f000 fc09 	bl	8012bd4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	4618      	mov	r0, r3
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	08028b18 	.word	0x08028b18

080123d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f7ff ffe7 	bl	80123ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80123de:	f44f 714b 	mov.w	r1, #812	; 0x32c
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f012 fd3b 	bl	8024e5e <_ZdlPvj>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	4618      	mov	r0, r3
 80123ec:	3708      	adds	r7, #8
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
	...

080123f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	4a05      	ldr	r2, [pc, #20]	; (8012414 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	601a      	str	r2, [r3, #0]
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	4618      	mov	r0, r3
 8012406:	f000 fbe5 	bl	8012bd4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4618      	mov	r0, r3
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	08028b4c 	.word	0x08028b4c

08012418 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f7ff ffe7 	bl	80123f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012426:	2118      	movs	r1, #24
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f012 fd18 	bl	8024e5e <_ZdlPvj>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	4618      	mov	r0, r3
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	4a05      	ldr	r2, [pc, #20]	; (8012458 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	f7ff fcc7 	bl	8011ddc <_ZN8touchgfx3LCDD1Ev>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4618      	mov	r0, r3
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}
 8012458:	0802af2c 	.word	0x0802af2c

0801245c <_ZN8touchgfx8LCD16bppD0Ev>:
 801245c:	b580      	push	{r7, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f7ff ffe7 	bl	8012438 <_ZN8touchgfx8LCD16bppD1Ev>
 801246a:	2178      	movs	r1, #120	; 0x78
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f012 fcf6 	bl	8024e5e <_ZdlPvj>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	4618      	mov	r0, r3
 8012476:	3708      	adds	r7, #8
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <_Z41__static_initialization_and_destruction_0ii>:
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af02      	add	r7, sp, #8
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2b01      	cmp	r3, #1
 801248a:	d118      	bne.n	80124be <_Z41__static_initialization_and_destruction_0ii+0x42>
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012492:	4293      	cmp	r3, r2
 8012494:	d113      	bne.n	80124be <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 8012496:	4817      	ldr	r0, [pc, #92]	; (80124f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8012498:	f7ff fee6 	bl	8012268 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 801249c:	4816      	ldr	r0, [pc, #88]	; (80124f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801249e:	f7ff f8cb 	bl	8011638 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 80124a2:	4816      	ldr	r0, [pc, #88]	; (80124fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80124a4:	f009 ff62 	bl	801c36c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 80124a8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80124ac:	9301      	str	r3, [sp, #4]
 80124ae:	23f0      	movs	r3, #240	; 0xf0
 80124b0:	9300      	str	r3, [sp, #0]
 80124b2:	4b10      	ldr	r3, [pc, #64]	; (80124f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80124b4:	4a11      	ldr	r2, [pc, #68]	; (80124fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80124b6:	4910      	ldr	r1, [pc, #64]	; (80124f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80124b8:	4811      	ldr	r0, [pc, #68]	; (8012500 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80124ba:	f7ff fea9 	bl	8012210 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d113      	bne.n	80124ec <_Z41__static_initialization_and_destruction_0ii+0x70>
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d10e      	bne.n	80124ec <_Z41__static_initialization_and_destruction_0ii+0x70>
 80124ce:	480c      	ldr	r0, [pc, #48]	; (8012500 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80124d0:	f7fe feee 	bl	80112b0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80124d4:	480b      	ldr	r0, [pc, #44]	; (8012504 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80124d6:	f7fb fca1 	bl	800de1c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80124da:	4808      	ldr	r0, [pc, #32]	; (80124fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80124dc:	f7ff ffac 	bl	8012438 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 80124e0:	4805      	ldr	r0, [pc, #20]	; (80124f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80124e2:	f7ff f8d3 	bl	801168c <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 80124e6:	4803      	ldr	r0, [pc, #12]	; (80124f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80124e8:	f7fe fc82 	bl	8010df0 <_ZN20STM32TouchControllerD1Ev>
}
 80124ec:	bf00      	nop
 80124ee:	3708      	adds	r7, #8
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}
 80124f4:	20009334 	.word	0x20009334
 80124f8:	20009338 	.word	0x20009338
 80124fc:	20009f58 	.word	0x20009f58
 8012500:	20009fd4 	.word	0x20009fd4
 8012504:	2000009c 	.word	0x2000009c

08012508 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8012510:	2301      	movs	r3, #1
    }
 8012512:	4618      	mov	r0, r3
 8012514:	370c      	adds	r7, #12
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr

0801251e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 801251e:	b480      	push	{r7}
 8012520:	b083      	sub	sp, #12
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8012526:	230c      	movs	r3, #12
    }
 8012528:	4618      	mov	r0, r3
 801252a:	370c      	adds	r7, #12
 801252c:	46bd      	mov	sp, r7
 801252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012532:	4770      	bx	lr

08012534 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	460b      	mov	r3, r1
 801253e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012540:	887a      	ldrh	r2, [r7, #2]
 8012542:	4613      	mov	r3, r2
 8012544:	005b      	lsls	r3, r3, #1
 8012546:	4413      	add	r3, r2
 8012548:	009b      	lsls	r3, r3, #2
 801254a:	3308      	adds	r3, #8
 801254c:	687a      	ldr	r2, [r7, #4]
 801254e:	4413      	add	r3, r2
    }
 8012550:	4618      	mov	r0, r3
 8012552:	370c      	adds	r7, #12
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr

0801255c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 801255c:	b480      	push	{r7}
 801255e:	b083      	sub	sp, #12
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	460b      	mov	r3, r1
 8012566:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012568:	887a      	ldrh	r2, [r7, #2]
 801256a:	4613      	mov	r3, r2
 801256c:	005b      	lsls	r3, r3, #1
 801256e:	4413      	add	r3, r2
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	3308      	adds	r3, #8
 8012574:	687a      	ldr	r2, [r7, #4]
 8012576:	4413      	add	r3, r2
    }
 8012578:	4618      	mov	r0, r3
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8012584:	b480      	push	{r7}
 8012586:	b083      	sub	sp, #12
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801258c:	2301      	movs	r3, #1
    }
 801258e:	4618      	mov	r0, r3
 8012590:	370c      	adds	r7, #12
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr

0801259a <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801259a:	b480      	push	{r7}
 801259c:	b083      	sub	sp, #12
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80125a2:	f44f 7349 	mov.w	r3, #804	; 0x324
    }
 80125a6:	4618      	mov	r0, r3
 80125a8:	370c      	adds	r7, #12
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr

080125b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80125b2:	b480      	push	{r7}
 80125b4:	b083      	sub	sp, #12
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
 80125ba:	460b      	mov	r3, r1
 80125bc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80125be:	887b      	ldrh	r3, [r7, #2]
 80125c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80125c4:	fb02 f303 	mul.w	r3, r2, r3
 80125c8:	3308      	adds	r3, #8
 80125ca:	687a      	ldr	r2, [r7, #4]
 80125cc:	4413      	add	r3, r2
    }
 80125ce:	4618      	mov	r0, r3
 80125d0:	370c      	adds	r7, #12
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr

080125da <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80125da:	b480      	push	{r7}
 80125dc:	b083      	sub	sp, #12
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	460b      	mov	r3, r1
 80125e4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80125e6:	887b      	ldrh	r3, [r7, #2]
 80125e8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80125ec:	fb02 f303 	mul.w	r3, r2, r3
 80125f0:	3308      	adds	r3, #8
 80125f2:	687a      	ldr	r2, [r7, #4]
 80125f4:	4413      	add	r3, r2
    }
 80125f6:	4618      	mov	r0, r3
 80125f8:	370c      	adds	r7, #12
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr

08012602 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8012602:	b480      	push	{r7}
 8012604:	b083      	sub	sp, #12
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801260a:	2301      	movs	r3, #1
    }
 801260c:	4618      	mov	r0, r3
 801260e:	370c      	adds	r7, #12
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr

08012618 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012620:	2310      	movs	r3, #16
    }
 8012622:	4618      	mov	r0, r3
 8012624:	370c      	adds	r7, #12
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr

0801262e <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801262e:	b480      	push	{r7}
 8012630:	b083      	sub	sp, #12
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
 8012636:	460b      	mov	r3, r1
 8012638:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801263a:	887b      	ldrh	r3, [r7, #2]
 801263c:	011b      	lsls	r3, r3, #4
 801263e:	3308      	adds	r3, #8
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	4413      	add	r3, r2
    }
 8012644:	4618      	mov	r0, r3
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	460b      	mov	r3, r1
 801265a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801265c:	887b      	ldrh	r3, [r7, #2]
 801265e:	011b      	lsls	r3, r3, #4
 8012660:	3308      	adds	r3, #8
 8012662:	687a      	ldr	r2, [r7, #4]
 8012664:	4413      	add	r3, r2
    }
 8012666:	4618      	mov	r0, r3
 8012668:	370c      	adds	r7, #12
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr

08012672 <_GLOBAL__sub_I_touchgfx_init>:
 8012672:	b580      	push	{r7, lr}
 8012674:	af00      	add	r7, sp, #0
 8012676:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801267a:	2001      	movs	r0, #1
 801267c:	f7ff fefe 	bl	801247c <_Z41__static_initialization_and_destruction_0ii>
 8012680:	bd80      	pop	{r7, pc}

08012682 <_GLOBAL__sub_D_touchgfx_init>:
 8012682:	b580      	push	{r7, lr}
 8012684:	af00      	add	r7, sp, #0
 8012686:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801268a:	2000      	movs	r0, #0
 801268c:	f7ff fef6 	bl	801247c <_Z41__static_initialization_and_destruction_0ii>
 8012690:	bd80      	pop	{r7, pc}

08012692 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8012692:	b580      	push	{r7, lr}
 8012694:	b082      	sub	sp, #8
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	3318      	adds	r3, #24
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	4798      	blx	r3
    }
 80126a6:	bf00      	nop
 80126a8:	3708      	adds	r7, #8
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}

080126ae <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80126ae:	b480      	push	{r7}
 80126b0:	b083      	sub	sp, #12
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	6078      	str	r0, [r7, #4]
 80126b6:	460b      	mov	r3, r1
 80126b8:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	78fa      	ldrb	r2, [r7, #3]
 80126be:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80126c2:	bf00      	nop
 80126c4:	370c      	adds	r7, #12
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr

080126ce <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80126ce:	b480      	push	{r7}
 80126d0:	b083      	sub	sp, #12
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80126dc:	3301      	adds	r3, #1
 80126de:	b2da      	uxtb	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80126e6:	bf00      	nop
 80126e8:	370c      	adds	r7, #12
 80126ea:	46bd      	mov	sp, r7
 80126ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f0:	4770      	bx	lr
	...

080126f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	460b      	mov	r3, r1
 80126fe:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8012700:	78fb      	ldrb	r3, [r7, #3]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d002      	beq.n	801270c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8012706:	78fb      	ldrb	r3, [r7, #3]
 8012708:	2b02      	cmp	r3, #2
 801270a:	d105      	bne.n	8012718 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	78fa      	ldrb	r2, [r7, #3]
 8012710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8012714:	2301      	movs	r3, #1
 8012716:	e027      	b.n	8012768 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8012718:	78fb      	ldrb	r3, [r7, #3]
 801271a:	2b01      	cmp	r3, #1
 801271c:	d123      	bne.n	8012766 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012722:	2b00      	cmp	r3, #0
 8012724:	d014      	beq.n	8012750 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	3380      	adds	r3, #128	; 0x80
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	4798      	blx	r3
 8012732:	4603      	mov	r3, r0
 8012734:	461a      	mov	r2, r3
 8012736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801273a:	429a      	cmp	r2, r3
 801273c:	d008      	beq.n	8012750 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801273e:	4b0c      	ldr	r3, [pc, #48]	; (8012770 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	f083 0301 	eor.w	r3, r3, #1
 8012746:	b2db      	uxtb	r3, r3
 8012748:	2b00      	cmp	r3, #0
 801274a:	d001      	beq.n	8012750 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801274c:	2301      	movs	r3, #1
 801274e:	e000      	b.n	8012752 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8012750:	2300      	movs	r3, #0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d005      	beq.n	8012762 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	78fa      	ldrb	r2, [r7, #3]
 801275a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801275e:	2301      	movs	r3, #1
 8012760:	e002      	b.n	8012768 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8012762:	2300      	movs	r3, #0
 8012764:	e000      	b.n	8012768 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8012766:	2300      	movs	r3, #0
    }
 8012768:	4618      	mov	r0, r3
 801276a:	3708      	adds	r7, #8
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}
 8012770:	2000a05e 	.word	0x2000a05e

08012774 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8012774:	b480      	push	{r7}
 8012776:	b083      	sub	sp, #12
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	683a      	ldr	r2, [r7, #0]
 8012782:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8012784:	bf00      	nop
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr

08012790 <__NVIC_EnableIRQ>:
{
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
 8012796:	4603      	mov	r3, r0
 8012798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	db0b      	blt.n	80127ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80127a2:	79fb      	ldrb	r3, [r7, #7]
 80127a4:	f003 021f 	and.w	r2, r3, #31
 80127a8:	4907      	ldr	r1, [pc, #28]	; (80127c8 <__NVIC_EnableIRQ+0x38>)
 80127aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127ae:	095b      	lsrs	r3, r3, #5
 80127b0:	2001      	movs	r0, #1
 80127b2:	fa00 f202 	lsl.w	r2, r0, r2
 80127b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80127ba:	bf00      	nop
 80127bc:	370c      	adds	r7, #12
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	e000e100 	.word	0xe000e100

080127cc <__NVIC_DisableIRQ>:
{
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	4603      	mov	r3, r0
 80127d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80127d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	db12      	blt.n	8012804 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80127de:	79fb      	ldrb	r3, [r7, #7]
 80127e0:	f003 021f 	and.w	r2, r3, #31
 80127e4:	490a      	ldr	r1, [pc, #40]	; (8012810 <__NVIC_DisableIRQ+0x44>)
 80127e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127ea:	095b      	lsrs	r3, r3, #5
 80127ec:	2001      	movs	r0, #1
 80127ee:	fa00 f202 	lsl.w	r2, r0, r2
 80127f2:	3320      	adds	r3, #32
 80127f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80127f8:	f3bf 8f4f 	dsb	sy
}
 80127fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80127fe:	f3bf 8f6f 	isb	sy
}
 8012802:	bf00      	nop
}
 8012804:	bf00      	nop
 8012806:	370c      	adds	r7, #12
 8012808:	46bd      	mov	sp, r7
 801280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280e:	4770      	bx	lr
 8012810:	e000e100 	.word	0xe000e100

08012814 <__NVIC_SetPriority>:
{
 8012814:	b480      	push	{r7}
 8012816:	b083      	sub	sp, #12
 8012818:	af00      	add	r7, sp, #0
 801281a:	4603      	mov	r3, r0
 801281c:	6039      	str	r1, [r7, #0]
 801281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012824:	2b00      	cmp	r3, #0
 8012826:	db0a      	blt.n	801283e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	b2da      	uxtb	r2, r3
 801282c:	490c      	ldr	r1, [pc, #48]	; (8012860 <__NVIC_SetPriority+0x4c>)
 801282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012832:	0112      	lsls	r2, r2, #4
 8012834:	b2d2      	uxtb	r2, r2
 8012836:	440b      	add	r3, r1
 8012838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801283c:	e00a      	b.n	8012854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	b2da      	uxtb	r2, r3
 8012842:	4908      	ldr	r1, [pc, #32]	; (8012864 <__NVIC_SetPriority+0x50>)
 8012844:	79fb      	ldrb	r3, [r7, #7]
 8012846:	f003 030f 	and.w	r3, r3, #15
 801284a:	3b04      	subs	r3, #4
 801284c:	0112      	lsls	r2, r2, #4
 801284e:	b2d2      	uxtb	r2, r2
 8012850:	440b      	add	r3, r1
 8012852:	761a      	strb	r2, [r3, #24]
}
 8012854:	bf00      	nop
 8012856:	370c      	adds	r7, #12
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr
 8012860:	e000e100 	.word	0xe000e100
 8012864:	e000ed00 	.word	0xe000ed00

08012868 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8012868:	b5b0      	push	{r4, r5, r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	4618      	mov	r0, r3
 8012874:	f001 f896 	bl	80139a4 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8012878:	687d      	ldr	r5, [r7, #4]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	334c      	adds	r3, #76	; 0x4c
 8012880:	681c      	ldr	r4, [r3, #0]
 8012882:	f003 fcfb 	bl	801627c <_ZN8touchgfx11Application11getInstanceEv>
 8012886:	4603      	mov	r3, r0
 8012888:	4619      	mov	r1, r3
 801288a:	4628      	mov	r0, r5
 801288c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	490d      	ldr	r1, [pc, #52]	; (80128c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8012892:	4618      	mov	r0, r3
 8012894:	f7ff ff6e 	bl	8012774 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2101      	movs	r1, #1
 801289c:	4618      	mov	r0, r3
 801289e:	f7ff ff29 	bl	80126f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	3370      	adds	r3, #112	; 0x70
 80128aa:	681c      	ldr	r4, [r3, #0]
 80128ac:	2300      	movs	r3, #0
 80128ae:	2200      	movs	r2, #0
 80128b0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80128b4:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2101      	movs	r1, #1
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7ff fef7 	bl	80126ae <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80128c0:	bf00      	nop
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bdb0      	pop	{r4, r5, r7, pc}
 80128c8:	08011405 	.word	0x08011405

080128cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80128d4:	2109      	movs	r1, #9
 80128d6:	205a      	movs	r0, #90	; 0x5a
 80128d8:	f7ff ff9c 	bl	8012814 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80128dc:	2109      	movs	r1, #9
 80128de:	2058      	movs	r0, #88	; 0x58
 80128e0:	f7ff ff98 	bl	8012814 <__NVIC_SetPriority>
}
 80128e4:	bf00      	nop
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80128f4:	205a      	movs	r0, #90	; 0x5a
 80128f6:	f7ff ff4b 	bl	8012790 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80128fa:	2058      	movs	r0, #88	; 0x58
 80128fc:	f7ff ff48 	bl	8012790 <__NVIC_EnableIRQ>
}
 8012900:	bf00      	nop
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012910:	205a      	movs	r0, #90	; 0x5a
 8012912:	f7ff ff5b 	bl	80127cc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8012916:	2058      	movs	r0, #88	; 0x58
 8012918:	f7ff ff58 	bl	80127cc <__NVIC_DisableIRQ>
}
 801291c:	bf00      	nop
 801291e:	3708      	adds	r7, #8
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801292c:	4b11      	ldr	r3, [pc, #68]	; (8012974 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	b29b      	uxth	r3, r3
 8012932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012936:	b29b      	uxth	r3, r3
 8012938:	3b01      	subs	r3, #1
 801293a:	b29a      	uxth	r2, r3
 801293c:	4b0e      	ldr	r3, [pc, #56]	; (8012978 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801293e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8012940:	4b0c      	ldr	r3, [pc, #48]	; (8012974 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012942:	691b      	ldr	r3, [r3, #16]
 8012944:	b29b      	uxth	r3, r3
 8012946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801294a:	b29b      	uxth	r3, r3
 801294c:	3b01      	subs	r3, #1
 801294e:	b29a      	uxth	r2, r3
 8012950:	4b0a      	ldr	r3, [pc, #40]	; (801297c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8012952:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8012954:	4b08      	ldr	r3, [pc, #32]	; (8012978 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8012956:	881a      	ldrh	r2, [r3, #0]
 8012958:	4b06      	ldr	r3, [pc, #24]	; (8012974 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801295a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801295c:	4b05      	ldr	r3, [pc, #20]	; (8012974 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012960:	4a04      	ldr	r2, [pc, #16]	; (8012974 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012962:	f043 0301 	orr.w	r3, r3, #1
 8012966:	6353      	str	r3, [r2, #52]	; 0x34
}
 8012968:	bf00      	nop
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr
 8012974:	40016800 	.word	0x40016800
 8012978:	2000a050 	.word	0x2000a050
 801297c:	2000a052 	.word	0x2000a052

08012980 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8012988:	4b03      	ldr	r3, [pc, #12]	; (8012998 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801298c:	4618      	mov	r0, r3
 801298e:	370c      	adds	r7, #12
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr
 8012998:	40016884 	.word	0x40016884

0801299c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801299c:	b480      	push	{r7}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80129a6:	4a06      	ldr	r2, [pc, #24]	; (80129c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80129ac:	4b05      	ldr	r3, [pc, #20]	; (80129c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80129ae:	2201      	movs	r2, #1
 80129b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80129b2:	bf00      	nop
 80129b4:	370c      	adds	r7, #12
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop
 80129c0:	40016884 	.word	0x40016884
 80129c4:	40016800 	.word	0x40016800

080129c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6839      	ldr	r1, [r7, #0]
 80129d6:	4618      	mov	r0, r3
 80129d8:	f000 fcdf 	bl	801339a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80129dc:	bf00      	nop
 80129de:	3708      	adds	r7, #8
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b084      	sub	sp, #16
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	60f8      	str	r0, [r7, #12]
 80129ec:	60b9      	str	r1, [r7, #8]
 80129ee:	607a      	str	r2, [r7, #4]
 80129f0:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 80129f2:	68f8      	ldr	r0, [r7, #12]
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	68b9      	ldr	r1, [r7, #8]
 80129fa:	f000 fe02 	bl	8013602 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80129fe:	4603      	mov	r3, r0
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3710      	adds	r7, #16
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}

08012a08 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8012a10:	4b0d      	ldr	r3, [pc, #52]	; (8012a48 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8012a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a14:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8012a16:	4b0c      	ldr	r3, [pc, #48]	; (8012a48 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	3301      	adds	r3, #1
 8012a24:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8012a26:	89fa      	ldrh	r2, [r7, #14]
 8012a28:	89bb      	ldrh	r3, [r7, #12]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d304      	bcc.n	8012a38 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8012a2e:	89fa      	ldrh	r2, [r7, #14]
 8012a30:	89bb      	ldrh	r3, [r7, #12]
 8012a32:	1ad3      	subs	r3, r2, r3
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	e000      	b.n	8012a3a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8012a38:	2300      	movs	r3, #0
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3714      	adds	r7, #20
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr
 8012a46:	bf00      	nop
 8012a48:	40016800 	.word	0x40016800

08012a4c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b082      	sub	sp, #8
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8012a54:	4b1a      	ldr	r3, [pc, #104]	; (8012ac0 <HAL_LTDC_LineEventCallback+0x74>)
 8012a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a58:	4a1a      	ldr	r2, [pc, #104]	; (8012ac4 <HAL_LTDC_LineEventCallback+0x78>)
 8012a5a:	8812      	ldrh	r2, [r2, #0]
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	bf0c      	ite	eq
 8012a60:	2301      	moveq	r3, #1
 8012a62:	2300      	movne	r3, #0
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d017      	beq.n	8012a9a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8012a6a:	4b17      	ldr	r3, [pc, #92]	; (8012ac8 <HAL_LTDC_LineEventCallback+0x7c>)
 8012a6c:	881b      	ldrh	r3, [r3, #0]
 8012a6e:	4619      	mov	r1, r3
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f7f5 f899 	bl	8007ba8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8012a76:	f7fb fd35 	bl	800e4e4 <_ZN8touchgfx3HAL11getInstanceEv>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7ff fe26 	bl	80126ce <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8012a82:	f7fe fc9f 	bl	80113c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8012a86:	f7fb fd2d 	bl	800e4e4 <_ZN8touchgfx3HAL11getInstanceEv>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f001 fa11 	bl	8013eb4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8012a92:	2000      	movs	r0, #0
 8012a94:	f7fe f9ce 	bl	8010e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8012a98:	e00e      	b.n	8012ab8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8012a9a:	4b0a      	ldr	r3, [pc, #40]	; (8012ac4 <HAL_LTDC_LineEventCallback+0x78>)
 8012a9c:	881b      	ldrh	r3, [r3, #0]
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f7f5 f881 	bl	8007ba8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8012aa6:	2000      	movs	r0, #0
 8012aa8:	f7fe f9cf 	bl	8010e4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8012aac:	f7fb fd1a 	bl	800e4e4 <_ZN8touchgfx3HAL11getInstanceEv>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7ff fded 	bl	8012692 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8012ab8:	bf00      	nop
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	40016800 	.word	0x40016800
 8012ac4:	2000a050 	.word	0x2000a050
 8012ac8:	2000a052 	.word	0x2000a052

08012acc <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012acc:	8880      	ldrh	r0, [r0, #4]
 8012ace:	4770      	bx	lr

08012ad0 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	8083      	strh	r3, [r0, #4]
 8012ad4:	4770      	bx	lr
	...

08012ad8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ada:	6803      	ldr	r3, [r0, #0]
 8012adc:	4605      	mov	r5, r0
 8012ade:	460e      	mov	r6, r1
 8012ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	4798      	blx	r3
 8012ae6:	682b      	ldr	r3, [r5, #0]
 8012ae8:	4604      	mov	r4, r0
 8012aea:	6a1b      	ldr	r3, [r3, #32]
 8012aec:	4628      	mov	r0, r5
 8012aee:	4798      	blx	r3
 8012af0:	88ab      	ldrh	r3, [r5, #4]
 8012af2:	1b34      	subs	r4, r6, r4
 8012af4:	b2a4      	uxth	r4, r4
 8012af6:	fbb4 f4f0 	udiv	r4, r4, r0
 8012afa:	42a3      	cmp	r3, r4
 8012afc:	d805      	bhi.n	8012b0a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8012afe:	4b0e      	ldr	r3, [pc, #56]	; (8012b38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8012b00:	4a0e      	ldr	r2, [pc, #56]	; (8012b3c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012b02:	2120      	movs	r1, #32
 8012b04:	480e      	ldr	r0, [pc, #56]	; (8012b40 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8012b06:	f012 fad5 	bl	80250b4 <__assert_func>
 8012b0a:	682b      	ldr	r3, [r5, #0]
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b10:	4628      	mov	r0, r5
 8012b12:	4798      	blx	r3
 8012b14:	682b      	ldr	r3, [r5, #0]
 8012b16:	4607      	mov	r7, r0
 8012b18:	6a1b      	ldr	r3, [r3, #32]
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	4798      	blx	r3
 8012b1e:	1bf3      	subs	r3, r6, r7
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	fbb3 f2f0 	udiv	r2, r3, r0
 8012b26:	fb02 3010 	mls	r0, r2, r0, r3
 8012b2a:	b118      	cbz	r0, 8012b34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8012b2c:	4b05      	ldr	r3, [pc, #20]	; (8012b44 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8012b2e:	4a03      	ldr	r2, [pc, #12]	; (8012b3c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012b30:	2121      	movs	r1, #33	; 0x21
 8012b32:	e7e7      	b.n	8012b04 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8012b34:	4620      	mov	r0, r4
 8012b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b38:	08028c58 	.word	0x08028c58
 8012b3c:	08028dc6 	.word	0x08028dc6
 8012b40:	08028c6d 	.word	0x08028c6d
 8012b44:	08028c9b 	.word	0x08028c9b

08012b48 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012b48:	b538      	push	{r3, r4, r5, lr}
 8012b4a:	6803      	ldr	r3, [r0, #0]
 8012b4c:	6a1b      	ldr	r3, [r3, #32]
 8012b4e:	460d      	mov	r5, r1
 8012b50:	4604      	mov	r4, r0
 8012b52:	4798      	blx	r3
 8012b54:	4285      	cmp	r5, r0
 8012b56:	d905      	bls.n	8012b64 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8012b58:	4b0c      	ldr	r3, [pc, #48]	; (8012b8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8012b5a:	4a0d      	ldr	r2, [pc, #52]	; (8012b90 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012b5c:	2132      	movs	r1, #50	; 0x32
 8012b5e:	480d      	ldr	r0, [pc, #52]	; (8012b94 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8012b60:	f012 faa8 	bl	80250b4 <__assert_func>
 8012b64:	6823      	ldr	r3, [r4, #0]
 8012b66:	88a5      	ldrh	r5, [r4, #4]
 8012b68:	69db      	ldr	r3, [r3, #28]
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	4798      	blx	r3
 8012b6e:	4285      	cmp	r5, r0
 8012b70:	d303      	bcc.n	8012b7a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8012b72:	4b09      	ldr	r3, [pc, #36]	; (8012b98 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8012b74:	4a06      	ldr	r2, [pc, #24]	; (8012b90 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012b76:	2133      	movs	r1, #51	; 0x33
 8012b78:	e7f1      	b.n	8012b5e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8012b7a:	6823      	ldr	r3, [r4, #0]
 8012b7c:	88a1      	ldrh	r1, [r4, #4]
 8012b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b80:	4620      	mov	r0, r4
 8012b82:	4798      	blx	r3
 8012b84:	88a3      	ldrh	r3, [r4, #4]
 8012b86:	3301      	adds	r3, #1
 8012b88:	80a3      	strh	r3, [r4, #4]
 8012b8a:	bd38      	pop	{r3, r4, r5, pc}
 8012b8c:	08028d15 	.word	0x08028d15
 8012b90:	08028e09 	.word	0x08028e09
 8012b94:	08028c6d 	.word	0x08028c6d
 8012b98:	08028d2c 	.word	0x08028d2c

08012b9c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012b9c:	b570      	push	{r4, r5, r6, lr}
 8012b9e:	6803      	ldr	r3, [r0, #0]
 8012ba0:	6a1b      	ldr	r3, [r3, #32]
 8012ba2:	4616      	mov	r6, r2
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	460d      	mov	r5, r1
 8012ba8:	4798      	blx	r3
 8012baa:	4286      	cmp	r6, r0
 8012bac:	d905      	bls.n	8012bba <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8012bae:	4b06      	ldr	r3, [pc, #24]	; (8012bc8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8012bb0:	4a06      	ldr	r2, [pc, #24]	; (8012bcc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8012bb2:	4807      	ldr	r0, [pc, #28]	; (8012bd0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8012bb4:	213c      	movs	r1, #60	; 0x3c
 8012bb6:	f012 fa7d 	bl	80250b4 <__assert_func>
 8012bba:	6823      	ldr	r3, [r4, #0]
 8012bbc:	4629      	mov	r1, r5
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bc6:	4718      	bx	r3
 8012bc8:	08028d15 	.word	0x08028d15
 8012bcc:	08028d7c 	.word	0x08028d7c
 8012bd0:	08028c6d 	.word	0x08028c6d

08012bd4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012bd4:	4770      	bx	lr
	...

08012bd8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012bd8:	4a02      	ldr	r2, [pc, #8]	; (8012be4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012bda:	6002      	str	r2, [r0, #0]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	8082      	strh	r2, [r0, #4]
 8012be0:	4770      	bx	lr
 8012be2:	bf00      	nop
 8012be4:	08028d50 	.word	0x08028d50

08012be8 <_ZN8touchgfx9Container13getFirstChildEv>:
 8012be8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012bea:	4770      	bx	lr

08012bec <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 8012bec:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 8012bf0:	4770      	bx	lr

08012bf2 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8012bf2:	8101      	strh	r1, [r0, #8]
 8012bf4:	8781      	strh	r1, [r0, #60]	; 0x3c
 8012bf6:	4770      	bx	lr

08012bf8 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8012bf8:	8141      	strh	r1, [r0, #10]
 8012bfa:	87c1      	strh	r1, [r0, #62]	; 0x3e
 8012bfc:	4770      	bx	lr

08012bfe <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8012bfe:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 8012c02:	4770      	bx	lr

08012c04 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8012c04:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8012c08:	4770      	bx	lr

08012c0a <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8012c0a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8012c0c:	4770      	bx	lr

08012c0e <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8012c0e:	6641      	str	r1, [r0, #100]	; 0x64
 8012c10:	3034      	adds	r0, #52	; 0x34
 8012c12:	f004 ba8e 	b.w	8017132 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08012c18 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8012c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c1c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8012c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c24:	4293      	cmp	r3, r2
 8012c26:	4605      	mov	r5, r0
 8012c28:	d026      	beq.n	8012c78 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x60>
 8012c2a:	6802      	ldr	r2, [r0, #0]
 8012c2c:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8012c30:	6d56      	ldr	r6, [r2, #84]	; 0x54
 8012c32:	4a12      	ldr	r2, [pc, #72]	; (8012c7c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x64>)
 8012c34:	6812      	ldr	r2, [r2, #0]
 8012c36:	b28c      	uxth	r4, r1
 8012c38:	b92a      	cbnz	r2, 8012c46 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x2e>
 8012c3a:	4b11      	ldr	r3, [pc, #68]	; (8012c80 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x68>)
 8012c3c:	4a11      	ldr	r2, [pc, #68]	; (8012c84 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 8012c3e:	21b1      	movs	r1, #177	; 0xb1
 8012c40:	4811      	ldr	r0, [pc, #68]	; (8012c88 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x70>)
 8012c42:	f012 fa37 	bl	80250b4 <__assert_func>
 8012c46:	4911      	ldr	r1, [pc, #68]	; (8012c8c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x74>)
 8012c48:	8809      	ldrh	r1, [r1, #0]
 8012c4a:	4299      	cmp	r1, r3
 8012c4c:	d803      	bhi.n	8012c56 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x3e>
 8012c4e:	4b10      	ldr	r3, [pc, #64]	; (8012c90 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x78>)
 8012c50:	4a0c      	ldr	r2, [pc, #48]	; (8012c84 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 8012c52:	21b2      	movs	r1, #178	; 0xb2
 8012c54:	e7f4      	b.n	8012c40 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x28>
 8012c56:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012c5a:	4b0e      	ldr	r3, [pc, #56]	; (8012c94 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x7c>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012c62:	6803      	ldr	r3, [r0, #0]
 8012c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c66:	4798      	blx	r3
 8012c68:	1a22      	subs	r2, r4, r0
 8012c6a:	4639      	mov	r1, r7
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	4633      	mov	r3, r6
 8012c70:	b212      	sxth	r2, r2
 8012c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c76:	4718      	bx	r3
 8012c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c7c:	2000a0b0 	.word	0x2000a0b0
 8012c80:	08028e9b 	.word	0x08028e9b
 8012c84:	08029010 	.word	0x08029010
 8012c88:	08028edd 	.word	0x08028edd
 8012c8c:	2000a0b4 	.word	0x2000a0b4
 8012c90:	08028f06 	.word	0x08028f06
 8012c94:	2000a0b8 	.word	0x2000a0b8

08012c98 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8012c98:	b513      	push	{r0, r1, r4, lr}
 8012c9a:	4b08      	ldr	r3, [pc, #32]	; (8012cbc <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE+0x24>)
 8012c9c:	9300      	str	r3, [sp, #0]
 8012c9e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8012ca2:	888b      	ldrh	r3, [r1, #4]
 8012ca4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012ca8:	4669      	mov	r1, sp
 8012caa:	4620      	mov	r0, r4
 8012cac:	f001 fc57 	bl	801455e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f004 fa3e 	bl	8017132 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012cb6:	b002      	add	sp, #8
 8012cb8:	bd10      	pop	{r4, pc}
 8012cba:	bf00      	nop
 8012cbc:	0802848c 	.word	0x0802848c

08012cc0 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8012cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cc4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8012cc8:	b085      	sub	sp, #20
 8012cca:	4604      	mov	r4, r0
 8012ccc:	b9fb      	cbnz	r3, 8012d0e <_ZN8touchgfx12DigitalClock11updateClockEv+0x4e>
 8012cce:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8012cd2:	4a3f      	ldr	r2, [pc, #252]	; (8012dd0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x110>)
 8012cd4:	4e3f      	ldr	r6, [pc, #252]	; (8012dd4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x114>)
 8012cd6:	f100 0574 	add.w	r5, r0, #116	; 0x74
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	bf08      	it	eq
 8012cde:	4616      	moveq	r6, r2
 8012ce0:	f000 f961 	bl	8012fa6 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8012ce4:	4607      	mov	r7, r0
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f000 f970 	bl	8012fcc <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8012cec:	4680      	mov	r8, r0
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f000 f965 	bl	8012fbe <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	bf14      	ite	ne
 8012cf8:	2341      	movne	r3, #65	; 0x41
 8012cfa:	2350      	moveq	r3, #80	; 0x50
 8012cfc:	e9cd 8300 	strd	r8, r3, [sp]
 8012d00:	4632      	mov	r2, r6
 8012d02:	463b      	mov	r3, r7
 8012d04:	210c      	movs	r1, #12
 8012d06:	4628      	mov	r0, r5
 8012d08:	f006 f9e2 	bl	80190d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012d0c:	e016      	b.n	8012d3c <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 8012d0e:	2b01      	cmp	r3, #1
 8012d10:	d11b      	bne.n	8012d4a <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8012d12:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8012d16:	4a30      	ldr	r2, [pc, #192]	; (8012dd8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x118>)
 8012d18:	4d30      	ldr	r5, [pc, #192]	; (8012ddc <_ZN8touchgfx12DigitalClock11updateClockEv+0x11c>)
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	bf08      	it	eq
 8012d1e:	4615      	moveq	r5, r2
 8012d20:	f000 f93e 	bl	8012fa0 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8012d24:	4606      	mov	r6, r0
 8012d26:	4620      	mov	r0, r4
 8012d28:	f000 f950 	bl	8012fcc <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8012d2c:	4633      	mov	r3, r6
 8012d2e:	9000      	str	r0, [sp, #0]
 8012d30:	462a      	mov	r2, r5
 8012d32:	210c      	movs	r1, #12
 8012d34:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8012d38:	f006 f9ca 	bl	80190d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012d3c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8012d40:	b005      	add	sp, #20
 8012d42:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d46:	f004 b9f4 	b.w	8017132 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012d4a:	2b02      	cmp	r3, #2
 8012d4c:	d125      	bne.n	8012d9a <_ZN8touchgfx12DigitalClock11updateClockEv+0xda>
 8012d4e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8012d52:	4a23      	ldr	r2, [pc, #140]	; (8012de0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 8012d54:	4e23      	ldr	r6, [pc, #140]	; (8012de4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8012d56:	f100 0574 	add.w	r5, r0, #116	; 0x74
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	bf08      	it	eq
 8012d5e:	4616      	moveq	r6, r2
 8012d60:	f000 f921 	bl	8012fa6 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8012d64:	4607      	mov	r7, r0
 8012d66:	4620      	mov	r0, r4
 8012d68:	f000 f930 	bl	8012fcc <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8012d6c:	4680      	mov	r8, r0
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f000 f92f 	bl	8012fd2 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8012d74:	4681      	mov	r9, r0
 8012d76:	4620      	mov	r0, r4
 8012d78:	f000 f921 	bl	8012fbe <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	bf14      	ite	ne
 8012d80:	2341      	movne	r3, #65	; 0x41
 8012d82:	2350      	moveq	r3, #80	; 0x50
 8012d84:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012d88:	f8cd 8000 	str.w	r8, [sp]
 8012d8c:	463b      	mov	r3, r7
 8012d8e:	4632      	mov	r2, r6
 8012d90:	210c      	movs	r1, #12
 8012d92:	4628      	mov	r0, r5
 8012d94:	f006 f99c 	bl	80190d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012d98:	e7d0      	b.n	8012d3c <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 8012d9a:	2b03      	cmp	r3, #3
 8012d9c:	d1ce      	bne.n	8012d3c <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 8012d9e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8012da2:	4a11      	ldr	r2, [pc, #68]	; (8012de8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8012da4:	4d11      	ldr	r5, [pc, #68]	; (8012dec <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	bf08      	it	eq
 8012daa:	4615      	moveq	r5, r2
 8012dac:	f000 f8f8 	bl	8012fa0 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8012db0:	4606      	mov	r6, r0
 8012db2:	4620      	mov	r0, r4
 8012db4:	f000 f90a 	bl	8012fcc <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8012db8:	4607      	mov	r7, r0
 8012dba:	4620      	mov	r0, r4
 8012dbc:	f000 f909 	bl	8012fd2 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8012dc0:	4633      	mov	r3, r6
 8012dc2:	e9cd 7000 	strd	r7, r0, [sp]
 8012dc6:	462a      	mov	r2, r5
 8012dc8:	210c      	movs	r1, #12
 8012dca:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8012dce:	e79b      	b.n	8012d08 <_ZN8touchgfx12DigitalClock11updateClockEv+0x48>
 8012dd0:	08028e47 	.word	0x08028e47
 8012dd4:	08028e71 	.word	0x08028e71
 8012dd8:	08028e53 	.word	0x08028e53
 8012ddc:	08028e91 	.word	0x08028e91
 8012de0:	08028e6e 	.word	0x08028e6e
 8012de4:	08028e5b 	.word	0x08028e5b
 8012de8:	08028e8e 	.word	0x08028e8e
 8012dec:	08028e7f 	.word	0x08028e7f

08012df0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8012df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012df2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012df8:	4299      	cmp	r1, r3
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	d02a      	beq.n	8012e54 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8012dfe:	4b16      	ldr	r3, [pc, #88]	; (8012e58 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	b92b      	cbnz	r3, 8012e10 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8012e04:	4b15      	ldr	r3, [pc, #84]	; (8012e5c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8012e06:	4a16      	ldr	r2, [pc, #88]	; (8012e60 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8012e08:	21b1      	movs	r1, #177	; 0xb1
 8012e0a:	4816      	ldr	r0, [pc, #88]	; (8012e64 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8012e0c:	f012 f952 	bl	80250b4 <__assert_func>
 8012e10:	4a15      	ldr	r2, [pc, #84]	; (8012e68 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8012e12:	8812      	ldrh	r2, [r2, #0]
 8012e14:	428a      	cmp	r2, r1
 8012e16:	d803      	bhi.n	8012e20 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8012e18:	4b14      	ldr	r3, [pc, #80]	; (8012e6c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8012e1a:	4a11      	ldr	r2, [pc, #68]	; (8012e60 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8012e1c:	21b2      	movs	r1, #178	; 0xb2
 8012e1e:	e7f4      	b.n	8012e0a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8012e20:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8012e24:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8012e28:	4b11      	ldr	r3, [pc, #68]	; (8012e70 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8012e2a:	7854      	ldrb	r4, [r2, #1]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8012e32:	682b      	ldr	r3, [r5, #0]
 8012e34:	69df      	ldr	r7, [r3, #28]
 8012e36:	4b0f      	ldr	r3, [pc, #60]	; (8012e74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8012e38:	6818      	ldr	r0, [r3, #0]
 8012e3a:	f7fd fad5 	bl	80103e8 <_ZNK8touchgfx5Texts7getTextEt>
 8012e3e:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8012e42:	2300      	movs	r3, #0
 8012e44:	9300      	str	r3, [sp, #0]
 8012e46:	4602      	mov	r2, r0
 8012e48:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8012e4a:	4621      	mov	r1, r4
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	47b8      	blx	r7
 8012e50:	b003      	add	sp, #12
 8012e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e54:	2000      	movs	r0, #0
 8012e56:	e7fb      	b.n	8012e50 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8012e58:	2000a0b0 	.word	0x2000a0b0
 8012e5c:	08028e9b 	.word	0x08028e9b
 8012e60:	08029010 	.word	0x08029010
 8012e64:	08028edd 	.word	0x08028edd
 8012e68:	2000a0b4 	.word	0x2000a0b4
 8012e6c:	08028f06 	.word	0x08028f06
 8012e70:	2000a0b8 	.word	0x2000a0b8
 8012e74:	2000a0bc 	.word	0x2000a0bc

08012e78 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 8012e78:	b508      	push	{r3, lr}
 8012e7a:	3034      	adds	r0, #52	; 0x34
 8012e7c:	f7ff ffb8 	bl	8012df0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 8012e80:	bd08      	pop	{r3, pc}
	...

08012e84 <_ZN8touchgfx12DigitalClockC1Ev>:
 8012e84:	b510      	push	{r4, lr}
 8012e86:	4604      	mov	r4, r0
 8012e88:	f000 f870 	bl	8012f6c <_ZN8touchgfx13AbstractClockC1Ev>
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8012e92:	4a1a      	ldr	r2, [pc, #104]	; (8012efc <_ZN8touchgfx12DigitalClockC1Ev+0x78>)
 8012e94:	65e2      	str	r2, [r4, #92]	; 0x5c
 8012e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e9a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 8012e9e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8012ea2:	66a2      	str	r2, [r4, #104]	; 0x68
 8012ea4:	4b16      	ldr	r3, [pc, #88]	; (8012f00 <_ZN8touchgfx12DigitalClockC1Ev+0x7c>)
 8012ea6:	4a17      	ldr	r2, [pc, #92]	; (8012f04 <_ZN8touchgfx12DigitalClockC1Ev+0x80>)
 8012ea8:	6023      	str	r3, [r4, #0]
 8012eaa:	6362      	str	r2, [r4, #52]	; 0x34
 8012eac:	2303      	movs	r3, #3
 8012eae:	4622      	mov	r2, r4
 8012eb0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8012eba:	8723      	strh	r3, [r4, #56]	; 0x38
 8012ebc:	8763      	strh	r3, [r4, #58]	; 0x3a
 8012ebe:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8012ec0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8012ec2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8012ec6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8012eca:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8012ece:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8012ed2:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ed6:	6523      	str	r3, [r4, #80]	; 0x50
 8012ed8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8012edc:	6663      	str	r3, [r4, #100]	; 0x64
 8012ede:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8012ee2:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8012ee6:	f822 3f74 	strh.w	r3, [r2, #116]!
 8012eea:	4620      	mov	r0, r4
 8012eec:	6722      	str	r2, [r4, #112]	; 0x70
 8012eee:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8012ef2:	f000 f909 	bl	8013108 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	bd10      	pop	{r4, pc}
 8012efa:	bf00      	nop
 8012efc:	0802848c 	.word	0x0802848c
 8012f00:	08028f60 	.word	0x08028f60
 8012f04:	08029ca8 	.word	0x08029ca8

08012f08 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8012f08:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 8012f0c:	4770      	bx	lr

08012f0e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8012f0e:	b470      	push	{r4, r5, r6}
 8012f10:	2518      	movs	r5, #24
 8012f12:	fbb1 f6f5 	udiv	r6, r1, r5
 8012f16:	fb06 1115 	mls	r1, r6, r5, r1
 8012f1a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8012f1e:	213c      	movs	r1, #60	; 0x3c
 8012f20:	fbb2 f5f1 	udiv	r5, r2, r1
 8012f24:	fb05 2211 	mls	r2, r5, r1, r2
 8012f28:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 8012f2c:	fbb3 f2f1 	udiv	r2, r3, r1
 8012f30:	fb02 3311 	mls	r3, r2, r1, r3
 8012f34:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8012f38:	6803      	ldr	r3, [r0, #0]
 8012f3a:	bc70      	pop	{r4, r5, r6}
 8012f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012f40:	4718      	bx	r3

08012f42 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8012f42:	b4f0      	push	{r4, r5, r6, r7}
 8012f44:	6804      	ldr	r4, [r0, #0]
 8012f46:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8012f4a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8012f4e:	2e00      	cmp	r6, #0
 8012f50:	f04f 040c 	mov.w	r4, #12
 8012f54:	fbb1 f7f4 	udiv	r7, r1, r4
 8012f58:	fb07 1114 	mls	r1, r7, r4, r1
 8012f5c:	bf18      	it	ne
 8012f5e:	2400      	movne	r4, #0
 8012f60:	fa54 f181 	uxtab	r1, r4, r1
 8012f64:	46ac      	mov	ip, r5
 8012f66:	b2c9      	uxtb	r1, r1
 8012f68:	bcf0      	pop	{r4, r5, r6, r7}
 8012f6a:	4760      	bx	ip

08012f6c <_ZN8touchgfx13AbstractClockC1Ev>:
 8012f6c:	2101      	movs	r1, #1
 8012f6e:	2200      	movs	r2, #0
 8012f70:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8012f74:	4909      	ldr	r1, [pc, #36]	; (8012f9c <_ZN8touchgfx13AbstractClockC1Ev+0x30>)
 8012f76:	8082      	strh	r2, [r0, #4]
 8012f78:	80c2      	strh	r2, [r0, #6]
 8012f7a:	8102      	strh	r2, [r0, #8]
 8012f7c:	8142      	strh	r2, [r0, #10]
 8012f7e:	8182      	strh	r2, [r0, #12]
 8012f80:	81c2      	strh	r2, [r0, #14]
 8012f82:	8202      	strh	r2, [r0, #16]
 8012f84:	8242      	strh	r2, [r0, #18]
 8012f86:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012f8a:	61c2      	str	r2, [r0, #28]
 8012f8c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8012f90:	6001      	str	r1, [r0, #0]
 8012f92:	6282      	str	r2, [r0, #40]	; 0x28
 8012f94:	8582      	strh	r2, [r0, #44]	; 0x2c
 8012f96:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8012f9a:	4770      	bx	lr
 8012f9c:	08029048 	.word	0x08029048

08012fa0 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8012fa0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8012fa4:	4770      	bx	lr

08012fa6 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8012fa6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8012faa:	220c      	movs	r2, #12
 8012fac:	f100 030b 	add.w	r3, r0, #11
 8012fb0:	fb93 f0f2 	sdiv	r0, r3, r2
 8012fb4:	fb02 3010 	mls	r0, r2, r0, r3
 8012fb8:	3001      	adds	r0, #1
 8012fba:	b2c0      	uxtb	r0, r0
 8012fbc:	4770      	bx	lr

08012fbe <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 8012fbe:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8012fc2:	280b      	cmp	r0, #11
 8012fc4:	bf8c      	ite	hi
 8012fc6:	2000      	movhi	r0, #0
 8012fc8:	2001      	movls	r0, #1
 8012fca:	4770      	bx	lr

08012fcc <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8012fcc:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8012fd0:	4770      	bx	lr

08012fd2 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8012fd2:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8012fd6:	4770      	bx	lr

08012fd8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012fd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012fda:	2000      	movs	r0, #0
 8012fdc:	b12b      	cbz	r3, 8012fea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012fde:	b920      	cbnz	r0, 8012fea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012fe0:	1a5a      	subs	r2, r3, r1
 8012fe2:	4250      	negs	r0, r2
 8012fe4:	4150      	adcs	r0, r2
 8012fe6:	699b      	ldr	r3, [r3, #24]
 8012fe8:	e7f8      	b.n	8012fdc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012fea:	4770      	bx	lr

08012fec <_ZN8touchgfx9Container9removeAllEv>:
 8012fec:	2200      	movs	r2, #0
 8012fee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012ff0:	b123      	cbz	r3, 8012ffc <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012ff2:	6999      	ldr	r1, [r3, #24]
 8012ff4:	6281      	str	r1, [r0, #40]	; 0x28
 8012ff6:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012ffa:	e7f8      	b.n	8012fee <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012ffc:	4770      	bx	lr

08012ffe <_ZN8touchgfx9Container6unlinkEv>:
 8012ffe:	2300      	movs	r3, #0
 8013000:	6283      	str	r3, [r0, #40]	; 0x28
 8013002:	4770      	bx	lr

08013004 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013008:	461f      	mov	r7, r3
 801300a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801300e:	460d      	mov	r5, r1
 8013010:	4616      	mov	r6, r2
 8013012:	b103      	cbz	r3, 8013016 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013014:	6038      	str	r0, [r7, #0]
 8013016:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013018:	b314      	cbz	r4, 8013060 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801301a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801301e:	b1eb      	cbz	r3, 801305c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013020:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013024:	428d      	cmp	r5, r1
 8013026:	db19      	blt.n	801305c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013028:	8923      	ldrh	r3, [r4, #8]
 801302a:	b289      	uxth	r1, r1
 801302c:	440b      	add	r3, r1
 801302e:	b21b      	sxth	r3, r3
 8013030:	429d      	cmp	r5, r3
 8013032:	da13      	bge.n	801305c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013034:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013038:	4296      	cmp	r6, r2
 801303a:	db0f      	blt.n	801305c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801303c:	8963      	ldrh	r3, [r4, #10]
 801303e:	b292      	uxth	r2, r2
 8013040:	4413      	add	r3, r2
 8013042:	b21b      	sxth	r3, r3
 8013044:	429e      	cmp	r6, r3
 8013046:	da09      	bge.n	801305c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013048:	6823      	ldr	r3, [r4, #0]
 801304a:	1ab2      	subs	r2, r6, r2
 801304c:	1a69      	subs	r1, r5, r1
 801304e:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8013052:	b212      	sxth	r2, r2
 8013054:	463b      	mov	r3, r7
 8013056:	b209      	sxth	r1, r1
 8013058:	4620      	mov	r0, r4
 801305a:	47c0      	blx	r8
 801305c:	69a4      	ldr	r4, [r4, #24]
 801305e:	e7db      	b.n	8013018 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013064 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013064:	2200      	movs	r2, #0
 8013066:	8002      	strh	r2, [r0, #0]
 8013068:	8042      	strh	r2, [r0, #2]
 801306a:	8082      	strh	r2, [r0, #4]
 801306c:	80c2      	strh	r2, [r0, #6]
 801306e:	4770      	bx	lr

08013070 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013070:	b570      	push	{r4, r5, r6, lr}
 8013072:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013074:	460d      	mov	r5, r1
 8013076:	4616      	mov	r6, r2
 8013078:	b13c      	cbz	r4, 801308a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801307a:	6823      	ldr	r3, [r4, #0]
 801307c:	4620      	mov	r0, r4
 801307e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013080:	4632      	mov	r2, r6
 8013082:	4629      	mov	r1, r5
 8013084:	4798      	blx	r3
 8013086:	69a4      	ldr	r4, [r4, #24]
 8013088:	e7f6      	b.n	8013078 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801308a:	bd70      	pop	{r4, r5, r6, pc}

0801308c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801308c:	b538      	push	{r3, r4, r5, lr}
 801308e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013090:	460d      	mov	r5, r1
 8013092:	b134      	cbz	r4, 80130a2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013094:	682b      	ldr	r3, [r5, #0]
 8013096:	4621      	mov	r1, r4
 8013098:	689b      	ldr	r3, [r3, #8]
 801309a:	4628      	mov	r0, r5
 801309c:	4798      	blx	r3
 801309e:	69a4      	ldr	r4, [r4, #24]
 80130a0:	e7f7      	b.n	8013092 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80130a2:	bd38      	pop	{r3, r4, r5, pc}

080130a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80130a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80130a6:	b19b      	cbz	r3, 80130d0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80130a8:	428b      	cmp	r3, r1
 80130aa:	d109      	bne.n	80130c0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80130ac:	699a      	ldr	r2, [r3, #24]
 80130ae:	2100      	movs	r1, #0
 80130b0:	6159      	str	r1, [r3, #20]
 80130b2:	6282      	str	r2, [r0, #40]	; 0x28
 80130b4:	b902      	cbnz	r2, 80130b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80130b6:	4770      	bx	lr
 80130b8:	6199      	str	r1, [r3, #24]
 80130ba:	4770      	bx	lr
 80130bc:	4613      	mov	r3, r2
 80130be:	b13a      	cbz	r2, 80130d0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80130c0:	699a      	ldr	r2, [r3, #24]
 80130c2:	428a      	cmp	r2, r1
 80130c4:	d1fa      	bne.n	80130bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80130c6:	698a      	ldr	r2, [r1, #24]
 80130c8:	619a      	str	r2, [r3, #24]
 80130ca:	2300      	movs	r3, #0
 80130cc:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80130d0:	4770      	bx	lr

080130d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80130d2:	b410      	push	{r4}
 80130d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80130d6:	4604      	mov	r4, r0
 80130d8:	b92b      	cbnz	r3, 80130e6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80130da:	6803      	ldr	r3, [r0, #0]
 80130dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80130e2:	4611      	mov	r1, r2
 80130e4:	4718      	bx	r3
 80130e6:	b941      	cbnz	r1, 80130fa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80130e8:	6193      	str	r3, [r2, #24]
 80130ea:	6282      	str	r2, [r0, #40]	; 0x28
 80130ec:	6154      	str	r4, [r2, #20]
 80130ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130f2:	4770      	bx	lr
 80130f4:	4603      	mov	r3, r0
 80130f6:	2800      	cmp	r0, #0
 80130f8:	d0f9      	beq.n	80130ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80130fa:	4299      	cmp	r1, r3
 80130fc:	6998      	ldr	r0, [r3, #24]
 80130fe:	d1f9      	bne.n	80130f4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013100:	6190      	str	r0, [r2, #24]
 8013102:	618a      	str	r2, [r1, #24]
 8013104:	e7f2      	b.n	80130ec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08013108 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013108:	4288      	cmp	r0, r1
 801310a:	b508      	push	{r3, lr}
 801310c:	d105      	bne.n	801311a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801310e:	4b11      	ldr	r3, [pc, #68]	; (8013154 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8013110:	4a11      	ldr	r2, [pc, #68]	; (8013158 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013112:	2123      	movs	r1, #35	; 0x23
 8013114:	4811      	ldr	r0, [pc, #68]	; (801315c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8013116:	f011 ffcd 	bl	80250b4 <__assert_func>
 801311a:	694b      	ldr	r3, [r1, #20]
 801311c:	b11b      	cbz	r3, 8013126 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801311e:	4b10      	ldr	r3, [pc, #64]	; (8013160 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8013120:	4a0d      	ldr	r2, [pc, #52]	; (8013158 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013122:	2124      	movs	r1, #36	; 0x24
 8013124:	e7f6      	b.n	8013114 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013126:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801312a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801312c:	b913      	cbnz	r3, 8013134 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801312e:	6281      	str	r1, [r0, #40]	; 0x28
 8013130:	bd08      	pop	{r3, pc}
 8013132:	4613      	mov	r3, r2
 8013134:	699a      	ldr	r2, [r3, #24]
 8013136:	b12a      	cbz	r2, 8013144 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8013138:	428b      	cmp	r3, r1
 801313a:	d1fa      	bne.n	8013132 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801313c:	4b09      	ldr	r3, [pc, #36]	; (8013164 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801313e:	4a06      	ldr	r2, [pc, #24]	; (8013158 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013140:	2135      	movs	r1, #53	; 0x35
 8013142:	e7e7      	b.n	8013114 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013144:	428b      	cmp	r3, r1
 8013146:	d103      	bne.n	8013150 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8013148:	4b06      	ldr	r3, [pc, #24]	; (8013164 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801314a:	4a03      	ldr	r2, [pc, #12]	; (8013158 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801314c:	2138      	movs	r1, #56	; 0x38
 801314e:	e7e1      	b.n	8013114 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013150:	6199      	str	r1, [r3, #24]
 8013152:	e7ed      	b.n	8013130 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8013154:	080290d4 	.word	0x080290d4
 8013158:	08029224 	.word	0x08029224
 801315c:	08029100 	.word	0x08029100
 8013160:	08029133 	.word	0x08029133
 8013164:	08029169 	.word	0x08029169

08013168 <_ZN8touchgfx4RectaNERKS0_>:
 8013168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801316c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013170:	888c      	ldrh	r4, [r1, #4]
 8013172:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013176:	443c      	add	r4, r7
 8013178:	b2a4      	uxth	r4, r4
 801317a:	fa0f f884 	sxth.w	r8, r4
 801317e:	45c1      	cmp	r9, r8
 8013180:	da2f      	bge.n	80131e2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013182:	8882      	ldrh	r2, [r0, #4]
 8013184:	444a      	add	r2, r9
 8013186:	b292      	uxth	r2, r2
 8013188:	fa0f fe82 	sxth.w	lr, r2
 801318c:	4577      	cmp	r7, lr
 801318e:	da28      	bge.n	80131e2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013190:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013194:	88cb      	ldrh	r3, [r1, #6]
 8013196:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801319a:	442b      	add	r3, r5
 801319c:	b21b      	sxth	r3, r3
 801319e:	429e      	cmp	r6, r3
 80131a0:	da1f      	bge.n	80131e2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80131a2:	88c3      	ldrh	r3, [r0, #6]
 80131a4:	4433      	add	r3, r6
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	fa0f fc83 	sxth.w	ip, r3
 80131ac:	4565      	cmp	r5, ip
 80131ae:	da18      	bge.n	80131e2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80131b0:	454f      	cmp	r7, r9
 80131b2:	bfb8      	it	lt
 80131b4:	464f      	movlt	r7, r9
 80131b6:	42b5      	cmp	r5, r6
 80131b8:	bfb8      	it	lt
 80131ba:	4635      	movlt	r5, r6
 80131bc:	45f0      	cmp	r8, lr
 80131be:	bfd8      	it	le
 80131c0:	4622      	movle	r2, r4
 80131c2:	1bd2      	subs	r2, r2, r7
 80131c4:	8082      	strh	r2, [r0, #4]
 80131c6:	884a      	ldrh	r2, [r1, #2]
 80131c8:	88c9      	ldrh	r1, [r1, #6]
 80131ca:	8007      	strh	r7, [r0, #0]
 80131cc:	440a      	add	r2, r1
 80131ce:	b292      	uxth	r2, r2
 80131d0:	b211      	sxth	r1, r2
 80131d2:	458c      	cmp	ip, r1
 80131d4:	bfa8      	it	ge
 80131d6:	4613      	movge	r3, r2
 80131d8:	1b5b      	subs	r3, r3, r5
 80131da:	80c3      	strh	r3, [r0, #6]
 80131dc:	8045      	strh	r5, [r0, #2]
 80131de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131e2:	2300      	movs	r3, #0
 80131e4:	8003      	strh	r3, [r0, #0]
 80131e6:	8043      	strh	r3, [r0, #2]
 80131e8:	8083      	strh	r3, [r0, #4]
 80131ea:	80c3      	strh	r3, [r0, #6]
 80131ec:	e7f7      	b.n	80131de <_ZN8touchgfx4RectaNERKS0_+0x76>

080131ee <_ZNK8touchgfx4Rect7isEmptyEv>:
 80131ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	dd06      	ble.n	8013204 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80131f6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80131fa:	2800      	cmp	r0, #0
 80131fc:	bfcc      	ite	gt
 80131fe:	2000      	movgt	r0, #0
 8013200:	2001      	movle	r0, #1
 8013202:	4770      	bx	lr
 8013204:	2001      	movs	r0, #1
 8013206:	4770      	bx	lr

08013208 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801320c:	2300      	movs	r3, #0
 801320e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013210:	8003      	strh	r3, [r0, #0]
 8013212:	4604      	mov	r4, r0
 8013214:	8043      	strh	r3, [r0, #2]
 8013216:	8083      	strh	r3, [r0, #4]
 8013218:	80c3      	strh	r3, [r0, #6]
 801321a:	2d00      	cmp	r5, #0
 801321c:	d040      	beq.n	80132a0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801321e:	1d28      	adds	r0, r5, #4
 8013220:	f7ff ffe5 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8013224:	b988      	cbnz	r0, 801324a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013226:	4620      	mov	r0, r4
 8013228:	f7ff ffe1 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801322c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013230:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013234:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013238:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801323c:	b138      	cbz	r0, 801324e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801323e:	8022      	strh	r2, [r4, #0]
 8013240:	8063      	strh	r3, [r4, #2]
 8013242:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013246:	f8a4 c006 	strh.w	ip, [r4, #6]
 801324a:	69ad      	ldr	r5, [r5, #24]
 801324c:	e7e5      	b.n	801321a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801324e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013252:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013256:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801325a:	4290      	cmp	r0, r2
 801325c:	4607      	mov	r7, r0
 801325e:	bfa8      	it	ge
 8013260:	4617      	movge	r7, r2
 8013262:	4472      	add	r2, lr
 8013264:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8013268:	8027      	strh	r7, [r4, #0]
 801326a:	4299      	cmp	r1, r3
 801326c:	460e      	mov	r6, r1
 801326e:	4440      	add	r0, r8
 8013270:	bfa8      	it	ge
 8013272:	461e      	movge	r6, r3
 8013274:	4471      	add	r1, lr
 8013276:	4463      	add	r3, ip
 8013278:	b200      	sxth	r0, r0
 801327a:	b212      	sxth	r2, r2
 801327c:	b209      	sxth	r1, r1
 801327e:	b21b      	sxth	r3, r3
 8013280:	4290      	cmp	r0, r2
 8013282:	bfac      	ite	ge
 8013284:	ebc7 0200 	rsbge	r2, r7, r0
 8013288:	ebc7 0202 	rsblt	r2, r7, r2
 801328c:	4299      	cmp	r1, r3
 801328e:	bfac      	ite	ge
 8013290:	ebc6 0301 	rsbge	r3, r6, r1
 8013294:	ebc6 0303 	rsblt	r3, r6, r3
 8013298:	8066      	strh	r6, [r4, #2]
 801329a:	80a2      	strh	r2, [r4, #4]
 801329c:	80e3      	strh	r3, [r4, #6]
 801329e:	e7d4      	b.n	801324a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80132a0:	4620      	mov	r0, r4
 80132a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80132a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80132aa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80132ae:	b383      	cbz	r3, 8013312 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80132b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80132b2:	b374      	cbz	r4, 8013312 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80132b4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80132b8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80132bc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80132c0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80132c4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80132c8:	b303      	cbz	r3, 801330c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80132ca:	4668      	mov	r0, sp
 80132cc:	1d21      	adds	r1, r4, #4
 80132ce:	f8ad 5000 	strh.w	r5, [sp]
 80132d2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80132d6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80132da:	f8ad 8006 	strh.w	r8, [sp, #6]
 80132de:	f7ff ff43 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 80132e2:	4668      	mov	r0, sp
 80132e4:	f7ff ff83 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 80132e8:	b980      	cbnz	r0, 801330c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80132ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80132ee:	88a2      	ldrh	r2, [r4, #4]
 80132f0:	1a9b      	subs	r3, r3, r2
 80132f2:	f8ad 3000 	strh.w	r3, [sp]
 80132f6:	88e2      	ldrh	r2, [r4, #6]
 80132f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80132fc:	1a9b      	subs	r3, r3, r2
 80132fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013302:	6823      	ldr	r3, [r4, #0]
 8013304:	4669      	mov	r1, sp
 8013306:	689b      	ldr	r3, [r3, #8]
 8013308:	4620      	mov	r0, r4
 801330a:	4798      	blx	r3
 801330c:	69a4      	ldr	r4, [r4, #24]
 801330e:	2c00      	cmp	r4, #0
 8013310:	d1d8      	bne.n	80132c4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8013312:	b002      	add	sp, #8
 8013314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013318 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013318:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801331a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801331e:	460d      	mov	r5, r1
 8013320:	4616      	mov	r6, r2
 8013322:	b323      	cbz	r3, 801336e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013324:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013326:	b314      	cbz	r4, 801336e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013328:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801332c:	b1eb      	cbz	r3, 801336a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801332e:	6828      	ldr	r0, [r5, #0]
 8013330:	6869      	ldr	r1, [r5, #4]
 8013332:	466b      	mov	r3, sp
 8013334:	c303      	stmia	r3!, {r0, r1}
 8013336:	4668      	mov	r0, sp
 8013338:	1d21      	adds	r1, r4, #4
 801333a:	f7ff ff15 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 801333e:	4668      	mov	r0, sp
 8013340:	f7ff ff55 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8013344:	b988      	cbnz	r0, 801336a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013346:	f8bd 3000 	ldrh.w	r3, [sp]
 801334a:	88a2      	ldrh	r2, [r4, #4]
 801334c:	1a9b      	subs	r3, r3, r2
 801334e:	f8ad 3000 	strh.w	r3, [sp]
 8013352:	88e2      	ldrh	r2, [r4, #6]
 8013354:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013358:	1a9b      	subs	r3, r3, r2
 801335a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801335e:	6823      	ldr	r3, [r4, #0]
 8013360:	4632      	mov	r2, r6
 8013362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013364:	4669      	mov	r1, sp
 8013366:	4620      	mov	r0, r4
 8013368:	4798      	blx	r3
 801336a:	69a4      	ldr	r4, [r4, #24]
 801336c:	e7db      	b.n	8013326 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801336e:	b002      	add	sp, #8
 8013370:	bd70      	pop	{r4, r5, r6, pc}

08013372 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8013372:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013376:	4770      	bx	lr

08013378 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8013378:	b513      	push	{r0, r1, r4, lr}
 801337a:	6803      	ldr	r3, [r0, #0]
 801337c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8013380:	2300      	movs	r3, #0
 8013382:	e9cd 3300 	strd	r3, r3, [sp]
 8013386:	466b      	mov	r3, sp
 8013388:	47a0      	blx	r4
 801338a:	b002      	add	sp, #8
 801338c:	bd10      	pop	{r4, pc}

0801338e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801338e:	2301      	movs	r3, #1
 8013390:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013394:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013398:	4770      	bx	lr

0801339a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801339a:	2301      	movs	r3, #1
 801339c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80133a0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80133a4:	4770      	bx	lr

080133a6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80133a6:	6843      	ldr	r3, [r0, #4]
 80133a8:	2201      	movs	r2, #1
 80133aa:	725a      	strb	r2, [r3, #9]
 80133ac:	6840      	ldr	r0, [r0, #4]
 80133ae:	6803      	ldr	r3, [r0, #0]
 80133b0:	691b      	ldr	r3, [r3, #16]
 80133b2:	4718      	bx	r3

080133b4 <_ZN8touchgfx3HAL8flushDMAEv>:
 80133b4:	6840      	ldr	r0, [r0, #4]
 80133b6:	6803      	ldr	r3, [r0, #0]
 80133b8:	689b      	ldr	r3, [r3, #8]
 80133ba:	4718      	bx	r3

080133bc <_ZN8touchgfx3HAL10beginFrameEv>:
 80133bc:	4b04      	ldr	r3, [pc, #16]	; (80133d0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	b123      	cbz	r3, 80133cc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80133c2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80133c6:	f080 0001 	eor.w	r0, r0, #1
 80133ca:	4770      	bx	lr
 80133cc:	2001      	movs	r0, #1
 80133ce:	4770      	bx	lr
 80133d0:	2000a05e 	.word	0x2000a05e

080133d4 <_ZN8touchgfx3HAL8endFrameEv>:
 80133d4:	b510      	push	{r4, lr}
 80133d6:	4604      	mov	r4, r0
 80133d8:	6840      	ldr	r0, [r0, #4]
 80133da:	6803      	ldr	r3, [r0, #0]
 80133dc:	689b      	ldr	r3, [r3, #8]
 80133de:	4798      	blx	r3
 80133e0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80133e4:	b113      	cbz	r3, 80133ec <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80133e6:	2301      	movs	r3, #1
 80133e8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80133ec:	bd10      	pop	{r4, pc}

080133ee <_ZN8touchgfx3HAL9taskEntryEv>:
 80133ee:	b508      	push	{r3, lr}
 80133f0:	6803      	ldr	r3, [r0, #0]
 80133f2:	4604      	mov	r4, r0
 80133f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80133f6:	4798      	blx	r3
 80133f8:	6823      	ldr	r3, [r4, #0]
 80133fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80133fc:	4620      	mov	r0, r4
 80133fe:	4798      	blx	r3
 8013400:	f7fd ffec 	bl	80113dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013404:	6823      	ldr	r3, [r4, #0]
 8013406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013408:	e7f8      	b.n	80133fc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801340c <_ZN8touchgfx3HAL4tickEv>:
 801340c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801340e:	6803      	ldr	r3, [r0, #0]
 8013410:	4d5c      	ldr	r5, [pc, #368]	; (8013584 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8013412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013416:	4604      	mov	r4, r0
 8013418:	4798      	blx	r3
 801341a:	2800      	cmp	r0, #0
 801341c:	f000 8097 	beq.w	801354e <_ZN8touchgfx3HAL4tickEv+0x142>
 8013420:	2001      	movs	r0, #1
 8013422:	f7fd fd07 	bl	8010e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013426:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801342a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801342e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8013432:	2600      	movs	r6, #0
 8013434:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8013438:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801343c:	b133      	cbz	r3, 801344c <_ZN8touchgfx3HAL4tickEv+0x40>
 801343e:	6823      	ldr	r3, [r4, #0]
 8013440:	4620      	mov	r0, r4
 8013442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013446:	4798      	blx	r3
 8013448:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801344c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013450:	6862      	ldr	r2, [r4, #4]
 8013452:	f083 0301 	eor.w	r3, r3, #1
 8013456:	7253      	strb	r3, [r2, #9]
 8013458:	2601      	movs	r6, #1
 801345a:	702e      	strb	r6, [r5, #0]
 801345c:	f002 ff0e 	bl	801627c <_ZN8touchgfx11Application11getInstanceEv>
 8013460:	6803      	ldr	r3, [r0, #0]
 8013462:	4631      	mov	r1, r6
 8013464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013466:	4798      	blx	r3
 8013468:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801346c:	b90b      	cbnz	r3, 8013472 <_ZN8touchgfx3HAL4tickEv+0x66>
 801346e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013472:	f002 ff03 	bl	801627c <_ZN8touchgfx11Application11getInstanceEv>
 8013476:	6803      	ldr	r3, [r0, #0]
 8013478:	695b      	ldr	r3, [r3, #20]
 801347a:	4798      	blx	r3
 801347c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801347e:	6803      	ldr	r3, [r0, #0]
 8013480:	691b      	ldr	r3, [r3, #16]
 8013482:	4798      	blx	r3
 8013484:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013488:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801348c:	3b01      	subs	r3, #1
 801348e:	b2db      	uxtb	r3, r3
 8013490:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013494:	b10a      	cbz	r2, 801349a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8013496:	2b00      	cmp	r3, #0
 8013498:	d1eb      	bne.n	8013472 <_ZN8touchgfx3HAL4tickEv+0x66>
 801349a:	4a3b      	ldr	r2, [pc, #236]	; (8013588 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801349c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80134a0:	7813      	ldrb	r3, [r2, #0]
 80134a2:	3301      	adds	r3, #1
 80134a4:	b25b      	sxtb	r3, r3
 80134a6:	4299      	cmp	r1, r3
 80134a8:	7013      	strb	r3, [r2, #0]
 80134aa:	dc10      	bgt.n	80134ce <_ZN8touchgfx3HAL4tickEv+0xc2>
 80134ac:	68e0      	ldr	r0, [r4, #12]
 80134ae:	2300      	movs	r3, #0
 80134b0:	7013      	strb	r3, [r2, #0]
 80134b2:	6803      	ldr	r3, [r0, #0]
 80134b4:	aa03      	add	r2, sp, #12
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	a902      	add	r1, sp, #8
 80134ba:	4798      	blx	r3
 80134bc:	6823      	ldr	r3, [r4, #0]
 80134be:	2800      	cmp	r0, #0
 80134c0:	d051      	beq.n	8013566 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80134c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80134c6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80134ca:	4620      	mov	r0, r4
 80134cc:	4798      	blx	r3
 80134ce:	6960      	ldr	r0, [r4, #20]
 80134d0:	2300      	movs	r3, #0
 80134d2:	f88d 3007 	strb.w	r3, [sp, #7]
 80134d6:	b158      	cbz	r0, 80134f0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80134d8:	6803      	ldr	r3, [r0, #0]
 80134da:	f10d 0107 	add.w	r1, sp, #7
 80134de:	68db      	ldr	r3, [r3, #12]
 80134e0:	4798      	blx	r3
 80134e2:	b128      	cbz	r0, 80134f0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80134e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80134ea:	6803      	ldr	r3, [r0, #0]
 80134ec:	68db      	ldr	r3, [r3, #12]
 80134ee:	4798      	blx	r3
 80134f0:	f104 001c 	add.w	r0, r4, #28
 80134f4:	f011 fbfa 	bl	8024cec <_ZN8touchgfx8Gestures4tickEv>
 80134f8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80134fc:	b30b      	cbz	r3, 8013542 <_ZN8touchgfx3HAL4tickEv+0x136>
 80134fe:	6920      	ldr	r0, [r4, #16]
 8013500:	6803      	ldr	r3, [r0, #0]
 8013502:	691b      	ldr	r3, [r3, #16]
 8013504:	4798      	blx	r3
 8013506:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013508:	4606      	mov	r6, r0
 801350a:	b903      	cbnz	r3, 801350e <_ZN8touchgfx3HAL4tickEv+0x102>
 801350c:	6720      	str	r0, [r4, #112]	; 0x70
 801350e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013510:	4a1e      	ldr	r2, [pc, #120]	; (801358c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8013512:	1af3      	subs	r3, r6, r3
 8013514:	4293      	cmp	r3, r2
 8013516:	d914      	bls.n	8013542 <_ZN8touchgfx3HAL4tickEv+0x136>
 8013518:	6920      	ldr	r0, [r4, #16]
 801351a:	6803      	ldr	r3, [r0, #0]
 801351c:	699b      	ldr	r3, [r3, #24]
 801351e:	4798      	blx	r3
 8013520:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013522:	2264      	movs	r2, #100	; 0x64
 8013524:	1af3      	subs	r3, r6, r3
 8013526:	fbb3 f3f2 	udiv	r3, r3, r2
 801352a:	fbb0 f0f3 	udiv	r0, r0, r3
 801352e:	2800      	cmp	r0, #0
 8013530:	dc1e      	bgt.n	8013570 <_ZN8touchgfx3HAL4tickEv+0x164>
 8013532:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013536:	6920      	ldr	r0, [r4, #16]
 8013538:	6803      	ldr	r3, [r0, #0]
 801353a:	2100      	movs	r1, #0
 801353c:	69db      	ldr	r3, [r3, #28]
 801353e:	4798      	blx	r3
 8013540:	6726      	str	r6, [r4, #112]	; 0x70
 8013542:	f002 fe9b 	bl	801627c <_ZN8touchgfx11Application11getInstanceEv>
 8013546:	6803      	ldr	r3, [r0, #0]
 8013548:	2100      	movs	r1, #0
 801354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801354c:	4798      	blx	r3
 801354e:	6823      	ldr	r3, [r4, #0]
 8013550:	4620      	mov	r0, r4
 8013552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013556:	4798      	blx	r3
 8013558:	2001      	movs	r0, #1
 801355a:	f7fd fc76 	bl	8010e4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801355e:	2300      	movs	r3, #0
 8013560:	702b      	strb	r3, [r5, #0]
 8013562:	b004      	add	sp, #16
 8013564:	bd70      	pop	{r4, r5, r6, pc}
 8013566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801356a:	4620      	mov	r0, r4
 801356c:	4798      	blx	r3
 801356e:	e7ae      	b.n	80134ce <_ZN8touchgfx3HAL4tickEv+0xc2>
 8013570:	2863      	cmp	r0, #99	; 0x63
 8013572:	bfcb      	itete	gt
 8013574:	2300      	movgt	r3, #0
 8013576:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801357a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801357e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8013582:	e7d8      	b.n	8013536 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8013584:	2000a064 	.word	0x2000a064
 8013588:	2000a065 	.word	0x2000a065
 801358c:	05f5e100 	.word	0x05f5e100

08013590 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013590:	f7fd bef4 	b.w	801137c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013594 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013594:	6581      	str	r1, [r0, #88]	; 0x58
 8013596:	301c      	adds	r0, #28
 8013598:	f011 bba6 	b.w	8024ce8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801359c <_ZN8touchgfx3HAL5touchEll>:
 801359c:	b530      	push	{r4, r5, lr}
 801359e:	b087      	sub	sp, #28
 80135a0:	4604      	mov	r4, r0
 80135a2:	a804      	add	r0, sp, #16
 80135a4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80135a8:	f002 fc32 	bl	8015e10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80135ac:	9b04      	ldr	r3, [sp, #16]
 80135ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 80135b2:	a906      	add	r1, sp, #24
 80135b4:	9b05      	ldr	r3, [sp, #20]
 80135b6:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80135ba:	a803      	add	r0, sp, #12
 80135bc:	f002 fc66 	bl	8015e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80135c0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80135c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80135c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80135cc:	f104 001c 	add.w	r0, r4, #28
 80135d0:	b189      	cbz	r1, 80135f6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80135d2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80135dc:	4613      	mov	r3, r2
 80135de:	462a      	mov	r2, r5
 80135e0:	f011 fb92 	bl	8024d08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80135e4:	b128      	cbz	r0, 80135f2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80135e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80135ea:	65e3      	str	r3, [r4, #92]	; 0x5c
 80135ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80135f0:	6623      	str	r3, [r4, #96]	; 0x60
 80135f2:	b007      	add	sp, #28
 80135f4:	bd30      	pop	{r4, r5, pc}
 80135f6:	f011 fbcb 	bl	8024d90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80135fa:	2301      	movs	r3, #1
 80135fc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013600:	e7f1      	b.n	80135e6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08013602 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013602:	b570      	push	{r4, r5, r6, lr}
 8013604:	2b00      	cmp	r3, #0
 8013606:	d050      	beq.n	80136aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8013608:	ea81 0002 	eor.w	r0, r1, r2
 801360c:	07c6      	lsls	r6, r0, #31
 801360e:	d508      	bpl.n	8013622 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013610:	3a01      	subs	r2, #1
 8013612:	18cc      	adds	r4, r1, r3
 8013614:	42a1      	cmp	r1, r4
 8013616:	d048      	beq.n	80136aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8013618:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801361c:	f801 0b01 	strb.w	r0, [r1], #1
 8013620:	e7f8      	b.n	8013614 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013622:	07d5      	lsls	r5, r2, #31
 8013624:	bf42      	ittt	mi
 8013626:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801362a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801362e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8013632:	2b01      	cmp	r3, #1
 8013634:	d915      	bls.n	8013662 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8013636:	ea82 0001 	eor.w	r0, r2, r1
 801363a:	0784      	lsls	r4, r0, #30
 801363c:	d02d      	beq.n	801369a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801363e:	1e94      	subs	r4, r2, #2
 8013640:	4608      	mov	r0, r1
 8013642:	18ce      	adds	r6, r1, r3
 8013644:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8013648:	f820 5b02 	strh.w	r5, [r0], #2
 801364c:	1a35      	subs	r5, r6, r0
 801364e:	2d01      	cmp	r5, #1
 8013650:	d8f8      	bhi.n	8013644 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8013652:	1e98      	subs	r0, r3, #2
 8013654:	f020 0001 	bic.w	r0, r0, #1
 8013658:	3002      	adds	r0, #2
 801365a:	4401      	add	r1, r0
 801365c:	4402      	add	r2, r0
 801365e:	f003 0301 	and.w	r3, r3, #1
 8013662:	1f14      	subs	r4, r2, #4
 8013664:	4608      	mov	r0, r1
 8013666:	18ce      	adds	r6, r1, r3
 8013668:	1a35      	subs	r5, r6, r0
 801366a:	2d03      	cmp	r5, #3
 801366c:	d810      	bhi.n	8013690 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801366e:	089c      	lsrs	r4, r3, #2
 8013670:	00a0      	lsls	r0, r4, #2
 8013672:	4401      	add	r1, r0
 8013674:	3801      	subs	r0, #1
 8013676:	4402      	add	r2, r0
 8013678:	f06f 0003 	mvn.w	r0, #3
 801367c:	fb00 3404 	mla	r4, r0, r4, r3
 8013680:	440c      	add	r4, r1
 8013682:	42a1      	cmp	r1, r4
 8013684:	d011      	beq.n	80136aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8013686:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801368a:	f801 3b01 	strb.w	r3, [r1], #1
 801368e:	e7f8      	b.n	8013682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8013690:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8013694:	f840 5b04 	str.w	r5, [r0], #4
 8013698:	e7e6      	b.n	8013668 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801369a:	0790      	lsls	r0, r2, #30
 801369c:	d0e1      	beq.n	8013662 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801369e:	f832 0b02 	ldrh.w	r0, [r2], #2
 80136a2:	f821 0b02 	strh.w	r0, [r1], #2
 80136a6:	3b02      	subs	r3, #2
 80136a8:	e7db      	b.n	8013662 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80136aa:	2001      	movs	r0, #1
 80136ac:	bd70      	pop	{r4, r5, r6, pc}

080136ae <_ZN8touchgfx3HAL7noTouchEv>:
 80136ae:	b510      	push	{r4, lr}
 80136b0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80136b4:	4604      	mov	r4, r0
 80136b6:	b153      	cbz	r3, 80136ce <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80136b8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80136bc:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80136c0:	2101      	movs	r1, #1
 80136c2:	301c      	adds	r0, #28
 80136c4:	f011 fb64 	bl	8024d90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80136c8:	2300      	movs	r3, #0
 80136ca:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80136ce:	bd10      	pop	{r4, pc}

080136d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80136d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136d4:	4604      	mov	r4, r0
 80136d6:	6980      	ldr	r0, [r0, #24]
 80136d8:	b085      	sub	sp, #20
 80136da:	460f      	mov	r7, r1
 80136dc:	4690      	mov	r8, r2
 80136de:	4699      	mov	r9, r3
 80136e0:	b930      	cbnz	r0, 80136f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80136e2:	4b1c      	ldr	r3, [pc, #112]	; (8013754 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80136e4:	4a1c      	ldr	r2, [pc, #112]	; (8013758 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80136e6:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80136ea:	481c      	ldr	r0, [pc, #112]	; (801375c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 80136ec:	f011 fce2 	bl	80250b4 <__assert_func>
 80136f0:	ad04      	add	r5, sp, #16
 80136f2:	2600      	movs	r6, #0
 80136f4:	f845 6d04 	str.w	r6, [r5, #-4]!
 80136f8:	6806      	ldr	r6, [r0, #0]
 80136fa:	9501      	str	r5, [sp, #4]
 80136fc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8013700:	9500      	str	r5, [sp, #0]
 8013702:	6835      	ldr	r5, [r6, #0]
 8013704:	47a8      	blx	r5
 8013706:	4d16      	ldr	r5, [pc, #88]	; (8013760 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8013708:	4606      	mov	r6, r0
 801370a:	f8a5 9000 	strh.w	r9, [r5]
 801370e:	f7fa fef5 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 8013712:	6803      	ldr	r3, [r0, #0]
 8013714:	6a1b      	ldr	r3, [r3, #32]
 8013716:	4798      	blx	r3
 8013718:	2801      	cmp	r0, #1
 801371a:	d012      	beq.n	8013742 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 801371c:	d306      	bcc.n	801372c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801371e:	280d      	cmp	r0, #13
 8013720:	d80b      	bhi.n	801373a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8013722:	4b10      	ldr	r3, [pc, #64]	; (8013764 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8013724:	4a0c      	ldr	r2, [pc, #48]	; (8013758 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8013726:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801372a:	e7de      	b.n	80136ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801372c:	882b      	ldrh	r3, [r5, #0]
 801372e:	fb08 7203 	mla	r2, r8, r3, r7
 8013732:	9b03      	ldr	r3, [sp, #12]
 8013734:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013738:	63e3      	str	r3, [r4, #60]	; 0x3c
 801373a:	4630      	mov	r0, r6
 801373c:	b005      	add	sp, #20
 801373e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013742:	882a      	ldrh	r2, [r5, #0]
 8013744:	9b03      	ldr	r3, [sp, #12]
 8013746:	fb08 7202 	mla	r2, r8, r2, r7
 801374a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801374e:	1a9a      	subs	r2, r3, r2
 8013750:	63e2      	str	r2, [r4, #60]	; 0x3c
 8013752:	e7f2      	b.n	801373a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8013754:	080292cd 	.word	0x080292cd
 8013758:	080295e6 	.word	0x080295e6
 801375c:	08029312 	.word	0x08029312
 8013760:	2000a05a 	.word	0x2000a05a
 8013764:	08029338 	.word	0x08029338

08013768 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8013768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801376c:	4698      	mov	r8, r3
 801376e:	6803      	ldr	r3, [r0, #0]
 8013770:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8013772:	4b0f      	ldr	r3, [pc, #60]	; (80137b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8013774:	b087      	sub	sp, #28
 8013776:	f8b3 9000 	ldrh.w	r9, [r3]
 801377a:	460e      	mov	r6, r1
 801377c:	4617      	mov	r7, r2
 801377e:	4604      	mov	r4, r0
 8013780:	f7fa febc 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 8013784:	6803      	ldr	r3, [r0, #0]
 8013786:	6a1b      	ldr	r3, [r3, #32]
 8013788:	4798      	blx	r3
 801378a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801378e:	9302      	str	r3, [sp, #8]
 8013790:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013794:	9301      	str	r3, [sp, #4]
 8013796:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801379a:	9300      	str	r3, [sp, #0]
 801379c:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80137a0:	4643      	mov	r3, r8
 80137a2:	463a      	mov	r2, r7
 80137a4:	4631      	mov	r1, r6
 80137a6:	4620      	mov	r0, r4
 80137a8:	47a8      	blx	r5
 80137aa:	b007      	add	sp, #28
 80137ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137b0:	2000a05a 	.word	0x2000a05a

080137b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80137b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b8:	4604      	mov	r4, r0
 80137ba:	b08b      	sub	sp, #44	; 0x2c
 80137bc:	4610      	mov	r0, r2
 80137be:	460d      	mov	r5, r1
 80137c0:	4691      	mov	r9, r2
 80137c2:	461e      	mov	r6, r3
 80137c4:	f005 fcaa 	bl	801911c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80137c8:	2800      	cmp	r0, #0
 80137ca:	f000 80a0 	beq.w	801390e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80137ce:	6823      	ldr	r3, [r4, #0]
 80137d0:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013944 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 80137d4:	6a1b      	ldr	r3, [r3, #32]
 80137d6:	f8df a170 	ldr.w	sl, [pc, #368]	; 8013948 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 80137da:	4620      	mov	r0, r4
 80137dc:	4798      	blx	r3
 80137de:	6823      	ldr	r3, [r4, #0]
 80137e0:	4620      	mov	r0, r4
 80137e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137e4:	4798      	blx	r3
 80137e6:	f8bb 3000 	ldrh.w	r3, [fp]
 80137ea:	9301      	str	r3, [sp, #4]
 80137ec:	f8ba 3000 	ldrh.w	r3, [sl]
 80137f0:	9302      	str	r3, [sp, #8]
 80137f2:	4b51      	ldr	r3, [pc, #324]	; (8013938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 80137f4:	881a      	ldrh	r2, [r3, #0]
 80137f6:	9203      	str	r2, [sp, #12]
 80137f8:	4a50      	ldr	r2, [pc, #320]	; (801393c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80137fa:	8812      	ldrh	r2, [r2, #0]
 80137fc:	9204      	str	r2, [sp, #16]
 80137fe:	af0a      	add	r7, sp, #40	; 0x28
 8013800:	4a4f      	ldr	r2, [pc, #316]	; (8013940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8013802:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8013806:	7812      	ldrb	r2, [r2, #0]
 8013808:	4698      	mov	r8, r3
 801380a:	4638      	mov	r0, r7
 801380c:	2a00      	cmp	r2, #0
 801380e:	f040 8081 	bne.w	8013914 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8013812:	f005 fd3d 	bl	8019290 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013816:	f8ab 0000 	strh.w	r0, [fp]
 801381a:	4638      	mov	r0, r7
 801381c:	f005 fd72 	bl	8019304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013820:	f8aa 0000 	strh.w	r0, [sl]
 8013824:	4638      	mov	r0, r7
 8013826:	f005 fd33 	bl	8019290 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801382a:	f8a8 0000 	strh.w	r0, [r8]
 801382e:	4638      	mov	r0, r7
 8013830:	f005 fd68 	bl	8019304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013834:	4b41      	ldr	r3, [pc, #260]	; (801393c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8013836:	8018      	strh	r0, [r3, #0]
 8013838:	4648      	mov	r0, r9
 801383a:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801383e:	f005 fc6d 	bl	801911c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013842:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8013846:	2200      	movs	r2, #0
 8013848:	4611      	mov	r1, r2
 801384a:	4628      	mov	r0, r5
 801384c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8013850:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8013854:	f7fb fbae 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
 8013858:	2301      	movs	r3, #1
 801385a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801385e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8013862:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013866:	2b00      	cmp	r3, #0
 8013868:	dd5c      	ble.n	8013924 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 801386a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801386e:	2b00      	cmp	r3, #0
 8013870:	dd58      	ble.n	8013924 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8013872:	462a      	mov	r2, r5
 8013874:	ab08      	add	r3, sp, #32
 8013876:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801387a:	6851      	ldr	r1, [r2, #4]
 801387c:	c303      	stmia	r3!, {r0, r1}
 801387e:	4631      	mov	r1, r6
 8013880:	a808      	add	r0, sp, #32
 8013882:	f7ff fc71 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 8013886:	a807      	add	r0, sp, #28
 8013888:	f005 fe94 	bl	80195b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801388c:	4606      	mov	r6, r0
 801388e:	f7fa fe35 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 8013892:	6803      	ldr	r3, [r0, #0]
 8013894:	6a1b      	ldr	r3, [r3, #32]
 8013896:	4798      	blx	r3
 8013898:	4286      	cmp	r6, r0
 801389a:	d04a      	beq.n	8013932 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 801389c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801389e:	b150      	cbz	r0, 80138b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 80138a0:	a807      	add	r0, sp, #28
 80138a2:	f005 fe87 	bl	80195b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80138a6:	4606      	mov	r6, r0
 80138a8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80138aa:	6803      	ldr	r3, [r0, #0]
 80138ac:	6a1b      	ldr	r3, [r3, #32]
 80138ae:	4798      	blx	r3
 80138b0:	1a33      	subs	r3, r6, r0
 80138b2:	4258      	negs	r0, r3
 80138b4:	4158      	adcs	r0, r3
 80138b6:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80138ba:	2600      	movs	r6, #0
 80138bc:	682a      	ldr	r2, [r5, #0]
 80138be:	696b      	ldr	r3, [r5, #20]
 80138c0:	616e      	str	r6, [r5, #20]
 80138c2:	9305      	str	r3, [sp, #20]
 80138c4:	6892      	ldr	r2, [r2, #8]
 80138c6:	a908      	add	r1, sp, #32
 80138c8:	4628      	mov	r0, r5
 80138ca:	4790      	blx	r2
 80138cc:	9b05      	ldr	r3, [sp, #20]
 80138ce:	616b      	str	r3, [r5, #20]
 80138d0:	4652      	mov	r2, sl
 80138d2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80138d6:	4649      	mov	r1, r9
 80138d8:	4628      	mov	r0, r5
 80138da:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80138de:	f7fb fb69 	bl	800efb4 <_ZN8touchgfx8Drawable5setXYEss>
 80138e2:	4b18      	ldr	r3, [pc, #96]	; (8013944 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 80138e4:	9a01      	ldr	r2, [sp, #4]
 80138e6:	801a      	strh	r2, [r3, #0]
 80138e8:	4b17      	ldr	r3, [pc, #92]	; (8013948 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 80138ea:	9a02      	ldr	r2, [sp, #8]
 80138ec:	801a      	strh	r2, [r3, #0]
 80138ee:	4b12      	ldr	r3, [pc, #72]	; (8013938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 80138f0:	9a03      	ldr	r2, [sp, #12]
 80138f2:	801a      	strh	r2, [r3, #0]
 80138f4:	4b11      	ldr	r3, [pc, #68]	; (801393c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80138f6:	9a04      	ldr	r2, [sp, #16]
 80138f8:	801a      	strh	r2, [r3, #0]
 80138fa:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	4620      	mov	r0, r4
 8013902:	6a1b      	ldr	r3, [r3, #32]
 8013904:	4798      	blx	r3
 8013906:	6823      	ldr	r3, [r4, #0]
 8013908:	4620      	mov	r0, r4
 801390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801390c:	4798      	blx	r3
 801390e:	b00b      	add	sp, #44	; 0x2c
 8013910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013914:	f005 fcf6 	bl	8019304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013918:	f8ab 0000 	strh.w	r0, [fp]
 801391c:	4638      	mov	r0, r7
 801391e:	f005 fcb7 	bl	8019290 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013922:	e77d      	b.n	8013820 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8013924:	462a      	mov	r2, r5
 8013926:	ab08      	add	r3, sp, #32
 8013928:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801392c:	6851      	ldr	r1, [r2, #4]
 801392e:	c303      	stmia	r3!, {r0, r1}
 8013930:	e7a9      	b.n	8013886 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8013932:	2000      	movs	r0, #0
 8013934:	e7bf      	b.n	80138b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8013936:	bf00      	nop
 8013938:	2000a054 	.word	0x2000a054
 801393c:	2000a056 	.word	0x2000a056
 8013940:	2000a058 	.word	0x2000a058
 8013944:	2000a05a 	.word	0x2000a05a
 8013948:	2000a05c 	.word	0x2000a05c

0801394c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801394c:	b510      	push	{r4, lr}
 801394e:	4b07      	ldr	r3, [pc, #28]	; (801396c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	4604      	mov	r4, r0
 8013954:	b13b      	cbz	r3, 8013966 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013956:	6803      	ldr	r3, [r0, #0]
 8013958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801395a:	4798      	blx	r3
 801395c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801395e:	4283      	cmp	r3, r0
 8013960:	d101      	bne.n	8013966 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013962:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013964:	bd10      	pop	{r4, pc}
 8013966:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013968:	e7fc      	b.n	8013964 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801396a:	bf00      	nop
 801396c:	2000a05e 	.word	0x2000a05e

08013970 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013970:	b510      	push	{r4, lr}
 8013972:	4b0b      	ldr	r3, [pc, #44]	; (80139a0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	4604      	mov	r4, r0
 8013978:	b95b      	cbnz	r3, 8013992 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801397a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801397e:	2b02      	cmp	r3, #2
 8013980:	d007      	beq.n	8013992 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013982:	6840      	ldr	r0, [r0, #4]
 8013984:	f000 fbce 	bl	8014124 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013988:	b118      	cbz	r0, 8013992 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801398a:	6862      	ldr	r2, [r4, #4]
 801398c:	7a53      	ldrb	r3, [r2, #9]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d0fc      	beq.n	801398c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013992:	f7fd fce5 	bl	8011360 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013996:	4620      	mov	r0, r4
 8013998:	f7ff ffd8 	bl	801394c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801399c:	bd10      	pop	{r4, pc}
 801399e:	bf00      	nop
 80139a0:	2000a05e 	.word	0x2000a05e

080139a4 <_ZN8touchgfx3HAL10initializeEv>:
 80139a4:	b510      	push	{r4, lr}
 80139a6:	4604      	mov	r4, r0
 80139a8:	f7fd fca4 	bl	80112f4 <_ZN8touchgfx10OSWrappers10initializeEv>
 80139ac:	6860      	ldr	r0, [r4, #4]
 80139ae:	6803      	ldr	r3, [r0, #0]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	4798      	blx	r3
 80139b4:	68e0      	ldr	r0, [r4, #12]
 80139b6:	6803      	ldr	r3, [r0, #0]
 80139b8:	689b      	ldr	r3, [r3, #8]
 80139ba:	4798      	blx	r3
 80139bc:	6823      	ldr	r3, [r4, #0]
 80139be:	4620      	mov	r0, r4
 80139c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80139c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139c6:	4718      	bx	r3

080139c8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80139c8:	b508      	push	{r3, lr}
 80139ca:	290d      	cmp	r1, #13
 80139cc:	d817      	bhi.n	80139fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80139ce:	e8df f001 	tbb	[pc, r1]
 80139d2:	090b      	.short	0x090b
 80139d4:	0d0d0d07 	.word	0x0d0d0d07
 80139d8:	1414140d 	.word	0x1414140d
 80139dc:	0d0d1414 	.word	0x0d0d1414
 80139e0:	2020      	movs	r0, #32
 80139e2:	bd08      	pop	{r3, pc}
 80139e4:	2018      	movs	r0, #24
 80139e6:	e7fc      	b.n	80139e2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80139e8:	2010      	movs	r0, #16
 80139ea:	e7fa      	b.n	80139e2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80139ec:	4b05      	ldr	r3, [pc, #20]	; (8013a04 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80139ee:	4a06      	ldr	r2, [pc, #24]	; (8013a08 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80139f0:	4806      	ldr	r0, [pc, #24]	; (8013a0c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80139f2:	f44f 7111 	mov.w	r1, #580	; 0x244
 80139f6:	f011 fb5d 	bl	80250b4 <__assert_func>
 80139fa:	2008      	movs	r0, #8
 80139fc:	e7f1      	b.n	80139e2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80139fe:	2000      	movs	r0, #0
 8013a00:	e7ef      	b.n	80139e2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013a02:	bf00      	nop
 8013a04:	0802940b 	.word	0x0802940b
 8013a08:	080297a8 	.word	0x080297a8
 8013a0c:	08029312 	.word	0x08029312

08013a10 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8013a10:	b570      	push	{r4, r5, r6, lr}
 8013a12:	460d      	mov	r5, r1
 8013a14:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8013a18:	4616      	mov	r6, r2
 8013a1a:	461c      	mov	r4, r3
 8013a1c:	f7ff ffd4 	bl	80139c8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8013a20:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8013a24:	10c0      	asrs	r0, r0, #3
 8013a26:	fb06 5101 	mla	r1, r6, r1, r5
 8013a2a:	fb00 4001 	mla	r0, r0, r1, r4
 8013a2e:	bd70      	pop	{r4, r5, r6, pc}

08013a30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8013a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a34:	b08a      	sub	sp, #40	; 0x28
 8013a36:	f04f 0c00 	mov.w	ip, #0
 8013a3a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8013a3e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8013a42:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8013a46:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8013a4a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8013a4e:	f8cd c020 	str.w	ip, [sp, #32]
 8013a52:	f1b8 0f02 	cmp.w	r8, #2
 8013a56:	4604      	mov	r4, r0
 8013a58:	469a      	mov	sl, r3
 8013a5a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8013a5e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013a62:	d030      	beq.n	8013ac6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8013a64:	2bff      	cmp	r3, #255	; 0xff
 8013a66:	d12c      	bne.n	8013ac2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8013a68:	4560      	cmp	r0, ip
 8013a6a:	bf14      	ite	ne
 8013a6c:	2004      	movne	r0, #4
 8013a6e:	2001      	moveq	r0, #1
 8013a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a74:	9204      	str	r2, [sp, #16]
 8013a76:	4620      	mov	r0, r4
 8013a78:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8013a7c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013a80:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013a84:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013a88:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013a8c:	f7ff ff5e 	bl	801394c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a90:	e9cd 9700 	strd	r9, r7, [sp]
 8013a94:	4603      	mov	r3, r0
 8013a96:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8013a9a:	4651      	mov	r1, sl
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f7ff ffb7 	bl	8013a10 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013aa2:	f8ad 901e 	strh.w	r9, [sp, #30]
 8013aa6:	9005      	str	r0, [sp, #20]
 8013aa8:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8013aac:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8013ab0:	b106      	cbz	r6, 8013ab4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8013ab2:	b98d      	cbnz	r5, 8013ad8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8013ab4:	4b12      	ldr	r3, [pc, #72]	; (8013b00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8013ab6:	4a13      	ldr	r2, [pc, #76]	; (8013b04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8013ab8:	f240 11c3 	movw	r1, #451	; 0x1c3
 8013abc:	4812      	ldr	r0, [pc, #72]	; (8013b08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8013abe:	f011 faf9 	bl	80250b4 <__assert_func>
 8013ac2:	2004      	movs	r0, #4
 8013ac4:	e7d4      	b.n	8013a70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013ac6:	2bff      	cmp	r3, #255	; 0xff
 8013ac8:	d104      	bne.n	8013ad4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8013aca:	2800      	cmp	r0, #0
 8013acc:	bf14      	ite	ne
 8013ace:	2040      	movne	r0, #64	; 0x40
 8013ad0:	2020      	moveq	r0, #32
 8013ad2:	e7cd      	b.n	8013a70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013ad4:	2040      	movs	r0, #64	; 0x40
 8013ad6:	e7cb      	b.n	8013a70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013ad8:	6823      	ldr	r3, [r4, #0]
 8013ada:	9d02      	ldr	r5, [sp, #8]
 8013adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ade:	4620      	mov	r0, r4
 8013ae0:	4798      	blx	r3
 8013ae2:	4228      	tst	r0, r5
 8013ae4:	d104      	bne.n	8013af0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8013ae6:	4b09      	ldr	r3, [pc, #36]	; (8013b0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8013ae8:	4a06      	ldr	r2, [pc, #24]	; (8013b04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8013aea:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8013aee:	e7e5      	b.n	8013abc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8013af0:	6860      	ldr	r0, [r4, #4]
 8013af2:	6803      	ldr	r3, [r0, #0]
 8013af4:	a902      	add	r1, sp, #8
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	4798      	blx	r3
 8013afa:	b00a      	add	sp, #40	; 0x28
 8013afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b00:	0802938e 	.word	0x0802938e
 8013b04:	0802964a 	.word	0x0802964a
 8013b08:	08029312 	.word	0x08029312
 8013b0c:	080293c6 	.word	0x080293c6

08013b10 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8013b10:	b510      	push	{r4, lr}
 8013b12:	b08a      	sub	sp, #40	; 0x28
 8013b14:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8013b18:	9408      	str	r4, [sp, #32]
 8013b1a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8013b1e:	9407      	str	r4, [sp, #28]
 8013b20:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8013b24:	9406      	str	r4, [sp, #24]
 8013b26:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8013b2a:	9405      	str	r4, [sp, #20]
 8013b2c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8013b30:	9404      	str	r4, [sp, #16]
 8013b32:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8013b36:	9403      	str	r4, [sp, #12]
 8013b38:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8013b3c:	9402      	str	r4, [sp, #8]
 8013b3e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8013b42:	e9cd 3400 	strd	r3, r4, [sp]
 8013b46:	4613      	mov	r3, r2
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f7ff ff71 	bl	8013a30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013b4e:	b00a      	add	sp, #40	; 0x28
 8013b50:	bd10      	pop	{r4, pc}
	...

08013b54 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8013b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b56:	b08b      	sub	sp, #44	; 0x2c
 8013b58:	4616      	mov	r6, r2
 8013b5a:	460d      	mov	r5, r1
 8013b5c:	461f      	mov	r7, r3
 8013b5e:	4604      	mov	r4, r0
 8013b60:	f7fa fccc 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 8013b64:	6803      	ldr	r3, [r0, #0]
 8013b66:	6a1b      	ldr	r3, [r3, #32]
 8013b68:	4798      	blx	r3
 8013b6a:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013b6e:	4b0d      	ldr	r3, [pc, #52]	; (8013ba4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8013b70:	881b      	ldrh	r3, [r3, #0]
 8013b72:	9306      	str	r3, [sp, #24]
 8013b74:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013b78:	9305      	str	r3, [sp, #20]
 8013b7a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013b7e:	9304      	str	r3, [sp, #16]
 8013b80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013b84:	9303      	str	r3, [sp, #12]
 8013b86:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013b8a:	9302      	str	r3, [sp, #8]
 8013b8c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013b90:	2200      	movs	r2, #0
 8013b92:	e9cd 7300 	strd	r7, r3, [sp]
 8013b96:	4629      	mov	r1, r5
 8013b98:	4633      	mov	r3, r6
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	f7ff ff48 	bl	8013a30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013ba0:	b00b      	add	sp, #44	; 0x2c
 8013ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ba4:	2000a05a 	.word	0x2000a05a

08013ba8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8013ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bac:	461f      	mov	r7, r3
 8013bae:	4b14      	ldr	r3, [pc, #80]	; (8013c00 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8013bb0:	b08a      	sub	sp, #40	; 0x28
 8013bb2:	4616      	mov	r6, r2
 8013bb4:	f8b3 8000 	ldrh.w	r8, [r3]
 8013bb8:	460d      	mov	r5, r1
 8013bba:	4604      	mov	r4, r0
 8013bbc:	f7fa fc9e 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 8013bc0:	6803      	ldr	r3, [r0, #0]
 8013bc2:	6a1b      	ldr	r3, [r3, #32]
 8013bc4:	4798      	blx	r3
 8013bc6:	2302      	movs	r3, #2
 8013bc8:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8013bcc:	2301      	movs	r3, #1
 8013bce:	9305      	str	r3, [sp, #20]
 8013bd0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013bd4:	9304      	str	r3, [sp, #16]
 8013bd6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013bda:	9303      	str	r3, [sp, #12]
 8013bdc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013be0:	9302      	str	r3, [sp, #8]
 8013be2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013be6:	9008      	str	r0, [sp, #32]
 8013be8:	e9cd 7300 	strd	r7, r3, [sp]
 8013bec:	2200      	movs	r2, #0
 8013bee:	4633      	mov	r3, r6
 8013bf0:	4629      	mov	r1, r5
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	f7ff ff1c 	bl	8013a30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013bf8:	b00a      	add	sp, #40	; 0x28
 8013bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bfe:	bf00      	nop
 8013c00:	2000a05a 	.word	0x2000a05a

08013c04 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8013c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c08:	b08b      	sub	sp, #44	; 0x2c
 8013c0a:	469b      	mov	fp, r3
 8013c0c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8013c10:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8013c14:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8013c18:	2fff      	cmp	r7, #255	; 0xff
 8013c1a:	bf14      	ite	ne
 8013c1c:	2308      	movne	r3, #8
 8013c1e:	2302      	moveq	r3, #2
 8013c20:	2600      	movs	r6, #0
 8013c22:	4604      	mov	r4, r0
 8013c24:	4689      	mov	r9, r1
 8013c26:	4692      	mov	sl, r2
 8013c28:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8013c2c:	9608      	str	r6, [sp, #32]
 8013c2e:	f7ff fe8d 	bl	801394c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013c32:	e9cd 8500 	strd	r8, r5, [sp]
 8013c36:	4603      	mov	r3, r0
 8013c38:	465a      	mov	r2, fp
 8013c3a:	4651      	mov	r1, sl
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f7ff fee7 	bl	8013a10 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013c42:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013c46:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013c4a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013c4e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013c52:	6823      	ldr	r3, [r4, #0]
 8013c54:	9005      	str	r0, [sp, #20]
 8013c56:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8013c5a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8013c5e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8013c62:	f8ad 801e 	strh.w	r8, [sp, #30]
 8013c66:	f8cd 9020 	str.w	r9, [sp, #32]
 8013c6a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8013c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c70:	9d02      	ldr	r5, [sp, #8]
 8013c72:	4620      	mov	r0, r4
 8013c74:	4798      	blx	r3
 8013c76:	4228      	tst	r0, r5
 8013c78:	d106      	bne.n	8013c88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8013c7a:	4b07      	ldr	r3, [pc, #28]	; (8013c98 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8013c7c:	4a07      	ldr	r2, [pc, #28]	; (8013c9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8013c7e:	4808      	ldr	r0, [pc, #32]	; (8013ca0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8013c80:	f240 11fb 	movw	r1, #507	; 0x1fb
 8013c84:	f011 fa16 	bl	80250b4 <__assert_func>
 8013c88:	6860      	ldr	r0, [r4, #4]
 8013c8a:	6803      	ldr	r3, [r0, #0]
 8013c8c:	a902      	add	r1, sp, #8
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	4798      	blx	r3
 8013c92:	b00b      	add	sp, #44	; 0x2c
 8013c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c98:	080293c6 	.word	0x080293c6
 8013c9c:	08029713 	.word	0x08029713
 8013ca0:	08029312 	.word	0x08029312

08013ca4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013ca8:	461f      	mov	r7, r3
 8013caa:	4b0b      	ldr	r3, [pc, #44]	; (8013cd8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013cac:	460d      	mov	r5, r1
 8013cae:	f8b3 8000 	ldrh.w	r8, [r3]
 8013cb2:	4616      	mov	r6, r2
 8013cb4:	4604      	mov	r4, r0
 8013cb6:	f7fa fc21 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 8013cba:	6803      	ldr	r3, [r0, #0]
 8013cbc:	6a1b      	ldr	r3, [r3, #32]
 8013cbe:	4798      	blx	r3
 8013cc0:	463b      	mov	r3, r7
 8013cc2:	e9cd 8000 	strd	r8, r0, [sp]
 8013cc6:	4632      	mov	r2, r6
 8013cc8:	4629      	mov	r1, r5
 8013cca:	4620      	mov	r0, r4
 8013ccc:	f7ff fea0 	bl	8013a10 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013cd0:	b002      	add	sp, #8
 8013cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd6:	bf00      	nop
 8013cd8:	2000a05a 	.word	0x2000a05a

08013cdc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8013cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ce0:	b088      	sub	sp, #32
 8013ce2:	4698      	mov	r8, r3
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	9306      	str	r3, [sp, #24]
 8013ce8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013cec:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8013cf0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013cf4:	f8ad 6010 	strh.w	r6, [sp, #16]
 8013cf8:	e9cd 3100 	strd	r3, r1, [sp]
 8013cfc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013d00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013d04:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8013d08:	f88d 301c 	strb.w	r3, [sp, #28]
 8013d0c:	4617      	mov	r7, r2
 8013d0e:	4604      	mov	r4, r0
 8013d10:	f8ad 5012 	strh.w	r5, [sp, #18]
 8013d14:	f7ff fe1a 	bl	801394c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013d18:	4642      	mov	r2, r8
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	4639      	mov	r1, r7
 8013d1e:	4620      	mov	r0, r4
 8013d20:	f7ff ffc0 	bl	8013ca4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013d24:	4b16      	ldr	r3, [pc, #88]	; (8013d80 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8013d26:	9003      	str	r0, [sp, #12]
 8013d28:	881b      	ldrh	r3, [r3, #0]
 8013d2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013d2e:	f7fa fbe5 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 8013d32:	6803      	ldr	r3, [r0, #0]
 8013d34:	6a1b      	ldr	r3, [r3, #32]
 8013d36:	4798      	blx	r3
 8013d38:	f88d 001e 	strb.w	r0, [sp, #30]
 8013d3c:	f88d 001d 	strb.w	r0, [sp, #29]
 8013d40:	b106      	cbz	r6, 8013d44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8013d42:	b935      	cbnz	r5, 8013d52 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8013d44:	4b0f      	ldr	r3, [pc, #60]	; (8013d84 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8013d46:	4a10      	ldr	r2, [pc, #64]	; (8013d88 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8013d48:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8013d4c:	480f      	ldr	r0, [pc, #60]	; (8013d8c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8013d4e:	f011 f9b1 	bl	80250b4 <__assert_func>
 8013d52:	6823      	ldr	r3, [r4, #0]
 8013d54:	9d00      	ldr	r5, [sp, #0]
 8013d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d58:	4620      	mov	r0, r4
 8013d5a:	4798      	blx	r3
 8013d5c:	4228      	tst	r0, r5
 8013d5e:	d104      	bne.n	8013d6a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8013d60:	4b0b      	ldr	r3, [pc, #44]	; (8013d90 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8013d62:	4a09      	ldr	r2, [pc, #36]	; (8013d88 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8013d64:	f240 11e1 	movw	r1, #481	; 0x1e1
 8013d68:	e7f0      	b.n	8013d4c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8013d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d6c:	6860      	ldr	r0, [r4, #4]
 8013d6e:	9306      	str	r3, [sp, #24]
 8013d70:	6803      	ldr	r3, [r0, #0]
 8013d72:	4669      	mov	r1, sp
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	4798      	blx	r3
 8013d78:	b008      	add	sp, #32
 8013d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d7e:	bf00      	nop
 8013d80:	2000a05a 	.word	0x2000a05a
 8013d84:	0802938e 	.word	0x0802938e
 8013d88:	080294fc 	.word	0x080294fc
 8013d8c:	08029312 	.word	0x08029312
 8013d90:	080293c6 	.word	0x080293c6

08013d94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013d94:	b570      	push	{r4, r5, r6, lr}
 8013d96:	b08a      	sub	sp, #40	; 0x28
 8013d98:	466b      	mov	r3, sp
 8013d9a:	e883 0006 	stmia.w	r3, {r1, r2}
 8013d9e:	4b20      	ldr	r3, [pc, #128]	; (8013e20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	4604      	mov	r4, r0
 8013da4:	b933      	cbnz	r3, 8013db4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8013da6:	4b1f      	ldr	r3, [pc, #124]	; (8013e24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8013da8:	4a1f      	ldr	r2, [pc, #124]	; (8013e28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8013daa:	4820      	ldr	r0, [pc, #128]	; (8013e2c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8013dac:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8013db0:	f011 f980 	bl	80250b4 <__assert_func>
 8013db4:	2300      	movs	r3, #0
 8013db6:	9308      	str	r3, [sp, #32]
 8013db8:	2301      	movs	r3, #1
 8013dba:	9302      	str	r3, [sp, #8]
 8013dbc:	6803      	ldr	r3, [r0, #0]
 8013dbe:	f8bd 5000 	ldrh.w	r5, [sp]
 8013dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dc4:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8013dc8:	4798      	blx	r3
 8013dca:	4632      	mov	r2, r6
 8013dcc:	4629      	mov	r1, r5
 8013dce:	4603      	mov	r3, r0
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f7ff ff67 	bl	8013ca4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013dd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013dd8:	9305      	str	r3, [sp, #20]
 8013dda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013dde:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013de2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013de6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013dea:	4b11      	ldr	r3, [pc, #68]	; (8013e30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8013dec:	9003      	str	r0, [sp, #12]
 8013dee:	881b      	ldrh	r3, [r3, #0]
 8013df0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013df4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013df8:	f7fa fb80 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 8013dfc:	6803      	ldr	r3, [r0, #0]
 8013dfe:	6a1b      	ldr	r3, [r3, #32]
 8013e00:	4798      	blx	r3
 8013e02:	23ff      	movs	r3, #255	; 0xff
 8013e04:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013e08:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8013e0c:	6860      	ldr	r0, [r4, #4]
 8013e0e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013e12:	6803      	ldr	r3, [r0, #0]
 8013e14:	a902      	add	r1, sp, #8
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	4798      	blx	r3
 8013e1a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013e1c:	b00a      	add	sp, #40	; 0x28
 8013e1e:	bd70      	pop	{r4, r5, r6, pc}
 8013e20:	2000a05f 	.word	0x2000a05f
 8013e24:	0802925f 	.word	0x0802925f
 8013e28:	080295a0 	.word	0x080295a0
 8013e2c:	08029312 	.word	0x08029312
 8013e30:	2000a05a 	.word	0x2000a05a

08013e34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e36:	b08b      	sub	sp, #44	; 0x2c
 8013e38:	466d      	mov	r5, sp
 8013e3a:	e885 0006 	stmia.w	r5, {r1, r2}
 8013e3e:	461d      	mov	r5, r3
 8013e40:	2300      	movs	r3, #0
 8013e42:	9308      	str	r3, [sp, #32]
 8013e44:	2301      	movs	r3, #1
 8013e46:	9302      	str	r3, [sp, #8]
 8013e48:	6803      	ldr	r3, [r0, #0]
 8013e4a:	f8bd 6000 	ldrh.w	r6, [sp]
 8013e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e50:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013e54:	4604      	mov	r4, r0
 8013e56:	4798      	blx	r3
 8013e58:	463a      	mov	r2, r7
 8013e5a:	4631      	mov	r1, r6
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	4620      	mov	r0, r4
 8013e60:	f7ff ff20 	bl	8013ca4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013e64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013e68:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013e6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013e70:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013e74:	4b0e      	ldr	r3, [pc, #56]	; (8013eb0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8013e76:	9003      	str	r0, [sp, #12]
 8013e78:	881b      	ldrh	r3, [r3, #0]
 8013e7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013e84:	9505      	str	r5, [sp, #20]
 8013e86:	f7fa fb39 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 8013e8a:	6803      	ldr	r3, [r0, #0]
 8013e8c:	6a1b      	ldr	r3, [r3, #32]
 8013e8e:	4798      	blx	r3
 8013e90:	23ff      	movs	r3, #255	; 0xff
 8013e92:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013e96:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8013e9a:	6860      	ldr	r0, [r4, #4]
 8013e9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013ea0:	6803      	ldr	r3, [r0, #0]
 8013ea2:	a902      	add	r1, sp, #8
 8013ea4:	685b      	ldr	r3, [r3, #4]
 8013ea6:	4798      	blx	r3
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	b00b      	add	sp, #44	; 0x2c
 8013eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	2000a05a 	.word	0x2000a05a

08013eb4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013eb4:	b570      	push	{r4, r5, r6, lr}
 8013eb6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8013eba:	4604      	mov	r4, r0
 8013ebc:	b19b      	cbz	r3, 8013ee6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013ebe:	2002      	movs	r0, #2
 8013ec0:	f7fc ffce 	bl	8010e60 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013eca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8013ece:	6823      	ldr	r3, [r4, #0]
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8013ed6:	f7ff fd39 	bl	801394c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013eda:	462b      	mov	r3, r5
 8013edc:	4601      	mov	r1, r0
 8013ede:	4620      	mov	r0, r4
 8013ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ee4:	4718      	bx	r3
 8013ee6:	bd70      	pop	{r4, r5, r6, pc}

08013ee8 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8013ee8:	4770      	bx	lr

08013eea <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013eea:	4770      	bx	lr

08013eec <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013eec:	2000      	movs	r0, #0
 8013eee:	4770      	bx	lr

08013ef0 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013ef0:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013ef4:	1a13      	subs	r3, r2, r0
 8013ef6:	4258      	negs	r0, r3
 8013ef8:	4158      	adcs	r0, r3
 8013efa:	4770      	bx	lr

08013efc <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013efc:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013f00:	1a9b      	subs	r3, r3, r2
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	bfdc      	itt	le
 8013f06:	6882      	ldrle	r2, [r0, #8]
 8013f08:	189b      	addle	r3, r3, r2
 8013f0a:	2b01      	cmp	r3, #1
 8013f0c:	bfcc      	ite	gt
 8013f0e:	2000      	movgt	r0, #0
 8013f10:	2001      	movle	r0, #1
 8013f12:	4770      	bx	lr

08013f14 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013f14:	6902      	ldr	r2, [r0, #16]
 8013f16:	6840      	ldr	r0, [r0, #4]
 8013f18:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8013f1c:	4770      	bx	lr

08013f1e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013f1e:	6803      	ldr	r3, [r0, #0]
 8013f20:	691b      	ldr	r3, [r3, #16]
 8013f22:	4718      	bx	r3

08013f24 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013f24:	4770      	bx	lr

08013f26 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013f26:	4770      	bx	lr

08013f28 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013f28:	b570      	push	{r4, r5, r6, lr}
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	7203      	strb	r3, [r0, #8]
 8013f2e:	4604      	mov	r4, r0
 8013f30:	6840      	ldr	r0, [r0, #4]
 8013f32:	6803      	ldr	r3, [r0, #0]
 8013f34:	699b      	ldr	r3, [r3, #24]
 8013f36:	4798      	blx	r3
 8013f38:	6803      	ldr	r3, [r0, #0]
 8013f3a:	2b08      	cmp	r3, #8
 8013f3c:	4605      	mov	r5, r0
 8013f3e:	d01e      	beq.n	8013f7e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8013f40:	d80b      	bhi.n	8013f5a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013f42:	2b02      	cmp	r3, #2
 8013f44:	d027      	beq.n	8013f96 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8013f46:	2b04      	cmp	r3, #4
 8013f48:	d011      	beq.n	8013f6e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8013f4a:	2b01      	cmp	r3, #1
 8013f4c:	d028      	beq.n	8013fa0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013f4e:	4b17      	ldr	r3, [pc, #92]	; (8013fac <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8013f50:	4a17      	ldr	r2, [pc, #92]	; (8013fb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8013f52:	4818      	ldr	r0, [pc, #96]	; (8013fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8013f54:	218c      	movs	r1, #140	; 0x8c
 8013f56:	f011 f8ad 	bl	80250b4 <__assert_func>
 8013f5a:	2b40      	cmp	r3, #64	; 0x40
 8013f5c:	d020      	beq.n	8013fa0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013f5e:	d801      	bhi.n	8013f64 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013f60:	2b20      	cmp	r3, #32
 8013f62:	e7f3      	b.n	8013f4c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8013f64:	2b80      	cmp	r3, #128	; 0x80
 8013f66:	d01b      	beq.n	8013fa0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f6c:	e7ee      	b.n	8013f4c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8013f6e:	6823      	ldr	r3, [r4, #0]
 8013f70:	7f01      	ldrb	r1, [r0, #28]
 8013f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f74:	4620      	mov	r0, r4
 8013f76:	4798      	blx	r3
 8013f78:	6823      	ldr	r3, [r4, #0]
 8013f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f7c:	e006      	b.n	8013f8c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013f7e:	6823      	ldr	r3, [r4, #0]
 8013f80:	7f01      	ldrb	r1, [r0, #28]
 8013f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f84:	4620      	mov	r0, r4
 8013f86:	4798      	blx	r3
 8013f88:	6823      	ldr	r3, [r4, #0]
 8013f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f8c:	4629      	mov	r1, r5
 8013f8e:	4620      	mov	r0, r4
 8013f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f94:	4718      	bx	r3
 8013f96:	6823      	ldr	r3, [r4, #0]
 8013f98:	4620      	mov	r0, r4
 8013f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f9c:	4798      	blx	r3
 8013f9e:	e7f3      	b.n	8013f88 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8013fa0:	6823      	ldr	r3, [r4, #0]
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fa6:	4798      	blx	r3
 8013fa8:	e7e6      	b.n	8013f78 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8013faa:	bf00      	nop
 8013fac:	080297f1 	.word	0x080297f1
 8013fb0:	08029900 	.word	0x08029900
 8013fb4:	08029816 	.word	0x08029816

08013fb8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013fb8:	b570      	push	{r4, r5, r6, lr}
 8013fba:	4604      	mov	r4, r0
 8013fbc:	460e      	mov	r6, r1
 8013fbe:	6860      	ldr	r0, [r4, #4]
 8013fc0:	6803      	ldr	r3, [r0, #0]
 8013fc2:	685b      	ldr	r3, [r3, #4]
 8013fc4:	4798      	blx	r3
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d1f9      	bne.n	8013fbe <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013fca:	4d0d      	ldr	r5, [pc, #52]	; (8014000 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013fcc:	6828      	ldr	r0, [r5, #0]
 8013fce:	6803      	ldr	r3, [r0, #0]
 8013fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013fd2:	4798      	blx	r3
 8013fd4:	f7fd f9de 	bl	8011394 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013fd8:	6828      	ldr	r0, [r5, #0]
 8013fda:	2101      	movs	r1, #1
 8013fdc:	f7ff ff84 	bl	8013ee8 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8013fe0:	6860      	ldr	r0, [r4, #4]
 8013fe2:	6803      	ldr	r3, [r0, #0]
 8013fe4:	4631      	mov	r1, r6
 8013fe6:	689b      	ldr	r3, [r3, #8]
 8013fe8:	4798      	blx	r3
 8013fea:	6823      	ldr	r3, [r4, #0]
 8013fec:	4620      	mov	r0, r4
 8013fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff0:	4798      	blx	r3
 8013ff2:	6828      	ldr	r0, [r5, #0]
 8013ff4:	6803      	ldr	r3, [r0, #0]
 8013ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013ffc:	4718      	bx	r3
 8013ffe:	bf00      	nop
 8014000:	2000a060 	.word	0x2000a060

08014004 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014004:	b508      	push	{r3, lr}
 8014006:	f7fd f9ab 	bl	8011360 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801400a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801400e:	f7fd b9b5 	b.w	801137c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014012 <_ZN8touchgfx13DMA_Interface5startEv>:
 8014012:	b510      	push	{r4, lr}
 8014014:	4604      	mov	r4, r0
 8014016:	6840      	ldr	r0, [r0, #4]
 8014018:	6803      	ldr	r3, [r0, #0]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	4798      	blx	r3
 801401e:	b948      	cbnz	r0, 8014034 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014020:	7a63      	ldrb	r3, [r4, #9]
 8014022:	b13b      	cbz	r3, 8014034 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014024:	7a23      	ldrb	r3, [r4, #8]
 8014026:	b92b      	cbnz	r3, 8014034 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014028:	6823      	ldr	r3, [r4, #0]
 801402a:	4620      	mov	r0, r4
 801402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801402e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014032:	4718      	bx	r3
 8014034:	bd10      	pop	{r4, pc}
	...

08014038 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014038:	b510      	push	{r4, lr}
 801403a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801403e:	1b12      	subs	r2, r2, r4
 8014040:	2a00      	cmp	r2, #0
 8014042:	bfdc      	itt	le
 8014044:	6883      	ldrle	r3, [r0, #8]
 8014046:	18d2      	addle	r2, r2, r3
 8014048:	2a01      	cmp	r2, #1
 801404a:	dd18      	ble.n	801407e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801404c:	6843      	ldr	r3, [r0, #4]
 801404e:	f101 021c 	add.w	r2, r1, #28
 8014052:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8014056:	f851 4b04 	ldr.w	r4, [r1], #4
 801405a:	f843 4b04 	str.w	r4, [r3], #4
 801405e:	4291      	cmp	r1, r2
 8014060:	d1f9      	bne.n	8014056 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8014062:	880a      	ldrh	r2, [r1, #0]
 8014064:	801a      	strh	r2, [r3, #0]
 8014066:	788a      	ldrb	r2, [r1, #2]
 8014068:	709a      	strb	r2, [r3, #2]
 801406a:	68c3      	ldr	r3, [r0, #12]
 801406c:	6882      	ldr	r2, [r0, #8]
 801406e:	f3bf 8f5b 	dmb	ish
 8014072:	3301      	adds	r3, #1
 8014074:	429a      	cmp	r2, r3
 8014076:	bfd8      	it	le
 8014078:	1a9b      	suble	r3, r3, r2
 801407a:	60c3      	str	r3, [r0, #12]
 801407c:	bd10      	pop	{r4, pc}
 801407e:	4b03      	ldr	r3, [pc, #12]	; (801408c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8014080:	4a03      	ldr	r2, [pc, #12]	; (8014090 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8014082:	4804      	ldr	r0, [pc, #16]	; (8014094 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8014084:	2139      	movs	r1, #57	; 0x39
 8014086:	f011 f815 	bl	80250b4 <__assert_func>
 801408a:	bf00      	nop
 801408c:	0802983c 	.word	0x0802983c
 8014090:	08029930 	.word	0x08029930
 8014094:	08029816 	.word	0x08029816

08014098 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014098:	b510      	push	{r4, lr}
 801409a:	6803      	ldr	r3, [r0, #0]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	4604      	mov	r4, r0
 80140a0:	4798      	blx	r3
 80140a2:	b128      	cbz	r0, 80140b0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80140a4:	4b07      	ldr	r3, [pc, #28]	; (80140c4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80140a6:	4a08      	ldr	r2, [pc, #32]	; (80140c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80140a8:	4808      	ldr	r0, [pc, #32]	; (80140cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80140aa:	213f      	movs	r1, #63	; 0x3f
 80140ac:	f011 f802 	bl	80250b4 <__assert_func>
 80140b0:	6923      	ldr	r3, [r4, #16]
 80140b2:	68a2      	ldr	r2, [r4, #8]
 80140b4:	f3bf 8f5b 	dmb	ish
 80140b8:	3301      	adds	r3, #1
 80140ba:	429a      	cmp	r2, r3
 80140bc:	bfd8      	it	le
 80140be:	1a9b      	suble	r3, r3, r2
 80140c0:	6123      	str	r3, [r4, #16]
 80140c2:	bd10      	pop	{r4, pc}
 80140c4:	0802985f 	.word	0x0802985f
 80140c8:	0802997e 	.word	0x0802997e
 80140cc:	08029816 	.word	0x08029816

080140d0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80140d0:	b570      	push	{r4, r5, r6, lr}
 80140d2:	4604      	mov	r4, r0
 80140d4:	6840      	ldr	r0, [r0, #4]
 80140d6:	6803      	ldr	r3, [r0, #0]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	4798      	blx	r3
 80140dc:	4605      	mov	r5, r0
 80140de:	b930      	cbnz	r0, 80140ee <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80140e0:	7a23      	ldrb	r3, [r4, #8]
 80140e2:	b123      	cbz	r3, 80140ee <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80140e4:	6860      	ldr	r0, [r4, #4]
 80140e6:	6803      	ldr	r3, [r0, #0]
 80140e8:	695b      	ldr	r3, [r3, #20]
 80140ea:	4798      	blx	r3
 80140ec:	7225      	strb	r5, [r4, #8]
 80140ee:	6860      	ldr	r0, [r4, #4]
 80140f0:	6803      	ldr	r3, [r0, #0]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	4798      	blx	r3
 80140f6:	b928      	cbnz	r0, 8014104 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80140f8:	6823      	ldr	r3, [r4, #0]
 80140fa:	4620      	mov	r0, r4
 80140fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014102:	4718      	bx	r3
 8014104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014108:	f7fd b950 	b.w	80113ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801410c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801410c:	b510      	push	{r4, lr}
 801410e:	4c04      	ldr	r4, [pc, #16]	; (8014120 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014110:	6082      	str	r2, [r0, #8]
 8014112:	2200      	movs	r2, #0
 8014114:	e9c0 4100 	strd	r4, r1, [r0]
 8014118:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801411c:	bd10      	pop	{r4, pc}
 801411e:	bf00      	nop
 8014120:	080298e4 	.word	0x080298e4

08014124 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014124:	6840      	ldr	r0, [r0, #4]
 8014126:	6803      	ldr	r3, [r0, #0]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	4718      	bx	r3

0801412c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801412c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8014130:	4770      	bx	lr

08014132 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8014132:	b510      	push	{r4, lr}
 8014134:	4604      	mov	r4, r0
 8014136:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014138:	b150      	cbz	r0, 8014150 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801413a:	6803      	ldr	r3, [r0, #0]
 801413c:	68db      	ldr	r3, [r3, #12]
 801413e:	4798      	blx	r3
 8014140:	b130      	cbz	r0, 8014150 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8014142:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014144:	6803      	ldr	r3, [r0, #0]
 8014146:	4621      	mov	r1, r4
 8014148:	689b      	ldr	r3, [r3, #8]
 801414a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801414e:	4718      	bx	r3
 8014150:	bd10      	pop	{r4, pc}

08014152 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8014152:	b570      	push	{r4, r5, r6, lr}
 8014154:	790b      	ldrb	r3, [r1, #4]
 8014156:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801415a:	2b00      	cmp	r3, #0
 801415c:	bf0c      	ite	eq
 801415e:	2301      	moveq	r3, #1
 8014160:	2300      	movne	r3, #0
 8014162:	4604      	mov	r4, r0
 8014164:	460e      	mov	r6, r1
 8014166:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801416a:	d109      	bne.n	8014180 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801416c:	b14d      	cbz	r5, 8014182 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801416e:	7933      	ldrb	r3, [r6, #4]
 8014170:	2b01      	cmp	r3, #1
 8014172:	d10c      	bne.n	801418e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	4620      	mov	r0, r4
 8014178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801417a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801417e:	4718      	bx	r3
 8014180:	b12d      	cbz	r5, 801418e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	4620      	mov	r0, r4
 8014186:	695b      	ldr	r3, [r3, #20]
 8014188:	4798      	blx	r3
 801418a:	2d00      	cmp	r5, #0
 801418c:	d1ef      	bne.n	801416e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801418e:	bd70      	pop	{r4, r5, r6, pc}

08014190 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8014190:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8014194:	b133      	cbz	r3, 80141a4 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8014196:	790b      	ldrb	r3, [r1, #4]
 8014198:	2b01      	cmp	r3, #1
 801419a:	bf01      	itttt	eq
 801419c:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 801419e:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 80141a0:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 80141a2:	8603      	strheq	r3, [r0, #48]	; 0x30
 80141a4:	f7ff bfd5 	b.w	8014152 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

080141a8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80141a8:	2200      	movs	r2, #0
 80141aa:	8002      	strh	r2, [r0, #0]
 80141ac:	8042      	strh	r2, [r0, #2]
 80141ae:	8082      	strh	r2, [r0, #4]
 80141b0:	80c2      	strh	r2, [r0, #6]
 80141b2:	4770      	bx	lr

080141b4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80141b4:	b570      	push	{r4, r5, r6, lr}
 80141b6:	6803      	ldr	r3, [r0, #0]
 80141b8:	4604      	mov	r4, r0
 80141ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141bc:	4615      	mov	r5, r2
 80141be:	4798      	blx	r3
 80141c0:	6823      	ldr	r3, [r4, #0]
 80141c2:	4629      	mov	r1, r5
 80141c4:	4620      	mov	r0, r4
 80141c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80141c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141cc:	4718      	bx	r3
	...

080141d0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80141d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141d2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80141d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141d8:	4299      	cmp	r1, r3
 80141da:	d029      	beq.n	8014230 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80141dc:	4b15      	ldr	r3, [pc, #84]	; (8014234 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	b92b      	cbnz	r3, 80141ee <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80141e2:	4b15      	ldr	r3, [pc, #84]	; (8014238 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80141e4:	4a15      	ldr	r2, [pc, #84]	; (801423c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80141e6:	21b1      	movs	r1, #177	; 0xb1
 80141e8:	4815      	ldr	r0, [pc, #84]	; (8014240 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80141ea:	f010 ff63 	bl	80250b4 <__assert_func>
 80141ee:	4a15      	ldr	r2, [pc, #84]	; (8014244 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80141f0:	8812      	ldrh	r2, [r2, #0]
 80141f2:	428a      	cmp	r2, r1
 80141f4:	d803      	bhi.n	80141fe <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80141f6:	4b14      	ldr	r3, [pc, #80]	; (8014248 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80141f8:	4a10      	ldr	r2, [pc, #64]	; (801423c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80141fa:	21b2      	movs	r1, #178	; 0xb2
 80141fc:	e7f4      	b.n	80141e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80141fe:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8014202:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8014206:	4b11      	ldr	r3, [pc, #68]	; (801424c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8014208:	7854      	ldrb	r4, [r2, #1]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8014210:	682b      	ldr	r3, [r5, #0]
 8014212:	69de      	ldr	r6, [r3, #28]
 8014214:	4b0e      	ldr	r3, [pc, #56]	; (8014250 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8014216:	6818      	ldr	r0, [r3, #0]
 8014218:	f7fc f8e6 	bl	80103e8 <_ZNK8touchgfx5Texts7getTextEt>
 801421c:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8014220:	2300      	movs	r3, #0
 8014222:	4602      	mov	r2, r0
 8014224:	9300      	str	r3, [sp, #0]
 8014226:	4621      	mov	r1, r4
 8014228:	4628      	mov	r0, r5
 801422a:	47b0      	blx	r6
 801422c:	b002      	add	sp, #8
 801422e:	bd70      	pop	{r4, r5, r6, pc}
 8014230:	2000      	movs	r0, #0
 8014232:	e7fb      	b.n	801422c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8014234:	2000a0b0 	.word	0x2000a0b0
 8014238:	08028e9b 	.word	0x08028e9b
 801423c:	08029b04 	.word	0x08029b04
 8014240:	08028edd 	.word	0x08028edd
 8014244:	2000a0b4 	.word	0x2000a0b4
 8014248:	08028f06 	.word	0x08028f06
 801424c:	2000a0b8 	.word	0x2000a0b8
 8014250:	2000a0bc 	.word	0x2000a0bc

08014254 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8014254:	b570      	push	{r4, r5, r6, lr}
 8014256:	6803      	ldr	r3, [r0, #0]
 8014258:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801425a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801425c:	4b11      	ldr	r3, [pc, #68]	; (80142a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	4604      	mov	r4, r0
 8014262:	b28d      	uxth	r5, r1
 8014264:	b92b      	cbnz	r3, 8014272 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8014266:	4b10      	ldr	r3, [pc, #64]	; (80142a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8014268:	4a10      	ldr	r2, [pc, #64]	; (80142ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801426a:	21b1      	movs	r1, #177	; 0xb1
 801426c:	4810      	ldr	r0, [pc, #64]	; (80142b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801426e:	f010 ff21 	bl	80250b4 <__assert_func>
 8014272:	4910      	ldr	r1, [pc, #64]	; (80142b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8014274:	8809      	ldrh	r1, [r1, #0]
 8014276:	4291      	cmp	r1, r2
 8014278:	d803      	bhi.n	8014282 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801427a:	4b0f      	ldr	r3, [pc, #60]	; (80142b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801427c:	4a0b      	ldr	r2, [pc, #44]	; (80142ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801427e:	21b2      	movs	r1, #178	; 0xb2
 8014280:	e7f4      	b.n	801426c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8014282:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8014286:	4b0d      	ldr	r3, [pc, #52]	; (80142bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801428e:	6803      	ldr	r3, [r0, #0]
 8014290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014292:	4798      	blx	r3
 8014294:	1a29      	subs	r1, r5, r0
 8014296:	4633      	mov	r3, r6
 8014298:	4620      	mov	r0, r4
 801429a:	b209      	sxth	r1, r1
 801429c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142a0:	4718      	bx	r3
 80142a2:	bf00      	nop
 80142a4:	2000a0b0 	.word	0x2000a0b0
 80142a8:	08028e9b 	.word	0x08028e9b
 80142ac:	08029b04 	.word	0x08029b04
 80142b0:	08028edd 	.word	0x08028edd
 80142b4:	2000a0b4 	.word	0x2000a0b4
 80142b8:	08028f06 	.word	0x08028f06
 80142bc:	2000a0b8 	.word	0x2000a0b8

080142c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80142c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142c4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80142c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142ca:	4293      	cmp	r3, r2
 80142cc:	b08c      	sub	sp, #48	; 0x30
 80142ce:	4604      	mov	r4, r0
 80142d0:	4688      	mov	r8, r1
 80142d2:	d05f      	beq.n	8014394 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80142d4:	4e31      	ldr	r6, [pc, #196]	; (801439c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 80142d6:	6832      	ldr	r2, [r6, #0]
 80142d8:	b92a      	cbnz	r2, 80142e6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 80142da:	4b31      	ldr	r3, [pc, #196]	; (80143a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 80142dc:	4a31      	ldr	r2, [pc, #196]	; (80143a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80142de:	21b1      	movs	r1, #177	; 0xb1
 80142e0:	4831      	ldr	r0, [pc, #196]	; (80143a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 80142e2:	f010 fee7 	bl	80250b4 <__assert_func>
 80142e6:	4d31      	ldr	r5, [pc, #196]	; (80143ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 80142e8:	8829      	ldrh	r1, [r5, #0]
 80142ea:	4299      	cmp	r1, r3
 80142ec:	d803      	bhi.n	80142f6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80142ee:	4b30      	ldr	r3, [pc, #192]	; (80143b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80142f0:	4a2c      	ldr	r2, [pc, #176]	; (80143a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80142f2:	21b2      	movs	r1, #178	; 0xb2
 80142f4:	e7f4      	b.n	80142e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80142f6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80142fa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80142fe:	4b2d      	ldr	r3, [pc, #180]	; (80143b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014306:	2a00      	cmp	r2, #0
 8014308:	d044      	beq.n	8014394 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801430a:	784b      	ldrb	r3, [r1, #1]
 801430c:	9207      	str	r2, [sp, #28]
 801430e:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8014312:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014316:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801431a:	4b27      	ldr	r3, [pc, #156]	; (80143b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801431c:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8014326:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801432a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801432e:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8014332:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8014336:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014338:	9009      	str	r0, [sp, #36]	; 0x24
 801433a:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801433e:	f88d 9020 	strb.w	r9, [sp, #32]
 8014342:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8014346:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801434a:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801434e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8014352:	b10a      	cbz	r2, 8014358 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8014354:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8014356:	b907      	cbnz	r7, 801435a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8014358:	689f      	ldr	r7, [r3, #8]
 801435a:	f10d 0914 	add.w	r9, sp, #20
 801435e:	4621      	mov	r1, r4
 8014360:	4648      	mov	r0, r9
 8014362:	f002 ff94 	bl	801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014366:	6833      	ldr	r3, [r6, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d0b6      	beq.n	80142da <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801436c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801436e:	882b      	ldrh	r3, [r5, #0]
 8014370:	428b      	cmp	r3, r1
 8014372:	d9bc      	bls.n	80142ee <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8014374:	4b11      	ldr	r3, [pc, #68]	; (80143bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8014376:	6818      	ldr	r0, [r3, #0]
 8014378:	f7fc f836 	bl	80103e8 <_ZNK8touchgfx5Texts7getTextEt>
 801437c:	2300      	movs	r3, #0
 801437e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014382:	ab07      	add	r3, sp, #28
 8014384:	9001      	str	r0, [sp, #4]
 8014386:	9300      	str	r3, [sp, #0]
 8014388:	e899 0006 	ldmia.w	r9, {r1, r2}
 801438c:	4643      	mov	r3, r8
 801438e:	4638      	mov	r0, r7
 8014390:	f7fb ffbb 	bl	801030a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014394:	b00c      	add	sp, #48	; 0x30
 8014396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801439a:	bf00      	nop
 801439c:	2000a0b0 	.word	0x2000a0b0
 80143a0:	08028e9b 	.word	0x08028e9b
 80143a4:	08029b04 	.word	0x08029b04
 80143a8:	08028edd 	.word	0x08028edd
 80143ac:	2000a0b4 	.word	0x2000a0b4
 80143b0:	08028f06 	.word	0x08028f06
 80143b4:	2000a0b8 	.word	0x2000a0b8
 80143b8:	2000a060 	.word	0x2000a060
 80143bc:	2000a0bc 	.word	0x2000a0bc

080143c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80143c0:	b40e      	push	{r1, r2, r3}
 80143c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143c6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80143c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143cc:	4293      	cmp	r3, r2
 80143ce:	b09b      	sub	sp, #108	; 0x6c
 80143d0:	4604      	mov	r4, r0
 80143d2:	d061      	beq.n	8014498 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 80143d4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80144ac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 80143d8:	aa24      	add	r2, sp, #144	; 0x90
 80143da:	9203      	str	r2, [sp, #12]
 80143dc:	f8da 2000 	ldr.w	r2, [sl]
 80143e0:	b92a      	cbnz	r2, 80143ee <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 80143e2:	4b2e      	ldr	r3, [pc, #184]	; (801449c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 80143e4:	4a2e      	ldr	r2, [pc, #184]	; (80144a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 80143e6:	21b1      	movs	r1, #177	; 0xb1
 80143e8:	482e      	ldr	r0, [pc, #184]	; (80144a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 80143ea:	f010 fe63 	bl	80250b4 <__assert_func>
 80143ee:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80144b0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 80143f2:	f8b8 1000 	ldrh.w	r1, [r8]
 80143f6:	4299      	cmp	r1, r3
 80143f8:	d803      	bhi.n	8014402 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80143fa:	4b2b      	ldr	r3, [pc, #172]	; (80144a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 80143fc:	4a28      	ldr	r2, [pc, #160]	; (80144a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 80143fe:	21b2      	movs	r1, #178	; 0xb2
 8014400:	e7f2      	b.n	80143e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8014402:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80144b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8014406:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801440a:	f8d9 3000 	ldr.w	r3, [r9]
 801440e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	4638      	mov	r0, r7
 8014416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014418:	4798      	blx	r3
 801441a:	4606      	mov	r6, r0
 801441c:	b205      	sxth	r5, r0
 801441e:	a804      	add	r0, sp, #16
 8014420:	f003 fb49 	bl	8017ab6 <_ZN8touchgfx12TextProviderC1Ev>
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	4638      	mov	r0, r7
 8014428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801442a:	4798      	blx	r3
 801442c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801442e:	9a03      	ldr	r2, [sp, #12]
 8014430:	4603      	mov	r3, r0
 8014432:	a804      	add	r0, sp, #16
 8014434:	f003 fb84 	bl	8017b40 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8014438:	f8da 3000 	ldr.w	r3, [sl]
 801443c:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8014440:	2b00      	cmp	r3, #0
 8014442:	d0ce      	beq.n	80143e2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8014444:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014446:	f8b8 0000 	ldrh.w	r0, [r8]
 801444a:	4290      	cmp	r0, r2
 801444c:	d9d5      	bls.n	80143fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801444e:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8014452:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8014456:	787a      	ldrb	r2, [r7, #1]
 8014458:	f8d9 3000 	ldr.w	r3, [r9]
 801445c:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8014460:	9700      	str	r7, [sp, #0]
 8014462:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014466:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801446a:	a804      	add	r0, sp, #16
 801446c:	f001 fa7a 	bl	8015964 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8014470:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8014474:	18a9      	adds	r1, r5, r2
 8014476:	2900      	cmp	r1, #0
 8014478:	b203      	sxth	r3, r0
 801447a:	dd0b      	ble.n	8014494 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 801447c:	3b01      	subs	r3, #1
 801447e:	fb13 f302 	smulbb	r3, r3, r2
 8014482:	fb16 3300 	smlabb	r3, r6, r0, r3
 8014486:	b21d      	sxth	r5, r3
 8014488:	4628      	mov	r0, r5
 801448a:	b01b      	add	sp, #108	; 0x6c
 801448c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014490:	b003      	add	sp, #12
 8014492:	4770      	bx	lr
 8014494:	2b00      	cmp	r3, #0
 8014496:	dcf7      	bgt.n	8014488 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8014498:	2500      	movs	r5, #0
 801449a:	e7f5      	b.n	8014488 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801449c:	08028e9b 	.word	0x08028e9b
 80144a0:	08029b04 	.word	0x08029b04
 80144a4:	08028edd 	.word	0x08028edd
 80144a8:	08028f06 	.word	0x08028f06
 80144ac:	2000a0b0 	.word	0x2000a0b0
 80144b0:	2000a0b4 	.word	0x2000a0b4
 80144b4:	2000a0b8 	.word	0x2000a0b8

080144b8 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80144b8:	b570      	push	{r4, r5, r6, lr}
 80144ba:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80144bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144c0:	4299      	cmp	r1, r3
 80144c2:	4604      	mov	r4, r0
 80144c4:	d01e      	beq.n	8014504 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80144c6:	6803      	ldr	r3, [r0, #0]
 80144c8:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80144ca:	4b0f      	ldr	r3, [pc, #60]	; (8014508 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	b92b      	cbnz	r3, 80144dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80144d0:	4b0e      	ldr	r3, [pc, #56]	; (801450c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80144d2:	4a0f      	ldr	r2, [pc, #60]	; (8014510 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80144d4:	21b1      	movs	r1, #177	; 0xb1
 80144d6:	480f      	ldr	r0, [pc, #60]	; (8014514 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80144d8:	f010 fdec 	bl	80250b4 <__assert_func>
 80144dc:	4b0e      	ldr	r3, [pc, #56]	; (8014518 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80144de:	881b      	ldrh	r3, [r3, #0]
 80144e0:	428b      	cmp	r3, r1
 80144e2:	d803      	bhi.n	80144ec <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80144e4:	4b0d      	ldr	r3, [pc, #52]	; (801451c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80144e6:	4a0a      	ldr	r2, [pc, #40]	; (8014510 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80144e8:	21b2      	movs	r1, #178	; 0xb2
 80144ea:	e7f4      	b.n	80144d6 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80144ec:	4b0c      	ldr	r3, [pc, #48]	; (8014520 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80144ee:	6818      	ldr	r0, [r3, #0]
 80144f0:	f7fb ff7a 	bl	80103e8 <_ZNK8touchgfx5Texts7getTextEt>
 80144f4:	2300      	movs	r3, #0
 80144f6:	4601      	mov	r1, r0
 80144f8:	46ac      	mov	ip, r5
 80144fa:	4620      	mov	r0, r4
 80144fc:	461a      	mov	r2, r3
 80144fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014502:	4760      	bx	ip
 8014504:	2000      	movs	r0, #0
 8014506:	bd70      	pop	{r4, r5, r6, pc}
 8014508:	2000a0b0 	.word	0x2000a0b0
 801450c:	08028e9b 	.word	0x08028e9b
 8014510:	08029b04 	.word	0x08029b04
 8014514:	08028edd 	.word	0x08028edd
 8014518:	2000a0b4 	.word	0x2000a0b4
 801451c:	08028f06 	.word	0x08028f06
 8014520:	2000a0bc 	.word	0x2000a0bc

08014524 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8014524:	b538      	push	{r3, r4, r5, lr}
 8014526:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801452c:	429a      	cmp	r2, r3
 801452e:	4604      	mov	r4, r0
 8014530:	d014      	beq.n	801455c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8014532:	6803      	ldr	r3, [r0, #0]
 8014534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014536:	4798      	blx	r3
 8014538:	6823      	ldr	r3, [r4, #0]
 801453a:	4605      	mov	r5, r0
 801453c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801453e:	4620      	mov	r0, r4
 8014540:	4798      	blx	r3
 8014542:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014546:	b22d      	sxth	r5, r5
 8014548:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801454c:	4601      	mov	r1, r0
 801454e:	bf06      	itte	eq
 8014550:	4602      	moveq	r2, r0
 8014552:	4629      	moveq	r1, r5
 8014554:	462a      	movne	r2, r5
 8014556:	4620      	mov	r0, r4
 8014558:	f7fa fd88 	bl	800f06c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801455c:	bd38      	pop	{r3, r4, r5, pc}

0801455e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801455e:	888a      	ldrh	r2, [r1, #4]
 8014560:	8582      	strh	r2, [r0, #44]	; 0x2c
 8014562:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8014566:	b922      	cbnz	r2, 8014572 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8014568:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801456c:	b90b      	cbnz	r3, 8014572 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801456e:	f7ff bfd9 	b.w	8014524 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8014572:	4770      	bx	lr

08014574 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014574:	2300      	movs	r3, #0
 8014576:	8083      	strh	r3, [r0, #4]
 8014578:	80c3      	strh	r3, [r0, #6]
 801457a:	8003      	strh	r3, [r0, #0]
 801457c:	8043      	strh	r3, [r0, #2]
 801457e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8014582:	2bff      	cmp	r3, #255	; 0xff
 8014584:	bf01      	itttt	eq
 8014586:	890b      	ldrheq	r3, [r1, #8]
 8014588:	8083      	strheq	r3, [r0, #4]
 801458a:	894b      	ldrheq	r3, [r1, #10]
 801458c:	80c3      	strheq	r3, [r0, #6]
 801458e:	4770      	bx	lr

08014590 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8014590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014592:	4604      	mov	r4, r0
 8014594:	6808      	ldr	r0, [r1, #0]
 8014596:	6849      	ldr	r1, [r1, #4]
 8014598:	466b      	mov	r3, sp
 801459a:	c303      	stmia	r3!, {r0, r1}
 801459c:	6823      	ldr	r3, [r4, #0]
 801459e:	4669      	mov	r1, sp
 80145a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145a2:	4620      	mov	r0, r4
 80145a4:	4798      	blx	r3
 80145a6:	4b08      	ldr	r3, [pc, #32]	; (80145c8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80145ae:	b10a      	cbz	r2, 80145b4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80145b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80145b2:	b900      	cbnz	r0, 80145b6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80145b4:	6898      	ldr	r0, [r3, #8]
 80145b6:	6803      	ldr	r3, [r0, #0]
 80145b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80145ba:	699d      	ldr	r5, [r3, #24]
 80145bc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80145c0:	4669      	mov	r1, sp
 80145c2:	47a8      	blx	r5
 80145c4:	b003      	add	sp, #12
 80145c6:	bd30      	pop	{r4, r5, pc}
 80145c8:	2000a060 	.word	0x2000a060

080145cc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80145cc:	b570      	push	{r4, r5, r6, lr}
 80145ce:	880b      	ldrh	r3, [r1, #0]
 80145d0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80145d2:	4605      	mov	r5, r0
 80145d4:	8813      	ldrh	r3, [r2, #0]
 80145d6:	f825 3f30 	strh.w	r3, [r5, #48]!
 80145da:	4604      	mov	r4, r0
 80145dc:	4628      	mov	r0, r5
 80145de:	f004 fe57 	bl	8019290 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80145e2:	4606      	mov	r6, r0
 80145e4:	4628      	mov	r0, r5
 80145e6:	f004 fe8d 	bl	8019304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	4605      	mov	r5, r0
 80145ee:	b231      	sxth	r1, r6
 80145f0:	4620      	mov	r0, r4
 80145f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145f4:	4798      	blx	r3
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	b229      	sxth	r1, r5
 80145fa:	4620      	mov	r0, r4
 80145fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014602:	4718      	bx	r3

08014604 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8014604:	b510      	push	{r4, lr}
 8014606:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801460a:	2bff      	cmp	r3, #255	; 0xff
 801460c:	4604      	mov	r4, r0
 801460e:	d006      	beq.n	801461e <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8014610:	2300      	movs	r3, #0
 8014612:	8003      	strh	r3, [r0, #0]
 8014614:	8043      	strh	r3, [r0, #2]
 8014616:	8083      	strh	r3, [r0, #4]
 8014618:	80c3      	strh	r3, [r0, #6]
 801461a:	4620      	mov	r0, r4
 801461c:	bd10      	pop	{r4, pc}
 801461e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8014622:	b11b      	cbz	r3, 801462c <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8014624:	3130      	adds	r1, #48	; 0x30
 8014626:	f004 fea7 	bl	8019378 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801462a:	e7f6      	b.n	801461a <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801462c:	312e      	adds	r1, #46	; 0x2e
 801462e:	e7fa      	b.n	8014626 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08014630 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8014630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014634:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8014638:	b08a      	sub	sp, #40	; 0x28
 801463a:	4604      	mov	r4, r0
 801463c:	4688      	mov	r8, r1
 801463e:	2b00      	cmp	r3, #0
 8014640:	d044      	beq.n	80146cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8014642:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8014644:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014648:	a805      	add	r0, sp, #20
 801464a:	f004 fe21 	bl	8019290 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801464e:	4605      	mov	r5, r0
 8014650:	b206      	sxth	r6, r0
 8014652:	a805      	add	r0, sp, #20
 8014654:	f004 fe56 	bl	8019304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014658:	f9b8 2000 	ldrsh.w	r2, [r8]
 801465c:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8014660:	4417      	add	r7, r2
 8014662:	b2bf      	uxth	r7, r7
 8014664:	2300      	movs	r3, #0
 8014666:	fa0f fe87 	sxth.w	lr, r7
 801466a:	459e      	cmp	lr, r3
 801466c:	fa0f fc80 	sxth.w	ip, r0
 8014670:	9306      	str	r3, [sp, #24]
 8014672:	dd2d      	ble.n	80146d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8014674:	4296      	cmp	r6, r2
 8014676:	dd2b      	ble.n	80146d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8014678:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801467c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8014680:	4419      	add	r1, r3
 8014682:	b289      	uxth	r1, r1
 8014684:	fa0f f881 	sxth.w	r8, r1
 8014688:	f1b8 0f00 	cmp.w	r8, #0
 801468c:	dd20      	ble.n	80146d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801468e:	459c      	cmp	ip, r3
 8014690:	dd1e      	ble.n	80146d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8014692:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8014696:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801469a:	4576      	cmp	r6, lr
 801469c:	bfa8      	it	ge
 801469e:	463d      	movge	r5, r7
 80146a0:	45c4      	cmp	ip, r8
 80146a2:	bfa8      	it	ge
 80146a4:	4608      	movge	r0, r1
 80146a6:	1aad      	subs	r5, r5, r2
 80146a8:	1ac0      	subs	r0, r0, r3
 80146aa:	f8ad 501c 	strh.w	r5, [sp, #28]
 80146ae:	f8ad 001e 	strh.w	r0, [sp, #30]
 80146b2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80146b6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80146ba:	4b1f      	ldr	r3, [pc, #124]	; (8014738 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	b953      	cbnz	r3, 80146d6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 80146c0:	4b1e      	ldr	r3, [pc, #120]	; (801473c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 80146c2:	4a1f      	ldr	r2, [pc, #124]	; (8014740 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80146c4:	481f      	ldr	r0, [pc, #124]	; (8014744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 80146c6:	218b      	movs	r1, #139	; 0x8b
 80146c8:	f010 fcf4 	bl	80250b4 <__assert_func>
 80146cc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80146ce:	e7b9      	b.n	8014644 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80146d0:	2300      	movs	r3, #0
 80146d2:	9307      	str	r3, [sp, #28]
 80146d4:	e7f1      	b.n	80146ba <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80146d6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80146da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146de:	429a      	cmp	r2, r3
 80146e0:	d026      	beq.n	8014730 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80146e2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	dd22      	ble.n	8014730 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80146ea:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	dd1e      	ble.n	8014730 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80146f2:	2300      	movs	r3, #0
 80146f4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80146f8:	6823      	ldr	r3, [r4, #0]
 80146fa:	a908      	add	r1, sp, #32
 80146fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146fe:	4620      	mov	r0, r4
 8014700:	4798      	blx	r3
 8014702:	4b11      	ldr	r3, [pc, #68]	; (8014748 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801470a:	b10a      	cbz	r2, 8014710 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801470c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801470e:	b900      	cbnz	r0, 8014712 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8014710:	6898      	ldr	r0, [r3, #8]
 8014712:	6801      	ldr	r1, [r0, #0]
 8014714:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014718:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801471c:	2501      	movs	r5, #1
 801471e:	9502      	str	r5, [sp, #8]
 8014720:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8014724:	9401      	str	r4, [sp, #4]
 8014726:	ac06      	add	r4, sp, #24
 8014728:	9400      	str	r4, [sp, #0]
 801472a:	688c      	ldr	r4, [r1, #8]
 801472c:	a905      	add	r1, sp, #20
 801472e:	47a0      	blx	r4
 8014730:	b00a      	add	sp, #40	; 0x28
 8014732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014736:	bf00      	nop
 8014738:	2000a0e8 	.word	0x2000a0e8
 801473c:	08029b98 	.word	0x08029b98
 8014740:	08029c6c 	.word	0x08029c6c
 8014744:	08029bd4 	.word	0x08029bd4
 8014748:	2000a060 	.word	0x2000a060

0801474c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801474c:	b570      	push	{r4, r5, r6, lr}
 801474e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014754:	4299      	cmp	r1, r3
 8014756:	4604      	mov	r4, r0
 8014758:	d01e      	beq.n	8014798 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801475a:	6803      	ldr	r3, [r0, #0]
 801475c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801475e:	4b0f      	ldr	r3, [pc, #60]	; (801479c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	b92b      	cbnz	r3, 8014770 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8014764:	4b0e      	ldr	r3, [pc, #56]	; (80147a0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8014766:	4a0f      	ldr	r2, [pc, #60]	; (80147a4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8014768:	21b1      	movs	r1, #177	; 0xb1
 801476a:	480f      	ldr	r0, [pc, #60]	; (80147a8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801476c:	f010 fca2 	bl	80250b4 <__assert_func>
 8014770:	4b0e      	ldr	r3, [pc, #56]	; (80147ac <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8014772:	881b      	ldrh	r3, [r3, #0]
 8014774:	428b      	cmp	r3, r1
 8014776:	d803      	bhi.n	8014780 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8014778:	4b0d      	ldr	r3, [pc, #52]	; (80147b0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801477a:	4a0a      	ldr	r2, [pc, #40]	; (80147a4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801477c:	21b2      	movs	r1, #178	; 0xb2
 801477e:	e7f4      	b.n	801476a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8014780:	4b0c      	ldr	r3, [pc, #48]	; (80147b4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8014782:	6818      	ldr	r0, [r3, #0]
 8014784:	f7fb fe30 	bl	80103e8 <_ZNK8touchgfx5Texts7getTextEt>
 8014788:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801478a:	4601      	mov	r1, r0
 801478c:	46ac      	mov	ip, r5
 801478e:	4620      	mov	r0, r4
 8014790:	2300      	movs	r3, #0
 8014792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014796:	4760      	bx	ip
 8014798:	2000      	movs	r0, #0
 801479a:	bd70      	pop	{r4, r5, r6, pc}
 801479c:	2000a0b0 	.word	0x2000a0b0
 80147a0:	08028e9b 	.word	0x08028e9b
 80147a4:	08029d18 	.word	0x08029d18
 80147a8:	08028edd 	.word	0x08028edd
 80147ac:	2000a0b4 	.word	0x2000a0b4
 80147b0:	08028f06 	.word	0x08028f06
 80147b4:	2000a0bc 	.word	0x2000a0bc

080147b8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 80147b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147bc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80147be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80147c2:	4293      	cmp	r3, r2
 80147c4:	b08c      	sub	sp, #48	; 0x30
 80147c6:	4604      	mov	r4, r0
 80147c8:	460e      	mov	r6, r1
 80147ca:	d05d      	beq.n	8014888 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80147cc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80148ac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 80147d0:	f8d8 2000 	ldr.w	r2, [r8]
 80147d4:	b92a      	cbnz	r2, 80147e2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 80147d6:	4b2e      	ldr	r3, [pc, #184]	; (8014890 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 80147d8:	4a2e      	ldr	r2, [pc, #184]	; (8014894 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80147da:	21b1      	movs	r1, #177	; 0xb1
 80147dc:	482e      	ldr	r0, [pc, #184]	; (8014898 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 80147de:	f010 fc69 	bl	80250b4 <__assert_func>
 80147e2:	4f2e      	ldr	r7, [pc, #184]	; (801489c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 80147e4:	8839      	ldrh	r1, [r7, #0]
 80147e6:	4299      	cmp	r1, r3
 80147e8:	d803      	bhi.n	80147f2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 80147ea:	4b2d      	ldr	r3, [pc, #180]	; (80148a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 80147ec:	4a29      	ldr	r2, [pc, #164]	; (8014894 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80147ee:	21b2      	movs	r1, #178	; 0xb2
 80147f0:	e7f4      	b.n	80147dc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 80147f2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80147f6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80147fa:	4b2a      	ldr	r3, [pc, #168]	; (80148a4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014802:	2a00      	cmp	r2, #0
 8014804:	d040      	beq.n	8014888 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8014806:	784b      	ldrb	r3, [r1, #1]
 8014808:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801480c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8014810:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8014814:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8014818:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801481c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801481e:	9207      	str	r2, [sp, #28]
 8014820:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8014824:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014828:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801482c:	f88d 9020 	strb.w	r9, [sp, #32]
 8014830:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8014834:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8014838:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801483c:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8014840:	9009      	str	r0, [sp, #36]	; 0x24
 8014842:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8014846:	f7f9 fe59 	bl	800e4fc <_ZN8touchgfx3HAL3lcdEv>
 801484a:	ad05      	add	r5, sp, #20
 801484c:	4681      	mov	r9, r0
 801484e:	4621      	mov	r1, r4
 8014850:	4628      	mov	r0, r5
 8014852:	f002 fd1c 	bl	801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014856:	f8d8 3000 	ldr.w	r3, [r8]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d0bb      	beq.n	80147d6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801485e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8014860:	883b      	ldrh	r3, [r7, #0]
 8014862:	428b      	cmp	r3, r1
 8014864:	d9c1      	bls.n	80147ea <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8014866:	4b10      	ldr	r3, [pc, #64]	; (80148a8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8014868:	6818      	ldr	r0, [r3, #0]
 801486a:	f7fb fdbd 	bl	80103e8 <_ZNK8touchgfx5Texts7getTextEt>
 801486e:	2300      	movs	r3, #0
 8014870:	9303      	str	r3, [sp, #12]
 8014872:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014874:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8014878:	ab07      	add	r3, sp, #28
 801487a:	9300      	str	r3, [sp, #0]
 801487c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8014880:	4633      	mov	r3, r6
 8014882:	4648      	mov	r0, r9
 8014884:	f7fb fd41 	bl	801030a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014888:	b00c      	add	sp, #48	; 0x30
 801488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801488e:	bf00      	nop
 8014890:	08028e9b 	.word	0x08028e9b
 8014894:	08029d18 	.word	0x08029d18
 8014898:	08028edd 	.word	0x08028edd
 801489c:	2000a0b4 	.word	0x2000a0b4
 80148a0:	08028f06 	.word	0x08028f06
 80148a4:	2000a0b8 	.word	0x2000a0b8
 80148a8:	2000a0bc 	.word	0x2000a0bc
 80148ac:	2000a0b0 	.word	0x2000a0b0

080148b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80148b0:	b570      	push	{r4, r5, r6, lr}
 80148b2:	880b      	ldrh	r3, [r1, #0]
 80148b4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80148b6:	4604      	mov	r4, r0
 80148b8:	4608      	mov	r0, r1
 80148ba:	460d      	mov	r5, r1
 80148bc:	f004 fce8 	bl	8019290 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80148c0:	4606      	mov	r6, r0
 80148c2:	4628      	mov	r0, r5
 80148c4:	f004 fd1e 	bl	8019304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80148c8:	6823      	ldr	r3, [r4, #0]
 80148ca:	4605      	mov	r5, r0
 80148cc:	b231      	sxth	r1, r6
 80148ce:	4620      	mov	r0, r4
 80148d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148d2:	4798      	blx	r3
 80148d4:	6823      	ldr	r3, [r4, #0]
 80148d6:	b229      	sxth	r1, r5
 80148d8:	4620      	mov	r0, r4
 80148da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148e0:	4718      	bx	r3

080148e2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80148e2:	b510      	push	{r4, lr}
 80148e4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80148e8:	2bff      	cmp	r3, #255	; 0xff
 80148ea:	4604      	mov	r4, r0
 80148ec:	d006      	beq.n	80148fc <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80148ee:	2300      	movs	r3, #0
 80148f0:	8003      	strh	r3, [r0, #0]
 80148f2:	8043      	strh	r3, [r0, #2]
 80148f4:	8083      	strh	r3, [r0, #4]
 80148f6:	80c3      	strh	r3, [r0, #6]
 80148f8:	4620      	mov	r0, r4
 80148fa:	bd10      	pop	{r4, pc}
 80148fc:	3126      	adds	r1, #38	; 0x26
 80148fe:	f004 fd3b 	bl	8019378 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014902:	e7f9      	b.n	80148f8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08014904 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014908:	4604      	mov	r4, r0
 801490a:	b088      	sub	sp, #32
 801490c:	f854 3b26 	ldr.w	r3, [r4], #38
 8014910:	2500      	movs	r5, #0
 8014912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014914:	460f      	mov	r7, r1
 8014916:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801491a:	a904      	add	r1, sp, #16
 801491c:	4606      	mov	r6, r0
 801491e:	4798      	blx	r3
 8014920:	4620      	mov	r0, r4
 8014922:	f004 fcb5 	bl	8019290 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014926:	4680      	mov	r8, r0
 8014928:	4620      	mov	r0, r4
 801492a:	f004 fceb 	bl	8019304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801492e:	9506      	str	r5, [sp, #24]
 8014930:	ad06      	add	r5, sp, #24
 8014932:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014936:	4639      	mov	r1, r7
 8014938:	4628      	mov	r0, r5
 801493a:	f8ad 801c 	strh.w	r8, [sp, #28]
 801493e:	f7fe fc13 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 8014942:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014946:	2b00      	cmp	r3, #0
 8014948:	dd19      	ble.n	801497e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801494a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801494e:	2b00      	cmp	r3, #0
 8014950:	dd15      	ble.n	801497e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014952:	4b0c      	ldr	r3, [pc, #48]	; (8014984 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801495a:	b10a      	cbz	r2, 8014960 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801495c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801495e:	b900      	cbnz	r0, 8014962 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8014960:	6898      	ldr	r0, [r3, #8]
 8014962:	6801      	ldr	r1, [r0, #0]
 8014964:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014968:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801496c:	2701      	movs	r7, #1
 801496e:	9702      	str	r7, [sp, #8]
 8014970:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8014974:	e9cd 5600 	strd	r5, r6, [sp]
 8014978:	688d      	ldr	r5, [r1, #8]
 801497a:	4621      	mov	r1, r4
 801497c:	47a8      	blx	r5
 801497e:	b008      	add	sp, #32
 8014980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014984:	2000a060 	.word	0x2000a060

08014988 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801498c:	4696      	mov	lr, r2
 801498e:	4605      	mov	r5, r0
 8014990:	4614      	mov	r4, r2
 8014992:	460e      	mov	r6, r1
 8014994:	461f      	mov	r7, r3
 8014996:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801499a:	b097      	sub	sp, #92	; 0x5c
 801499c:	f10d 0c1c 	add.w	ip, sp, #28
 80149a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149a4:	f8de 3000 	ldr.w	r3, [lr]
 80149a8:	f8cc 3000 	str.w	r3, [ip]
 80149ac:	f104 0e14 	add.w	lr, r4, #20
 80149b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149b4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80149b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149bc:	f8de 3000 	ldr.w	r3, [lr]
 80149c0:	f8cc 3000 	str.w	r3, [ip]
 80149c4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80149c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149cc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80149d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149d4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80149d8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80149dc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80149e0:	f8de 3000 	ldr.w	r3, [lr]
 80149e4:	f8cc 3000 	str.w	r3, [ip]
 80149e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80149ea:	682b      	ldr	r3, [r5, #0]
 80149ec:	9201      	str	r2, [sp, #4]
 80149ee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80149f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80149f4:	9200      	str	r2, [sp, #0]
 80149f6:	f8cd 8008 	str.w	r8, [sp, #8]
 80149fa:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 80149fe:	aa07      	add	r2, sp, #28
 8014a00:	463b      	mov	r3, r7
 8014a02:	4631      	mov	r1, r6
 8014a04:	4628      	mov	r0, r5
 8014a06:	47d8      	blx	fp
 8014a08:	46a6      	mov	lr, r4
 8014a0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a0e:	f10d 0c1c 	add.w	ip, sp, #28
 8014a12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a16:	f8de 3000 	ldr.w	r3, [lr]
 8014a1a:	f8cc 3000 	str.w	r3, [ip]
 8014a1e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014a22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a26:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014a2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a2e:	343c      	adds	r4, #60	; 0x3c
 8014a30:	f8de 3000 	ldr.w	r3, [lr]
 8014a34:	f8cc 3000 	str.w	r3, [ip]
 8014a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a3a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014a3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a42:	6823      	ldr	r3, [r4, #0]
 8014a44:	f8cc 3000 	str.w	r3, [ip]
 8014a48:	682b      	ldr	r3, [r5, #0]
 8014a4a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014a4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a50:	9201      	str	r2, [sp, #4]
 8014a52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014a54:	9200      	str	r2, [sp, #0]
 8014a56:	f8cd 8008 	str.w	r8, [sp, #8]
 8014a5a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8014a5c:	aa07      	add	r2, sp, #28
 8014a5e:	463b      	mov	r3, r7
 8014a60:	4631      	mov	r1, r6
 8014a62:	4628      	mov	r0, r5
 8014a64:	47a0      	blx	r4
 8014a66:	b017      	add	sp, #92	; 0x5c
 8014a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a6c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	4770      	bx	lr

08014a70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a74:	b08d      	sub	sp, #52	; 0x34
 8014a76:	4688      	mov	r8, r1
 8014a78:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014a7a:	f8d3 c000 	ldr.w	ip, [r3]
 8014a7e:	680f      	ldr	r7, [r1, #0]
 8014a80:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8014a84:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014a88:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8014a8c:	edd3 6a07 	vldr	s13, [r3, #28]
 8014a90:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014a92:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8014a96:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014a9a:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014a9e:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8014aa2:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014aa6:	eba7 070c 	sub.w	r7, r7, ip
 8014aaa:	42bc      	cmp	r4, r7
 8014aac:	bfa8      	it	ge
 8014aae:	463c      	movge	r4, r7
 8014ab0:	ee07 4a90 	vmov	s15, r4
 8014ab4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014ab8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8014abc:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014ac0:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014ac4:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014ac8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014acc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014ad0:	eb09 0e0c 	add.w	lr, r9, ip
 8014ad4:	4571      	cmp	r1, lr
 8014ad6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014ada:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014ade:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014ae2:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014ae6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014aea:	f340 808d 	ble.w	8014c08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8014aee:	eba1 060e 	sub.w	r6, r1, lr
 8014af2:	fb96 f5f4 	sdiv	r5, r6, r4
 8014af6:	ee07 5a10 	vmov	s14, r5
 8014afa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014afe:	2d00      	cmp	r5, #0
 8014b00:	fb04 6615 	mls	r6, r4, r5, r6
 8014b04:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014b08:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014b0c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014b10:	dd13      	ble.n	8014b3a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8014b12:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014b16:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014b1a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b22:	bf18      	it	ne
 8014b24:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014b28:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014b2c:	bf08      	it	eq
 8014b2e:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014b32:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014b36:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014b3a:	fb05 f204 	mul.w	r2, r5, r4
 8014b3e:	1abf      	subs	r7, r7, r2
 8014b40:	4494      	add	ip, r2
 8014b42:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014b46:	4411      	add	r1, r2
 8014b48:	eb09 020c 	add.w	r2, r9, ip
 8014b4c:	443a      	add	r2, r7
 8014b4e:	b209      	sxth	r1, r1
 8014b50:	428a      	cmp	r2, r1
 8014b52:	bfc4      	itt	gt
 8014b54:	eba1 0209 	subgt.w	r2, r1, r9
 8014b58:	eba2 070c 	subgt.w	r7, r2, ip
 8014b5c:	2f00      	cmp	r7, #0
 8014b5e:	dd50      	ble.n	8014c02 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8014b60:	fb97 f1f4 	sdiv	r1, r7, r4
 8014b64:	fb04 7211 	mls	r2, r4, r1, r7
 8014b68:	b90a      	cbnz	r2, 8014b6e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 8014b6a:	3901      	subs	r1, #1
 8014b6c:	4622      	mov	r2, r4
 8014b6e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014b72:	6840      	ldr	r0, [r0, #4]
 8014b74:	900b      	str	r0, [sp, #44]	; 0x2c
 8014b76:	f8d0 a000 	ldr.w	sl, [r0]
 8014b7a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014b7c:	9008      	str	r0, [sp, #32]
 8014b7e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8014b82:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014b84:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014b88:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014b8c:	695b      	ldr	r3, [r3, #20]
 8014b8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014b90:	445b      	add	r3, fp
 8014b92:	eef0 6a42 	vmov.f32	s13, s4
 8014b96:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014b9a:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014b9e:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014ba2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014ba6:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014baa:	9307      	str	r3, [sp, #28]
 8014bac:	ee17 7a90 	vmov	r7, s15
 8014bb0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014bb4:	eeb0 7a61 	vmov.f32	s14, s3
 8014bb8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014bbc:	ee16 3a90 	vmov	r3, s13
 8014bc0:	fb97 f7f4 	sdiv	r7, r7, r4
 8014bc4:	ee17 ca90 	vmov	ip, s15
 8014bc8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014bcc:	fb9c fcf4 	sdiv	ip, ip, r4
 8014bd0:	fb0c 3306 	mla	r3, ip, r6, r3
 8014bd4:	9302      	str	r3, [sp, #8]
 8014bd6:	ee17 3a10 	vmov	r3, s14
 8014bda:	44b6      	add	lr, r6
 8014bdc:	fb04 e505 	mla	r5, r4, r5, lr
 8014be0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014be4:	fb07 3706 	mla	r7, r7, r6, r3
 8014be8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014bec:	e9cd 4700 	strd	r4, r7, [sp]
 8014bf0:	2900      	cmp	r1, #0
 8014bf2:	bfcc      	ite	gt
 8014bf4:	46a1      	movgt	r9, r4
 8014bf6:	4691      	movle	r9, r2
 8014bf8:	eba9 0306 	sub.w	r3, r9, r6
 8014bfc:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014c00:	47a0      	blx	r4
 8014c02:	b00d      	add	sp, #52	; 0x34
 8014c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c08:	2500      	movs	r5, #0
 8014c0a:	462e      	mov	r6, r5
 8014c0c:	e799      	b.n	8014b42 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08014c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c14:	b0db      	sub	sp, #364	; 0x16c
 8014c16:	461d      	mov	r5, r3
 8014c18:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8014c1e:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014c22:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c24:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014c28:	9310      	str	r3, [sp, #64]	; 0x40
 8014c2a:	6803      	ldr	r3, [r0, #0]
 8014c2c:	910f      	str	r1, [sp, #60]	; 0x3c
 8014c2e:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8014c30:	9009      	str	r0, [sp, #36]	; 0x24
 8014c32:	4614      	mov	r4, r2
 8014c34:	4629      	mov	r1, r5
 8014c36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014c3a:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8014c3e:	47b8      	blx	r7
 8014c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c42:	6058      	str	r0, [r3, #4]
 8014c44:	2800      	cmp	r0, #0
 8014c46:	f000 83a1 	beq.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014c4a:	682b      	ldr	r3, [r5, #0]
 8014c4c:	9314      	str	r3, [sp, #80]	; 0x50
 8014c4e:	686b      	ldr	r3, [r5, #4]
 8014c50:	9315      	str	r3, [sp, #84]	; 0x54
 8014c52:	4bc4      	ldr	r3, [pc, #784]	; (8014f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014c54:	ed94 7a02 	vldr	s14, [r4, #8]
 8014c58:	7819      	ldrb	r1, [r3, #0]
 8014c5a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8014c5e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014c62:	2900      	cmp	r1, #0
 8014c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c68:	bf16      	itet	ne
 8014c6a:	4619      	movne	r1, r3
 8014c6c:	4611      	moveq	r1, r2
 8014c6e:	4613      	movne	r3, r2
 8014c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c74:	9116      	str	r1, [sp, #88]	; 0x58
 8014c76:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8014c7a:	f240 8387 	bls.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014c7e:	ed94 7a07 	vldr	s14, [r4, #28]
 8014c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c8a:	f240 837f 	bls.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014c8e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8014c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c9a:	f240 8377 	bls.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014c9e:	6822      	ldr	r2, [r4, #0]
 8014ca0:	4bb1      	ldr	r3, [pc, #708]	; (8014f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	f2c0 8372 	blt.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ca8:	49b0      	ldr	r1, [pc, #704]	; (8014f6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014caa:	6963      	ldr	r3, [r4, #20]
 8014cac:	428a      	cmp	r2, r1
 8014cae:	f300 836d 	bgt.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cb2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014cb6:	48ae      	ldr	r0, [pc, #696]	; (8014f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014cb8:	33ff      	adds	r3, #255	; 0xff
 8014cba:	4283      	cmp	r3, r0
 8014cbc:	f200 8366 	bhi.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014cc2:	4dac      	ldr	r5, [pc, #688]	; (8014f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014cc4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014cc8:	33ff      	adds	r3, #255	; 0xff
 8014cca:	42ab      	cmp	r3, r5
 8014ccc:	f200 835e 	bhi.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cd0:	6862      	ldr	r2, [r4, #4]
 8014cd2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8014cd6:	33ff      	adds	r3, #255	; 0xff
 8014cd8:	4283      	cmp	r3, r0
 8014cda:	f200 8357 	bhi.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cde:	69a1      	ldr	r1, [r4, #24]
 8014ce0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014ce4:	33ff      	adds	r3, #255	; 0xff
 8014ce6:	4283      	cmp	r3, r0
 8014ce8:	f200 8350 	bhi.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014cee:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8014cf2:	30ff      	adds	r0, #255	; 0xff
 8014cf4:	42a8      	cmp	r0, r5
 8014cf6:	f200 8349 	bhi.w	801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cfa:	428a      	cmp	r2, r1
 8014cfc:	f280 8110 	bge.w	8014f20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014d00:	429a      	cmp	r2, r3
 8014d02:	f300 8119 	bgt.w	8014f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014d06:	4299      	cmp	r1, r3
 8014d08:	f280 811d 	bge.w	8014f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014d0c:	2502      	movs	r5, #2
 8014d0e:	2701      	movs	r7, #1
 8014d10:	46a9      	mov	r9, r5
 8014d12:	46b8      	mov	r8, r7
 8014d14:	f04f 0a00 	mov.w	sl, #0
 8014d18:	4621      	mov	r1, r4
 8014d1a:	a849      	add	r0, sp, #292	; 0x124
 8014d1c:	f003 fc84 	bl	8018628 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014d20:	4622      	mov	r2, r4
 8014d22:	4653      	mov	r3, sl
 8014d24:	a949      	add	r1, sp, #292	; 0x124
 8014d26:	f8cd 9000 	str.w	r9, [sp]
 8014d2a:	a819      	add	r0, sp, #100	; 0x64
 8014d2c:	f003 fdac 	bl	8018888 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014d30:	4622      	mov	r2, r4
 8014d32:	4653      	mov	r3, sl
 8014d34:	a949      	add	r1, sp, #292	; 0x124
 8014d36:	f8cd 8000 	str.w	r8, [sp]
 8014d3a:	a829      	add	r0, sp, #164	; 0xa4
 8014d3c:	f003 fda4 	bl	8018888 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014d40:	4643      	mov	r3, r8
 8014d42:	4622      	mov	r2, r4
 8014d44:	a949      	add	r1, sp, #292	; 0x124
 8014d46:	f8cd 9000 	str.w	r9, [sp]
 8014d4a:	a839      	add	r0, sp, #228	; 0xe4
 8014d4c:	f003 fd9c 	bl	8018888 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014d50:	42af      	cmp	r7, r5
 8014d52:	bfb5      	itete	lt
 8014d54:	2300      	movlt	r3, #0
 8014d56:	2301      	movge	r3, #1
 8014d58:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014d5a:	930e      	strge	r3, [sp, #56]	; 0x38
 8014d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014d62:	af12      	add	r7, sp, #72	; 0x48
 8014d64:	bfb9      	ittee	lt
 8014d66:	ad29      	addlt	r5, sp, #164	; 0xa4
 8014d68:	ac19      	addlt	r4, sp, #100	; 0x64
 8014d6a:	ad19      	addge	r5, sp, #100	; 0x64
 8014d6c:	ac29      	addge	r4, sp, #164	; 0xa4
 8014d6e:	e887 0003 	stmia.w	r7, {r0, r1}
 8014d72:	b928      	cbnz	r0, 8014d80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8014d74:	4b80      	ldr	r3, [pc, #512]	; (8014f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8014d76:	6818      	ldr	r0, [r3, #0]
 8014d78:	6803      	ldr	r3, [r0, #0]
 8014d7a:	6a1b      	ldr	r3, [r3, #32]
 8014d7c:	4798      	blx	r3
 8014d7e:	6038      	str	r0, [r7, #0]
 8014d80:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014d82:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014d86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014d8a:	930c      	str	r3, [sp, #48]	; 0x30
 8014d8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014d8e:	6963      	ldr	r3, [r4, #20]
 8014d90:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014d92:	440b      	add	r3, r1
 8014d94:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014d98:	4408      	add	r0, r1
 8014d9a:	b200      	sxth	r0, r0
 8014d9c:	4283      	cmp	r3, r0
 8014d9e:	900d      	str	r0, [sp, #52]	; 0x34
 8014da0:	f280 80dd 	bge.w	8014f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014da4:	428b      	cmp	r3, r1
 8014da6:	da08      	bge.n	8014dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014da8:	2a00      	cmp	r2, #0
 8014daa:	dd06      	ble.n	8014dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014dac:	1acb      	subs	r3, r1, r3
 8014dae:	429a      	cmp	r2, r3
 8014db0:	f2c0 80e4 	blt.w	8014f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	f300 80e2 	bgt.w	8014f7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014dba:	6967      	ldr	r7, [r4, #20]
 8014dbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dbe:	443b      	add	r3, r7
 8014dc0:	461f      	mov	r7, r3
 8014dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dc4:	1bdf      	subs	r7, r3, r7
 8014dc6:	4297      	cmp	r7, r2
 8014dc8:	bfa8      	it	ge
 8014dca:	4617      	movge	r7, r2
 8014dcc:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014dd0:	2f00      	cmp	r7, #0
 8014dd2:	f340 8166 	ble.w	80150a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014dd6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014dd8:	6829      	ldr	r1, [r5, #0]
 8014dda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014dde:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014de2:	6820      	ldr	r0, [r4, #0]
 8014de4:	4411      	add	r1, r2
 8014de6:	4299      	cmp	r1, r3
 8014de8:	dd1a      	ble.n	8014e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014dea:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014dee:	440b      	add	r3, r1
 8014df0:	4402      	add	r2, r0
 8014df2:	b21b      	sxth	r3, r3
 8014df4:	429a      	cmp	r2, r3
 8014df6:	dc13      	bgt.n	8014e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	9206      	str	r2, [sp, #24]
 8014e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e02:	9205      	str	r2, [sp, #20]
 8014e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e06:	9500      	str	r5, [sp, #0]
 8014e08:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014e0c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e10:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014e14:	a912      	add	r1, sp, #72	; 0x48
 8014e16:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8014e1a:	aa49      	add	r2, sp, #292	; 0x124
 8014e1c:	4623      	mov	r3, r4
 8014e1e:	47c8      	blx	r9
 8014e20:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014e24:	441a      	add	r2, r3
 8014e26:	6963      	ldr	r3, [r4, #20]
 8014e28:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014e2c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014e30:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014e34:	68a1      	ldr	r1, [r4, #8]
 8014e36:	ed94 6a08 	vldr	s12, [r4, #32]
 8014e3a:	6022      	str	r2, [r4, #0]
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	6163      	str	r3, [r4, #20]
 8014e40:	69a3      	ldr	r3, [r4, #24]
 8014e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014e46:	3b01      	subs	r3, #1
 8014e48:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014e4c:	61a3      	str	r3, [r4, #24]
 8014e4e:	6923      	ldr	r3, [r4, #16]
 8014e50:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014e58:	edd4 6a07 	vldr	s13, [r4, #28]
 8014e5c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014e60:	440b      	add	r3, r1
 8014e62:	68e1      	ldr	r1, [r4, #12]
 8014e64:	6123      	str	r3, [r4, #16]
 8014e66:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014e6a:	428b      	cmp	r3, r1
 8014e6c:	edc4 6a07 	vstr	s13, [r4, #28]
 8014e70:	db15      	blt.n	8014e9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8014e72:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014e76:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014e7a:	3201      	adds	r2, #1
 8014e7c:	edc4 6a07 	vstr	s13, [r4, #28]
 8014e80:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014e84:	6022      	str	r2, [r4, #0]
 8014e86:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014e8a:	1a5b      	subs	r3, r3, r1
 8014e8c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014e90:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014e94:	6123      	str	r3, [r4, #16]
 8014e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e9a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014e9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014ea2:	441a      	add	r2, r3
 8014ea4:	696b      	ldr	r3, [r5, #20]
 8014ea6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014eaa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014eae:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014eb2:	68a9      	ldr	r1, [r5, #8]
 8014eb4:	ed95 6a08 	vldr	s12, [r5, #32]
 8014eb8:	602a      	str	r2, [r5, #0]
 8014eba:	3301      	adds	r3, #1
 8014ebc:	616b      	str	r3, [r5, #20]
 8014ebe:	69ab      	ldr	r3, [r5, #24]
 8014ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ec4:	3b01      	subs	r3, #1
 8014ec6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014eca:	61ab      	str	r3, [r5, #24]
 8014ecc:	692b      	ldr	r3, [r5, #16]
 8014ece:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014ed6:	edd5 6a07 	vldr	s13, [r5, #28]
 8014eda:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014ede:	440b      	add	r3, r1
 8014ee0:	68e9      	ldr	r1, [r5, #12]
 8014ee2:	612b      	str	r3, [r5, #16]
 8014ee4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014ee8:	428b      	cmp	r3, r1
 8014eea:	edc5 6a07 	vstr	s13, [r5, #28]
 8014eee:	db15      	blt.n	8014f1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014ef0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014ef4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014ef8:	3201      	adds	r2, #1
 8014efa:	edc5 6a07 	vstr	s13, [r5, #28]
 8014efe:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014f02:	602a      	str	r2, [r5, #0]
 8014f04:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014f08:	1a5b      	subs	r3, r3, r1
 8014f0a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014f0e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014f12:	612b      	str	r3, [r5, #16]
 8014f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f18:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014f1c:	3f01      	subs	r7, #1
 8014f1e:	e757      	b.n	8014dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014f20:	4299      	cmp	r1, r3
 8014f22:	dc13      	bgt.n	8014f4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8014f24:	429a      	cmp	r2, r3
 8014f26:	da14      	bge.n	8014f52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014f28:	2502      	movs	r5, #2
 8014f2a:	2703      	movs	r7, #3
 8014f2c:	46a9      	mov	r9, r5
 8014f2e:	f04f 0800 	mov.w	r8, #0
 8014f32:	f04f 0a01 	mov.w	sl, #1
 8014f36:	e6ef      	b.n	8014d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014f38:	2501      	movs	r5, #1
 8014f3a:	2700      	movs	r7, #0
 8014f3c:	46a9      	mov	r9, r5
 8014f3e:	46b8      	mov	r8, r7
 8014f40:	f04f 0a02 	mov.w	sl, #2
 8014f44:	e6e8      	b.n	8014d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014f46:	2501      	movs	r5, #1
 8014f48:	2702      	movs	r7, #2
 8014f4a:	e6e1      	b.n	8014d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014f4c:	2500      	movs	r5, #0
 8014f4e:	2701      	movs	r7, #1
 8014f50:	e7f4      	b.n	8014f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8014f52:	2702      	movs	r7, #2
 8014f54:	2503      	movs	r5, #3
 8014f56:	f04f 0900 	mov.w	r9, #0
 8014f5a:	46b8      	mov	r8, r7
 8014f5c:	e7e9      	b.n	8014f32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014f5e:	4613      	mov	r3, r2
 8014f60:	e728      	b.n	8014db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8014f62:	bf00      	nop
 8014f64:	2000a058 	.word	0x2000a058
 8014f68:	fffd8f01 	.word	0xfffd8f01
 8014f6c:	00027100 	.word	0x00027100
 8014f70:	0004e1ff 	.word	0x0004e1ff
 8014f74:	0004e1fe 	.word	0x0004e1fe
 8014f78:	2000a060 	.word	0x2000a060
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014f80:	9111      	str	r1, [sp, #68]	; 0x44
 8014f82:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8014f86:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8014f8a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8014f8c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8014f90:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014f94:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8014f98:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014f9c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014fa0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014fa4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8014fa8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014fac:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014fb0:	469e      	mov	lr, r3
 8014fb2:	469c      	mov	ip, r3
 8014fb4:	f04f 0900 	mov.w	r9, #0
 8014fb8:	f1bc 0f00 	cmp.w	ip, #0
 8014fbc:	d147      	bne.n	801504e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014fbe:	eb03 0c07 	add.w	ip, r3, r7
 8014fc2:	1ad7      	subs	r7, r2, r3
 8014fc4:	f1b9 0f00 	cmp.w	r9, #0
 8014fc8:	d009      	beq.n	8014fde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8014fca:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8014fce:	9029      	str	r0, [sp, #164]	; 0xa4
 8014fd0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014fd4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014fd8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8014fdc:	912d      	str	r1, [sp, #180]	; 0xb4
 8014fde:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014fe0:	9111      	str	r1, [sp, #68]	; 0x44
 8014fe2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014fe6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014fea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014fee:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014ff2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014ff6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014ffa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014ffe:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015002:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015006:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801500a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801500e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015012:	f04f 0800 	mov.w	r8, #0
 8015016:	f1be 0f00 	cmp.w	lr, #0
 801501a:	d031      	beq.n	8015080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801501c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801501e:	4431      	add	r1, r6
 8015020:	4549      	cmp	r1, r9
 8015022:	4450      	add	r0, sl
 8015024:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015028:	ee37 7a04 	vadd.f32	s14, s14, s8
 801502c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015030:	db08      	blt.n	8015044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015032:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015036:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801503a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801503e:	3001      	adds	r0, #1
 8015040:	eba1 0109 	sub.w	r1, r1, r9
 8015044:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015048:	f04f 0801 	mov.w	r8, #1
 801504c:	e7e3      	b.n	8015016 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801504e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015050:	4431      	add	r1, r6
 8015052:	4541      	cmp	r1, r8
 8015054:	4450      	add	r0, sl
 8015056:	ee37 7a24 	vadd.f32	s14, s14, s9
 801505a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801505e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015062:	db08      	blt.n	8015076 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015064:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015068:	ee37 7a25 	vadd.f32	s14, s14, s11
 801506c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015070:	3001      	adds	r0, #1
 8015072:	eba1 0108 	sub.w	r1, r1, r8
 8015076:	f10c 3cff 	add.w	ip, ip, #4294967295
 801507a:	f04f 0901 	mov.w	r9, #1
 801507e:	e79b      	b.n	8014fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015080:	449c      	add	ip, r3
 8015082:	1aff      	subs	r7, r7, r3
 8015084:	f1b8 0f00 	cmp.w	r8, #0
 8015088:	d009      	beq.n	801509e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801508a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801508e:	9019      	str	r0, [sp, #100]	; 0x64
 8015090:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015094:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015098:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801509c:	911d      	str	r1, [sp, #116]	; 0x74
 801509e:	1ad2      	subs	r2, r2, r3
 80150a0:	e68b      	b.n	8014dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80150a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150a4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	f000 80d1 	beq.w	801524e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80150ac:	ad19      	add	r5, sp, #100	; 0x64
 80150ae:	ac39      	add	r4, sp, #228	; 0xe4
 80150b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80150b2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80150b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80150ba:	930c      	str	r3, [sp, #48]	; 0x30
 80150bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80150be:	6963      	ldr	r3, [r4, #20]
 80150c0:	440b      	add	r3, r1
 80150c2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80150c6:	4408      	add	r0, r1
 80150c8:	b200      	sxth	r0, r0
 80150ca:	4283      	cmp	r3, r0
 80150cc:	900d      	str	r0, [sp, #52]	; 0x34
 80150ce:	f280 80c1 	bge.w	8015254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80150d2:	428b      	cmp	r3, r1
 80150d4:	da08      	bge.n	80150e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80150d6:	2a00      	cmp	r2, #0
 80150d8:	dd06      	ble.n	80150e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80150da:	1acb      	subs	r3, r1, r3
 80150dc:	429a      	cmp	r2, r3
 80150de:	f2c0 80bb 	blt.w	8015258 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	f300 80b9 	bgt.w	801525a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80150e8:	6967      	ldr	r7, [r4, #20]
 80150ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80150ec:	443b      	add	r3, r7
 80150ee:	461f      	mov	r7, r3
 80150f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150f2:	1bdf      	subs	r7, r3, r7
 80150f4:	4297      	cmp	r7, r2
 80150f6:	bfa8      	it	ge
 80150f8:	4617      	movge	r7, r2
 80150fa:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80150fe:	2f00      	cmp	r7, #0
 8015100:	f340 813c 	ble.w	801537c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015104:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015106:	6829      	ldr	r1, [r5, #0]
 8015108:	f9b3 2000 	ldrsh.w	r2, [r3]
 801510c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015110:	6820      	ldr	r0, [r4, #0]
 8015112:	4411      	add	r1, r2
 8015114:	4299      	cmp	r1, r3
 8015116:	dd1a      	ble.n	801514e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015118:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801511c:	440b      	add	r3, r1
 801511e:	4402      	add	r2, r0
 8015120:	b21b      	sxth	r3, r3
 8015122:	429a      	cmp	r2, r3
 8015124:	dc13      	bgt.n	801514e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015128:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	9206      	str	r2, [sp, #24]
 801512e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015130:	9205      	str	r2, [sp, #20]
 8015132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015134:	9500      	str	r5, [sp, #0]
 8015136:	e9cd b203 	strd	fp, r2, [sp, #12]
 801513a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801513c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801513e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015142:	a912      	add	r1, sp, #72	; 0x48
 8015144:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8015148:	aa49      	add	r2, sp, #292	; 0x124
 801514a:	4623      	mov	r3, r4
 801514c:	47c8      	blx	r9
 801514e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015152:	441a      	add	r2, r3
 8015154:	6963      	ldr	r3, [r4, #20]
 8015156:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801515a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801515e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015162:	68a1      	ldr	r1, [r4, #8]
 8015164:	ed94 6a08 	vldr	s12, [r4, #32]
 8015168:	6022      	str	r2, [r4, #0]
 801516a:	3301      	adds	r3, #1
 801516c:	6163      	str	r3, [r4, #20]
 801516e:	69a3      	ldr	r3, [r4, #24]
 8015170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015174:	3b01      	subs	r3, #1
 8015176:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801517a:	61a3      	str	r3, [r4, #24]
 801517c:	6923      	ldr	r3, [r4, #16]
 801517e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015186:	edd4 6a07 	vldr	s13, [r4, #28]
 801518a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801518e:	440b      	add	r3, r1
 8015190:	68e1      	ldr	r1, [r4, #12]
 8015192:	6123      	str	r3, [r4, #16]
 8015194:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015198:	428b      	cmp	r3, r1
 801519a:	edc4 6a07 	vstr	s13, [r4, #28]
 801519e:	db15      	blt.n	80151cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80151a0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80151a4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80151a8:	3201      	adds	r2, #1
 80151aa:	edc4 6a07 	vstr	s13, [r4, #28]
 80151ae:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80151b2:	6022      	str	r2, [r4, #0]
 80151b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80151b8:	1a5b      	subs	r3, r3, r1
 80151ba:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80151be:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80151c2:	6123      	str	r3, [r4, #16]
 80151c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151c8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80151cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151d0:	441a      	add	r2, r3
 80151d2:	696b      	ldr	r3, [r5, #20]
 80151d4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80151d8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80151dc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80151e0:	68a9      	ldr	r1, [r5, #8]
 80151e2:	ed95 6a08 	vldr	s12, [r5, #32]
 80151e6:	602a      	str	r2, [r5, #0]
 80151e8:	3301      	adds	r3, #1
 80151ea:	616b      	str	r3, [r5, #20]
 80151ec:	69ab      	ldr	r3, [r5, #24]
 80151ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80151f2:	3b01      	subs	r3, #1
 80151f4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80151f8:	61ab      	str	r3, [r5, #24]
 80151fa:	692b      	ldr	r3, [r5, #16]
 80151fc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015204:	edd5 6a07 	vldr	s13, [r5, #28]
 8015208:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801520c:	440b      	add	r3, r1
 801520e:	68e9      	ldr	r1, [r5, #12]
 8015210:	612b      	str	r3, [r5, #16]
 8015212:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015216:	428b      	cmp	r3, r1
 8015218:	edc5 6a07 	vstr	s13, [r5, #28]
 801521c:	db15      	blt.n	801524a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801521e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015222:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015226:	3201      	adds	r2, #1
 8015228:	edc5 6a07 	vstr	s13, [r5, #28]
 801522c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015230:	602a      	str	r2, [r5, #0]
 8015232:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015236:	1a5b      	subs	r3, r3, r1
 8015238:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801523c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015240:	612b      	str	r3, [r5, #16]
 8015242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015246:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801524a:	3f01      	subs	r7, #1
 801524c:	e757      	b.n	80150fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801524e:	ad39      	add	r5, sp, #228	; 0xe4
 8015250:	ac19      	add	r4, sp, #100	; 0x64
 8015252:	e72d      	b.n	80150b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015254:	4613      	mov	r3, r2
 8015256:	e744      	b.n	80150e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015258:	4613      	mov	r3, r2
 801525a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801525e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015260:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8015264:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8015268:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801526c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8015270:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8015274:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8015278:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801527c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801527e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8015282:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8015286:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801528a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801528e:	960e      	str	r6, [sp, #56]	; 0x38
 8015290:	469e      	mov	lr, r3
 8015292:	461f      	mov	r7, r3
 8015294:	f04f 0900 	mov.w	r9, #0
 8015298:	2f00      	cmp	r7, #0
 801529a:	d146      	bne.n	801532a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801529c:	449c      	add	ip, r3
 801529e:	1ad7      	subs	r7, r2, r3
 80152a0:	f1b9 0f00 	cmp.w	r9, #0
 80152a4:	d009      	beq.n	80152ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80152a6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80152aa:	9039      	str	r0, [sp, #228]	; 0xe4
 80152ac:	913d      	str	r1, [sp, #244]	; 0xf4
 80152ae:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80152b2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80152b6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80152ba:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80152bc:	910e      	str	r1, [sp, #56]	; 0x38
 80152be:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80152c2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80152c6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80152ca:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80152ce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80152d2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80152d6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80152da:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80152de:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80152e2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80152e6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80152ea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80152ee:	f04f 0800 	mov.w	r8, #0
 80152f2:	f1be 0f00 	cmp.w	lr, #0
 80152f6:	d030      	beq.n	801535a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80152f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80152fa:	4431      	add	r1, r6
 80152fc:	4549      	cmp	r1, r9
 80152fe:	4450      	add	r0, sl
 8015300:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015304:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015308:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801530c:	db08      	blt.n	8015320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801530e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015312:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015316:	ee37 7a06 	vadd.f32	s14, s14, s12
 801531a:	3001      	adds	r0, #1
 801531c:	eba1 0109 	sub.w	r1, r1, r9
 8015320:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015324:	f04f 0801 	mov.w	r8, #1
 8015328:	e7e3      	b.n	80152f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801532a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801532c:	4431      	add	r1, r6
 801532e:	4541      	cmp	r1, r8
 8015330:	4450      	add	r0, sl
 8015332:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015336:	ee77 7a84 	vadd.f32	s15, s15, s8
 801533a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801533e:	db08      	blt.n	8015352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015340:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015344:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015348:	ee77 7a86 	vadd.f32	s15, s15, s12
 801534c:	3001      	adds	r0, #1
 801534e:	eba1 0108 	sub.w	r1, r1, r8
 8015352:	3f01      	subs	r7, #1
 8015354:	f04f 0901 	mov.w	r9, #1
 8015358:	e79e      	b.n	8015298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801535a:	449c      	add	ip, r3
 801535c:	1aff      	subs	r7, r7, r3
 801535e:	f1b8 0f00 	cmp.w	r8, #0
 8015362:	d009      	beq.n	8015378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015364:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015368:	9019      	str	r0, [sp, #100]	; 0x64
 801536a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801536e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015372:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015376:	911d      	str	r1, [sp, #116]	; 0x74
 8015378:	1ad2      	subs	r2, r2, r3
 801537a:	e6b5      	b.n	80150e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801537c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	b923      	cbnz	r3, 801538c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015382:	4b04      	ldr	r3, [pc, #16]	; (8015394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015384:	6818      	ldr	r0, [r3, #0]
 8015386:	6803      	ldr	r3, [r0, #0]
 8015388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801538a:	4798      	blx	r3
 801538c:	b05b      	add	sp, #364	; 0x16c
 801538e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015392:	bf00      	nop
 8015394:	2000a060 	.word	0x2000a060

08015398 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8015398:	b570      	push	{r4, r5, r6, lr}
 801539a:	4604      	mov	r4, r0
 801539c:	2500      	movs	r5, #0
 801539e:	7223      	strb	r3, [r4, #8]
 80153a0:	9804      	ldr	r0, [sp, #16]
 80153a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80153a6:	8025      	strh	r5, [r4, #0]
 80153a8:	6061      	str	r1, [r4, #4]
 80153aa:	7263      	strb	r3, [r4, #9]
 80153ac:	60e0      	str	r0, [r4, #12]
 80153ae:	8222      	strh	r2, [r4, #16]
 80153b0:	8265      	strh	r5, [r4, #18]
 80153b2:	82a5      	strh	r5, [r4, #20]
 80153b4:	82e5      	strh	r5, [r4, #22]
 80153b6:	8325      	strh	r5, [r4, #24]
 80153b8:	8365      	strh	r5, [r4, #26]
 80153ba:	83a5      	strh	r5, [r4, #28]
 80153bc:	77a5      	strb	r5, [r4, #30]
 80153be:	6803      	ldr	r3, [r0, #0]
 80153c0:	695b      	ldr	r3, [r3, #20]
 80153c2:	4798      	blx	r3
 80153c4:	4606      	mov	r6, r0
 80153c6:	b1f8      	cbz	r0, 8015408 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80153c8:	68e0      	ldr	r0, [r4, #12]
 80153ca:	6803      	ldr	r3, [r0, #0]
 80153cc:	4631      	mov	r1, r6
 80153ce:	68db      	ldr	r3, [r3, #12]
 80153d0:	4798      	blx	r3
 80153d2:	7b43      	ldrb	r3, [r0, #13]
 80153d4:	7a82      	ldrb	r2, [r0, #10]
 80153d6:	005b      	lsls	r3, r3, #1
 80153d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80153dc:	4313      	orrs	r3, r2
 80153de:	83a3      	strh	r3, [r4, #28]
 80153e0:	7a63      	ldrb	r3, [r4, #9]
 80153e2:	2b04      	cmp	r3, #4
 80153e4:	4605      	mov	r5, r0
 80153e6:	d10f      	bne.n	8015408 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80153e8:	68e0      	ldr	r0, [r4, #12]
 80153ea:	6803      	ldr	r3, [r0, #0]
 80153ec:	462a      	mov	r2, r5
 80153ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153f0:	4631      	mov	r1, r6
 80153f2:	4798      	blx	r3
 80153f4:	7b6b      	ldrb	r3, [r5, #13]
 80153f6:	005b      	lsls	r3, r3, #1
 80153f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80153fc:	7aab      	ldrb	r3, [r5, #10]
 80153fe:	4313      	orrs	r3, r2
 8015400:	4418      	add	r0, r3
 8015402:	8ba3      	ldrh	r3, [r4, #28]
 8015404:	4418      	add	r0, r3
 8015406:	83a0      	strh	r0, [r4, #28]
 8015408:	4620      	mov	r0, r4
 801540a:	bd70      	pop	{r4, r5, r6, pc}

0801540c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015410:	2400      	movs	r4, #0
 8015412:	b085      	sub	sp, #20
 8015414:	4681      	mov	r9, r0
 8015416:	4688      	mov	r8, r1
 8015418:	4692      	mov	sl, r2
 801541a:	469b      	mov	fp, r3
 801541c:	4627      	mov	r7, r4
 801541e:	4625      	mov	r5, r4
 8015420:	4626      	mov	r6, r4
 8015422:	4554      	cmp	r4, sl
 8015424:	da2a      	bge.n	801547c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015426:	2300      	movs	r3, #0
 8015428:	9303      	str	r3, [sp, #12]
 801542a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801542e:	429d      	cmp	r5, r3
 8015430:	d004      	beq.n	801543c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015432:	f242 030b 	movw	r3, #8203	; 0x200b
 8015436:	429d      	cmp	r5, r3
 8015438:	bf18      	it	ne
 801543a:	462f      	movne	r7, r5
 801543c:	ab03      	add	r3, sp, #12
 801543e:	4642      	mov	r2, r8
 8015440:	4659      	mov	r1, fp
 8015442:	4648      	mov	r0, r9
 8015444:	f002 fe76 	bl	8018134 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015448:	4605      	mov	r5, r0
 801544a:	b1b8      	cbz	r0, 801547c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801544c:	280a      	cmp	r0, #10
 801544e:	d015      	beq.n	801547c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015450:	9a03      	ldr	r2, [sp, #12]
 8015452:	b18a      	cbz	r2, 8015478 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015454:	7b50      	ldrb	r0, [r2, #13]
 8015456:	7a93      	ldrb	r3, [r2, #10]
 8015458:	8895      	ldrh	r5, [r2, #4]
 801545a:	0040      	lsls	r0, r0, #1
 801545c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015460:	4303      	orrs	r3, r0
 8015462:	9301      	str	r3, [sp, #4]
 8015464:	f8d8 3000 	ldr.w	r3, [r8]
 8015468:	4639      	mov	r1, r7
 801546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801546c:	4640      	mov	r0, r8
 801546e:	4798      	blx	r3
 8015470:	9b01      	ldr	r3, [sp, #4]
 8015472:	4418      	add	r0, r3
 8015474:	4406      	add	r6, r0
 8015476:	b2b6      	uxth	r6, r6
 8015478:	3401      	adds	r4, #1
 801547a:	e7d2      	b.n	8015422 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801547c:	4630      	mov	r0, r6
 801547e:	b005      	add	sp, #20
 8015480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015484 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015484:	2a02      	cmp	r2, #2
 8015486:	b530      	push	{r4, r5, lr}
 8015488:	d011      	beq.n	80154ae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801548a:	2a03      	cmp	r2, #3
 801548c:	d01c      	beq.n	80154c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801548e:	2a01      	cmp	r2, #1
 8015490:	d10c      	bne.n	80154ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015492:	888b      	ldrh	r3, [r1, #4]
 8015494:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015498:	8801      	ldrh	r1, [r0, #0]
 801549a:	8844      	ldrh	r4, [r0, #2]
 801549c:	8004      	strh	r4, [r0, #0]
 801549e:	1a9b      	subs	r3, r3, r2
 80154a0:	1a5b      	subs	r3, r3, r1
 80154a2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80154a6:	8043      	strh	r3, [r0, #2]
 80154a8:	8081      	strh	r1, [r0, #4]
 80154aa:	80c2      	strh	r2, [r0, #6]
 80154ac:	bd30      	pop	{r4, r5, pc}
 80154ae:	88cb      	ldrh	r3, [r1, #6]
 80154b0:	88c2      	ldrh	r2, [r0, #6]
 80154b2:	1a9b      	subs	r3, r3, r2
 80154b4:	8842      	ldrh	r2, [r0, #2]
 80154b6:	1a9b      	subs	r3, r3, r2
 80154b8:	888a      	ldrh	r2, [r1, #4]
 80154ba:	8881      	ldrh	r1, [r0, #4]
 80154bc:	8043      	strh	r3, [r0, #2]
 80154be:	1a52      	subs	r2, r2, r1
 80154c0:	8801      	ldrh	r1, [r0, #0]
 80154c2:	1a52      	subs	r2, r2, r1
 80154c4:	8002      	strh	r2, [r0, #0]
 80154c6:	e7f1      	b.n	80154ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80154c8:	88cb      	ldrh	r3, [r1, #6]
 80154ca:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80154ce:	8841      	ldrh	r1, [r0, #2]
 80154d0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80154d4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80154d8:	8045      	strh	r5, [r0, #2]
 80154da:	1a9b      	subs	r3, r3, r2
 80154dc:	1a5b      	subs	r3, r3, r1
 80154de:	8003      	strh	r3, [r0, #0]
 80154e0:	8082      	strh	r2, [r0, #4]
 80154e2:	80c4      	strh	r4, [r0, #6]
 80154e4:	e7e2      	b.n	80154ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080154e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80154e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154ea:	b09f      	sub	sp, #124	; 0x7c
 80154ec:	9116      	str	r1, [sp, #88]	; 0x58
 80154ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80154f0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80154f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80154f4:	8809      	ldrh	r1, [r1, #0]
 80154f6:	889b      	ldrh	r3, [r3, #4]
 80154f8:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80154fc:	9212      	str	r2, [sp, #72]	; 0x48
 80154fe:	440b      	add	r3, r1
 8015500:	b21b      	sxth	r3, r3
 8015502:	9310      	str	r3, [sp, #64]	; 0x40
 8015504:	f8d8 3000 	ldr.w	r3, [r8]
 8015508:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801550c:	7a59      	ldrb	r1, [r3, #9]
 801550e:	7a1b      	ldrb	r3, [r3, #8]
 8015510:	9315      	str	r3, [sp, #84]	; 0x54
 8015512:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015514:	9011      	str	r0, [sp, #68]	; 0x44
 8015516:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801551a:	9114      	str	r1, [sp, #80]	; 0x50
 801551c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015520:	2a00      	cmp	r2, #0
 8015522:	d067      	beq.n	80155f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8015524:	f898 3010 	ldrb.w	r3, [r8, #16]
 8015528:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801552a:	2b04      	cmp	r3, #4
 801552c:	bf14      	ite	ne
 801552e:	2301      	movne	r3, #1
 8015530:	2302      	moveq	r3, #2
 8015532:	4413      	add	r3, r2
 8015534:	f04f 0900 	mov.w	r9, #0
 8015538:	930f      	str	r3, [sp, #60]	; 0x3c
 801553a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801553e:	464c      	mov	r4, r9
 8015540:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8015544:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8015548:	4293      	cmp	r3, r2
 801554a:	f280 808c 	bge.w	8015666 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801554e:	2300      	movs	r3, #0
 8015550:	931c      	str	r3, [sp, #112]	; 0x70
 8015552:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015556:	429c      	cmp	r4, r3
 8015558:	d006      	beq.n	8015568 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801555a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801555c:	f242 020b 	movw	r2, #8203	; 0x200b
 8015560:	4294      	cmp	r4, r2
 8015562:	bf18      	it	ne
 8015564:	4623      	movne	r3, r4
 8015566:	930d      	str	r3, [sp, #52]	; 0x34
 8015568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801556a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801556c:	f8d8 2000 	ldr.w	r2, [r8]
 8015570:	428b      	cmp	r3, r1
 8015572:	db41      	blt.n	80155f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8015574:	6813      	ldr	r3, [r2, #0]
 8015576:	4610      	mov	r0, r2
 8015578:	695b      	ldr	r3, [r3, #20]
 801557a:	4798      	blx	r3
 801557c:	4604      	mov	r4, r0
 801557e:	f8d8 0000 	ldr.w	r0, [r8]
 8015582:	6803      	ldr	r3, [r0, #0]
 8015584:	aa1d      	add	r2, sp, #116	; 0x74
 8015586:	689e      	ldr	r6, [r3, #8]
 8015588:	4621      	mov	r1, r4
 801558a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801558e:	47b0      	blx	r6
 8015590:	901c      	str	r0, [sp, #112]	; 0x70
 8015592:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015596:	429c      	cmp	r4, r3
 8015598:	f000 80e9 	beq.w	801576e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801559c:	f242 030b 	movw	r3, #8203	; 0x200b
 80155a0:	429c      	cmp	r4, r3
 80155a2:	f000 80e4 	beq.w	801576e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80155a6:	2c00      	cmp	r4, #0
 80155a8:	f000 80f6 	beq.w	8015798 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 80155ac:	2c0a      	cmp	r4, #10
 80155ae:	d060      	beq.n	8015672 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80155b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80155b2:	b36a      	cbz	r2, 8015610 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80155b4:	8894      	ldrh	r4, [r2, #4]
 80155b6:	f1bb 0f00 	cmp.w	fp, #0
 80155ba:	d03b      	beq.n	8015634 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80155bc:	f892 900d 	ldrb.w	r9, [r2, #13]
 80155c0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80155c4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80155c8:	f892 900a 	ldrb.w	r9, [r2, #10]
 80155cc:	f1bb 0f01 	cmp.w	fp, #1
 80155d0:	ea49 0903 	orr.w	r9, r9, r3
 80155d4:	d134      	bne.n	8015640 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 80155d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155d8:	eba5 0509 	sub.w	r5, r5, r9
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d14f      	bne.n	8015680 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80155e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155e2:	eb09 0305 	add.w	r3, r9, r5
 80155e6:	4413      	add	r3, r2
 80155e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80155ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155ee:	4293      	cmp	r3, r2
 80155f0:	da51      	bge.n	8015696 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80155f2:	e038      	b.n	8015666 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80155f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155f6:	e79d      	b.n	8015534 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 80155f8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80155fc:	9301      	str	r3, [sp, #4]
 80155fe:	ab1d      	add	r3, sp, #116	; 0x74
 8015600:	9300      	str	r3, [sp, #0]
 8015602:	4659      	mov	r1, fp
 8015604:	ab1c      	add	r3, sp, #112	; 0x70
 8015606:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015608:	f002 fdec 	bl	80181e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801560c:	4604      	mov	r4, r0
 801560e:	e7c0      	b.n	8015592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8015610:	f8d8 0000 	ldr.w	r0, [r8]
 8015614:	6803      	ldr	r3, [r0, #0]
 8015616:	691b      	ldr	r3, [r3, #16]
 8015618:	4798      	blx	r3
 801561a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801561e:	4298      	cmp	r0, r3
 8015620:	f000 80a5 	beq.w	801576e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8015624:	f242 030b 	movw	r3, #8203	; 0x200b
 8015628:	4298      	cmp	r0, r3
 801562a:	f000 80a0 	beq.w	801576e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801562e:	f1bb 0f00 	cmp.w	fp, #0
 8015632:	d100      	bne.n	8015636 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8015634:	444d      	add	r5, r9
 8015636:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015638:	2a00      	cmp	r2, #0
 801563a:	d1bf      	bne.n	80155bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801563c:	4691      	mov	r9, r2
 801563e:	e096      	b.n	801576e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8015640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015642:	2b00      	cmp	r3, #0
 8015644:	f000 80aa 	beq.w	801579c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8015648:	f1bb 0f00 	cmp.w	fp, #0
 801564c:	d118      	bne.n	8015680 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801564e:	f8d8 0000 	ldr.w	r0, [r8]
 8015652:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015654:	6803      	ldr	r3, [r0, #0]
 8015656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015658:	4798      	blx	r3
 801565a:	4405      	add	r5, r0
 801565c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801565e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015660:	1aeb      	subs	r3, r5, r3
 8015662:	4293      	cmp	r3, r2
 8015664:	dd17      	ble.n	8015696 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8015666:	2c00      	cmp	r4, #0
 8015668:	f000 8096 	beq.w	8015798 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801566c:	2c0a      	cmp	r4, #10
 801566e:	f040 8084 	bne.w	801577a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 8015672:	240a      	movs	r4, #10
 8015674:	fab4 f084 	clz	r0, r4
 8015678:	0940      	lsrs	r0, r0, #5
 801567a:	b01f      	add	sp, #124	; 0x7c
 801567c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015680:	f8d8 0000 	ldr.w	r0, [r8]
 8015684:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015686:	6803      	ldr	r3, [r0, #0]
 8015688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801568a:	4798      	blx	r3
 801568c:	f1bb 0f01 	cmp.w	fp, #1
 8015690:	eba5 0500 	sub.w	r5, r5, r0
 8015694:	d0a4      	beq.n	80155e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8015696:	981c      	ldr	r0, [sp, #112]	; 0x70
 8015698:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801569a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801569e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80156a2:	7b43      	ldrb	r3, [r0, #13]
 80156a4:	015b      	lsls	r3, r3, #5
 80156a6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80156aa:	7983      	ldrb	r3, [r0, #6]
 80156ac:	4429      	add	r1, r5
 80156ae:	4313      	orrs	r3, r2
 80156b0:	440b      	add	r3, r1
 80156b2:	42b3      	cmp	r3, r6
 80156b4:	db5b      	blt.n	801576e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80156b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80156b8:	4299      	cmp	r1, r3
 80156ba:	da58      	bge.n	801576e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80156bc:	f8d8 0000 	ldr.w	r0, [r8]
 80156c0:	6803      	ldr	r3, [r0, #0]
 80156c2:	42ae      	cmp	r6, r5
 80156c4:	bfc8      	it	gt
 80156c6:	1b76      	subgt	r6, r6, r5
 80156c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156ca:	bfcc      	ite	gt
 80156cc:	b2b6      	uxthgt	r6, r6
 80156ce:	2600      	movle	r6, #0
 80156d0:	4798      	blx	r3
 80156d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80156d4:	7b5a      	ldrb	r2, [r3, #13]
 80156d6:	00d1      	lsls	r1, r2, #3
 80156d8:	f401 7780 	and.w	r7, r1, #256	; 0x100
 80156dc:	7a19      	ldrb	r1, [r3, #8]
 80156de:	4339      	orrs	r1, r7
 80156e0:	0657      	lsls	r7, r2, #25
 80156e2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80156e4:	bf44      	itt	mi
 80156e6:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80156ea:	b209      	sxthmi	r1, r1
 80156ec:	19c7      	adds	r7, r0, r7
 80156ee:	1a7f      	subs	r7, r7, r1
 80156f0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80156f2:	b2bf      	uxth	r7, r7
 80156f4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80156f8:	fa0f fa87 	sxth.w	sl, r7
 80156fc:	4551      	cmp	r1, sl
 80156fe:	dd3a      	ble.n	8015776 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015700:	0112      	lsls	r2, r2, #4
 8015702:	79d8      	ldrb	r0, [r3, #7]
 8015704:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015708:	4302      	orrs	r2, r0
 801570a:	4492      	add	sl, r2
 801570c:	4551      	cmp	r1, sl
 801570e:	dc2e      	bgt.n	801576e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8015710:	1bcf      	subs	r7, r1, r7
 8015712:	b2bf      	uxth	r7, r7
 8015714:	468a      	mov	sl, r1
 8015716:	9319      	str	r3, [sp, #100]	; 0x64
 8015718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801571a:	f8d8 0000 	ldr.w	r0, [r8]
 801571e:	681a      	ldr	r2, [r3, #0]
 8015720:	6801      	ldr	r1, [r0, #0]
 8015722:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8015724:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015726:	9313      	str	r3, [sp, #76]	; 0x4c
 8015728:	9218      	str	r2, [sp, #96]	; 0x60
 801572a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801572c:	4788      	blx	r1
 801572e:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015732:	910b      	str	r1, [sp, #44]	; 0x2c
 8015734:	f898 100e 	ldrb.w	r1, [r8, #14]
 8015738:	910a      	str	r1, [sp, #40]	; 0x28
 801573a:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801573e:	9109      	str	r1, [sp, #36]	; 0x24
 8015740:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015742:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8015746:	9305      	str	r3, [sp, #20]
 8015748:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801574a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801574c:	9206      	str	r2, [sp, #24]
 801574e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015752:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8015756:	e9cd a601 	strd	sl, r6, [sp, #4]
 801575a:	442e      	add	r6, r5
 801575c:	b236      	sxth	r6, r6
 801575e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015760:	9600      	str	r6, [sp, #0]
 8015762:	681a      	ldr	r2, [r3, #0]
 8015764:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015766:	685b      	ldr	r3, [r3, #4]
 8015768:	9811      	ldr	r0, [sp, #68]	; 0x44
 801576a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801576c:	47b0      	blx	r6
 801576e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015770:	3301      	adds	r3, #1
 8015772:	930e      	str	r3, [sp, #56]	; 0x38
 8015774:	e6e6      	b.n	8015544 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8015776:	2700      	movs	r7, #0
 8015778:	e7cd      	b.n	8015716 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 801577a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801577c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801577e:	3501      	adds	r5, #1
 8015780:	429d      	cmp	r5, r3
 8015782:	f6bf af77 	bge.w	8015674 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015786:	4659      	mov	r1, fp
 8015788:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801578a:	f7fa fd0d 	bl	80101a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801578e:	4604      	mov	r4, r0
 8015790:	b110      	cbz	r0, 8015798 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8015792:	280a      	cmp	r0, #10
 8015794:	d1f2      	bne.n	801577c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8015796:	e76c      	b.n	8015672 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8015798:	2400      	movs	r4, #0
 801579a:	e76b      	b.n	8015674 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801579c:	f1bb 0f00 	cmp.w	fp, #0
 80157a0:	f43f af5c 	beq.w	801565c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80157a4:	e777      	b.n	8015696 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

080157a6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80157a6:	b530      	push	{r4, r5, lr}
 80157a8:	8a44      	ldrh	r4, [r0, #18]
 80157aa:	8ac5      	ldrh	r5, [r0, #22]
 80157ac:	82c3      	strh	r3, [r0, #22]
 80157ae:	442c      	add	r4, r5
 80157b0:	1ae4      	subs	r4, r4, r3
 80157b2:	8244      	strh	r4, [r0, #18]
 80157b4:	8b03      	ldrh	r3, [r0, #24]
 80157b6:	8a84      	ldrh	r4, [r0, #20]
 80157b8:	4422      	add	r2, r4
 80157ba:	440c      	add	r4, r1
 80157bc:	1a59      	subs	r1, r3, r1
 80157be:	8342      	strh	r2, [r0, #26]
 80157c0:	8284      	strh	r4, [r0, #20]
 80157c2:	8301      	strh	r1, [r0, #24]
 80157c4:	bd30      	pop	{r4, r5, pc}

080157c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80157c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ca:	7a43      	ldrb	r3, [r0, #9]
 80157cc:	1eda      	subs	r2, r3, #3
 80157ce:	b087      	sub	sp, #28
 80157d0:	4604      	mov	r4, r0
 80157d2:	b2d2      	uxtb	r2, r2
 80157d4:	460f      	mov	r7, r1
 80157d6:	2900      	cmp	r1, #0
 80157d8:	d036      	beq.n	8015848 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 80157da:	2a01      	cmp	r2, #1
 80157dc:	d932      	bls.n	8015844 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80157de:	1e58      	subs	r0, r3, #1
 80157e0:	f1d0 0b00 	rsbs	fp, r0, #0
 80157e4:	eb4b 0b00 	adc.w	fp, fp, r0
 80157e8:	1e99      	subs	r1, r3, #2
 80157ea:	424b      	negs	r3, r1
 80157ec:	414b      	adcs	r3, r1
 80157ee:	9303      	str	r3, [sp, #12]
 80157f0:	2300      	movs	r3, #0
 80157f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80157f6:	2500      	movs	r5, #0
 80157f8:	8265      	strh	r5, [r4, #18]
 80157fa:	82a5      	strh	r5, [r4, #20]
 80157fc:	46a9      	mov	r9, r5
 80157fe:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8015802:	2300      	movs	r3, #0
 8015804:	9305      	str	r3, [sp, #20]
 8015806:	8823      	ldrh	r3, [r4, #0]
 8015808:	2b20      	cmp	r3, #32
 801580a:	d02b      	beq.n	8015864 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801580c:	eba3 020a 	sub.w	r2, r3, sl
 8015810:	4256      	negs	r6, r2
 8015812:	4156      	adcs	r6, r2
 8015814:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8015818:	4293      	cmp	r3, r2
 801581a:	d004      	beq.n	8015826 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801581c:	4553      	cmp	r3, sl
 801581e:	bf16      	itet	ne
 8015820:	4699      	movne	r9, r3
 8015822:	2601      	moveq	r6, #1
 8015824:	2600      	movne	r6, #0
 8015826:	ab05      	add	r3, sp, #20
 8015828:	68e2      	ldr	r2, [r4, #12]
 801582a:	7a21      	ldrb	r1, [r4, #8]
 801582c:	6860      	ldr	r0, [r4, #4]
 801582e:	f002 fc81 	bl	8018134 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015832:	8020      	strh	r0, [r4, #0]
 8015834:	b9c8      	cbnz	r0, 801586a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8015836:	8b22      	ldrh	r2, [r4, #24]
 8015838:	2300      	movs	r3, #0
 801583a:	4611      	mov	r1, r2
 801583c:	4620      	mov	r0, r4
 801583e:	f7ff ffb2 	bl	80157a6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015842:	e066      	b.n	8015912 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8015844:	468b      	mov	fp, r1
 8015846:	e7cf      	b.n	80157e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8015848:	3b01      	subs	r3, #1
 801584a:	2a01      	cmp	r2, #1
 801584c:	bf8c      	ite	hi
 801584e:	2200      	movhi	r2, #0
 8015850:	2201      	movls	r2, #1
 8015852:	2b01      	cmp	r3, #1
 8015854:	bf8c      	ite	hi
 8015856:	2300      	movhi	r3, #0
 8015858:	2301      	movls	r3, #1
 801585a:	9202      	str	r2, [sp, #8]
 801585c:	9301      	str	r3, [sp, #4]
 801585e:	9103      	str	r1, [sp, #12]
 8015860:	468b      	mov	fp, r1
 8015862:	e7c8      	b.n	80157f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8015864:	4699      	mov	r9, r3
 8015866:	2601      	movs	r6, #1
 8015868:	e7dd      	b.n	8015826 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801586a:	8ae3      	ldrh	r3, [r4, #22]
 801586c:	280a      	cmp	r0, #10
 801586e:	f103 0301 	add.w	r3, r3, #1
 8015872:	82e3      	strh	r3, [r4, #22]
 8015874:	d0df      	beq.n	8015836 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8015876:	9a05      	ldr	r2, [sp, #20]
 8015878:	bb42      	cbnz	r2, 80158cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801587a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801587e:	4298      	cmp	r0, r3
 8015880:	d001      	beq.n	8015886 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8015882:	4550      	cmp	r0, sl
 8015884:	d1bd      	bne.n	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015886:	8823      	ldrh	r3, [r4, #0]
 8015888:	8b21      	ldrh	r1, [r4, #24]
 801588a:	2b20      	cmp	r3, #32
 801588c:	d001      	beq.n	8015892 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801588e:	4553      	cmp	r3, sl
 8015890:	d131      	bne.n	80158f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8015892:	2e00      	cmp	r6, #0
 8015894:	bf0a      	itet	eq
 8015896:	460d      	moveq	r5, r1
 8015898:	4630      	movne	r0, r6
 801589a:	2001      	moveq	r0, #1
 801589c:	440a      	add	r2, r1
 801589e:	8aa3      	ldrh	r3, [r4, #20]
 80158a0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80158a4:	b292      	uxth	r2, r2
 80158a6:	8322      	strh	r2, [r4, #24]
 80158a8:	4413      	add	r3, r2
 80158aa:	2f00      	cmp	r7, #0
 80158ac:	d03a      	beq.n	8015924 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80158ae:	f1bb 0f00 	cmp.w	fp, #0
 80158b2:	d102      	bne.n	80158ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80158b4:	9903      	ldr	r1, [sp, #12]
 80158b6:	b301      	cbz	r1, 80158fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80158b8:	b1f8      	cbz	r0, 80158fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80158ba:	8ba1      	ldrh	r1, [r4, #28]
 80158bc:	4419      	add	r1, r3
 80158be:	458c      	cmp	ip, r1
 80158c0:	da2a      	bge.n	8015918 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80158c2:	8a61      	ldrh	r1, [r4, #18]
 80158c4:	b341      	cbz	r1, 8015918 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80158c6:	4563      	cmp	r3, ip
 80158c8:	dd9b      	ble.n	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80158ca:	e01c      	b.n	8015906 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80158cc:	8893      	ldrh	r3, [r2, #4]
 80158ce:	8023      	strh	r3, [r4, #0]
 80158d0:	f892 800d 	ldrb.w	r8, [r2, #13]
 80158d4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80158d8:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80158dc:	f892 800a 	ldrb.w	r8, [r2, #10]
 80158e0:	ea48 0800 	orr.w	r8, r8, r0
 80158e4:	68e0      	ldr	r0, [r4, #12]
 80158e6:	6803      	ldr	r3, [r0, #0]
 80158e8:	4649      	mov	r1, r9
 80158ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158ec:	4798      	blx	r3
 80158ee:	eb08 0200 	add.w	r2, r8, r0
 80158f2:	b292      	uxth	r2, r2
 80158f4:	e7c7      	b.n	8015886 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80158f6:	2000      	movs	r0, #0
 80158f8:	e7d0      	b.n	801589c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80158fa:	4563      	cmp	r3, ip
 80158fc:	dd81      	ble.n	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80158fe:	8a63      	ldrh	r3, [r4, #18]
 8015900:	2b00      	cmp	r3, #0
 8015902:	f43f af7e 	beq.w	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015906:	2301      	movs	r3, #1
 8015908:	77a3      	strb	r3, [r4, #30]
 801590a:	8ba2      	ldrh	r2, [r4, #28]
 801590c:	8b63      	ldrh	r3, [r4, #26]
 801590e:	4413      	add	r3, r2
 8015910:	8363      	strh	r3, [r4, #26]
 8015912:	b007      	add	sp, #28
 8015914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015918:	2300      	movs	r3, #0
 801591a:	4611      	mov	r1, r2
 801591c:	4620      	mov	r0, r4
 801591e:	f7ff ff42 	bl	80157a6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015922:	e76e      	b.n	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015924:	4563      	cmp	r3, ip
 8015926:	dd14      	ble.n	8015952 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8015928:	9b02      	ldr	r3, [sp, #8]
 801592a:	b113      	cbz	r3, 8015932 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801592c:	2301      	movs	r3, #1
 801592e:	460a      	mov	r2, r1
 8015930:	e783      	b.n	801583a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8015932:	9b01      	ldr	r3, [sp, #4]
 8015934:	2b00      	cmp	r3, #0
 8015936:	f43f af64 	beq.w	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801593a:	2800      	cmp	r0, #0
 801593c:	f47f af61 	bne.w	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015940:	b116      	cbz	r6, 8015948 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8015942:	2301      	movs	r3, #1
 8015944:	462a      	mov	r2, r5
 8015946:	e779      	b.n	801583c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8015948:	8a63      	ldrh	r3, [r4, #18]
 801594a:	2b00      	cmp	r3, #0
 801594c:	f43f af59 	beq.w	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015950:	e7df      	b.n	8015912 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8015952:	2800      	cmp	r0, #0
 8015954:	f47f af55 	bne.w	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015958:	2e00      	cmp	r6, #0
 801595a:	f43f af52 	beq.w	8015802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801595e:	2301      	movs	r3, #1
 8015960:	462a      	mov	r2, r5
 8015962:	e7db      	b.n	801591c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08015964 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015964:	b530      	push	{r4, r5, lr}
 8015966:	4605      	mov	r5, r0
 8015968:	b08b      	sub	sp, #44	; 0x2c
 801596a:	b191      	cbz	r1, 8015992 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801596c:	e9cd 3100 	strd	r3, r1, [sp]
 8015970:	4613      	mov	r3, r2
 8015972:	4601      	mov	r1, r0
 8015974:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8015978:	a802      	add	r0, sp, #8
 801597a:	f7ff fd0d 	bl	8015398 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801597e:	2401      	movs	r4, #1
 8015980:	2100      	movs	r1, #0
 8015982:	a802      	add	r0, sp, #8
 8015984:	f7ff ff1f 	bl	80157c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015988:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801598c:	b163      	cbz	r3, 80159a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801598e:	3401      	adds	r4, #1
 8015990:	e7f6      	b.n	8015980 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8015992:	f002 fcc7 	bl	8018324 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015996:	2401      	movs	r4, #1
 8015998:	280a      	cmp	r0, #10
 801599a:	4628      	mov	r0, r5
 801599c:	bf08      	it	eq
 801599e:	3401      	addeq	r4, #1
 80159a0:	f002 fcc0 	bl	8018324 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d1f7      	bne.n	8015998 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80159a8:	b2a0      	uxth	r0, r4
 80159aa:	b00b      	add	sp, #44	; 0x2c
 80159ac:	bd30      	pop	{r4, r5, pc}

080159ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80159ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159b2:	b0db      	sub	sp, #364	; 0x16c
 80159b4:	4689      	mov	r9, r1
 80159b6:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 80159ba:	900a      	str	r0, [sp, #40]	; 0x28
 80159bc:	461c      	mov	r4, r3
 80159be:	f1ba 0f00 	cmp.w	sl, #0
 80159c2:	f000 80a5 	beq.w	8015b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	f000 80a1 	beq.w	8015b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80159ce:	7ba3      	ldrb	r3, [r4, #14]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	f000 809d 	beq.w	8015b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80159d6:	6810      	ldr	r0, [r2, #0]
 80159d8:	6851      	ldr	r1, [r2, #4]
 80159da:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80159de:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80159e2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80159e6:	4643      	mov	r3, r8
 80159e8:	c303      	stmia	r3!, {r0, r1}
 80159ea:	2500      	movs	r5, #0
 80159ec:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80159f0:	79a2      	ldrb	r2, [r4, #6]
 80159f2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80159f6:	a90e      	add	r1, sp, #56	; 0x38
 80159f8:	4640      	mov	r0, r8
 80159fa:	950e      	str	r5, [sp, #56]	; 0x38
 80159fc:	f7ff fd42 	bl	8015484 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015a00:	a90e      	add	r1, sp, #56	; 0x38
 8015a02:	4608      	mov	r0, r1
 8015a04:	79a2      	ldrb	r2, [r4, #6]
 8015a06:	af18      	add	r7, sp, #96	; 0x60
 8015a08:	f7ff fd3c 	bl	8015484 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015a0c:	4638      	mov	r0, r7
 8015a0e:	f002 f852 	bl	8017ab6 <_ZN8touchgfx12TextProviderC1Ev>
 8015a12:	6820      	ldr	r0, [r4, #0]
 8015a14:	6803      	ldr	r3, [r0, #0]
 8015a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a18:	4798      	blx	r3
 8015a1a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	4651      	mov	r1, sl
 8015a20:	4638      	mov	r0, r7
 8015a22:	f002 f88d 	bl	8017b40 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015a26:	6820      	ldr	r0, [r4, #0]
 8015a28:	7923      	ldrb	r3, [r4, #4]
 8015a2a:	9308      	str	r3, [sp, #32]
 8015a2c:	6803      	ldr	r3, [r0, #0]
 8015a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a30:	4798      	blx	r3
 8015a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a36:	181e      	adds	r6, r3, r0
 8015a38:	42ae      	cmp	r6, r5
 8015a3a:	dd06      	ble.n	8015a4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8015a3c:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8015a40:	4282      	cmp	r2, r0
 8015a42:	bfa4      	itt	ge
 8015a44:	189d      	addge	r5, r3, r2
 8015a46:	fb95 f5f6 	sdivge	r5, r5, r6
 8015a4a:	a82e      	add	r0, sp, #184	; 0xb8
 8015a4c:	f002 f833 	bl	8017ab6 <_ZN8touchgfx12TextProviderC1Ev>
 8015a50:	7c23      	ldrb	r3, [r4, #16]
 8015a52:	b14b      	cbz	r3, 8015a68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8015a54:	6820      	ldr	r0, [r4, #0]
 8015a56:	6803      	ldr	r3, [r0, #0]
 8015a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a5a:	4798      	blx	r3
 8015a5c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8015a5e:	4603      	mov	r3, r0
 8015a60:	4651      	mov	r1, sl
 8015a62:	a82e      	add	r0, sp, #184	; 0xb8
 8015a64:	f002 f86c 	bl	8017b40 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015a68:	7c21      	ldrb	r1, [r4, #16]
 8015a6a:	9101      	str	r1, [sp, #4]
 8015a6c:	6821      	ldr	r1, [r4, #0]
 8015a6e:	7963      	ldrb	r3, [r4, #5]
 8015a70:	9100      	str	r1, [sp, #0]
 8015a72:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8015a76:	a92e      	add	r1, sp, #184	; 0xb8
 8015a78:	a810      	add	r0, sp, #64	; 0x40
 8015a7a:	f7ff fc8d 	bl	8015398 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8015a7e:	7c23      	ldrb	r3, [r4, #16]
 8015a80:	b9bb      	cbnz	r3, 8015ab2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8015a82:	fa1f fa86 	uxth.w	sl, r6
 8015a86:	2d00      	cmp	r5, #0
 8015a88:	dd45      	ble.n	8015b16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8015a8a:	4638      	mov	r0, r7
 8015a8c:	f002 fc4a 	bl	8018324 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015a90:	2800      	cmp	r0, #0
 8015a92:	d03d      	beq.n	8015b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8015a94:	280a      	cmp	r0, #10
 8015a96:	d1f6      	bne.n	8015a86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8015a98:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8015a9c:	4453      	add	r3, sl
 8015a9e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015aa2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015aa6:	eba3 030a 	sub.w	r3, r3, sl
 8015aaa:	3d01      	subs	r5, #1
 8015aac:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015ab0:	e7e9      	b.n	8015a86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8015ab2:	0073      	lsls	r3, r6, #1
 8015ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ab6:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8015aba:	fa1f fa86 	uxth.w	sl, r6
 8015abe:	2d00      	cmp	r5, #0
 8015ac0:	dd29      	ble.n	8015b16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8015ac2:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8015ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ac8:	428b      	cmp	r3, r1
 8015aca:	bfd4      	ite	le
 8015acc:	2100      	movle	r1, #0
 8015ace:	2101      	movgt	r1, #1
 8015ad0:	a810      	add	r0, sp, #64	; 0x40
 8015ad2:	f7ff fe78 	bl	80157c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015ad6:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8015ada:	3b01      	subs	r3, #1
 8015adc:	b29b      	uxth	r3, r3
 8015ade:	455b      	cmp	r3, fp
 8015ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ae2:	d005      	beq.n	8015af0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8015ae4:	7961      	ldrb	r1, [r4, #5]
 8015ae6:	4638      	mov	r0, r7
 8015ae8:	f7fa fb5e 	bl	80101a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015aee:	e7f4      	b.n	8015ada <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8015af0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8015af4:	4453      	add	r3, sl
 8015af6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015afa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015afe:	eba3 030a 	sub.w	r3, r3, sl
 8015b02:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015b06:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015b0a:	3d01      	subs	r5, #1
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d1d6      	bne.n	8015abe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8015b10:	b05b      	add	sp, #364	; 0x16c
 8015b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b16:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8015b1a:	ad44      	add	r5, sp, #272	; 0x110
 8015b1c:	f04f 0b00 	mov.w	fp, #0
 8015b20:	7c23      	ldrb	r3, [r4, #16]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d067      	beq.n	8015bf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8015b26:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8015b2a:	458a      	cmp	sl, r1
 8015b2c:	bfd4      	ite	le
 8015b2e:	2100      	movle	r1, #0
 8015b30:	2101      	movgt	r1, #1
 8015b32:	a810      	add	r0, sp, #64	; 0x40
 8015b34:	f7ff fe47 	bl	80157c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015b38:	9b08      	ldr	r3, [sp, #32]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d056      	beq.n	8015bec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8015b3e:	7c23      	ldrb	r3, [r4, #16]
 8015b40:	9309      	str	r3, [sp, #36]	; 0x24
 8015b42:	2258      	movs	r2, #88	; 0x58
 8015b44:	4639      	mov	r1, r7
 8015b46:	4628      	mov	r0, r5
 8015b48:	f00f fb36 	bl	80251b8 <memcpy>
 8015b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d059      	beq.n	8015c06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8015b52:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8015b56:	7922      	ldrb	r2, [r4, #4]
 8015b58:	2a01      	cmp	r2, #1
 8015b5a:	d13d      	bne.n	8015bd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8015b5c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8015b60:	1ac0      	subs	r0, r0, r3
 8015b62:	2302      	movs	r3, #2
 8015b64:	fb90 f0f3 	sdiv	r0, r0, r3
 8015b68:	b200      	sxth	r0, r0
 8015b6a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015b6e:	4418      	add	r0, r3
 8015b70:	7c23      	ldrb	r3, [r4, #16]
 8015b72:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d03a      	beq.n	8015bf0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8015b7a:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8015b7e:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8015b82:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015b86:	9500      	str	r5, [sp, #0]
 8015b88:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015b8c:	e9cd b703 	strd	fp, r7, [sp, #12]
 8015b90:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8015b94:	464a      	mov	r2, r9
 8015b96:	2100      	movs	r1, #0
 8015b98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b9a:	f7ff fca4 	bl	80154e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	d1b6      	bne.n	8015b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8015ba2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8015ba6:	b2b2      	uxth	r2, r6
 8015ba8:	4611      	mov	r1, r2
 8015baa:	4413      	add	r3, r2
 8015bac:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8015bb0:	1a52      	subs	r2, r2, r1
 8015bb2:	7c21      	ldrb	r1, [r4, #16]
 8015bb4:	b21b      	sxth	r3, r3
 8015bb6:	b212      	sxth	r2, r2
 8015bb8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015bbc:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8015bc0:	b109      	cbz	r1, 8015bc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8015bc2:	42b2      	cmp	r2, r6
 8015bc4:	dba4      	blt.n	8015b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8015bc6:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8015bca:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8015bce:	440a      	add	r2, r1
 8015bd0:	b212      	sxth	r2, r2
 8015bd2:	4293      	cmp	r3, r2
 8015bd4:	dda4      	ble.n	8015b20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8015bd6:	e79b      	b.n	8015b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8015bd8:	2a02      	cmp	r2, #2
 8015bda:	d105      	bne.n	8015be8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8015bdc:	7be2      	ldrb	r2, [r4, #15]
 8015bde:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8015be2:	1a80      	subs	r0, r0, r2
 8015be4:	1ac0      	subs	r0, r0, r3
 8015be6:	e7bf      	b.n	8015b68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8015be8:	2000      	movs	r0, #0
 8015bea:	e7be      	b.n	8015b6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8015bec:	7be0      	ldrb	r0, [r4, #15]
 8015bee:	e7bc      	b.n	8015b6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8015bf0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015bf4:	e7c3      	b.n	8015b7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8015bf6:	9b08      	ldr	r3, [sp, #32]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d0f7      	beq.n	8015bec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8015bfc:	2258      	movs	r2, #88	; 0x58
 8015bfe:	4639      	mov	r1, r7
 8015c00:	4628      	mov	r0, r5
 8015c02:	f00f fad9 	bl	80251b8 <memcpy>
 8015c06:	2300      	movs	r3, #0
 8015c08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015c0c:	6821      	ldr	r1, [r4, #0]
 8015c0e:	4628      	mov	r0, r5
 8015c10:	f7ff fbfc 	bl	801540c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015c14:	b203      	sxth	r3, r0
 8015c16:	e79e      	b.n	8015b56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08015c18 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015c18:	b510      	push	{r4, lr}
 8015c1a:	2b02      	cmp	r3, #2
 8015c1c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015c20:	d00b      	beq.n	8015c3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8015c22:	2b03      	cmp	r3, #3
 8015c24:	d00e      	beq.n	8015c44 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8015c26:	2b01      	cmp	r3, #1
 8015c28:	d001      	beq.n	8015c2e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8015c2a:	1860      	adds	r0, r4, r1
 8015c2c:	bd10      	pop	{r4, pc}
 8015c2e:	8880      	ldrh	r0, [r0, #4]
 8015c30:	4420      	add	r0, r4
 8015c32:	b200      	sxth	r0, r0
 8015c34:	1a80      	subs	r0, r0, r2
 8015c36:	3801      	subs	r0, #1
 8015c38:	e7f8      	b.n	8015c2c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8015c3a:	8880      	ldrh	r0, [r0, #4]
 8015c3c:	4420      	add	r0, r4
 8015c3e:	b200      	sxth	r0, r0
 8015c40:	1a40      	subs	r0, r0, r1
 8015c42:	e7f8      	b.n	8015c36 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015c44:	18a0      	adds	r0, r4, r2
 8015c46:	e7f1      	b.n	8015c2c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08015c48 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015c48:	b510      	push	{r4, lr}
 8015c4a:	2b02      	cmp	r3, #2
 8015c4c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8015c50:	d006      	beq.n	8015c60 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8015c52:	2b03      	cmp	r3, #3
 8015c54:	d00a      	beq.n	8015c6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015c56:	2b01      	cmp	r3, #1
 8015c58:	bf14      	ite	ne
 8015c5a:	18a0      	addne	r0, r4, r2
 8015c5c:	1860      	addeq	r0, r4, r1
 8015c5e:	bd10      	pop	{r4, pc}
 8015c60:	88c0      	ldrh	r0, [r0, #6]
 8015c62:	4420      	add	r0, r4
 8015c64:	b200      	sxth	r0, r0
 8015c66:	1a80      	subs	r0, r0, r2
 8015c68:	3801      	subs	r0, #1
 8015c6a:	e7f8      	b.n	8015c5e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8015c6c:	88c0      	ldrh	r0, [r0, #6]
 8015c6e:	4420      	add	r0, r4
 8015c70:	b200      	sxth	r0, r0
 8015c72:	1a40      	subs	r0, r0, r1
 8015c74:	e7f8      	b.n	8015c68 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08015c78 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015c78:	4b01      	ldr	r3, [pc, #4]	; (8015c80 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	601a      	str	r2, [r3, #0]
 8015c7e:	4770      	bx	lr
 8015c80:	2000a068 	.word	0x2000a068

08015c84 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015c84:	4603      	mov	r3, r0
 8015c86:	b1c8      	cbz	r0, 8015cbc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015c88:	0c02      	lsrs	r2, r0, #16
 8015c8a:	0412      	lsls	r2, r2, #16
 8015c8c:	b9a2      	cbnz	r2, 8015cb8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8015c8e:	0403      	lsls	r3, r0, #16
 8015c90:	2010      	movs	r0, #16
 8015c92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015c96:	bf04      	itt	eq
 8015c98:	021b      	lsleq	r3, r3, #8
 8015c9a:	3008      	addeq	r0, #8
 8015c9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015ca0:	bf04      	itt	eq
 8015ca2:	011b      	lsleq	r3, r3, #4
 8015ca4:	3004      	addeq	r0, #4
 8015ca6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015caa:	bf04      	itt	eq
 8015cac:	009b      	lsleq	r3, r3, #2
 8015cae:	3002      	addeq	r0, #2
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	db04      	blt.n	8015cbe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015cb4:	3001      	adds	r0, #1
 8015cb6:	4770      	bx	lr
 8015cb8:	2000      	movs	r0, #0
 8015cba:	e7ea      	b.n	8015c92 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015cbc:	2020      	movs	r0, #32
 8015cbe:	4770      	bx	lr

08015cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc4:	b087      	sub	sp, #28
 8015cc6:	4681      	mov	r9, r0
 8015cc8:	4698      	mov	r8, r3
 8015cca:	4610      	mov	r0, r2
 8015ccc:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8015cd0:	460d      	mov	r5, r1
 8015cd2:	b981      	cbnz	r1, 8015cf6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015cd4:	b14b      	cbz	r3, 8015cea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8015cd6:	460b      	mov	r3, r1
 8015cd8:	e9cd 4700 	strd	r4, r7, [sp]
 8015cdc:	464a      	mov	r2, r9
 8015cde:	4641      	mov	r1, r8
 8015ce0:	f7ff ffee 	bl	8015cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015ce4:	b007      	add	sp, #28
 8015ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cea:	f04f 33ff 	mov.w	r3, #4294967295
 8015cee:	603b      	str	r3, [r7, #0]
 8015cf0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015cf4:	e7f6      	b.n	8015ce4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015cf6:	fa32 fa01 	lsrs.w	sl, r2, r1
 8015cfa:	d107      	bne.n	8015d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8015cfc:	fb09 f602 	mul.w	r6, r9, r2
 8015d00:	fbb6 f0f4 	udiv	r0, r6, r4
 8015d04:	fb04 6610 	mls	r6, r4, r0, r6
 8015d08:	603e      	str	r6, [r7, #0]
 8015d0a:	e7eb      	b.n	8015ce4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015d0c:	2601      	movs	r6, #1
 8015d0e:	408e      	lsls	r6, r1
 8015d10:	3e01      	subs	r6, #1
 8015d12:	4016      	ands	r6, r2
 8015d14:	fa09 fb01 	lsl.w	fp, r9, r1
 8015d18:	4630      	mov	r0, r6
 8015d1a:	fbbb f3f4 	udiv	r3, fp, r4
 8015d1e:	9302      	str	r3, [sp, #8]
 8015d20:	fb0a f303 	mul.w	r3, sl, r3
 8015d24:	9303      	str	r3, [sp, #12]
 8015d26:	f7ff ffad 	bl	8015c84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015d2a:	464a      	mov	r2, r9
 8015d2c:	460b      	mov	r3, r1
 8015d2e:	e9cd 4700 	strd	r4, r7, [sp]
 8015d32:	4601      	mov	r1, r0
 8015d34:	4630      	mov	r0, r6
 8015d36:	f7ff ffc3 	bl	8015cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015d3a:	9b02      	ldr	r3, [sp, #8]
 8015d3c:	fb04 bb13 	mls	fp, r4, r3, fp
 8015d40:	4606      	mov	r6, r0
 8015d42:	4658      	mov	r0, fp
 8015d44:	eb05 0108 	add.w	r1, r5, r8
 8015d48:	f7ff ff9c 	bl	8015c84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015d4c:	ab05      	add	r3, sp, #20
 8015d4e:	e9cd 4300 	strd	r4, r3, [sp]
 8015d52:	465a      	mov	r2, fp
 8015d54:	4603      	mov	r3, r0
 8015d56:	4650      	mov	r0, sl
 8015d58:	f7ff ffb2 	bl	8015cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015d5c:	6839      	ldr	r1, [r7, #0]
 8015d5e:	9a05      	ldr	r2, [sp, #20]
 8015d60:	9b03      	ldr	r3, [sp, #12]
 8015d62:	4411      	add	r1, r2
 8015d64:	fbb1 f2f4 	udiv	r2, r1, r4
 8015d68:	18d3      	adds	r3, r2, r3
 8015d6a:	441e      	add	r6, r3
 8015d6c:	fb04 1412 	mls	r4, r4, r2, r1
 8015d70:	4430      	add	r0, r6
 8015d72:	603c      	str	r4, [r7, #0]
 8015d74:	e7b6      	b.n	8015ce4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08015d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015d76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d7a:	b085      	sub	sp, #20
 8015d7c:	f1b0 0900 	subs.w	r9, r0, #0
 8015d80:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015d82:	461d      	mov	r5, r3
 8015d84:	bfbf      	itttt	lt
 8015d86:	6823      	ldrlt	r3, [r4, #0]
 8015d88:	425b      	neglt	r3, r3
 8015d8a:	f1c9 0900 	rsblt	r9, r9, #0
 8015d8e:	6023      	strlt	r3, [r4, #0]
 8015d90:	bfb4      	ite	lt
 8015d92:	f04f 36ff 	movlt.w	r6, #4294967295
 8015d96:	2601      	movge	r6, #1
 8015d98:	2a00      	cmp	r2, #0
 8015d9a:	4617      	mov	r7, r2
 8015d9c:	da04      	bge.n	8015da8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8015d9e:	6823      	ldr	r3, [r4, #0]
 8015da0:	425b      	negs	r3, r3
 8015da2:	4257      	negs	r7, r2
 8015da4:	4276      	negs	r6, r6
 8015da6:	6023      	str	r3, [r4, #0]
 8015da8:	2d00      	cmp	r5, #0
 8015daa:	4638      	mov	r0, r7
 8015dac:	bfba      	itte	lt
 8015dae:	426d      	neglt	r5, r5
 8015db0:	f04f 38ff 	movlt.w	r8, #4294967295
 8015db4:	f04f 0801 	movge.w	r8, #1
 8015db8:	f7ff ff64 	bl	8015c84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015dbc:	ab03      	add	r3, sp, #12
 8015dbe:	e9cd 5300 	strd	r5, r3, [sp]
 8015dc2:	463a      	mov	r2, r7
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	4648      	mov	r0, r9
 8015dc8:	f7ff ff7a 	bl	8015cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015dcc:	6823      	ldr	r3, [r4, #0]
 8015dce:	9a03      	ldr	r2, [sp, #12]
 8015dd0:	4546      	cmp	r6, r8
 8015dd2:	441a      	add	r2, r3
 8015dd4:	fb92 f3f5 	sdiv	r3, r2, r5
 8015dd8:	4418      	add	r0, r3
 8015dda:	bf18      	it	ne
 8015ddc:	4240      	negne	r0, r0
 8015dde:	fb05 2313 	mls	r3, r5, r3, r2
 8015de2:	1c72      	adds	r2, r6, #1
 8015de4:	6023      	str	r3, [r4, #0]
 8015de6:	d105      	bne.n	8015df4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	f1c3 0200 	rsb	r2, r3, #0
 8015dee:	db0b      	blt.n	8015e08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015df0:	6022      	str	r2, [r4, #0]
 8015df2:	e006      	b.n	8015e02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015df4:	2e01      	cmp	r6, #1
 8015df6:	d104      	bne.n	8015e02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	da02      	bge.n	8015e02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015dfc:	442b      	add	r3, r5
 8015dfe:	3801      	subs	r0, #1
 8015e00:	6023      	str	r3, [r4, #0]
 8015e02:	b005      	add	sp, #20
 8015e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e08:	3801      	subs	r0, #1
 8015e0a:	1b52      	subs	r2, r2, r5
 8015e0c:	e7f0      	b.n	8015df0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08015e10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015e10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015e14:	4c1c      	ldr	r4, [pc, #112]	; (8015e88 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015e16:	6807      	ldr	r7, [r0, #0]
 8015e18:	69a3      	ldr	r3, [r4, #24]
 8015e1a:	4605      	mov	r5, r0
 8015e1c:	b92b      	cbnz	r3, 8015e2a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8015e1e:	6840      	ldr	r0, [r0, #4]
 8015e20:	e9c5 7000 	strd	r7, r0, [r5]
 8015e24:	b004      	add	sp, #16
 8015e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e2a:	68a2      	ldr	r2, [r4, #8]
 8015e2c:	6820      	ldr	r0, [r4, #0]
 8015e2e:	ae04      	add	r6, sp, #16
 8015e30:	f04f 0802 	mov.w	r8, #2
 8015e34:	fb93 f1f8 	sdiv	r1, r3, r8
 8015e38:	440a      	add	r2, r1
 8015e3a:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015e3e:	69e1      	ldr	r1, [r4, #28]
 8015e40:	9600      	str	r6, [sp, #0]
 8015e42:	463a      	mov	r2, r7
 8015e44:	f7ff ff97 	bl	8015d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e48:	69a3      	ldr	r3, [r4, #24]
 8015e4a:	686a      	ldr	r2, [r5, #4]
 8015e4c:	6a21      	ldr	r1, [r4, #32]
 8015e4e:	9600      	str	r6, [sp, #0]
 8015e50:	4607      	mov	r7, r0
 8015e52:	6860      	ldr	r0, [r4, #4]
 8015e54:	f7ff ff8f 	bl	8015d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e58:	6962      	ldr	r2, [r4, #20]
 8015e5a:	69a3      	ldr	r3, [r4, #24]
 8015e5c:	fb93 f8f8 	sdiv	r8, r3, r8
 8015e60:	4442      	add	r2, r8
 8015e62:	9203      	str	r2, [sp, #12]
 8015e64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015e66:	682a      	ldr	r2, [r5, #0]
 8015e68:	9600      	str	r6, [sp, #0]
 8015e6a:	4407      	add	r7, r0
 8015e6c:	68e0      	ldr	r0, [r4, #12]
 8015e6e:	f7ff ff82 	bl	8015d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e72:	9600      	str	r6, [sp, #0]
 8015e74:	4680      	mov	r8, r0
 8015e76:	69a3      	ldr	r3, [r4, #24]
 8015e78:	686a      	ldr	r2, [r5, #4]
 8015e7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015e7c:	6920      	ldr	r0, [r4, #16]
 8015e7e:	f7ff ff7a 	bl	8015d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e82:	4440      	add	r0, r8
 8015e84:	e7cc      	b.n	8015e20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015e86:	bf00      	nop
 8015e88:	2000a06c 	.word	0x2000a06c

08015e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015e8c:	b510      	push	{r4, lr}
 8015e8e:	4b07      	ldr	r3, [pc, #28]	; (8015eac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	2b01      	cmp	r3, #1
 8015e94:	d108      	bne.n	8015ea8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8015e96:	4b06      	ldr	r3, [pc, #24]	; (8015eb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8015e98:	880c      	ldrh	r4, [r1, #0]
 8015e9a:	881b      	ldrh	r3, [r3, #0]
 8015e9c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015ea0:	3b01      	subs	r3, #1
 8015ea2:	1b1b      	subs	r3, r3, r4
 8015ea4:	8003      	strh	r3, [r0, #0]
 8015ea6:	800a      	strh	r2, [r1, #0]
 8015ea8:	bd10      	pop	{r4, pc}
 8015eaa:	bf00      	nop
 8015eac:	2000a058 	.word	0x2000a058
 8015eb0:	2000a05c 	.word	0x2000a05c

08015eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015eb4:	b510      	push	{r4, lr}
 8015eb6:	4b0a      	ldr	r3, [pc, #40]	; (8015ee0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015eb8:	781b      	ldrb	r3, [r3, #0]
 8015eba:	2b01      	cmp	r3, #1
 8015ebc:	d10e      	bne.n	8015edc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015ebe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015ec2:	8843      	ldrh	r3, [r0, #2]
 8015ec4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015ec8:	8044      	strh	r4, [r0, #2]
 8015eca:	18ca      	adds	r2, r1, r3
 8015ecc:	4b05      	ldr	r3, [pc, #20]	; (8015ee4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015ece:	881b      	ldrh	r3, [r3, #0]
 8015ed0:	1a9b      	subs	r3, r3, r2
 8015ed2:	8003      	strh	r3, [r0, #0]
 8015ed4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015ed8:	80c3      	strh	r3, [r0, #6]
 8015eda:	8081      	strh	r1, [r0, #4]
 8015edc:	bd10      	pop	{r4, pc}
 8015ede:	bf00      	nop
 8015ee0:	2000a058 	.word	0x2000a058
 8015ee4:	2000a054 	.word	0x2000a054

08015ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015ee8:	b510      	push	{r4, lr}
 8015eea:	4b07      	ldr	r3, [pc, #28]	; (8015f08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	2b01      	cmp	r3, #1
 8015ef0:	d108      	bne.n	8015f04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015ef2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015ef6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015efa:	8003      	strh	r3, [r0, #0]
 8015efc:	8893      	ldrh	r3, [r2, #4]
 8015efe:	3b01      	subs	r3, #1
 8015f00:	1b1b      	subs	r3, r3, r4
 8015f02:	800b      	strh	r3, [r1, #0]
 8015f04:	bd10      	pop	{r4, pc}
 8015f06:	bf00      	nop
 8015f08:	2000a058 	.word	0x2000a058

08015f0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015f0c:	b513      	push	{r0, r1, r4, lr}
 8015f0e:	4b08      	ldr	r3, [pc, #32]	; (8015f30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015f10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015f14:	4b07      	ldr	r3, [pc, #28]	; (8015f34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8015f16:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f1e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015f22:	2400      	movs	r4, #0
 8015f24:	466a      	mov	r2, sp
 8015f26:	9400      	str	r4, [sp, #0]
 8015f28:	f7ff ffde 	bl	8015ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015f2c:	b002      	add	sp, #8
 8015f2e:	bd10      	pop	{r4, pc}
 8015f30:	2000a054 	.word	0x2000a054
 8015f34:	2000a056 	.word	0x2000a056

08015f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015f38:	b510      	push	{r4, lr}
 8015f3a:	4b0a      	ldr	r3, [pc, #40]	; (8015f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	2b01      	cmp	r3, #1
 8015f40:	460a      	mov	r2, r1
 8015f42:	d10d      	bne.n	8015f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015f44:	8881      	ldrh	r1, [r0, #4]
 8015f46:	8803      	ldrh	r3, [r0, #0]
 8015f48:	440b      	add	r3, r1
 8015f4a:	4601      	mov	r1, r0
 8015f4c:	3b01      	subs	r3, #1
 8015f4e:	f821 3b02 	strh.w	r3, [r1], #2
 8015f52:	f7ff ffc9 	bl	8015ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015f56:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015f5a:	88c2      	ldrh	r2, [r0, #6]
 8015f5c:	8082      	strh	r2, [r0, #4]
 8015f5e:	80c3      	strh	r3, [r0, #6]
 8015f60:	bd10      	pop	{r4, pc}
 8015f62:	bf00      	nop
 8015f64:	2000a058 	.word	0x2000a058

08015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8015f68:	b507      	push	{r0, r1, r2, lr}
 8015f6a:	4b09      	ldr	r3, [pc, #36]	; (8015f90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8015f6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015f70:	4b08      	ldr	r3, [pc, #32]	; (8015f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8015f72:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015f76:	2100      	movs	r1, #0
 8015f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f7c:	9100      	str	r1, [sp, #0]
 8015f7e:	4669      	mov	r1, sp
 8015f80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015f84:	f7ff ffd8 	bl	8015f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015f88:	b003      	add	sp, #12
 8015f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f8e:	bf00      	nop
 8015f90:	2000a054 	.word	0x2000a054
 8015f94:	2000a056 	.word	0x2000a056

08015f98 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015f98:	4b06      	ldr	r3, [pc, #24]	; (8015fb4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015f9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015f9e:	4b06      	ldr	r3, [pc, #24]	; (8015fb8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8015fa0:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8015fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fa8:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8015fac:	2100      	movs	r1, #0
 8015fae:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8015fb2:	4770      	bx	lr
 8015fb4:	2000a054 	.word	0x2000a054
 8015fb8:	2000a056 	.word	0x2000a056

08015fbc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015fbc:	4b03      	ldr	r3, [pc, #12]	; (8015fcc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8015fbe:	6818      	ldr	r0, [r3, #0]
 8015fc0:	b110      	cbz	r0, 8015fc8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8015fc2:	6803      	ldr	r3, [r0, #0]
 8015fc4:	699b      	ldr	r3, [r3, #24]
 8015fc6:	4718      	bx	r3
 8015fc8:	4770      	bx	lr
 8015fca:	bf00      	nop
 8015fcc:	2000a09c 	.word	0x2000a09c

08015fd0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015fd0:	4770      	bx	lr
	...

08015fd4 <_ZN8touchgfx11Application4drawEv>:
 8015fd4:	b507      	push	{r0, r1, r2, lr}
 8015fd6:	4b09      	ldr	r3, [pc, #36]	; (8015ffc <_ZN8touchgfx11Application4drawEv+0x28>)
 8015fd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015fdc:	4b08      	ldr	r3, [pc, #32]	; (8016000 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8015fde:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fe6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015fea:	6803      	ldr	r3, [r0, #0]
 8015fec:	2100      	movs	r1, #0
 8015fee:	9100      	str	r1, [sp, #0]
 8015ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ff2:	4669      	mov	r1, sp
 8015ff4:	4798      	blx	r3
 8015ff6:	b003      	add	sp, #12
 8015ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ffc:	2000a054 	.word	0x2000a054
 8016000:	2000a056 	.word	0x2000a056

08016004 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016004:	4b03      	ldr	r3, [pc, #12]	; (8016014 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016006:	6818      	ldr	r0, [r3, #0]
 8016008:	b110      	cbz	r0, 8016010 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801600a:	6803      	ldr	r3, [r0, #0]
 801600c:	69db      	ldr	r3, [r3, #28]
 801600e:	4718      	bx	r3
 8016010:	4770      	bx	lr
 8016012:	bf00      	nop
 8016014:	2000a09c 	.word	0x2000a09c

08016018 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016018:	4b03      	ldr	r3, [pc, #12]	; (8016028 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801601a:	6818      	ldr	r0, [r3, #0]
 801601c:	b110      	cbz	r0, 8016024 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801601e:	6803      	ldr	r3, [r0, #0]
 8016020:	6a1b      	ldr	r3, [r3, #32]
 8016022:	4718      	bx	r3
 8016024:	4770      	bx	lr
 8016026:	bf00      	nop
 8016028:	2000a09c 	.word	0x2000a09c

0801602c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801602c:	4b03      	ldr	r3, [pc, #12]	; (801603c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801602e:	6818      	ldr	r0, [r3, #0]
 8016030:	b110      	cbz	r0, 8016038 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016032:	6803      	ldr	r3, [r0, #0]
 8016034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016036:	4718      	bx	r3
 8016038:	4770      	bx	lr
 801603a:	bf00      	nop
 801603c:	2000a09c 	.word	0x2000a09c

08016040 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016040:	b570      	push	{r4, r5, r6, lr}
 8016042:	4d34      	ldr	r5, [pc, #208]	; (8016114 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8016044:	4604      	mov	r4, r0
 8016046:	6828      	ldr	r0, [r5, #0]
 8016048:	b140      	cbz	r0, 801605c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801604a:	7a03      	ldrb	r3, [r0, #8]
 801604c:	b933      	cbnz	r3, 801605c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801604e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8016052:	6803      	ldr	r3, [r0, #0]
 8016054:	689b      	ldr	r3, [r3, #8]
 8016056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801605a:	4718      	bx	r3
 801605c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8016060:	b97b      	cbnz	r3, 8016082 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016062:	b170      	cbz	r0, 8016082 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016064:	7a03      	ldrb	r3, [r0, #8]
 8016066:	b163      	cbz	r3, 8016082 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016068:	4b2b      	ldr	r3, [pc, #172]	; (8016118 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801606a:	6818      	ldr	r0, [r3, #0]
 801606c:	b110      	cbz	r0, 8016074 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801606e:	6803      	ldr	r3, [r0, #0]
 8016070:	691b      	ldr	r3, [r3, #16]
 8016072:	4798      	blx	r3
 8016074:	6828      	ldr	r0, [r5, #0]
 8016076:	6803      	ldr	r3, [r0, #0]
 8016078:	68db      	ldr	r3, [r3, #12]
 801607a:	4798      	blx	r3
 801607c:	2301      	movs	r3, #1
 801607e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8016082:	2500      	movs	r5, #0
 8016084:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8016088:	42a8      	cmp	r0, r5
 801608a:	dd0c      	ble.n	80160a6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801608c:	1963      	adds	r3, r4, r5
 801608e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8016092:	b132      	cbz	r2, 80160a2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8016094:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016098:	4413      	add	r3, r2
 801609a:	6858      	ldr	r0, [r3, #4]
 801609c:	6803      	ldr	r3, [r0, #0]
 801609e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160a0:	4798      	blx	r3
 80160a2:	3501      	adds	r5, #1
 80160a4:	e7ee      	b.n	8016084 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80160a6:	2300      	movs	r3, #0
 80160a8:	461a      	mov	r2, r3
 80160aa:	4298      	cmp	r0, r3
 80160ac:	d114      	bne.n	80160d8 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 80160ae:	1d25      	adds	r5, r4, #4
 80160b0:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80160b4:	1e48      	subs	r0, r1, #1
 80160b6:	b280      	uxth	r0, r0
 80160b8:	4291      	cmp	r1, r2
 80160ba:	dd24      	ble.n	8016106 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 80160bc:	4288      	cmp	r0, r1
 80160be:	d2fb      	bcs.n	80160b8 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 80160c0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 80160c4:	3304      	adds	r3, #4
 80160c6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80160ca:	428b      	cmp	r3, r1
 80160cc:	d018      	beq.n	8016100 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 80160ce:	f853 6f04 	ldr.w	r6, [r3, #4]!
 80160d2:	f843 6c04 	str.w	r6, [r3, #-4]
 80160d6:	e7f8      	b.n	80160ca <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 80160d8:	18e1      	adds	r1, r4, r3
 80160da:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 80160de:	b16d      	cbz	r5, 80160fc <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d00a      	beq.n	80160fa <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 80160e4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80160e8:	4431      	add	r1, r6
 80160ea:	684e      	ldr	r6, [r1, #4]
 80160ec:	b291      	uxth	r1, r2
 80160ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80160f2:	604e      	str	r6, [r1, #4]
 80160f4:	18a1      	adds	r1, r4, r2
 80160f6:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80160fa:	3201      	adds	r2, #1
 80160fc:	3301      	adds	r3, #1
 80160fe:	e7d4      	b.n	80160aa <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8016100:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8016104:	e7d4      	b.n	80160b0 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8016106:	4b04      	ldr	r3, [pc, #16]	; (8016118 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8016108:	6818      	ldr	r0, [r3, #0]
 801610a:	b110      	cbz	r0, 8016112 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801610c:	6803      	ldr	r3, [r0, #0]
 801610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016110:	e7a1      	b.n	8016056 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016112:	bd70      	pop	{r4, r5, r6, pc}
 8016114:	2000a0a0 	.word	0x2000a0a0
 8016118:	2000a09c 	.word	0x2000a09c

0801611c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801611c:	b570      	push	{r4, r5, r6, lr}
 801611e:	4606      	mov	r6, r0
 8016120:	460c      	mov	r4, r1
 8016122:	b929      	cbnz	r1, 8016130 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8016124:	4b0c      	ldr	r3, [pc, #48]	; (8016158 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8016126:	4a0d      	ldr	r2, [pc, #52]	; (801615c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8016128:	480d      	ldr	r0, [pc, #52]	; (8016160 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801612a:	2164      	movs	r1, #100	; 0x64
 801612c:	f00e ffc2 	bl	80250b4 <__assert_func>
 8016130:	4d0c      	ldr	r5, [pc, #48]	; (8016164 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8016132:	2300      	movs	r3, #0
 8016134:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8016138:	6828      	ldr	r0, [r5, #0]
 801613a:	b110      	cbz	r0, 8016142 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801613c:	6803      	ldr	r3, [r0, #0]
 801613e:	695b      	ldr	r3, [r3, #20]
 8016140:	4798      	blx	r3
 8016142:	602c      	str	r4, [r5, #0]
 8016144:	6823      	ldr	r3, [r4, #0]
 8016146:	4620      	mov	r0, r4
 8016148:	68db      	ldr	r3, [r3, #12]
 801614a:	4798      	blx	r3
 801614c:	6833      	ldr	r3, [r6, #0]
 801614e:	4630      	mov	r0, r6
 8016150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016156:	4718      	bx	r3
 8016158:	08029e04 	.word	0x08029e04
 801615c:	08029ed4 	.word	0x08029ed4
 8016160:	08029e0e 	.word	0x08029e0e
 8016164:	2000a09c 	.word	0x2000a09c

08016168 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016168:	b510      	push	{r4, lr}
 801616a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801616e:	888a      	ldrh	r2, [r1, #4]
 8016170:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016174:	4422      	add	r2, r4
 8016176:	b212      	sxth	r2, r2
 8016178:	4293      	cmp	r3, r2
 801617a:	da15      	bge.n	80161a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801617c:	8882      	ldrh	r2, [r0, #4]
 801617e:	4413      	add	r3, r2
 8016180:	b21b      	sxth	r3, r3
 8016182:	429c      	cmp	r4, r3
 8016184:	da10      	bge.n	80161a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016186:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801618a:	88c9      	ldrh	r1, [r1, #6]
 801618c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016190:	4419      	add	r1, r3
 8016192:	b209      	sxth	r1, r1
 8016194:	428a      	cmp	r2, r1
 8016196:	da07      	bge.n	80161a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016198:	88c0      	ldrh	r0, [r0, #6]
 801619a:	4410      	add	r0, r2
 801619c:	b200      	sxth	r0, r0
 801619e:	4283      	cmp	r3, r0
 80161a0:	bfac      	ite	ge
 80161a2:	2000      	movge	r0, #0
 80161a4:	2001      	movlt	r0, #1
 80161a6:	bd10      	pop	{r4, pc}
 80161a8:	2000      	movs	r0, #0
 80161aa:	e7fc      	b.n	80161a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080161ac <_ZNK8touchgfx4Rect8includesERKS0_>:
 80161ac:	b570      	push	{r4, r5, r6, lr}
 80161ae:	f9b1 4000 	ldrsh.w	r4, [r1]
 80161b2:	f9b0 5000 	ldrsh.w	r5, [r0]
 80161b6:	42ac      	cmp	r4, r5
 80161b8:	db18      	blt.n	80161ec <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80161ba:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80161be:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	db12      	blt.n	80161ec <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80161c6:	8886      	ldrh	r6, [r0, #4]
 80161c8:	4435      	add	r5, r6
 80161ca:	888e      	ldrh	r6, [r1, #4]
 80161cc:	4434      	add	r4, r6
 80161ce:	b22d      	sxth	r5, r5
 80161d0:	b224      	sxth	r4, r4
 80161d2:	42a5      	cmp	r5, r4
 80161d4:	db0a      	blt.n	80161ec <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80161d6:	88c0      	ldrh	r0, [r0, #6]
 80161d8:	4418      	add	r0, r3
 80161da:	88cb      	ldrh	r3, [r1, #6]
 80161dc:	441a      	add	r2, r3
 80161de:	b200      	sxth	r0, r0
 80161e0:	b212      	sxth	r2, r2
 80161e2:	4290      	cmp	r0, r2
 80161e4:	bfb4      	ite	lt
 80161e6:	2000      	movlt	r0, #0
 80161e8:	2001      	movge	r0, #1
 80161ea:	bd70      	pop	{r4, r5, r6, pc}
 80161ec:	2000      	movs	r0, #0
 80161ee:	e7fc      	b.n	80161ea <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

080161f0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80161f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161f2:	4604      	mov	r4, r0
 80161f4:	4608      	mov	r0, r1
 80161f6:	460d      	mov	r5, r1
 80161f8:	f7fc fff9 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 80161fc:	b978      	cbnz	r0, 801621e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80161fe:	4620      	mov	r0, r4
 8016200:	f7fc fff5 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8016204:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016208:	b150      	cbz	r0, 8016220 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801620a:	8026      	strh	r6, [r4, #0]
 801620c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016210:	8063      	strh	r3, [r4, #2]
 8016212:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016216:	80a3      	strh	r3, [r4, #4]
 8016218:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801621c:	80e3      	strh	r3, [r4, #6]
 801621e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016220:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016224:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016228:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801622c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016230:	88ed      	ldrh	r5, [r5, #6]
 8016232:	42b1      	cmp	r1, r6
 8016234:	460f      	mov	r7, r1
 8016236:	bfa8      	it	ge
 8016238:	4637      	movge	r7, r6
 801623a:	4293      	cmp	r3, r2
 801623c:	4618      	mov	r0, r3
 801623e:	4466      	add	r6, ip
 8016240:	bfa8      	it	ge
 8016242:	4610      	movge	r0, r2
 8016244:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016248:	8027      	strh	r7, [r4, #0]
 801624a:	442a      	add	r2, r5
 801624c:	88e5      	ldrh	r5, [r4, #6]
 801624e:	8060      	strh	r0, [r4, #2]
 8016250:	4461      	add	r1, ip
 8016252:	442b      	add	r3, r5
 8016254:	b236      	sxth	r6, r6
 8016256:	b209      	sxth	r1, r1
 8016258:	b212      	sxth	r2, r2
 801625a:	b21b      	sxth	r3, r3
 801625c:	428e      	cmp	r6, r1
 801625e:	bfac      	ite	ge
 8016260:	ebc7 0106 	rsbge	r1, r7, r6
 8016264:	ebc7 0101 	rsblt	r1, r7, r1
 8016268:	429a      	cmp	r2, r3
 801626a:	bfac      	ite	ge
 801626c:	ebc0 0202 	rsbge	r2, r0, r2
 8016270:	ebc0 0203 	rsblt	r2, r0, r3
 8016274:	80a1      	strh	r1, [r4, #4]
 8016276:	80e2      	strh	r2, [r4, #6]
 8016278:	e7d1      	b.n	801621e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801627c <_ZN8touchgfx11Application11getInstanceEv>:
 801627c:	4b01      	ldr	r3, [pc, #4]	; (8016284 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801627e:	6818      	ldr	r0, [r3, #0]
 8016280:	4770      	bx	lr
 8016282:	bf00      	nop
 8016284:	2000a0ac 	.word	0x2000a0ac

08016288 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8016288:	2300      	movs	r3, #0
 801628a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801628e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8016292:	30a8      	adds	r0, #168	; 0xa8
 8016294:	f802 3b01 	strb.w	r3, [r2], #1
 8016298:	4282      	cmp	r2, r0
 801629a:	d1fb      	bne.n	8016294 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801629c:	4770      	bx	lr

0801629e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801629e:	4603      	mov	r3, r0
 80162a0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80162a4:	2200      	movs	r2, #0
 80162a6:	801a      	strh	r2, [r3, #0]
 80162a8:	805a      	strh	r2, [r3, #2]
 80162aa:	809a      	strh	r2, [r3, #4]
 80162ac:	80da      	strh	r2, [r3, #6]
 80162ae:	3308      	adds	r3, #8
 80162b0:	428b      	cmp	r3, r1
 80162b2:	d1f8      	bne.n	80162a6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80162b4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80162b8:	4770      	bx	lr
	...

080162bc <_ZN8touchgfx11ApplicationC1Ev>:
 80162bc:	b570      	push	{r4, r5, r6, lr}
 80162be:	4b1a      	ldr	r3, [pc, #104]	; (8016328 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80162c0:	6003      	str	r3, [r0, #0]
 80162c2:	2500      	movs	r5, #0
 80162c4:	4604      	mov	r4, r0
 80162c6:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 80162ca:	30a8      	adds	r0, #168	; 0xa8
 80162cc:	f7ff ffe7 	bl	801629e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80162d0:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80162d4:	f7ff ffe3 	bl	801629e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80162d8:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80162dc:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80162e0:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80162e4:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80162e8:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80162ec:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80162f0:	490e      	ldr	r1, [pc, #56]	; (801632c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80162f2:	480f      	ldr	r0, [pc, #60]	; (8016330 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80162f4:	4e0f      	ldr	r6, [pc, #60]	; (8016334 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80162f6:	f00e fcab 	bl	8024c50 <CRC_Lock>
 80162fa:	4b0f      	ldr	r3, [pc, #60]	; (8016338 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80162fc:	b158      	cbz	r0, 8016316 <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 80162fe:	801d      	strh	r5, [r3, #0]
 8016300:	4a0e      	ldr	r2, [pc, #56]	; (801633c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016302:	2300      	movs	r3, #0
 8016304:	6013      	str	r3, [r2, #0]
 8016306:	4a0e      	ldr	r2, [pc, #56]	; (8016340 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8016308:	6033      	str	r3, [r6, #0]
 801630a:	4620      	mov	r0, r4
 801630c:	6013      	str	r3, [r2, #0]
 801630e:	f7ff ffbb 	bl	8016288 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8016312:	4620      	mov	r0, r4
 8016314:	bd70      	pop	{r4, r5, r6, pc}
 8016316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801631a:	2002      	movs	r0, #2
 801631c:	801a      	strh	r2, [r3, #0]
 801631e:	6030      	str	r0, [r6, #0]
 8016320:	f001 fa7e 	bl	8017820 <_ZN8touchgfx6Screen4drawEv>
 8016324:	e7ec      	b.n	8016300 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 8016326:	bf00      	nop
 8016328:	08029e98 	.word	0x08029e98
 801632c:	b5e8b5cd 	.word	0xb5e8b5cd
 8016330:	f407a5c2 	.word	0xf407a5c2
 8016334:	2000a09c 	.word	0x2000a09c
 8016338:	200000a0 	.word	0x200000a0
 801633c:	2000a0ac 	.word	0x2000a0ac
 8016340:	2000a0a0 	.word	0x2000a0a0

08016344 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016344:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016348:	428b      	cmp	r3, r1
 801634a:	b510      	push	{r4, lr}
 801634c:	d90e      	bls.n	801636c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801634e:	3b01      	subs	r3, #1
 8016350:	b29b      	uxth	r3, r3
 8016352:	428b      	cmp	r3, r1
 8016354:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8016358:	d908      	bls.n	801636c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801635a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801635e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016362:	681a      	ldr	r2, [r3, #0]
 8016364:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016368:	685a      	ldr	r2, [r3, #4]
 801636a:	6062      	str	r2, [r4, #4]
 801636c:	bd10      	pop	{r4, pc}
	...

08016370 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8016370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016372:	466b      	mov	r3, sp
 8016374:	e883 0006 	stmia.w	r3, {r1, r2}
 8016378:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801637c:	2a07      	cmp	r2, #7
 801637e:	4604      	mov	r4, r0
 8016380:	d906      	bls.n	8016390 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8016382:	4b09      	ldr	r3, [pc, #36]	; (80163a8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8016384:	4a09      	ldr	r2, [pc, #36]	; (80163ac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8016386:	480a      	ldr	r0, [pc, #40]	; (80163b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8016388:	f240 118f 	movw	r1, #399	; 0x18f
 801638c:	f00e fe92 	bl	80250b4 <__assert_func>
 8016390:	1c51      	adds	r1, r2, #1
 8016392:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8016396:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801639a:	cb03      	ldmia	r3!, {r0, r1}
 801639c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80163a0:	6069      	str	r1, [r5, #4]
 80163a2:	b003      	add	sp, #12
 80163a4:	bd30      	pop	{r4, r5, pc}
 80163a6:	bf00      	nop
 80163a8:	08029e38 	.word	0x08029e38
 80163ac:	08029f18 	.word	0x08029f18
 80163b0:	08029e67 	.word	0x08029e67

080163b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80163b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163b8:	b08d      	sub	sp, #52	; 0x34
 80163ba:	ac08      	add	r4, sp, #32
 80163bc:	4683      	mov	fp, r0
 80163be:	4620      	mov	r0, r4
 80163c0:	e884 0006 	stmia.w	r4, {r1, r2}
 80163c4:	f7fc ff13 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d16a      	bne.n	80164a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80163cc:	9402      	str	r4, [sp, #8]
 80163ce:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80163d2:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80163d6:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80163da:	2400      	movs	r4, #0
 80163dc:	9301      	str	r3, [sp, #4]
 80163de:	36a0      	adds	r6, #160	; 0xa0
 80163e0:	42a5      	cmp	r5, r4
 80163e2:	d00d      	beq.n	8016400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 80163e4:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80163e8:	9802      	ldr	r0, [sp, #8]
 80163ea:	f7ff fedf 	bl	80161ac <_ZNK8touchgfx4Rect8includesERKS0_>
 80163ee:	b128      	cbz	r0, 80163fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 80163f0:	1e69      	subs	r1, r5, #1
 80163f2:	1b09      	subs	r1, r1, r4
 80163f4:	b289      	uxth	r1, r1
 80163f6:	9801      	ldr	r0, [sp, #4]
 80163f8:	f7ff ffa4 	bl	8016344 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80163fc:	3401      	adds	r4, #1
 80163fe:	e7ef      	b.n	80163e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016400:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8016404:	9703      	str	r7, [sp, #12]
 8016406:	1e7b      	subs	r3, r7, #1
 8016408:	9300      	str	r3, [sp, #0]
 801640a:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801640e:	2400      	movs	r4, #0
 8016410:	4655      	mov	r5, sl
 8016412:	9704      	str	r7, [sp, #16]
 8016414:	4626      	mov	r6, r4
 8016416:	9b04      	ldr	r3, [sp, #16]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d078      	beq.n	801650e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801641c:	9902      	ldr	r1, [sp, #8]
 801641e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016422:	f7ff fea1 	bl	8016168 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016426:	b360      	cbz	r0, 8016482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8016428:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801642c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8016430:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8016434:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8016438:	45e6      	cmp	lr, ip
 801643a:	db35      	blt.n	80164a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801643c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8016440:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8016444:	4472      	add	r2, lr
 8016446:	4463      	add	r3, ip
 8016448:	b212      	sxth	r2, r2
 801644a:	b21b      	sxth	r3, r3
 801644c:	429a      	cmp	r2, r3
 801644e:	dc2b      	bgt.n	80164a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8016450:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016454:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8016458:	fa1f f288 	uxth.w	r2, r8
 801645c:	4413      	add	r3, r2
 801645e:	b29b      	uxth	r3, r3
 8016460:	45c1      	cmp	r9, r8
 8016462:	fa0f fe83 	sxth.w	lr, r3
 8016466:	fa1f fc89 	uxth.w	ip, r9
 801646a:	db0f      	blt.n	801648c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801646c:	eba3 030c 	sub.w	r3, r3, ip
 8016470:	1ac9      	subs	r1, r1, r3
 8016472:	b209      	sxth	r1, r1
 8016474:	2900      	cmp	r1, #0
 8016476:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801647a:	dd12      	ble.n	80164a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801647c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8016480:	4604      	mov	r4, r0
 8016482:	9b04      	ldr	r3, [sp, #16]
 8016484:	3b01      	subs	r3, #1
 8016486:	9304      	str	r3, [sp, #16]
 8016488:	3d08      	subs	r5, #8
 801648a:	e7c4      	b.n	8016416 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801648c:	4461      	add	r1, ip
 801648e:	b209      	sxth	r1, r1
 8016490:	4571      	cmp	r1, lr
 8016492:	dc3a      	bgt.n	801650a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8016494:	eba2 020c 	sub.w	r2, r2, ip
 8016498:	b212      	sxth	r2, r2
 801649a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801649e:	2a00      	cmp	r2, #0
 80164a0:	dcee      	bgt.n	8016480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80164a2:	b00d      	add	sp, #52	; 0x34
 80164a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164a8:	45c1      	cmp	r9, r8
 80164aa:	db2e      	blt.n	801650a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80164ac:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80164b0:	4499      	add	r9, r3
 80164b2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80164b6:	4498      	add	r8, r3
 80164b8:	fa0f f989 	sxth.w	r9, r9
 80164bc:	fa0f f888 	sxth.w	r8, r8
 80164c0:	45c1      	cmp	r9, r8
 80164c2:	dc22      	bgt.n	801650a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80164c4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80164c8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80164cc:	fa1f f28c 	uxth.w	r2, ip
 80164d0:	4413      	add	r3, r2
 80164d2:	b29b      	uxth	r3, r3
 80164d4:	45e6      	cmp	lr, ip
 80164d6:	fa1f f88e 	uxth.w	r8, lr
 80164da:	fa0f f983 	sxth.w	r9, r3
 80164de:	db0a      	blt.n	80164f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 80164e0:	eba3 0308 	sub.w	r3, r3, r8
 80164e4:	1ac9      	subs	r1, r1, r3
 80164e6:	b209      	sxth	r1, r1
 80164e8:	2900      	cmp	r1, #0
 80164ea:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80164ee:	ddd8      	ble.n	80164a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80164f0:	f8ad 9020 	strh.w	r9, [sp, #32]
 80164f4:	e7c4      	b.n	8016480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80164f6:	4441      	add	r1, r8
 80164f8:	b209      	sxth	r1, r1
 80164fa:	4549      	cmp	r1, r9
 80164fc:	dc05      	bgt.n	801650a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80164fe:	eba2 0208 	sub.w	r2, r2, r8
 8016502:	b212      	sxth	r2, r2
 8016504:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8016508:	e7c9      	b.n	801649e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801650a:	4606      	mov	r6, r0
 801650c:	e7b9      	b.n	8016482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801650e:	2c00      	cmp	r4, #0
 8016510:	f47f af7d 	bne.w	801640e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8016514:	2e00      	cmp	r6, #0
 8016516:	f000 81dd 	beq.w	80168d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801651a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801651e:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8016522:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8016526:	b2b9      	uxth	r1, r7
 8016528:	9104      	str	r1, [sp, #16]
 801652a:	9804      	ldr	r0, [sp, #16]
 801652c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8016530:	4401      	add	r1, r0
 8016532:	b2b3      	uxth	r3, r6
 8016534:	b289      	uxth	r1, r1
 8016536:	441a      	add	r2, r3
 8016538:	9105      	str	r1, [sp, #20]
 801653a:	b292      	uxth	r2, r2
 801653c:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8016540:	fa0f f882 	sxth.w	r8, r2
 8016544:	4655      	mov	r5, sl
 8016546:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801654a:	9b03      	ldr	r3, [sp, #12]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d054      	beq.n	80165fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8016550:	9902      	ldr	r1, [sp, #8]
 8016552:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016556:	f7ff fe07 	bl	8016168 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801655a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801655e:	b1d8      	cbz	r0, 8016598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016560:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8016564:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8016568:	4576      	cmp	r6, lr
 801656a:	dc26      	bgt.n	80165ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801656c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8016570:	44f4      	add	ip, lr
 8016572:	fa0f fc8c 	sxth.w	ip, ip
 8016576:	45e0      	cmp	r8, ip
 8016578:	db1f      	blt.n	80165ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801657a:	428f      	cmp	r7, r1
 801657c:	fa1f fc81 	uxth.w	ip, r1
 8016580:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8016584:	dc0f      	bgt.n	80165a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8016586:	9805      	ldr	r0, [sp, #20]
 8016588:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801658c:	eba0 0c0c 	sub.w	ip, r0, ip
 8016590:	eba1 010c 	sub.w	r1, r1, ip
 8016594:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8016598:	4620      	mov	r0, r4
 801659a:	9903      	ldr	r1, [sp, #12]
 801659c:	3901      	subs	r1, #1
 801659e:	9103      	str	r1, [sp, #12]
 80165a0:	3d08      	subs	r5, #8
 80165a2:	4604      	mov	r4, r0
 80165a4:	e7cf      	b.n	8016546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 80165a6:	4461      	add	r1, ip
 80165a8:	b209      	sxth	r1, r1
 80165aa:	4549      	cmp	r1, r9
 80165ac:	dcf5      	bgt.n	801659a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80165ae:	9904      	ldr	r1, [sp, #16]
 80165b0:	eba1 0c0c 	sub.w	ip, r1, ip
 80165b4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80165b8:	e7ee      	b.n	8016598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80165ba:	428f      	cmp	r7, r1
 80165bc:	dced      	bgt.n	801659a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80165be:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80165c2:	4461      	add	r1, ip
 80165c4:	b209      	sxth	r1, r1
 80165c6:	4589      	cmp	r9, r1
 80165c8:	dbe7      	blt.n	801659a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80165ca:	4576      	cmp	r6, lr
 80165cc:	fa1f fc8e 	uxth.w	ip, lr
 80165d0:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80165d4:	dc08      	bgt.n	80165e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 80165d6:	eba2 0c0c 	sub.w	ip, r2, ip
 80165da:	eba1 010c 	sub.w	r1, r1, ip
 80165de:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80165e2:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80165e6:	e7d7      	b.n	8016598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80165e8:	4461      	add	r1, ip
 80165ea:	b209      	sxth	r1, r1
 80165ec:	4588      	cmp	r8, r1
 80165ee:	dbd4      	blt.n	801659a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80165f0:	eba3 0c0c 	sub.w	ip, r3, ip
 80165f4:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80165f8:	e7ce      	b.n	8016598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80165fa:	2c00      	cmp	r4, #0
 80165fc:	f000 816a 	beq.w	80168d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 8016600:	9b00      	ldr	r3, [sp, #0]
 8016602:	3301      	adds	r3, #1
 8016604:	f000 8166 	beq.w	80168d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 8016608:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801660c:	4621      	mov	r1, r4
 801660e:	9802      	ldr	r0, [sp, #8]
 8016610:	f7ff fdcc 	bl	80161ac <_ZNK8touchgfx4Rect8includesERKS0_>
 8016614:	b120      	cbz	r0, 8016620 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8016616:	f8bd 1000 	ldrh.w	r1, [sp]
 801661a:	9801      	ldr	r0, [sp, #4]
 801661c:	f7ff fe92 	bl	8016344 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016620:	9902      	ldr	r1, [sp, #8]
 8016622:	4620      	mov	r0, r4
 8016624:	f7ff fda0 	bl	8016168 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016628:	2800      	cmp	r0, #0
 801662a:	f000 809b 	beq.w	8016764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801662e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8016632:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8016636:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801663a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801663e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8016642:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8016646:	fa1f f288 	uxth.w	r2, r8
 801664a:	19d5      	adds	r5, r2, r7
 801664c:	fa1f f985 	uxth.w	r9, r5
 8016650:	fa0f f589 	sxth.w	r5, r9
 8016654:	b2a1      	uxth	r1, r4
 8016656:	440b      	add	r3, r1
 8016658:	9503      	str	r5, [sp, #12]
 801665a:	45a0      	cmp	r8, r4
 801665c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8016660:	9507      	str	r5, [sp, #28]
 8016662:	b29b      	uxth	r3, r3
 8016664:	f340 809d 	ble.w	80167a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8016668:	1a52      	subs	r2, r2, r1
 801666a:	b292      	uxth	r2, r2
 801666c:	4584      	cmp	ip, r0
 801666e:	fa0f fe83 	sxth.w	lr, r3
 8016672:	b215      	sxth	r5, r2
 8016674:	dd2f      	ble.n	80166d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8016676:	9e00      	ldr	r6, [sp, #0]
 8016678:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801667c:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8016680:	9e03      	ldr	r6, [sp, #12]
 8016682:	eba6 060e 	sub.w	r6, r6, lr
 8016686:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801668a:	fa1f fc8c 	uxth.w	ip, ip
 801668e:	b280      	uxth	r0, r0
 8016690:	ebac 0300 	sub.w	r3, ip, r0
 8016694:	448c      	add	ip, r1
 8016696:	4470      	add	r0, lr
 8016698:	b29b      	uxth	r3, r3
 801669a:	fa0f fc8c 	sxth.w	ip, ip
 801669e:	b200      	sxth	r0, r0
 80166a0:	b21c      	sxth	r4, r3
 80166a2:	ebac 0000 	sub.w	r0, ip, r0
 80166a6:	4366      	muls	r6, r4
 80166a8:	4368      	muls	r0, r5
 80166aa:	4286      	cmp	r6, r0
 80166ac:	db09      	blt.n	80166c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 80166ae:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80166b2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80166b6:	4417      	add	r7, r2
 80166b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80166bc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80166c0:	e685      	b.n	80163ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80166c2:	440b      	add	r3, r1
 80166c4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80166c8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80166cc:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 80166d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80166d4:	e67b      	b.n	80163ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80166d6:	9e03      	ldr	r6, [sp, #12]
 80166d8:	45b6      	cmp	lr, r6
 80166da:	da28      	bge.n	801672e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 80166dc:	9b00      	ldr	r3, [sp, #0]
 80166de:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 80166e2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 80166e6:	eb04 030c 	add.w	r3, r4, ip
 80166ea:	fa1f f883 	uxth.w	r8, r3
 80166ee:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 80166f2:	4403      	add	r3, r0
 80166f4:	eba3 0308 	sub.w	r3, r3, r8
 80166f8:	b29b      	uxth	r3, r3
 80166fa:	fa0f f988 	sxth.w	r9, r8
 80166fe:	eba0 000c 	sub.w	r0, r0, ip
 8016702:	fa0f f883 	sxth.w	r8, r3
 8016706:	eba6 060e 	sub.w	r6, r6, lr
 801670a:	4368      	muls	r0, r5
 801670c:	fb08 f606 	mul.w	r6, r8, r6
 8016710:	42b0      	cmp	r0, r6
 8016712:	dc06      	bgt.n	8016722 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8016714:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8016718:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801671c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8016720:	e7c9      	b.n	80166b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8016722:	4423      	add	r3, r4
 8016724:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8016728:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801672c:	e64f      	b.n	80163ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801672e:	9807      	ldr	r0, [sp, #28]
 8016730:	eba3 0309 	sub.w	r3, r3, r9
 8016734:	b29b      	uxth	r3, r3
 8016736:	2806      	cmp	r0, #6
 8016738:	fa0f fc83 	sxth.w	ip, r3
 801673c:	d818      	bhi.n	8016770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801673e:	4652      	mov	r2, sl
 8016740:	ab0a      	add	r3, sp, #40	; 0x28
 8016742:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8016746:	6851      	ldr	r1, [r2, #4]
 8016748:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801674c:	c303      	stmia	r3!, {r0, r1}
 801674e:	9b03      	ldr	r3, [sp, #12]
 8016750:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8016754:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8016758:	ab0a      	add	r3, sp, #40	; 0x28
 801675a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801675e:	9801      	ldr	r0, [sp, #4]
 8016760:	f7ff fe06 	bl	8016370 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016764:	9b00      	ldr	r3, [sp, #0]
 8016766:	3b01      	subs	r3, #1
 8016768:	9300      	str	r3, [sp, #0]
 801676a:	f1aa 0a08 	sub.w	sl, sl, #8
 801676e:	e747      	b.n	8016600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016770:	9800      	ldr	r0, [sp, #0]
 8016772:	45ac      	cmp	ip, r5
 8016774:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8016778:	db0c      	blt.n	8016794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801677a:	4417      	add	r7, r2
 801677c:	b2bf      	uxth	r7, r7
 801677e:	4458      	add	r0, fp
 8016780:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8016784:	440f      	add	r7, r1
 8016786:	f8ad 4020 	strh.w	r4, [sp, #32]
 801678a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801678e:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8016792:	e61c      	b.n	80163ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8016794:	4458      	add	r0, fp
 8016796:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801679a:	443b      	add	r3, r7
 801679c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80167a0:	e615      	b.n	80163ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80167a2:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80167a6:	fa1f f18c 	uxth.w	r1, ip
 80167aa:	eb01 0e05 	add.w	lr, r1, r5
 80167ae:	b282      	uxth	r2, r0
 80167b0:	fa1f fe8e 	uxth.w	lr, lr
 80167b4:	9204      	str	r2, [sp, #16]
 80167b6:	fa0f f28e 	sxth.w	r2, lr
 80167ba:	9205      	str	r2, [sp, #20]
 80167bc:	9e04      	ldr	r6, [sp, #16]
 80167be:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 80167c2:	4432      	add	r2, r6
 80167c4:	b292      	uxth	r2, r2
 80167c6:	4584      	cmp	ip, r0
 80167c8:	9206      	str	r2, [sp, #24]
 80167ca:	da26      	bge.n	801681a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 80167cc:	eba3 0309 	sub.w	r3, r3, r9
 80167d0:	eba2 020e 	sub.w	r2, r2, lr
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	b292      	uxth	r2, r2
 80167d8:	fa0f fa83 	sxth.w	sl, r3
 80167dc:	b211      	sxth	r1, r2
 80167de:	eba0 000c 	sub.w	r0, r0, ip
 80167e2:	eba4 0408 	sub.w	r4, r4, r8
 80167e6:	fb0a f000 	mul.w	r0, sl, r0
 80167ea:	434c      	muls	r4, r1
 80167ec:	42a0      	cmp	r0, r4
 80167ee:	9800      	ldr	r0, [sp, #0]
 80167f0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80167f4:	dc06      	bgt.n	8016804 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 80167f6:	4458      	add	r0, fp
 80167f8:	9a05      	ldr	r2, [sp, #20]
 80167fa:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 80167fe:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8016802:	e7ca      	b.n	801679a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8016804:	eb0b 0300 	add.w	r3, fp, r0
 8016808:	9903      	ldr	r1, [sp, #12]
 801680a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801680e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8016812:	442a      	add	r2, r5
 8016814:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8016818:	e5d9      	b.n	80163ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801681a:	9e04      	ldr	r6, [sp, #16]
 801681c:	9a03      	ldr	r2, [sp, #12]
 801681e:	1b89      	subs	r1, r1, r6
 8016820:	b21e      	sxth	r6, r3
 8016822:	b289      	uxth	r1, r1
 8016824:	4296      	cmp	r6, r2
 8016826:	fa0f fc81 	sxth.w	ip, r1
 801682a:	dd26      	ble.n	801687a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 801682c:	eba3 0309 	sub.w	r3, r3, r9
 8016830:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8016834:	9e05      	ldr	r6, [sp, #20]
 8016836:	b29b      	uxth	r3, r3
 8016838:	eba6 0902 	sub.w	r9, r6, r2
 801683c:	b218      	sxth	r0, r3
 801683e:	eba4 0408 	sub.w	r4, r4, r8
 8016842:	fb0c f404 	mul.w	r4, ip, r4
 8016846:	fb00 f909 	mul.w	r9, r0, r9
 801684a:	9a00      	ldr	r2, [sp, #0]
 801684c:	454c      	cmp	r4, r9
 801684e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016852:	db03      	blt.n	801685c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 8016854:	445a      	add	r2, fp
 8016856:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801685a:	e79e      	b.n	801679a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801685c:	eb0b 0302 	add.w	r3, fp, r2
 8016860:	9a03      	ldr	r2, [sp, #12]
 8016862:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8016866:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801686a:	4429      	add	r1, r5
 801686c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8016870:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016874:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8016878:	e5a9      	b.n	80163ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801687a:	9b06      	ldr	r3, [sp, #24]
 801687c:	9c07      	ldr	r4, [sp, #28]
 801687e:	eba3 020e 	sub.w	r2, r3, lr
 8016882:	b292      	uxth	r2, r2
 8016884:	2c06      	cmp	r4, #6
 8016886:	b213      	sxth	r3, r2
 8016888:	d80d      	bhi.n	80168a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 801688a:	4651      	mov	r1, sl
 801688c:	aa0a      	add	r2, sp, #40	; 0x28
 801688e:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8016892:	6849      	ldr	r1, [r1, #4]
 8016894:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8016898:	9b05      	ldr	r3, [sp, #20]
 801689a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801689e:	c203      	stmia	r2!, {r0, r1}
 80168a0:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 80168a4:	e758      	b.n	8016758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 80168a6:	9c00      	ldr	r4, [sp, #0]
 80168a8:	4563      	cmp	r3, ip
 80168aa:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80168ae:	db0d      	blt.n	80168cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 80168b0:	4429      	add	r1, r5
 80168b2:	9a04      	ldr	r2, [sp, #16]
 80168b4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80168b8:	b289      	uxth	r1, r1
 80168ba:	445c      	add	r4, fp
 80168bc:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80168c0:	4411      	add	r1, r2
 80168c2:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 80168c6:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80168ca:	e580      	b.n	80163ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80168cc:	445c      	add	r4, fp
 80168ce:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 80168d2:	e79e      	b.n	8016812 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 80168d4:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80168d8:	2f07      	cmp	r7, #7
 80168da:	d806      	bhi.n	80168ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 80168dc:	ab08      	add	r3, sp, #32
 80168de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80168e2:	9801      	ldr	r0, [sp, #4]
 80168e4:	f7ff fd44 	bl	8016370 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80168e8:	e5db      	b.n	80164a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80168ea:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80168ee:	f107 39ff 	add.w	r9, r7, #4294967295
 80168f2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80168f6:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 80168fa:	f04f 35ff 	mov.w	r5, #4294967295
 80168fe:	2400      	movs	r4, #0
 8016900:	9304      	str	r3, [sp, #16]
 8016902:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8016906:	9300      	str	r3, [sp, #0]
 8016908:	f109 32ff 	add.w	r2, r9, #4294967295
 801690c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8016910:	9303      	str	r3, [sp, #12]
 8016912:	4690      	mov	r8, r2
 8016914:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016918:	f1b8 3fff 	cmp.w	r8, #4294967295
 801691c:	bf14      	ite	ne
 801691e:	9904      	ldrne	r1, [sp, #16]
 8016920:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8016924:	6818      	ldr	r0, [r3, #0]
 8016926:	9206      	str	r2, [sp, #24]
 8016928:	bf18      	it	ne
 801692a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801692e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8016932:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016936:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801693a:	9305      	str	r3, [sp, #20]
 801693c:	fb16 f601 	smulbb	r6, r6, r1
 8016940:	6859      	ldr	r1, [r3, #4]
 8016942:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016946:	4671      	mov	r1, lr
 8016948:	a80a      	add	r0, sp, #40	; 0x28
 801694a:	f7ff fc51 	bl	80161f0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801694e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8016952:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016956:	9b03      	ldr	r3, [sp, #12]
 8016958:	9a00      	ldr	r2, [sp, #0]
 801695a:	fb11 f100 	smulbb	r1, r1, r0
 801695e:	fb02 6603 	mla	r6, r2, r3, r6
 8016962:	1b8e      	subs	r6, r1, r6
 8016964:	2008      	movs	r0, #8
 8016966:	fb91 f1f0 	sdiv	r1, r1, r0
 801696a:	42b1      	cmp	r1, r6
 801696c:	dc21      	bgt.n	80169b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801696e:	4556      	cmp	r6, sl
 8016970:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8016974:	da03      	bge.n	801697e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8016976:	b1e6      	cbz	r6, 80169b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 8016978:	46b2      	mov	sl, r6
 801697a:	4645      	mov	r5, r8
 801697c:	464c      	mov	r4, r9
 801697e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016982:	f118 0f02 	cmn.w	r8, #2
 8016986:	d1c7      	bne.n	8016918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 8016988:	f1b2 3fff 	cmp.w	r2, #4294967295
 801698c:	f1a7 0708 	sub.w	r7, r7, #8
 8016990:	4691      	mov	r9, r2
 8016992:	d1b6      	bne.n	8016902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 8016994:	9b01      	ldr	r3, [sp, #4]
 8016996:	b2a6      	uxth	r6, r4
 8016998:	00e4      	lsls	r4, r4, #3
 801699a:	1918      	adds	r0, r3, r4
 801699c:	1c6b      	adds	r3, r5, #1
 801699e:	d10b      	bne.n	80169b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 80169a0:	4601      	mov	r1, r0
 80169a2:	9802      	ldr	r0, [sp, #8]
 80169a4:	f7ff fc24 	bl	80161f0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80169a8:	4631      	mov	r1, r6
 80169aa:	9801      	ldr	r0, [sp, #4]
 80169ac:	f7ff fcca 	bl	8016344 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80169b0:	e50d      	b.n	80163ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80169b2:	4645      	mov	r5, r8
 80169b4:	464c      	mov	r4, r9
 80169b6:	e7ed      	b.n	8016994 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 80169b8:	9b01      	ldr	r3, [sp, #4]
 80169ba:	00ed      	lsls	r5, r5, #3
 80169bc:	1959      	adds	r1, r3, r5
 80169be:	f7ff fc17 	bl	80161f0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80169c2:	9b02      	ldr	r3, [sp, #8]
 80169c4:	cb03      	ldmia	r3!, {r0, r1}
 80169c6:	445d      	add	r5, fp
 80169c8:	445c      	add	r4, fp
 80169ca:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 80169ce:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 80169d2:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 80169d6:	9b02      	ldr	r3, [sp, #8]
 80169d8:	6861      	ldr	r1, [r4, #4]
 80169da:	c303      	stmia	r3!, {r0, r1}
 80169dc:	e7e4      	b.n	80169a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

080169e0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80169e0:	b530      	push	{r4, r5, lr}
 80169e2:	4b1d      	ldr	r3, [pc, #116]	; (8016a58 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80169e4:	b085      	sub	sp, #20
 80169e6:	460c      	mov	r4, r1
 80169e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80169ec:	4b1b      	ldr	r3, [pc, #108]	; (8016a5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80169ee:	f8ad 2004 	strh.w	r2, [sp, #4]
 80169f2:	2100      	movs	r1, #0
 80169f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169f8:	9100      	str	r1, [sp, #0]
 80169fa:	4605      	mov	r5, r0
 80169fc:	6861      	ldr	r1, [r4, #4]
 80169fe:	6820      	ldr	r0, [r4, #0]
 8016a00:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016a04:	ab02      	add	r3, sp, #8
 8016a06:	c303      	stmia	r3!, {r0, r1}
 8016a08:	4669      	mov	r1, sp
 8016a0a:	a802      	add	r0, sp, #8
 8016a0c:	f7fc fbac 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 8016a10:	ab02      	add	r3, sp, #8
 8016a12:	cb03      	ldmia	r3!, {r0, r1}
 8016a14:	4b12      	ldr	r3, [pc, #72]	; (8016a60 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8016a16:	6020      	str	r0, [r4, #0]
 8016a18:	6818      	ldr	r0, [r3, #0]
 8016a1a:	6061      	str	r1, [r4, #4]
 8016a1c:	b138      	cbz	r0, 8016a2e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8016a1e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8016a22:	b133      	cbz	r3, 8016a32 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8016a24:	6821      	ldr	r1, [r4, #0]
 8016a26:	6862      	ldr	r2, [r4, #4]
 8016a28:	4628      	mov	r0, r5
 8016a2a:	f7ff fcc3 	bl	80163b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016a2e:	b005      	add	sp, #20
 8016a30:	bd30      	pop	{r4, r5, pc}
 8016a32:	6803      	ldr	r3, [r0, #0]
 8016a34:	4621      	mov	r1, r4
 8016a36:	689b      	ldr	r3, [r3, #8]
 8016a38:	4798      	blx	r3
 8016a3a:	4b0a      	ldr	r3, [pc, #40]	; (8016a64 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8016a3c:	6818      	ldr	r0, [r3, #0]
 8016a3e:	b118      	cbz	r0, 8016a48 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8016a40:	6803      	ldr	r3, [r0, #0]
 8016a42:	4621      	mov	r1, r4
 8016a44:	689b      	ldr	r3, [r3, #8]
 8016a46:	4798      	blx	r3
 8016a48:	4b07      	ldr	r3, [pc, #28]	; (8016a68 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8016a4a:	6818      	ldr	r0, [r3, #0]
 8016a4c:	6803      	ldr	r3, [r0, #0]
 8016a4e:	4621      	mov	r1, r4
 8016a50:	695b      	ldr	r3, [r3, #20]
 8016a52:	4798      	blx	r3
 8016a54:	e7eb      	b.n	8016a2e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8016a56:	bf00      	nop
 8016a58:	2000a054 	.word	0x2000a054
 8016a5c:	2000a056 	.word	0x2000a056
 8016a60:	2000a09c 	.word	0x2000a09c
 8016a64:	2000a098 	.word	0x2000a098
 8016a68:	2000a060 	.word	0x2000a060

08016a6c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8016a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a70:	4604      	mov	r4, r0
 8016a72:	b09b      	sub	sp, #108	; 0x6c
 8016a74:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8016a78:	b129      	cbz	r1, 8016a86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8016a80:	b01b      	add	sp, #108	; 0x6c
 8016a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a86:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8016a8a:	4630      	mov	r0, r6
 8016a8c:	f7fc fbaf 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a90:	4605      	mov	r5, r0
 8016a92:	b940      	cbnz	r0, 8016aa6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8016a94:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016a98:	4620      	mov	r0, r4
 8016a9a:	f7ff fc8b 	bl	80163b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016a9e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8016aa2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016aa6:	4ba6      	ldr	r3, [pc, #664]	; (8016d40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	b33b      	cbz	r3, 8016afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8016aac:	4da5      	ldr	r5, [pc, #660]	; (8016d44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8016aae:	4628      	mov	r0, r5
 8016ab0:	f7fc fb9d 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ab4:	4606      	mov	r6, r0
 8016ab6:	bb08      	cbnz	r0, 8016afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8016ab8:	4628      	mov	r0, r5
 8016aba:	f7ff f9fb 	bl	8015eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016abe:	6829      	ldr	r1, [r5, #0]
 8016ac0:	686a      	ldr	r2, [r5, #4]
 8016ac2:	4620      	mov	r0, r4
 8016ac4:	f7ff fc76 	bl	80163b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016ac8:	802e      	strh	r6, [r5, #0]
 8016aca:	806e      	strh	r6, [r5, #2]
 8016acc:	80ae      	strh	r6, [r5, #4]
 8016ace:	80ee      	strh	r6, [r5, #6]
 8016ad0:	4f9d      	ldr	r7, [pc, #628]	; (8016d48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8016ad2:	a809      	add	r0, sp, #36	; 0x24
 8016ad4:	f7ff fbe3 	bl	801629e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016ad8:	883d      	ldrh	r5, [r7, #0]
 8016ada:	462e      	mov	r6, r5
 8016adc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016ae0:	42b3      	cmp	r3, r6
 8016ae2:	d910      	bls.n	8016b06 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8016ae4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8016ae8:	a809      	add	r0, sp, #36	; 0x24
 8016aea:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8016aee:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8016af2:	3601      	adds	r6, #1
 8016af4:	f7ff fc3c 	bl	8016370 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016af8:	b2b6      	uxth	r6, r6
 8016afa:	e7ef      	b.n	8016adc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8016afc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d1e5      	bne.n	8016ad0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8016b04:	e7bc      	b.n	8016a80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016b06:	462e      	mov	r6, r5
 8016b08:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8016b0c:	42b3      	cmp	r3, r6
 8016b0e:	d90b      	bls.n	8016b28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8016b10:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8016b14:	4620      	mov	r0, r4
 8016b16:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8016b1a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8016b1e:	3601      	adds	r6, #1
 8016b20:	f7ff fc48 	bl	80163b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016b24:	b2b6      	uxth	r6, r6
 8016b26:	e7ef      	b.n	8016b08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8016b28:	4a88      	ldr	r2, [pc, #544]	; (8016d4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8016b2a:	6813      	ldr	r3, [r2, #0]
 8016b2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016b30:	2b01      	cmp	r3, #1
 8016b32:	4690      	mov	r8, r2
 8016b34:	f040 8093 	bne.w	8016c5e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 8016b38:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016b3c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8016b40:	33aa      	adds	r3, #170	; 0xaa
 8016b42:	f04f 0900 	mov.w	r9, #0
 8016b46:	42a8      	cmp	r0, r5
 8016b48:	f103 0308 	add.w	r3, r3, #8
 8016b4c:	dd0a      	ble.n	8016b64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8016b4e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016b52:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8016b56:	440a      	add	r2, r1
 8016b58:	b212      	sxth	r2, r2
 8016b5a:	4591      	cmp	r9, r2
 8016b5c:	bfb8      	it	lt
 8016b5e:	4691      	movlt	r9, r2
 8016b60:	3501      	adds	r5, #1
 8016b62:	e7f0      	b.n	8016b46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8016b64:	4b7a      	ldr	r3, [pc, #488]	; (8016d50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8016b66:	4e7b      	ldr	r6, [pc, #492]	; (8016d54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8016b68:	881d      	ldrh	r5, [r3, #0]
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016b70:	2d0f      	cmp	r5, #15
 8016b72:	bf8c      	ite	hi
 8016b74:	08ed      	lsrhi	r5, r5, #3
 8016b76:	2501      	movls	r5, #1
 8016b78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016b7c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8016b80:	f8d8 0000 	ldr.w	r0, [r8]
 8016b84:	440b      	add	r3, r1
 8016b86:	b21b      	sxth	r3, r3
 8016b88:	4599      	cmp	r9, r3
 8016b8a:	6802      	ldr	r2, [r0, #0]
 8016b8c:	dd4a      	ble.n	8016c24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8016b8e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8016b92:	4798      	blx	r3
 8016b94:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016b98:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016b9c:	4413      	add	r3, r2
 8016b9e:	b21b      	sxth	r3, r3
 8016ba0:	195a      	adds	r2, r3, r5
 8016ba2:	4290      	cmp	r0, r2
 8016ba4:	da07      	bge.n	8016bb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8016ba6:	4581      	cmp	r9, r0
 8016ba8:	dd05      	ble.n	8016bb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8016baa:	4298      	cmp	r0, r3
 8016bac:	da33      	bge.n	8016c16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	dd31      	ble.n	8016c16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8016bb2:	4648      	mov	r0, r9
 8016bb4:	e004      	b.n	8016bc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8016bb6:	4298      	cmp	r0, r3
 8016bb8:	dbfb      	blt.n	8016bb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8016bba:	4548      	cmp	r0, r9
 8016bbc:	bfa8      	it	ge
 8016bbe:	4648      	movge	r0, r9
 8016bc0:	f9b6 2000 	ldrsh.w	r2, [r6]
 8016bc4:	f8b7 a000 	ldrh.w	sl, [r7]
 8016bc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016bcc:	2100      	movs	r1, #0
 8016bce:	1ac0      	subs	r0, r0, r3
 8016bd0:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016bd4:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016bd8:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016bdc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016be0:	4553      	cmp	r3, sl
 8016be2:	d9c9      	bls.n	8016b78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8016be4:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8016be8:	ab07      	add	r3, sp, #28
 8016bea:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016bee:	6851      	ldr	r1, [r2, #4]
 8016bf0:	c303      	stmia	r3!, {r0, r1}
 8016bf2:	a807      	add	r0, sp, #28
 8016bf4:	a905      	add	r1, sp, #20
 8016bf6:	f7fc fab7 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 8016bfa:	a807      	add	r0, sp, #28
 8016bfc:	f7fc faf7 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c00:	b920      	cbnz	r0, 8016c0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8016c02:	6823      	ldr	r3, [r4, #0]
 8016c04:	a907      	add	r1, sp, #28
 8016c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c08:	4620      	mov	r0, r4
 8016c0a:	4798      	blx	r3
 8016c0c:	f10a 0a01 	add.w	sl, sl, #1
 8016c10:	fa1f fa8a 	uxth.w	sl, sl
 8016c14:	e7e2      	b.n	8016bdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8016c16:	f8d8 0000 	ldr.w	r0, [r8]
 8016c1a:	6803      	ldr	r3, [r0, #0]
 8016c1c:	2101      	movs	r1, #1
 8016c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016c20:	4798      	blx	r3
 8016c22:	e7a9      	b.n	8016b78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8016c24:	69d3      	ldr	r3, [r2, #28]
 8016c26:	4798      	blx	r3
 8016c28:	4b4b      	ldr	r3, [pc, #300]	; (8016d58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8016c2a:	781b      	ldrb	r3, [r3, #0]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	f43f af27 	beq.w	8016a80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016c32:	2300      	movs	r3, #0
 8016c34:	883d      	ldrh	r5, [r7, #0]
 8016c36:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8016c3a:	34ea      	adds	r4, #234	; 0xea
 8016c3c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8016c40:	42ab      	cmp	r3, r5
 8016c42:	f67f af1d 	bls.w	8016a80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016c46:	ab1a      	add	r3, sp, #104	; 0x68
 8016c48:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016c4c:	3b44      	subs	r3, #68	; 0x44
 8016c4e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8016c52:	4620      	mov	r0, r4
 8016c54:	3501      	adds	r5, #1
 8016c56:	f7ff fb8b 	bl	8016370 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016c5a:	b2ad      	uxth	r5, r5
 8016c5c:	e7ee      	b.n	8016c3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 8016c5e:	2b02      	cmp	r3, #2
 8016c60:	f040 813c 	bne.w	8016edc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x470>
 8016c64:	4b3d      	ldr	r3, [pc, #244]	; (8016d5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d02c      	beq.n	8016cc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 8016c6c:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8016c70:	883a      	ldrh	r2, [r7, #0]
 8016c72:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8016c76:	3201      	adds	r2, #1
 8016c78:	b292      	uxth	r2, r2
 8016c7a:	2900      	cmp	r1, #0
 8016c7c:	d0d4      	beq.n	8016c28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 8016c7e:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8016c82:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8016c86:	441d      	add	r5, r3
 8016c88:	b22d      	sxth	r5, r5
 8016c8a:	4610      	mov	r0, r2
 8016c8c:	f04f 0a00 	mov.w	sl, #0
 8016c90:	b283      	uxth	r3, r0
 8016c92:	4299      	cmp	r1, r3
 8016c94:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8016c98:	f240 80c4 	bls.w	8016e24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8016c9c:	4426      	add	r6, r4
 8016c9e:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8016ca2:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8016ca6:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8016caa:	4573      	cmp	r3, lr
 8016cac:	4684      	mov	ip, r0
 8016cae:	f340 80a6 	ble.w	8016dfe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8016cb2:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8016cb6:	4475      	add	r5, lr
 8016cb8:	b22d      	sxth	r5, r5
 8016cba:	429d      	cmp	r5, r3
 8016cbc:	bfa8      	it	ge
 8016cbe:	461d      	movge	r5, r3
 8016cc0:	3001      	adds	r0, #1
 8016cc2:	46e2      	mov	sl, ip
 8016cc4:	e7e4      	b.n	8016c90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 8016cc6:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8016cca:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8016cce:	f1bb 0f00 	cmp.w	fp, #0
 8016cd2:	d0a9      	beq.n	8016c28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 8016cd4:	883b      	ldrh	r3, [r7, #0]
 8016cd6:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8016cda:	3301      	adds	r3, #1
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	2600      	movs	r6, #0
 8016ce0:	b299      	uxth	r1, r3
 8016ce2:	458b      	cmp	fp, r1
 8016ce4:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 8016ce8:	d93a      	bls.n	8016d60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8016cea:	4425      	add	r5, r4
 8016cec:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8016cf0:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8016cf4:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8016cf8:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8016cfc:	4408      	add	r0, r1
 8016cfe:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8016d02:	4471      	add	r1, lr
 8016d04:	b200      	sxth	r0, r0
 8016d06:	b209      	sxth	r1, r1
 8016d08:	4288      	cmp	r0, r1
 8016d0a:	469c      	mov	ip, r3
 8016d0c:	da06      	bge.n	8016d1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8016d0e:	4586      	cmp	lr, r0
 8016d10:	4672      	mov	r2, lr
 8016d12:	bfb8      	it	lt
 8016d14:	4602      	movlt	r2, r0
 8016d16:	3301      	adds	r3, #1
 8016d18:	4666      	mov	r6, ip
 8016d1a:	e7e1      	b.n	8016ce0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 8016d1c:	d10b      	bne.n	8016d36 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8016d1e:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8016d22:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8016d26:	458c      	cmp	ip, r1
 8016d28:	bfb4      	ite	lt
 8016d2a:	469c      	movlt	ip, r3
 8016d2c:	46b4      	movge	ip, r6
 8016d2e:	4572      	cmp	r2, lr
 8016d30:	bfb8      	it	lt
 8016d32:	4672      	movlt	r2, lr
 8016d34:	e7ef      	b.n	8016d16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8016d36:	428a      	cmp	r2, r1
 8016d38:	bfb8      	it	lt
 8016d3a:	460a      	movlt	r2, r1
 8016d3c:	46b4      	mov	ip, r6
 8016d3e:	e7ea      	b.n	8016d16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8016d40:	2000a098 	.word	0x2000a098
 8016d44:	2000a0a4 	.word	0x2000a0a4
 8016d48:	200000a0 	.word	0x200000a0
 8016d4c:	2000a060 	.word	0x2000a060
 8016d50:	2000a056 	.word	0x2000a056
 8016d54:	2000a054 	.word	0x2000a054
 8016d58:	2000a05e 	.word	0x2000a05e
 8016d5c:	2000a058 	.word	0x2000a058
 8016d60:	1961      	adds	r1, r4, r5
 8016d62:	ab07      	add	r3, sp, #28
 8016d64:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8016d68:	6849      	ldr	r1, [r1, #4]
 8016d6a:	c303      	stmia	r3!, {r0, r1}
 8016d6c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016d70:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016d74:	2b13      	cmp	r3, #19
 8016d76:	bfd8      	it	le
 8016d78:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8016d7c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016d80:	440b      	add	r3, r1
 8016d82:	1a9b      	subs	r3, r3, r2
 8016d84:	a807      	add	r0, sp, #28
 8016d86:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016d8a:	f7ff f8ed 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016d8e:	a807      	add	r0, sp, #28
 8016d90:	f7fc fa2d 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d94:	2800      	cmp	r0, #0
 8016d96:	d198      	bne.n	8016cca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 8016d98:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8016d9c:	f8d8 0000 	ldr.w	r0, [r8]
 8016da0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016da4:	f8d0 e000 	ldr.w	lr, [r0]
 8016da8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016dac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016db0:	f1bc 0f14 	cmp.w	ip, #20
 8016db4:	bfa8      	it	ge
 8016db6:	f04f 0c14 	movge.w	ip, #20
 8016dba:	fa1f fc8c 	uxth.w	ip, ip
 8016dbe:	f8cd c000 	str.w	ip, [sp]
 8016dc2:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 8016dc6:	47d0      	blx	sl
 8016dc8:	4682      	mov	sl, r0
 8016dca:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016dce:	a807      	add	r0, sp, #28
 8016dd0:	f7ff f870 	bl	8015eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016dd4:	6823      	ldr	r3, [r4, #0]
 8016dd6:	4425      	add	r5, r4
 8016dd8:	4620      	mov	r0, r4
 8016dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ddc:	a907      	add	r1, sp, #28
 8016dde:	4798      	blx	r3
 8016de0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8016de4:	eba0 000a 	sub.w	r0, r0, sl
 8016de8:	b200      	sxth	r0, r0
 8016dea:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8016dee:	2800      	cmp	r0, #0
 8016df0:	f47f af6b 	bne.w	8016cca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 8016df4:	b2b1      	uxth	r1, r6
 8016df6:	4648      	mov	r0, r9
 8016df8:	f7ff faa4 	bl	8016344 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016dfc:	e765      	b.n	8016cca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 8016dfe:	d10c      	bne.n	8016e1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8016e00:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8016e04:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8016e08:	45b4      	cmp	ip, r6
 8016e0a:	bfb4      	ite	lt
 8016e0c:	4684      	movlt	ip, r0
 8016e0e:	46d4      	movge	ip, sl
 8016e10:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8016e14:	4433      	add	r3, r6
 8016e16:	b21b      	sxth	r3, r3
 8016e18:	e74f      	b.n	8016cba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 8016e1a:	4575      	cmp	r5, lr
 8016e1c:	bfa8      	it	ge
 8016e1e:	4675      	movge	r5, lr
 8016e20:	46d4      	mov	ip, sl
 8016e22:	e74d      	b.n	8016cc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 8016e24:	eb0b 0006 	add.w	r0, fp, r6
 8016e28:	4426      	add	r6, r4
 8016e2a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8016e2e:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8016e32:	f1b9 0f13 	cmp.w	r9, #19
 8016e36:	bfde      	ittt	le
 8016e38:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8016e3c:	444d      	addle	r5, r9
 8016e3e:	b22d      	sxthle	r5, r5
 8016e40:	f7fc f9d5 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e44:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016e48:	2800      	cmp	r0, #0
 8016e4a:	f47f af16 	bne.w	8016c7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 8016e4e:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8016e52:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016e56:	eba5 050c 	sub.w	r5, r5, ip
 8016e5a:	fa1f f28c 	uxth.w	r2, ip
 8016e5e:	fa1f f989 	uxth.w	r9, r9
 8016e62:	eb02 0009 	add.w	r0, r2, r9
 8016e66:	2d14      	cmp	r5, #20
 8016e68:	bfa8      	it	ge
 8016e6a:	2514      	movge	r5, #20
 8016e6c:	b200      	sxth	r0, r0
 8016e6e:	fa1f fe85 	uxth.w	lr, r5
 8016e72:	eba0 000c 	sub.w	r0, r0, ip
 8016e76:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8016e7a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8016e7e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016e82:	4586      	cmp	lr, r0
 8016e84:	f8d8 0000 	ldr.w	r0, [r8]
 8016e88:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016e8c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016e90:	bfb8      	it	lt
 8016e92:	46f1      	movlt	r9, lr
 8016e94:	6805      	ldr	r5, [r0, #0]
 8016e96:	f8cd 9000 	str.w	r9, [sp]
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	b289      	uxth	r1, r1
 8016e9e:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 8016ea0:	47a8      	blx	r5
 8016ea2:	6823      	ldr	r3, [r4, #0]
 8016ea4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016eaa:	a907      	add	r1, sp, #28
 8016eac:	4620      	mov	r0, r4
 8016eae:	4798      	blx	r3
 8016eb0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8016eb4:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8016eb8:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8016ebc:	1a5b      	subs	r3, r3, r1
 8016ebe:	440a      	add	r2, r1
 8016ec0:	b21b      	sxth	r3, r3
 8016ec2:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8016ec6:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	f47f aed0 	bne.w	8016c70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 8016ed0:	fa1f f18a 	uxth.w	r1, sl
 8016ed4:	4658      	mov	r0, fp
 8016ed6:	f7ff fa35 	bl	8016344 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016eda:	e6c9      	b.n	8016c70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 8016edc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016ee0:	42ab      	cmp	r3, r5
 8016ee2:	f67f aea1 	bls.w	8016c28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 8016ee6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016eea:	ab07      	add	r3, sp, #28
 8016eec:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016ef0:	6851      	ldr	r1, [r2, #4]
 8016ef2:	c303      	stmia	r3!, {r0, r1}
 8016ef4:	a807      	add	r0, sp, #28
 8016ef6:	f7fc f97a 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8016efa:	b920      	cbnz	r0, 8016f06 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49a>
 8016efc:	6823      	ldr	r3, [r4, #0]
 8016efe:	a907      	add	r1, sp, #28
 8016f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f02:	4620      	mov	r0, r4
 8016f04:	4798      	blx	r3
 8016f06:	3501      	adds	r5, #1
 8016f08:	b2ad      	uxth	r5, r5
 8016f0a:	e7e7      	b.n	8016edc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x470>

08016f0c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016f0c:	4b03      	ldr	r3, [pc, #12]	; (8016f1c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016f0e:	2200      	movs	r2, #0
 8016f10:	801a      	strh	r2, [r3, #0]
 8016f12:	805a      	strh	r2, [r3, #2]
 8016f14:	809a      	strh	r2, [r3, #4]
 8016f16:	80da      	strh	r2, [r3, #6]
 8016f18:	4770      	bx	lr
 8016f1a:	bf00      	nop
 8016f1c:	2000a0a4 	.word	0x2000a0a4

08016f20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f24:	4607      	mov	r7, r0
 8016f26:	b099      	sub	sp, #100	; 0x64
 8016f28:	a802      	add	r0, sp, #8
 8016f2a:	4614      	mov	r4, r2
 8016f2c:	461d      	mov	r5, r3
 8016f2e:	468a      	mov	sl, r1
 8016f30:	f000 fdc1 	bl	8017ab6 <_ZN8touchgfx12TextProviderC1Ev>
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	4638      	mov	r0, r7
 8016f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f3a:	4798      	blx	r3
 8016f3c:	462a      	mov	r2, r5
 8016f3e:	4603      	mov	r3, r0
 8016f40:	4621      	mov	r1, r4
 8016f42:	a802      	add	r0, sp, #8
 8016f44:	f000 fdfc 	bl	8017b40 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016f48:	2500      	movs	r5, #0
 8016f4a:	462c      	mov	r4, r5
 8016f4c:	46a9      	mov	r9, r5
 8016f4e:	46a8      	mov	r8, r5
 8016f50:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8016f54:	2300      	movs	r3, #0
 8016f56:	9301      	str	r3, [sp, #4]
 8016f58:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016f5c:	429c      	cmp	r4, r3
 8016f5e:	d002      	beq.n	8016f66 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8016f60:	455c      	cmp	r4, fp
 8016f62:	bf18      	it	ne
 8016f64:	4625      	movne	r5, r4
 8016f66:	ab01      	add	r3, sp, #4
 8016f68:	463a      	mov	r2, r7
 8016f6a:	4651      	mov	r1, sl
 8016f6c:	a802      	add	r0, sp, #8
 8016f6e:	f001 f8e1 	bl	8018134 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016f72:	4604      	mov	r4, r0
 8016f74:	b108      	cbz	r0, 8016f7a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8016f76:	280a      	cmp	r0, #10
 8016f78:	d10a      	bne.n	8016f90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8016f7a:	45c1      	cmp	r9, r8
 8016f7c:	bf38      	it	cc
 8016f7e:	46c1      	movcc	r9, r8
 8016f80:	f04f 0800 	mov.w	r8, #0
 8016f84:	2c00      	cmp	r4, #0
 8016f86:	d1e5      	bne.n	8016f54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8016f88:	4648      	mov	r0, r9
 8016f8a:	b019      	add	sp, #100	; 0x64
 8016f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f90:	9a01      	ldr	r2, [sp, #4]
 8016f92:	2a00      	cmp	r2, #0
 8016f94:	d0de      	beq.n	8016f54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8016f96:	7b56      	ldrb	r6, [r2, #13]
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	8894      	ldrh	r4, [r2, #4]
 8016f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f9e:	0076      	lsls	r6, r6, #1
 8016fa0:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8016fa4:	7a96      	ldrb	r6, [r2, #10]
 8016fa6:	4629      	mov	r1, r5
 8016fa8:	4306      	orrs	r6, r0
 8016faa:	4638      	mov	r0, r7
 8016fac:	4798      	blx	r3
 8016fae:	4430      	add	r0, r6
 8016fb0:	4480      	add	r8, r0
 8016fb2:	fa1f f888 	uxth.w	r8, r8
 8016fb6:	e7e5      	b.n	8016f84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08016fb8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016fb8:	b508      	push	{r3, lr}
 8016fba:	6803      	ldr	r3, [r0, #0]
 8016fbc:	68db      	ldr	r3, [r3, #12]
 8016fbe:	4798      	blx	r3
 8016fc0:	b128      	cbz	r0, 8016fce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8016fc2:	7b43      	ldrb	r3, [r0, #13]
 8016fc4:	7a80      	ldrb	r0, [r0, #10]
 8016fc6:	005b      	lsls	r3, r3, #1
 8016fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016fcc:	4318      	orrs	r0, r3
 8016fce:	bd08      	pop	{r3, pc}

08016fd0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016fd0:	b40e      	push	{r1, r2, r3}
 8016fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd4:	b098      	sub	sp, #96	; 0x60
 8016fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8016fd8:	4605      	mov	r5, r0
 8016fda:	f853 4b04 	ldr.w	r4, [r3], #4
 8016fde:	9300      	str	r3, [sp, #0]
 8016fe0:	a802      	add	r0, sp, #8
 8016fe2:	f000 fd68 	bl	8017ab6 <_ZN8touchgfx12TextProviderC1Ev>
 8016fe6:	682b      	ldr	r3, [r5, #0]
 8016fe8:	4628      	mov	r0, r5
 8016fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fec:	4798      	blx	r3
 8016fee:	ae18      	add	r6, sp, #96	; 0x60
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	4621      	mov	r1, r4
 8016ff4:	9a00      	ldr	r2, [sp, #0]
 8016ff6:	2400      	movs	r4, #0
 8016ff8:	a802      	add	r0, sp, #8
 8016ffa:	f000 fda1 	bl	8017b40 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016ffe:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8017002:	462a      	mov	r2, r5
 8017004:	4633      	mov	r3, r6
 8017006:	4621      	mov	r1, r4
 8017008:	a802      	add	r0, sp, #8
 801700a:	f001 f893 	bl	8018134 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801700e:	b1f0      	cbz	r0, 801704e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 8017010:	280a      	cmp	r0, #10
 8017012:	d018      	beq.n	8017046 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8017014:	9f01      	ldr	r7, [sp, #4]
 8017016:	b1b7      	cbz	r7, 8017046 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8017018:	7b78      	ldrb	r0, [r7, #13]
 801701a:	7a3b      	ldrb	r3, [r7, #8]
 801701c:	88aa      	ldrh	r2, [r5, #4]
 801701e:	00c1      	lsls	r1, r0, #3
 8017020:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017024:	4319      	orrs	r1, r3
 8017026:	0643      	lsls	r3, r0, #25
 8017028:	bf44      	itt	mi
 801702a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801702e:	b219      	sxthmi	r1, r3
 8017030:	0100      	lsls	r0, r0, #4
 8017032:	79fb      	ldrb	r3, [r7, #7]
 8017034:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017038:	4303      	orrs	r3, r0
 801703a:	4413      	add	r3, r2
 801703c:	1a5b      	subs	r3, r3, r1
 801703e:	b29b      	uxth	r3, r3
 8017040:	42a3      	cmp	r3, r4
 8017042:	bfc8      	it	gt
 8017044:	b21c      	sxthgt	r4, r3
 8017046:	4633      	mov	r3, r6
 8017048:	462a      	mov	r2, r5
 801704a:	2100      	movs	r1, #0
 801704c:	e7dc      	b.n	8017008 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801704e:	b2a0      	uxth	r0, r4
 8017050:	b018      	add	sp, #96	; 0x60
 8017052:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017056:	b003      	add	sp, #12
 8017058:	4770      	bx	lr

0801705a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801705a:	b40e      	push	{r1, r2, r3}
 801705c:	b530      	push	{r4, r5, lr}
 801705e:	b098      	sub	sp, #96	; 0x60
 8017060:	ab1b      	add	r3, sp, #108	; 0x6c
 8017062:	4604      	mov	r4, r0
 8017064:	f853 5b04 	ldr.w	r5, [r3], #4
 8017068:	9301      	str	r3, [sp, #4]
 801706a:	a802      	add	r0, sp, #8
 801706c:	f000 fd23 	bl	8017ab6 <_ZN8touchgfx12TextProviderC1Ev>
 8017070:	6823      	ldr	r3, [r4, #0]
 8017072:	4620      	mov	r0, r4
 8017074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017076:	4798      	blx	r3
 8017078:	9a01      	ldr	r2, [sp, #4]
 801707a:	4603      	mov	r3, r0
 801707c:	4629      	mov	r1, r5
 801707e:	a802      	add	r0, sp, #8
 8017080:	f000 fd5e 	bl	8017b40 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017084:	a802      	add	r0, sp, #8
 8017086:	f001 f94d 	bl	8018324 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801708a:	2401      	movs	r4, #1
 801708c:	b2a3      	uxth	r3, r4
 801708e:	b140      	cbz	r0, 80170a2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 8017090:	280a      	cmp	r0, #10
 8017092:	bf08      	it	eq
 8017094:	3301      	addeq	r3, #1
 8017096:	a802      	add	r0, sp, #8
 8017098:	bf08      	it	eq
 801709a:	b21c      	sxtheq	r4, r3
 801709c:	f001 f942 	bl	8018324 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80170a0:	e7f4      	b.n	801708c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 80170a2:	4618      	mov	r0, r3
 80170a4:	b018      	add	sp, #96	; 0x60
 80170a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170aa:	b003      	add	sp, #12
 80170ac:	4770      	bx	lr

080170ae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80170ae:	b40e      	push	{r1, r2, r3}
 80170b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170b2:	b098      	sub	sp, #96	; 0x60
 80170b4:	ab1d      	add	r3, sp, #116	; 0x74
 80170b6:	4604      	mov	r4, r0
 80170b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80170bc:	9300      	str	r3, [sp, #0]
 80170be:	a802      	add	r0, sp, #8
 80170c0:	f000 fcf9 	bl	8017ab6 <_ZN8touchgfx12TextProviderC1Ev>
 80170c4:	6823      	ldr	r3, [r4, #0]
 80170c6:	4620      	mov	r0, r4
 80170c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170ca:	4798      	blx	r3
 80170cc:	4629      	mov	r1, r5
 80170ce:	4603      	mov	r3, r0
 80170d0:	9a00      	ldr	r2, [sp, #0]
 80170d2:	a802      	add	r0, sp, #8
 80170d4:	ad18      	add	r5, sp, #96	; 0x60
 80170d6:	f000 fd33 	bl	8017b40 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80170da:	2100      	movs	r1, #0
 80170dc:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80170e0:	4622      	mov	r2, r4
 80170e2:	462b      	mov	r3, r5
 80170e4:	a802      	add	r0, sp, #8
 80170e6:	f001 f825 	bl	8018134 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80170ea:	26ff      	movs	r6, #255	; 0xff
 80170ec:	b1d8      	cbz	r0, 8017126 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80170ee:	280a      	cmp	r0, #10
 80170f0:	d012      	beq.n	8017118 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80170f2:	9801      	ldr	r0, [sp, #4]
 80170f4:	b180      	cbz	r0, 8017118 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80170f6:	7b47      	ldrb	r7, [r0, #13]
 80170f8:	7922      	ldrb	r2, [r4, #4]
 80170fa:	00fb      	lsls	r3, r7, #3
 80170fc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017100:	7a03      	ldrb	r3, [r0, #8]
 8017102:	430b      	orrs	r3, r1
 8017104:	0679      	lsls	r1, r7, #25
 8017106:	bf44      	itt	mi
 8017108:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801710c:	b21b      	sxthmi	r3, r3
 801710e:	1ad3      	subs	r3, r2, r3
 8017110:	b2db      	uxtb	r3, r3
 8017112:	429e      	cmp	r6, r3
 8017114:	bf28      	it	cs
 8017116:	461e      	movcs	r6, r3
 8017118:	462b      	mov	r3, r5
 801711a:	4622      	mov	r2, r4
 801711c:	2100      	movs	r1, #0
 801711e:	a802      	add	r0, sp, #8
 8017120:	f001 f808 	bl	8018134 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017124:	e7e2      	b.n	80170ec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8017126:	4630      	mov	r0, r6
 8017128:	b018      	add	sp, #96	; 0x60
 801712a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801712e:	b003      	add	sp, #12
 8017130:	4770      	bx	lr

08017132 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017132:	b513      	push	{r0, r1, r4, lr}
 8017134:	1d01      	adds	r1, r0, #4
 8017136:	4603      	mov	r3, r0
 8017138:	c903      	ldmia	r1, {r0, r1}
 801713a:	466a      	mov	r2, sp
 801713c:	e882 0003 	stmia.w	r2, {r0, r1}
 8017140:	2100      	movs	r1, #0
 8017142:	9100      	str	r1, [sp, #0]
 8017144:	6819      	ldr	r1, [r3, #0]
 8017146:	4618      	mov	r0, r3
 8017148:	690c      	ldr	r4, [r1, #16]
 801714a:	4611      	mov	r1, r2
 801714c:	47a0      	blx	r4
 801714e:	b002      	add	sp, #8
 8017150:	bd10      	pop	{r4, pc}

08017152 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017152:	b538      	push	{r3, r4, r5, lr}
 8017154:	680b      	ldr	r3, [r1, #0]
 8017156:	460c      	mov	r4, r1
 8017158:	68db      	ldr	r3, [r3, #12]
 801715a:	4605      	mov	r5, r0
 801715c:	4798      	blx	r3
 801715e:	6823      	ldr	r3, [r4, #0]
 8017160:	4620      	mov	r0, r4
 8017162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017164:	4629      	mov	r1, r5
 8017166:	4798      	blx	r3
 8017168:	4628      	mov	r0, r5
 801716a:	bd38      	pop	{r3, r4, r5, pc}

0801716c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801716c:	b410      	push	{r4}
 801716e:	880a      	ldrh	r2, [r1, #0]
 8017170:	8884      	ldrh	r4, [r0, #4]
 8017172:	4422      	add	r2, r4
 8017174:	800a      	strh	r2, [r1, #0]
 8017176:	88c4      	ldrh	r4, [r0, #6]
 8017178:	884a      	ldrh	r2, [r1, #2]
 801717a:	4422      	add	r2, r4
 801717c:	804a      	strh	r2, [r1, #2]
 801717e:	6940      	ldr	r0, [r0, #20]
 8017180:	b120      	cbz	r0, 801718c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017182:	6803      	ldr	r3, [r0, #0]
 8017184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801718a:	4718      	bx	r3
 801718c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017190:	4770      	bx	lr

08017192 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017194:	460b      	mov	r3, r1
 8017196:	b085      	sub	sp, #20
 8017198:	4604      	mov	r4, r0
 801719a:	b901      	cbnz	r1, 801719e <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801719c:	b322      	cbz	r2, 80171e8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801719e:	1d27      	adds	r7, r4, #4
 80171a0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80171a4:	466e      	mov	r6, sp
 80171a6:	e886 0003 	stmia.w	r6, {r0, r1}
 80171aa:	88a1      	ldrh	r1, [r4, #4]
 80171ac:	88e5      	ldrh	r5, [r4, #6]
 80171ae:	4419      	add	r1, r3
 80171b0:	6823      	ldr	r3, [r4, #0]
 80171b2:	442a      	add	r2, r5
 80171b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171b6:	b209      	sxth	r1, r1
 80171b8:	4620      	mov	r0, r4
 80171ba:	b215      	sxth	r5, r2
 80171bc:	4798      	blx	r3
 80171be:	6823      	ldr	r3, [r4, #0]
 80171c0:	4629      	mov	r1, r5
 80171c2:	4620      	mov	r0, r4
 80171c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171c6:	4798      	blx	r3
 80171c8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80171cc:	ad02      	add	r5, sp, #8
 80171ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80171d2:	6960      	ldr	r0, [r4, #20]
 80171d4:	b150      	cbz	r0, 80171ec <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 80171d6:	6803      	ldr	r3, [r0, #0]
 80171d8:	4631      	mov	r1, r6
 80171da:	691b      	ldr	r3, [r3, #16]
 80171dc:	4798      	blx	r3
 80171de:	6960      	ldr	r0, [r4, #20]
 80171e0:	6803      	ldr	r3, [r0, #0]
 80171e2:	691b      	ldr	r3, [r3, #16]
 80171e4:	4629      	mov	r1, r5
 80171e6:	4798      	blx	r3
 80171e8:	b005      	add	sp, #20
 80171ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171ec:	f7ff f846 	bl	801627c <_ZN8touchgfx11Application11getInstanceEv>
 80171f0:	6803      	ldr	r3, [r0, #0]
 80171f2:	4631      	mov	r1, r6
 80171f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171f6:	4798      	blx	r3
 80171f8:	f7ff f840 	bl	801627c <_ZN8touchgfx11Application11getInstanceEv>
 80171fc:	6803      	ldr	r3, [r0, #0]
 80171fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017200:	e7f0      	b.n	80171e4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08017202 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017202:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017204:	8882      	ldrh	r2, [r0, #4]
 8017206:	880b      	ldrh	r3, [r1, #0]
 8017208:	4413      	add	r3, r2
 801720a:	800b      	strh	r3, [r1, #0]
 801720c:	88c2      	ldrh	r2, [r0, #6]
 801720e:	884b      	ldrh	r3, [r1, #2]
 8017210:	4413      	add	r3, r2
 8017212:	4602      	mov	r2, r0
 8017214:	804b      	strh	r3, [r1, #2]
 8017216:	4605      	mov	r5, r0
 8017218:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801721c:	460c      	mov	r4, r1
 801721e:	6851      	ldr	r1, [r2, #4]
 8017220:	466b      	mov	r3, sp
 8017222:	c303      	stmia	r3!, {r0, r1}
 8017224:	4621      	mov	r1, r4
 8017226:	4668      	mov	r0, sp
 8017228:	f7fb ff9e 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 801722c:	466b      	mov	r3, sp
 801722e:	cb03      	ldmia	r3!, {r0, r1}
 8017230:	6020      	str	r0, [r4, #0]
 8017232:	6061      	str	r1, [r4, #4]
 8017234:	6968      	ldr	r0, [r5, #20]
 8017236:	b128      	cbz	r0, 8017244 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8017238:	6803      	ldr	r3, [r0, #0]
 801723a:	691b      	ldr	r3, [r3, #16]
 801723c:	4621      	mov	r1, r4
 801723e:	4798      	blx	r3
 8017240:	b003      	add	sp, #12
 8017242:	bd30      	pop	{r4, r5, pc}
 8017244:	f7ff f81a 	bl	801627c <_ZN8touchgfx11Application11getInstanceEv>
 8017248:	6803      	ldr	r3, [r0, #0]
 801724a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801724c:	e7f6      	b.n	801723c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801724e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801724e:	b570      	push	{r4, r5, r6, lr}
 8017250:	8882      	ldrh	r2, [r0, #4]
 8017252:	880b      	ldrh	r3, [r1, #0]
 8017254:	4413      	add	r3, r2
 8017256:	800b      	strh	r3, [r1, #0]
 8017258:	88c2      	ldrh	r2, [r0, #6]
 801725a:	884b      	ldrh	r3, [r1, #2]
 801725c:	460c      	mov	r4, r1
 801725e:	4413      	add	r3, r2
 8017260:	804b      	strh	r3, [r1, #2]
 8017262:	4605      	mov	r5, r0
 8017264:	1d01      	adds	r1, r0, #4
 8017266:	4620      	mov	r0, r4
 8017268:	f7fb ff7e 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 801726c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017270:	2b00      	cmp	r3, #0
 8017272:	dd0b      	ble.n	801728c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017274:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017278:	2b00      	cmp	r3, #0
 801727a:	dd07      	ble.n	801728c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801727c:	6968      	ldr	r0, [r5, #20]
 801727e:	b128      	cbz	r0, 801728c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017280:	6803      	ldr	r3, [r0, #0]
 8017282:	4621      	mov	r1, r4
 8017284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801728a:	4718      	bx	r3
 801728c:	bd70      	pop	{r4, r5, r6, pc}

0801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801728e:	b510      	push	{r4, lr}
 8017290:	4604      	mov	r4, r0
 8017292:	4608      	mov	r0, r1
 8017294:	2300      	movs	r3, #0
 8017296:	8023      	strh	r3, [r4, #0]
 8017298:	8063      	strh	r3, [r4, #2]
 801729a:	6803      	ldr	r3, [r0, #0]
 801729c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80172a0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80172a4:	80a1      	strh	r1, [r4, #4]
 80172a6:	80e2      	strh	r2, [r4, #6]
 80172a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172aa:	4621      	mov	r1, r4
 80172ac:	4798      	blx	r3
 80172ae:	4620      	mov	r0, r4
 80172b0:	bd10      	pop	{r4, pc}
	...

080172b4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80172b4:	b530      	push	{r4, r5, lr}
 80172b6:	8083      	strh	r3, [r0, #4]
 80172b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80172bc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80172c0:	7183      	strb	r3, [r0, #6]
 80172c2:	79c3      	ldrb	r3, [r0, #7]
 80172c4:	6101      	str	r1, [r0, #16]
 80172c6:	f365 0306 	bfi	r3, r5, #0, #7
 80172ca:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80172ce:	8282      	strh	r2, [r0, #20]
 80172d0:	f365 13c7 	bfi	r3, r5, #7, #1
 80172d4:	71c3      	strb	r3, [r0, #7]
 80172d6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80172da:	7203      	strb	r3, [r0, #8]
 80172dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80172e0:	7243      	strb	r3, [r0, #9]
 80172e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80172e6:	8143      	strh	r3, [r0, #10]
 80172e8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80172ec:	8183      	strh	r3, [r0, #12]
 80172ee:	4b01      	ldr	r3, [pc, #4]	; (80172f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80172f0:	6003      	str	r3, [r0, #0]
 80172f2:	bd30      	pop	{r4, r5, pc}
 80172f4:	08029fec 	.word	0x08029fec

080172f8 <_ZNK8touchgfx9ConstFont4findEt>:
 80172f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172fa:	6904      	ldr	r4, [r0, #16]
 80172fc:	b3bc      	cbz	r4, 801736e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80172fe:	88a3      	ldrh	r3, [r4, #4]
 8017300:	8a82      	ldrh	r2, [r0, #20]
 8017302:	1acb      	subs	r3, r1, r3
 8017304:	f102 32ff 	add.w	r2, r2, #4294967295
 8017308:	d431      	bmi.n	801736e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801730a:	4293      	cmp	r3, r2
 801730c:	dd0c      	ble.n	8017328 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801730e:	230e      	movs	r3, #14
 8017310:	fb03 4302 	mla	r3, r3, r2, r4
 8017314:	889b      	ldrh	r3, [r3, #4]
 8017316:	1a5b      	subs	r3, r3, r1
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	429a      	cmp	r2, r3
 801731c:	db27      	blt.n	801736e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801731e:	2b00      	cmp	r3, #0
 8017320:	bfbc      	itt	lt
 8017322:	2302      	movlt	r3, #2
 8017324:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017328:	2500      	movs	r5, #0
 801732a:	260e      	movs	r6, #14
 801732c:	4295      	cmp	r5, r2
 801732e:	dc1e      	bgt.n	801736e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017330:	fb06 4003 	mla	r0, r6, r3, r4
 8017334:	8887      	ldrh	r7, [r0, #4]
 8017336:	42b9      	cmp	r1, r7
 8017338:	d01a      	beq.n	8017370 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801733a:	d20d      	bcs.n	8017358 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801733c:	1e5a      	subs	r2, r3, #1
 801733e:	4295      	cmp	r5, r2
 8017340:	dc15      	bgt.n	801736e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017342:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8017346:	1a5b      	subs	r3, r3, r1
 8017348:	1ad3      	subs	r3, r2, r3
 801734a:	429a      	cmp	r2, r3
 801734c:	db0f      	blt.n	801736e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801734e:	429d      	cmp	r5, r3
 8017350:	ddec      	ble.n	801732c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017352:	1953      	adds	r3, r2, r5
 8017354:	105b      	asrs	r3, r3, #1
 8017356:	e7e9      	b.n	801732c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017358:	1c5d      	adds	r5, r3, #1
 801735a:	42aa      	cmp	r2, r5
 801735c:	db07      	blt.n	801736e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801735e:	8a43      	ldrh	r3, [r0, #18]
 8017360:	1acb      	subs	r3, r1, r3
 8017362:	442b      	add	r3, r5
 8017364:	429d      	cmp	r5, r3
 8017366:	dc02      	bgt.n	801736e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017368:	429a      	cmp	r2, r3
 801736a:	dadf      	bge.n	801732c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801736c:	e7f1      	b.n	8017352 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801736e:	2000      	movs	r0, #0
 8017370:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017372 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8017372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017374:	4604      	mov	r4, r0
 8017376:	4617      	mov	r7, r2
 8017378:	461e      	mov	r6, r3
 801737a:	b911      	cbnz	r1, 8017382 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801737c:	2500      	movs	r5, #0
 801737e:	4628      	mov	r0, r5
 8017380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017382:	290a      	cmp	r1, #10
 8017384:	d0fa      	beq.n	801737c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017386:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801738a:	4291      	cmp	r1, r2
 801738c:	d0f6      	beq.n	801737c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801738e:	f242 020b 	movw	r2, #8203	; 0x200b
 8017392:	4291      	cmp	r1, r2
 8017394:	d0f2      	beq.n	801737c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017396:	f7ff ffaf 	bl	80172f8 <_ZNK8touchgfx9ConstFont4findEt>
 801739a:	4605      	mov	r5, r0
 801739c:	b950      	cbnz	r0, 80173b4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801739e:	6823      	ldr	r3, [r4, #0]
 80173a0:	4620      	mov	r0, r4
 80173a2:	691b      	ldr	r3, [r3, #16]
 80173a4:	4798      	blx	r3
 80173a6:	4601      	mov	r1, r0
 80173a8:	4620      	mov	r0, r4
 80173aa:	f7ff ffa5 	bl	80172f8 <_ZNK8touchgfx9ConstFont4findEt>
 80173ae:	4605      	mov	r5, r0
 80173b0:	2800      	cmp	r0, #0
 80173b2:	d0e3      	beq.n	801737c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80173b4:	6823      	ldr	r3, [r4, #0]
 80173b6:	4629      	mov	r1, r5
 80173b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80173ba:	4620      	mov	r0, r4
 80173bc:	4798      	blx	r3
 80173be:	6038      	str	r0, [r7, #0]
 80173c0:	6823      	ldr	r3, [r4, #0]
 80173c2:	4620      	mov	r0, r4
 80173c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173c6:	4798      	blx	r3
 80173c8:	7030      	strb	r0, [r6, #0]
 80173ca:	e7d8      	b.n	801737e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080173cc <_ZN8touchgfx6memsetEPvhm>:
 80173cc:	4402      	add	r2, r0
 80173ce:	4290      	cmp	r0, r2
 80173d0:	d002      	beq.n	80173d8 <_ZN8touchgfx6memsetEPvhm+0xc>
 80173d2:	f800 1b01 	strb.w	r1, [r0], #1
 80173d6:	e7fa      	b.n	80173ce <_ZN8touchgfx6memsetEPvhm+0x2>
 80173d8:	4770      	bx	lr

080173da <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80173da:	2000      	movs	r0, #0
 80173dc:	4770      	bx	lr

080173de <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80173de:	2001      	movs	r0, #1
 80173e0:	4770      	bx	lr

080173e2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80173e2:	2002      	movs	r0, #2
 80173e4:	4770      	bx	lr

080173e6 <_ZN8touchgfx12GestureEventD1Ev>:
 80173e6:	4770      	bx	lr

080173e8 <_ZN8touchgfx9DragEventD1Ev>:
 80173e8:	4770      	bx	lr

080173ea <_ZN8touchgfx10ClickEventD1Ev>:
 80173ea:	4770      	bx	lr

080173ec <_ZN8touchgfx10ClickEventD0Ev>:
 80173ec:	b510      	push	{r4, lr}
 80173ee:	210c      	movs	r1, #12
 80173f0:	4604      	mov	r4, r0
 80173f2:	f00d fd34 	bl	8024e5e <_ZdlPvj>
 80173f6:	4620      	mov	r0, r4
 80173f8:	bd10      	pop	{r4, pc}

080173fa <_ZN8touchgfx9DragEventD0Ev>:
 80173fa:	b510      	push	{r4, lr}
 80173fc:	2110      	movs	r1, #16
 80173fe:	4604      	mov	r4, r0
 8017400:	f00d fd2d 	bl	8024e5e <_ZdlPvj>
 8017404:	4620      	mov	r0, r4
 8017406:	bd10      	pop	{r4, pc}

08017408 <_ZN8touchgfx12GestureEventD0Ev>:
 8017408:	b510      	push	{r4, lr}
 801740a:	210c      	movs	r1, #12
 801740c:	4604      	mov	r4, r0
 801740e:	f00d fd26 	bl	8024e5e <_ZdlPvj>
 8017412:	4620      	mov	r0, r4
 8017414:	bd10      	pop	{r4, pc}
	...

08017418 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017418:	b530      	push	{r4, r5, lr}
 801741a:	460d      	mov	r5, r1
 801741c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801741e:	b087      	sub	sp, #28
 8017420:	4604      	mov	r4, r0
 8017422:	b301      	cbz	r1, 8017466 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017424:	a801      	add	r0, sp, #4
 8017426:	f7ff ff32 	bl	801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801742a:	892a      	ldrh	r2, [r5, #8]
 801742c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017430:	7928      	ldrb	r0, [r5, #4]
 8017432:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017436:	f88d 0010 	strb.w	r0, [sp, #16]
 801743a:	1ad2      	subs	r2, r2, r3
 801743c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801743e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017440:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017444:	441a      	add	r2, r3
 8017446:	896b      	ldrh	r3, [r5, #10]
 8017448:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801744c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017450:	1b5b      	subs	r3, r3, r5
 8017452:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8017454:	442b      	add	r3, r5
 8017456:	4d05      	ldr	r5, [pc, #20]	; (801746c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017458:	9503      	str	r5, [sp, #12]
 801745a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801745e:	6803      	ldr	r3, [r0, #0]
 8017460:	a903      	add	r1, sp, #12
 8017462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017464:	4798      	blx	r3
 8017466:	b007      	add	sp, #28
 8017468:	bd30      	pop	{r4, r5, pc}
 801746a:	bf00      	nop
 801746c:	0802a068 	.word	0x0802a068

08017470 <_ZNK8touchgfx4Rect9intersectEss>:
 8017470:	b510      	push	{r4, lr}
 8017472:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017476:	428b      	cmp	r3, r1
 8017478:	dc10      	bgt.n	801749c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801747a:	8884      	ldrh	r4, [r0, #4]
 801747c:	4423      	add	r3, r4
 801747e:	b21b      	sxth	r3, r3
 8017480:	4299      	cmp	r1, r3
 8017482:	da0b      	bge.n	801749c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8017484:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017488:	4293      	cmp	r3, r2
 801748a:	dc07      	bgt.n	801749c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801748c:	88c0      	ldrh	r0, [r0, #6]
 801748e:	4418      	add	r0, r3
 8017490:	b200      	sxth	r0, r0
 8017492:	4282      	cmp	r2, r0
 8017494:	bfac      	ite	ge
 8017496:	2000      	movge	r0, #0
 8017498:	2001      	movlt	r0, #1
 801749a:	bd10      	pop	{r4, pc}
 801749c:	2000      	movs	r0, #0
 801749e:	e7fc      	b.n	801749a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

080174a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80174a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174a2:	460c      	mov	r4, r1
 80174a4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80174a6:	b089      	sub	sp, #36	; 0x24
 80174a8:	4605      	mov	r5, r0
 80174aa:	2900      	cmp	r1, #0
 80174ac:	d054      	beq.n	8017558 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 80174ae:	4668      	mov	r0, sp
 80174b0:	f7ff feed 	bl	801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80174b4:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 80174b6:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 80174b8:	8922      	ldrh	r2, [r4, #8]
 80174ba:	88e1      	ldrh	r1, [r4, #6]
 80174bc:	443a      	add	r2, r7
 80174be:	4431      	add	r1, r6
 80174c0:	b212      	sxth	r2, r2
 80174c2:	b209      	sxth	r1, r1
 80174c4:	4668      	mov	r0, sp
 80174c6:	f7ff ffd3 	bl	8017470 <_ZNK8touchgfx4Rect9intersectEss>
 80174ca:	b1d0      	cbz	r0, 8017502 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80174cc:	89a2      	ldrh	r2, [r4, #12]
 80174ce:	8961      	ldrh	r1, [r4, #10]
 80174d0:	443a      	add	r2, r7
 80174d2:	4431      	add	r1, r6
 80174d4:	b212      	sxth	r2, r2
 80174d6:	b209      	sxth	r1, r1
 80174d8:	4668      	mov	r0, sp
 80174da:	f7ff ffc9 	bl	8017470 <_ZNK8touchgfx4Rect9intersectEss>
 80174de:	4603      	mov	r3, r0
 80174e0:	b978      	cbnz	r0, 8017502 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80174e2:	4a1e      	ldr	r2, [pc, #120]	; (801755c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 80174e4:	9204      	str	r2, [sp, #16]
 80174e6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80174e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80174ec:	2202      	movs	r2, #2
 80174ee:	f88d 2014 	strb.w	r2, [sp, #20]
 80174f2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80174f6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80174fa:	6803      	ldr	r3, [r0, #0]
 80174fc:	a904      	add	r1, sp, #16
 80174fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017500:	4798      	blx	r3
 8017502:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8017504:	a802      	add	r0, sp, #8
 8017506:	f7ff fec2 	bl	801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801750a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801750e:	88e0      	ldrh	r0, [r4, #6]
 8017510:	8961      	ldrh	r1, [r4, #10]
 8017512:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8017516:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801751a:	8923      	ldrh	r3, [r4, #8]
 801751c:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801751e:	7927      	ldrb	r7, [r4, #4]
 8017520:	f88d 7014 	strb.w	r7, [sp, #20]
 8017524:	1a80      	subs	r0, r0, r2
 8017526:	1a89      	subs	r1, r1, r2
 8017528:	89a2      	ldrh	r2, [r4, #12]
 801752a:	4c0d      	ldr	r4, [pc, #52]	; (8017560 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801752c:	9404      	str	r4, [sp, #16]
 801752e:	4460      	add	r0, ip
 8017530:	eba3 030e 	sub.w	r3, r3, lr
 8017534:	eba2 020e 	sub.w	r2, r2, lr
 8017538:	f8ad 0016 	strh.w	r0, [sp, #22]
 801753c:	4433      	add	r3, r6
 801753e:	4461      	add	r1, ip
 8017540:	4432      	add	r2, r6
 8017542:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017544:	f8ad 101a 	strh.w	r1, [sp, #26]
 8017548:	f8ad 3018 	strh.w	r3, [sp, #24]
 801754c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017550:	6803      	ldr	r3, [r0, #0]
 8017552:	a904      	add	r1, sp, #16
 8017554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017556:	4798      	blx	r3
 8017558:	b009      	add	sp, #36	; 0x24
 801755a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801755c:	0802a040 	.word	0x0802a040
 8017560:	0802a054 	.word	0x0802a054

08017564 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017568:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801756c:	790b      	ldrb	r3, [r1, #4]
 801756e:	b0a1      	sub	sp, #132	; 0x84
 8017570:	4604      	mov	r4, r0
 8017572:	460d      	mov	r5, r1
 8017574:	f1b9 0f00 	cmp.w	r9, #0
 8017578:	d00f      	beq.n	801759a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801757a:	2b00      	cmp	r3, #0
 801757c:	f040 80a0 	bne.w	80176c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8017580:	b021      	add	sp, #132	; 0x84
 8017582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017586:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801758a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801758e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017592:	1d20      	adds	r0, r4, #4
 8017594:	f7fb fd36 	bl	8013004 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017598:	e092      	b.n	80176c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801759a:	2b00      	cmp	r3, #0
 801759c:	d1f0      	bne.n	8017580 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801759e:	4b5e      	ldr	r3, [pc, #376]	; (8017718 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 80175a6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80175aa:	f1ba 0f03 	cmp.w	sl, #3
 80175ae:	ddea      	ble.n	8017586 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 80175b0:	f1ba 0f0c 	cmp.w	sl, #12
 80175b4:	f04f 0303 	mov.w	r3, #3
 80175b8:	bfdc      	itt	le
 80175ba:	f10a 32ff 	addle.w	r2, sl, #4294967295
 80175be:	fb92 f3f3 	sdivle	r3, r2, r3
 80175c2:	9301      	str	r3, [sp, #4]
 80175c4:	4b55      	ldr	r3, [pc, #340]	; (801771c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 80175c6:	4956      	ldr	r1, [pc, #344]	; (8017720 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 80175c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80175cc:	4b55      	ldr	r3, [pc, #340]	; (8017724 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 80175ce:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80175d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175d6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80175da:	ab0e      	add	r3, sp, #56	; 0x38
 80175dc:	2248      	movs	r2, #72	; 0x48
 80175de:	2600      	movs	r6, #0
 80175e0:	4618      	mov	r0, r3
 80175e2:	960a      	str	r6, [sp, #40]	; 0x28
 80175e4:	f00d fde8 	bl	80251b8 <memcpy>
 80175e8:	f04f 32ff 	mov.w	r2, #4294967295
 80175ec:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80175f0:	f8cd a008 	str.w	sl, [sp, #8]
 80175f4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80175f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	46b3      	mov	fp, r6
 8017600:	9303      	str	r3, [sp, #12]
 8017602:	2300      	movs	r3, #0
 8017604:	9309      	str	r3, [sp, #36]	; 0x24
 8017606:	9b07      	ldr	r3, [sp, #28]
 8017608:	9a03      	ldr	r2, [sp, #12]
 801760a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801760e:	88ef      	ldrh	r7, [r5, #6]
 8017610:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8017614:	fb13 f302 	smulbb	r3, r3, r2
 8017618:	b29b      	uxth	r3, r3
 801761a:	9304      	str	r3, [sp, #16]
 801761c:	9b07      	ldr	r3, [sp, #28]
 801761e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017622:	a80a      	add	r0, sp, #40	; 0x28
 8017624:	685b      	ldr	r3, [r3, #4]
 8017626:	fb13 f302 	smulbb	r3, r3, r2
 801762a:	b29b      	uxth	r3, r3
 801762c:	9305      	str	r3, [sp, #20]
 801762e:	9b04      	ldr	r3, [sp, #16]
 8017630:	441f      	add	r7, r3
 8017632:	9b05      	ldr	r3, [sp, #20]
 8017634:	4498      	add	r8, r3
 8017636:	b23f      	sxth	r7, r7
 8017638:	fa0f f888 	sxth.w	r8, r8
 801763c:	4642      	mov	r2, r8
 801763e:	4639      	mov	r1, r7
 8017640:	f7ff ff16 	bl	8017470 <_ZNK8touchgfx4Rect9intersectEss>
 8017644:	b380      	cbz	r0, 80176a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8017646:	4639      	mov	r1, r7
 8017648:	ab09      	add	r3, sp, #36	; 0x24
 801764a:	4642      	mov	r2, r8
 801764c:	1d20      	adds	r0, r4, #4
 801764e:	f7fb fcd9 	bl	8013004 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017652:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017654:	b341      	cbz	r1, 80176a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8017656:	4549      	cmp	r1, r9
 8017658:	d026      	beq.n	80176a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801765a:	a80c      	add	r0, sp, #48	; 0x30
 801765c:	f7ff fe17 	bl	801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017660:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8017664:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017668:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801766c:	2002      	movs	r0, #2
 801766e:	fb92 f2f0 	sdiv	r2, r2, r0
 8017672:	440a      	add	r2, r1
 8017674:	1a99      	subs	r1, r3, r2
 8017676:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801767a:	fb93 f3f0 	sdiv	r3, r3, r0
 801767e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8017682:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8017686:	4403      	add	r3, r0
 8017688:	1ad3      	subs	r3, r2, r3
 801768a:	435b      	muls	r3, r3
 801768c:	9a06      	ldr	r2, [sp, #24]
 801768e:	fb01 3301 	mla	r3, r1, r1, r3
 8017692:	4293      	cmp	r3, r2
 8017694:	d208      	bcs.n	80176a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8017696:	9a04      	ldr	r2, [sp, #16]
 8017698:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801769c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801769e:	9a05      	ldr	r2, [sp, #20]
 80176a0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 80176a4:	86e2      	strh	r2, [r4, #54]	; 0x36
 80176a6:	9306      	str	r3, [sp, #24]
 80176a8:	f10b 0b02 	add.w	fp, fp, #2
 80176ac:	f1bb 0f08 	cmp.w	fp, #8
 80176b0:	dda7      	ble.n	8017602 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80176b2:	9b02      	ldr	r3, [sp, #8]
 80176b4:	4453      	add	r3, sl
 80176b6:	9302      	str	r3, [sp, #8]
 80176b8:	9b01      	ldr	r3, [sp, #4]
 80176ba:	3601      	adds	r6, #1
 80176bc:	42b3      	cmp	r3, r6
 80176be:	d199      	bne.n	80175f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 80176c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80176c2:	2900      	cmp	r1, #0
 80176c4:	f43f af5c 	beq.w	8017580 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80176c8:	a80c      	add	r0, sp, #48	; 0x30
 80176ca:	f7ff fde0 	bl	801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80176ce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80176d2:	88ea      	ldrh	r2, [r5, #6]
 80176d4:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80176d8:	7929      	ldrb	r1, [r5, #4]
 80176da:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80176de:	1ad2      	subs	r2, r2, r3
 80176e0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80176e2:	441a      	add	r2, r3
 80176e4:	892b      	ldrh	r3, [r5, #8]
 80176e6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80176ea:	1a1b      	subs	r3, r3, r0
 80176ec:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80176ee:	4403      	add	r3, r0
 80176f0:	480d      	ldr	r0, [pc, #52]	; (8017728 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 80176f2:	900e      	str	r0, [sp, #56]	; 0x38
 80176f4:	2600      	movs	r6, #0
 80176f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80176f8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80176fc:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8017700:	6803      	ldr	r3, [r0, #0]
 8017702:	a90e      	add	r1, sp, #56	; 0x38
 8017704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017706:	4798      	blx	r3
 8017708:	792b      	ldrb	r3, [r5, #4]
 801770a:	2b00      	cmp	r3, #0
 801770c:	f43f af38 	beq.w	8017580 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8017710:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8017714:	e734      	b.n	8017580 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8017716:	bf00      	nop
 8017718:	2000a060 	.word	0x2000a060
 801771c:	2000a054 	.word	0x2000a054
 8017720:	0802838c 	.word	0x0802838c
 8017724:	2000a056 	.word	0x2000a056
 8017728:	0802a040 	.word	0x0802a040

0801772c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801772c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801772e:	4604      	mov	r4, r0
 8017730:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017734:	3201      	adds	r2, #1
 8017736:	d112      	bne.n	801775e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017738:	6803      	ldr	r3, [r0, #0]
 801773a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801773e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017742:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017746:	2500      	movs	r5, #0
 8017748:	9500      	str	r5, [sp, #0]
 801774a:	466d      	mov	r5, sp
 801774c:	4629      	mov	r1, r5
 801774e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017754:	4798      	blx	r3
 8017756:	e895 0003 	ldmia.w	r5, {r0, r1}
 801775a:	e884 0003 	stmia.w	r4, {r0, r1}
 801775e:	4620      	mov	r0, r4
 8017760:	b003      	add	sp, #12
 8017762:	bd30      	pop	{r4, r5, pc}

08017764 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017764:	b513      	push	{r0, r1, r4, lr}
 8017766:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801776a:	3301      	adds	r3, #1
 801776c:	4604      	mov	r4, r0
 801776e:	d109      	bne.n	8017784 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017770:	4601      	mov	r1, r0
 8017772:	4668      	mov	r0, sp
 8017774:	f7ff fd8b 	bl	801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017778:	f8bd 3000 	ldrh.w	r3, [sp]
 801777c:	8423      	strh	r3, [r4, #32]
 801777e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017782:	8463      	strh	r3, [r4, #34]	; 0x22
 8017784:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017788:	b002      	add	sp, #8
 801778a:	bd10      	pop	{r4, pc}

0801778c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801778c:	b513      	push	{r0, r1, r4, lr}
 801778e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8017792:	3301      	adds	r3, #1
 8017794:	4604      	mov	r4, r0
 8017796:	d109      	bne.n	80177ac <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017798:	4601      	mov	r1, r0
 801779a:	4668      	mov	r0, sp
 801779c:	f7ff fd77 	bl	801728e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80177a4:	8423      	strh	r3, [r4, #32]
 80177a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80177aa:	8463      	strh	r3, [r4, #34]	; 0x22
 80177ac:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80177b0:	b002      	add	sp, #8
 80177b2:	bd10      	pop	{r4, pc}

080177b4 <_ZN8touchgfx6ScreenC1Ev>:
 80177b4:	b570      	push	{r4, r5, r6, lr}
 80177b6:	4605      	mov	r5, r0
 80177b8:	4b15      	ldr	r3, [pc, #84]	; (8017810 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 80177ba:	f845 3b04 	str.w	r3, [r5], #4
 80177be:	2300      	movs	r3, #0
 80177c0:	8103      	strh	r3, [r0, #8]
 80177c2:	8143      	strh	r3, [r0, #10]
 80177c4:	8183      	strh	r3, [r0, #12]
 80177c6:	81c3      	strh	r3, [r0, #14]
 80177c8:	8203      	strh	r3, [r0, #16]
 80177ca:	8243      	strh	r3, [r0, #18]
 80177cc:	8283      	strh	r3, [r0, #20]
 80177ce:	82c3      	strh	r3, [r0, #22]
 80177d0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80177d4:	6203      	str	r3, [r0, #32]
 80177d6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80177da:	4a0e      	ldr	r2, [pc, #56]	; (8017814 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80177dc:	6343      	str	r3, [r0, #52]	; 0x34
 80177de:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80177e2:	4b0d      	ldr	r3, [pc, #52]	; (8017818 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80177e4:	6042      	str	r2, [r0, #4]
 80177e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80177ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80177ec:	4a0b      	ldr	r2, [pc, #44]	; (801781c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80177ee:	4604      	mov	r4, r0
 80177f0:	2101      	movs	r1, #1
 80177f2:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80177f6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80177fa:	f9b2 1000 	ldrsh.w	r1, [r2]
 80177fe:	4628      	mov	r0, r5
 8017800:	4798      	blx	r3
 8017802:	6863      	ldr	r3, [r4, #4]
 8017804:	4628      	mov	r0, r5
 8017806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017808:	4631      	mov	r1, r6
 801780a:	4798      	blx	r3
 801780c:	4620      	mov	r0, r4
 801780e:	bd70      	pop	{r4, r5, r6, pc}
 8017810:	0802a07c 	.word	0x0802a07c
 8017814:	080291a4 	.word	0x080291a4
 8017818:	2000a056 	.word	0x2000a056
 801781c:	2000a054 	.word	0x2000a054

08017820 <_ZN8touchgfx6Screen4drawEv>:
 8017820:	b507      	push	{r0, r1, r2, lr}
 8017822:	4b09      	ldr	r3, [pc, #36]	; (8017848 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8017824:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017828:	4b08      	ldr	r3, [pc, #32]	; (801784c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801782a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801782e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017832:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017836:	6803      	ldr	r3, [r0, #0]
 8017838:	2100      	movs	r1, #0
 801783a:	9100      	str	r1, [sp, #0]
 801783c:	689b      	ldr	r3, [r3, #8]
 801783e:	4669      	mov	r1, sp
 8017840:	4798      	blx	r3
 8017842:	b003      	add	sp, #12
 8017844:	f85d fb04 	ldr.w	pc, [sp], #4
 8017848:	2000a054 	.word	0x2000a054
 801784c:	2000a056 	.word	0x2000a056

08017850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017854:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017858:	2b00      	cmp	r3, #0
 801785a:	b089      	sub	sp, #36	; 0x24
 801785c:	4680      	mov	r8, r0
 801785e:	460c      	mov	r4, r1
 8017860:	4615      	mov	r5, r2
 8017862:	dd0e      	ble.n	8017882 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017864:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017868:	2b00      	cmp	r3, #0
 801786a:	dd0a      	ble.n	8017882 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801786c:	4628      	mov	r0, r5
 801786e:	f7ff ff5d 	bl	801772c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017872:	4621      	mov	r1, r4
 8017874:	f7fe fc78 	bl	8016168 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017878:	69eb      	ldr	r3, [r5, #28]
 801787a:	b928      	cbnz	r0, 8017888 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801787c:	461d      	mov	r5, r3
 801787e:	2b00      	cmp	r3, #0
 8017880:	d1f4      	bne.n	801786c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017882:	b009      	add	sp, #36	; 0x24
 8017884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017888:	ae04      	add	r6, sp, #16
 801788a:	2b00      	cmp	r3, #0
 801788c:	f000 80b5 	beq.w	80179fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017890:	682b      	ldr	r3, [r5, #0]
 8017892:	4629      	mov	r1, r5
 8017894:	68db      	ldr	r3, [r3, #12]
 8017896:	a802      	add	r0, sp, #8
 8017898:	4798      	blx	r3
 801789a:	4628      	mov	r0, r5
 801789c:	f7ff ff62 	bl	8017764 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80178a0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80178a4:	4407      	add	r7, r0
 80178a6:	4628      	mov	r0, r5
 80178a8:	f7ff ff70 	bl	801778c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80178ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80178b0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80178b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80178b8:	4418      	add	r0, r3
 80178ba:	4621      	mov	r1, r4
 80178bc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80178c0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80178c4:	b23f      	sxth	r7, r7
 80178c6:	4630      	mov	r0, r6
 80178c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178cc:	f8ad 7010 	strh.w	r7, [sp, #16]
 80178d0:	f7fb fc4a 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 80178d4:	4628      	mov	r0, r5
 80178d6:	f7ff ff29 	bl	801772c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80178da:	4602      	mov	r2, r0
 80178dc:	e896 0003 	ldmia.w	r6, {r0, r1}
 80178e0:	ab06      	add	r3, sp, #24
 80178e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80178e6:	4611      	mov	r1, r2
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7fb fc3d 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 80178ee:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80178f2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80178f6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80178fa:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80178fe:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017902:	4299      	cmp	r1, r3
 8017904:	d10b      	bne.n	801791e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017906:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801790a:	4552      	cmp	r2, sl
 801790c:	d107      	bne.n	801791e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801790e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017912:	455a      	cmp	r2, fp
 8017914:	d103      	bne.n	801791e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017916:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801791a:	454a      	cmp	r2, r9
 801791c:	d06d      	beq.n	80179fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801791e:	f1bb 0f00 	cmp.w	fp, #0
 8017922:	dd65      	ble.n	80179f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017924:	f1b9 0f00 	cmp.w	r9, #0
 8017928:	dd62      	ble.n	80179f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801792a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801792e:	fa1f f08a 	uxth.w	r0, sl
 8017932:	4552      	cmp	r2, sl
 8017934:	9000      	str	r0, [sp, #0]
 8017936:	da12      	bge.n	801795e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8017938:	9301      	str	r3, [sp, #4]
 801793a:	9b00      	ldr	r3, [sp, #0]
 801793c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017940:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017944:	1a9a      	subs	r2, r3, r2
 8017946:	f8ad 1010 	strh.w	r1, [sp, #16]
 801794a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801794e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017952:	69ea      	ldr	r2, [r5, #28]
 8017954:	4631      	mov	r1, r6
 8017956:	4640      	mov	r0, r8
 8017958:	f7ff ff7a 	bl	8017850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801795c:	9b01      	ldr	r3, [sp, #4]
 801795e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017962:	429a      	cmp	r2, r3
 8017964:	b29f      	uxth	r7, r3
 8017966:	da0d      	bge.n	8017984 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8017968:	f8ad 2010 	strh.w	r2, [sp, #16]
 801796c:	1aba      	subs	r2, r7, r2
 801796e:	f8ad a012 	strh.w	sl, [sp, #18]
 8017972:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017976:	f8ad 9016 	strh.w	r9, [sp, #22]
 801797a:	69ea      	ldr	r2, [r5, #28]
 801797c:	4631      	mov	r1, r6
 801797e:	4640      	mov	r0, r8
 8017980:	f7ff ff66 	bl	8017850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017984:	8822      	ldrh	r2, [r4, #0]
 8017986:	88a3      	ldrh	r3, [r4, #4]
 8017988:	445f      	add	r7, fp
 801798a:	4413      	add	r3, r2
 801798c:	b29b      	uxth	r3, r3
 801798e:	b2bf      	uxth	r7, r7
 8017990:	b23a      	sxth	r2, r7
 8017992:	b219      	sxth	r1, r3
 8017994:	4291      	cmp	r1, r2
 8017996:	dd0d      	ble.n	80179b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017998:	1bdb      	subs	r3, r3, r7
 801799a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801799e:	f8ad a012 	strh.w	sl, [sp, #18]
 80179a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80179a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80179aa:	69ea      	ldr	r2, [r5, #28]
 80179ac:	4631      	mov	r1, r6
 80179ae:	4640      	mov	r0, r8
 80179b0:	f7ff ff4e 	bl	8017850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80179b4:	88e2      	ldrh	r2, [r4, #6]
 80179b6:	8863      	ldrh	r3, [r4, #2]
 80179b8:	4413      	add	r3, r2
 80179ba:	9a00      	ldr	r2, [sp, #0]
 80179bc:	444a      	add	r2, r9
 80179be:	b29b      	uxth	r3, r3
 80179c0:	fa1f f982 	uxth.w	r9, r2
 80179c4:	fa0f f289 	sxth.w	r2, r9
 80179c8:	b219      	sxth	r1, r3
 80179ca:	428a      	cmp	r2, r1
 80179cc:	da15      	bge.n	80179fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80179ce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80179d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80179d6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80179da:	eba3 0309 	sub.w	r3, r3, r9
 80179de:	f8ad 0010 	strh.w	r0, [sp, #16]
 80179e2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80179e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80179ea:	69ea      	ldr	r2, [r5, #28]
 80179ec:	4631      	mov	r1, r6
 80179ee:	e001      	b.n	80179f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80179f0:	69ea      	ldr	r2, [r5, #28]
 80179f2:	4621      	mov	r1, r4
 80179f4:	4640      	mov	r0, r8
 80179f6:	f7ff ff2b 	bl	8017850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80179fa:	4628      	mov	r0, r5
 80179fc:	f7ff fe96 	bl	801772c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017a00:	6861      	ldr	r1, [r4, #4]
 8017a02:	4602      	mov	r2, r0
 8017a04:	6820      	ldr	r0, [r4, #0]
 8017a06:	4633      	mov	r3, r6
 8017a08:	c303      	stmia	r3!, {r0, r1}
 8017a0a:	4611      	mov	r1, r2
 8017a0c:	4630      	mov	r0, r6
 8017a0e:	f7fb fbab 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 8017a12:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	f77f af33 	ble.w	8017882 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017a1c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	f77f af2e 	ble.w	8017882 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017a26:	4628      	mov	r0, r5
 8017a28:	f7ff fe9c 	bl	8017764 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017a2c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017a30:	1a18      	subs	r0, r3, r0
 8017a32:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017a36:	4628      	mov	r0, r5
 8017a38:	f7ff fea8 	bl	801778c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017a3c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017a40:	1a18      	subs	r0, r3, r0
 8017a42:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017a46:	682b      	ldr	r3, [r5, #0]
 8017a48:	4631      	mov	r1, r6
 8017a4a:	689b      	ldr	r3, [r3, #8]
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	4798      	blx	r3
 8017a50:	e717      	b.n	8017882 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08017a52 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017a52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a54:	aa02      	add	r2, sp, #8
 8017a56:	2300      	movs	r3, #0
 8017a58:	f842 3d04 	str.w	r3, [r2, #-4]!
 8017a5c:	4604      	mov	r4, r0
 8017a5e:	3004      	adds	r0, #4
 8017a60:	460d      	mov	r5, r1
 8017a62:	f7fb fc59 	bl	8013318 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017a66:	9a01      	ldr	r2, [sp, #4]
 8017a68:	b11a      	cbz	r2, 8017a72 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8017a6a:	4629      	mov	r1, r5
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	f7ff feef 	bl	8017850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a72:	b003      	add	sp, #12
 8017a74:	bd30      	pop	{r4, r5, pc}

08017a76 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017a76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a78:	4602      	mov	r2, r0
 8017a7a:	4604      	mov	r4, r0
 8017a7c:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017a80:	460d      	mov	r5, r1
 8017a82:	6851      	ldr	r1, [r2, #4]
 8017a84:	466b      	mov	r3, sp
 8017a86:	c303      	stmia	r3!, {r0, r1}
 8017a88:	4629      	mov	r1, r5
 8017a8a:	4668      	mov	r0, sp
 8017a8c:	f7fb fb6c 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 8017a90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017a94:	4669      	mov	r1, sp
 8017a96:	b123      	cbz	r3, 8017aa2 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f7ff ffda 	bl	8017a52 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017a9e:	b003      	add	sp, #12
 8017aa0:	bd30      	pop	{r4, r5, pc}
 8017aa2:	1d20      	adds	r0, r4, #4
 8017aa4:	f7fb fbff 	bl	80132a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017aa8:	e7f9      	b.n	8017a9e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08017aaa <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017aaa:	680a      	ldr	r2, [r1, #0]
 8017aac:	460b      	mov	r3, r1
 8017aae:	6992      	ldr	r2, [r2, #24]
 8017ab0:	1d01      	adds	r1, r0, #4
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	4710      	bx	r2

08017ab6 <_ZN8touchgfx12TextProviderC1Ev>:
 8017ab6:	b510      	push	{r4, lr}
 8017ab8:	2300      	movs	r3, #0
 8017aba:	2201      	movs	r2, #1
 8017abc:	4604      	mov	r4, r0
 8017abe:	e9c0 3300 	strd	r3, r3, [r0]
 8017ac2:	60c3      	str	r3, [r0, #12]
 8017ac4:	7403      	strb	r3, [r0, #16]
 8017ac6:	82c3      	strh	r3, [r0, #22]
 8017ac8:	8303      	strh	r3, [r0, #24]
 8017aca:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017acc:	8603      	strh	r3, [r0, #48]	; 0x30
 8017ace:	86c3      	strh	r3, [r0, #54]	; 0x36
 8017ad0:	8703      	strh	r3, [r0, #56]	; 0x38
 8017ad2:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017ad4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8017ad8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8017adc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8017ae0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8017ae4:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8017ae8:	f7f8 fc04 	bl	80102f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017aec:	4620      	mov	r0, r4
 8017aee:	bd10      	pop	{r4, pc}

08017af0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017af0:	b530      	push	{r4, r5, lr}
 8017af2:	2500      	movs	r5, #0
 8017af4:	2401      	movs	r4, #1
 8017af6:	6843      	ldr	r3, [r0, #4]
 8017af8:	b913      	cbnz	r3, 8017b00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017afa:	6803      	ldr	r3, [r0, #0]
 8017afc:	b1f3      	cbz	r3, 8017b3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8017afe:	6043      	str	r3, [r0, #4]
 8017b00:	7c03      	ldrb	r3, [r0, #16]
 8017b02:	b143      	cbz	r3, 8017b16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017b04:	68c3      	ldr	r3, [r0, #12]
 8017b06:	b12b      	cbz	r3, 8017b14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017b08:	881a      	ldrh	r2, [r3, #0]
 8017b0a:	b11a      	cbz	r2, 8017b14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017b0c:	1c9a      	adds	r2, r3, #2
 8017b0e:	60c2      	str	r2, [r0, #12]
 8017b10:	8818      	ldrh	r0, [r3, #0]
 8017b12:	bd30      	pop	{r4, r5, pc}
 8017b14:	7405      	strb	r5, [r0, #16]
 8017b16:	6843      	ldr	r3, [r0, #4]
 8017b18:	8819      	ldrh	r1, [r3, #0]
 8017b1a:	b179      	cbz	r1, 8017b3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8017b1c:	1c9a      	adds	r2, r3, #2
 8017b1e:	2902      	cmp	r1, #2
 8017b20:	6042      	str	r2, [r0, #4]
 8017b22:	d1f5      	bne.n	8017b10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017b24:	6883      	ldr	r3, [r0, #8]
 8017b26:	1d1a      	adds	r2, r3, #4
 8017b28:	6082      	str	r2, [r0, #8]
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	60c3      	str	r3, [r0, #12]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d0e1      	beq.n	8017af6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b32:	881b      	ldrh	r3, [r3, #0]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d0de      	beq.n	8017af6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b38:	7404      	strb	r4, [r0, #16]
 8017b3a:	e7dc      	b.n	8017af6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b3c:	2000      	movs	r0, #0
 8017b3e:	e7e8      	b.n	8017b12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017b40 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8017b40:	b410      	push	{r4}
 8017b42:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017b44:	2300      	movs	r3, #0
 8017b46:	6082      	str	r2, [r0, #8]
 8017b48:	6001      	str	r1, [r0, #0]
 8017b4a:	6043      	str	r3, [r0, #4]
 8017b4c:	60c3      	str	r3, [r0, #12]
 8017b4e:	7403      	strb	r3, [r0, #16]
 8017b50:	8603      	strh	r3, [r0, #48]	; 0x30
 8017b52:	8303      	strh	r3, [r0, #24]
 8017b54:	8703      	strh	r3, [r0, #56]	; 0x38
 8017b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b5a:	f7f8 bbcb 	b.w	80102f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017b5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b60:	4605      	mov	r5, r0
 8017b62:	4608      	mov	r0, r1
 8017b64:	b1e9      	cbz	r1, 8017ba2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8017b66:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8017b6a:	460b      	mov	r3, r1
 8017b6c:	f101 0708 	add.w	r7, r1, #8
 8017b70:	4622      	mov	r2, r4
 8017b72:	6818      	ldr	r0, [r3, #0]
 8017b74:	6859      	ldr	r1, [r3, #4]
 8017b76:	4626      	mov	r6, r4
 8017b78:	c603      	stmia	r6!, {r0, r1}
 8017b7a:	3308      	adds	r3, #8
 8017b7c:	42bb      	cmp	r3, r7
 8017b7e:	4634      	mov	r4, r6
 8017b80:	d1f7      	bne.n	8017b72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017b82:	6818      	ldr	r0, [r3, #0]
 8017b84:	6030      	str	r0, [r6, #0]
 8017b86:	889b      	ldrh	r3, [r3, #4]
 8017b88:	80b3      	strh	r3, [r6, #4]
 8017b8a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8017b8e:	015b      	lsls	r3, r3, #5
 8017b90:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017b94:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8017b98:	430b      	orrs	r3, r1
 8017b9a:	425b      	negs	r3, r3
 8017b9c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8017ba0:	4610      	mov	r0, r2
 8017ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ba4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017ba4:	b538      	push	{r3, r4, r5, lr}
 8017ba6:	460c      	mov	r4, r1
 8017ba8:	6811      	ldr	r1, [r2, #0]
 8017baa:	4610      	mov	r0, r2
 8017bac:	68cd      	ldr	r5, [r1, #12]
 8017bae:	4619      	mov	r1, r3
 8017bb0:	47a8      	blx	r5
 8017bb2:	2800      	cmp	r0, #0
 8017bb4:	bf08      	it	eq
 8017bb6:	4620      	moveq	r0, r4
 8017bb8:	bd38      	pop	{r3, r4, r5, pc}
	...

08017bbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	4615      	mov	r5, r2
 8017bc2:	4608      	mov	r0, r1
 8017bc4:	b93a      	cbnz	r2, 8017bd6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017bc6:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8017bca:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8017bce:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8017bd2:	4628      	mov	r0, r5
 8017bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bd6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017bda:	8893      	ldrh	r3, [r2, #4]
 8017bdc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8017be0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017be4:	79ee      	ldrb	r6, [r5, #7]
 8017be6:	4316      	orrs	r6, r2
 8017be8:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8017bec:	189a      	adds	r2, r3, r2
 8017bee:	b291      	uxth	r1, r2
 8017bf0:	291d      	cmp	r1, #29
 8017bf2:	b2b7      	uxth	r7, r6
 8017bf4:	f200 8083 	bhi.w	8017cfe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8017bf8:	2201      	movs	r2, #1
 8017bfa:	408a      	lsls	r2, r1
 8017bfc:	4978      	ldr	r1, [pc, #480]	; (8017de0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8017bfe:	420a      	tst	r2, r1
 8017c00:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8017c04:	d12d      	bne.n	8017c62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8017c06:	f412 7f60 	tst.w	r2, #896	; 0x380
 8017c0a:	d078      	beq.n	8017cfe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8017c0c:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8017c10:	462b      	mov	r3, r5
 8017c12:	f105 0e08 	add.w	lr, r5, #8
 8017c16:	4615      	mov	r5, r2
 8017c18:	6818      	ldr	r0, [r3, #0]
 8017c1a:	6859      	ldr	r1, [r3, #4]
 8017c1c:	4694      	mov	ip, r2
 8017c1e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017c22:	3308      	adds	r3, #8
 8017c24:	4573      	cmp	r3, lr
 8017c26:	4662      	mov	r2, ip
 8017c28:	d1f6      	bne.n	8017c18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 8017c2a:	6818      	ldr	r0, [r3, #0]
 8017c2c:	f8cc 0000 	str.w	r0, [ip]
 8017c30:	889b      	ldrh	r3, [r3, #4]
 8017c32:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017c36:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8017c3a:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 8017c3e:	b2b3      	uxth	r3, r6
 8017c40:	1aca      	subs	r2, r1, r3
 8017c42:	b292      	uxth	r2, r2
 8017c44:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8017c48:	10d2      	asrs	r2, r2, #3
 8017c4a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017c4e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8017c52:	4302      	orrs	r2, r0
 8017c54:	1bcf      	subs	r7, r1, r7
 8017c56:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8017c5a:	1afb      	subs	r3, r7, r3
 8017c5c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8017c60:	e7b7      	b.n	8017bd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017c62:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017c64:	b92b      	cbnz	r3, 8017c72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8017c66:	4b5f      	ldr	r3, [pc, #380]	; (8017de4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8017c68:	4a5f      	ldr	r2, [pc, #380]	; (8017de8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8017c6a:	4860      	ldr	r0, [pc, #384]	; (8017dec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8017c6c:	21c0      	movs	r1, #192	; 0xc0
 8017c6e:	f00d fa21 	bl	80250b4 <__assert_func>
 8017c72:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8017c74:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017c78:	8b59      	ldrh	r1, [r3, #26]
 8017c7a:	f640 6333 	movw	r3, #3635	; 0xe33
 8017c7e:	4299      	cmp	r1, r3
 8017c80:	d110      	bne.n	8017ca4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8017c82:	6803      	ldr	r3, [r0, #0]
 8017c84:	68db      	ldr	r3, [r3, #12]
 8017c86:	4798      	blx	r3
 8017c88:	7b41      	ldrb	r1, [r0, #13]
 8017c8a:	00cb      	lsls	r3, r1, #3
 8017c8c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017c90:	7a03      	ldrb	r3, [r0, #8]
 8017c92:	0648      	lsls	r0, r1, #25
 8017c94:	ea43 0302 	orr.w	r3, r3, r2
 8017c98:	bf44      	itt	mi
 8017c9a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017c9e:	b21b      	sxthmi	r3, r3
 8017ca0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8017ca4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8017ca8:	443b      	add	r3, r7
 8017caa:	4433      	add	r3, r6
 8017cac:	b29b      	uxth	r3, r3
 8017cae:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8017cb2:	462a      	mov	r2, r5
 8017cb4:	f105 0c08 	add.w	ip, r5, #8
 8017cb8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8017cbc:	4635      	mov	r5, r6
 8017cbe:	6810      	ldr	r0, [r2, #0]
 8017cc0:	6851      	ldr	r1, [r2, #4]
 8017cc2:	4637      	mov	r7, r6
 8017cc4:	c703      	stmia	r7!, {r0, r1}
 8017cc6:	3208      	adds	r2, #8
 8017cc8:	4562      	cmp	r2, ip
 8017cca:	463e      	mov	r6, r7
 8017ccc:	d1f7      	bne.n	8017cbe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8017cce:	6810      	ldr	r0, [r2, #0]
 8017cd0:	6038      	str	r0, [r7, #0]
 8017cd2:	8892      	ldrh	r2, [r2, #4]
 8017cd4:	80ba      	strh	r2, [r7, #4]
 8017cd6:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8017cda:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8017cde:	10db      	asrs	r3, r3, #3
 8017ce0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017ce4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017ce8:	4313      	orrs	r3, r2
 8017cea:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8017cee:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8017cf2:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8017cf6:	1a9b      	subs	r3, r3, r2
 8017cf8:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8017cfc:	e769      	b.n	8017bd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017cfe:	f023 0204 	bic.w	r2, r3, #4
 8017d02:	f640 611b 	movw	r1, #3611	; 0xe1b
 8017d06:	428a      	cmp	r2, r1
 8017d08:	d003      	beq.n	8017d12 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 8017d0a:	f640 621d 	movw	r2, #3613	; 0xe1d
 8017d0e:	4293      	cmp	r3, r2
 8017d10:	d120      	bne.n	8017d54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 8017d12:	3b01      	subs	r3, #1
 8017d14:	4602      	mov	r2, r0
 8017d16:	b29b      	uxth	r3, r3
 8017d18:	4629      	mov	r1, r5
 8017d1a:	4620      	mov	r0, r4
 8017d1c:	f7ff ff42 	bl	8017ba4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017d20:	7b41      	ldrb	r1, [r0, #13]
 8017d22:	00cb      	lsls	r3, r1, #3
 8017d24:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017d28:	7a03      	ldrb	r3, [r0, #8]
 8017d2a:	0649      	lsls	r1, r1, #25
 8017d2c:	ea43 0302 	orr.w	r3, r3, r2
 8017d30:	bf44      	itt	mi
 8017d32:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017d36:	b21b      	sxthmi	r3, r3
 8017d38:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8017d3c:	7b6b      	ldrb	r3, [r5, #13]
 8017d3e:	7aaa      	ldrb	r2, [r5, #10]
 8017d40:	005b      	lsls	r3, r3, #1
 8017d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d46:	4313      	orrs	r3, r2
 8017d48:	115a      	asrs	r2, r3, #5
 8017d4a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017d4e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017d52:	e036      	b.n	8017dc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8017d54:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017d58:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017d5c:	7a2a      	ldrb	r2, [r5, #8]
 8017d5e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017d62:	ea42 0201 	orr.w	r2, r2, r1
 8017d66:	bf1c      	itt	ne
 8017d68:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017d6c:	b212      	sxthne	r2, r2
 8017d6e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8017d72:	f640 6109 	movw	r1, #3593	; 0xe09
 8017d76:	f023 0210 	bic.w	r2, r3, #16
 8017d7a:	428a      	cmp	r2, r1
 8017d7c:	d003      	beq.n	8017d86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 8017d7e:	f640 6213 	movw	r2, #3603	; 0xe13
 8017d82:	4293      	cmp	r3, r2
 8017d84:	d12a      	bne.n	8017ddc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8017d86:	7b6e      	ldrb	r6, [r5, #13]
 8017d88:	0076      	lsls	r6, r6, #1
 8017d8a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017d8e:	7aae      	ldrb	r6, [r5, #10]
 8017d90:	4316      	orrs	r6, r2
 8017d92:	f640 6213 	movw	r2, #3603	; 0xe13
 8017d96:	4293      	cmp	r3, r2
 8017d98:	bf18      	it	ne
 8017d9a:	f103 33ff 	addne.w	r3, r3, #4294967295
 8017d9e:	4602      	mov	r2, r0
 8017da0:	bf14      	ite	ne
 8017da2:	b29b      	uxthne	r3, r3
 8017da4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8017da8:	4629      	mov	r1, r5
 8017daa:	4620      	mov	r0, r4
 8017dac:	f7ff fefa 	bl	8017ba4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017db0:	7b43      	ldrb	r3, [r0, #13]
 8017db2:	7a82      	ldrb	r2, [r0, #10]
 8017db4:	005b      	lsls	r3, r3, #1
 8017db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017dba:	4313      	orrs	r3, r2
 8017dbc:	1af6      	subs	r6, r6, r3
 8017dbe:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8017dc2:	7b69      	ldrb	r1, [r5, #13]
 8017dc4:	00cb      	lsls	r3, r1, #3
 8017dc6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017dca:	7a2b      	ldrb	r3, [r5, #8]
 8017dcc:	4313      	orrs	r3, r2
 8017dce:	064a      	lsls	r2, r1, #25
 8017dd0:	bf44      	itt	mi
 8017dd2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017dd6:	b21b      	sxthmi	r3, r3
 8017dd8:	1bdb      	subs	r3, r3, r7
 8017dda:	e73f      	b.n	8017c5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8017ddc:	2300      	movs	r3, #0
 8017dde:	e7b6      	b.n	8017d4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 8017de0:	3fc00079 	.word	0x3fc00079
 8017de4:	0802a0a8 	.word	0x0802a0a8
 8017de8:	0802a31a 	.word	0x0802a31a
 8017dec:	0802a0b1 	.word	0x0802a0b1

08017df0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8017df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017df4:	4604      	mov	r4, r0
 8017df6:	b942      	cbnz	r2, 8017e0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8017df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017dfc:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8017e00:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8017e04:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017e08:	e046      	b.n	8017e98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8017e0a:	7b51      	ldrb	r1, [r2, #13]
 8017e0c:	8893      	ldrh	r3, [r2, #4]
 8017e0e:	010f      	lsls	r7, r1, #4
 8017e10:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017e14:	79d7      	ldrb	r7, [r2, #7]
 8017e16:	4307      	orrs	r7, r0
 8017e18:	2f04      	cmp	r7, #4
 8017e1a:	b2bd      	uxth	r5, r7
 8017e1c:	bfcc      	ite	gt
 8017e1e:	08bf      	lsrgt	r7, r7, #2
 8017e20:	2701      	movle	r7, #1
 8017e22:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8017e26:	f200 80ab 	bhi.w	8017f80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8017e2a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8017e2e:	4283      	cmp	r3, r0
 8017e30:	d216      	bcs.n	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017e32:	f240 605b 	movw	r0, #1627	; 0x65b
 8017e36:	4283      	cmp	r3, r0
 8017e38:	d859      	bhi.n	8017eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8017e3a:	f240 6057 	movw	r0, #1623	; 0x657
 8017e3e:	4283      	cmp	r3, r0
 8017e40:	d20e      	bcs.n	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017e42:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017e46:	d24a      	bcs.n	8017ede <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8017e48:	f240 604e 	movw	r0, #1614	; 0x64e
 8017e4c:	4283      	cmp	r3, r0
 8017e4e:	d207      	bcs.n	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017e50:	f240 601a 	movw	r0, #1562	; 0x61a
 8017e54:	4283      	cmp	r3, r0
 8017e56:	d02a      	beq.n	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017e58:	d821      	bhi.n	8017e9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8017e5a:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8017e5e:	d35b      	bcc.n	8017f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017e60:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8017e64:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017e68:	f040 80d0 	bne.w	801800c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8017e6c:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 8017e70:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017e74:	f040 80ca 	bne.w	801800c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8017e78:	00cb      	lsls	r3, r1, #3
 8017e7a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017e7e:	7a13      	ldrb	r3, [r2, #8]
 8017e80:	0649      	lsls	r1, r1, #25
 8017e82:	ea43 0300 	orr.w	r3, r3, r0
 8017e86:	bf44      	itt	mi
 8017e88:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017e8c:	b21b      	sxthmi	r3, r3
 8017e8e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8017e92:	1b5d      	subs	r5, r3, r5
 8017e94:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8017e98:	4610      	mov	r0, r2
 8017e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e9e:	f240 604b 	movw	r0, #1611	; 0x64b
 8017ea2:	4283      	cmp	r3, r0
 8017ea4:	d338      	bcc.n	8017f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017ea6:	f240 604c 	movw	r0, #1612	; 0x64c
 8017eaa:	4283      	cmp	r3, r0
 8017eac:	d9d8      	bls.n	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017eae:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 8017eb2:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8017eb6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017eba:	f040 80f1 	bne.w	80180a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8017ebe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017ec2:	f040 80ed 	bne.w	80180a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8017ec6:	00cb      	lsls	r3, r1, #3
 8017ec8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017ecc:	7a13      	ldrb	r3, [r2, #8]
 8017ece:	064e      	lsls	r6, r1, #25
 8017ed0:	ea43 0300 	orr.w	r3, r3, r0
 8017ed4:	bf44      	itt	mi
 8017ed6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017eda:	b21b      	sxthmi	r3, r3
 8017edc:	e7d9      	b.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8017ede:	f240 6054 	movw	r0, #1620	; 0x654
 8017ee2:	4283      	cmp	r3, r0
 8017ee4:	d8e3      	bhi.n	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017ee6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017eea:	d9e0      	bls.n	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017eec:	e7b8      	b.n	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017eee:	f240 6074 	movw	r0, #1652	; 0x674
 8017ef2:	4283      	cmp	r3, r0
 8017ef4:	d0b4      	beq.n	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017ef6:	d82d      	bhi.n	8017f54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8017ef8:	f240 605e 	movw	r0, #1630	; 0x65e
 8017efc:	4283      	cmp	r3, r0
 8017efe:	d804      	bhi.n	8017f0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8017f00:	f240 605d 	movw	r0, #1629	; 0x65d
 8017f04:	4283      	cmp	r3, r0
 8017f06:	d3d2      	bcc.n	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017f08:	e7aa      	b.n	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017f0a:	f240 605f 	movw	r0, #1631	; 0x65f
 8017f0e:	4283      	cmp	r3, r0
 8017f10:	d0cd      	beq.n	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017f12:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8017f16:	d0a3      	beq.n	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017f18:	00cb      	lsls	r3, r1, #3
 8017f1a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017f1e:	7a13      	ldrb	r3, [r2, #8]
 8017f20:	0649      	lsls	r1, r1, #25
 8017f22:	ea43 0300 	orr.w	r3, r3, r0
 8017f26:	bf44      	itt	mi
 8017f28:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017f2c:	b21b      	sxthmi	r3, r3
 8017f2e:	1b5d      	subs	r5, r3, r5
 8017f30:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8017f34:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8017f38:	7b53      	ldrb	r3, [r2, #13]
 8017f3a:	015b      	lsls	r3, r3, #5
 8017f3c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017f40:	7993      	ldrb	r3, [r2, #6]
 8017f42:	430b      	orrs	r3, r1
 8017f44:	005b      	lsls	r3, r3, #1
 8017f46:	2105      	movs	r1, #5
 8017f48:	fb93 f3f1 	sdiv	r3, r3, r1
 8017f4c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8017f50:	440b      	add	r3, r1
 8017f52:	e757      	b.n	8017e04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8017f54:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8017f58:	4283      	cmp	r3, r0
 8017f5a:	d809      	bhi.n	8017f70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8017f5c:	f240 60df 	movw	r0, #1759	; 0x6df
 8017f60:	4283      	cmp	r3, r0
 8017f62:	f4bf af7d 	bcs.w	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017f66:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8017f6a:	2b05      	cmp	r3, #5
 8017f6c:	d8d4      	bhi.n	8017f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017f6e:	e777      	b.n	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017f70:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8017f74:	4283      	cmp	r3, r0
 8017f76:	d09a      	beq.n	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017f78:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8017f7c:	4283      	cmp	r3, r0
 8017f7e:	e7ca      	b.n	8017f16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8017f80:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8017f84:	d22b      	bcs.n	8017fde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8017f86:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8017f8a:	4283      	cmp	r3, r0
 8017f8c:	d28f      	bcs.n	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017f8e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017f92:	4283      	cmp	r3, r0
 8017f94:	d816      	bhi.n	8017fc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8017f96:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8017f9a:	4283      	cmp	r3, r0
 8017f9c:	f4bf af60 	bcs.w	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017fa0:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8017fa4:	4283      	cmp	r3, r0
 8017fa6:	d80a      	bhi.n	8017fbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8017fa8:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8017fac:	4283      	cmp	r3, r0
 8017fae:	f4bf af57 	bcs.w	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017fb2:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8017fb6:	4283      	cmp	r3, r0
 8017fb8:	f43f af79 	beq.w	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017fbc:	e7ac      	b.n	8017f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017fbe:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8017fc2:	e7f8      	b.n	8017fb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8017fc4:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8017fc8:	4283      	cmp	r3, r0
 8017fca:	d802      	bhi.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8017fcc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8017fd0:	e798      	b.n	8017f04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8017fd2:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8017fd6:	4283      	cmp	r3, r0
 8017fd8:	f47f af42 	bne.w	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017fdc:	e767      	b.n	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017fde:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8017fe2:	4283      	cmp	r3, r0
 8017fe4:	f43f af63 	beq.w	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017fe8:	d802      	bhi.n	8017ff0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8017fea:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8017fee:	e7f2      	b.n	8017fd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8017ff0:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8017ff4:	4283      	cmp	r3, r0
 8017ff6:	d805      	bhi.n	8018004 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8017ff8:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8017ffc:	4283      	cmp	r3, r0
 8017ffe:	f4ff af2f 	bcc.w	8017e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018002:	e754      	b.n	8017eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018004:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018008:	4283      	cmp	r3, r0
 801800a:	e7af      	b.n	8017f6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801800c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8018010:	4617      	mov	r7, r2
 8018012:	f102 0808 	add.w	r8, r2, #8
 8018016:	4666      	mov	r6, ip
 8018018:	6838      	ldr	r0, [r7, #0]
 801801a:	6879      	ldr	r1, [r7, #4]
 801801c:	46e6      	mov	lr, ip
 801801e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018022:	3708      	adds	r7, #8
 8018024:	4547      	cmp	r7, r8
 8018026:	46f4      	mov	ip, lr
 8018028:	d1f6      	bne.n	8018018 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801802a:	6838      	ldr	r0, [r7, #0]
 801802c:	f8ce 0000 	str.w	r0, [lr]
 8018030:	88b9      	ldrh	r1, [r7, #4]
 8018032:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018036:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801803a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801803e:	d009      	beq.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 8018040:	7b51      	ldrb	r1, [r2, #13]
 8018042:	7992      	ldrb	r2, [r2, #6]
 8018044:	0149      	lsls	r1, r1, #5
 8018046:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801804a:	4311      	orrs	r1, r2
 801804c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018050:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8018054:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018058:	d00d      	beq.n	8018076 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 801805a:	442b      	add	r3, r5
 801805c:	b29b      	uxth	r3, r3
 801805e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8018062:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8018066:	10db      	asrs	r3, r3, #3
 8018068:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801806c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018070:	4313      	orrs	r3, r2
 8018072:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8018076:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801807a:	00cb      	lsls	r3, r1, #3
 801807c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018080:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018084:	064f      	lsls	r7, r1, #25
 8018086:	ea43 0302 	orr.w	r3, r3, r2
 801808a:	bf44      	itt	mi
 801808c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018090:	b21b      	sxthmi	r3, r3
 8018092:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018096:	1b5d      	subs	r5, r3, r5
 8018098:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801809c:	4632      	mov	r2, r6
 801809e:	e6fb      	b.n	8017e98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80180a0:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80180a4:	4694      	mov	ip, r2
 80180a6:	f102 0908 	add.w	r9, r2, #8
 80180aa:	4676      	mov	r6, lr
 80180ac:	f8dc 0000 	ldr.w	r0, [ip]
 80180b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80180b4:	46f0      	mov	r8, lr
 80180b6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80180ba:	f10c 0c08 	add.w	ip, ip, #8
 80180be:	45cc      	cmp	ip, r9
 80180c0:	46c6      	mov	lr, r8
 80180c2:	d1f3      	bne.n	80180ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 80180c4:	f8dc 0000 	ldr.w	r0, [ip]
 80180c8:	f8c8 0000 	str.w	r0, [r8]
 80180cc:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80180d0:	f8a8 1004 	strh.w	r1, [r8, #4]
 80180d4:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 80180d8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80180dc:	d009      	beq.n	80180f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 80180de:	7b51      	ldrb	r1, [r2, #13]
 80180e0:	7992      	ldrb	r2, [r2, #6]
 80180e2:	0149      	lsls	r1, r1, #5
 80180e4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80180e8:	4311      	orrs	r1, r2
 80180ea:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80180ee:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 80180f2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80180f6:	d00d      	beq.n	8018114 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80180f8:	1bdb      	subs	r3, r3, r7
 80180fa:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 80180fe:	b29b      	uxth	r3, r3
 8018100:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8018104:	10db      	asrs	r3, r3, #3
 8018106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801810a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801810e:	4313      	orrs	r3, r2
 8018110:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8018114:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8018118:	00cb      	lsls	r3, r1, #3
 801811a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801811e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018122:	0648      	lsls	r0, r1, #25
 8018124:	ea43 0302 	orr.w	r3, r3, r2
 8018128:	bf44      	itt	mi
 801812a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801812e:	b21b      	sxthmi	r3, r3
 8018130:	e7b1      	b.n	8018096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

08018134 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018138:	461e      	mov	r6, r3
 801813a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801813c:	4604      	mov	r4, r0
 801813e:	4617      	mov	r7, r2
 8018140:	b92b      	cbnz	r3, 801814e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8018142:	4b25      	ldr	r3, [pc, #148]	; (80181d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8018144:	4a25      	ldr	r2, [pc, #148]	; (80181dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8018146:	4826      	ldr	r0, [pc, #152]	; (80181e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8018148:	21c0      	movs	r1, #192	; 0xc0
 801814a:	f00c ffb3 	bl	80250b4 <__assert_func>
 801814e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018150:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018154:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8018158:	f7f8 f826 	bl	80101a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801815c:	4605      	mov	r5, r0
 801815e:	b918      	cbnz	r0, 8018168 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8018160:	6030      	str	r0, [r6, #0]
 8018162:	4628      	mov	r0, r5
 8018164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018168:	683b      	ldr	r3, [r7, #0]
 801816a:	4601      	mov	r1, r0
 801816c:	68db      	ldr	r3, [r3, #12]
 801816e:	4638      	mov	r0, r7
 8018170:	4798      	blx	r3
 8018172:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801817a:	4602      	mov	r2, r0
 801817c:	6030      	str	r0, [r6, #0]
 801817e:	d213      	bcs.n	80181a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8018180:	4643      	mov	r3, r8
 8018182:	4639      	mov	r1, r7
 8018184:	4620      	mov	r0, r4
 8018186:	f7ff fe33 	bl	8017df0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801818a:	6030      	str	r0, [r6, #0]
 801818c:	6833      	ldr	r3, [r6, #0]
 801818e:	b143      	cbz	r3, 80181a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8018190:	7b5a      	ldrb	r2, [r3, #13]
 8018192:	7a9b      	ldrb	r3, [r3, #10]
 8018194:	0052      	lsls	r2, r2, #1
 8018196:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801819a:	4313      	orrs	r3, r2
 801819c:	bf0c      	ite	eq
 801819e:	2301      	moveq	r3, #1
 80181a0:	2300      	movne	r3, #0
 80181a2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80181a6:	e7dc      	b.n	8018162 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 80181a8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	2b7f      	cmp	r3, #127	; 0x7f
 80181b0:	d804      	bhi.n	80181bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 80181b2:	4639      	mov	r1, r7
 80181b4:	4620      	mov	r0, r4
 80181b6:	f7ff fd01 	bl	8017bbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80181ba:	e7e6      	b.n	801818a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80181bc:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d0e3      	beq.n	801818c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80181c4:	f640 1302 	movw	r3, #2306	; 0x902
 80181c8:	429d      	cmp	r5, r3
 80181ca:	d1df      	bne.n	801818c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80181cc:	4601      	mov	r1, r0
 80181ce:	4620      	mov	r0, r4
 80181d0:	f7ff fcc5 	bl	8017b5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80181d4:	e7d9      	b.n	801818a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80181d6:	bf00      	nop
 80181d8:	0802a0a8 	.word	0x0802a0a8
 80181dc:	0802a31a 	.word	0x0802a31a
 80181e0:	0802a0b1 	.word	0x0802a0b1

080181e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80181e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181e8:	461e      	mov	r6, r3
 80181ea:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80181ec:	4604      	mov	r4, r0
 80181ee:	4617      	mov	r7, r2
 80181f0:	b92b      	cbnz	r3, 80181fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 80181f2:	4b26      	ldr	r3, [pc, #152]	; (801828c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 80181f4:	4a26      	ldr	r2, [pc, #152]	; (8018290 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 80181f6:	4827      	ldr	r0, [pc, #156]	; (8018294 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 80181f8:	21c0      	movs	r1, #192	; 0xc0
 80181fa:	f00c ff5b 	bl	80250b4 <__assert_func>
 80181fe:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018200:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018204:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8018208:	f7f7 ffce 	bl	80101a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801820c:	4605      	mov	r5, r0
 801820e:	b918      	cbnz	r0, 8018218 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8018210:	6030      	str	r0, [r6, #0]
 8018212:	4628      	mov	r0, r5
 8018214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018218:	683b      	ldr	r3, [r7, #0]
 801821a:	4601      	mov	r1, r0
 801821c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018220:	4638      	mov	r0, r7
 8018222:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018226:	47c8      	blx	r9
 8018228:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801822c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018230:	4602      	mov	r2, r0
 8018232:	6030      	str	r0, [r6, #0]
 8018234:	d213      	bcs.n	801825e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8018236:	4643      	mov	r3, r8
 8018238:	4639      	mov	r1, r7
 801823a:	4620      	mov	r0, r4
 801823c:	f7ff fdd8 	bl	8017df0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018240:	6030      	str	r0, [r6, #0]
 8018242:	6833      	ldr	r3, [r6, #0]
 8018244:	b143      	cbz	r3, 8018258 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8018246:	7b5a      	ldrb	r2, [r3, #13]
 8018248:	7a9b      	ldrb	r3, [r3, #10]
 801824a:	0052      	lsls	r2, r2, #1
 801824c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018250:	4313      	orrs	r3, r2
 8018252:	bf0c      	ite	eq
 8018254:	2301      	moveq	r3, #1
 8018256:	2300      	movne	r3, #0
 8018258:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801825c:	e7d9      	b.n	8018212 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801825e:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018262:	b29b      	uxth	r3, r3
 8018264:	2b7f      	cmp	r3, #127	; 0x7f
 8018266:	d804      	bhi.n	8018272 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8018268:	4639      	mov	r1, r7
 801826a:	4620      	mov	r0, r4
 801826c:	f7ff fca6 	bl	8017bbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018270:	e7e6      	b.n	8018240 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8018272:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8018276:	2b00      	cmp	r3, #0
 8018278:	d0e3      	beq.n	8018242 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801827a:	f640 1302 	movw	r3, #2306	; 0x902
 801827e:	429d      	cmp	r5, r3
 8018280:	d1df      	bne.n	8018242 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8018282:	4601      	mov	r1, r0
 8018284:	4620      	mov	r0, r4
 8018286:	f7ff fc6a 	bl	8017b5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801828a:	e7d9      	b.n	8018240 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801828c:	0802a0a8 	.word	0x0802a0a8
 8018290:	0802a31a 	.word	0x0802a31a
 8018294:	0802a0b1 	.word	0x0802a0b1

08018298 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018298:	b510      	push	{r4, lr}
 801829a:	4604      	mov	r4, r0
 801829c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801829e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80182a0:	b9d9      	cbnz	r1, 80182da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 80182a2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80182a4:	2b0a      	cmp	r3, #10
 80182a6:	d036      	beq.n	8018316 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 80182a8:	4620      	mov	r0, r4
 80182aa:	f7ff fc21 	bl	8017af0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80182ae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80182b0:	2b09      	cmp	r3, #9
 80182b2:	d906      	bls.n	80182c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 80182b4:	4b18      	ldr	r3, [pc, #96]	; (8018318 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 80182b6:	4a19      	ldr	r2, [pc, #100]	; (801831c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80182b8:	4819      	ldr	r0, [pc, #100]	; (8018320 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80182ba:	f44f 7182 	mov.w	r1, #260	; 0x104
 80182be:	f00c fef9 	bl	80250b4 <__assert_func>
 80182c2:	1c5a      	adds	r2, r3, #1
 80182c4:	8622      	strh	r2, [r4, #48]	; 0x30
 80182c6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80182c8:	4413      	add	r3, r2
 80182ca:	b29b      	uxth	r3, r3
 80182cc:	2b09      	cmp	r3, #9
 80182ce:	bf88      	it	hi
 80182d0:	3b0a      	subhi	r3, #10
 80182d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80182d6:	8358      	strh	r0, [r3, #26]
 80182d8:	e7e3      	b.n	80182a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 80182da:	2b0a      	cmp	r3, #10
 80182dc:	d01b      	beq.n	8018316 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 80182de:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80182e0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80182e4:	3901      	subs	r1, #1
 80182e6:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 80182e8:	8721      	strh	r1, [r4, #56]	; 0x38
 80182ea:	1c51      	adds	r1, r2, #1
 80182ec:	b289      	uxth	r1, r1
 80182ee:	2901      	cmp	r1, #1
 80182f0:	bf8a      	itet	hi
 80182f2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80182f6:	86e1      	strhls	r1, [r4, #54]	; 0x36
 80182f8:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 80182fa:	2b09      	cmp	r3, #9
 80182fc:	d8da      	bhi.n	80182b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 80182fe:	1c5a      	adds	r2, r3, #1
 8018300:	8622      	strh	r2, [r4, #48]	; 0x30
 8018302:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8018304:	4413      	add	r3, r2
 8018306:	b29b      	uxth	r3, r3
 8018308:	2b09      	cmp	r3, #9
 801830a:	bf88      	it	hi
 801830c:	3b0a      	subhi	r3, #10
 801830e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018312:	8358      	strh	r0, [r3, #26]
 8018314:	e7c2      	b.n	801829c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018316:	bd10      	pop	{r4, pc}
 8018318:	0802a0dd 	.word	0x0802a0dd
 801831c:	0802a470 	.word	0x0802a470
 8018320:	0802a0b1 	.word	0x0802a0b1

08018324 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018324:	b538      	push	{r3, r4, r5, lr}
 8018326:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8018328:	4604      	mov	r4, r0
 801832a:	b92a      	cbnz	r2, 8018338 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801832c:	4b13      	ldr	r3, [pc, #76]	; (801837c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801832e:	4a14      	ldr	r2, [pc, #80]	; (8018380 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8018330:	4814      	ldr	r0, [pc, #80]	; (8018384 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8018332:	21d5      	movs	r1, #213	; 0xd5
 8018334:	f00c febe 	bl	80250b4 <__assert_func>
 8018338:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801833a:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801833e:	3a01      	subs	r2, #1
 8018340:	8b4d      	ldrh	r5, [r1, #26]
 8018342:	8602      	strh	r2, [r0, #48]	; 0x30
 8018344:	1c5a      	adds	r2, r3, #1
 8018346:	b292      	uxth	r2, r2
 8018348:	2a09      	cmp	r2, #9
 801834a:	bf86      	itte	hi
 801834c:	3b09      	subhi	r3, #9
 801834e:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8018350:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8018352:	f7ff ffa1 	bl	8018298 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018356:	8b23      	ldrh	r3, [r4, #24]
 8018358:	2b01      	cmp	r3, #1
 801835a:	bf9c      	itt	ls
 801835c:	3301      	addls	r3, #1
 801835e:	8323      	strhls	r3, [r4, #24]
 8018360:	8ae3      	ldrh	r3, [r4, #22]
 8018362:	b90b      	cbnz	r3, 8018368 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8018364:	2302      	movs	r3, #2
 8018366:	82e3      	strh	r3, [r4, #22]
 8018368:	8ae3      	ldrh	r3, [r4, #22]
 801836a:	3b01      	subs	r3, #1
 801836c:	b29b      	uxth	r3, r3
 801836e:	82e3      	strh	r3, [r4, #22]
 8018370:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018374:	4628      	mov	r0, r5
 8018376:	8265      	strh	r5, [r4, #18]
 8018378:	bd38      	pop	{r3, r4, r5, pc}
 801837a:	bf00      	nop
 801837c:	0802a0a8 	.word	0x0802a0a8
 8018380:	0802a3c5 	.word	0x0802a3c5
 8018384:	0802a0b1 	.word	0x0802a0b1

08018388 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018388:	b538      	push	{r3, r4, r5, lr}
 801838a:	428a      	cmp	r2, r1
 801838c:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801838e:	d90c      	bls.n	80183aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8018390:	b92c      	cbnz	r4, 801839e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8018392:	4b1c      	ldr	r3, [pc, #112]	; (8018404 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8018394:	4a1c      	ldr	r2, [pc, #112]	; (8018408 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8018396:	21e1      	movs	r1, #225	; 0xe1
 8018398:	481c      	ldr	r0, [pc, #112]	; (801840c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801839a:	f00c fe8b 	bl	80250b4 <__assert_func>
 801839e:	3c01      	subs	r4, #1
 80183a0:	8604      	strh	r4, [r0, #48]	; 0x30
 80183a2:	4b1b      	ldr	r3, [pc, #108]	; (8018410 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 80183a4:	4a1b      	ldr	r2, [pc, #108]	; (8018414 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 80183a6:	21c5      	movs	r1, #197	; 0xc5
 80183a8:	e7f6      	b.n	8018398 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80183aa:	428c      	cmp	r4, r1
 80183ac:	d203      	bcs.n	80183b6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80183ae:	4b1a      	ldr	r3, [pc, #104]	; (8018418 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80183b0:	4a1a      	ldr	r2, [pc, #104]	; (801841c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80183b2:	21cb      	movs	r1, #203	; 0xcb
 80183b4:	e7f0      	b.n	8018398 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80183b6:	1a64      	subs	r4, r4, r1
 80183b8:	8604      	strh	r4, [r0, #48]	; 0x30
 80183ba:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80183bc:	4421      	add	r1, r4
 80183be:	b289      	uxth	r1, r1
 80183c0:	2909      	cmp	r1, #9
 80183c2:	bf88      	it	hi
 80183c4:	390a      	subhi	r1, #10
 80183c6:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80183c8:	250a      	movs	r5, #10
 80183ca:	b1ba      	cbz	r2, 80183fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80183cc:	3a01      	subs	r2, #1
 80183ce:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 80183d0:	b292      	uxth	r2, r2
 80183d2:	2909      	cmp	r1, #9
 80183d4:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80183d8:	d903      	bls.n	80183e2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 80183da:	4b11      	ldr	r3, [pc, #68]	; (8018420 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 80183dc:	4a11      	ldr	r2, [pc, #68]	; (8018424 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 80183de:	21e6      	movs	r1, #230	; 0xe6
 80183e0:	e7da      	b.n	8018398 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80183e2:	3101      	adds	r1, #1
 80183e4:	8601      	strh	r1, [r0, #48]	; 0x30
 80183e6:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 80183e8:	b901      	cbnz	r1, 80183ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 80183ea:	85c5      	strh	r5, [r0, #46]	; 0x2e
 80183ec:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 80183ee:	3901      	subs	r1, #1
 80183f0:	b289      	uxth	r1, r1
 80183f2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80183f4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80183f8:	834c      	strh	r4, [r1, #26]
 80183fa:	e7e6      	b.n	80183ca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 80183fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018400:	f7ff bf4a 	b.w	8018298 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018404:	0802a0a8 	.word	0x0802a0a8
 8018408:	0802a19e 	.word	0x0802a19e
 801840c:	0802a0b1 	.word	0x0802a0b1
 8018410:	0802a0e9 	.word	0x0802a0e9
 8018414:	0802a248 	.word	0x0802a248
 8018418:	0802a0f7 	.word	0x0802a0f7
 801841c:	0802a51f 	.word	0x0802a51f
 8018420:	0802a103 	.word	0x0802a103
 8018424:	0802a116 	.word	0x0802a116

08018428 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018428:	3a01      	subs	r2, #1
 801842a:	b570      	push	{r4, r5, r6, lr}
 801842c:	b292      	uxth	r2, r2
 801842e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8018432:	42b2      	cmp	r2, r6
 8018434:	d019      	beq.n	801846a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8018436:	8b04      	ldrh	r4, [r0, #24]
 8018438:	f831 5b02 	ldrh.w	r5, [r1], #2
 801843c:	4294      	cmp	r4, r2
 801843e:	d805      	bhi.n	801844c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8018440:	4b19      	ldr	r3, [pc, #100]	; (80184a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8018442:	4a1a      	ldr	r2, [pc, #104]	; (80184ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8018444:	481a      	ldr	r0, [pc, #104]	; (80184b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8018446:	21c5      	movs	r1, #197	; 0xc5
 8018448:	f00c fe34 	bl	80250b4 <__assert_func>
 801844c:	8ac4      	ldrh	r4, [r0, #22]
 801844e:	4414      	add	r4, r2
 8018450:	b2a4      	uxth	r4, r4
 8018452:	2c01      	cmp	r4, #1
 8018454:	bf88      	it	hi
 8018456:	3c02      	subhi	r4, #2
 8018458:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801845c:	3a01      	subs	r2, #1
 801845e:	8a64      	ldrh	r4, [r4, #18]
 8018460:	42ac      	cmp	r4, r5
 8018462:	b292      	uxth	r2, r2
 8018464:	d0e5      	beq.n	8018432 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8018466:	2000      	movs	r0, #0
 8018468:	bd70      	pop	{r4, r5, r6, pc}
 801846a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801846e:	2400      	movs	r4, #0
 8018470:	4413      	add	r3, r2
 8018472:	b2a2      	uxth	r2, r4
 8018474:	429a      	cmp	r2, r3
 8018476:	da14      	bge.n	80184a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8018478:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801847a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801847e:	4296      	cmp	r6, r2
 8018480:	d802      	bhi.n	8018488 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8018482:	4b09      	ldr	r3, [pc, #36]	; (80184a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8018484:	4a0b      	ldr	r2, [pc, #44]	; (80184b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8018486:	e7dd      	b.n	8018444 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8018488:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801848a:	4432      	add	r2, r6
 801848c:	b292      	uxth	r2, r2
 801848e:	2a09      	cmp	r2, #9
 8018490:	bf88      	it	hi
 8018492:	3a0a      	subhi	r2, #10
 8018494:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018498:	3401      	adds	r4, #1
 801849a:	8b52      	ldrh	r2, [r2, #26]
 801849c:	42aa      	cmp	r2, r5
 801849e:	d0e8      	beq.n	8018472 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80184a0:	e7e1      	b.n	8018466 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80184a2:	2001      	movs	r0, #1
 80184a4:	e7e0      	b.n	8018468 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80184a6:	bf00      	nop
 80184a8:	0802a0e9 	.word	0x0802a0e9
 80184ac:	0802a5a3 	.word	0x0802a5a3
 80184b0:	0802a0b1 	.word	0x0802a0b1
 80184b4:	0802a248 	.word	0x0802a248

080184b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80184b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184bc:	4605      	mov	r5, r0
 80184be:	4616      	mov	r6, r2
 80184c0:	1c8c      	adds	r4, r1, #2
 80184c2:	8809      	ldrh	r1, [r1, #0]
 80184c4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80184c8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80184cc:	42b3      	cmp	r3, r6
 80184ce:	d124      	bne.n	801851a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80184d0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80184d4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80184d8:	f001 070f 	and.w	r7, r1, #15
 80184dc:	f8cd 8000 	str.w	r8, [sp]
 80184e0:	464b      	mov	r3, r9
 80184e2:	4652      	mov	r2, sl
 80184e4:	4621      	mov	r1, r4
 80184e6:	4628      	mov	r0, r5
 80184e8:	f7ff ff9e 	bl	8018428 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80184ec:	4683      	mov	fp, r0
 80184ee:	b168      	cbz	r0, 801850c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80184f0:	eb0a 0109 	add.w	r1, sl, r9
 80184f4:	4441      	add	r1, r8
 80184f6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80184fa:	463a      	mov	r2, r7
 80184fc:	4649      	mov	r1, r9
 80184fe:	4628      	mov	r0, r5
 8018500:	f7ff ff42 	bl	8018388 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018504:	4658      	mov	r0, fp
 8018506:	b003      	add	sp, #12
 8018508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801850c:	eb07 010a 	add.w	r1, r7, sl
 8018510:	4449      	add	r1, r9
 8018512:	4441      	add	r1, r8
 8018514:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018518:	e7d2      	b.n	80184c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801851a:	f04f 0b00 	mov.w	fp, #0
 801851e:	e7f1      	b.n	8018504 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018520 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018520:	b570      	push	{r4, r5, r6, lr}
 8018522:	8810      	ldrh	r0, [r2, #0]
 8018524:	4298      	cmp	r0, r3
 8018526:	d817      	bhi.n	8018558 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018528:	1e48      	subs	r0, r1, #1
 801852a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801852e:	4298      	cmp	r0, r3
 8018530:	d312      	bcc.n	8018558 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018532:	2400      	movs	r4, #0
 8018534:	428c      	cmp	r4, r1
 8018536:	d20f      	bcs.n	8018558 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018538:	1860      	adds	r0, r4, r1
 801853a:	1040      	asrs	r0, r0, #1
 801853c:	0085      	lsls	r5, r0, #2
 801853e:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018542:	42b3      	cmp	r3, r6
 8018544:	d902      	bls.n	801854c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8018546:	3001      	adds	r0, #1
 8018548:	b284      	uxth	r4, r0
 801854a:	e7f3      	b.n	8018534 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801854c:	d201      	bcs.n	8018552 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801854e:	b281      	uxth	r1, r0
 8018550:	e7f0      	b.n	8018534 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018552:	442a      	add	r2, r5
 8018554:	8850      	ldrh	r0, [r2, #2]
 8018556:	bd70      	pop	{r4, r5, r6, pc}
 8018558:	2000      	movs	r0, #0
 801855a:	e7fc      	b.n	8018556 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801855c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018560:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8018562:	886f      	ldrh	r7, [r5, #2]
 8018564:	4604      	mov	r4, r0
 8018566:	087f      	lsrs	r7, r7, #1
 8018568:	260b      	movs	r6, #11
 801856a:	3e01      	subs	r6, #1
 801856c:	d01b      	beq.n	80185a6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801856e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018570:	b92b      	cbnz	r3, 801857e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8018572:	4b0e      	ldr	r3, [pc, #56]	; (80185ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8018574:	4a0e      	ldr	r2, [pc, #56]	; (80185b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8018576:	480f      	ldr	r0, [pc, #60]	; (80185b4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8018578:	21c0      	movs	r1, #192	; 0xc0
 801857a:	f00c fd9b 	bl	80250b4 <__assert_func>
 801857e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8018580:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018584:	462a      	mov	r2, r5
 8018586:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801858a:	4639      	mov	r1, r7
 801858c:	4643      	mov	r3, r8
 801858e:	4620      	mov	r0, r4
 8018590:	f7ff ffc6 	bl	8018520 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018594:	b138      	cbz	r0, 80185a6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8018596:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801859a:	4642      	mov	r2, r8
 801859c:	4620      	mov	r0, r4
 801859e:	f7ff ff8b 	bl	80184b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80185a2:	2800      	cmp	r0, #0
 80185a4:	d1e1      	bne.n	801856a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80185a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185aa:	bf00      	nop
 80185ac:	0802a0a8 	.word	0x0802a0a8
 80185b0:	0802a31a 	.word	0x0802a31a
 80185b4:	0802a0b1 	.word	0x0802a0b1

080185b8 <_ZN8touchgfx8ceil28_4El>:
 80185b8:	f110 030f 	adds.w	r3, r0, #15
 80185bc:	d401      	bmi.n	80185c2 <_ZN8touchgfx8ceil28_4El+0xa>
 80185be:	1118      	asrs	r0, r3, #4
 80185c0:	4770      	bx	lr
 80185c2:	f1c0 0001 	rsb	r0, r0, #1
 80185c6:	f010 000f 	ands.w	r0, r0, #15
 80185ca:	bf18      	it	ne
 80185cc:	2001      	movne	r0, #1
 80185ce:	2210      	movs	r2, #16
 80185d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80185d4:	1a18      	subs	r0, r3, r0
 80185d6:	4770      	bx	lr

080185d8 <_ZN8touchgfx11floorDivModEllRlS0_>:
 80185d8:	2900      	cmp	r1, #0
 80185da:	b538      	push	{r3, r4, r5, lr}
 80185dc:	dc05      	bgt.n	80185ea <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 80185de:	4b0f      	ldr	r3, [pc, #60]	; (801861c <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 80185e0:	4a0f      	ldr	r2, [pc, #60]	; (8018620 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 80185e2:	4810      	ldr	r0, [pc, #64]	; (8018624 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 80185e4:	21fa      	movs	r1, #250	; 0xfa
 80185e6:	f00c fd65 	bl	80250b4 <__assert_func>
 80185ea:	2800      	cmp	r0, #0
 80185ec:	db06      	blt.n	80185fc <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 80185ee:	fb90 f4f1 	sdiv	r4, r0, r1
 80185f2:	6014      	str	r4, [r2, #0]
 80185f4:	fb01 0114 	mls	r1, r1, r4, r0
 80185f8:	6019      	str	r1, [r3, #0]
 80185fa:	bd38      	pop	{r3, r4, r5, pc}
 80185fc:	4240      	negs	r0, r0
 80185fe:	fb90 f4f1 	sdiv	r4, r0, r1
 8018602:	4265      	negs	r5, r4
 8018604:	fb01 0014 	mls	r0, r1, r4, r0
 8018608:	6015      	str	r5, [r2, #0]
 801860a:	6018      	str	r0, [r3, #0]
 801860c:	2800      	cmp	r0, #0
 801860e:	d0f4      	beq.n	80185fa <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8018610:	6810      	ldr	r0, [r2, #0]
 8018612:	3801      	subs	r0, #1
 8018614:	6010      	str	r0, [r2, #0]
 8018616:	6818      	ldr	r0, [r3, #0]
 8018618:	1a09      	subs	r1, r1, r0
 801861a:	e7ed      	b.n	80185f8 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801861c:	0802a674 	.word	0x0802a674
 8018620:	0802a6b3 	.word	0x0802a6b3
 8018624:	0802a684 	.word	0x0802a684

08018628 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8018628:	b570      	push	{r4, r5, r6, lr}
 801862a:	694a      	ldr	r2, [r1, #20]
 801862c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801862e:	684b      	ldr	r3, [r1, #4]
 8018630:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8018632:	1b54      	subs	r4, r2, r5
 8018634:	f000 8106 	beq.w	8018844 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8018638:	1b9b      	subs	r3, r3, r6
 801863a:	d003      	beq.n	8018644 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801863c:	4363      	muls	r3, r4
 801863e:	2210      	movs	r2, #16
 8018640:	fb93 f3f2 	sdiv	r3, r3, r2
 8018644:	680c      	ldr	r4, [r1, #0]
 8018646:	698a      	ldr	r2, [r1, #24]
 8018648:	1b65      	subs	r5, r4, r5
 801864a:	f000 80fd 	beq.w	8018848 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801864e:	1b92      	subs	r2, r2, r6
 8018650:	d003      	beq.n	801865a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018652:	436a      	muls	r2, r5
 8018654:	2410      	movs	r4, #16
 8018656:	fb92 f2f4 	sdiv	r2, r2, r4
 801865a:	1a9b      	subs	r3, r3, r2
 801865c:	ee07 3a90 	vmov	s15, r3
 8018660:	ed9f 4a88 	vldr	s8, [pc, #544]	; 8018884 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8018664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801866c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018670:	460a      	mov	r2, r1
 8018672:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8018676:	4603      	mov	r3, r0
 8018678:	f100 040c 	add.w	r4, r0, #12
 801867c:	eeb1 6a43 	vneg.f32	s12, s6
 8018680:	edd2 7a02 	vldr	s15, [r2, #8]
 8018684:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018688:	3214      	adds	r2, #20
 801868a:	ece3 6a01 	vstmia	r3!, {s13}
 801868e:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018692:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018696:	429c      	cmp	r4, r3
 8018698:	edc3 7a02 	vstr	s15, [r3, #8]
 801869c:	ed52 7a01 	vldr	s15, [r2, #-4]
 80186a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80186a4:	edc3 7a05 	vstr	s15, [r3, #20]
 80186a8:	d1ea      	bne.n	8018680 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80186aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80186ac:	698b      	ldr	r3, [r1, #24]
 80186ae:	edd0 4a02 	vldr	s9, [r0, #8]
 80186b2:	edd0 3a00 	vldr	s7, [r0]
 80186b6:	edd0 6a01 	vldr	s13, [r0, #4]
 80186ba:	ed90 5a05 	vldr	s10, [r0, #20]
 80186be:	ed90 2a03 	vldr	s4, [r0, #12]
 80186c2:	edd0 5a04 	vldr	s11, [r0, #16]
 80186c6:	ed90 1a07 	vldr	s2, [r0, #28]
 80186ca:	edd0 2a06 	vldr	s5, [r0, #24]
 80186ce:	1a9b      	subs	r3, r3, r2
 80186d0:	ee07 3a90 	vmov	s15, r3
 80186d4:	684b      	ldr	r3, [r1, #4]
 80186d6:	1a9b      	subs	r3, r3, r2
 80186d8:	ee07 3a10 	vmov	s14, r3
 80186dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186e0:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80186e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80186e8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80186ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80186f0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80186f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80186f8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80186fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018700:	ee32 5a45 	vsub.f32	s10, s4, s10
 8018704:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018708:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801870c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801870e:	694a      	ldr	r2, [r1, #20]
 8018710:	1b13      	subs	r3, r2, r4
 8018712:	ee07 3a10 	vmov	s14, r3
 8018716:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801871a:	680b      	ldr	r3, [r1, #0]
 801871c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018720:	1b1b      	subs	r3, r3, r4
 8018722:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8018726:	ee07 3a10 	vmov	s14, r3
 801872a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801872e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018732:	eee6 4a87 	vfma.f32	s9, s13, s14
 8018736:	ee64 4a86 	vmul.f32	s9, s9, s12
 801873a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801873e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018740:	698b      	ldr	r3, [r1, #24]
 8018742:	1a9b      	subs	r3, r3, r2
 8018744:	ee06 3a90 	vmov	s13, r3
 8018748:	684b      	ldr	r3, [r1, #4]
 801874a:	1a9b      	subs	r3, r3, r2
 801874c:	ee07 3a10 	vmov	s14, r3
 8018750:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018754:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018758:	ee66 6a84 	vmul.f32	s13, s13, s8
 801875c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018760:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018764:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018768:	ee66 6a83 	vmul.f32	s13, s13, s6
 801876c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8018770:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018772:	694a      	ldr	r2, [r1, #20]
 8018774:	1b13      	subs	r3, r2, r4
 8018776:	ee07 3a10 	vmov	s14, r3
 801877a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801877e:	680b      	ldr	r3, [r1, #0]
 8018780:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018784:	1b1b      	subs	r3, r3, r4
 8018786:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801878a:	ee07 3a10 	vmov	s14, r3
 801878e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018792:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018796:	eea5 5a87 	vfma.f32	s10, s11, s14
 801879a:	edd0 5a08 	vldr	s11, [r0, #32]
 801879e:	ee25 5a06 	vmul.f32	s10, s10, s12
 80187a2:	ee31 1a65 	vsub.f32	s2, s2, s11
 80187a6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80187aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80187ac:	698b      	ldr	r3, [r1, #24]
 80187ae:	1a9b      	subs	r3, r3, r2
 80187b0:	ee07 3a10 	vmov	s14, r3
 80187b4:	684b      	ldr	r3, [r1, #4]
 80187b6:	1a9b      	subs	r3, r3, r2
 80187b8:	ee01 3a90 	vmov	s3, r3
 80187bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187c0:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80187c4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80187c8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80187cc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80187d0:	ee61 1a84 	vmul.f32	s3, s3, s8
 80187d4:	eea1 7a21 	vfma.f32	s14, s2, s3
 80187d8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80187dc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80187e0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80187e2:	694a      	ldr	r2, [r1, #20]
 80187e4:	1b13      	subs	r3, r2, r4
 80187e6:	ee03 3a10 	vmov	s6, r3
 80187ea:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80187ee:	680b      	ldr	r3, [r1, #0]
 80187f0:	ee23 3a04 	vmul.f32	s6, s6, s8
 80187f4:	1b1b      	subs	r3, r3, r4
 80187f6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80187fa:	ee03 3a10 	vmov	s6, r3
 80187fe:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018802:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018806:	eee1 5a04 	vfma.f32	s11, s2, s8
 801880a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801880e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018812:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018816:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801881a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018822:	dd13      	ble.n	801884c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018828:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801882c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801882e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801883a:	dd15      	ble.n	8018868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801883c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018840:	6403      	str	r3, [r0, #64]	; 0x40
 8018842:	bd70      	pop	{r4, r5, r6, pc}
 8018844:	4623      	mov	r3, r4
 8018846:	e6fd      	b.n	8018644 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018848:	462a      	mov	r2, r5
 801884a:	e706      	b.n	801865a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801884c:	d502      	bpl.n	8018854 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801884e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018852:	e7e9      	b.n	8018828 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018854:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018858:	eea3 2a85 	vfma.f32	s4, s7, s10
 801885c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018864:	dade      	bge.n	8018824 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018866:	e7f2      	b.n	801884e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018868:	d502      	bpl.n	8018870 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801886a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801886e:	e7e7      	b.n	8018840 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8018870:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018874:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018878:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801887c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018880:	dadc      	bge.n	801883c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018882:	e7f2      	b.n	801886a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018884:	3d800000 	.word	0x3d800000

08018888 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801888c:	f04f 0814 	mov.w	r8, #20
 8018890:	fb08 f903 	mul.w	r9, r8, r3
 8018894:	eb02 0a09 	add.w	sl, r2, r9
 8018898:	4604      	mov	r4, r0
 801889a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801889e:	4617      	mov	r7, r2
 80188a0:	460d      	mov	r5, r1
 80188a2:	461e      	mov	r6, r3
 80188a4:	f7ff fe88 	bl	80185b8 <_ZN8touchgfx8ceil28_4El>
 80188a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188aa:	6160      	str	r0, [r4, #20]
 80188ac:	fb08 f803 	mul.w	r8, r8, r3
 80188b0:	eb07 0b08 	add.w	fp, r7, r8
 80188b4:	9001      	str	r0, [sp, #4]
 80188b6:	f8db 0004 	ldr.w	r0, [fp, #4]
 80188ba:	f7ff fe7d 	bl	80185b8 <_ZN8touchgfx8ceil28_4El>
 80188be:	9a01      	ldr	r2, [sp, #4]
 80188c0:	1a80      	subs	r0, r0, r2
 80188c2:	61a0      	str	r0, [r4, #24]
 80188c4:	2800      	cmp	r0, #0
 80188c6:	f000 8088 	beq.w	80189da <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 80188ca:	f857 3009 	ldr.w	r3, [r7, r9]
 80188ce:	f857 c008 	ldr.w	ip, [r7, r8]
 80188d2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80188d6:	f8db 0004 	ldr.w	r0, [fp, #4]
 80188da:	ebac 0c03 	sub.w	ip, ip, r3
 80188de:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 80188e2:	fb0b f202 	mul.w	r2, fp, r2
 80188e6:	fb0c 2211 	mls	r2, ip, r1, r2
 80188ea:	1a40      	subs	r0, r0, r1
 80188ec:	ea4f 1800 	mov.w	r8, r0, lsl #4
 80188f0:	fb00 2003 	mla	r0, r0, r3, r2
 80188f4:	3801      	subs	r0, #1
 80188f6:	f104 0310 	add.w	r3, r4, #16
 80188fa:	4622      	mov	r2, r4
 80188fc:	4641      	mov	r1, r8
 80188fe:	4440      	add	r0, r8
 8018900:	f7ff fe6a 	bl	80185d8 <_ZN8touchgfx11floorDivModEllRlS0_>
 8018904:	f104 0308 	add.w	r3, r4, #8
 8018908:	1d22      	adds	r2, r4, #4
 801890a:	4641      	mov	r1, r8
 801890c:	4658      	mov	r0, fp
 801890e:	f7ff fe63 	bl	80185d8 <_ZN8touchgfx11floorDivModEllRlS0_>
 8018912:	f8c4 800c 	str.w	r8, [r4, #12]
 8018916:	f8da 3004 	ldr.w	r3, [sl, #4]
 801891a:	6962      	ldr	r2, [r4, #20]
 801891c:	eddf 6a31 	vldr	s13, [pc, #196]	; 80189e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018920:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8018924:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8018928:	ee07 3a10 	vmov	s14, r3
 801892c:	6822      	ldr	r2, [r4, #0]
 801892e:	f857 3009 	ldr.w	r3, [r7, r9]
 8018932:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8018936:	ee07 3a90 	vmov	s15, r3
 801893a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801893e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018942:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8018946:	ee27 7a26 	vmul.f32	s14, s14, s13
 801894a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801894e:	edd3 6a00 	vldr	s13, [r3]
 8018952:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018956:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801895a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801895e:	edc4 6a07 	vstr	s13, [r4, #28]
 8018962:	edd4 6a01 	vldr	s13, [r4, #4]
 8018966:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801896a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801896e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018972:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018976:	ed84 6a08 	vstr	s12, [r4, #32]
 801897a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801897c:	6262      	str	r2, [r4, #36]	; 0x24
 801897e:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8018982:	ed93 6a03 	vldr	s12, [r3, #12]
 8018986:	eea5 6a87 	vfma.f32	s12, s11, s14
 801898a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801898e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018992:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8018996:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801899a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801899e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80189a2:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 80189a6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80189a8:	6322      	str	r2, [r4, #48]	; 0x30
 80189aa:	ed93 6a06 	vldr	s12, [r3, #24]
 80189ae:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 80189b2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80189b6:	eeb0 7a46 	vmov.f32	s14, s12
 80189ba:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80189be:	eea6 7a27 	vfma.f32	s14, s12, s15
 80189c2:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80189c6:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80189ca:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80189ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80189d2:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80189d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80189d8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80189da:	4620      	mov	r0, r4
 80189dc:	b003      	add	sp, #12
 80189de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e2:	bf00      	nop
 80189e4:	3d800000 	.word	0x3d800000

080189e8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 80189e8:	4602      	mov	r2, r0
 80189ea:	b148      	cbz	r0, 8018a00 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80189ec:	2300      	movs	r3, #0
 80189ee:	b298      	uxth	r0, r3
 80189f0:	3301      	adds	r3, #1
 80189f2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80189f6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80189fa:	2900      	cmp	r1, #0
 80189fc:	d1f7      	bne.n	80189ee <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80189fe:	4770      	bx	lr
 8018a00:	4770      	bx	lr

08018a02 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8018a02:	b530      	push	{r4, r5, lr}
 8018a04:	4604      	mov	r4, r0
 8018a06:	b159      	cbz	r1, 8018a20 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018a08:	b148      	cbz	r0, 8018a1e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	b298      	uxth	r0, r3
 8018a0e:	4282      	cmp	r2, r0
 8018a10:	d905      	bls.n	8018a1e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018a12:	5ccd      	ldrb	r5, [r1, r3]
 8018a14:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018a18:	3301      	adds	r3, #1
 8018a1a:	2d00      	cmp	r5, #0
 8018a1c:	d1f6      	bne.n	8018a0c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018a1e:	bd30      	pop	{r4, r5, pc}
 8018a20:	4608      	mov	r0, r1
 8018a22:	e7fc      	b.n	8018a1e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018a24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8018a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a26:	b08b      	sub	sp, #44	; 0x2c
 8018a28:	468c      	mov	ip, r1
 8018a2a:	2100      	movs	r1, #0
 8018a2c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018a30:	ae01      	add	r6, sp, #4
 8018a32:	211f      	movs	r1, #31
 8018a34:	fbb0 f7f3 	udiv	r7, r0, r3
 8018a38:	fb03 0517 	mls	r5, r3, r7, r0
 8018a3c:	b2ec      	uxtb	r4, r5
 8018a3e:	2d09      	cmp	r5, #9
 8018a40:	bfd4      	ite	le
 8018a42:	3430      	addle	r4, #48	; 0x30
 8018a44:	3457      	addgt	r4, #87	; 0x57
 8018a46:	b2e4      	uxtb	r4, r4
 8018a48:	558c      	strb	r4, [r1, r6]
 8018a4a:	4638      	mov	r0, r7
 8018a4c:	1e4c      	subs	r4, r1, #1
 8018a4e:	b92f      	cbnz	r7, 8018a5c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8018a50:	4431      	add	r1, r6
 8018a52:	4660      	mov	r0, ip
 8018a54:	f7ff ffd5 	bl	8018a02 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018a58:	b00b      	add	sp, #44	; 0x2c
 8018a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a5c:	4621      	mov	r1, r4
 8018a5e:	e7e9      	b.n	8018a34 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08018a60 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a62:	4607      	mov	r7, r0
 8018a64:	b08b      	sub	sp, #44	; 0x2c
 8018a66:	4608      	mov	r0, r1
 8018a68:	b341      	cbz	r1, 8018abc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018a6a:	1e99      	subs	r1, r3, #2
 8018a6c:	2922      	cmp	r1, #34	; 0x22
 8018a6e:	d825      	bhi.n	8018abc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018a70:	2100      	movs	r1, #0
 8018a72:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018a76:	463c      	mov	r4, r7
 8018a78:	261f      	movs	r6, #31
 8018a7a:	f10d 0c04 	add.w	ip, sp, #4
 8018a7e:	fb94 fef3 	sdiv	lr, r4, r3
 8018a82:	fb03 441e 	mls	r4, r3, lr, r4
 8018a86:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018a8a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018a8e:	b2ec      	uxtb	r4, r5
 8018a90:	2d09      	cmp	r5, #9
 8018a92:	bfd4      	ite	le
 8018a94:	3430      	addle	r4, #48	; 0x30
 8018a96:	3457      	addgt	r4, #87	; 0x57
 8018a98:	b2e4      	uxtb	r4, r4
 8018a9a:	f80c 4006 	strb.w	r4, [ip, r6]
 8018a9e:	4674      	mov	r4, lr
 8018aa0:	1e71      	subs	r1, r6, #1
 8018aa2:	b96c      	cbnz	r4, 8018ac0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018aa4:	2f00      	cmp	r7, #0
 8018aa6:	da05      	bge.n	8018ab4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018aa8:	ab0a      	add	r3, sp, #40	; 0x28
 8018aaa:	4419      	add	r1, r3
 8018aac:	232d      	movs	r3, #45	; 0x2d
 8018aae:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018ab2:	1eb1      	subs	r1, r6, #2
 8018ab4:	3101      	adds	r1, #1
 8018ab6:	4461      	add	r1, ip
 8018ab8:	f7ff ffa3 	bl	8018a02 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018abc:	b00b      	add	sp, #44	; 0x2c
 8018abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ac0:	460e      	mov	r6, r1
 8018ac2:	e7dc      	b.n	8018a7e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08018ac4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8018ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac8:	4691      	mov	r9, r2
 8018aca:	b085      	sub	sp, #20
 8018acc:	6802      	ldr	r2, [r0, #0]
 8018ace:	9201      	str	r2, [sp, #4]
 8018ad0:	4688      	mov	r8, r1
 8018ad2:	4683      	mov	fp, r0
 8018ad4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8018ad8:	9103      	str	r1, [sp, #12]
 8018ada:	4610      	mov	r0, r2
 8018adc:	461c      	mov	r4, r3
 8018ade:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018ae2:	9302      	str	r3, [sp, #8]
 8018ae4:	f7ff ff80 	bl	80189e8 <_ZN8touchgfx7Unicode6strlenEPKt>
 8018ae8:	f1b8 0f00 	cmp.w	r8, #0
 8018aec:	bf0c      	ite	eq
 8018aee:	4684      	moveq	ip, r0
 8018af0:	f100 0c01 	addne.w	ip, r0, #1
 8018af4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8018af8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8018afc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018afe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018b00:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8018b04:	9903      	ldr	r1, [sp, #12]
 8018b06:	fa1f fc8c 	uxth.w	ip, ip
 8018b0a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018b0e:	d041      	beq.n	8018b94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018b10:	d834      	bhi.n	8018b7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8018b12:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8018b16:	d059      	beq.n	8018bcc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018b18:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8018b1c:	d03a      	beq.n	8018b94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018b1e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8018b22:	d034      	beq.n	8018b8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018b24:	2400      	movs	r4, #0
 8018b26:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018b2a:	3a01      	subs	r2, #1
 8018b2c:	b169      	cbz	r1, 8018b4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018b2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018b30:	458c      	cmp	ip, r1
 8018b32:	da09      	bge.n	8018b48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018b34:	eba1 010c 	sub.w	r1, r1, ip
 8018b38:	b289      	uxth	r1, r1
 8018b3a:	b933      	cbnz	r3, 8018b4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018b3c:	2e00      	cmp	r6, #0
 8018b3e:	d051      	beq.n	8018be4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018b40:	2800      	cmp	r0, #0
 8018b42:	d04f      	beq.n	8018be4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018b44:	440c      	add	r4, r1
 8018b46:	b2a4      	uxth	r4, r4
 8018b48:	2100      	movs	r1, #0
 8018b4a:	682b      	ldr	r3, [r5, #0]
 8018b4c:	4293      	cmp	r3, r2
 8018b4e:	da07      	bge.n	8018b60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018b50:	f1b8 0f00 	cmp.w	r8, #0
 8018b54:	d004      	beq.n	8018b60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018b56:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8018b5a:	682b      	ldr	r3, [r5, #0]
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	602b      	str	r3, [r5, #0]
 8018b60:	2730      	movs	r7, #48	; 0x30
 8018b62:	2c00      	cmp	r4, #0
 8018b64:	d04e      	beq.n	8018c04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018b66:	682e      	ldr	r6, [r5, #0]
 8018b68:	3c01      	subs	r4, #1
 8018b6a:	42b2      	cmp	r2, r6
 8018b6c:	b2a4      	uxth	r4, r4
 8018b6e:	dd49      	ble.n	8018c04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018b70:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018b74:	682b      	ldr	r3, [r5, #0]
 8018b76:	3301      	adds	r3, #1
 8018b78:	602b      	str	r3, [r5, #0]
 8018b7a:	e7f2      	b.n	8018b62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8018b7c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8018b80:	d01d      	beq.n	8018bbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8018b82:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8018b86:	d002      	beq.n	8018b8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018b88:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8018b8c:	e7c9      	b.n	8018b22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8018b8e:	4684      	mov	ip, r0
 8018b90:	f04f 0800 	mov.w	r8, #0
 8018b94:	2c00      	cmp	r4, #0
 8018b96:	d0c6      	beq.n	8018b26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018b98:	b947      	cbnz	r7, 8018bac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018b9a:	2801      	cmp	r0, #1
 8018b9c:	d106      	bne.n	8018bac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018b9e:	8814      	ldrh	r4, [r2, #0]
 8018ba0:	2c30      	cmp	r4, #48	; 0x30
 8018ba2:	bf02      	ittt	eq
 8018ba4:	3202      	addeq	r2, #2
 8018ba6:	f8cb 2000 	streq.w	r2, [fp]
 8018baa:	4638      	moveq	r0, r7
 8018bac:	45bc      	cmp	ip, r7
 8018bae:	da14      	bge.n	8018bda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8018bb0:	b2bf      	uxth	r7, r7
 8018bb2:	eba7 040c 	sub.w	r4, r7, ip
 8018bb6:	b2a4      	uxth	r4, r4
 8018bb8:	46bc      	mov	ip, r7
 8018bba:	2600      	movs	r6, #0
 8018bbc:	e7b3      	b.n	8018b26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018bbe:	4684      	mov	ip, r0
 8018bc0:	b16c      	cbz	r4, 8018bde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8018bc2:	42b8      	cmp	r0, r7
 8018bc4:	dd00      	ble.n	8018bc8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8018bc6:	b2b8      	uxth	r0, r7
 8018bc8:	2400      	movs	r4, #0
 8018bca:	e003      	b.n	8018bd4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8018bcc:	f04f 0c01 	mov.w	ip, #1
 8018bd0:	2400      	movs	r4, #0
 8018bd2:	4660      	mov	r0, ip
 8018bd4:	4626      	mov	r6, r4
 8018bd6:	46a0      	mov	r8, r4
 8018bd8:	e7a5      	b.n	8018b26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018bda:	2400      	movs	r4, #0
 8018bdc:	e7ed      	b.n	8018bba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8018bde:	4626      	mov	r6, r4
 8018be0:	46a0      	mov	r8, r4
 8018be2:	e7a0      	b.n	8018b26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018be4:	2900      	cmp	r1, #0
 8018be6:	d0b0      	beq.n	8018b4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018be8:	2720      	movs	r7, #32
 8018bea:	682e      	ldr	r6, [r5, #0]
 8018bec:	2900      	cmp	r1, #0
 8018bee:	d0ac      	beq.n	8018b4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018bf0:	3901      	subs	r1, #1
 8018bf2:	4296      	cmp	r6, r2
 8018bf4:	b289      	uxth	r1, r1
 8018bf6:	daa7      	bge.n	8018b48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018bf8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018bfc:	682b      	ldr	r3, [r5, #0]
 8018bfe:	3301      	adds	r3, #1
 8018c00:	602b      	str	r3, [r5, #0]
 8018c02:	e7f2      	b.n	8018bea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8018c04:	b188      	cbz	r0, 8018c2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018c06:	682b      	ldr	r3, [r5, #0]
 8018c08:	3801      	subs	r0, #1
 8018c0a:	429a      	cmp	r2, r3
 8018c0c:	b280      	uxth	r0, r0
 8018c0e:	dd0c      	ble.n	8018c2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018c10:	f8db 3000 	ldr.w	r3, [fp]
 8018c14:	1c9c      	adds	r4, r3, #2
 8018c16:	f8cb 4000 	str.w	r4, [fp]
 8018c1a:	881c      	ldrh	r4, [r3, #0]
 8018c1c:	682b      	ldr	r3, [r5, #0]
 8018c1e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8018c22:	682b      	ldr	r3, [r5, #0]
 8018c24:	3301      	adds	r3, #1
 8018c26:	602b      	str	r3, [r5, #0]
 8018c28:	e7ec      	b.n	8018c04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018c2a:	2620      	movs	r6, #32
 8018c2c:	b151      	cbz	r1, 8018c44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018c2e:	6828      	ldr	r0, [r5, #0]
 8018c30:	3901      	subs	r1, #1
 8018c32:	4282      	cmp	r2, r0
 8018c34:	b289      	uxth	r1, r1
 8018c36:	dd05      	ble.n	8018c44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018c38:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8018c3c:	682b      	ldr	r3, [r5, #0]
 8018c3e:	3301      	adds	r3, #1
 8018c40:	602b      	str	r3, [r5, #0]
 8018c42:	e7f3      	b.n	8018c2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018c44:	b005      	add	sp, #20
 8018c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8018c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c4e:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8018c52:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8018c56:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8018c5a:	2400      	movs	r4, #0
 8018c5c:	8014      	strh	r4, [r2, #0]
 8018c5e:	701c      	strb	r4, [r3, #0]
 8018c60:	f888 4000 	strb.w	r4, [r8]
 8018c64:	f88c 4000 	strb.w	r4, [ip]
 8018c68:	f88e 4000 	strb.w	r4, [lr]
 8018c6c:	703c      	strb	r4, [r7, #0]
 8018c6e:	6804      	ldr	r4, [r0, #0]
 8018c70:	b1a4      	cbz	r4, 8018c9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8018c72:	8824      	ldrh	r4, [r4, #0]
 8018c74:	f04f 0901 	mov.w	r9, #1
 8018c78:	b314      	cbz	r4, 8018cc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018c7a:	2c2b      	cmp	r4, #43	; 0x2b
 8018c7c:	d001      	beq.n	8018c82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8018c7e:	2c20      	cmp	r4, #32
 8018c80:	d110      	bne.n	8018ca4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8018c82:	8014      	strh	r4, [r2, #0]
 8018c84:	6804      	ldr	r4, [r0, #0]
 8018c86:	b10c      	cbz	r4, 8018c8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8018c88:	3402      	adds	r4, #2
 8018c8a:	6004      	str	r4, [r0, #0]
 8018c8c:	680c      	ldr	r4, [r1, #0]
 8018c8e:	b10c      	cbz	r4, 8018c94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8018c90:	3401      	adds	r4, #1
 8018c92:	600c      	str	r4, [r1, #0]
 8018c94:	6804      	ldr	r4, [r0, #0]
 8018c96:	b17c      	cbz	r4, 8018cb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8018c98:	8824      	ldrh	r4, [r4, #0]
 8018c9a:	e7ed      	b.n	8018c78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018c9c:	680c      	ldr	r4, [r1, #0]
 8018c9e:	b17c      	cbz	r4, 8018cc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018ca0:	7824      	ldrb	r4, [r4, #0]
 8018ca2:	e7e7      	b.n	8018c74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8018ca4:	2c2d      	cmp	r4, #45	; 0x2d
 8018ca6:	d102      	bne.n	8018cae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8018ca8:	f883 9000 	strb.w	r9, [r3]
 8018cac:	e7ea      	b.n	8018c84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018cae:	2c23      	cmp	r4, #35	; 0x23
 8018cb0:	d107      	bne.n	8018cc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8018cb2:	f888 9000 	strb.w	r9, [r8]
 8018cb6:	e7e5      	b.n	8018c84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018cb8:	680c      	ldr	r4, [r1, #0]
 8018cba:	b10c      	cbz	r4, 8018cc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018cbc:	7824      	ldrb	r4, [r4, #0]
 8018cbe:	e7db      	b.n	8018c78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018cc0:	2400      	movs	r4, #0
 8018cc2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018cc6:	2b09      	cmp	r3, #9
 8018cc8:	d901      	bls.n	8018cce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8018cca:	2c2a      	cmp	r4, #42	; 0x2a
 8018ccc:	d122      	bne.n	8018d14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018cce:	2301      	movs	r3, #1
 8018cd0:	2c30      	cmp	r4, #48	; 0x30
 8018cd2:	f88e 3000 	strb.w	r3, [lr]
 8018cd6:	d10d      	bne.n	8018cf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018cd8:	f88c 3000 	strb.w	r3, [ip]
 8018cdc:	6803      	ldr	r3, [r0, #0]
 8018cde:	b10b      	cbz	r3, 8018ce4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8018ce0:	3302      	adds	r3, #2
 8018ce2:	6003      	str	r3, [r0, #0]
 8018ce4:	680b      	ldr	r3, [r1, #0]
 8018ce6:	b10b      	cbz	r3, 8018cec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018ce8:	3301      	adds	r3, #1
 8018cea:	600b      	str	r3, [r1, #0]
 8018cec:	6803      	ldr	r3, [r0, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d02f      	beq.n	8018d52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8018cf2:	881c      	ldrh	r4, [r3, #0]
 8018cf4:	2c2a      	cmp	r4, #42	; 0x2a
 8018cf6:	d135      	bne.n	8018d64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8018cfc:	6033      	str	r3, [r6, #0]
 8018cfe:	6803      	ldr	r3, [r0, #0]
 8018d00:	b10b      	cbz	r3, 8018d06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8018d02:	3302      	adds	r3, #2
 8018d04:	6003      	str	r3, [r0, #0]
 8018d06:	680b      	ldr	r3, [r1, #0]
 8018d08:	b10b      	cbz	r3, 8018d0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8018d0a:	3301      	adds	r3, #1
 8018d0c:	600b      	str	r3, [r1, #0]
 8018d0e:	6803      	ldr	r3, [r0, #0]
 8018d10:	b31b      	cbz	r3, 8018d5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8018d12:	881c      	ldrh	r4, [r3, #0]
 8018d14:	2c2e      	cmp	r4, #46	; 0x2e
 8018d16:	d11a      	bne.n	8018d4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018d18:	2301      	movs	r3, #1
 8018d1a:	703b      	strb	r3, [r7, #0]
 8018d1c:	6803      	ldr	r3, [r0, #0]
 8018d1e:	b10b      	cbz	r3, 8018d24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8018d20:	3302      	adds	r3, #2
 8018d22:	6003      	str	r3, [r0, #0]
 8018d24:	680b      	ldr	r3, [r1, #0]
 8018d26:	b10b      	cbz	r3, 8018d2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018d28:	3301      	adds	r3, #1
 8018d2a:	600b      	str	r3, [r1, #0]
 8018d2c:	6803      	ldr	r3, [r0, #0]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d036      	beq.n	8018da0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8018d32:	881b      	ldrh	r3, [r3, #0]
 8018d34:	2b2a      	cmp	r3, #42	; 0x2a
 8018d36:	d137      	bne.n	8018da8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018d38:	f04f 33ff 	mov.w	r3, #4294967295
 8018d3c:	602b      	str	r3, [r5, #0]
 8018d3e:	6803      	ldr	r3, [r0, #0]
 8018d40:	b10b      	cbz	r3, 8018d46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8018d42:	3302      	adds	r3, #2
 8018d44:	6003      	str	r3, [r0, #0]
 8018d46:	680b      	ldr	r3, [r1, #0]
 8018d48:	b10b      	cbz	r3, 8018d4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018d4a:	3301      	adds	r3, #1
 8018d4c:	600b      	str	r3, [r1, #0]
 8018d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d52:	680c      	ldr	r4, [r1, #0]
 8018d54:	b134      	cbz	r4, 8018d64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018d56:	7824      	ldrb	r4, [r4, #0]
 8018d58:	e7cc      	b.n	8018cf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018d5a:	680b      	ldr	r3, [r1, #0]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d0f6      	beq.n	8018d4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018d60:	781c      	ldrb	r4, [r3, #0]
 8018d62:	e7d7      	b.n	8018d14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018d64:	2300      	movs	r3, #0
 8018d66:	6033      	str	r3, [r6, #0]
 8018d68:	220a      	movs	r2, #10
 8018d6a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018d6e:	fa1f f38c 	uxth.w	r3, ip
 8018d72:	2b09      	cmp	r3, #9
 8018d74:	d8ce      	bhi.n	8018d14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018d76:	6833      	ldr	r3, [r6, #0]
 8018d78:	fb02 c303 	mla	r3, r2, r3, ip
 8018d7c:	6033      	str	r3, [r6, #0]
 8018d7e:	6803      	ldr	r3, [r0, #0]
 8018d80:	b10b      	cbz	r3, 8018d86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8018d82:	3302      	adds	r3, #2
 8018d84:	6003      	str	r3, [r0, #0]
 8018d86:	680b      	ldr	r3, [r1, #0]
 8018d88:	b10b      	cbz	r3, 8018d8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8018d8a:	3301      	adds	r3, #1
 8018d8c:	600b      	str	r3, [r1, #0]
 8018d8e:	6803      	ldr	r3, [r0, #0]
 8018d90:	b10b      	cbz	r3, 8018d96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8018d92:	881c      	ldrh	r4, [r3, #0]
 8018d94:	e7e9      	b.n	8018d6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018d96:	680c      	ldr	r4, [r1, #0]
 8018d98:	2c00      	cmp	r4, #0
 8018d9a:	d0e6      	beq.n	8018d6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018d9c:	7824      	ldrb	r4, [r4, #0]
 8018d9e:	e7e4      	b.n	8018d6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018da0:	680b      	ldr	r3, [r1, #0]
 8018da2:	b10b      	cbz	r3, 8018da8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018da4:	781b      	ldrb	r3, [r3, #0]
 8018da6:	e7c5      	b.n	8018d34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8018da8:	2200      	movs	r2, #0
 8018daa:	602a      	str	r2, [r5, #0]
 8018dac:	240a      	movs	r4, #10
 8018dae:	3b30      	subs	r3, #48	; 0x30
 8018db0:	b29e      	uxth	r6, r3
 8018db2:	2e09      	cmp	r6, #9
 8018db4:	682a      	ldr	r2, [r5, #0]
 8018db6:	d813      	bhi.n	8018de0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8018db8:	fb04 3302 	mla	r3, r4, r2, r3
 8018dbc:	602b      	str	r3, [r5, #0]
 8018dbe:	6803      	ldr	r3, [r0, #0]
 8018dc0:	b10b      	cbz	r3, 8018dc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8018dc2:	3302      	adds	r3, #2
 8018dc4:	6003      	str	r3, [r0, #0]
 8018dc6:	680b      	ldr	r3, [r1, #0]
 8018dc8:	b10b      	cbz	r3, 8018dce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8018dca:	3301      	adds	r3, #1
 8018dcc:	600b      	str	r3, [r1, #0]
 8018dce:	6803      	ldr	r3, [r0, #0]
 8018dd0:	b10b      	cbz	r3, 8018dd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8018dd2:	881b      	ldrh	r3, [r3, #0]
 8018dd4:	e7eb      	b.n	8018dae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018dd6:	680b      	ldr	r3, [r1, #0]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d0e8      	beq.n	8018dae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018ddc:	781b      	ldrb	r3, [r3, #0]
 8018dde:	e7e6      	b.n	8018dae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018de0:	2a06      	cmp	r2, #6
 8018de2:	bfa8      	it	ge
 8018de4:	2206      	movge	r2, #6
 8018de6:	602a      	str	r2, [r5, #0]
 8018de8:	e7b1      	b.n	8018d4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08018dea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8018dea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dee:	b0a3      	sub	sp, #140	; 0x8c
 8018df0:	2600      	movs	r6, #0
 8018df2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8018df6:	4607      	mov	r7, r0
 8018df8:	4688      	mov	r8, r1
 8018dfa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018dfe:	4631      	mov	r1, r6
 8018e00:	2242      	movs	r2, #66	; 0x42
 8018e02:	4648      	mov	r0, r9
 8018e04:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8018e06:	960d      	str	r6, [sp, #52]	; 0x34
 8018e08:	f7fe fae0 	bl	80173cc <_ZN8touchgfx6memsetEPvhm>
 8018e0c:	b15f      	cbz	r7, 8018e26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8018e0e:	f108 3aff 	add.w	sl, r8, #4294967295
 8018e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e16:	b152      	cbz	r2, 8018e2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8018e18:	8812      	ldrh	r2, [r2, #0]
 8018e1a:	b10a      	cbz	r2, 8018e20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018e1c:	459a      	cmp	sl, r3
 8018e1e:	dc2e      	bgt.n	8018e7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8018e20:	2200      	movs	r2, #0
 8018e22:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018e26:	4638      	mov	r0, r7
 8018e28:	b023      	add	sp, #140	; 0x8c
 8018e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e2e:	9a08      	ldr	r2, [sp, #32]
 8018e30:	2a00      	cmp	r2, #0
 8018e32:	d0f5      	beq.n	8018e20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018e34:	7812      	ldrb	r2, [r2, #0]
 8018e36:	e7f0      	b.n	8018e1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8018e38:	2d00      	cmp	r5, #0
 8018e3a:	d0ea      	beq.n	8018e12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018e3c:	782a      	ldrb	r2, [r5, #0]
 8018e3e:	b142      	cbz	r2, 8018e52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8018e40:	2a25      	cmp	r2, #37	; 0x25
 8018e42:	d001      	beq.n	8018e48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8018e44:	459a      	cmp	sl, r3
 8018e46:	dc08      	bgt.n	8018e5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8018e48:	f1bb 0f00 	cmp.w	fp, #0
 8018e4c:	d121      	bne.n	8018e92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8018e4e:	2d00      	cmp	r5, #0
 8018e50:	d0df      	beq.n	8018e12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018e52:	782a      	ldrb	r2, [r5, #0]
 8018e54:	f04f 0b00 	mov.w	fp, #0
 8018e58:	e01d      	b.n	8018e96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8018e5a:	f1bb 0f00 	cmp.w	fp, #0
 8018e5e:	d078      	beq.n	8018f52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 8018e60:	f8bb 2000 	ldrh.w	r2, [fp]
 8018e64:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018e68:	f1bb 0f00 	cmp.w	fp, #0
 8018e6c:	d002      	beq.n	8018e74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8018e6e:	f10b 0202 	add.w	r2, fp, #2
 8018e72:	9209      	str	r2, [sp, #36]	; 0x24
 8018e74:	b10d      	cbz	r5, 8018e7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8018e76:	3501      	adds	r5, #1
 8018e78:	9508      	str	r5, [sp, #32]
 8018e7a:	3301      	adds	r3, #1
 8018e7c:	930d      	str	r3, [sp, #52]	; 0x34
 8018e7e:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8018e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e84:	f1bb 0f00 	cmp.w	fp, #0
 8018e88:	d0d6      	beq.n	8018e38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8018e8a:	f8bb 2000 	ldrh.w	r2, [fp]
 8018e8e:	2a00      	cmp	r2, #0
 8018e90:	d1d6      	bne.n	8018e40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8018e92:	f8bb 2000 	ldrh.w	r2, [fp]
 8018e96:	2a00      	cmp	r2, #0
 8018e98:	d0bb      	beq.n	8018e12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018e9a:	459a      	cmp	sl, r3
 8018e9c:	ddb9      	ble.n	8018e12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018e9e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8018ea2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018ea6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8018eaa:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8018eae:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8018eb2:	960e      	str	r6, [sp, #56]	; 0x38
 8018eb4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8018eb8:	960f      	str	r6, [sp, #60]	; 0x3c
 8018eba:	f1bb 0f00 	cmp.w	fp, #0
 8018ebe:	d002      	beq.n	8018ec6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8018ec0:	f10b 0302 	add.w	r3, fp, #2
 8018ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8018ec6:	b10d      	cbz	r5, 8018ecc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8018ec8:	1c6b      	adds	r3, r5, #1
 8018eca:	9308      	str	r3, [sp, #32]
 8018ecc:	ab0f      	add	r3, sp, #60	; 0x3c
 8018ece:	9305      	str	r3, [sp, #20]
 8018ed0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8018ed4:	9304      	str	r3, [sp, #16]
 8018ed6:	ab0e      	add	r3, sp, #56	; 0x38
 8018ed8:	9303      	str	r3, [sp, #12]
 8018eda:	ab0c      	add	r3, sp, #48	; 0x30
 8018edc:	9302      	str	r3, [sp, #8]
 8018ede:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8018ee2:	9301      	str	r3, [sp, #4]
 8018ee4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8018ee8:	9300      	str	r3, [sp, #0]
 8018eea:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8018eee:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8018ef2:	a908      	add	r1, sp, #32
 8018ef4:	a809      	add	r0, sp, #36	; 0x24
 8018ef6:	f7ff fea8 	bl	8018c4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8018efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	bfbe      	ittt	lt
 8018f00:	6823      	ldrlt	r3, [r4, #0]
 8018f02:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018f06:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018f08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018f0a:	bfb8      	it	lt
 8018f0c:	3404      	addlt	r4, #4
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	bfb8      	it	lt
 8018f12:	6823      	ldrlt	r3, [r4, #0]
 8018f14:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018f18:	bfbe      	ittt	lt
 8018f1a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018f1e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8018f20:	3404      	addlt	r4, #4
 8018f22:	b1d9      	cbz	r1, 8018f5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 8018f24:	880b      	ldrh	r3, [r1, #0]
 8018f26:	2b69      	cmp	r3, #105	; 0x69
 8018f28:	d01f      	beq.n	8018f6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018f2a:	d82f      	bhi.n	8018f8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8018f2c:	2b58      	cmp	r3, #88	; 0x58
 8018f2e:	d01c      	beq.n	8018f6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018f30:	d818      	bhi.n	8018f64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 8018f32:	2b25      	cmp	r3, #37	; 0x25
 8018f34:	d034      	beq.n	8018fa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 8018f36:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8018f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f3c:	f1bb 0f00 	cmp.w	fp, #0
 8018f40:	f000 80b8 	beq.w	80190b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 8018f44:	f8bb 5000 	ldrh.w	r5, [fp]
 8018f48:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8018f4c:	3301      	adds	r3, #1
 8018f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8018f50:	e029      	b.n	8018fa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8018f52:	b10d      	cbz	r5, 8018f58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 8018f54:	782a      	ldrb	r2, [r5, #0]
 8018f56:	e785      	b.n	8018e64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018f58:	462a      	mov	r2, r5
 8018f5a:	e783      	b.n	8018e64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018f5c:	2a00      	cmp	r2, #0
 8018f5e:	d0ea      	beq.n	8018f36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8018f60:	7813      	ldrb	r3, [r2, #0]
 8018f62:	e7e0      	b.n	8018f26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 8018f64:	3b63      	subs	r3, #99	; 0x63
 8018f66:	2b01      	cmp	r3, #1
 8018f68:	d8e5      	bhi.n	8018f36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8018f6a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8018f6e:	b329      	cbz	r1, 8018fbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8018f70:	880b      	ldrh	r3, [r1, #0]
 8018f72:	2b69      	cmp	r3, #105	; 0x69
 8018f74:	d063      	beq.n	801903e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8018f76:	d825      	bhi.n	8018fc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8018f78:	2b63      	cmp	r3, #99	; 0x63
 8018f7a:	d038      	beq.n	8018fee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8018f7c:	2b64      	cmp	r3, #100	; 0x64
 8018f7e:	d05e      	beq.n	801903e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8018f80:	2b58      	cmp	r3, #88	; 0x58
 8018f82:	d07b      	beq.n	801907c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 8018f84:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8018f88:	4625      	mov	r5, r4
 8018f8a:	e036      	b.n	8018ffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018f8c:	2b73      	cmp	r3, #115	; 0x73
 8018f8e:	d0ec      	beq.n	8018f6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018f90:	d802      	bhi.n	8018f98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 8018f92:	2b6f      	cmp	r3, #111	; 0x6f
 8018f94:	d1cf      	bne.n	8018f36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8018f96:	e7e8      	b.n	8018f6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018f98:	2b75      	cmp	r3, #117	; 0x75
 8018f9a:	d0e6      	beq.n	8018f6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018f9c:	2b78      	cmp	r3, #120	; 0x78
 8018f9e:	e7f9      	b.n	8018f94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8018fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fa2:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8018fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fa8:	b10b      	cbz	r3, 8018fae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8018faa:	3302      	adds	r3, #2
 8018fac:	9309      	str	r3, [sp, #36]	; 0x24
 8018fae:	9b08      	ldr	r3, [sp, #32]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	f43f af2e 	beq.w	8018e12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018fb6:	3301      	adds	r3, #1
 8018fb8:	9308      	str	r3, [sp, #32]
 8018fba:	e72a      	b.n	8018e12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018fbc:	2a00      	cmp	r2, #0
 8018fbe:	d0e1      	beq.n	8018f84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8018fc0:	7813      	ldrb	r3, [r2, #0]
 8018fc2:	e7d6      	b.n	8018f72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 8018fc4:	2b73      	cmp	r3, #115	; 0x73
 8018fc6:	d036      	beq.n	8019036 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8018fc8:	d807      	bhi.n	8018fda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 8018fca:	2b6f      	cmp	r3, #111	; 0x6f
 8018fcc:	d1da      	bne.n	8018f84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8018fce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fd0:	1d25      	adds	r5, r4, #4
 8018fd2:	eba8 0202 	sub.w	r2, r8, r2
 8018fd6:	2308      	movs	r3, #8
 8018fd8:	e04a      	b.n	8019070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8018fda:	2b75      	cmp	r3, #117	; 0x75
 8018fdc:	d043      	beq.n	8019066 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 8018fde:	2b78      	cmp	r3, #120	; 0x78
 8018fe0:	d1d0      	bne.n	8018f84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8018fe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fe4:	1d25      	adds	r5, r4, #4
 8018fe6:	eba8 0202 	sub.w	r2, r8, r2
 8018fea:	2310      	movs	r3, #16
 8018fec:	e040      	b.n	8019070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8018fee:	7823      	ldrb	r3, [r4, #0]
 8018ff0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8018ff4:	1d25      	adds	r5, r4, #4
 8018ff6:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8018ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ffc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8019000:	2b00      	cmp	r3, #0
 8019002:	d052      	beq.n	80190aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 8019004:	881a      	ldrh	r2, [r3, #0]
 8019006:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801900a:	a80d      	add	r0, sp, #52	; 0x34
 801900c:	9005      	str	r0, [sp, #20]
 801900e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8019012:	9004      	str	r0, [sp, #16]
 8019014:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019016:	9003      	str	r0, [sp, #12]
 8019018:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801901c:	9002      	str	r0, [sp, #8]
 801901e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019020:	9001      	str	r0, [sp, #4]
 8019022:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8019026:	9000      	str	r0, [sp, #0]
 8019028:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801902c:	a810      	add	r0, sp, #64	; 0x40
 801902e:	f7ff fd49 	bl	8018ac4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8019032:	462c      	mov	r4, r5
 8019034:	e7b7      	b.n	8018fa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8019036:	6823      	ldr	r3, [r4, #0]
 8019038:	1d25      	adds	r5, r4, #4
 801903a:	9310      	str	r3, [sp, #64]	; 0x40
 801903c:	e7dd      	b.n	8018ffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801903e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019040:	6820      	ldr	r0, [r4, #0]
 8019042:	eba8 0202 	sub.w	r2, r8, r2
 8019046:	230a      	movs	r3, #10
 8019048:	b292      	uxth	r2, r2
 801904a:	4649      	mov	r1, r9
 801904c:	f7ff fd08 	bl	8018a60 <_ZN8touchgfx7Unicode4itoaElPtti>
 8019050:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019054:	2b2d      	cmp	r3, #45	; 0x2d
 8019056:	f104 0504 	add.w	r5, r4, #4
 801905a:	d1ce      	bne.n	8018ffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801905c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019060:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019062:	3302      	adds	r3, #2
 8019064:	e7e9      	b.n	801903a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8019066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019068:	1d25      	adds	r5, r4, #4
 801906a:	eba8 0202 	sub.w	r2, r8, r2
 801906e:	230a      	movs	r3, #10
 8019070:	b292      	uxth	r2, r2
 8019072:	4649      	mov	r1, r9
 8019074:	6820      	ldr	r0, [r4, #0]
 8019076:	f7ff fcd5 	bl	8018a24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801907a:	e7be      	b.n	8018ffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801907c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801907e:	6820      	ldr	r0, [r4, #0]
 8019080:	eba8 0202 	sub.w	r2, r8, r2
 8019084:	b292      	uxth	r2, r2
 8019086:	2310      	movs	r3, #16
 8019088:	4649      	mov	r1, r9
 801908a:	f7ff fccb 	bl	8018a24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801908e:	1d25      	adds	r5, r4, #4
 8019090:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8019094:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019098:	2b00      	cmp	r3, #0
 801909a:	d0ae      	beq.n	8018ffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801909c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80190a0:	2919      	cmp	r1, #25
 80190a2:	d8f7      	bhi.n	8019094 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 80190a4:	3b20      	subs	r3, #32
 80190a6:	8013      	strh	r3, [r2, #0]
 80190a8:	e7f4      	b.n	8019094 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 80190aa:	9a08      	ldr	r2, [sp, #32]
 80190ac:	2a00      	cmp	r2, #0
 80190ae:	d0aa      	beq.n	8019006 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 80190b0:	7812      	ldrb	r2, [r2, #0]
 80190b2:	e7a8      	b.n	8019006 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 80190b4:	2d00      	cmp	r5, #0
 80190b6:	f43f af47 	beq.w	8018f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 80190ba:	782d      	ldrb	r5, [r5, #0]
 80190bc:	e744      	b.n	8018f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

080190be <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80190be:	b507      	push	{r0, r1, r2, lr}
 80190c0:	9300      	str	r3, [sp, #0]
 80190c2:	4613      	mov	r3, r2
 80190c4:	2200      	movs	r2, #0
 80190c6:	f7ff fe90 	bl	8018dea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80190ca:	b003      	add	sp, #12
 80190cc:	f85d fb04 	ldr.w	pc, [sp], #4

080190d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80190d0:	b40c      	push	{r2, r3}
 80190d2:	b507      	push	{r0, r1, r2, lr}
 80190d4:	ab04      	add	r3, sp, #16
 80190d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80190da:	9301      	str	r3, [sp, #4]
 80190dc:	f7ff ffef 	bl	80190be <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80190e0:	b003      	add	sp, #12
 80190e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80190e6:	b002      	add	sp, #8
 80190e8:	4770      	bx	lr
	...

080190ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80190ec:	4b01      	ldr	r3, [pc, #4]	; (80190f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80190ee:	6018      	str	r0, [r3, #0]
 80190f0:	4770      	bx	lr
 80190f2:	bf00      	nop
 80190f4:	2000a0c0 	.word	0x2000a0c0

080190f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80190f8:	4b06      	ldr	r3, [pc, #24]	; (8019114 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80190fa:	881a      	ldrh	r2, [r3, #0]
 80190fc:	4282      	cmp	r2, r0
 80190fe:	d807      	bhi.n	8019110 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019100:	4b05      	ldr	r3, [pc, #20]	; (8019118 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019102:	881b      	ldrh	r3, [r3, #0]
 8019104:	4413      	add	r3, r2
 8019106:	4298      	cmp	r0, r3
 8019108:	bfac      	ite	ge
 801910a:	2000      	movge	r0, #0
 801910c:	2001      	movlt	r0, #1
 801910e:	4770      	bx	lr
 8019110:	2000      	movs	r0, #0
 8019112:	4770      	bx	lr
 8019114:	2000a0e0 	.word	0x2000a0e0
 8019118:	2000a0e4 	.word	0x2000a0e4

0801911c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801911c:	b508      	push	{r3, lr}
 801911e:	4601      	mov	r1, r0
 8019120:	f7ff ffea 	bl	80190f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019124:	b118      	cbz	r0, 801912e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019126:	4b02      	ldr	r3, [pc, #8]	; (8019130 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801912e:	bd08      	pop	{r3, pc}
 8019130:	2000a0c4 	.word	0x2000a0c4

08019134 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019138:	4d28      	ldr	r5, [pc, #160]	; (80191dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801913a:	682b      	ldr	r3, [r5, #0]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d04a      	beq.n	80191d6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8019140:	4a27      	ldr	r2, [pc, #156]	; (80191e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019142:	4e28      	ldr	r6, [pc, #160]	; (80191e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019144:	8810      	ldrh	r0, [r2, #0]
 8019146:	f8b6 8000 	ldrh.w	r8, [r6]
 801914a:	4c27      	ldr	r4, [pc, #156]	; (80191e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801914c:	4f27      	ldr	r7, [pc, #156]	; (80191ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801914e:	4440      	add	r0, r8
 8019150:	1c41      	adds	r1, r0, #1
 8019152:	f021 0101 	bic.w	r1, r1, #1
 8019156:	0409      	lsls	r1, r1, #16
 8019158:	0c09      	lsrs	r1, r1, #16
 801915a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801915e:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019162:	eb03 020e 	add.w	r2, r3, lr
 8019166:	eb0e 010c 	add.w	r1, lr, ip
 801916a:	6022      	str	r2, [r4, #0]
 801916c:	185a      	adds	r2, r3, r1
 801916e:	603a      	str	r2, [r7, #0]
 8019170:	220e      	movs	r2, #14
 8019172:	fb02 f208 	mul.w	r2, r2, r8
 8019176:	3203      	adds	r2, #3
 8019178:	f022 0203 	bic.w	r2, r2, #3
 801917c:	4411      	add	r1, r2
 801917e:	440b      	add	r3, r1
 8019180:	491b      	ldr	r1, [pc, #108]	; (80191f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8019182:	600b      	str	r3, [r1, #0]
 8019184:	491b      	ldr	r1, [pc, #108]	; (80191f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8019186:	2300      	movs	r3, #0
 8019188:	800b      	strh	r3, [r1, #0]
 801918a:	491b      	ldr	r1, [pc, #108]	; (80191f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801918c:	6809      	ldr	r1, [r1, #0]
 801918e:	eba1 010e 	sub.w	r1, r1, lr
 8019192:	eba1 010c 	sub.w	r1, r1, ip
 8019196:	1a8a      	subs	r2, r1, r2
 8019198:	4918      	ldr	r1, [pc, #96]	; (80191fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801919a:	600a      	str	r2, [r1, #0]
 801919c:	4a18      	ldr	r2, [pc, #96]	; (8019200 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801919e:	469c      	mov	ip, r3
 80191a0:	8013      	strh	r3, [r2, #0]
 80191a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80191a6:	4283      	cmp	r3, r0
 80191a8:	d10d      	bne.n	80191c6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80191aa:	8835      	ldrh	r5, [r6, #0]
 80191ac:	6838      	ldr	r0, [r7, #0]
 80191ae:	2300      	movs	r3, #0
 80191b0:	240e      	movs	r4, #14
 80191b2:	429d      	cmp	r5, r3
 80191b4:	d90f      	bls.n	80191d6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80191b6:	fb04 0203 	mla	r2, r4, r3, r0
 80191ba:	3301      	adds	r3, #1
 80191bc:	7b11      	ldrb	r1, [r2, #12]
 80191be:	f36f 1145 	bfc	r1, #5, #1
 80191c2:	7311      	strb	r1, [r2, #12]
 80191c4:	e7f5      	b.n	80191b2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80191c6:	682a      	ldr	r2, [r5, #0]
 80191c8:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80191cc:	6822      	ldr	r2, [r4, #0]
 80191ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80191d2:	3301      	adds	r3, #1
 80191d4:	e7e7      	b.n	80191a6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80191d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191da:	bf00      	nop
 80191dc:	2000a0c4 	.word	0x2000a0c4
 80191e0:	2000a0e0 	.word	0x2000a0e0
 80191e4:	2000a0e4 	.word	0x2000a0e4
 80191e8:	2000a0d8 	.word	0x2000a0d8
 80191ec:	2000a0c8 	.word	0x2000a0c8
 80191f0:	2000a0d0 	.word	0x2000a0d0
 80191f4:	2000a0e2 	.word	0x2000a0e2
 80191f8:	2000a0cc 	.word	0x2000a0cc
 80191fc:	2000a0dc 	.word	0x2000a0dc
 8019200:	2000a0d4 	.word	0x2000a0d4

08019204 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019204:	b510      	push	{r4, lr}
 8019206:	4b10      	ldr	r3, [pc, #64]	; (8019248 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	b9db      	cbnz	r3, 8019244 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801920c:	b1d1      	cbz	r1, 8019244 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801920e:	4b0f      	ldr	r3, [pc, #60]	; (801924c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8019210:	801a      	strh	r2, [r3, #0]
 8019212:	4b0f      	ldr	r3, [pc, #60]	; (8019250 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8019214:	881b      	ldrh	r3, [r3, #0]
 8019216:	b292      	uxth	r2, r2
 8019218:	240e      	movs	r4, #14
 801921a:	4413      	add	r3, r2
 801921c:	4362      	muls	r2, r4
 801921e:	2406      	movs	r4, #6
 8019220:	fb04 2203 	mla	r2, r4, r3, r2
 8019224:	428a      	cmp	r2, r1
 8019226:	d305      	bcc.n	8019234 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8019228:	4b0a      	ldr	r3, [pc, #40]	; (8019254 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801922a:	4a0b      	ldr	r2, [pc, #44]	; (8019258 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801922c:	480b      	ldr	r0, [pc, #44]	; (801925c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801922e:	2137      	movs	r1, #55	; 0x37
 8019230:	f00b ff40 	bl	80250b4 <__assert_func>
 8019234:	4b0a      	ldr	r3, [pc, #40]	; (8019260 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8019236:	6019      	str	r1, [r3, #0]
 8019238:	4b0a      	ldr	r3, [pc, #40]	; (8019264 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801923a:	6018      	str	r0, [r3, #0]
 801923c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019240:	f7ff bf78 	b.w	8019134 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019244:	bd10      	pop	{r4, pc}
 8019246:	bf00      	nop
 8019248:	2000a0d0 	.word	0x2000a0d0
 801924c:	2000a0e4 	.word	0x2000a0e4
 8019250:	2000a0e0 	.word	0x2000a0e0
 8019254:	0802a751 	.word	0x0802a751
 8019258:	0802a7aa 	.word	0x0802a7aa
 801925c:	0802a72c 	.word	0x0802a72c
 8019260:	2000a0cc 	.word	0x2000a0cc
 8019264:	2000a0c4 	.word	0x2000a0c4

08019268 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019268:	b470      	push	{r4, r5, r6}
 801926a:	4c07      	ldr	r4, [pc, #28]	; (8019288 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801926c:	6826      	ldr	r6, [r4, #0]
 801926e:	4605      	mov	r5, r0
 8019270:	4610      	mov	r0, r2
 8019272:	9a03      	ldr	r2, [sp, #12]
 8019274:	b936      	cbnz	r6, 8019284 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019276:	6025      	str	r5, [r4, #0]
 8019278:	4c04      	ldr	r4, [pc, #16]	; (801928c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801927a:	8021      	strh	r1, [r4, #0]
 801927c:	bc70      	pop	{r4, r5, r6}
 801927e:	4619      	mov	r1, r3
 8019280:	f7ff bfc0 	b.w	8019204 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019284:	bc70      	pop	{r4, r5, r6}
 8019286:	4770      	bx	lr
 8019288:	2000a0e8 	.word	0x2000a0e8
 801928c:	2000a0e0 	.word	0x2000a0e0

08019290 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019290:	b508      	push	{r3, lr}
 8019292:	4b14      	ldr	r3, [pc, #80]	; (80192e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019294:	6819      	ldr	r1, [r3, #0]
 8019296:	b931      	cbnz	r1, 80192a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8019298:	4b13      	ldr	r3, [pc, #76]	; (80192e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801929a:	4a14      	ldr	r2, [pc, #80]	; (80192ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801929c:	4814      	ldr	r0, [pc, #80]	; (80192f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801929e:	f240 3187 	movw	r1, #903	; 0x387
 80192a2:	f00b ff07 	bl	80250b4 <__assert_func>
 80192a6:	4a13      	ldr	r2, [pc, #76]	; (80192f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80192a8:	8803      	ldrh	r3, [r0, #0]
 80192aa:	8812      	ldrh	r2, [r2, #0]
 80192ac:	4293      	cmp	r3, r2
 80192ae:	d204      	bcs.n	80192ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80192b0:	2214      	movs	r2, #20
 80192b2:	fb02 1303 	mla	r3, r2, r3, r1
 80192b6:	8918      	ldrh	r0, [r3, #8]
 80192b8:	bd08      	pop	{r3, pc}
 80192ba:	490f      	ldr	r1, [pc, #60]	; (80192f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80192bc:	8809      	ldrh	r1, [r1, #0]
 80192be:	4411      	add	r1, r2
 80192c0:	428b      	cmp	r3, r1
 80192c2:	da06      	bge.n	80192d2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80192c4:	1a9b      	subs	r3, r3, r2
 80192c6:	4a0d      	ldr	r2, [pc, #52]	; (80192fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80192c8:	6812      	ldr	r2, [r2, #0]
 80192ca:	210e      	movs	r1, #14
 80192cc:	fb01 2303 	mla	r3, r1, r3, r2
 80192d0:	e7f1      	b.n	80192b6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80192d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80192d6:	4293      	cmp	r3, r2
 80192d8:	bf0a      	itet	eq
 80192da:	4b09      	ldreq	r3, [pc, #36]	; (8019300 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80192dc:	2000      	movne	r0, #0
 80192de:	8818      	ldrheq	r0, [r3, #0]
 80192e0:	e7ea      	b.n	80192b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80192e2:	bf00      	nop
 80192e4:	2000a0e8 	.word	0x2000a0e8
 80192e8:	08029b98 	.word	0x08029b98
 80192ec:	0802a857 	.word	0x0802a857
 80192f0:	0802a72c 	.word	0x0802a72c
 80192f4:	2000a0e0 	.word	0x2000a0e0
 80192f8:	2000a0e4 	.word	0x2000a0e4
 80192fc:	2000a0c8 	.word	0x2000a0c8
 8019300:	2000a054 	.word	0x2000a054

08019304 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019304:	b508      	push	{r3, lr}
 8019306:	4b14      	ldr	r3, [pc, #80]	; (8019358 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019308:	6819      	ldr	r1, [r3, #0]
 801930a:	b931      	cbnz	r1, 801931a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801930c:	4b13      	ldr	r3, [pc, #76]	; (801935c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801930e:	4a14      	ldr	r2, [pc, #80]	; (8019360 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019310:	4814      	ldr	r0, [pc, #80]	; (8019364 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019312:	f240 319b 	movw	r1, #923	; 0x39b
 8019316:	f00b fecd 	bl	80250b4 <__assert_func>
 801931a:	4a13      	ldr	r2, [pc, #76]	; (8019368 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801931c:	8803      	ldrh	r3, [r0, #0]
 801931e:	8812      	ldrh	r2, [r2, #0]
 8019320:	4293      	cmp	r3, r2
 8019322:	d204      	bcs.n	801932e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8019324:	2214      	movs	r2, #20
 8019326:	fb02 1303 	mla	r3, r2, r3, r1
 801932a:	8958      	ldrh	r0, [r3, #10]
 801932c:	bd08      	pop	{r3, pc}
 801932e:	490f      	ldr	r1, [pc, #60]	; (801936c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8019330:	8809      	ldrh	r1, [r1, #0]
 8019332:	4411      	add	r1, r2
 8019334:	428b      	cmp	r3, r1
 8019336:	da06      	bge.n	8019346 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8019338:	1a9b      	subs	r3, r3, r2
 801933a:	4a0d      	ldr	r2, [pc, #52]	; (8019370 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801933c:	6812      	ldr	r2, [r2, #0]
 801933e:	210e      	movs	r1, #14
 8019340:	fb01 2303 	mla	r3, r1, r3, r2
 8019344:	e7f1      	b.n	801932a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8019346:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801934a:	4293      	cmp	r3, r2
 801934c:	bf0a      	itet	eq
 801934e:	4b09      	ldreq	r3, [pc, #36]	; (8019374 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8019350:	2000      	movne	r0, #0
 8019352:	8818      	ldrheq	r0, [r3, #0]
 8019354:	e7ea      	b.n	801932c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8019356:	bf00      	nop
 8019358:	2000a0e8 	.word	0x2000a0e8
 801935c:	08029b98 	.word	0x08029b98
 8019360:	0802a883 	.word	0x0802a883
 8019364:	0802a72c 	.word	0x0802a72c
 8019368:	2000a0e0 	.word	0x2000a0e0
 801936c:	2000a0e4 	.word	0x2000a0e4
 8019370:	2000a0c8 	.word	0x2000a0c8
 8019374:	2000a056 	.word	0x2000a056

08019378 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019378:	b510      	push	{r4, lr}
 801937a:	4b23      	ldr	r3, [pc, #140]	; (8019408 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801937c:	681c      	ldr	r4, [r3, #0]
 801937e:	b934      	cbnz	r4, 801938e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8019380:	4b22      	ldr	r3, [pc, #136]	; (801940c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019382:	4a23      	ldr	r2, [pc, #140]	; (8019410 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8019384:	4823      	ldr	r0, [pc, #140]	; (8019414 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8019386:	f240 31af 	movw	r1, #943	; 0x3af
 801938a:	f00b fe93 	bl	80250b4 <__assert_func>
 801938e:	4a22      	ldr	r2, [pc, #136]	; (8019418 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8019390:	880b      	ldrh	r3, [r1, #0]
 8019392:	8812      	ldrh	r2, [r2, #0]
 8019394:	4293      	cmp	r3, r2
 8019396:	d211      	bcs.n	80193bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8019398:	2214      	movs	r2, #20
 801939a:	fb02 4303 	mla	r3, r2, r3, r4
 801939e:	8a1a      	ldrh	r2, [r3, #16]
 80193a0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80193a4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80193a8:	8a5b      	ldrh	r3, [r3, #18]
 80193aa:	8004      	strh	r4, [r0, #0]
 80193ac:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80193b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80193b4:	8041      	strh	r1, [r0, #2]
 80193b6:	8082      	strh	r2, [r0, #4]
 80193b8:	80c3      	strh	r3, [r0, #6]
 80193ba:	e00e      	b.n	80193da <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80193bc:	4917      	ldr	r1, [pc, #92]	; (801941c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80193be:	8809      	ldrh	r1, [r1, #0]
 80193c0:	4411      	add	r1, r2
 80193c2:	428b      	cmp	r3, r1
 80193c4:	da0a      	bge.n	80193dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80193c6:	1a9b      	subs	r3, r3, r2
 80193c8:	4a15      	ldr	r2, [pc, #84]	; (8019420 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80193ca:	6812      	ldr	r2, [r2, #0]
 80193cc:	210e      	movs	r1, #14
 80193ce:	fb01 2303 	mla	r3, r1, r3, r2
 80193d2:	681a      	ldr	r2, [r3, #0]
 80193d4:	6002      	str	r2, [r0, #0]
 80193d6:	685a      	ldr	r2, [r3, #4]
 80193d8:	6042      	str	r2, [r0, #4]
 80193da:	bd10      	pop	{r4, pc}
 80193dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80193e0:	4293      	cmp	r3, r2
 80193e2:	d10b      	bne.n	80193fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80193e4:	4b0f      	ldr	r3, [pc, #60]	; (8019424 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80193e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80193ea:	4b0f      	ldr	r3, [pc, #60]	; (8019428 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80193ec:	8081      	strh	r1, [r0, #4]
 80193ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80193f2:	80c2      	strh	r2, [r0, #6]
 80193f4:	2300      	movs	r3, #0
 80193f6:	8003      	strh	r3, [r0, #0]
 80193f8:	8043      	strh	r3, [r0, #2]
 80193fa:	e7ee      	b.n	80193da <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80193fc:	2300      	movs	r3, #0
 80193fe:	8003      	strh	r3, [r0, #0]
 8019400:	8043      	strh	r3, [r0, #2]
 8019402:	8083      	strh	r3, [r0, #4]
 8019404:	e7d8      	b.n	80193b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8019406:	bf00      	nop
 8019408:	2000a0e8 	.word	0x2000a0e8
 801940c:	08029b98 	.word	0x08029b98
 8019410:	0802a7f0 	.word	0x0802a7f0
 8019414:	0802a72c 	.word	0x0802a72c
 8019418:	2000a0e0 	.word	0x2000a0e0
 801941c:	2000a0e4 	.word	0x2000a0e4
 8019420:	2000a0c8 	.word	0x2000a0c8
 8019424:	2000a054 	.word	0x2000a054
 8019428:	2000a056 	.word	0x2000a056

0801942c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801942c:	4b18      	ldr	r3, [pc, #96]	; (8019490 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	b34b      	cbz	r3, 8019486 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019432:	4a18      	ldr	r2, [pc, #96]	; (8019494 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019434:	8800      	ldrh	r0, [r0, #0]
 8019436:	8812      	ldrh	r2, [r2, #0]
 8019438:	4290      	cmp	r0, r2
 801943a:	d211      	bcs.n	8019460 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801943c:	2214      	movs	r2, #20
 801943e:	fb02 3300 	mla	r3, r2, r0, r3
 8019442:	8a1a      	ldrh	r2, [r3, #16]
 8019444:	8919      	ldrh	r1, [r3, #8]
 8019446:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801944a:	428a      	cmp	r2, r1
 801944c:	db1d      	blt.n	801948a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801944e:	8a58      	ldrh	r0, [r3, #18]
 8019450:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019454:	895b      	ldrh	r3, [r3, #10]
 8019456:	4298      	cmp	r0, r3
 8019458:	bfac      	ite	ge
 801945a:	2000      	movge	r0, #0
 801945c:	2001      	movlt	r0, #1
 801945e:	4770      	bx	lr
 8019460:	4b0d      	ldr	r3, [pc, #52]	; (8019498 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8019462:	881b      	ldrh	r3, [r3, #0]
 8019464:	4413      	add	r3, r2
 8019466:	4298      	cmp	r0, r3
 8019468:	da0d      	bge.n	8019486 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801946a:	4b0c      	ldr	r3, [pc, #48]	; (801949c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	1a80      	subs	r0, r0, r2
 8019470:	220e      	movs	r2, #14
 8019472:	fb02 3300 	mla	r3, r2, r0, r3
 8019476:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801947a:	891a      	ldrh	r2, [r3, #8]
 801947c:	4291      	cmp	r1, r2
 801947e:	db04      	blt.n	801948a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019480:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019484:	e7e6      	b.n	8019454 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8019486:	2000      	movs	r0, #0
 8019488:	4770      	bx	lr
 801948a:	2001      	movs	r0, #1
 801948c:	4770      	bx	lr
 801948e:	bf00      	nop
 8019490:	2000a0e8 	.word	0x2000a0e8
 8019494:	2000a0e0 	.word	0x2000a0e0
 8019498:	2000a0e4 	.word	0x2000a0e4
 801949c:	2000a0c8 	.word	0x2000a0c8

080194a0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80194a0:	b508      	push	{r3, lr}
 80194a2:	4b12      	ldr	r3, [pc, #72]	; (80194ec <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80194a4:	6819      	ldr	r1, [r3, #0]
 80194a6:	b931      	cbnz	r1, 80194b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80194a8:	4b11      	ldr	r3, [pc, #68]	; (80194f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80194aa:	4a12      	ldr	r2, [pc, #72]	; (80194f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80194ac:	4812      	ldr	r0, [pc, #72]	; (80194f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80194ae:	f240 31d3 	movw	r1, #979	; 0x3d3
 80194b2:	f00b fdff 	bl	80250b4 <__assert_func>
 80194b6:	8803      	ldrh	r3, [r0, #0]
 80194b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194bc:	4293      	cmp	r3, r2
 80194be:	d012      	beq.n	80194e6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80194c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80194c4:	4293      	cmp	r3, r2
 80194c6:	d103      	bne.n	80194d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80194c8:	4b0c      	ldr	r3, [pc, #48]	; (80194fc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80194ce:	bd08      	pop	{r3, pc}
 80194d0:	4a0b      	ldr	r2, [pc, #44]	; (8019500 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 80194d2:	6812      	ldr	r2, [r2, #0]
 80194d4:	b11a      	cbz	r2, 80194de <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 80194d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80194da:	2800      	cmp	r0, #0
 80194dc:	d1f7      	bne.n	80194ce <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80194de:	2214      	movs	r2, #20
 80194e0:	4353      	muls	r3, r2
 80194e2:	58c8      	ldr	r0, [r1, r3]
 80194e4:	e7f3      	b.n	80194ce <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80194e6:	2000      	movs	r0, #0
 80194e8:	e7f1      	b.n	80194ce <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80194ea:	bf00      	nop
 80194ec:	2000a0e8 	.word	0x2000a0e8
 80194f0:	08029b98 	.word	0x08029b98
 80194f4:	0802a826 	.word	0x0802a826
 80194f8:	0802a72c 	.word	0x0802a72c
 80194fc:	2000a060 	.word	0x2000a060
 8019500:	2000a0c4 	.word	0x2000a0c4

08019504 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019504:	8802      	ldrh	r2, [r0, #0]
 8019506:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801950a:	429a      	cmp	r2, r3
 801950c:	d845      	bhi.n	801959a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801950e:	4b24      	ldr	r3, [pc, #144]	; (80195a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019510:	8818      	ldrh	r0, [r3, #0]
 8019512:	4282      	cmp	r2, r0
 8019514:	d221      	bcs.n	801955a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8019516:	4b23      	ldr	r3, [pc, #140]	; (80195a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019518:	6819      	ldr	r1, [r3, #0]
 801951a:	2314      	movs	r3, #20
 801951c:	fb03 1302 	mla	r3, r3, r2, r1
 8019520:	6858      	ldr	r0, [r3, #4]
 8019522:	2800      	cmp	r0, #0
 8019524:	d03a      	beq.n	801959c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019526:	4920      	ldr	r1, [pc, #128]	; (80195a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019528:	6809      	ldr	r1, [r1, #0]
 801952a:	2900      	cmp	r1, #0
 801952c:	d036      	beq.n	801959c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801952e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019532:	2900      	cmp	r1, #0
 8019534:	d032      	beq.n	801959c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019536:	891a      	ldrh	r2, [r3, #8]
 8019538:	8958      	ldrh	r0, [r3, #10]
 801953a:	4350      	muls	r0, r2
 801953c:	7c5a      	ldrb	r2, [r3, #17]
 801953e:	7cdb      	ldrb	r3, [r3, #19]
 8019540:	0952      	lsrs	r2, r2, #5
 8019542:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019546:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801954a:	2b0b      	cmp	r3, #11
 801954c:	bf18      	it	ne
 801954e:	0040      	lslne	r0, r0, #1
 8019550:	3003      	adds	r0, #3
 8019552:	f020 0003 	bic.w	r0, r0, #3
 8019556:	4408      	add	r0, r1
 8019558:	4770      	bx	lr
 801955a:	4b14      	ldr	r3, [pc, #80]	; (80195ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801955c:	881b      	ldrh	r3, [r3, #0]
 801955e:	4403      	add	r3, r0
 8019560:	429a      	cmp	r2, r3
 8019562:	da1a      	bge.n	801959a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019564:	4b12      	ldr	r3, [pc, #72]	; (80195b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	1a10      	subs	r0, r2, r0
 801956a:	210e      	movs	r1, #14
 801956c:	fb01 3000 	mla	r0, r1, r0, r3
 8019570:	7b03      	ldrb	r3, [r0, #12]
 8019572:	f003 031f 	and.w	r3, r3, #31
 8019576:	2b0b      	cmp	r3, #11
 8019578:	d10b      	bne.n	8019592 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801957a:	8903      	ldrh	r3, [r0, #8]
 801957c:	8940      	ldrh	r0, [r0, #10]
 801957e:	4358      	muls	r0, r3
 8019580:	4b09      	ldr	r3, [pc, #36]	; (80195a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019582:	6819      	ldr	r1, [r3, #0]
 8019584:	3003      	adds	r0, #3
 8019586:	f020 0303 	bic.w	r3, r0, #3
 801958a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801958e:	4418      	add	r0, r3
 8019590:	4770      	bx	lr
 8019592:	2b0d      	cmp	r3, #13
 8019594:	d101      	bne.n	801959a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019596:	300d      	adds	r0, #13
 8019598:	4770      	bx	lr
 801959a:	2000      	movs	r0, #0
 801959c:	4770      	bx	lr
 801959e:	bf00      	nop
 80195a0:	2000a0e0 	.word	0x2000a0e0
 80195a4:	2000a0e8 	.word	0x2000a0e8
 80195a8:	2000a0c4 	.word	0x2000a0c4
 80195ac:	2000a0e4 	.word	0x2000a0e4
 80195b0:	2000a0c8 	.word	0x2000a0c8

080195b4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80195b4:	4b19      	ldr	r3, [pc, #100]	; (801961c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80195b6:	6819      	ldr	r1, [r3, #0]
 80195b8:	8803      	ldrh	r3, [r0, #0]
 80195ba:	b1e9      	cbz	r1, 80195f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80195bc:	4a18      	ldr	r2, [pc, #96]	; (8019620 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80195be:	8812      	ldrh	r2, [r2, #0]
 80195c0:	429a      	cmp	r2, r3
 80195c2:	d90a      	bls.n	80195da <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80195c4:	2214      	movs	r2, #20
 80195c6:	fb02 1303 	mla	r3, r2, r3, r1
 80195ca:	7c58      	ldrb	r0, [r3, #17]
 80195cc:	0942      	lsrs	r2, r0, #5
 80195ce:	7cd8      	ldrb	r0, [r3, #19]
 80195d0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80195d4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80195d8:	4770      	bx	lr
 80195da:	4912      	ldr	r1, [pc, #72]	; (8019624 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 80195dc:	8809      	ldrh	r1, [r1, #0]
 80195de:	4411      	add	r1, r2
 80195e0:	428b      	cmp	r3, r1
 80195e2:	da09      	bge.n	80195f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80195e4:	1a9b      	subs	r3, r3, r2
 80195e6:	4a10      	ldr	r2, [pc, #64]	; (8019628 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 80195e8:	6812      	ldr	r2, [r2, #0]
 80195ea:	210e      	movs	r1, #14
 80195ec:	fb01 2303 	mla	r3, r1, r3, r2
 80195f0:	7b18      	ldrb	r0, [r3, #12]
 80195f2:	f000 001f 	and.w	r0, r0, #31
 80195f6:	4770      	bx	lr
 80195f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80195fc:	4293      	cmp	r3, r2
 80195fe:	d10a      	bne.n	8019616 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8019600:	4b0a      	ldr	r3, [pc, #40]	; (801962c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019608:	b10a      	cbz	r2, 801960e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801960a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801960c:	b900      	cbnz	r0, 8019610 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801960e:	6898      	ldr	r0, [r3, #8]
 8019610:	6803      	ldr	r3, [r0, #0]
 8019612:	6a1b      	ldr	r3, [r3, #32]
 8019614:	4718      	bx	r3
 8019616:	2000      	movs	r0, #0
 8019618:	4770      	bx	lr
 801961a:	bf00      	nop
 801961c:	2000a0e8 	.word	0x2000a0e8
 8019620:	2000a0e0 	.word	0x2000a0e0
 8019624:	2000a0e4 	.word	0x2000a0e4
 8019628:	2000a0c8 	.word	0x2000a0c8
 801962c:	2000a060 	.word	0x2000a060

08019630 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8019630:	2010      	movs	r0, #16
 8019632:	4770      	bx	lr

08019634 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8019634:	2000      	movs	r0, #0
 8019636:	4770      	bx	lr

08019638 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8019638:	00d2      	lsls	r2, r2, #3
 801963a:	0209      	lsls	r1, r1, #8
 801963c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019640:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8019644:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8019648:	4310      	orrs	r0, r2
 801964a:	4770      	bx	lr

0801964c <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801964c:	0a09      	lsrs	r1, r1, #8
 801964e:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8019652:	4770      	bx	lr

08019654 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8019654:	08c9      	lsrs	r1, r1, #3
 8019656:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801965a:	4770      	bx	lr

0801965c <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801965c:	00c9      	lsls	r1, r1, #3
 801965e:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8019662:	4770      	bx	lr

08019664 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019664:	2bff      	cmp	r3, #255	; 0xff
 8019666:	d050      	beq.n	801970a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019668:	2a0b      	cmp	r2, #11
 801966a:	d04a      	beq.n	8019702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801966c:	d80e      	bhi.n	801968c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801966e:	2a03      	cmp	r2, #3
 8019670:	d03f      	beq.n	80196f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019672:	d804      	bhi.n	801967e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019674:	2a01      	cmp	r2, #1
 8019676:	d03e      	beq.n	80196f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019678:	d93f      	bls.n	80196fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801967a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801967c:	4770      	bx	lr
 801967e:	2a09      	cmp	r2, #9
 8019680:	d03f      	beq.n	8019702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019682:	d83c      	bhi.n	80196fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019684:	2a08      	cmp	r2, #8
 8019686:	d03a      	beq.n	80196fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019688:	2000      	movs	r0, #0
 801968a:	4770      	bx	lr
 801968c:	2a2f      	cmp	r2, #47	; 0x2f
 801968e:	d024      	beq.n	80196da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019690:	d80d      	bhi.n	80196ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8019692:	2a2d      	cmp	r2, #45	; 0x2d
 8019694:	d014      	beq.n	80196c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019696:	d826      	bhi.n	80196e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019698:	2a2c      	cmp	r2, #44	; 0x2c
 801969a:	d1f5      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801969c:	684b      	ldr	r3, [r1, #4]
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	2b01      	cmp	r3, #1
 80196a2:	d018      	beq.n	80196d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80196a4:	d323      	bcc.n	80196ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80196a6:	2b02      	cmp	r3, #2
 80196a8:	d1ee      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196aa:	6880      	ldr	r0, [r0, #8]
 80196ac:	4770      	bx	lr
 80196ae:	2a31      	cmp	r2, #49	; 0x31
 80196b0:	d004      	beq.n	80196bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 80196b2:	d328      	bcc.n	8019706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80196b4:	2a32      	cmp	r2, #50	; 0x32
 80196b6:	d026      	beq.n	8019706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80196b8:	2a33      	cmp	r2, #51	; 0x33
 80196ba:	d1e5      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196bc:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80196be:	4770      	bx	lr
 80196c0:	684b      	ldr	r3, [r1, #4]
 80196c2:	781b      	ldrb	r3, [r3, #0]
 80196c4:	2b01      	cmp	r3, #1
 80196c6:	d004      	beq.n	80196d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80196c8:	d30b      	bcc.n	80196e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80196ca:	2b02      	cmp	r3, #2
 80196cc:	d1dc      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196ce:	6900      	ldr	r0, [r0, #16]
 80196d0:	4770      	bx	lr
 80196d2:	6a00      	ldr	r0, [r0, #32]
 80196d4:	4770      	bx	lr
 80196d6:	6980      	ldr	r0, [r0, #24]
 80196d8:	4770      	bx	lr
 80196da:	684b      	ldr	r3, [r1, #4]
 80196dc:	781b      	ldrb	r3, [r3, #0]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d1d2      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80196e4:	4770      	bx	lr
 80196e6:	684b      	ldr	r3, [r1, #4]
 80196e8:	781b      	ldrb	r3, [r3, #0]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d1cc      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80196f0:	4770      	bx	lr
 80196f2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80196f4:	4770      	bx	lr
 80196f6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80196f8:	4770      	bx	lr
 80196fa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80196fc:	4770      	bx	lr
 80196fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019700:	4770      	bx	lr
 8019702:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019704:	4770      	bx	lr
 8019706:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019708:	4770      	bx	lr
 801970a:	2a0b      	cmp	r2, #11
 801970c:	d049      	beq.n	80197a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801970e:	d80e      	bhi.n	801972e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019710:	2a03      	cmp	r2, #3
 8019712:	d040      	beq.n	8019796 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019714:	d804      	bhi.n	8019720 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019716:	2a01      	cmp	r2, #1
 8019718:	d03f      	beq.n	801979a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801971a:	d940      	bls.n	801979e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801971c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801971e:	4770      	bx	lr
 8019720:	2a09      	cmp	r2, #9
 8019722:	d03e      	beq.n	80197a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019724:	d801      	bhi.n	801972a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019726:	2a08      	cmp	r2, #8
 8019728:	d1ae      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801972a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801972c:	4770      	bx	lr
 801972e:	2a2f      	cmp	r2, #47	; 0x2f
 8019730:	d024      	beq.n	801977c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019732:	d80d      	bhi.n	8019750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019734:	2a2d      	cmp	r2, #45	; 0x2d
 8019736:	d014      	beq.n	8019762 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019738:	d826      	bhi.n	8019788 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801973a:	2a2c      	cmp	r2, #44	; 0x2c
 801973c:	d1a4      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801973e:	684b      	ldr	r3, [r1, #4]
 8019740:	781b      	ldrb	r3, [r3, #0]
 8019742:	2b01      	cmp	r3, #1
 8019744:	d018      	beq.n	8019778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019746:	d324      	bcc.n	8019792 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019748:	2b02      	cmp	r3, #2
 801974a:	d19d      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801974c:	68c0      	ldr	r0, [r0, #12]
 801974e:	4770      	bx	lr
 8019750:	2a31      	cmp	r2, #49	; 0x31
 8019752:	d004      	beq.n	801975e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019754:	d327      	bcc.n	80197a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019756:	2a32      	cmp	r2, #50	; 0x32
 8019758:	d025      	beq.n	80197a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801975a:	2a33      	cmp	r2, #51	; 0x33
 801975c:	d194      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801975e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019760:	4770      	bx	lr
 8019762:	684b      	ldr	r3, [r1, #4]
 8019764:	781b      	ldrb	r3, [r3, #0]
 8019766:	2b01      	cmp	r3, #1
 8019768:	d004      	beq.n	8019774 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801976a:	d30b      	bcc.n	8019784 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801976c:	2b02      	cmp	r3, #2
 801976e:	d18b      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019770:	6940      	ldr	r0, [r0, #20]
 8019772:	4770      	bx	lr
 8019774:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019776:	4770      	bx	lr
 8019778:	69c0      	ldr	r0, [r0, #28]
 801977a:	4770      	bx	lr
 801977c:	684b      	ldr	r3, [r1, #4]
 801977e:	781b      	ldrb	r3, [r3, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d181      	bne.n	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019784:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019786:	4770      	bx	lr
 8019788:	684b      	ldr	r3, [r1, #4]
 801978a:	781b      	ldrb	r3, [r3, #0]
 801978c:	2b00      	cmp	r3, #0
 801978e:	f47f af7b 	bne.w	8019688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019792:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019794:	4770      	bx	lr
 8019796:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019798:	4770      	bx	lr
 801979a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801979c:	4770      	bx	lr
 801979e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80197a0:	4770      	bx	lr
 80197a2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80197a4:	4770      	bx	lr
 80197a6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80197a8:	4770      	bx	lr

080197aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80197aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ae:	b087      	sub	sp, #28
 80197b0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80197b2:	9205      	str	r2, [sp, #20]
 80197b4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80197b8:	9202      	str	r2, [sp, #8]
 80197ba:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80197be:	9101      	str	r1, [sp, #4]
 80197c0:	6841      	ldr	r1, [r0, #4]
 80197c2:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80197c6:	fb01 2404 	mla	r4, r1, r4, r2
 80197ca:	6802      	ldr	r2, [r0, #0]
 80197cc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80197d0:	f8de 2000 	ldr.w	r2, [lr]
 80197d4:	9203      	str	r2, [sp, #12]
 80197d6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80197da:	3204      	adds	r2, #4
 80197dc:	9204      	str	r2, [sp, #16]
 80197de:	9a02      	ldr	r2, [sp, #8]
 80197e0:	43d6      	mvns	r6, r2
 80197e2:	b2f6      	uxtb	r6, r6
 80197e4:	9a01      	ldr	r2, [sp, #4]
 80197e6:	2a00      	cmp	r2, #0
 80197e8:	dc03      	bgt.n	80197f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80197ea:	9a05      	ldr	r2, [sp, #20]
 80197ec:	2a00      	cmp	r2, #0
 80197ee:	f340 8129 	ble.w	8019a44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80197f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80197f4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80197f8:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80197fc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019802:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019806:	2b00      	cmp	r3, #0
 8019808:	dd0e      	ble.n	8019828 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801980a:	1408      	asrs	r0, r1, #16
 801980c:	d405      	bmi.n	801981a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801980e:	4560      	cmp	r0, ip
 8019810:	da03      	bge.n	801981a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019812:	1410      	asrs	r0, r2, #16
 8019814:	d401      	bmi.n	801981a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019816:	42b8      	cmp	r0, r7
 8019818:	db07      	blt.n	801982a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801981a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801981c:	4401      	add	r1, r0
 801981e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019820:	3b01      	subs	r3, #1
 8019822:	4402      	add	r2, r0
 8019824:	3402      	adds	r4, #2
 8019826:	e7ee      	b.n	8019806 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019828:	d071      	beq.n	801990e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801982a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801982c:	1e58      	subs	r0, r3, #1
 801982e:	fb05 1500 	mla	r5, r5, r0, r1
 8019832:	142d      	asrs	r5, r5, #16
 8019834:	d45f      	bmi.n	80198f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019836:	4565      	cmp	r5, ip
 8019838:	da5d      	bge.n	80198f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801983a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801983c:	fb05 2000 	mla	r0, r5, r0, r2
 8019840:	1400      	asrs	r0, r0, #16
 8019842:	d458      	bmi.n	80198f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019844:	42b8      	cmp	r0, r7
 8019846:	da56      	bge.n	80198f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019848:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801984c:	4699      	mov	r9, r3
 801984e:	46a2      	mov	sl, r4
 8019850:	f1b9 0f00 	cmp.w	r9, #0
 8019854:	dd57      	ble.n	8019906 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019856:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801985a:	9803      	ldr	r0, [sp, #12]
 801985c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019860:	140d      	asrs	r5, r1, #16
 8019862:	fb07 000c 	mla	r0, r7, ip, r0
 8019866:	f109 39ff 	add.w	r9, r9, #4294967295
 801986a:	5d40      	ldrb	r0, [r0, r5]
 801986c:	9d04      	ldr	r5, [sp, #16]
 801986e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019872:	f8ba 5000 	ldrh.w	r5, [sl]
 8019876:	122f      	asrs	r7, r5, #8
 8019878:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801987c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019880:	fb17 f706 	smulbb	r7, r7, r6
 8019884:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019888:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801988c:	00ed      	lsls	r5, r5, #3
 801988e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019892:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8019896:	10c7      	asrs	r7, r0, #3
 8019898:	b2ed      	uxtb	r5, r5
 801989a:	00c0      	lsls	r0, r0, #3
 801989c:	fb18 f806 	smulbb	r8, r8, r6
 80198a0:	fb15 f506 	smulbb	r5, r5, r6
 80198a4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80198a8:	b2c0      	uxtb	r0, r0
 80198aa:	fa1f fc8c 	uxth.w	ip, ip
 80198ae:	fb07 870b 	mla	r7, r7, fp, r8
 80198b2:	fb00 500b 	mla	r0, r0, fp, r5
 80198b6:	b280      	uxth	r0, r0
 80198b8:	b2bf      	uxth	r7, r7
 80198ba:	f10c 0501 	add.w	r5, ip, #1
 80198be:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80198c2:	f107 0801 	add.w	r8, r7, #1
 80198c6:	1c45      	adds	r5, r0, #1
 80198c8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80198cc:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80198d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80198d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80198d6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80198da:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80198de:	ea4c 0c05 	orr.w	ip, ip, r5
 80198e2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80198e6:	4401      	add	r1, r0
 80198e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80198ea:	ea4c 0c08 	orr.w	ip, ip, r8
 80198ee:	f82a cb02 	strh.w	ip, [sl], #2
 80198f2:	4402      	add	r2, r0
 80198f4:	e7ac      	b.n	8019850 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80198f6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80198fa:	f04f 0800 	mov.w	r8, #0
 80198fe:	eb03 0008 	add.w	r0, r3, r8
 8019902:	2800      	cmp	r0, #0
 8019904:	dc41      	bgt.n	801998a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801990a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801990e:	9b01      	ldr	r3, [sp, #4]
 8019910:	2b00      	cmp	r3, #0
 8019912:	f340 8097 	ble.w	8019a44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019916:	ee30 0a04 	vadd.f32	s0, s0, s8
 801991a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801991e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019922:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019924:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019928:	ee31 1a05 	vadd.f32	s2, s2, s10
 801992c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019930:	eef0 6a62 	vmov.f32	s13, s5
 8019934:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019938:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801993c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019940:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019944:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019948:	eef0 6a43 	vmov.f32	s13, s6
 801994c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019950:	ee12 2a90 	vmov	r2, s5
 8019954:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019958:	fb92 f3f3 	sdiv	r3, r2, r3
 801995c:	ee13 2a10 	vmov	r2, s6
 8019960:	9313      	str	r3, [sp, #76]	; 0x4c
 8019962:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019964:	fb92 f3f3 	sdiv	r3, r2, r3
 8019968:	9314      	str	r3, [sp, #80]	; 0x50
 801996a:	9b01      	ldr	r3, [sp, #4]
 801996c:	9a05      	ldr	r2, [sp, #20]
 801996e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019972:	3b01      	subs	r3, #1
 8019974:	9301      	str	r3, [sp, #4]
 8019976:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801997a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801997c:	eeb0 3a67 	vmov.f32	s6, s15
 8019980:	bf08      	it	eq
 8019982:	4613      	moveq	r3, r2
 8019984:	eef0 2a47 	vmov.f32	s5, s14
 8019988:	e72c      	b.n	80197e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801998a:	140f      	asrs	r7, r1, #16
 801998c:	d453      	bmi.n	8019a36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801998e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019992:	42bd      	cmp	r5, r7
 8019994:	dd4f      	ble.n	8019a36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019996:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801999a:	d44c      	bmi.n	8019a36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801999c:	f8de 000c 	ldr.w	r0, [lr, #12]
 80199a0:	4560      	cmp	r0, ip
 80199a2:	dd48      	ble.n	8019a36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80199a4:	9803      	ldr	r0, [sp, #12]
 80199a6:	b22d      	sxth	r5, r5
 80199a8:	fb0c 0505 	mla	r5, ip, r5, r0
 80199ac:	5de8      	ldrb	r0, [r5, r7]
 80199ae:	9d04      	ldr	r5, [sp, #16]
 80199b0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80199b4:	f06f 0501 	mvn.w	r5, #1
 80199b8:	fb05 fb08 	mul.w	fp, r5, r8
 80199bc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80199c0:	f834 500b 	ldrh.w	r5, [r4, fp]
 80199c4:	122f      	asrs	r7, r5, #8
 80199c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80199ca:	fb17 f706 	smulbb	r7, r7, r6
 80199ce:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80199d2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80199d6:	00ed      	lsls	r5, r5, #3
 80199d8:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80199dc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80199e0:	10c7      	asrs	r7, r0, #3
 80199e2:	b2ed      	uxtb	r5, r5
 80199e4:	00c0      	lsls	r0, r0, #3
 80199e6:	fb19 f906 	smulbb	r9, r9, r6
 80199ea:	fb15 f506 	smulbb	r5, r5, r6
 80199ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80199f2:	b2c0      	uxtb	r0, r0
 80199f4:	fa1f fc8c 	uxth.w	ip, ip
 80199f8:	fb07 970a 	mla	r7, r7, sl, r9
 80199fc:	fb00 500a 	mla	r0, r0, sl, r5
 8019a00:	b2bf      	uxth	r7, r7
 8019a02:	b280      	uxth	r0, r0
 8019a04:	f10c 0501 	add.w	r5, ip, #1
 8019a08:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019a0c:	f107 0901 	add.w	r9, r7, #1
 8019a10:	1c45      	adds	r5, r0, #1
 8019a12:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019a16:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019a1a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019a1e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019a22:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019a26:	ea4c 0c05 	orr.w	ip, ip, r5
 8019a2a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019a2e:	ea4c 0c09 	orr.w	ip, ip, r9
 8019a32:	f824 c00b 	strh.w	ip, [r4, fp]
 8019a36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019a38:	4401      	add	r1, r0
 8019a3a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019a3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8019a40:	4402      	add	r2, r0
 8019a42:	e75c      	b.n	80198fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019a44:	b007      	add	sp, #28
 8019a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a4e:	b085      	sub	sp, #20
 8019a50:	4693      	mov	fp, r2
 8019a52:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019a54:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019a56:	6870      	ldr	r0, [r6, #4]
 8019a58:	9100      	str	r1, [sp, #0]
 8019a5a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019a5e:	fb00 2404 	mla	r4, r0, r4, r2
 8019a62:	6832      	ldr	r2, [r6, #0]
 8019a64:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019a68:	682a      	ldr	r2, [r5, #0]
 8019a6a:	9201      	str	r2, [sp, #4]
 8019a6c:	686a      	ldr	r2, [r5, #4]
 8019a6e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8019a72:	3204      	adds	r2, #4
 8019a74:	9202      	str	r2, [sp, #8]
 8019a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019a7a:	9a00      	ldr	r2, [sp, #0]
 8019a7c:	2a00      	cmp	r2, #0
 8019a7e:	dc03      	bgt.n	8019a88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019a80:	f1bb 0f00 	cmp.w	fp, #0
 8019a84:	f340 80a0 	ble.w	8019bc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019a88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019a8a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019a8e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019a92:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019a96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019a98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	dd0c      	ble.n	8019aba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019aa0:	1406      	asrs	r6, r0, #16
 8019aa2:	d405      	bmi.n	8019ab0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019aa4:	454e      	cmp	r6, r9
 8019aa6:	da03      	bge.n	8019ab0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019aa8:	1416      	asrs	r6, r2, #16
 8019aaa:	d401      	bmi.n	8019ab0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019aac:	4546      	cmp	r6, r8
 8019aae:	db05      	blt.n	8019abc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019ab0:	4470      	add	r0, lr
 8019ab2:	4462      	add	r2, ip
 8019ab4:	3b01      	subs	r3, #1
 8019ab6:	3402      	adds	r4, #2
 8019ab8:	e7f0      	b.n	8019a9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019aba:	d00f      	beq.n	8019adc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019abc:	1e5e      	subs	r6, r3, #1
 8019abe:	fb0e 0706 	mla	r7, lr, r6, r0
 8019ac2:	143f      	asrs	r7, r7, #16
 8019ac4:	d541      	bpl.n	8019b4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8019ac6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019aca:	4698      	mov	r8, r3
 8019acc:	9603      	str	r6, [sp, #12]
 8019ace:	f1b8 0f00 	cmp.w	r8, #0
 8019ad2:	dc59      	bgt.n	8019b88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019ad4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019ad8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019adc:	9b00      	ldr	r3, [sp, #0]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	dd72      	ble.n	8019bc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019ae2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019ae6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019aea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019af0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019af4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019af8:	eeb0 6a62 	vmov.f32	s12, s5
 8019afc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019b00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b04:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019b08:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019b0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019b10:	eeb0 6a43 	vmov.f32	s12, s6
 8019b14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019b18:	ee12 2a90 	vmov	r2, s5
 8019b1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019b20:	fb92 fef3 	sdiv	lr, r2, r3
 8019b24:	ee13 2a10 	vmov	r2, s6
 8019b28:	fb92 fcf3 	sdiv	ip, r2, r3
 8019b2c:	9b00      	ldr	r3, [sp, #0]
 8019b2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b32:	3b01      	subs	r3, #1
 8019b34:	9300      	str	r3, [sp, #0]
 8019b36:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b3c:	eeb0 3a67 	vmov.f32	s6, s15
 8019b40:	bf08      	it	eq
 8019b42:	465b      	moveq	r3, fp
 8019b44:	eef0 2a47 	vmov.f32	s5, s14
 8019b48:	e797      	b.n	8019a7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019b4a:	454f      	cmp	r7, r9
 8019b4c:	dabb      	bge.n	8019ac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019b4e:	fb0c 2606 	mla	r6, ip, r6, r2
 8019b52:	1436      	asrs	r6, r6, #16
 8019b54:	d4b7      	bmi.n	8019ac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019b56:	4546      	cmp	r6, r8
 8019b58:	dab5      	bge.n	8019ac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019b5a:	461e      	mov	r6, r3
 8019b5c:	46a0      	mov	r8, r4
 8019b5e:	2e00      	cmp	r6, #0
 8019b60:	ddb8      	ble.n	8019ad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019b62:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8019b66:	9901      	ldr	r1, [sp, #4]
 8019b68:	1417      	asrs	r7, r2, #16
 8019b6a:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019b6e:	fb0a 1707 	mla	r7, sl, r7, r1
 8019b72:	9902      	ldr	r1, [sp, #8]
 8019b74:	f817 7009 	ldrb.w	r7, [r7, r9]
 8019b78:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019b7c:	f828 7b02 	strh.w	r7, [r8], #2
 8019b80:	4470      	add	r0, lr
 8019b82:	4462      	add	r2, ip
 8019b84:	3e01      	subs	r6, #1
 8019b86:	e7ea      	b.n	8019b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019b88:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019b8c:	d417      	bmi.n	8019bbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019b8e:	68ae      	ldr	r6, [r5, #8]
 8019b90:	454e      	cmp	r6, r9
 8019b92:	dd14      	ble.n	8019bbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019b94:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019b98:	d411      	bmi.n	8019bbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019b9a:	68ef      	ldr	r7, [r5, #12]
 8019b9c:	4557      	cmp	r7, sl
 8019b9e:	dd0e      	ble.n	8019bbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019ba0:	9f01      	ldr	r7, [sp, #4]
 8019ba2:	b236      	sxth	r6, r6
 8019ba4:	fb0a 7606 	mla	r6, sl, r6, r7
 8019ba8:	9f02      	ldr	r7, [sp, #8]
 8019baa:	f816 6009 	ldrb.w	r6, [r6, r9]
 8019bae:	f06f 0101 	mvn.w	r1, #1
 8019bb2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8019bb6:	fb01 f608 	mul.w	r6, r1, r8
 8019bba:	9903      	ldr	r1, [sp, #12]
 8019bbc:	538f      	strh	r7, [r1, r6]
 8019bbe:	4470      	add	r0, lr
 8019bc0:	4462      	add	r2, ip
 8019bc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8019bc6:	e782      	b.n	8019ace <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019bc8:	b005      	add	sp, #20
 8019bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019bce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019bce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bd2:	b087      	sub	sp, #28
 8019bd4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019bd6:	9205      	str	r2, [sp, #20]
 8019bd8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019bdc:	9203      	str	r2, [sp, #12]
 8019bde:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019be2:	9102      	str	r1, [sp, #8]
 8019be4:	6861      	ldr	r1, [r4, #4]
 8019be6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019bea:	fb01 2000 	mla	r0, r1, r0, r2
 8019bee:	6822      	ldr	r2, [r4, #0]
 8019bf0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019bf4:	9200      	str	r2, [sp, #0]
 8019bf6:	f8dc 2000 	ldr.w	r2, [ip]
 8019bfa:	9204      	str	r2, [sp, #16]
 8019bfc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019c00:	3204      	adds	r2, #4
 8019c02:	9201      	str	r2, [sp, #4]
 8019c04:	9a03      	ldr	r2, [sp, #12]
 8019c06:	43d5      	mvns	r5, r2
 8019c08:	b2ed      	uxtb	r5, r5
 8019c0a:	9a02      	ldr	r2, [sp, #8]
 8019c0c:	2a00      	cmp	r2, #0
 8019c0e:	dc03      	bgt.n	8019c18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019c10:	9a05      	ldr	r2, [sp, #20]
 8019c12:	2a00      	cmp	r2, #0
 8019c14:	f340 812c 	ble.w	8019e70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019c18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019c1a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019c1e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019c22:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019c26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	dd10      	ble.n	8019c52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019c30:	140c      	asrs	r4, r1, #16
 8019c32:	d405      	bmi.n	8019c40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c34:	4574      	cmp	r4, lr
 8019c36:	da03      	bge.n	8019c40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c38:	1414      	asrs	r4, r2, #16
 8019c3a:	d401      	bmi.n	8019c40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c3c:	42bc      	cmp	r4, r7
 8019c3e:	db09      	blt.n	8019c54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019c40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019c42:	9800      	ldr	r0, [sp, #0]
 8019c44:	4421      	add	r1, r4
 8019c46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019c48:	3002      	adds	r0, #2
 8019c4a:	4422      	add	r2, r4
 8019c4c:	3b01      	subs	r3, #1
 8019c4e:	9000      	str	r0, [sp, #0]
 8019c50:	e7ec      	b.n	8019c2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019c52:	d071      	beq.n	8019d38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8019c54:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019c56:	1e5c      	subs	r4, r3, #1
 8019c58:	fb06 1604 	mla	r6, r6, r4, r1
 8019c5c:	1436      	asrs	r6, r6, #16
 8019c5e:	d45d      	bmi.n	8019d1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019c60:	4576      	cmp	r6, lr
 8019c62:	da5b      	bge.n	8019d1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019c64:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019c66:	fb06 2404 	mla	r4, r6, r4, r2
 8019c6a:	1424      	asrs	r4, r4, #16
 8019c6c:	d456      	bmi.n	8019d1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019c6e:	42bc      	cmp	r4, r7
 8019c70:	da54      	bge.n	8019d1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019c72:	f8dd 9000 	ldr.w	r9, [sp]
 8019c76:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8019c7a:	4698      	mov	r8, r3
 8019c7c:	f1b8 0f00 	cmp.w	r8, #0
 8019c80:	dd54      	ble.n	8019d2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8019c82:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8019c86:	9804      	ldr	r0, [sp, #16]
 8019c88:	1414      	asrs	r4, r2, #16
 8019c8a:	fb07 0404 	mla	r4, r7, r4, r0
 8019c8e:	140e      	asrs	r6, r1, #16
 8019c90:	9801      	ldr	r0, [sp, #4]
 8019c92:	f814 e006 	ldrb.w	lr, [r4, r6]
 8019c96:	f8b9 4000 	ldrh.w	r4, [r9]
 8019c9a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019c9e:	eb00 0b0e 	add.w	fp, r0, lr
 8019ca2:	1227      	asrs	r7, r4, #8
 8019ca4:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019ca8:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019cac:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8019cb0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019cb2:	fb16 f60a 	smulbb	r6, r6, sl
 8019cb6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019cba:	fb07 6705 	mla	r7, r7, r5, r6
 8019cbe:	10e6      	asrs	r6, r4, #3
 8019cc0:	00e4      	lsls	r4, r4, #3
 8019cc2:	b2e4      	uxtb	r4, r4
 8019cc4:	fb1b fb0a 	smulbb	fp, fp, sl
 8019cc8:	fb14 f405 	smulbb	r4, r4, r5
 8019ccc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019cd0:	b2bf      	uxth	r7, r7
 8019cd2:	fb06 b605 	mla	r6, r6, r5, fp
 8019cd6:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8019cda:	b2b6      	uxth	r6, r6
 8019cdc:	fa1f fe8e 	uxth.w	lr, lr
 8019ce0:	1c7c      	adds	r4, r7, #1
 8019ce2:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8019ce6:	f106 0b01 	add.w	fp, r6, #1
 8019cea:	f10e 0401 	add.w	r4, lr, #1
 8019cee:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8019cf2:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8019cf6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019cfa:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8019cfe:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019d02:	4327      	orrs	r7, r4
 8019d04:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019d08:	4401      	add	r1, r0
 8019d0a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019d0c:	ea47 070b 	orr.w	r7, r7, fp
 8019d10:	f829 7b02 	strh.w	r7, [r9], #2
 8019d14:	4402      	add	r2, r0
 8019d16:	f108 38ff 	add.w	r8, r8, #4294967295
 8019d1a:	e7af      	b.n	8019c7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019d1c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8019d20:	f04f 0e00 	mov.w	lr, #0
 8019d24:	eb03 040e 	add.w	r4, r3, lr
 8019d28:	2c00      	cmp	r4, #0
 8019d2a:	dc43      	bgt.n	8019db4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8019d2c:	9a00      	ldr	r2, [sp, #0]
 8019d2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d32:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019d36:	9300      	str	r3, [sp, #0]
 8019d38:	9b02      	ldr	r3, [sp, #8]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	f340 8098 	ble.w	8019e70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019d40:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019d52:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019d56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019d5a:	eef0 6a62 	vmov.f32	s13, s5
 8019d5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019d62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019d6a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019d6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019d72:	eef0 6a43 	vmov.f32	s13, s6
 8019d76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019d7a:	ee12 2a90 	vmov	r2, s5
 8019d7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d86:	ee13 2a10 	vmov	r2, s6
 8019d8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8019d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d92:	9314      	str	r3, [sp, #80]	; 0x50
 8019d94:	9b02      	ldr	r3, [sp, #8]
 8019d96:	9a05      	ldr	r2, [sp, #20]
 8019d98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d9c:	3b01      	subs	r3, #1
 8019d9e:	9302      	str	r3, [sp, #8]
 8019da0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019da6:	eeb0 3a67 	vmov.f32	s6, s15
 8019daa:	bf08      	it	eq
 8019dac:	4613      	moveq	r3, r2
 8019dae:	eef0 2a47 	vmov.f32	s5, s14
 8019db2:	e72a      	b.n	8019c0a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019db4:	140f      	asrs	r7, r1, #16
 8019db6:	d454      	bmi.n	8019e62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019db8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019dbc:	42be      	cmp	r6, r7
 8019dbe:	dd50      	ble.n	8019e62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019dc0:	ea5f 4822 	movs.w	r8, r2, asr #16
 8019dc4:	d44d      	bmi.n	8019e62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019dc6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8019dca:	4544      	cmp	r4, r8
 8019dcc:	dd49      	ble.n	8019e62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019dce:	9c04      	ldr	r4, [sp, #16]
 8019dd0:	b236      	sxth	r6, r6
 8019dd2:	fb08 4606 	mla	r6, r8, r6, r4
 8019dd6:	f06f 0001 	mvn.w	r0, #1
 8019dda:	f816 8007 	ldrb.w	r8, [r6, r7]
 8019dde:	9c01      	ldr	r4, [sp, #4]
 8019de0:	fb00 fa0e 	mul.w	sl, r0, lr
 8019de4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019de8:	9800      	ldr	r0, [sp, #0]
 8019dea:	eb04 0b08 	add.w	fp, r4, r8
 8019dee:	f830 400a 	ldrh.w	r4, [r0, sl]
 8019df2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019df6:	9801      	ldr	r0, [sp, #4]
 8019df8:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019dfc:	f810 8008 	ldrb.w	r8, [r0, r8]
 8019e00:	9800      	ldr	r0, [sp, #0]
 8019e02:	1227      	asrs	r7, r4, #8
 8019e04:	fb16 f609 	smulbb	r6, r6, r9
 8019e08:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019e0c:	fb07 6705 	mla	r7, r7, r5, r6
 8019e10:	10e6      	asrs	r6, r4, #3
 8019e12:	00e4      	lsls	r4, r4, #3
 8019e14:	b2e4      	uxtb	r4, r4
 8019e16:	fb1b fb09 	smulbb	fp, fp, r9
 8019e1a:	fb14 f405 	smulbb	r4, r4, r5
 8019e1e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019e22:	b2bf      	uxth	r7, r7
 8019e24:	fb06 b605 	mla	r6, r6, r5, fp
 8019e28:	fb08 4809 	mla	r8, r8, r9, r4
 8019e2c:	b2b6      	uxth	r6, r6
 8019e2e:	fa1f f888 	uxth.w	r8, r8
 8019e32:	1c7c      	adds	r4, r7, #1
 8019e34:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8019e38:	f106 0b01 	add.w	fp, r6, #1
 8019e3c:	f108 0401 	add.w	r4, r8, #1
 8019e40:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8019e44:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8019e48:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019e4c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8019e50:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019e54:	4327      	orrs	r7, r4
 8019e56:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019e5a:	ea47 070b 	orr.w	r7, r7, fp
 8019e5e:	f820 700a 	strh.w	r7, [r0, sl]
 8019e62:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019e64:	4401      	add	r1, r0
 8019e66:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019e68:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019e6c:	4402      	add	r2, r0
 8019e6e:	e759      	b.n	8019d24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8019e70:	b007      	add	sp, #28
 8019e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019e78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e7c:	b085      	sub	sp, #20
 8019e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e82:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019e84:	9203      	str	r2, [sp, #12]
 8019e86:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019e8a:	6870      	ldr	r0, [r6, #4]
 8019e8c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019e8e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8019e92:	686f      	ldr	r7, [r5, #4]
 8019e94:	9101      	str	r1, [sp, #4]
 8019e96:	fb00 2404 	mla	r4, r0, r4, r2
 8019e9a:	6832      	ldr	r2, [r6, #0]
 8019e9c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019ea0:	682a      	ldr	r2, [r5, #0]
 8019ea2:	9202      	str	r2, [sp, #8]
 8019ea4:	3704      	adds	r7, #4
 8019ea6:	9a01      	ldr	r2, [sp, #4]
 8019ea8:	2a00      	cmp	r2, #0
 8019eaa:	dc03      	bgt.n	8019eb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019eac:	9a03      	ldr	r2, [sp, #12]
 8019eae:	2a00      	cmp	r2, #0
 8019eb0:	f340 80cc 	ble.w	801a04c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8019eb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019eb6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019eba:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019ebe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019ec2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019ec4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	dd0d      	ble.n	8019ee8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019ecc:	1406      	asrs	r6, r0, #16
 8019ece:	d405      	bmi.n	8019edc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019ed0:	454e      	cmp	r6, r9
 8019ed2:	da03      	bge.n	8019edc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019ed4:	1416      	asrs	r6, r2, #16
 8019ed6:	d401      	bmi.n	8019edc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019ed8:	4546      	cmp	r6, r8
 8019eda:	db06      	blt.n	8019eea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019edc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019ede:	4460      	add	r0, ip
 8019ee0:	4432      	add	r2, r6
 8019ee2:	3b01      	subs	r3, #1
 8019ee4:	3402      	adds	r4, #2
 8019ee6:	e7ef      	b.n	8019ec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019ee8:	d00f      	beq.n	8019f0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019eea:	1e5e      	subs	r6, r3, #1
 8019eec:	fb0c 0e06 	mla	lr, ip, r6, r0
 8019ef0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8019ef4:	d543      	bpl.n	8019f7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8019ef6:	4698      	mov	r8, r3
 8019ef8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8019efc:	f1b8 0f00 	cmp.w	r8, #0
 8019f00:	dc71      	bgt.n	8019fe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8019f02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f06:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019f0a:	9b01      	ldr	r3, [sp, #4]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	f340 809d 	ble.w	801a04c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8019f12:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f28:	eeb0 6a62 	vmov.f32	s12, s5
 8019f2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f38:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019f3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f40:	eeb0 6a43 	vmov.f32	s12, s6
 8019f44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f48:	ee12 2a90 	vmov	r2, s5
 8019f4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f50:	fb92 fcf3 	sdiv	ip, r2, r3
 8019f54:	ee13 2a10 	vmov	r2, s6
 8019f58:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f5c:	9312      	str	r3, [sp, #72]	; 0x48
 8019f5e:	9b01      	ldr	r3, [sp, #4]
 8019f60:	9a03      	ldr	r2, [sp, #12]
 8019f62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f66:	3b01      	subs	r3, #1
 8019f68:	9301      	str	r3, [sp, #4]
 8019f6a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f70:	eeb0 3a67 	vmov.f32	s6, s15
 8019f74:	bf08      	it	eq
 8019f76:	4613      	moveq	r3, r2
 8019f78:	eef0 2a47 	vmov.f32	s5, s14
 8019f7c:	e793      	b.n	8019ea6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019f7e:	45ce      	cmp	lr, r9
 8019f80:	dab9      	bge.n	8019ef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019f82:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019f84:	fb01 2606 	mla	r6, r1, r6, r2
 8019f88:	1436      	asrs	r6, r6, #16
 8019f8a:	d4b4      	bmi.n	8019ef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019f8c:	4546      	cmp	r6, r8
 8019f8e:	dab2      	bge.n	8019ef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019f90:	4698      	mov	r8, r3
 8019f92:	46a2      	mov	sl, r4
 8019f94:	f1b8 0f00 	cmp.w	r8, #0
 8019f98:	ddb3      	ble.n	8019f02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019f9a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019f9e:	9902      	ldr	r1, [sp, #8]
 8019fa0:	1416      	asrs	r6, r2, #16
 8019fa2:	fb09 1606 	mla	r6, r9, r6, r1
 8019fa6:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8019faa:	492a      	ldr	r1, [pc, #168]	; (801a054 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8019fac:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8019fb0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019fb4:	eb07 0b0e 	add.w	fp, r7, lr
 8019fb8:	4460      	add	r0, ip
 8019fba:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8019fbe:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019fc2:	00f6      	lsls	r6, r6, #3
 8019fc4:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8019fc8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019fcc:	ea49 0606 	orr.w	r6, r9, r6
 8019fd0:	f817 900e 	ldrb.w	r9, [r7, lr]
 8019fd4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019fd6:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8019fda:	f82a 6b02 	strh.w	r6, [sl], #2
 8019fde:	440a      	add	r2, r1
 8019fe0:	f108 38ff 	add.w	r8, r8, #4294967295
 8019fe4:	e7d6      	b.n	8019f94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019fe6:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019fea:	d429      	bmi.n	801a040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019fec:	68ae      	ldr	r6, [r5, #8]
 8019fee:	454e      	cmp	r6, r9
 8019ff0:	dd26      	ble.n	801a040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019ff2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8019ff6:	d423      	bmi.n	801a040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019ff8:	68e9      	ldr	r1, [r5, #12]
 8019ffa:	4559      	cmp	r1, fp
 8019ffc:	dd20      	ble.n	801a040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019ffe:	9902      	ldr	r1, [sp, #8]
 801a000:	fa0f fe86 	sxth.w	lr, r6
 801a004:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a008:	f06f 0101 	mvn.w	r1, #1
 801a00c:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a010:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a014:	eb07 060e 	add.w	r6, r7, lr
 801a018:	fb01 f908 	mul.w	r9, r1, r8
 801a01c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a020:	7876      	ldrb	r6, [r6, #1]
 801a022:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a026:	00f6      	lsls	r6, r6, #3
 801a028:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a02c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a030:	ea4b 0606 	orr.w	r6, fp, r6
 801a034:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a038:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a03c:	f82a 6009 	strh.w	r6, [sl, r9]
 801a040:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a042:	4460      	add	r0, ip
 801a044:	440a      	add	r2, r1
 801a046:	f108 38ff 	add.w	r8, r8, #4294967295
 801a04a:	e757      	b.n	8019efc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a04c:	b005      	add	sp, #20
 801a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a052:	bf00      	nop
 801a054:	fffff800 	.word	0xfffff800

0801a058 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a05c:	b087      	sub	sp, #28
 801a05e:	468b      	mov	fp, r1
 801a060:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a062:	9204      	str	r2, [sp, #16]
 801a064:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a068:	9205      	str	r2, [sp, #20]
 801a06a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a06e:	6841      	ldr	r1, [r0, #4]
 801a070:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a074:	fb01 2404 	mla	r4, r1, r4, r2
 801a078:	6802      	ldr	r2, [r0, #0]
 801a07a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a07e:	f8dc 2000 	ldr.w	r2, [ip]
 801a082:	9201      	str	r2, [sp, #4]
 801a084:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a088:	3204      	adds	r2, #4
 801a08a:	9202      	str	r2, [sp, #8]
 801a08c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a090:	f1bb 0f00 	cmp.w	fp, #0
 801a094:	dc03      	bgt.n	801a09e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a096:	9a04      	ldr	r2, [sp, #16]
 801a098:	2a00      	cmp	r2, #0
 801a09a:	f340 8138 	ble.w	801a30e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a09e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a0a0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a0a4:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a0a8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a0ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0ae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	dd0e      	ble.n	801a0d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a0b6:	1402      	asrs	r2, r0, #16
 801a0b8:	d405      	bmi.n	801a0c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a0ba:	42ba      	cmp	r2, r7
 801a0bc:	da03      	bge.n	801a0c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a0be:	140a      	asrs	r2, r1, #16
 801a0c0:	d401      	bmi.n	801a0c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a0c2:	42b2      	cmp	r2, r6
 801a0c4:	db07      	blt.n	801a0d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a0c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a0c8:	4410      	add	r0, r2
 801a0ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a0cc:	3b01      	subs	r3, #1
 801a0ce:	4411      	add	r1, r2
 801a0d0:	3402      	adds	r4, #2
 801a0d2:	e7ee      	b.n	801a0b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a0d4:	d019      	beq.n	801a10a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a0d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a0d8:	1e5a      	subs	r2, r3, #1
 801a0da:	fb05 0502 	mla	r5, r5, r2, r0
 801a0de:	142d      	asrs	r5, r5, #16
 801a0e0:	d409      	bmi.n	801a0f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a0e2:	42bd      	cmp	r5, r7
 801a0e4:	da07      	bge.n	801a0f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a0e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a0e8:	fb05 1202 	mla	r2, r5, r2, r1
 801a0ec:	1412      	asrs	r2, r2, #16
 801a0ee:	d402      	bmi.n	801a0f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a0f0:	42b2      	cmp	r2, r6
 801a0f2:	f2c0 80ac 	blt.w	801a24e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a0f6:	f04f 0e00 	mov.w	lr, #0
 801a0fa:	eb03 020e 	add.w	r2, r3, lr
 801a0fe:	2a00      	cmp	r2, #0
 801a100:	dc3e      	bgt.n	801a180 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a102:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a106:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a10a:	f1bb 0f00 	cmp.w	fp, #0
 801a10e:	f340 80fe 	ble.w	801a30e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a112:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a116:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a11a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a11e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a120:	f1bb 0b01 	subs.w	fp, fp, #1
 801a124:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a128:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a12c:	eeb0 6a62 	vmov.f32	s12, s5
 801a130:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a134:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a138:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a13c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a140:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a144:	eeb0 6a43 	vmov.f32	s12, s6
 801a148:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a14c:	ee12 2a90 	vmov	r2, s5
 801a150:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a154:	fb92 f3f3 	sdiv	r3, r2, r3
 801a158:	ee13 2a10 	vmov	r2, s6
 801a15c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a160:	9313      	str	r3, [sp, #76]	; 0x4c
 801a162:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a164:	fb92 f3f3 	sdiv	r3, r2, r3
 801a168:	9a04      	ldr	r2, [sp, #16]
 801a16a:	9314      	str	r3, [sp, #80]	; 0x50
 801a16c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a170:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a172:	eeb0 3a67 	vmov.f32	s6, s15
 801a176:	bf08      	it	eq
 801a178:	4613      	moveq	r3, r2
 801a17a:	eef0 2a47 	vmov.f32	s5, s14
 801a17e:	e787      	b.n	801a090 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a180:	1406      	asrs	r6, r0, #16
 801a182:	d45d      	bmi.n	801a240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a184:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a188:	42b5      	cmp	r5, r6
 801a18a:	dd59      	ble.n	801a240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a18c:	140f      	asrs	r7, r1, #16
 801a18e:	d457      	bmi.n	801a240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a190:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a194:	42ba      	cmp	r2, r7
 801a196:	dd53      	ble.n	801a240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a198:	9a01      	ldr	r2, [sp, #4]
 801a19a:	b22d      	sxth	r5, r5
 801a19c:	fb07 2505 	mla	r5, r7, r5, r2
 801a1a0:	5daa      	ldrb	r2, [r5, r6]
 801a1a2:	9d02      	ldr	r5, [sp, #8]
 801a1a4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a1a8:	0e2e      	lsrs	r6, r5, #24
 801a1aa:	d049      	beq.n	801a240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a1ac:	f06f 0201 	mvn.w	r2, #1
 801a1b0:	fb02 f20e 	mul.w	r2, r2, lr
 801a1b4:	9203      	str	r2, [sp, #12]
 801a1b6:	f834 8002 	ldrh.w	r8, [r4, r2]
 801a1ba:	9a05      	ldr	r2, [sp, #20]
 801a1bc:	4356      	muls	r6, r2
 801a1be:	1c72      	adds	r2, r6, #1
 801a1c0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a1c4:	1212      	asrs	r2, r2, #8
 801a1c6:	fa1f f982 	uxth.w	r9, r2
 801a1ca:	ea4f 2728 	mov.w	r7, r8, asr #8
 801a1ce:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a1d2:	43d2      	mvns	r2, r2
 801a1d4:	b2d2      	uxtb	r2, r2
 801a1d6:	fb16 f609 	smulbb	r6, r6, r9
 801a1da:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a1de:	fb07 6702 	mla	r7, r7, r2, r6
 801a1e2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a1e6:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a1ea:	b2ed      	uxtb	r5, r5
 801a1ec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a1f0:	fa5f f888 	uxtb.w	r8, r8
 801a1f4:	fb15 f509 	smulbb	r5, r5, r9
 801a1f8:	fb08 5502 	mla	r5, r8, r2, r5
 801a1fc:	b2bf      	uxth	r7, r7
 801a1fe:	fb1a fa09 	smulbb	sl, sl, r9
 801a202:	b2ad      	uxth	r5, r5
 801a204:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a208:	fb06 a602 	mla	r6, r6, r2, sl
 801a20c:	1c7a      	adds	r2, r7, #1
 801a20e:	f105 0a01 	add.w	sl, r5, #1
 801a212:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a216:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a21a:	b2b6      	uxth	r6, r6
 801a21c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a220:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a224:	ea47 070a 	orr.w	r7, r7, sl
 801a228:	f106 0a01 	add.w	sl, r6, #1
 801a22c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a230:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a234:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a238:	9a03      	ldr	r2, [sp, #12]
 801a23a:	ea47 070a 	orr.w	r7, r7, sl
 801a23e:	52a7      	strh	r7, [r4, r2]
 801a240:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a242:	4410      	add	r0, r2
 801a244:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a246:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a24a:	4411      	add	r1, r2
 801a24c:	e755      	b.n	801a0fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a24e:	f04f 0800 	mov.w	r8, #0
 801a252:	eba3 0208 	sub.w	r2, r3, r8
 801a256:	2a00      	cmp	r2, #0
 801a258:	f77f af53 	ble.w	801a102 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a25c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801a260:	9f01      	ldr	r7, [sp, #4]
 801a262:	140a      	asrs	r2, r1, #16
 801a264:	1405      	asrs	r5, r0, #16
 801a266:	fb06 7202 	mla	r2, r6, r2, r7
 801a26a:	5d52      	ldrb	r2, [r2, r5]
 801a26c:	9d02      	ldr	r5, [sp, #8]
 801a26e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a272:	0e2e      	lsrs	r6, r5, #24
 801a274:	d044      	beq.n	801a300 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801a276:	9a05      	ldr	r2, [sp, #20]
 801a278:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801a27c:	4356      	muls	r6, r2
 801a27e:	1c72      	adds	r2, r6, #1
 801a280:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a284:	1212      	asrs	r2, r2, #8
 801a286:	fa1f f982 	uxth.w	r9, r2
 801a28a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a28e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a292:	43d2      	mvns	r2, r2
 801a294:	b2d2      	uxtb	r2, r2
 801a296:	fb16 f609 	smulbb	r6, r6, r9
 801a29a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a29e:	fb07 6702 	mla	r7, r7, r2, r6
 801a2a2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a2a6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a2aa:	b2ed      	uxtb	r5, r5
 801a2ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a2b0:	fa5f fe8e 	uxtb.w	lr, lr
 801a2b4:	fb15 f509 	smulbb	r5, r5, r9
 801a2b8:	fb0e 5502 	mla	r5, lr, r2, r5
 801a2bc:	b2bf      	uxth	r7, r7
 801a2be:	fb1a fa09 	smulbb	sl, sl, r9
 801a2c2:	b2ad      	uxth	r5, r5
 801a2c4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a2c8:	fb06 a602 	mla	r6, r6, r2, sl
 801a2cc:	1c7a      	adds	r2, r7, #1
 801a2ce:	f105 0a01 	add.w	sl, r5, #1
 801a2d2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a2d6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a2da:	b2b6      	uxth	r6, r6
 801a2dc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a2e0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a2e4:	ea47 070a 	orr.w	r7, r7, sl
 801a2e8:	f106 0a01 	add.w	sl, r6, #1
 801a2ec:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a2f0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a2f4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a2f8:	ea47 070a 	orr.w	r7, r7, sl
 801a2fc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a300:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a302:	4410      	add	r0, r2
 801a304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a306:	f108 0801 	add.w	r8, r8, #1
 801a30a:	4411      	add	r1, r2
 801a30c:	e7a1      	b.n	801a252 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801a30e:	b007      	add	sp, #28
 801a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a314 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a318:	b085      	sub	sp, #20
 801a31a:	468b      	mov	fp, r1
 801a31c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a31e:	9203      	str	r2, [sp, #12]
 801a320:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a324:	6841      	ldr	r1, [r0, #4]
 801a326:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a32a:	fb01 2404 	mla	r4, r1, r4, r2
 801a32e:	6802      	ldr	r2, [r0, #0]
 801a330:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a334:	f8de 2000 	ldr.w	r2, [lr]
 801a338:	9200      	str	r2, [sp, #0]
 801a33a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a33e:	3204      	adds	r2, #4
 801a340:	9201      	str	r2, [sp, #4]
 801a342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a346:	f1bb 0f00 	cmp.w	fp, #0
 801a34a:	dc03      	bgt.n	801a354 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a34c:	9a03      	ldr	r2, [sp, #12]
 801a34e:	2a00      	cmp	r2, #0
 801a350:	f340 8153 	ble.w	801a5fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a354:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a356:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a35a:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a35e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a362:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a364:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a368:	2b00      	cmp	r3, #0
 801a36a:	dd0e      	ble.n	801a38a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a36c:	1408      	asrs	r0, r1, #16
 801a36e:	d405      	bmi.n	801a37c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a370:	42b8      	cmp	r0, r7
 801a372:	da03      	bge.n	801a37c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a374:	1410      	asrs	r0, r2, #16
 801a376:	d401      	bmi.n	801a37c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a378:	42b0      	cmp	r0, r6
 801a37a:	db07      	blt.n	801a38c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a37c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a37e:	4401      	add	r1, r0
 801a380:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a382:	3b01      	subs	r3, #1
 801a384:	4402      	add	r2, r0
 801a386:	3402      	adds	r4, #2
 801a388:	e7ee      	b.n	801a368 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a38a:	d017      	beq.n	801a3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a38c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a38e:	1e58      	subs	r0, r3, #1
 801a390:	fb05 1500 	mla	r5, r5, r0, r1
 801a394:	142d      	asrs	r5, r5, #16
 801a396:	d409      	bmi.n	801a3ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a398:	42bd      	cmp	r5, r7
 801a39a:	da07      	bge.n	801a3ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a39c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a39e:	fb05 2000 	mla	r0, r5, r0, r2
 801a3a2:	1400      	asrs	r0, r0, #16
 801a3a4:	d402      	bmi.n	801a3ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a3a6:	42b0      	cmp	r0, r6
 801a3a8:	f2c0 80bc 	blt.w	801a524 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801a3ac:	2600      	movs	r6, #0
 801a3ae:	1998      	adds	r0, r3, r6
 801a3b0:	2800      	cmp	r0, #0
 801a3b2:	dc3e      	bgt.n	801a432 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a3b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a3b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a3bc:	f1bb 0f00 	cmp.w	fp, #0
 801a3c0:	f340 811b 	ble.w	801a5fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a3c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a3c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a3cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a3d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3d2:	f1bb 0b01 	subs.w	fp, fp, #1
 801a3d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a3da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a3de:	eeb0 6a62 	vmov.f32	s12, s5
 801a3e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a3e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a3ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a3ee:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a3f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a3f6:	eeb0 6a43 	vmov.f32	s12, s6
 801a3fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a3fe:	ee12 2a90 	vmov	r2, s5
 801a402:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a406:	fb92 f3f3 	sdiv	r3, r2, r3
 801a40a:	ee13 2a10 	vmov	r2, s6
 801a40e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a412:	9311      	str	r3, [sp, #68]	; 0x44
 801a414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a416:	fb92 f3f3 	sdiv	r3, r2, r3
 801a41a:	9a03      	ldr	r2, [sp, #12]
 801a41c:	9312      	str	r3, [sp, #72]	; 0x48
 801a41e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a424:	eeb0 3a67 	vmov.f32	s6, s15
 801a428:	bf08      	it	eq
 801a42a:	4613      	moveq	r3, r2
 801a42c:	eef0 2a47 	vmov.f32	s5, s14
 801a430:	e789      	b.n	801a346 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a432:	140f      	asrs	r7, r1, #16
 801a434:	d45e      	bmi.n	801a4f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a436:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a43a:	42bd      	cmp	r5, r7
 801a43c:	dd5a      	ble.n	801a4f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a43e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a442:	d457      	bmi.n	801a4f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a444:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a448:	4560      	cmp	r0, ip
 801a44a:	dd53      	ble.n	801a4f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a44c:	9800      	ldr	r0, [sp, #0]
 801a44e:	b22d      	sxth	r5, r5
 801a450:	fb0c 0505 	mla	r5, ip, r5, r0
 801a454:	5de8      	ldrb	r0, [r5, r7]
 801a456:	9d01      	ldr	r5, [sp, #4]
 801a458:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a45c:	0e07      	lsrs	r7, r0, #24
 801a45e:	2fff      	cmp	r7, #255	; 0xff
 801a460:	d04e      	beq.n	801a500 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801a462:	b2fd      	uxtb	r5, r7
 801a464:	2f00      	cmp	r7, #0
 801a466:	d045      	beq.n	801a4f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a468:	f06f 0701 	mvn.w	r7, #1
 801a46c:	4377      	muls	r7, r6
 801a46e:	fa1f f985 	uxth.w	r9, r5
 801a472:	f834 8007 	ldrh.w	r8, [r4, r7]
 801a476:	9702      	str	r7, [sp, #8]
 801a478:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a47c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a480:	43ed      	mvns	r5, r5
 801a482:	b2ed      	uxtb	r5, r5
 801a484:	fb17 f709 	smulbb	r7, r7, r9
 801a488:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a48c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a490:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a494:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a498:	b2c0      	uxtb	r0, r0
 801a49a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a49e:	fa5f f888 	uxtb.w	r8, r8
 801a4a2:	fb10 f009 	smulbb	r0, r0, r9
 801a4a6:	fb08 0005 	mla	r0, r8, r5, r0
 801a4aa:	b280      	uxth	r0, r0
 801a4ac:	fa1f fc8c 	uxth.w	ip, ip
 801a4b0:	fb1a fa09 	smulbb	sl, sl, r9
 801a4b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a4b8:	fb07 a705 	mla	r7, r7, r5, sl
 801a4bc:	f100 0a01 	add.w	sl, r0, #1
 801a4c0:	f10c 0501 	add.w	r5, ip, #1
 801a4c4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a4c8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a4cc:	b2bf      	uxth	r7, r7
 801a4ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a4d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a4d6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a4da:	f107 0a01 	add.w	sl, r7, #1
 801a4de:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a4e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a4e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a4ea:	9802      	ldr	r0, [sp, #8]
 801a4ec:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a4f0:	f824 c000 	strh.w	ip, [r4, r0]
 801a4f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a4f6:	4401      	add	r1, r0
 801a4f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a4fa:	3e01      	subs	r6, #1
 801a4fc:	4402      	add	r2, r0
 801a4fe:	e756      	b.n	801a3ae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a500:	f06f 0501 	mvn.w	r5, #1
 801a504:	fb05 f706 	mul.w	r7, r5, r6
 801a508:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a50c:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a510:	0945      	lsrs	r5, r0, #5
 801a512:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a516:	ea4c 0505 	orr.w	r5, ip, r5
 801a51a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a51e:	4305      	orrs	r5, r0
 801a520:	53e5      	strh	r5, [r4, r7]
 801a522:	e7e7      	b.n	801a4f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a524:	f04f 0800 	mov.w	r8, #0
 801a528:	eba3 0008 	sub.w	r0, r3, r8
 801a52c:	2800      	cmp	r0, #0
 801a52e:	f77f af41 	ble.w	801a3b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a532:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a536:	9f00      	ldr	r7, [sp, #0]
 801a538:	1410      	asrs	r0, r2, #16
 801a53a:	140d      	asrs	r5, r1, #16
 801a53c:	fb06 7000 	mla	r0, r6, r0, r7
 801a540:	5d40      	ldrb	r0, [r0, r5]
 801a542:	9d01      	ldr	r5, [sp, #4]
 801a544:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a548:	0e06      	lsrs	r6, r0, #24
 801a54a:	2eff      	cmp	r6, #255	; 0xff
 801a54c:	d048      	beq.n	801a5e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801a54e:	b2f5      	uxtb	r5, r6
 801a550:	2e00      	cmp	r6, #0
 801a552:	d03e      	beq.n	801a5d2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801a554:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a558:	fa1f f985 	uxth.w	r9, r5
 801a55c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a560:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801a564:	43ed      	mvns	r5, r5
 801a566:	b2ed      	uxtb	r5, r5
 801a568:	fb16 f609 	smulbb	r6, r6, r9
 801a56c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a570:	fb07 6705 	mla	r7, r7, r5, r6
 801a574:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a578:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a57c:	b2c0      	uxtb	r0, r0
 801a57e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a582:	fa5f fc8c 	uxtb.w	ip, ip
 801a586:	fb10 f009 	smulbb	r0, r0, r9
 801a58a:	fb0c 0005 	mla	r0, ip, r5, r0
 801a58e:	b2bf      	uxth	r7, r7
 801a590:	fb1a fa09 	smulbb	sl, sl, r9
 801a594:	b280      	uxth	r0, r0
 801a596:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a59a:	fb06 a605 	mla	r6, r6, r5, sl
 801a59e:	1c7d      	adds	r5, r7, #1
 801a5a0:	f100 0a01 	add.w	sl, r0, #1
 801a5a4:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801a5a8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a5ac:	b2b6      	uxth	r6, r6
 801a5ae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a5b2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a5b6:	ea47 070a 	orr.w	r7, r7, sl
 801a5ba:	f106 0a01 	add.w	sl, r6, #1
 801a5be:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a5c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a5c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a5ca:	ea47 070a 	orr.w	r7, r7, sl
 801a5ce:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a5d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a5d4:	4401      	add	r1, r0
 801a5d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a5d8:	f108 0801 	add.w	r8, r8, #1
 801a5dc:	4402      	add	r2, r0
 801a5de:	e7a3      	b.n	801a528 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a5e0:	4d07      	ldr	r5, [pc, #28]	; (801a600 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801a5e2:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801a5e6:	0945      	lsrs	r5, r0, #5
 801a5e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a5ec:	4335      	orrs	r5, r6
 801a5ee:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a5f2:	4305      	orrs	r5, r0
 801a5f4:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801a5f8:	e7eb      	b.n	801a5d2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801a5fa:	b005      	add	sp, #20
 801a5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a600:	fffff800 	.word	0xfffff800

0801a604 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a608:	b087      	sub	sp, #28
 801a60a:	468b      	mov	fp, r1
 801a60c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a60e:	9204      	str	r2, [sp, #16]
 801a610:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a614:	9205      	str	r2, [sp, #20]
 801a616:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a61a:	6861      	ldr	r1, [r4, #4]
 801a61c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a620:	fb01 2000 	mla	r0, r1, r0, r2
 801a624:	6822      	ldr	r2, [r4, #0]
 801a626:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a62a:	f8de 2000 	ldr.w	r2, [lr]
 801a62e:	9201      	str	r2, [sp, #4]
 801a630:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a634:	9202      	str	r2, [sp, #8]
 801a636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a63a:	f1bb 0f00 	cmp.w	fp, #0
 801a63e:	dc03      	bgt.n	801a648 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a640:	9a04      	ldr	r2, [sp, #16]
 801a642:	2a00      	cmp	r2, #0
 801a644:	f340 8142 	ble.w	801a8cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a648:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a64a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a64e:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a652:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a656:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a658:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	dd0e      	ble.n	801a67e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a660:	140c      	asrs	r4, r1, #16
 801a662:	d405      	bmi.n	801a670 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a664:	42bc      	cmp	r4, r7
 801a666:	da03      	bge.n	801a670 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a668:	1414      	asrs	r4, r2, #16
 801a66a:	d401      	bmi.n	801a670 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a66c:	42b4      	cmp	r4, r6
 801a66e:	db07      	blt.n	801a680 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a670:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a672:	4421      	add	r1, r4
 801a674:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a676:	3b01      	subs	r3, #1
 801a678:	4422      	add	r2, r4
 801a67a:	3002      	adds	r0, #2
 801a67c:	e7ee      	b.n	801a65c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801a67e:	d019      	beq.n	801a6b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801a680:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a682:	1e5c      	subs	r4, r3, #1
 801a684:	fb05 1504 	mla	r5, r5, r4, r1
 801a688:	142d      	asrs	r5, r5, #16
 801a68a:	d409      	bmi.n	801a6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801a68c:	42bd      	cmp	r5, r7
 801a68e:	da07      	bge.n	801a6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801a690:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a692:	fb05 2404 	mla	r4, r5, r4, r2
 801a696:	1424      	asrs	r4, r4, #16
 801a698:	d402      	bmi.n	801a6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801a69a:	42b4      	cmp	r4, r6
 801a69c:	f2c0 80b1 	blt.w	801a802 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801a6a0:	f04f 0800 	mov.w	r8, #0
 801a6a4:	eb03 0408 	add.w	r4, r3, r8
 801a6a8:	2c00      	cmp	r4, #0
 801a6aa:	dc3e      	bgt.n	801a72a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a6ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a6b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a6b4:	f1bb 0f00 	cmp.w	fp, #0
 801a6b8:	f340 8108 	ble.w	801a8cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a6bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a6c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a6c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a6ca:	f1bb 0b01 	subs.w	fp, fp, #1
 801a6ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a6d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a6d6:	eeb0 6a62 	vmov.f32	s12, s5
 801a6da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a6de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a6e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a6e6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a6ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a6ee:	eeb0 6a43 	vmov.f32	s12, s6
 801a6f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a6f6:	ee12 2a90 	vmov	r2, s5
 801a6fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a6fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801a702:	ee13 2a10 	vmov	r2, s6
 801a706:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a70a:	9313      	str	r3, [sp, #76]	; 0x4c
 801a70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a70e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a712:	9a04      	ldr	r2, [sp, #16]
 801a714:	9314      	str	r3, [sp, #80]	; 0x50
 801a716:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a71a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a71c:	eeb0 3a67 	vmov.f32	s6, s15
 801a720:	bf08      	it	eq
 801a722:	4613      	moveq	r3, r2
 801a724:	eef0 2a47 	vmov.f32	s5, s14
 801a728:	e787      	b.n	801a63a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a72a:	140e      	asrs	r6, r1, #16
 801a72c:	d462      	bmi.n	801a7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a72e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a732:	42b5      	cmp	r5, r6
 801a734:	dd5e      	ble.n	801a7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a736:	1417      	asrs	r7, r2, #16
 801a738:	d45c      	bmi.n	801a7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a73a:	f8de 400c 	ldr.w	r4, [lr, #12]
 801a73e:	42bc      	cmp	r4, r7
 801a740:	dd58      	ble.n	801a7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a742:	b22d      	sxth	r5, r5
 801a744:	fb07 6505 	mla	r5, r7, r5, r6
 801a748:	9c02      	ldr	r4, [sp, #8]
 801a74a:	5d66      	ldrb	r6, [r4, r5]
 801a74c:	2e00      	cmp	r6, #0
 801a74e:	d051      	beq.n	801a7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a750:	9c01      	ldr	r4, [sp, #4]
 801a752:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801a756:	f06f 0401 	mvn.w	r4, #1
 801a75a:	fb04 f408 	mul.w	r4, r4, r8
 801a75e:	9403      	str	r4, [sp, #12]
 801a760:	5b05      	ldrh	r5, [r0, r4]
 801a762:	9c05      	ldr	r4, [sp, #20]
 801a764:	4366      	muls	r6, r4
 801a766:	1c74      	adds	r4, r6, #1
 801a768:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801a76c:	1224      	asrs	r4, r4, #8
 801a76e:	b2a7      	uxth	r7, r4
 801a770:	122e      	asrs	r6, r5, #8
 801a772:	43e4      	mvns	r4, r4
 801a774:	b2e4      	uxtb	r4, r4
 801a776:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801a77a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a77e:	fb16 f604 	smulbb	r6, r6, r4
 801a782:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a786:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a78a:	00ed      	lsls	r5, r5, #3
 801a78c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a790:	b2ed      	uxtb	r5, r5
 801a792:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801a796:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801a79a:	fb15 f504 	smulbb	r5, r5, r4
 801a79e:	fa5f f989 	uxtb.w	r9, r9
 801a7a2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a7a6:	fb09 5507 	mla	r5, r9, r7, r5
 801a7aa:	fb1a fa04 	smulbb	sl, sl, r4
 801a7ae:	fa1f fc8c 	uxth.w	ip, ip
 801a7b2:	b2ad      	uxth	r5, r5
 801a7b4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a7b8:	fb06 a607 	mla	r6, r6, r7, sl
 801a7bc:	f10c 0401 	add.w	r4, ip, #1
 801a7c0:	f105 0a01 	add.w	sl, r5, #1
 801a7c4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a7c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a7cc:	b2b6      	uxth	r6, r6
 801a7ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a7d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a7d6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a7da:	f106 0a01 	add.w	sl, r6, #1
 801a7de:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a7e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a7e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a7ea:	9c03      	ldr	r4, [sp, #12]
 801a7ec:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a7f0:	f820 c004 	strh.w	ip, [r0, r4]
 801a7f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a7f6:	4421      	add	r1, r4
 801a7f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a7fa:	f108 38ff 	add.w	r8, r8, #4294967295
 801a7fe:	4422      	add	r2, r4
 801a800:	e750      	b.n	801a6a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a802:	f04f 0900 	mov.w	r9, #0
 801a806:	eba3 0409 	sub.w	r4, r3, r9
 801a80a:	2c00      	cmp	r4, #0
 801a80c:	f77f af4e 	ble.w	801a6ac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a810:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a814:	140d      	asrs	r5, r1, #16
 801a816:	1414      	asrs	r4, r2, #16
 801a818:	fb06 5404 	mla	r4, r6, r4, r5
 801a81c:	9d02      	ldr	r5, [sp, #8]
 801a81e:	5d2e      	ldrb	r6, [r5, r4]
 801a820:	2e00      	cmp	r6, #0
 801a822:	d04c      	beq.n	801a8be <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801a824:	9d01      	ldr	r5, [sp, #4]
 801a826:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801a82a:	9c05      	ldr	r4, [sp, #20]
 801a82c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801a830:	4366      	muls	r6, r4
 801a832:	1c74      	adds	r4, r6, #1
 801a834:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801a838:	1224      	asrs	r4, r4, #8
 801a83a:	b2a7      	uxth	r7, r4
 801a83c:	122e      	asrs	r6, r5, #8
 801a83e:	43e4      	mvns	r4, r4
 801a840:	b2e4      	uxtb	r4, r4
 801a842:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a846:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a84a:	fb16 f604 	smulbb	r6, r6, r4
 801a84e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a852:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a856:	00ed      	lsls	r5, r5, #3
 801a858:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a85c:	b2ed      	uxtb	r5, r5
 801a85e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a862:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a866:	fb15 f504 	smulbb	r5, r5, r4
 801a86a:	fa5f f888 	uxtb.w	r8, r8
 801a86e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a872:	fb08 5507 	mla	r5, r8, r7, r5
 801a876:	fb1a fa04 	smulbb	sl, sl, r4
 801a87a:	fa1f fc8c 	uxth.w	ip, ip
 801a87e:	b2ad      	uxth	r5, r5
 801a880:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a884:	fb06 a607 	mla	r6, r6, r7, sl
 801a888:	f10c 0401 	add.w	r4, ip, #1
 801a88c:	f105 0a01 	add.w	sl, r5, #1
 801a890:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a894:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a898:	b2b6      	uxth	r6, r6
 801a89a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a89e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a8a2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a8a6:	f106 0a01 	add.w	sl, r6, #1
 801a8aa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a8ae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a8b2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a8b6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a8ba:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801a8be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a8c0:	4421      	add	r1, r4
 801a8c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a8c4:	f109 0901 	add.w	r9, r9, #1
 801a8c8:	4422      	add	r2, r4
 801a8ca:	e79c      	b.n	801a806 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801a8cc:	b007      	add	sp, #28
 801a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a8d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a8d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8d6:	b085      	sub	sp, #20
 801a8d8:	468b      	mov	fp, r1
 801a8da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a8dc:	9203      	str	r2, [sp, #12]
 801a8de:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801a8e2:	6861      	ldr	r1, [r4, #4]
 801a8e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a8e8:	fb01 2000 	mla	r0, r1, r0, r2
 801a8ec:	6822      	ldr	r2, [r4, #0]
 801a8ee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a8f2:	f8d8 2000 	ldr.w	r2, [r8]
 801a8f6:	9200      	str	r2, [sp, #0]
 801a8f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a8fc:	9201      	str	r2, [sp, #4]
 801a8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a902:	f1bb 0f00 	cmp.w	fp, #0
 801a906:	dc03      	bgt.n	801a910 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a908:	9a03      	ldr	r2, [sp, #12]
 801a90a:	2a00      	cmp	r2, #0
 801a90c:	f340 8146 	ble.w	801ab9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a912:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801a916:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801a91a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a91e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a920:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a924:	2b00      	cmp	r3, #0
 801a926:	dd0e      	ble.n	801a946 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a928:	140c      	asrs	r4, r1, #16
 801a92a:	d405      	bmi.n	801a938 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a92c:	42bc      	cmp	r4, r7
 801a92e:	da03      	bge.n	801a938 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a930:	1414      	asrs	r4, r2, #16
 801a932:	d401      	bmi.n	801a938 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a934:	42b4      	cmp	r4, r6
 801a936:	db07      	blt.n	801a948 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a938:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a93a:	4421      	add	r1, r4
 801a93c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a93e:	3b01      	subs	r3, #1
 801a940:	4422      	add	r2, r4
 801a942:	3002      	adds	r0, #2
 801a944:	e7ee      	b.n	801a924 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a946:	d017      	beq.n	801a978 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a948:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a94a:	1e5c      	subs	r4, r3, #1
 801a94c:	fb05 1504 	mla	r5, r5, r4, r1
 801a950:	142d      	asrs	r5, r5, #16
 801a952:	d409      	bmi.n	801a968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a954:	42bd      	cmp	r5, r7
 801a956:	da07      	bge.n	801a968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a958:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a95a:	fb05 2404 	mla	r4, r5, r4, r2
 801a95e:	1424      	asrs	r4, r4, #16
 801a960:	d402      	bmi.n	801a968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a962:	42b4      	cmp	r4, r6
 801a964:	f2c0 80b3 	blt.w	801aace <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801a968:	2600      	movs	r6, #0
 801a96a:	199c      	adds	r4, r3, r6
 801a96c:	2c00      	cmp	r4, #0
 801a96e:	dc3e      	bgt.n	801a9ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a974:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a978:	f1bb 0f00 	cmp.w	fp, #0
 801a97c:	f340 810e 	ble.w	801ab9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a980:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a984:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a988:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a98e:	f1bb 0b01 	subs.w	fp, fp, #1
 801a992:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a996:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a99a:	eeb0 6a62 	vmov.f32	s12, s5
 801a99e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a9a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a9a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a9aa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a9ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a9b2:	eeb0 6a43 	vmov.f32	s12, s6
 801a9b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a9ba:	ee12 2a90 	vmov	r2, s5
 801a9be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a9c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9c6:	ee13 2a10 	vmov	r2, s6
 801a9ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a9ce:	9311      	str	r3, [sp, #68]	; 0x44
 801a9d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9d6:	9a03      	ldr	r2, [sp, #12]
 801a9d8:	9312      	str	r3, [sp, #72]	; 0x48
 801a9da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a9de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9e0:	eeb0 3a67 	vmov.f32	s6, s15
 801a9e4:	bf08      	it	eq
 801a9e6:	4613      	moveq	r3, r2
 801a9e8:	eef0 2a47 	vmov.f32	s5, s14
 801a9ec:	e789      	b.n	801a902 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a9ee:	140f      	asrs	r7, r1, #16
 801a9f0:	d45f      	bmi.n	801aab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a9f2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a9f6:	42bd      	cmp	r5, r7
 801a9f8:	dd5b      	ble.n	801aab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a9fa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a9fe:	d458      	bmi.n	801aab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801aa00:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801aa04:	4564      	cmp	r4, ip
 801aa06:	dd54      	ble.n	801aab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801aa08:	b22d      	sxth	r5, r5
 801aa0a:	fb0c 7505 	mla	r5, ip, r5, r7
 801aa0e:	9c01      	ldr	r4, [sp, #4]
 801aa10:	5d64      	ldrb	r4, [r4, r5]
 801aa12:	2cff      	cmp	r4, #255	; 0xff
 801aa14:	d053      	beq.n	801aabe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801aa16:	2c00      	cmp	r4, #0
 801aa18:	d04b      	beq.n	801aab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801aa1a:	9f00      	ldr	r7, [sp, #0]
 801aa1c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801aa20:	f06f 0501 	mvn.w	r5, #1
 801aa24:	4375      	muls	r5, r6
 801aa26:	9502      	str	r5, [sp, #8]
 801aa28:	5b45      	ldrh	r5, [r0, r5]
 801aa2a:	fa1f fc84 	uxth.w	ip, r4
 801aa2e:	122f      	asrs	r7, r5, #8
 801aa30:	43e4      	mvns	r4, r4
 801aa32:	b2e4      	uxtb	r4, r4
 801aa34:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801aa38:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aa3c:	fb17 f704 	smulbb	r7, r7, r4
 801aa40:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801aa44:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801aa48:	00ed      	lsls	r5, r5, #3
 801aa4a:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801aa4e:	b2ed      	uxtb	r5, r5
 801aa50:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801aa54:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801aa58:	fb15 f504 	smulbb	r5, r5, r4
 801aa5c:	fa5f f989 	uxtb.w	r9, r9
 801aa60:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801aa64:	fb09 550c 	mla	r5, r9, ip, r5
 801aa68:	fb1a fa04 	smulbb	sl, sl, r4
 801aa6c:	fa1f fe8e 	uxth.w	lr, lr
 801aa70:	b2ad      	uxth	r5, r5
 801aa72:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aa76:	fb07 a70c 	mla	r7, r7, ip, sl
 801aa7a:	f10e 0401 	add.w	r4, lr, #1
 801aa7e:	f105 0a01 	add.w	sl, r5, #1
 801aa82:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801aa86:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801aa8a:	b2bf      	uxth	r7, r7
 801aa8c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aa90:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801aa94:	ea4e 0e0a 	orr.w	lr, lr, sl
 801aa98:	f107 0a01 	add.w	sl, r7, #1
 801aa9c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801aaa0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801aaa4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aaa8:	9c02      	ldr	r4, [sp, #8]
 801aaaa:	ea4e 0e0a 	orr.w	lr, lr, sl
 801aaae:	f820 e004 	strh.w	lr, [r0, r4]
 801aab2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aab4:	4421      	add	r1, r4
 801aab6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aab8:	3e01      	subs	r6, #1
 801aaba:	4422      	add	r2, r4
 801aabc:	e755      	b.n	801a96a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801aabe:	9c00      	ldr	r4, [sp, #0]
 801aac0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801aac4:	f06f 0401 	mvn.w	r4, #1
 801aac8:	4374      	muls	r4, r6
 801aaca:	5305      	strh	r5, [r0, r4]
 801aacc:	e7f1      	b.n	801aab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801aace:	f04f 0900 	mov.w	r9, #0
 801aad2:	eba3 0409 	sub.w	r4, r3, r9
 801aad6:	2c00      	cmp	r4, #0
 801aad8:	f77f af4a 	ble.w	801a970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801aadc:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801aae0:	1414      	asrs	r4, r2, #16
 801aae2:	140d      	asrs	r5, r1, #16
 801aae4:	fb06 5504 	mla	r5, r6, r4, r5
 801aae8:	9c01      	ldr	r4, [sp, #4]
 801aaea:	5d64      	ldrb	r4, [r4, r5]
 801aaec:	2cff      	cmp	r4, #255	; 0xff
 801aaee:	d04f      	beq.n	801ab90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801aaf0:	2c00      	cmp	r4, #0
 801aaf2:	d046      	beq.n	801ab82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801aaf4:	9e00      	ldr	r6, [sp, #0]
 801aaf6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801aafa:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801aafe:	b2a7      	uxth	r7, r4
 801ab00:	122e      	asrs	r6, r5, #8
 801ab02:	43e4      	mvns	r4, r4
 801ab04:	b2e4      	uxtb	r4, r4
 801ab06:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ab0a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ab0e:	fb16 f604 	smulbb	r6, r6, r4
 801ab12:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ab16:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ab1a:	00ed      	lsls	r5, r5, #3
 801ab1c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ab20:	b2ed      	uxtb	r5, r5
 801ab22:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ab26:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ab2a:	fb15 f504 	smulbb	r5, r5, r4
 801ab2e:	fa5f fe8e 	uxtb.w	lr, lr
 801ab32:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ab36:	fb0e 5507 	mla	r5, lr, r7, r5
 801ab3a:	fb1a fa04 	smulbb	sl, sl, r4
 801ab3e:	fa1f fc8c 	uxth.w	ip, ip
 801ab42:	b2ad      	uxth	r5, r5
 801ab44:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ab48:	fb06 a607 	mla	r6, r6, r7, sl
 801ab4c:	f10c 0401 	add.w	r4, ip, #1
 801ab50:	f105 0a01 	add.w	sl, r5, #1
 801ab54:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ab58:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ab5c:	b2b6      	uxth	r6, r6
 801ab5e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ab62:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ab66:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ab6a:	f106 0a01 	add.w	sl, r6, #1
 801ab6e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ab72:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ab76:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ab7a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ab7e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801ab82:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab84:	4421      	add	r1, r4
 801ab86:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ab88:	f109 0901 	add.w	r9, r9, #1
 801ab8c:	4422      	add	r2, r4
 801ab8e:	e7a0      	b.n	801aad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ab90:	9c00      	ldr	r4, [sp, #0]
 801ab92:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801ab96:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801ab9a:	e7f2      	b.n	801ab82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ab9c:	b005      	add	sp, #20
 801ab9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aba2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aba6:	b085      	sub	sp, #20
 801aba8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801abaa:	9203      	str	r2, [sp, #12]
 801abac:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801abb0:	9201      	str	r2, [sp, #4]
 801abb2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801abb6:	9100      	str	r1, [sp, #0]
 801abb8:	6841      	ldr	r1, [r0, #4]
 801abba:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801abbe:	fb01 2404 	mla	r4, r1, r4, r2
 801abc2:	6802      	ldr	r2, [r0, #0]
 801abc4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801abc8:	f8de 2000 	ldr.w	r2, [lr]
 801abcc:	9202      	str	r2, [sp, #8]
 801abce:	9a01      	ldr	r2, [sp, #4]
 801abd0:	43d6      	mvns	r6, r2
 801abd2:	b2f6      	uxtb	r6, r6
 801abd4:	9a00      	ldr	r2, [sp, #0]
 801abd6:	2a00      	cmp	r2, #0
 801abd8:	dc03      	bgt.n	801abe2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801abda:	9a03      	ldr	r2, [sp, #12]
 801abdc:	2a00      	cmp	r2, #0
 801abde:	f340 8124 	ble.w	801ae2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801abe2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801abe4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801abe8:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801abec:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801abf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801abf2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	dd0e      	ble.n	801ac18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801abfa:	1408      	asrs	r0, r1, #16
 801abfc:	d405      	bmi.n	801ac0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801abfe:	4560      	cmp	r0, ip
 801ac00:	da03      	bge.n	801ac0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ac02:	1410      	asrs	r0, r2, #16
 801ac04:	d401      	bmi.n	801ac0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ac06:	42b8      	cmp	r0, r7
 801ac08:	db07      	blt.n	801ac1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ac0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ac0c:	4401      	add	r1, r0
 801ac0e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ac10:	3b01      	subs	r3, #1
 801ac12:	4402      	add	r2, r0
 801ac14:	3402      	adds	r4, #2
 801ac16:	e7ee      	b.n	801abf6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ac18:	d06e      	beq.n	801acf8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ac1a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ac1c:	1e58      	subs	r0, r3, #1
 801ac1e:	fb05 1500 	mla	r5, r5, r0, r1
 801ac22:	142d      	asrs	r5, r5, #16
 801ac24:	d45c      	bmi.n	801ace0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ac26:	4565      	cmp	r5, ip
 801ac28:	da5a      	bge.n	801ace0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ac2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ac2c:	fb05 2000 	mla	r0, r5, r0, r2
 801ac30:	1400      	asrs	r0, r0, #16
 801ac32:	d455      	bmi.n	801ace0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ac34:	42b8      	cmp	r0, r7
 801ac36:	da53      	bge.n	801ace0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ac38:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801ac3c:	4699      	mov	r9, r3
 801ac3e:	46a2      	mov	sl, r4
 801ac40:	f1b9 0f00 	cmp.w	r9, #0
 801ac44:	dd54      	ble.n	801acf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ac46:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ac4a:	140d      	asrs	r5, r1, #16
 801ac4c:	1410      	asrs	r0, r2, #16
 801ac4e:	fb07 5000 	mla	r0, r7, r0, r5
 801ac52:	9d02      	ldr	r5, [sp, #8]
 801ac54:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ac58:	f8ba 5000 	ldrh.w	r5, [sl]
 801ac5c:	122f      	asrs	r7, r5, #8
 801ac5e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ac62:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ac66:	fb17 f706 	smulbb	r7, r7, r6
 801ac6a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ac6e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac72:	00ed      	lsls	r5, r5, #3
 801ac74:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801ac78:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801ac7c:	10c7      	asrs	r7, r0, #3
 801ac7e:	b2ed      	uxtb	r5, r5
 801ac80:	00c0      	lsls	r0, r0, #3
 801ac82:	fb18 f806 	smulbb	r8, r8, r6
 801ac86:	fb15 f506 	smulbb	r5, r5, r6
 801ac8a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ac8e:	b2c0      	uxtb	r0, r0
 801ac90:	fa1f fc8c 	uxth.w	ip, ip
 801ac94:	fb07 870b 	mla	r7, r7, fp, r8
 801ac98:	fb00 500b 	mla	r0, r0, fp, r5
 801ac9c:	b280      	uxth	r0, r0
 801ac9e:	b2bf      	uxth	r7, r7
 801aca0:	f10c 0501 	add.w	r5, ip, #1
 801aca4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801aca8:	f107 0801 	add.w	r8, r7, #1
 801acac:	1c45      	adds	r5, r0, #1
 801acae:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801acb2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801acb6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801acb8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801acbc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801acc0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801acc4:	ea4c 0c05 	orr.w	ip, ip, r5
 801acc8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801accc:	4401      	add	r1, r0
 801acce:	9812      	ldr	r0, [sp, #72]	; 0x48
 801acd0:	ea4c 0c08 	orr.w	ip, ip, r8
 801acd4:	f82a cb02 	strh.w	ip, [sl], #2
 801acd8:	4402      	add	r2, r0
 801acda:	f109 39ff 	add.w	r9, r9, #4294967295
 801acde:	e7af      	b.n	801ac40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ace0:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801ace4:	f04f 0800 	mov.w	r8, #0
 801ace8:	eb03 0008 	add.w	r0, r3, r8
 801acec:	2800      	cmp	r0, #0
 801acee:	dc41      	bgt.n	801ad74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801acf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acf4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801acf8:	9b00      	ldr	r3, [sp, #0]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	f340 8095 	ble.w	801ae2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ad00:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad08:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ad0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad12:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad1a:	eef0 6a62 	vmov.f32	s13, s5
 801ad1e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad26:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad2a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801ad2e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ad32:	eef0 6a43 	vmov.f32	s13, s6
 801ad36:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ad3a:	ee12 2a90 	vmov	r2, s5
 801ad3e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ad42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad46:	ee13 2a10 	vmov	r2, s6
 801ad4a:	9311      	str	r3, [sp, #68]	; 0x44
 801ad4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad52:	9312      	str	r3, [sp, #72]	; 0x48
 801ad54:	9b00      	ldr	r3, [sp, #0]
 801ad56:	9a03      	ldr	r2, [sp, #12]
 801ad58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad5c:	3b01      	subs	r3, #1
 801ad5e:	9300      	str	r3, [sp, #0]
 801ad60:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801ad64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad66:	eeb0 3a67 	vmov.f32	s6, s15
 801ad6a:	bf08      	it	eq
 801ad6c:	4613      	moveq	r3, r2
 801ad6e:	eef0 2a47 	vmov.f32	s5, s14
 801ad72:	e72f      	b.n	801abd4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ad74:	140f      	asrs	r7, r1, #16
 801ad76:	d451      	bmi.n	801ae1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ad78:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ad7c:	42bd      	cmp	r5, r7
 801ad7e:	dd4d      	ble.n	801ae1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ad80:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ad84:	d44a      	bmi.n	801ae1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ad86:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ad8a:	4560      	cmp	r0, ip
 801ad8c:	dd46      	ble.n	801ae1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ad8e:	b22d      	sxth	r5, r5
 801ad90:	fb0c 7505 	mla	r5, ip, r5, r7
 801ad94:	9802      	ldr	r0, [sp, #8]
 801ad96:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801ad9a:	f06f 0501 	mvn.w	r5, #1
 801ad9e:	fb05 fb08 	mul.w	fp, r5, r8
 801ada2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ada6:	f834 500b 	ldrh.w	r5, [r4, fp]
 801adaa:	122f      	asrs	r7, r5, #8
 801adac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801adb0:	fb17 f706 	smulbb	r7, r7, r6
 801adb4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801adb8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801adbc:	00ed      	lsls	r5, r5, #3
 801adbe:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801adc2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801adc6:	10c7      	asrs	r7, r0, #3
 801adc8:	b2ed      	uxtb	r5, r5
 801adca:	00c0      	lsls	r0, r0, #3
 801adcc:	fb19 f906 	smulbb	r9, r9, r6
 801add0:	fb15 f506 	smulbb	r5, r5, r6
 801add4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801add8:	b2c0      	uxtb	r0, r0
 801adda:	fa1f fc8c 	uxth.w	ip, ip
 801adde:	fb07 970a 	mla	r7, r7, sl, r9
 801ade2:	fb00 500a 	mla	r0, r0, sl, r5
 801ade6:	b2bf      	uxth	r7, r7
 801ade8:	b280      	uxth	r0, r0
 801adea:	f10c 0501 	add.w	r5, ip, #1
 801adee:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801adf2:	f107 0901 	add.w	r9, r7, #1
 801adf6:	1c45      	adds	r5, r0, #1
 801adf8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801adfc:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ae00:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ae04:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ae08:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ae0c:	ea4c 0c05 	orr.w	ip, ip, r5
 801ae10:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ae14:	ea4c 0c09 	orr.w	ip, ip, r9
 801ae18:	f824 c00b 	strh.w	ip, [r4, fp]
 801ae1c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ae1e:	4401      	add	r1, r0
 801ae20:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ae22:	f108 38ff 	add.w	r8, r8, #4294967295
 801ae26:	4402      	add	r2, r0
 801ae28:	e75e      	b.n	801ace8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ae2a:	b005      	add	sp, #20
 801ae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae34:	b085      	sub	sp, #20
 801ae36:	4693      	mov	fp, r2
 801ae38:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ae3a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ae3c:	6870      	ldr	r0, [r6, #4]
 801ae3e:	9101      	str	r1, [sp, #4]
 801ae40:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ae44:	fb00 2404 	mla	r4, r0, r4, r2
 801ae48:	6832      	ldr	r2, [r6, #0]
 801ae4a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ae4e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ae52:	682a      	ldr	r2, [r5, #0]
 801ae54:	9202      	str	r2, [sp, #8]
 801ae56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ae5a:	9a01      	ldr	r2, [sp, #4]
 801ae5c:	2a00      	cmp	r2, #0
 801ae5e:	dc03      	bgt.n	801ae68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ae60:	f1bb 0f00 	cmp.w	fp, #0
 801ae64:	f340 809a 	ble.w	801af9c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ae68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae6a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ae6e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ae72:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ae76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ae78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	dd0c      	ble.n	801ae9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ae80:	1406      	asrs	r6, r0, #16
 801ae82:	d405      	bmi.n	801ae90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ae84:	454e      	cmp	r6, r9
 801ae86:	da03      	bge.n	801ae90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ae88:	1416      	asrs	r6, r2, #16
 801ae8a:	d401      	bmi.n	801ae90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ae8c:	4546      	cmp	r6, r8
 801ae8e:	db05      	blt.n	801ae9c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ae90:	4470      	add	r0, lr
 801ae92:	4462      	add	r2, ip
 801ae94:	3b01      	subs	r3, #1
 801ae96:	3402      	adds	r4, #2
 801ae98:	e7f0      	b.n	801ae7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ae9a:	d00f      	beq.n	801aebc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ae9c:	1e5e      	subs	r6, r3, #1
 801ae9e:	fb0e 0706 	mla	r7, lr, r6, r0
 801aea2:	143f      	asrs	r7, r7, #16
 801aea4:	d541      	bpl.n	801af2a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801aea6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801aeaa:	4698      	mov	r8, r3
 801aeac:	9603      	str	r6, [sp, #12]
 801aeae:	f1b8 0f00 	cmp.w	r8, #0
 801aeb2:	dc56      	bgt.n	801af62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801aeb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aeb8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aebc:	9b01      	ldr	r3, [sp, #4]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	dd6c      	ble.n	801af9c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801aec2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aec6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aeca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aed0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aed4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aed8:	eeb0 6a62 	vmov.f32	s12, s5
 801aedc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aee0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aee4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aee8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801aeec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aef0:	eeb0 6a43 	vmov.f32	s12, s6
 801aef4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aef8:	ee12 2a90 	vmov	r2, s5
 801aefc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801af00:	fb92 fef3 	sdiv	lr, r2, r3
 801af04:	ee13 2a10 	vmov	r2, s6
 801af08:	fb92 fcf3 	sdiv	ip, r2, r3
 801af0c:	9b01      	ldr	r3, [sp, #4]
 801af0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801af12:	3b01      	subs	r3, #1
 801af14:	9301      	str	r3, [sp, #4]
 801af16:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801af1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af1c:	eeb0 3a67 	vmov.f32	s6, s15
 801af20:	bf08      	it	eq
 801af22:	465b      	moveq	r3, fp
 801af24:	eef0 2a47 	vmov.f32	s5, s14
 801af28:	e797      	b.n	801ae5a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801af2a:	454f      	cmp	r7, r9
 801af2c:	dabb      	bge.n	801aea6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af2e:	fb0c 2606 	mla	r6, ip, r6, r2
 801af32:	1436      	asrs	r6, r6, #16
 801af34:	d4b7      	bmi.n	801aea6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af36:	4546      	cmp	r6, r8
 801af38:	dab5      	bge.n	801aea6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af3a:	461e      	mov	r6, r3
 801af3c:	46a0      	mov	r8, r4
 801af3e:	2e00      	cmp	r6, #0
 801af40:	ddb8      	ble.n	801aeb4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801af42:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801af46:	9902      	ldr	r1, [sp, #8]
 801af48:	1417      	asrs	r7, r2, #16
 801af4a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801af4e:	fb0a 9707 	mla	r7, sl, r7, r9
 801af52:	4470      	add	r0, lr
 801af54:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801af58:	f828 7b02 	strh.w	r7, [r8], #2
 801af5c:	4462      	add	r2, ip
 801af5e:	3e01      	subs	r6, #1
 801af60:	e7ed      	b.n	801af3e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801af62:	ea5f 4920 	movs.w	r9, r0, asr #16
 801af66:	d414      	bmi.n	801af92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801af68:	68ae      	ldr	r6, [r5, #8]
 801af6a:	454e      	cmp	r6, r9
 801af6c:	dd11      	ble.n	801af92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801af6e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801af72:	d40e      	bmi.n	801af92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801af74:	68ef      	ldr	r7, [r5, #12]
 801af76:	4557      	cmp	r7, sl
 801af78:	dd0b      	ble.n	801af92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801af7a:	b236      	sxth	r6, r6
 801af7c:	fb0a 9606 	mla	r6, sl, r6, r9
 801af80:	9f02      	ldr	r7, [sp, #8]
 801af82:	f06f 0101 	mvn.w	r1, #1
 801af86:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801af8a:	fb01 f608 	mul.w	r6, r1, r8
 801af8e:	9903      	ldr	r1, [sp, #12]
 801af90:	538f      	strh	r7, [r1, r6]
 801af92:	4470      	add	r0, lr
 801af94:	4462      	add	r2, ip
 801af96:	f108 38ff 	add.w	r8, r8, #4294967295
 801af9a:	e788      	b.n	801aeae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801af9c:	b005      	add	sp, #20
 801af9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801afa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801afa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa6:	b085      	sub	sp, #20
 801afa8:	468b      	mov	fp, r1
 801afaa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801afac:	9202      	str	r2, [sp, #8]
 801afae:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801afb2:	9203      	str	r2, [sp, #12]
 801afb4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801afb8:	6841      	ldr	r1, [r0, #4]
 801afba:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801afbe:	fb01 2404 	mla	r4, r1, r4, r2
 801afc2:	6802      	ldr	r2, [r0, #0]
 801afc4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801afc8:	f8d8 2000 	ldr.w	r2, [r8]
 801afcc:	9200      	str	r2, [sp, #0]
 801afce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801afd2:	f1bb 0f00 	cmp.w	fp, #0
 801afd6:	dc03      	bgt.n	801afe0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801afd8:	9a02      	ldr	r2, [sp, #8]
 801afda:	2a00      	cmp	r2, #0
 801afdc:	f340 8134 	ble.w	801b248 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801afe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801afe2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801afe6:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801afea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801afee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aff0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	dd0e      	ble.n	801b016 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801aff8:	1402      	asrs	r2, r0, #16
 801affa:	d405      	bmi.n	801b008 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801affc:	42ba      	cmp	r2, r7
 801affe:	da03      	bge.n	801b008 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b000:	140a      	asrs	r2, r1, #16
 801b002:	d401      	bmi.n	801b008 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b004:	42b2      	cmp	r2, r6
 801b006:	db07      	blt.n	801b018 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b008:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b00a:	4410      	add	r0, r2
 801b00c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b00e:	3b01      	subs	r3, #1
 801b010:	4411      	add	r1, r2
 801b012:	3402      	adds	r4, #2
 801b014:	e7ee      	b.n	801aff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b016:	d019      	beq.n	801b04c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801b018:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b01a:	1e5a      	subs	r2, r3, #1
 801b01c:	fb05 0502 	mla	r5, r5, r2, r0
 801b020:	142d      	asrs	r5, r5, #16
 801b022:	d409      	bmi.n	801b038 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b024:	42bd      	cmp	r5, r7
 801b026:	da07      	bge.n	801b038 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b028:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b02a:	fb05 1202 	mla	r2, r5, r2, r1
 801b02e:	1412      	asrs	r2, r2, #16
 801b030:	d402      	bmi.n	801b038 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b032:	42b2      	cmp	r2, r6
 801b034:	f2c0 80aa 	blt.w	801b18c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b038:	f04f 0c00 	mov.w	ip, #0
 801b03c:	eb03 020c 	add.w	r2, r3, ip
 801b040:	2a00      	cmp	r2, #0
 801b042:	dc3e      	bgt.n	801b0c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801b044:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b048:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b04c:	f1bb 0f00 	cmp.w	fp, #0
 801b050:	f340 80fa 	ble.w	801b248 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801b054:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b058:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b05c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b062:	f1bb 0b01 	subs.w	fp, fp, #1
 801b066:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b06a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b06e:	eeb0 6a62 	vmov.f32	s12, s5
 801b072:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b076:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b07a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b07e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b082:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b086:	eeb0 6a43 	vmov.f32	s12, s6
 801b08a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b08e:	ee12 2a90 	vmov	r2, s5
 801b092:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b096:	fb92 f3f3 	sdiv	r3, r2, r3
 801b09a:	ee13 2a10 	vmov	r2, s6
 801b09e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0a2:	9311      	str	r3, [sp, #68]	; 0x44
 801b0a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0aa:	9a02      	ldr	r2, [sp, #8]
 801b0ac:	9312      	str	r3, [sp, #72]	; 0x48
 801b0ae:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0b4:	eeb0 3a67 	vmov.f32	s6, s15
 801b0b8:	bf08      	it	eq
 801b0ba:	4613      	moveq	r3, r2
 801b0bc:	eef0 2a47 	vmov.f32	s5, s14
 801b0c0:	e787      	b.n	801afd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b0c2:	1406      	asrs	r6, r0, #16
 801b0c4:	d45b      	bmi.n	801b17e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801b0c6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b0ca:	42b5      	cmp	r5, r6
 801b0cc:	dd57      	ble.n	801b17e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801b0ce:	140f      	asrs	r7, r1, #16
 801b0d0:	d455      	bmi.n	801b17e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801b0d2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801b0d6:	42ba      	cmp	r2, r7
 801b0d8:	dd51      	ble.n	801b17e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801b0da:	b22d      	sxth	r5, r5
 801b0dc:	fb07 6505 	mla	r5, r7, r5, r6
 801b0e0:	9a00      	ldr	r2, [sp, #0]
 801b0e2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801b0e6:	0e2e      	lsrs	r6, r5, #24
 801b0e8:	d049      	beq.n	801b17e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801b0ea:	f06f 0201 	mvn.w	r2, #1
 801b0ee:	fb02 f20c 	mul.w	r2, r2, ip
 801b0f2:	9201      	str	r2, [sp, #4]
 801b0f4:	f834 e002 	ldrh.w	lr, [r4, r2]
 801b0f8:	9a03      	ldr	r2, [sp, #12]
 801b0fa:	4356      	muls	r6, r2
 801b0fc:	1c72      	adds	r2, r6, #1
 801b0fe:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b102:	1212      	asrs	r2, r2, #8
 801b104:	fa1f f982 	uxth.w	r9, r2
 801b108:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b10c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b110:	43d2      	mvns	r2, r2
 801b112:	b2d2      	uxtb	r2, r2
 801b114:	fb16 f609 	smulbb	r6, r6, r9
 801b118:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b11c:	fb07 6702 	mla	r7, r7, r2, r6
 801b120:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b124:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b128:	b2ed      	uxtb	r5, r5
 801b12a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b12e:	fa5f fe8e 	uxtb.w	lr, lr
 801b132:	fb15 f509 	smulbb	r5, r5, r9
 801b136:	fb0e 5502 	mla	r5, lr, r2, r5
 801b13a:	b2bf      	uxth	r7, r7
 801b13c:	fb1a fa09 	smulbb	sl, sl, r9
 801b140:	b2ad      	uxth	r5, r5
 801b142:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b146:	fb06 a602 	mla	r6, r6, r2, sl
 801b14a:	1c7a      	adds	r2, r7, #1
 801b14c:	f105 0a01 	add.w	sl, r5, #1
 801b150:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b154:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b158:	b2b6      	uxth	r6, r6
 801b15a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b15e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b162:	ea47 070a 	orr.w	r7, r7, sl
 801b166:	f106 0a01 	add.w	sl, r6, #1
 801b16a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b16e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b172:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b176:	9a01      	ldr	r2, [sp, #4]
 801b178:	ea47 070a 	orr.w	r7, r7, sl
 801b17c:	52a7      	strh	r7, [r4, r2]
 801b17e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b180:	4410      	add	r0, r2
 801b182:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b184:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b188:	4411      	add	r1, r2
 801b18a:	e757      	b.n	801b03c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b18c:	f04f 0e00 	mov.w	lr, #0
 801b190:	eba3 020e 	sub.w	r2, r3, lr
 801b194:	2a00      	cmp	r2, #0
 801b196:	f77f af55 	ble.w	801b044 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b19a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b19e:	1405      	asrs	r5, r0, #16
 801b1a0:	140a      	asrs	r2, r1, #16
 801b1a2:	fb06 5202 	mla	r2, r6, r2, r5
 801b1a6:	9d00      	ldr	r5, [sp, #0]
 801b1a8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b1ac:	0e2e      	lsrs	r6, r5, #24
 801b1ae:	d044      	beq.n	801b23a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801b1b0:	9a03      	ldr	r2, [sp, #12]
 801b1b2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b1b6:	4356      	muls	r6, r2
 801b1b8:	1c72      	adds	r2, r6, #1
 801b1ba:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b1be:	1212      	asrs	r2, r2, #8
 801b1c0:	fa1f f982 	uxth.w	r9, r2
 801b1c4:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b1c8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b1cc:	43d2      	mvns	r2, r2
 801b1ce:	b2d2      	uxtb	r2, r2
 801b1d0:	fb16 f609 	smulbb	r6, r6, r9
 801b1d4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b1d8:	fb07 6702 	mla	r7, r7, r2, r6
 801b1dc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b1e0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b1e4:	b2ed      	uxtb	r5, r5
 801b1e6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b1ea:	fa5f fc8c 	uxtb.w	ip, ip
 801b1ee:	fb15 f509 	smulbb	r5, r5, r9
 801b1f2:	fb0c 5502 	mla	r5, ip, r2, r5
 801b1f6:	b2bf      	uxth	r7, r7
 801b1f8:	fb1a fa09 	smulbb	sl, sl, r9
 801b1fc:	b2ad      	uxth	r5, r5
 801b1fe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b202:	fb06 a602 	mla	r6, r6, r2, sl
 801b206:	1c7a      	adds	r2, r7, #1
 801b208:	f105 0a01 	add.w	sl, r5, #1
 801b20c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b210:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b214:	b2b6      	uxth	r6, r6
 801b216:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b21a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b21e:	ea47 070a 	orr.w	r7, r7, sl
 801b222:	f106 0a01 	add.w	sl, r6, #1
 801b226:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b22a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b22e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b232:	ea47 070a 	orr.w	r7, r7, sl
 801b236:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b23a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b23c:	4410      	add	r0, r2
 801b23e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b240:	f10e 0e01 	add.w	lr, lr, #1
 801b244:	4411      	add	r1, r2
 801b246:	e7a3      	b.n	801b190 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801b248:	b005      	add	sp, #20
 801b24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b250 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b254:	b085      	sub	sp, #20
 801b256:	468b      	mov	fp, r1
 801b258:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b25a:	9203      	str	r2, [sp, #12]
 801b25c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801b260:	6861      	ldr	r1, [r4, #4]
 801b262:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801b266:	fb01 2000 	mla	r0, r1, r0, r2
 801b26a:	6822      	ldr	r2, [r4, #0]
 801b26c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b270:	f8d9 2000 	ldr.w	r2, [r9]
 801b274:	9200      	str	r2, [sp, #0]
 801b276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b27a:	f1bb 0f00 	cmp.w	fp, #0
 801b27e:	dc03      	bgt.n	801b288 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b280:	9a03      	ldr	r2, [sp, #12]
 801b282:	2a00      	cmp	r2, #0
 801b284:	f340 8154 	ble.w	801b530 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801b288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b28a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b28e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b292:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b296:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b298:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	dd0e      	ble.n	801b2be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b2a0:	140c      	asrs	r4, r1, #16
 801b2a2:	d405      	bmi.n	801b2b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b2a4:	42bc      	cmp	r4, r7
 801b2a6:	da03      	bge.n	801b2b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b2a8:	1414      	asrs	r4, r2, #16
 801b2aa:	d401      	bmi.n	801b2b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b2ac:	42b4      	cmp	r4, r6
 801b2ae:	db07      	blt.n	801b2c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b2b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b2b2:	4421      	add	r1, r4
 801b2b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b2b6:	3b01      	subs	r3, #1
 801b2b8:	4422      	add	r2, r4
 801b2ba:	3002      	adds	r0, #2
 801b2bc:	e7ee      	b.n	801b29c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b2be:	d017      	beq.n	801b2f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b2c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b2c2:	1e5c      	subs	r4, r3, #1
 801b2c4:	fb05 1504 	mla	r5, r5, r4, r1
 801b2c8:	142d      	asrs	r5, r5, #16
 801b2ca:	d409      	bmi.n	801b2e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b2cc:	42bd      	cmp	r5, r7
 801b2ce:	da07      	bge.n	801b2e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b2d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b2d2:	fb05 2404 	mla	r4, r5, r4, r2
 801b2d6:	1424      	asrs	r4, r4, #16
 801b2d8:	d402      	bmi.n	801b2e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b2da:	42b4      	cmp	r4, r6
 801b2dc:	f2c0 80c0 	blt.w	801b460 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801b2e0:	2700      	movs	r7, #0
 801b2e2:	19dc      	adds	r4, r3, r7
 801b2e4:	2c00      	cmp	r4, #0
 801b2e6:	dc3e      	bgt.n	801b366 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b2e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b2ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b2f0:	f1bb 0f00 	cmp.w	fp, #0
 801b2f4:	f340 811c 	ble.w	801b530 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801b2f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b2fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b300:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b306:	f1bb 0b01 	subs.w	fp, fp, #1
 801b30a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b30e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b312:	eeb0 6a62 	vmov.f32	s12, s5
 801b316:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b31a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b31e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b322:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b326:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b32a:	eeb0 6a43 	vmov.f32	s12, s6
 801b32e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b332:	ee12 2a90 	vmov	r2, s5
 801b336:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b33a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b33e:	ee13 2a10 	vmov	r2, s6
 801b342:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b346:	9311      	str	r3, [sp, #68]	; 0x44
 801b348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b34a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b34e:	9a03      	ldr	r2, [sp, #12]
 801b350:	9312      	str	r3, [sp, #72]	; 0x48
 801b352:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b358:	eeb0 3a67 	vmov.f32	s6, s15
 801b35c:	bf08      	it	eq
 801b35e:	4613      	moveq	r3, r2
 801b360:	eef0 2a47 	vmov.f32	s5, s14
 801b364:	e789      	b.n	801b27a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b366:	140e      	asrs	r6, r1, #16
 801b368:	d461      	bmi.n	801b42e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801b36a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801b36e:	42b5      	cmp	r5, r6
 801b370:	dd5d      	ble.n	801b42e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801b372:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b376:	d45a      	bmi.n	801b42e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801b378:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801b37c:	4564      	cmp	r4, ip
 801b37e:	dd56      	ble.n	801b42e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801b380:	b22d      	sxth	r5, r5
 801b382:	fb0c 6505 	mla	r5, ip, r5, r6
 801b386:	9c00      	ldr	r4, [sp, #0]
 801b388:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801b38c:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801b390:	d04d      	beq.n	801b42e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801b392:	0a26      	lsrs	r6, r4, #8
 801b394:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b398:	fa5f f58e 	uxtb.w	r5, lr
 801b39c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801b3a0:	9601      	str	r6, [sp, #4]
 801b3a2:	d04a      	beq.n	801b43a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b3a4:	f06f 0601 	mvn.w	r6, #1
 801b3a8:	437e      	muls	r6, r7
 801b3aa:	fa1f fa85 	uxth.w	sl, r5
 801b3ae:	f830 8006 	ldrh.w	r8, [r0, r6]
 801b3b2:	9602      	str	r6, [sp, #8]
 801b3b4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b3b8:	43ed      	mvns	r5, r5
 801b3ba:	fa5f fc8c 	uxtb.w	ip, ip
 801b3be:	b2ed      	uxtb	r5, r5
 801b3c0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b3c4:	fb1c fc0a 	smulbb	ip, ip, sl
 801b3c8:	fb0e cc05 	mla	ip, lr, r5, ip
 801b3cc:	b2e4      	uxtb	r4, r4
 801b3ce:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801b3d2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b3d6:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801b3da:	fa5f f888 	uxtb.w	r8, r8
 801b3de:	fb14 f40a 	smulbb	r4, r4, sl
 801b3e2:	fb08 4405 	mla	r4, r8, r5, r4
 801b3e6:	b2a4      	uxth	r4, r4
 801b3e8:	fa1f fc8c 	uxth.w	ip, ip
 801b3ec:	fb16 f60a 	smulbb	r6, r6, sl
 801b3f0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b3f4:	fb0e 6e05 	mla	lr, lr, r5, r6
 801b3f8:	1c66      	adds	r6, r4, #1
 801b3fa:	f10c 0501 	add.w	r5, ip, #1
 801b3fe:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b402:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b406:	fa1f fe8e 	uxth.w	lr, lr
 801b40a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b40e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b412:	ea4c 0c06 	orr.w	ip, ip, r6
 801b416:	f10e 0601 	add.w	r6, lr, #1
 801b41a:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801b41e:	0976      	lsrs	r6, r6, #5
 801b420:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b424:	9c02      	ldr	r4, [sp, #8]
 801b426:	ea4c 0c06 	orr.w	ip, ip, r6
 801b42a:	f820 c004 	strh.w	ip, [r0, r4]
 801b42e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b430:	4421      	add	r1, r4
 801b432:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b434:	3f01      	subs	r7, #1
 801b436:	4422      	add	r2, r4
 801b438:	e753      	b.n	801b2e2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b43a:	4e3f      	ldr	r6, [pc, #252]	; (801b538 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801b43c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b440:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801b444:	ea4c 0c04 	orr.w	ip, ip, r4
 801b448:	9c01      	ldr	r4, [sp, #4]
 801b44a:	f06f 0501 	mvn.w	r5, #1
 801b44e:	00e6      	lsls	r6, r4, #3
 801b450:	437d      	muls	r5, r7
 801b452:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801b456:	ea4c 0c04 	orr.w	ip, ip, r4
 801b45a:	f820 c005 	strh.w	ip, [r0, r5]
 801b45e:	e7e6      	b.n	801b42e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801b460:	f04f 0800 	mov.w	r8, #0
 801b464:	eba3 0408 	sub.w	r4, r3, r8
 801b468:	2c00      	cmp	r4, #0
 801b46a:	f77f af3d 	ble.w	801b2e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b46e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801b472:	140d      	asrs	r5, r1, #16
 801b474:	1414      	asrs	r4, r2, #16
 801b476:	fb06 5404 	mla	r4, r6, r4, r5
 801b47a:	9d00      	ldr	r5, [sp, #0]
 801b47c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801b480:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801b484:	d042      	beq.n	801b50c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801b486:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b48a:	fa5f f58c 	uxtb.w	r5, ip
 801b48e:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801b492:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801b496:	d040      	beq.n	801b51a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b498:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801b49c:	fa1f fa85 	uxth.w	sl, r5
 801b4a0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b4a4:	43ed      	mvns	r5, r5
 801b4a6:	b2ff      	uxtb	r7, r7
 801b4a8:	b2ed      	uxtb	r5, r5
 801b4aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b4ae:	fb17 f70a 	smulbb	r7, r7, sl
 801b4b2:	fb0c 7705 	mla	r7, ip, r5, r7
 801b4b6:	b2e4      	uxtb	r4, r4
 801b4b8:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801b4bc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b4c0:	fa5f fe8e 	uxtb.w	lr, lr
 801b4c4:	fb14 f40a 	smulbb	r4, r4, sl
 801b4c8:	fb0e 4405 	mla	r4, lr, r5, r4
 801b4cc:	b2f6      	uxtb	r6, r6
 801b4ce:	b2bf      	uxth	r7, r7
 801b4d0:	fb16 f60a 	smulbb	r6, r6, sl
 801b4d4:	b2a4      	uxth	r4, r4
 801b4d6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b4da:	fb0c 6c05 	mla	ip, ip, r5, r6
 801b4de:	1c7d      	adds	r5, r7, #1
 801b4e0:	1c66      	adds	r6, r4, #1
 801b4e2:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801b4e6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b4ea:	fa1f fc8c 	uxth.w	ip, ip
 801b4ee:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b4f2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b4f6:	4337      	orrs	r7, r6
 801b4f8:	f10c 0601 	add.w	r6, ip, #1
 801b4fc:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b500:	0976      	lsrs	r6, r6, #5
 801b502:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b506:	4337      	orrs	r7, r6
 801b508:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801b50c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b50e:	4421      	add	r1, r4
 801b510:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b512:	f108 0801 	add.w	r8, r8, #1
 801b516:	4422      	add	r2, r4
 801b518:	e7a4      	b.n	801b464 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b51a:	4d07      	ldr	r5, [pc, #28]	; (801b538 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801b51c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b520:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801b524:	00f6      	lsls	r6, r6, #3
 801b526:	4327      	orrs	r7, r4
 801b528:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801b52c:	4327      	orrs	r7, r4
 801b52e:	e7eb      	b.n	801b508 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801b530:	b005      	add	sp, #20
 801b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b536:	bf00      	nop
 801b538:	fffff800 	.word	0xfffff800

0801b53c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b540:	b087      	sub	sp, #28
 801b542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b546:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b548:	9204      	str	r2, [sp, #16]
 801b54a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b54e:	9205      	str	r2, [sp, #20]
 801b550:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b554:	9101      	str	r1, [sp, #4]
 801b556:	6841      	ldr	r1, [r0, #4]
 801b558:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b55c:	fb01 2404 	mla	r4, r1, r4, r2
 801b560:	6802      	ldr	r2, [r0, #0]
 801b562:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b566:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801b56a:	3201      	adds	r2, #1
 801b56c:	f022 0201 	bic.w	r2, r2, #1
 801b570:	9202      	str	r2, [sp, #8]
 801b572:	f8d8 2000 	ldr.w	r2, [r8]
 801b576:	9203      	str	r2, [sp, #12]
 801b578:	9a01      	ldr	r2, [sp, #4]
 801b57a:	2a00      	cmp	r2, #0
 801b57c:	dc03      	bgt.n	801b586 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b57e:	9a04      	ldr	r2, [sp, #16]
 801b580:	2a00      	cmp	r2, #0
 801b582:	f340 814d 	ble.w	801b820 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801b586:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b588:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b58c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b590:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b596:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	dd0e      	ble.n	801b5bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b59e:	1402      	asrs	r2, r0, #16
 801b5a0:	d405      	bmi.n	801b5ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b5a2:	42ba      	cmp	r2, r7
 801b5a4:	da03      	bge.n	801b5ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b5a6:	140a      	asrs	r2, r1, #16
 801b5a8:	d401      	bmi.n	801b5ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b5aa:	42b2      	cmp	r2, r6
 801b5ac:	db07      	blt.n	801b5be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b5ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b5b0:	4410      	add	r0, r2
 801b5b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b5b4:	3b01      	subs	r3, #1
 801b5b6:	4411      	add	r1, r2
 801b5b8:	3402      	adds	r4, #2
 801b5ba:	e7ee      	b.n	801b59a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b5bc:	d019      	beq.n	801b5f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801b5be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b5c0:	1e5a      	subs	r2, r3, #1
 801b5c2:	fb05 0502 	mla	r5, r5, r2, r0
 801b5c6:	142d      	asrs	r5, r5, #16
 801b5c8:	d409      	bmi.n	801b5de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b5ca:	42bd      	cmp	r5, r7
 801b5cc:	da07      	bge.n	801b5de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b5ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b5d0:	fb05 1202 	mla	r2, r5, r2, r1
 801b5d4:	1412      	asrs	r2, r2, #16
 801b5d6:	d402      	bmi.n	801b5de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b5d8:	42b2      	cmp	r2, r6
 801b5da:	f2c0 80b7 	blt.w	801b74c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801b5de:	f04f 0c00 	mov.w	ip, #0
 801b5e2:	eb03 020c 	add.w	r2, r3, ip
 801b5e6:	2a00      	cmp	r2, #0
 801b5e8:	dc3f      	bgt.n	801b66a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801b5ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b5ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b5f2:	9b01      	ldr	r3, [sp, #4]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	f340 8113 	ble.w	801b820 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801b5fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b5fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b602:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b608:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b60c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b610:	eeb0 6a62 	vmov.f32	s12, s5
 801b614:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b618:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b61c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b620:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b624:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b628:	eeb0 6a43 	vmov.f32	s12, s6
 801b62c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b630:	ee12 2a90 	vmov	r2, s5
 801b634:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b638:	fb92 f3f3 	sdiv	r3, r2, r3
 801b63c:	ee13 2a10 	vmov	r2, s6
 801b640:	9313      	str	r3, [sp, #76]	; 0x4c
 801b642:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b644:	fb92 f3f3 	sdiv	r3, r2, r3
 801b648:	9314      	str	r3, [sp, #80]	; 0x50
 801b64a:	9b01      	ldr	r3, [sp, #4]
 801b64c:	9a04      	ldr	r2, [sp, #16]
 801b64e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b652:	3b01      	subs	r3, #1
 801b654:	9301      	str	r3, [sp, #4]
 801b656:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b65a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b65c:	eeb0 3a67 	vmov.f32	s6, s15
 801b660:	bf08      	it	eq
 801b662:	4613      	moveq	r3, r2
 801b664:	eef0 2a47 	vmov.f32	s5, s14
 801b668:	e786      	b.n	801b578 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b66a:	1405      	asrs	r5, r0, #16
 801b66c:	d467      	bmi.n	801b73e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b66e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801b672:	42aa      	cmp	r2, r5
 801b674:	dd63      	ble.n	801b73e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b676:	140e      	asrs	r6, r1, #16
 801b678:	d461      	bmi.n	801b73e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b67a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801b67e:	42b2      	cmp	r2, r6
 801b680:	dd5d      	ble.n	801b73e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b682:	9a02      	ldr	r2, [sp, #8]
 801b684:	fb06 5502 	mla	r5, r6, r2, r5
 801b688:	086a      	lsrs	r2, r5, #1
 801b68a:	9e03      	ldr	r6, [sp, #12]
 801b68c:	5cb2      	ldrb	r2, [r6, r2]
 801b68e:	07ee      	lsls	r6, r5, #31
 801b690:	bf54      	ite	pl
 801b692:	f002 020f 	andpl.w	r2, r2, #15
 801b696:	1112      	asrmi	r2, r2, #4
 801b698:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b69c:	b2d2      	uxtb	r2, r2
 801b69e:	2a00      	cmp	r2, #0
 801b6a0:	d04d      	beq.n	801b73e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b6a2:	f06f 0601 	mvn.w	r6, #1
 801b6a6:	fb06 fb0c 	mul.w	fp, r6, ip
 801b6aa:	9e05      	ldr	r6, [sp, #20]
 801b6ac:	4d5e      	ldr	r5, [pc, #376]	; (801b828 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b6ae:	f834 e00b 	ldrh.w	lr, [r4, fp]
 801b6b2:	682d      	ldr	r5, [r5, #0]
 801b6b4:	4372      	muls	r2, r6
 801b6b6:	1c56      	adds	r6, r2, #1
 801b6b8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b6bc:	1212      	asrs	r2, r2, #8
 801b6be:	0a2f      	lsrs	r7, r5, #8
 801b6c0:	fa1f fa82 	uxth.w	sl, r2
 801b6c4:	ea4f 262e 	mov.w	r6, lr, asr #8
 801b6c8:	43d2      	mvns	r2, r2
 801b6ca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b6ce:	b2d2      	uxtb	r2, r2
 801b6d0:	fb17 f70a 	smulbb	r7, r7, sl
 801b6d4:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801b6d8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b6dc:	fb06 7602 	mla	r6, r6, r2, r7
 801b6e0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b6e4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b6e8:	fb19 f90a 	smulbb	r9, r9, sl
 801b6ec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b6f0:	00ed      	lsls	r5, r5, #3
 801b6f2:	fb07 9702 	mla	r7, r7, r2, r9
 801b6f6:	b2ed      	uxtb	r5, r5
 801b6f8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b6fc:	b2bf      	uxth	r7, r7
 801b6fe:	fa5f fe8e 	uxtb.w	lr, lr
 801b702:	fb15 f50a 	smulbb	r5, r5, sl
 801b706:	b2b6      	uxth	r6, r6
 801b708:	fb0e 5502 	mla	r5, lr, r2, r5
 801b70c:	f107 0901 	add.w	r9, r7, #1
 801b710:	b2ad      	uxth	r5, r5
 801b712:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801b716:	f106 0901 	add.w	r9, r6, #1
 801b71a:	097f      	lsrs	r7, r7, #5
 801b71c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801b720:	f105 0e01 	add.w	lr, r5, #1
 801b724:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b728:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801b72c:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801b730:	4337      	orrs	r7, r6
 801b732:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b736:	ea47 070e 	orr.w	r7, r7, lr
 801b73a:	f824 700b 	strh.w	r7, [r4, fp]
 801b73e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b740:	4410      	add	r0, r2
 801b742:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b744:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b748:	4411      	add	r1, r2
 801b74a:	e74a      	b.n	801b5e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b74c:	f04f 0e00 	mov.w	lr, #0
 801b750:	eba3 020e 	sub.w	r2, r3, lr
 801b754:	2a00      	cmp	r2, #0
 801b756:	f77f af48 	ble.w	801b5ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801b75a:	9e02      	ldr	r6, [sp, #8]
 801b75c:	1402      	asrs	r2, r0, #16
 801b75e:	140d      	asrs	r5, r1, #16
 801b760:	fb06 2505 	mla	r5, r6, r5, r2
 801b764:	086a      	lsrs	r2, r5, #1
 801b766:	9e03      	ldr	r6, [sp, #12]
 801b768:	5cb2      	ldrb	r2, [r6, r2]
 801b76a:	07ed      	lsls	r5, r5, #31
 801b76c:	bf54      	ite	pl
 801b76e:	f002 020f 	andpl.w	r2, r2, #15
 801b772:	1112      	asrmi	r2, r2, #4
 801b774:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b778:	b2d2      	uxtb	r2, r2
 801b77a:	2a00      	cmp	r2, #0
 801b77c:	d049      	beq.n	801b812 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b77e:	9e05      	ldr	r6, [sp, #20]
 801b780:	4d29      	ldr	r5, [pc, #164]	; (801b828 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b782:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b786:	682d      	ldr	r5, [r5, #0]
 801b788:	4372      	muls	r2, r6
 801b78a:	1c56      	adds	r6, r2, #1
 801b78c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b790:	1212      	asrs	r2, r2, #8
 801b792:	0a2f      	lsrs	r7, r5, #8
 801b794:	fa1f fa82 	uxth.w	sl, r2
 801b798:	ea4f 262c 	mov.w	r6, ip, asr #8
 801b79c:	43d2      	mvns	r2, r2
 801b79e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b7a2:	b2d2      	uxtb	r2, r2
 801b7a4:	fb17 f70a 	smulbb	r7, r7, sl
 801b7a8:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801b7ac:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b7b0:	fb06 7602 	mla	r6, r6, r2, r7
 801b7b4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b7b8:	ea4f 07ec 	mov.w	r7, ip, asr #3
 801b7bc:	fb19 f90a 	smulbb	r9, r9, sl
 801b7c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b7c4:	00ed      	lsls	r5, r5, #3
 801b7c6:	fb07 9702 	mla	r7, r7, r2, r9
 801b7ca:	b2ed      	uxtb	r5, r5
 801b7cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b7d0:	b2bf      	uxth	r7, r7
 801b7d2:	fa5f fc8c 	uxtb.w	ip, ip
 801b7d6:	fb15 f50a 	smulbb	r5, r5, sl
 801b7da:	b2b6      	uxth	r6, r6
 801b7dc:	fb0c 5502 	mla	r5, ip, r2, r5
 801b7e0:	f107 0901 	add.w	r9, r7, #1
 801b7e4:	b2ad      	uxth	r5, r5
 801b7e6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801b7ea:	f106 0b01 	add.w	fp, r6, #1
 801b7ee:	097f      	lsrs	r7, r7, #5
 801b7f0:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801b7f4:	f105 0c01 	add.w	ip, r5, #1
 801b7f8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b7fc:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801b800:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801b804:	4337      	orrs	r7, r6
 801b806:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b80a:	ea47 070c 	orr.w	r7, r7, ip
 801b80e:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b812:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b814:	4410      	add	r0, r2
 801b816:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b818:	f10e 0e01 	add.w	lr, lr, #1
 801b81c:	4411      	add	r1, r2
 801b81e:	e797      	b.n	801b750 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b820:	b007      	add	sp, #28
 801b822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b826:	bf00      	nop
 801b828:	2000a068 	.word	0x2000a068

0801b82c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b830:	b087      	sub	sp, #28
 801b832:	468b      	mov	fp, r1
 801b834:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b836:	9205      	str	r2, [sp, #20]
 801b838:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b83c:	6841      	ldr	r1, [r0, #4]
 801b83e:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b842:	fb01 2404 	mla	r4, r1, r4, r2
 801b846:	6802      	ldr	r2, [r0, #0]
 801b848:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b84c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801b850:	3201      	adds	r2, #1
 801b852:	f022 0201 	bic.w	r2, r2, #1
 801b856:	9201      	str	r2, [sp, #4]
 801b858:	f8d8 2000 	ldr.w	r2, [r8]
 801b85c:	9202      	str	r2, [sp, #8]
 801b85e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b862:	f1bb 0f00 	cmp.w	fp, #0
 801b866:	dc03      	bgt.n	801b870 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b868:	9a05      	ldr	r2, [sp, #20]
 801b86a:	2a00      	cmp	r2, #0
 801b86c:	f340 8156 	ble.w	801bb1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b870:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b872:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b876:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b87a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b87e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b880:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b884:	2b00      	cmp	r3, #0
 801b886:	dd0e      	ble.n	801b8a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b888:	1402      	asrs	r2, r0, #16
 801b88a:	d405      	bmi.n	801b898 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b88c:	42ba      	cmp	r2, r7
 801b88e:	da03      	bge.n	801b898 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b890:	140a      	asrs	r2, r1, #16
 801b892:	d401      	bmi.n	801b898 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b894:	42b2      	cmp	r2, r6
 801b896:	db07      	blt.n	801b8a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b898:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b89a:	4410      	add	r0, r2
 801b89c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b89e:	3b01      	subs	r3, #1
 801b8a0:	4411      	add	r1, r2
 801b8a2:	3402      	adds	r4, #2
 801b8a4:	e7ee      	b.n	801b884 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b8a6:	d017      	beq.n	801b8d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801b8a8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b8aa:	1e5a      	subs	r2, r3, #1
 801b8ac:	fb05 0502 	mla	r5, r5, r2, r0
 801b8b0:	142d      	asrs	r5, r5, #16
 801b8b2:	d409      	bmi.n	801b8c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b8b4:	42bd      	cmp	r5, r7
 801b8b6:	da07      	bge.n	801b8c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b8b8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b8ba:	fb05 1202 	mla	r2, r5, r2, r1
 801b8be:	1412      	asrs	r2, r2, #16
 801b8c0:	d402      	bmi.n	801b8c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b8c2:	42b2      	cmp	r2, r6
 801b8c4:	f2c0 80be 	blt.w	801ba44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b8c8:	2600      	movs	r6, #0
 801b8ca:	199a      	adds	r2, r3, r6
 801b8cc:	2a00      	cmp	r2, #0
 801b8ce:	dc3e      	bgt.n	801b94e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b8d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8d4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b8d8:	f1bb 0f00 	cmp.w	fp, #0
 801b8dc:	f340 811e 	ble.w	801bb1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b8e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b8ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b8ee:	f1bb 0b01 	subs.w	fp, fp, #1
 801b8f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8fa:	eeb0 6a62 	vmov.f32	s12, s5
 801b8fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b902:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b906:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b90a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b90e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b912:	eeb0 6a43 	vmov.f32	s12, s6
 801b916:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b91a:	ee12 2a90 	vmov	r2, s5
 801b91e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b922:	fb92 f3f3 	sdiv	r3, r2, r3
 801b926:	ee13 2a10 	vmov	r2, s6
 801b92a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b92e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b930:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b932:	fb92 f3f3 	sdiv	r3, r2, r3
 801b936:	9a05      	ldr	r2, [sp, #20]
 801b938:	9314      	str	r3, [sp, #80]	; 0x50
 801b93a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b93e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b940:	eeb0 3a67 	vmov.f32	s6, s15
 801b944:	bf08      	it	eq
 801b946:	4613      	moveq	r3, r2
 801b948:	eef0 2a47 	vmov.f32	s5, s14
 801b94c:	e789      	b.n	801b862 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b94e:	1405      	asrs	r5, r0, #16
 801b950:	d465      	bmi.n	801ba1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801b952:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801b956:	42aa      	cmp	r2, r5
 801b958:	dd61      	ble.n	801ba1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801b95a:	140f      	asrs	r7, r1, #16
 801b95c:	d45f      	bmi.n	801ba1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801b95e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801b962:	42ba      	cmp	r2, r7
 801b964:	dd5b      	ble.n	801ba1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801b966:	9a01      	ldr	r2, [sp, #4]
 801b968:	fb07 5502 	mla	r5, r7, r2, r5
 801b96c:	086a      	lsrs	r2, r5, #1
 801b96e:	9f02      	ldr	r7, [sp, #8]
 801b970:	5cba      	ldrb	r2, [r7, r2]
 801b972:	07ef      	lsls	r7, r5, #31
 801b974:	bf54      	ite	pl
 801b976:	f002 020f 	andpl.w	r2, r2, #15
 801b97a:	1112      	asrmi	r2, r2, #4
 801b97c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b980:	b2d2      	uxtb	r2, r2
 801b982:	2a00      	cmp	r2, #0
 801b984:	d04b      	beq.n	801ba1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801b986:	4d67      	ldr	r5, [pc, #412]	; (801bb24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>)
 801b988:	682f      	ldr	r7, [r5, #0]
 801b98a:	08fd      	lsrs	r5, r7, #3
 801b98c:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801b990:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b994:	00ff      	lsls	r7, r7, #3
 801b996:	2aff      	cmp	r2, #255	; 0xff
 801b998:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801b99c:	9503      	str	r5, [sp, #12]
 801b99e:	b2ff      	uxtb	r7, r7
 801b9a0:	d043      	beq.n	801ba2a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801b9a2:	f06f 0501 	mvn.w	r5, #1
 801b9a6:	4375      	muls	r5, r6
 801b9a8:	fa1f fa82 	uxth.w	sl, r2
 801b9ac:	f834 e005 	ldrh.w	lr, [r4, r5]
 801b9b0:	9504      	str	r5, [sp, #16]
 801b9b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b9b6:	43d2      	mvns	r2, r2
 801b9b8:	b2d2      	uxtb	r2, r2
 801b9ba:	fb19 f90a 	smulbb	r9, r9, sl
 801b9be:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b9c2:	9d03      	ldr	r5, [sp, #12]
 801b9c4:	fb0c 9c02 	mla	ip, ip, r2, r9
 801b9c8:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801b9cc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b9d0:	fb15 f50a 	smulbb	r5, r5, sl
 801b9d4:	fb09 5502 	mla	r5, r9, r2, r5
 801b9d8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b9dc:	b2ad      	uxth	r5, r5
 801b9de:	fa5f fe8e 	uxtb.w	lr, lr
 801b9e2:	fb17 f70a 	smulbb	r7, r7, sl
 801b9e6:	fa1f fc8c 	uxth.w	ip, ip
 801b9ea:	fb0e 7702 	mla	r7, lr, r2, r7
 801b9ee:	f105 0901 	add.w	r9, r5, #1
 801b9f2:	b2bf      	uxth	r7, r7
 801b9f4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b9f8:	f10c 0901 	add.w	r9, ip, #1
 801b9fc:	1c7a      	adds	r2, r7, #1
 801b9fe:	096d      	lsrs	r5, r5, #5
 801ba00:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801ba04:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ba08:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ba0c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ba10:	ea45 050c 	orr.w	r5, r5, ip
 801ba14:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ba18:	9a04      	ldr	r2, [sp, #16]
 801ba1a:	433d      	orrs	r5, r7
 801ba1c:	52a5      	strh	r5, [r4, r2]
 801ba1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba20:	4410      	add	r0, r2
 801ba22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba24:	3e01      	subs	r6, #1
 801ba26:	4411      	add	r1, r2
 801ba28:	e74f      	b.n	801b8ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ba2a:	f06f 0201 	mvn.w	r2, #1
 801ba2e:	fb02 fe06 	mul.w	lr, r2, r6
 801ba32:	9a03      	ldr	r2, [sp, #12]
 801ba34:	00d5      	lsls	r5, r2, #3
 801ba36:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801ba3a:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 801ba3e:	f824 500e 	strh.w	r5, [r4, lr]
 801ba42:	e7ec      	b.n	801ba1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801ba44:	f04f 0e00 	mov.w	lr, #0
 801ba48:	eba3 020e 	sub.w	r2, r3, lr
 801ba4c:	2a00      	cmp	r2, #0
 801ba4e:	f77f af3f 	ble.w	801b8d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ba52:	9e01      	ldr	r6, [sp, #4]
 801ba54:	1402      	asrs	r2, r0, #16
 801ba56:	140d      	asrs	r5, r1, #16
 801ba58:	fb06 2505 	mla	r5, r6, r5, r2
 801ba5c:	086a      	lsrs	r2, r5, #1
 801ba5e:	9e02      	ldr	r6, [sp, #8]
 801ba60:	5cb2      	ldrb	r2, [r6, r2]
 801ba62:	07ed      	lsls	r5, r5, #31
 801ba64:	bf54      	ite	pl
 801ba66:	f002 020f 	andpl.w	r2, r2, #15
 801ba6a:	1112      	asrmi	r2, r2, #4
 801ba6c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ba70:	b2d2      	uxtb	r2, r2
 801ba72:	2a00      	cmp	r2, #0
 801ba74:	d045      	beq.n	801bb02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ba76:	4d2b      	ldr	r5, [pc, #172]	; (801bb24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>)
 801ba78:	682e      	ldr	r6, [r5, #0]
 801ba7a:	2aff      	cmp	r2, #255	; 0xff
 801ba7c:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801ba80:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 801ba84:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801ba88:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801ba8c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ba90:	b2f6      	uxtb	r6, r6
 801ba92:	d03d      	beq.n	801bb10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ba94:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ba98:	fa1f fa82 	uxth.w	sl, r2
 801ba9c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801baa0:	43d2      	mvns	r2, r2
 801baa2:	b2d2      	uxtb	r2, r2
 801baa4:	fb19 f90a 	smulbb	r9, r9, sl
 801baa8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801baac:	fb07 9702 	mla	r7, r7, r2, r9
 801bab0:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801bab4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bab8:	fb15 f50a 	smulbb	r5, r5, sl
 801babc:	fb09 5502 	mla	r5, r9, r2, r5
 801bac0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bac4:	b2ad      	uxth	r5, r5
 801bac6:	fa5f fc8c 	uxtb.w	ip, ip
 801baca:	fb16 f60a 	smulbb	r6, r6, sl
 801bace:	b2bf      	uxth	r7, r7
 801bad0:	fb0c 6602 	mla	r6, ip, r2, r6
 801bad4:	f105 0901 	add.w	r9, r5, #1
 801bad8:	b2b6      	uxth	r6, r6
 801bada:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801bade:	f107 0901 	add.w	r9, r7, #1
 801bae2:	096d      	lsrs	r5, r5, #5
 801bae4:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801bae8:	1c72      	adds	r2, r6, #1
 801baea:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801baee:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801baf2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801baf6:	433d      	orrs	r5, r7
 801baf8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bafc:	4335      	orrs	r5, r6
 801bafe:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801bb02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb04:	4410      	add	r0, r2
 801bb06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb08:	f10e 0e01 	add.w	lr, lr, #1
 801bb0c:	4411      	add	r1, r2
 801bb0e:	e79b      	b.n	801ba48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801bb10:	00ed      	lsls	r5, r5, #3
 801bb12:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801bb16:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 801bb1a:	e7f0      	b.n	801bafe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 801bb1c:	b007      	add	sp, #28
 801bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb22:	bf00      	nop
 801bb24:	2000a068 	.word	0x2000a068

0801bb28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bb28:	4770      	bx	lr

0801bb2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bb2a:	4770      	bx	lr

0801bb2c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bb2c:	4770      	bx	lr

0801bb2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bb2e:	4770      	bx	lr

0801bb30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bb30:	4770      	bx	lr

0801bb32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bb32:	4770      	bx	lr

0801bb34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bb34:	4770      	bx	lr

0801bb36 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bb36:	4770      	bx	lr

0801bb38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bb38:	4770      	bx	lr

0801bb3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bb3a:	4770      	bx	lr

0801bb3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bb3c:	4770      	bx	lr

0801bb3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bb3e:	4770      	bx	lr

0801bb40 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bb40:	4770      	bx	lr

0801bb42 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bb42:	4770      	bx	lr

0801bb44 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bb44:	4770      	bx	lr

0801bb46 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bb46:	4770      	bx	lr

0801bb48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bb48:	4770      	bx	lr

0801bb4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bb4a:	4770      	bx	lr

0801bb4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bb4c:	4770      	bx	lr

0801bb4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bb4e:	4770      	bx	lr

0801bb50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bb50:	4770      	bx	lr

0801bb52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bb52:	4770      	bx	lr

0801bb54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bb54:	4770      	bx	lr

0801bb56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bb56:	4770      	bx	lr

0801bb58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bb58:	4770      	bx	lr

0801bb5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bb5a:	4770      	bx	lr

0801bb5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bb5c:	4770      	bx	lr

0801bb5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bb5e:	4770      	bx	lr

0801bb60 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801bb60:	b508      	push	{r3, lr}
 801bb62:	4b06      	ldr	r3, [pc, #24]	; (801bb7c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801bb64:	8818      	ldrh	r0, [r3, #0]
 801bb66:	b928      	cbnz	r0, 801bb74 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801bb68:	4b05      	ldr	r3, [pc, #20]	; (801bb80 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801bb6a:	4a06      	ldr	r2, [pc, #24]	; (801bb84 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801bb6c:	4806      	ldr	r0, [pc, #24]	; (801bb88 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801bb6e:	2154      	movs	r1, #84	; 0x54
 801bb70:	f009 faa0 	bl	80250b4 <__assert_func>
 801bb74:	0040      	lsls	r0, r0, #1
 801bb76:	b280      	uxth	r0, r0
 801bb78:	bd08      	pop	{r3, pc}
 801bb7a:	bf00      	nop
 801bb7c:	2000a05a 	.word	0x2000a05a
 801bb80:	0802ac7d 	.word	0x0802ac7d
 801bb84:	0802b207 	.word	0x0802b207
 801bb88:	0802acbf 	.word	0x0802acbf

0801bb8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801bb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb90:	b08b      	sub	sp, #44	; 0x2c
 801bb92:	460f      	mov	r7, r1
 801bb94:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801bb98:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801bb9c:	4616      	mov	r6, r2
 801bb9e:	f1bb 0f00 	cmp.w	fp, #0
 801bba2:	d046      	beq.n	801bc32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801bba4:	6810      	ldr	r0, [r2, #0]
 801bba6:	6851      	ldr	r1, [r2, #4]
 801bba8:	ad06      	add	r5, sp, #24
 801bbaa:	c503      	stmia	r5!, {r0, r1}
 801bbac:	6818      	ldr	r0, [r3, #0]
 801bbae:	6859      	ldr	r1, [r3, #4]
 801bbb0:	ad08      	add	r5, sp, #32
 801bbb2:	c503      	stmia	r5!, {r0, r1}
 801bbb4:	a806      	add	r0, sp, #24
 801bbb6:	f7fa f9d7 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bbba:	4631      	mov	r1, r6
 801bbbc:	a808      	add	r0, sp, #32
 801bbbe:	f7fa f9bb 	bl	8015f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bbc2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bbc6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801bbca:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801bbce:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801bbd2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801bbd6:	fb16 2103 	smlabb	r1, r6, r3, r2
 801bbda:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801bbde:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801bbe2:	4f5d      	ldr	r7, [pc, #372]	; (801bd58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801bbe4:	440a      	add	r2, r1
 801bbe6:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bbea:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bbee:	6838      	ldr	r0, [r7, #0]
 801bbf0:	4413      	add	r3, r2
 801bbf2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bbf6:	6803      	ldr	r3, [r0, #0]
 801bbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbfa:	4798      	blx	r3
 801bbfc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801bc00:	46b9      	mov	r9, r7
 801bc02:	d019      	beq.n	801bc38 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801bc04:	f010 0f04 	tst.w	r0, #4
 801bc08:	d01a      	beq.n	801bc40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801bc0a:	f8d9 0000 	ldr.w	r0, [r9]
 801bc0e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801bc12:	6801      	ldr	r1, [r0, #0]
 801bc14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bc18:	e9cd b403 	strd	fp, r4, [sp, #12]
 801bc1c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801bc20:	9402      	str	r4, [sp, #8]
 801bc22:	b2ad      	uxth	r5, r5
 801bc24:	fa1f f488 	uxth.w	r4, r8
 801bc28:	9501      	str	r5, [sp, #4]
 801bc2a:	9400      	str	r4, [sp, #0]
 801bc2c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801bc2e:	4631      	mov	r1, r6
 801bc30:	47a0      	blx	r4
 801bc32:	b00b      	add	sp, #44	; 0x2c
 801bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc38:	b914      	cbnz	r4, 801bc40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801bc3a:	f010 0f01 	tst.w	r0, #1
 801bc3e:	e7e3      	b.n	801bc08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801bc40:	f8d9 0000 	ldr.w	r0, [r9]
 801bc44:	6803      	ldr	r3, [r0, #0]
 801bc46:	6a1b      	ldr	r3, [r3, #32]
 801bc48:	4798      	blx	r3
 801bc4a:	4b44      	ldr	r3, [pc, #272]	; (801bd5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 801bc4c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801bc50:	881a      	ldrh	r2, [r3, #0]
 801bc52:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801bc56:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801bc5a:	fb02 1404 	mla	r4, r2, r4, r1
 801bc5e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801bc62:	469a      	mov	sl, r3
 801bc64:	fb05 f502 	mul.w	r5, r5, r2
 801bc68:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801bc6c:	d058      	beq.n	801bd20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 801bc6e:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801bc72:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801bc76:	fa1f f28b 	uxth.w	r2, fp
 801bc7a:	fa1f f989 	uxth.w	r9, r9
 801bc7e:	469e      	mov	lr, r3
 801bc80:	42ac      	cmp	r4, r5
 801bc82:	d263      	bcs.n	801bd4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801bc84:	eb04 0a07 	add.w	sl, r4, r7
 801bc88:	4554      	cmp	r4, sl
 801bc8a:	d23c      	bcs.n	801bd06 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 801bc8c:	8821      	ldrh	r1, [r4, #0]
 801bc8e:	f836 3b02 	ldrh.w	r3, [r6], #2
 801bc92:	1208      	asrs	r0, r1, #8
 801bc94:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801bc98:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bc9c:	fb10 f009 	smulbb	r0, r0, r9
 801bca0:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801bca4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bca8:	00c9      	lsls	r1, r1, #3
 801bcaa:	fb0c 0c02 	mla	ip, ip, r2, r0
 801bcae:	b2c9      	uxtb	r1, r1
 801bcb0:	10d8      	asrs	r0, r3, #3
 801bcb2:	00db      	lsls	r3, r3, #3
 801bcb4:	fb11 f109 	smulbb	r1, r1, r9
 801bcb8:	b2db      	uxtb	r3, r3
 801bcba:	fa1f fc8c 	uxth.w	ip, ip
 801bcbe:	fb03 1302 	mla	r3, r3, r2, r1
 801bcc2:	b29b      	uxth	r3, r3
 801bcc4:	f10c 0101 	add.w	r1, ip, #1
 801bcc8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801bccc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801bcd0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801bcd4:	fb1b fb09 	smulbb	fp, fp, r9
 801bcd8:	1c59      	adds	r1, r3, #1
 801bcda:	fb00 b002 	mla	r0, r0, r2, fp
 801bcde:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801bce2:	b280      	uxth	r0, r0
 801bce4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801bce8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bcec:	ea4c 0c03 	orr.w	ip, ip, r3
 801bcf0:	1c43      	adds	r3, r0, #1
 801bcf2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801bcf6:	0940      	lsrs	r0, r0, #5
 801bcf8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bcfc:	ea4c 0c00 	orr.w	ip, ip, r0
 801bd00:	f824 cb02 	strh.w	ip, [r4], #2
 801bd04:	e7c0      	b.n	801bc88 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801bd06:	f8be 3000 	ldrh.w	r3, [lr]
 801bd0a:	eba3 0308 	sub.w	r3, r3, r8
 801bd0e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bd12:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801bd16:	eba3 0308 	sub.w	r3, r3, r8
 801bd1a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801bd1e:	e7af      	b.n	801bc80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801bd20:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801bd24:	f8d9 0000 	ldr.w	r0, [r9]
 801bd28:	42ac      	cmp	r4, r5
 801bd2a:	6803      	ldr	r3, [r0, #0]
 801bd2c:	d20e      	bcs.n	801bd4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801bd2e:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 801bd32:	4632      	mov	r2, r6
 801bd34:	463b      	mov	r3, r7
 801bd36:	4621      	mov	r1, r4
 801bd38:	47c0      	blx	r8
 801bd3a:	f8ba 3000 	ldrh.w	r3, [sl]
 801bd3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bd42:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801bd46:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801bd4a:	e7eb      	b.n	801bd24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801bd4c:	4b02      	ldr	r3, [pc, #8]	; (801bd58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801bd4e:	6818      	ldr	r0, [r3, #0]
 801bd50:	6803      	ldr	r3, [r0, #0]
 801bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd54:	4798      	blx	r3
 801bd56:	e76c      	b.n	801bc32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801bd58:	2000a060 	.word	0x2000a060
 801bd5c:	2000a05a 	.word	0x2000a05a

0801bd60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bd60:	b510      	push	{r4, lr}
 801bd62:	2104      	movs	r1, #4
 801bd64:	4604      	mov	r4, r0
 801bd66:	f009 f87a 	bl	8024e5e <_ZdlPvj>
 801bd6a:	4620      	mov	r0, r4
 801bd6c:	bd10      	pop	{r4, pc}

0801bd6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801bd6e:	b510      	push	{r4, lr}
 801bd70:	2104      	movs	r1, #4
 801bd72:	4604      	mov	r4, r0
 801bd74:	f009 f873 	bl	8024e5e <_ZdlPvj>
 801bd78:	4620      	mov	r0, r4
 801bd7a:	bd10      	pop	{r4, pc}

0801bd7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bd7c:	b510      	push	{r4, lr}
 801bd7e:	2104      	movs	r1, #4
 801bd80:	4604      	mov	r4, r0
 801bd82:	f009 f86c 	bl	8024e5e <_ZdlPvj>
 801bd86:	4620      	mov	r0, r4
 801bd88:	bd10      	pop	{r4, pc}

0801bd8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801bd8a:	b510      	push	{r4, lr}
 801bd8c:	2104      	movs	r1, #4
 801bd8e:	4604      	mov	r4, r0
 801bd90:	f009 f865 	bl	8024e5e <_ZdlPvj>
 801bd94:	4620      	mov	r0, r4
 801bd96:	bd10      	pop	{r4, pc}

0801bd98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bd98:	b510      	push	{r4, lr}
 801bd9a:	2104      	movs	r1, #4
 801bd9c:	4604      	mov	r4, r0
 801bd9e:	f009 f85e 	bl	8024e5e <_ZdlPvj>
 801bda2:	4620      	mov	r0, r4
 801bda4:	bd10      	pop	{r4, pc}

0801bda6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801bda6:	b510      	push	{r4, lr}
 801bda8:	2104      	movs	r1, #4
 801bdaa:	4604      	mov	r4, r0
 801bdac:	f009 f857 	bl	8024e5e <_ZdlPvj>
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	bd10      	pop	{r4, pc}

0801bdb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bdb4:	b510      	push	{r4, lr}
 801bdb6:	2104      	movs	r1, #4
 801bdb8:	4604      	mov	r4, r0
 801bdba:	f009 f850 	bl	8024e5e <_ZdlPvj>
 801bdbe:	4620      	mov	r0, r4
 801bdc0:	bd10      	pop	{r4, pc}

0801bdc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801bdc2:	b510      	push	{r4, lr}
 801bdc4:	2104      	movs	r1, #4
 801bdc6:	4604      	mov	r4, r0
 801bdc8:	f009 f849 	bl	8024e5e <_ZdlPvj>
 801bdcc:	4620      	mov	r0, r4
 801bdce:	bd10      	pop	{r4, pc}

0801bdd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bdd0:	b510      	push	{r4, lr}
 801bdd2:	2104      	movs	r1, #4
 801bdd4:	4604      	mov	r4, r0
 801bdd6:	f009 f842 	bl	8024e5e <_ZdlPvj>
 801bdda:	4620      	mov	r0, r4
 801bddc:	bd10      	pop	{r4, pc}

0801bdde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bdde:	b510      	push	{r4, lr}
 801bde0:	2104      	movs	r1, #4
 801bde2:	4604      	mov	r4, r0
 801bde4:	f009 f83b 	bl	8024e5e <_ZdlPvj>
 801bde8:	4620      	mov	r0, r4
 801bdea:	bd10      	pop	{r4, pc}

0801bdec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bdec:	b510      	push	{r4, lr}
 801bdee:	2104      	movs	r1, #4
 801bdf0:	4604      	mov	r4, r0
 801bdf2:	f009 f834 	bl	8024e5e <_ZdlPvj>
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	bd10      	pop	{r4, pc}

0801bdfa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bdfa:	b510      	push	{r4, lr}
 801bdfc:	2104      	movs	r1, #4
 801bdfe:	4604      	mov	r4, r0
 801be00:	f009 f82d 	bl	8024e5e <_ZdlPvj>
 801be04:	4620      	mov	r0, r4
 801be06:	bd10      	pop	{r4, pc}

0801be08 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801be08:	b510      	push	{r4, lr}
 801be0a:	2104      	movs	r1, #4
 801be0c:	4604      	mov	r4, r0
 801be0e:	f009 f826 	bl	8024e5e <_ZdlPvj>
 801be12:	4620      	mov	r0, r4
 801be14:	bd10      	pop	{r4, pc}

0801be16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801be16:	b510      	push	{r4, lr}
 801be18:	2104      	movs	r1, #4
 801be1a:	4604      	mov	r4, r0
 801be1c:	f009 f81f 	bl	8024e5e <_ZdlPvj>
 801be20:	4620      	mov	r0, r4
 801be22:	bd10      	pop	{r4, pc}

0801be24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801be24:	b510      	push	{r4, lr}
 801be26:	2104      	movs	r1, #4
 801be28:	4604      	mov	r4, r0
 801be2a:	f009 f818 	bl	8024e5e <_ZdlPvj>
 801be2e:	4620      	mov	r0, r4
 801be30:	bd10      	pop	{r4, pc}

0801be32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801be32:	b510      	push	{r4, lr}
 801be34:	2104      	movs	r1, #4
 801be36:	4604      	mov	r4, r0
 801be38:	f009 f811 	bl	8024e5e <_ZdlPvj>
 801be3c:	4620      	mov	r0, r4
 801be3e:	bd10      	pop	{r4, pc}

0801be40 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801be40:	b510      	push	{r4, lr}
 801be42:	2104      	movs	r1, #4
 801be44:	4604      	mov	r4, r0
 801be46:	f009 f80a 	bl	8024e5e <_ZdlPvj>
 801be4a:	4620      	mov	r0, r4
 801be4c:	bd10      	pop	{r4, pc}

0801be4e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801be4e:	b510      	push	{r4, lr}
 801be50:	2104      	movs	r1, #4
 801be52:	4604      	mov	r4, r0
 801be54:	f009 f803 	bl	8024e5e <_ZdlPvj>
 801be58:	4620      	mov	r0, r4
 801be5a:	bd10      	pop	{r4, pc}

0801be5c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801be5c:	b510      	push	{r4, lr}
 801be5e:	2104      	movs	r1, #4
 801be60:	4604      	mov	r4, r0
 801be62:	f008 fffc 	bl	8024e5e <_ZdlPvj>
 801be66:	4620      	mov	r0, r4
 801be68:	bd10      	pop	{r4, pc}

0801be6a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801be6a:	b510      	push	{r4, lr}
 801be6c:	2104      	movs	r1, #4
 801be6e:	4604      	mov	r4, r0
 801be70:	f008 fff5 	bl	8024e5e <_ZdlPvj>
 801be74:	4620      	mov	r0, r4
 801be76:	bd10      	pop	{r4, pc}

0801be78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801be78:	b510      	push	{r4, lr}
 801be7a:	2104      	movs	r1, #4
 801be7c:	4604      	mov	r4, r0
 801be7e:	f008 ffee 	bl	8024e5e <_ZdlPvj>
 801be82:	4620      	mov	r0, r4
 801be84:	bd10      	pop	{r4, pc}

0801be86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801be86:	b510      	push	{r4, lr}
 801be88:	2104      	movs	r1, #4
 801be8a:	4604      	mov	r4, r0
 801be8c:	f008 ffe7 	bl	8024e5e <_ZdlPvj>
 801be90:	4620      	mov	r0, r4
 801be92:	bd10      	pop	{r4, pc}

0801be94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801be94:	b510      	push	{r4, lr}
 801be96:	2104      	movs	r1, #4
 801be98:	4604      	mov	r4, r0
 801be9a:	f008 ffe0 	bl	8024e5e <_ZdlPvj>
 801be9e:	4620      	mov	r0, r4
 801bea0:	bd10      	pop	{r4, pc}

0801bea2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bea2:	b510      	push	{r4, lr}
 801bea4:	2104      	movs	r1, #4
 801bea6:	4604      	mov	r4, r0
 801bea8:	f008 ffd9 	bl	8024e5e <_ZdlPvj>
 801beac:	4620      	mov	r0, r4
 801beae:	bd10      	pop	{r4, pc}

0801beb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801beb0:	b510      	push	{r4, lr}
 801beb2:	2104      	movs	r1, #4
 801beb4:	4604      	mov	r4, r0
 801beb6:	f008 ffd2 	bl	8024e5e <_ZdlPvj>
 801beba:	4620      	mov	r0, r4
 801bebc:	bd10      	pop	{r4, pc}

0801bebe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801bebe:	b510      	push	{r4, lr}
 801bec0:	2104      	movs	r1, #4
 801bec2:	4604      	mov	r4, r0
 801bec4:	f008 ffcb 	bl	8024e5e <_ZdlPvj>
 801bec8:	4620      	mov	r0, r4
 801beca:	bd10      	pop	{r4, pc}

0801becc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801becc:	b510      	push	{r4, lr}
 801bece:	2104      	movs	r1, #4
 801bed0:	4604      	mov	r4, r0
 801bed2:	f008 ffc4 	bl	8024e5e <_ZdlPvj>
 801bed6:	4620      	mov	r0, r4
 801bed8:	bd10      	pop	{r4, pc}

0801beda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801beda:	b510      	push	{r4, lr}
 801bedc:	2104      	movs	r1, #4
 801bede:	4604      	mov	r4, r0
 801bee0:	f008 ffbd 	bl	8024e5e <_ZdlPvj>
 801bee4:	4620      	mov	r0, r4
 801bee6:	bd10      	pop	{r4, pc}

0801bee8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beec:	460d      	mov	r5, r1
 801beee:	b087      	sub	sp, #28
 801bef0:	4614      	mov	r4, r2
 801bef2:	4698      	mov	r8, r3
 801bef4:	b333      	cbz	r3, 801bf44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801bef6:	4608      	mov	r0, r1
 801bef8:	f7f7 f979 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801befc:	bb10      	cbnz	r0, 801bf44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801befe:	6828      	ldr	r0, [r5, #0]
 801bf00:	6869      	ldr	r1, [r5, #4]
 801bf02:	4e73      	ldr	r6, [pc, #460]	; (801c0d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 801bf04:	ab04      	add	r3, sp, #16
 801bf06:	c303      	stmia	r3!, {r0, r1}
 801bf08:	a804      	add	r0, sp, #16
 801bf0a:	f7fa f82d 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bf0e:	6830      	ldr	r0, [r6, #0]
 801bf10:	6803      	ldr	r3, [r0, #0]
 801bf12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf14:	4798      	blx	r3
 801bf16:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bf1a:	d016      	beq.n	801bf4a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801bf1c:	f010 0f08 	tst.w	r0, #8
 801bf20:	d016      	beq.n	801bf50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801bf22:	6830      	ldr	r0, [r6, #0]
 801bf24:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 801bf28:	6801      	ldr	r1, [r0, #0]
 801bf2a:	9501      	str	r5, [sp, #4]
 801bf2c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 801bf30:	f8cd 8008 	str.w	r8, [sp, #8]
 801bf34:	9500      	str	r5, [sp, #0]
 801bf36:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 801bf38:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bf3c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bf40:	4621      	mov	r1, r4
 801bf42:	47a8      	blx	r5
 801bf44:	b007      	add	sp, #28
 801bf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf4a:	f010 0f02 	tst.w	r0, #2
 801bf4e:	e7e7      	b.n	801bf20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 801bf50:	6830      	ldr	r0, [r6, #0]
 801bf52:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801bf56:	6803      	ldr	r3, [r0, #0]
 801bf58:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801bf5c:	6a1b      	ldr	r3, [r3, #32]
 801bf5e:	4798      	blx	r3
 801bf60:	495c      	ldr	r1, [pc, #368]	; (801c0d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 801bf62:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801bf66:	880b      	ldrh	r3, [r1, #0]
 801bf68:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801bf6c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bf70:	fb03 c202 	mla	r2, r3, r2, ip
 801bf74:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bf78:	468e      	mov	lr, r1
 801bf7a:	fb07 f203 	mul.w	r2, r7, r3
 801bf7e:	d053      	beq.n	801c028 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 801bf80:	fa1f f388 	uxth.w	r3, r8
 801bf84:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 801bf88:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 801bf8c:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801bf90:	00e4      	lsls	r4, r4, #3
 801bf92:	b2e4      	uxtb	r4, r4
 801bf94:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801bf98:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bf9c:	fb08 f803 	mul.w	r8, r8, r3
 801bfa0:	fb09 f903 	mul.w	r9, r9, r3
 801bfa4:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 801bfa8:	4363      	muls	r3, r4
 801bfaa:	006d      	lsls	r5, r5, #1
 801bfac:	b2bc      	uxth	r4, r7
 801bfae:	4288      	cmp	r0, r1
 801bfb0:	f080 8088 	bcs.w	801c0c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801bfb4:	eb00 0a05 	add.w	sl, r0, r5
 801bfb8:	4550      	cmp	r0, sl
 801bfba:	d22f      	bcs.n	801c01c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801bfbc:	8802      	ldrh	r2, [r0, #0]
 801bfbe:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801bfc2:	10d7      	asrs	r7, r2, #3
 801bfc4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bfc8:	00d2      	lsls	r2, r2, #3
 801bfca:	fb1c fc04 	smulbb	ip, ip, r4
 801bfce:	b2d2      	uxtb	r2, r2
 801bfd0:	44c4      	add	ip, r8
 801bfd2:	fb12 f204 	smulbb	r2, r2, r4
 801bfd6:	fa1f fc8c 	uxth.w	ip, ip
 801bfda:	441a      	add	r2, r3
 801bfdc:	b292      	uxth	r2, r2
 801bfde:	f10c 0b01 	add.w	fp, ip, #1
 801bfe2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bfe6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bfea:	fb17 f704 	smulbb	r7, r7, r4
 801bfee:	f102 0b01 	add.w	fp, r2, #1
 801bff2:	444f      	add	r7, r9
 801bff4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801bff8:	b2bf      	uxth	r7, r7
 801bffa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bffe:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c002:	ea4c 0202 	orr.w	r2, ip, r2
 801c006:	f107 0c01 	add.w	ip, r7, #1
 801c00a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c00e:	097f      	lsrs	r7, r7, #5
 801c010:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c014:	433a      	orrs	r2, r7
 801c016:	f820 2b02 	strh.w	r2, [r0], #2
 801c01a:	e7cd      	b.n	801bfb8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 801c01c:	f8be 2000 	ldrh.w	r2, [lr]
 801c020:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 801c024:	4410      	add	r0, r2
 801c026:	e7c2      	b.n	801bfae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 801c028:	07db      	lsls	r3, r3, #31
 801c02a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c02e:	d50e      	bpl.n	801c04e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 801c030:	006d      	lsls	r5, r5, #1
 801c032:	4290      	cmp	r0, r2
 801c034:	d246      	bcs.n	801c0c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801c036:	1943      	adds	r3, r0, r5
 801c038:	4298      	cmp	r0, r3
 801c03a:	d202      	bcs.n	801c042 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 801c03c:	f820 4b02 	strh.w	r4, [r0], #2
 801c040:	e7fa      	b.n	801c038 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 801c042:	f8be 3000 	ldrh.w	r3, [lr]
 801c046:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 801c04a:	4418      	add	r0, r3
 801c04c:	e7f1      	b.n	801c032 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801c04e:	0787      	lsls	r7, r0, #30
 801c050:	462b      	mov	r3, r5
 801c052:	d00a      	beq.n	801c06a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 801c054:	4603      	mov	r3, r0
 801c056:	4293      	cmp	r3, r2
 801c058:	d205      	bcs.n	801c066 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 801c05a:	801c      	strh	r4, [r3, #0]
 801c05c:	f8be 1000 	ldrh.w	r1, [lr]
 801c060:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801c064:	e7f7      	b.n	801c056 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801c066:	3002      	adds	r0, #2
 801c068:	1e6b      	subs	r3, r5, #1
 801c06a:	07dd      	lsls	r5, r3, #31
 801c06c:	d50d      	bpl.n	801c08a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 801c06e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c072:	3901      	subs	r1, #1
 801c074:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c078:	4291      	cmp	r1, r2
 801c07a:	d205      	bcs.n	801c088 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 801c07c:	800c      	strh	r4, [r1, #0]
 801c07e:	f8be 5000 	ldrh.w	r5, [lr]
 801c082:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 801c086:	e7f7      	b.n	801c078 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 801c088:	3b01      	subs	r3, #1
 801c08a:	b1db      	cbz	r3, 801c0c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801c08c:	b2a1      	uxth	r1, r4
 801c08e:	105b      	asrs	r3, r3, #1
 801c090:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 801c094:	009b      	lsls	r3, r3, #2
 801c096:	4290      	cmp	r0, r2
 801c098:	d214      	bcs.n	801c0c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801c09a:	0781      	lsls	r1, r0, #30
 801c09c:	d006      	beq.n	801c0ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 801c09e:	4b0e      	ldr	r3, [pc, #56]	; (801c0d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 801c0a0:	4a0e      	ldr	r2, [pc, #56]	; (801c0dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 801c0a2:	480f      	ldr	r0, [pc, #60]	; (801c0e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 801c0a4:	f44f 7162 	mov.w	r1, #904	; 0x388
 801c0a8:	f009 f804 	bl	80250b4 <__assert_func>
 801c0ac:	18c5      	adds	r5, r0, r3
 801c0ae:	4601      	mov	r1, r0
 801c0b0:	42a9      	cmp	r1, r5
 801c0b2:	d202      	bcs.n	801c0ba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 801c0b4:	f841 4b04 	str.w	r4, [r1], #4
 801c0b8:	e7fa      	b.n	801c0b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 801c0ba:	f8be 1000 	ldrh.w	r1, [lr]
 801c0be:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c0c2:	e7e8      	b.n	801c096 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 801c0c4:	6830      	ldr	r0, [r6, #0]
 801c0c6:	6803      	ldr	r3, [r0, #0]
 801c0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0ca:	4798      	blx	r3
 801c0cc:	e73a      	b.n	801bf44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c0ce:	bf00      	nop
 801c0d0:	2000a060 	.word	0x2000a060
 801c0d4:	2000a05a 	.word	0x2000a05a
 801c0d8:	0802ac1c 	.word	0x0802ac1c
 801c0dc:	0802b3d4 	.word	0x0802b3d4
 801c0e0:	0802ac4b 	.word	0x0802ac4b

0801c0e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0e8:	4f97      	ldr	r7, [pc, #604]	; (801c348 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801c0ea:	4616      	mov	r6, r2
 801c0ec:	683a      	ldr	r2, [r7, #0]
 801c0ee:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801c0f2:	2a02      	cmp	r2, #2
 801c0f4:	b08f      	sub	sp, #60	; 0x3c
 801c0f6:	4604      	mov	r4, r0
 801c0f8:	4689      	mov	r9, r1
 801c0fa:	d106      	bne.n	801c10a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801c0fc:	4b93      	ldr	r3, [pc, #588]	; (801c34c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801c0fe:	4a94      	ldr	r2, [pc, #592]	; (801c350 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c100:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 801c104:	4893      	ldr	r0, [pc, #588]	; (801c354 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801c106:	f008 ffd5 	bl	80250b4 <__assert_func>
 801c10a:	ad0e      	add	r5, sp, #56	; 0x38
 801c10c:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801c110:	4628      	mov	r0, r5
 801c112:	f7fd fa4f 	bl	80195b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c116:	6823      	ldr	r3, [r4, #0]
 801c118:	4680      	mov	r8, r0
 801c11a:	6a1b      	ldr	r3, [r3, #32]
 801c11c:	4620      	mov	r0, r4
 801c11e:	4798      	blx	r3
 801c120:	4580      	cmp	r8, r0
 801c122:	d004      	beq.n	801c12e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801c124:	4b8c      	ldr	r3, [pc, #560]	; (801c358 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801c126:	4a8a      	ldr	r2, [pc, #552]	; (801c350 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c128:	f240 21ca 	movw	r1, #714	; 0x2ca
 801c12c:	e7ea      	b.n	801c104 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c12e:	4628      	mov	r0, r5
 801c130:	f7fd f9b6 	bl	80194a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c134:	4680      	mov	r8, r0
 801c136:	b920      	cbnz	r0, 801c142 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801c138:	4b88      	ldr	r3, [pc, #544]	; (801c35c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801c13a:	4a85      	ldr	r2, [pc, #532]	; (801c350 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c13c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801c140:	e7e0      	b.n	801c104 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c142:	6830      	ldr	r0, [r6, #0]
 801c144:	6871      	ldr	r1, [r6, #4]
 801c146:	f9b6 a000 	ldrsh.w	sl, [r6]
 801c14a:	ab06      	add	r3, sp, #24
 801c14c:	c303      	stmia	r3!, {r0, r1}
 801c14e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c152:	f8d9 0000 	ldr.w	r0, [r9]
 801c156:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801c15a:	ab08      	add	r3, sp, #32
 801c15c:	c303      	stmia	r3!, {r0, r1}
 801c15e:	4628      	mov	r0, r5
 801c160:	f7fd f896 	bl	8019290 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c164:	4606      	mov	r6, r0
 801c166:	4628      	mov	r0, r5
 801c168:	f7fd f8cc 	bl	8019304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c16c:	f10d 0b20 	add.w	fp, sp, #32
 801c170:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801c174:	a806      	add	r0, sp, #24
 801c176:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c17a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801c17e:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801c182:	f7f9 fef1 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c186:	4658      	mov	r0, fp
 801c188:	f7f9 feee 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c18c:	a80a      	add	r0, sp, #40	; 0x28
 801c18e:	f7f9 feeb 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c192:	4d73      	ldr	r5, [pc, #460]	; (801c360 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c194:	4b73      	ldr	r3, [pc, #460]	; (801c364 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801c196:	f9b5 2000 	ldrsh.w	r2, [r5]
 801c19a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c19e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c1a2:	2100      	movs	r1, #0
 801c1a4:	910c      	str	r1, [sp, #48]	; 0x30
 801c1a6:	4658      	mov	r0, fp
 801c1a8:	a90c      	add	r1, sp, #48	; 0x30
 801c1aa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c1ae:	f7f6 ffdb 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 801c1b2:	4658      	mov	r0, fp
 801c1b4:	f7f7 f81b 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	f040 8099 	bne.w	801c2f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801c1be:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801c1c2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801c1c6:	4288      	cmp	r0, r1
 801c1c8:	db37      	blt.n	801c23a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801c1ca:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801c1ce:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801c1d2:	429a      	cmp	r2, r3
 801c1d4:	db31      	blt.n	801c23a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801c1d6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801c1da:	4430      	add	r0, r6
 801c1dc:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c1e0:	4431      	add	r1, r6
 801c1e2:	b200      	sxth	r0, r0
 801c1e4:	b209      	sxth	r1, r1
 801c1e6:	4288      	cmp	r0, r1
 801c1e8:	dc27      	bgt.n	801c23a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801c1ea:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c1ee:	440a      	add	r2, r1
 801c1f0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801c1f4:	440b      	add	r3, r1
 801c1f6:	b212      	sxth	r2, r2
 801c1f8:	b21b      	sxth	r3, r3
 801c1fa:	429a      	cmp	r2, r3
 801c1fc:	dc1d      	bgt.n	801c23a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801c1fe:	6823      	ldr	r3, [r4, #0]
 801c200:	4620      	mov	r0, r4
 801c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c204:	4798      	blx	r3
 801c206:	4682      	mov	sl, r0
 801c208:	6838      	ldr	r0, [r7, #0]
 801c20a:	6803      	ldr	r3, [r0, #0]
 801c20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c20e:	4798      	blx	r3
 801c210:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c214:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c218:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c21c:	1a5b      	subs	r3, r3, r1
 801c21e:	b29b      	uxth	r3, r3
 801c220:	b21c      	sxth	r4, r3
 801c222:	2c00      	cmp	r4, #0
 801c224:	dc0e      	bgt.n	801c244 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801c226:	bf1f      	itttt	ne
 801c228:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801c22c:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801c230:	185b      	addne	r3, r3, r1
 801c232:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801c236:	4644      	mov	r4, r8
 801c238:	e009      	b.n	801c24e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 801c23a:	4b4b      	ldr	r3, [pc, #300]	; (801c368 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801c23c:	4a44      	ldr	r2, [pc, #272]	; (801c350 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c23e:	f240 21da 	movw	r1, #730	; 0x2da
 801c242:	e75f      	b.n	801c104 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c244:	1ad3      	subs	r3, r2, r3
 801c246:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801c24a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c24e:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801c252:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c256:	1b9b      	subs	r3, r3, r6
 801c258:	b29b      	uxth	r3, r3
 801c25a:	b219      	sxth	r1, r3
 801c25c:	2900      	cmp	r1, #0
 801c25e:	dd4b      	ble.n	801c2f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 801c260:	4351      	muls	r1, r2
 801c262:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801c266:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801c26a:	1acb      	subs	r3, r1, r3
 801c26c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c270:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c274:	2e00      	cmp	r6, #0
 801c276:	dd3b      	ble.n	801c2f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801c278:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	dd37      	ble.n	801c2f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801c280:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c284:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c288:	fb0a f90c 	mul.w	r9, sl, ip
 801c28c:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801c290:	4481      	add	r9, r0
 801c292:	8828      	ldrh	r0, [r5, #0]
 801c294:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801c298:	42ae      	cmp	r6, r5
 801c29a:	bfa8      	it	ge
 801c29c:	462e      	movge	r6, r5
 801c29e:	1a41      	subs	r1, r0, r1
 801c2a0:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c2a4:	428e      	cmp	r6, r1
 801c2a6:	bfa8      	it	ge
 801c2a8:	460e      	movge	r6, r1
 801c2aa:	429d      	cmp	r5, r3
 801c2ac:	bfa8      	it	ge
 801c2ae:	461d      	movge	r5, r3
 801c2b0:	4b2c      	ldr	r3, [pc, #176]	; (801c364 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801c2b2:	881b      	ldrh	r3, [r3, #0]
 801c2b4:	eba3 030c 	sub.w	r3, r3, ip
 801c2b8:	429d      	cmp	r5, r3
 801c2ba:	bfa8      	it	ge
 801c2bc:	461d      	movge	r5, r3
 801c2be:	42b0      	cmp	r0, r6
 801c2c0:	d12c      	bne.n	801c31c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 801c2c2:	4290      	cmp	r0, r2
 801c2c4:	d12a      	bne.n	801c31c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 801c2c6:	6838      	ldr	r0, [r7, #0]
 801c2c8:	9203      	str	r2, [sp, #12]
 801c2ca:	6803      	ldr	r3, [r0, #0]
 801c2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2ce:	4798      	blx	r3
 801c2d0:	07c3      	lsls	r3, r0, #31
 801c2d2:	d51a      	bpl.n	801c30a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801c2d4:	9a03      	ldr	r2, [sp, #12]
 801c2d6:	6838      	ldr	r0, [r7, #0]
 801c2d8:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801c2dc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801c2e0:	6803      	ldr	r3, [r0, #0]
 801c2e2:	9200      	str	r2, [sp, #0]
 801c2e4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801c2e6:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801c2ea:	4623      	mov	r3, r4
 801c2ec:	47a8      	blx	r5
 801c2ee:	4680      	mov	r8, r0
 801c2f0:	4640      	mov	r0, r8
 801c2f2:	b00f      	add	sp, #60	; 0x3c
 801c2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f8:	bf1f      	itttt	ne
 801c2fa:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801c2fe:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801c302:	185b      	addne	r3, r3, r1
 801c304:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801c308:	e7b2      	b.n	801c270 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 801c30a:	6838      	ldr	r0, [r7, #0]
 801c30c:	6803      	ldr	r3, [r0, #0]
 801c30e:	464a      	mov	r2, r9
 801c310:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801c312:	4621      	mov	r1, r4
 801c314:	fb05 f30a 	mul.w	r3, r5, sl
 801c318:	47b0      	blx	r6
 801c31a:	e7e9      	b.n	801c2f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801c31c:	4355      	muls	r5, r2
 801c31e:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801c322:	9303      	str	r3, [sp, #12]
 801c324:	0076      	lsls	r6, r6, #1
 801c326:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801c32a:	9b03      	ldr	r3, [sp, #12]
 801c32c:	429c      	cmp	r4, r3
 801c32e:	d2df      	bcs.n	801c2f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801c330:	6838      	ldr	r0, [r7, #0]
 801c332:	6803      	ldr	r3, [r0, #0]
 801c334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c336:	464a      	mov	r2, r9
 801c338:	461d      	mov	r5, r3
 801c33a:	4621      	mov	r1, r4
 801c33c:	4633      	mov	r3, r6
 801c33e:	47a8      	blx	r5
 801c340:	44d1      	add	r9, sl
 801c342:	445c      	add	r4, fp
 801c344:	e7f1      	b.n	801c32a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 801c346:	bf00      	nop
 801c348:	2000a060 	.word	0x2000a060
 801c34c:	0802aa42 	.word	0x0802aa42
 801c350:	0802b2b7 	.word	0x0802b2b7
 801c354:	0802ac4b 	.word	0x0802ac4b
 801c358:	0802aaf4 	.word	0x0802aaf4
 801c35c:	0802ab49 	.word	0x0802ab49
 801c360:	2000a05a 	.word	0x2000a05a
 801c364:	2000a05c 	.word	0x2000a05c
 801c368:	0802ab87 	.word	0x0802ab87

0801c36c <_ZN8touchgfx8LCD16bppC1Ev>:
 801c36c:	2200      	movs	r2, #0
 801c36e:	4910      	ldr	r1, [pc, #64]	; (801c3b0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801c370:	6042      	str	r2, [r0, #4]
 801c372:	6001      	str	r1, [r0, #0]
 801c374:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c378:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c37c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c380:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c384:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c388:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c38c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c390:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c394:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c398:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c39c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801c3a0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801c3a4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801c3a8:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801c3ac:	4770      	bx	lr
 801c3ae:	bf00      	nop
 801c3b0:	0802af2c 	.word	0x0802af2c

0801c3b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3b8:	460d      	mov	r5, r1
 801c3ba:	b08b      	sub	sp, #44	; 0x2c
 801c3bc:	4604      	mov	r4, r0
 801c3be:	6808      	ldr	r0, [r1, #0]
 801c3c0:	6849      	ldr	r1, [r1, #4]
 801c3c2:	4699      	mov	r9, r3
 801c3c4:	ab06      	add	r3, sp, #24
 801c3c6:	c303      	stmia	r3!, {r0, r1}
 801c3c8:	6810      	ldr	r0, [r2, #0]
 801c3ca:	6851      	ldr	r1, [r2, #4]
 801c3cc:	ab08      	add	r3, sp, #32
 801c3ce:	c303      	stmia	r3!, {r0, r1}
 801c3d0:	a806      	add	r0, sp, #24
 801c3d2:	f7f9 fdc9 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c3d6:	4629      	mov	r1, r5
 801c3d8:	a808      	add	r0, sp, #32
 801c3da:	f7f9 fdad 	bl	8015f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c3de:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c3e2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c3e6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c3ea:	4d5f      	ldr	r5, [pc, #380]	; (801c568 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801c3ec:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c3f0:	6828      	ldr	r0, [r5, #0]
 801c3f2:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801c3f6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c3fa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c3fe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c402:	440a      	add	r2, r1
 801c404:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c408:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c40c:	4413      	add	r3, r2
 801c40e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c412:	6803      	ldr	r3, [r0, #0]
 801c414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c416:	4798      	blx	r3
 801c418:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c41c:	d118      	bne.n	801c450 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801c41e:	f010 0f20 	tst.w	r0, #32
 801c422:	6828      	ldr	r0, [r5, #0]
 801c424:	d017      	beq.n	801c456 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801c426:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801c42a:	6801      	ldr	r1, [r0, #0]
 801c42c:	9502      	str	r5, [sp, #8]
 801c42e:	b2b6      	uxth	r6, r6
 801c430:	fa1f f588 	uxth.w	r5, r8
 801c434:	f8cd 900c 	str.w	r9, [sp, #12]
 801c438:	9601      	str	r6, [sp, #4]
 801c43a:	9500      	str	r5, [sp, #0]
 801c43c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801c43e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c442:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c446:	4621      	mov	r1, r4
 801c448:	47a8      	blx	r5
 801c44a:	b00b      	add	sp, #44	; 0x2c
 801c44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c450:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c454:	e7e5      	b.n	801c422 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801c456:	6803      	ldr	r3, [r0, #0]
 801c458:	6a1b      	ldr	r3, [r3, #32]
 801c45a:	4798      	blx	r3
 801c45c:	4a43      	ldr	r2, [pc, #268]	; (801c56c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801c45e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c462:	f8b2 e000 	ldrh.w	lr, [r2]
 801c466:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c46a:	fb0e 1303 	mla	r3, lr, r3, r1
 801c46e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c472:	fb0e fe06 	mul.w	lr, lr, r6
 801c476:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801c47a:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801c47e:	9305      	str	r3, [sp, #20]
 801c480:	4692      	mov	sl, r2
 801c482:	4570      	cmp	r0, lr
 801c484:	d26a      	bcs.n	801c55c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 801c486:	9b05      	ldr	r3, [sp, #20]
 801c488:	4621      	mov	r1, r4
 801c48a:	eb00 0b03 	add.w	fp, r0, r3
 801c48e:	4558      	cmp	r0, fp
 801c490:	d257      	bcs.n	801c542 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 801c492:	f851 4b04 	ldr.w	r4, [r1], #4
 801c496:	0e22      	lsrs	r2, r4, #24
 801c498:	d012      	beq.n	801c4c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801c49a:	2aff      	cmp	r2, #255	; 0xff
 801c49c:	ea4f 2714 	mov.w	r7, r4, lsr #8
 801c4a0:	d110      	bne.n	801c4c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c4a2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c4a6:	d10d      	bne.n	801c4c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c4a8:	0963      	lsrs	r3, r4, #5
 801c4aa:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801c4ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c4b2:	f027 0707 	bic.w	r7, r7, #7
 801c4b6:	431f      	orrs	r7, r3
 801c4b8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c4bc:	433c      	orrs	r4, r7
 801c4be:	8004      	strh	r4, [r0, #0]
 801c4c0:	3002      	adds	r0, #2
 801c4c2:	e7e4      	b.n	801c48e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 801c4c4:	fb09 f302 	mul.w	r3, r9, r2
 801c4c8:	1c5a      	adds	r2, r3, #1
 801c4ca:	f8b0 c000 	ldrh.w	ip, [r0]
 801c4ce:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801c4d2:	1212      	asrs	r2, r2, #8
 801c4d4:	b293      	uxth	r3, r2
 801c4d6:	ea4f 262c 	mov.w	r6, ip, asr #8
 801c4da:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801c4de:	43d2      	mvns	r2, r2
 801c4e0:	b2d2      	uxtb	r2, r2
 801c4e2:	fb15 f503 	smulbb	r5, r5, r3
 801c4e6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c4ea:	fb06 5602 	mla	r6, r6, r2, r5
 801c4ee:	b2ff      	uxtb	r7, r7
 801c4f0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c4f4:	b2e4      	uxtb	r4, r4
 801c4f6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c4fa:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c4fe:	fb17 f703 	smulbb	r7, r7, r3
 801c502:	fa5f fc8c 	uxtb.w	ip, ip
 801c506:	fb14 f403 	smulbb	r4, r4, r3
 801c50a:	fb05 7702 	mla	r7, r5, r2, r7
 801c50e:	fb0c 4202 	mla	r2, ip, r2, r4
 801c512:	b2b6      	uxth	r6, r6
 801c514:	b2bf      	uxth	r7, r7
 801c516:	b292      	uxth	r2, r2
 801c518:	1c73      	adds	r3, r6, #1
 801c51a:	f102 0c01 	add.w	ip, r2, #1
 801c51e:	1c7d      	adds	r5, r7, #1
 801c520:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c524:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c528:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801c52c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c530:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c534:	097f      	lsrs	r7, r7, #5
 801c536:	4316      	orrs	r6, r2
 801c538:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c53c:	433e      	orrs	r6, r7
 801c53e:	8006      	strh	r6, [r0, #0]
 801c540:	e7be      	b.n	801c4c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801c542:	f8ba 3000 	ldrh.w	r3, [sl]
 801c546:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 801c54a:	eba3 0308 	sub.w	r3, r3, r8
 801c54e:	eba4 0408 	sub.w	r4, r4, r8
 801c552:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c556:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801c55a:	e792      	b.n	801c482 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801c55c:	4b02      	ldr	r3, [pc, #8]	; (801c568 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801c55e:	6818      	ldr	r0, [r3, #0]
 801c560:	6803      	ldr	r3, [r0, #0]
 801c562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c564:	4798      	blx	r3
 801c566:	e770      	b.n	801c44a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801c568:	2000a060 	.word	0x2000a060
 801c56c:	2000a05a 	.word	0x2000a05a

0801c570 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c570:	b570      	push	{r4, r5, r6, lr}
 801c572:	9d04      	ldr	r5, [sp, #16]
 801c574:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801c578:	460c      	mov	r4, r1
 801c57a:	4619      	mov	r1, r3
 801c57c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c580:	2a0d      	cmp	r2, #13
 801c582:	d820      	bhi.n	801c5c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801c584:	e8df f002 	tbb	[pc, r2]
 801c588:	18121807 	.word	0x18121807
 801c58c:	18181818 	.word	0x18181818
 801c590:	18181818 	.word	0x18181818
 801c594:	1818      	.short	0x1818
 801c596:	6802      	ldr	r2, [r0, #0]
 801c598:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c59c:	68d6      	ldr	r6, [r2, #12]
 801c59e:	462b      	mov	r3, r5
 801c5a0:	460a      	mov	r2, r1
 801c5a2:	46b4      	mov	ip, r6
 801c5a4:	4621      	mov	r1, r4
 801c5a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c5aa:	4760      	bx	ip
 801c5ac:	462a      	mov	r2, r5
 801c5ae:	4620      	mov	r0, r4
 801c5b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c5b4:	f7ff befe 	b.w	801c3b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c5b8:	4b03      	ldr	r3, [pc, #12]	; (801c5c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801c5ba:	4a04      	ldr	r2, [pc, #16]	; (801c5cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801c5bc:	4804      	ldr	r0, [pc, #16]	; (801c5d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801c5be:	f240 21c1 	movw	r1, #705	; 0x2c1
 801c5c2:	f008 fd77 	bl	80250b4 <__assert_func>
 801c5c6:	bd70      	pop	{r4, r5, r6, pc}
 801c5c8:	0802abe7 	.word	0x0802abe7
 801c5cc:	0802b33d 	.word	0x0802b33d
 801c5d0:	0802ac4b 	.word	0x0802ac4b

0801c5d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5d8:	b093      	sub	sp, #76	; 0x4c
 801c5da:	880f      	ldrh	r7, [r1, #0]
 801c5dc:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801c5e0:	4604      	mov	r4, r0
 801c5e2:	4688      	mov	r8, r1
 801c5e4:	4616      	mov	r6, r2
 801c5e6:	b12f      	cbz	r7, 801c5f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801c5e8:	4b6f      	ldr	r3, [pc, #444]	; (801c7a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801c5ea:	4a70      	ldr	r2, [pc, #448]	; (801c7ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801c5ec:	4870      	ldr	r0, [pc, #448]	; (801c7b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801c5ee:	21e2      	movs	r1, #226	; 0xe2
 801c5f0:	f008 fd60 	bl	80250b4 <__assert_func>
 801c5f4:	6810      	ldr	r0, [r2, #0]
 801c5f6:	6851      	ldr	r1, [r2, #4]
 801c5f8:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801c7b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 801c5fc:	ad0e      	add	r5, sp, #56	; 0x38
 801c5fe:	c503      	stmia	r5!, {r0, r1}
 801c600:	6818      	ldr	r0, [r3, #0]
 801c602:	6859      	ldr	r1, [r3, #4]
 801c604:	ad10      	add	r5, sp, #64	; 0x40
 801c606:	c503      	stmia	r5!, {r0, r1}
 801c608:	a80e      	add	r0, sp, #56	; 0x38
 801c60a:	f7f9 fcad 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c60e:	4631      	mov	r1, r6
 801c610:	a810      	add	r0, sp, #64	; 0x40
 801c612:	f7f9 fc91 	bl	8015f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c616:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c61a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c61e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801c622:	f8db 0000 	ldr.w	r0, [fp]
 801c626:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801c62a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801c62e:	4e61      	ldr	r6, [pc, #388]	; (801c7b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801c630:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c634:	440c      	add	r4, r1
 801c636:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801c63a:	440a      	add	r2, r1
 801c63c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c640:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c644:	4413      	add	r3, r2
 801c646:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c64a:	6803      	ldr	r3, [r0, #0]
 801c64c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c650:	4798      	blx	r3
 801c652:	2801      	cmp	r0, #1
 801c654:	d11d      	bne.n	801c692 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801c656:	220b      	movs	r2, #11
 801c658:	9708      	str	r7, [sp, #32]
 801c65a:	9207      	str	r2, [sp, #28]
 801c65c:	8832      	ldrh	r2, [r6, #0]
 801c65e:	f8cd a010 	str.w	sl, [sp, #16]
 801c662:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801c666:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801c66a:	9203      	str	r2, [sp, #12]
 801c66c:	fa1f f289 	uxth.w	r2, r9
 801c670:	9201      	str	r2, [sp, #4]
 801c672:	b2ad      	uxth	r5, r5
 801c674:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c678:	9200      	str	r2, [sp, #0]
 801c67a:	9502      	str	r5, [sp, #8]
 801c67c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c680:	f8db 0000 	ldr.w	r0, [fp]
 801c684:	4642      	mov	r2, r8
 801c686:	4621      	mov	r1, r4
 801c688:	f7f7 f9d2 	bl	8013a30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c68c:	b013      	add	sp, #76	; 0x4c
 801c68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c692:	f8db 0000 	ldr.w	r0, [fp]
 801c696:	6803      	ldr	r3, [r0, #0]
 801c698:	6a1b      	ldr	r3, [r3, #32]
 801c69a:	4798      	blx	r3
 801c69c:	8832      	ldrh	r2, [r6, #0]
 801c69e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c6a2:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801c6a6:	960d      	str	r6, [sp, #52]	; 0x34
 801c6a8:	fb02 1303 	mla	r3, r2, r3, r1
 801c6ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c6b0:	4355      	muls	r5, r2
 801c6b2:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 801c6b6:	930c      	str	r3, [sp, #48]	; 0x30
 801c6b8:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801c6bc:	930b      	str	r3, [sp, #44]	; 0x2c
 801c6be:	f04f 0e04 	mov.w	lr, #4
 801c6c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6c4:	4298      	cmp	r0, r3
 801c6c6:	d269      	bcs.n	801c79c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801c6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c6ca:	4621      	mov	r1, r4
 801c6cc:	eb00 0b03 	add.w	fp, r0, r3
 801c6d0:	4558      	cmp	r0, fp
 801c6d2:	460b      	mov	r3, r1
 801c6d4:	d256      	bcs.n	801c784 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801c6d6:	781b      	ldrb	r3, [r3, #0]
 801c6d8:	fb1e e303 	smlabb	r3, lr, r3, lr
 801c6dc:	3101      	adds	r1, #1
 801c6de:	f858 2003 	ldr.w	r2, [r8, r3]
 801c6e2:	0e14      	lsrs	r4, r2, #24
 801c6e4:	d012      	beq.n	801c70c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801c6e6:	2cff      	cmp	r4, #255	; 0xff
 801c6e8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801c6ec:	d110      	bne.n	801c710 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801c6ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c6f2:	d10d      	bne.n	801c710 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801c6f4:	0953      	lsrs	r3, r2, #5
 801c6f6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c6fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c6fe:	f026 0607 	bic.w	r6, r6, #7
 801c702:	431e      	orrs	r6, r3
 801c704:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c708:	4332      	orrs	r2, r6
 801c70a:	8002      	strh	r2, [r0, #0]
 801c70c:	3002      	adds	r0, #2
 801c70e:	e7df      	b.n	801c6d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 801c710:	fb0a f404 	mul.w	r4, sl, r4
 801c714:	1c63      	adds	r3, r4, #1
 801c716:	8807      	ldrh	r7, [r0, #0]
 801c718:	eb03 2324 	add.w	r3, r3, r4, asr #8
 801c71c:	121b      	asrs	r3, r3, #8
 801c71e:	fa1f fc83 	uxth.w	ip, r3
 801c722:	123d      	asrs	r5, r7, #8
 801c724:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801c728:	43db      	mvns	r3, r3
 801c72a:	b2db      	uxtb	r3, r3
 801c72c:	fb14 f40c 	smulbb	r4, r4, ip
 801c730:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c734:	fb05 4503 	mla	r5, r5, r3, r4
 801c738:	b2d2      	uxtb	r2, r2
 801c73a:	10fc      	asrs	r4, r7, #3
 801c73c:	00ff      	lsls	r7, r7, #3
 801c73e:	b2ff      	uxtb	r7, r7
 801c740:	fb12 f20c 	smulbb	r2, r2, ip
 801c744:	fb07 2203 	mla	r2, r7, r3, r2
 801c748:	b2f6      	uxtb	r6, r6
 801c74a:	b2ad      	uxth	r5, r5
 801c74c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801c750:	b292      	uxth	r2, r2
 801c752:	fb16 f60c 	smulbb	r6, r6, ip
 801c756:	fb04 6603 	mla	r6, r4, r3, r6
 801c75a:	1c6b      	adds	r3, r5, #1
 801c75c:	1c54      	adds	r4, r2, #1
 801c75e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c762:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801c766:	b2b6      	uxth	r6, r6
 801c768:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c76c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c770:	4325      	orrs	r5, r4
 801c772:	1c74      	adds	r4, r6, #1
 801c774:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801c778:	0976      	lsrs	r6, r6, #5
 801c77a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c77e:	4335      	orrs	r5, r6
 801c780:	8005      	strh	r5, [r0, #0]
 801c782:	e7c3      	b.n	801c70c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801c784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c786:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801c78a:	881b      	ldrh	r3, [r3, #0]
 801c78c:	eba4 0409 	sub.w	r4, r4, r9
 801c790:	eba3 0309 	sub.w	r3, r3, r9
 801c794:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c798:	440c      	add	r4, r1
 801c79a:	e792      	b.n	801c6c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801c79c:	4b06      	ldr	r3, [pc, #24]	; (801c7b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801c79e:	6818      	ldr	r0, [r3, #0]
 801c7a0:	6803      	ldr	r3, [r0, #0]
 801c7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7a4:	4798      	blx	r3
 801c7a6:	e771      	b.n	801c68c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801c7a8:	0802a9f2 	.word	0x0802a9f2
 801c7ac:	0802b10e 	.word	0x0802b10e
 801c7b0:	0802ac4b 	.word	0x0802ac4b
 801c7b4:	2000a05a 	.word	0x2000a05a
 801c7b8:	2000a060 	.word	0x2000a060

0801c7bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c0:	4614      	mov	r4, r2
 801c7c2:	880a      	ldrh	r2, [r1, #0]
 801c7c4:	b091      	sub	sp, #68	; 0x44
 801c7c6:	2a02      	cmp	r2, #2
 801c7c8:	4607      	mov	r7, r0
 801c7ca:	4689      	mov	r9, r1
 801c7cc:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 801c7d0:	d006      	beq.n	801c7e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801c7d2:	4b77      	ldr	r3, [pc, #476]	; (801c9b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 801c7d4:	4a77      	ldr	r2, [pc, #476]	; (801c9b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801c7d6:	4878      	ldr	r0, [pc, #480]	; (801c9b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801c7d8:	f240 113b 	movw	r1, #315	; 0x13b
 801c7dc:	f008 fc6a 	bl	80250b4 <__assert_func>
 801c7e0:	2e00      	cmp	r6, #0
 801c7e2:	d04b      	beq.n	801c87c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801c7e4:	6820      	ldr	r0, [r4, #0]
 801c7e6:	6861      	ldr	r1, [r4, #4]
 801c7e8:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801c9c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 801c7ec:	ad0c      	add	r5, sp, #48	; 0x30
 801c7ee:	c503      	stmia	r5!, {r0, r1}
 801c7f0:	6818      	ldr	r0, [r3, #0]
 801c7f2:	6859      	ldr	r1, [r3, #4]
 801c7f4:	ad0e      	add	r5, sp, #56	; 0x38
 801c7f6:	c503      	stmia	r5!, {r0, r1}
 801c7f8:	a80c      	add	r0, sp, #48	; 0x30
 801c7fa:	f7f9 fbb5 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c7fe:	4621      	mov	r1, r4
 801c800:	a80e      	add	r0, sp, #56	; 0x38
 801c802:	f7f9 fb99 	bl	8015f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c806:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801c80a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c80e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801c812:	f8da 0000 	ldr.w	r0, [sl]
 801c816:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801c81a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801c81e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c822:	187c      	adds	r4, r7, r1
 801c824:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801c828:	4f64      	ldr	r7, [pc, #400]	; (801c9bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801c82a:	440a      	add	r2, r1
 801c82c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801c830:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801c834:	4413      	add	r3, r2
 801c836:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c83a:	6803      	ldr	r3, [r0, #0]
 801c83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c840:	4798      	blx	r3
 801c842:	2801      	cmp	r0, #1
 801c844:	d11d      	bne.n	801c882 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801c846:	2200      	movs	r2, #0
 801c848:	210b      	movs	r1, #11
 801c84a:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801c84e:	8839      	ldrh	r1, [r7, #0]
 801c850:	9604      	str	r6, [sp, #16]
 801c852:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801c856:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801c85a:	9203      	str	r2, [sp, #12]
 801c85c:	fa1f f288 	uxth.w	r2, r8
 801c860:	9201      	str	r2, [sp, #4]
 801c862:	b2ad      	uxth	r5, r5
 801c864:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c868:	9200      	str	r2, [sp, #0]
 801c86a:	9502      	str	r5, [sp, #8]
 801c86c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c870:	f8da 0000 	ldr.w	r0, [sl]
 801c874:	464a      	mov	r2, r9
 801c876:	4621      	mov	r1, r4
 801c878:	f7f7 f8da 	bl	8013a30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c87c:	b011      	add	sp, #68	; 0x44
 801c87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c882:	f8da 0000 	ldr.w	r0, [sl]
 801c886:	6803      	ldr	r3, [r0, #0]
 801c888:	6a1b      	ldr	r3, [r3, #32]
 801c88a:	4798      	blx	r3
 801c88c:	8839      	ldrh	r1, [r7, #0]
 801c88e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801c892:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c896:	2eff      	cmp	r6, #255	; 0xff
 801c898:	fb01 2303 	mla	r3, r1, r3, r2
 801c89c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c8a0:	f109 0204 	add.w	r2, r9, #4
 801c8a4:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801c8a8:	fb05 f501 	mul.w	r5, r5, r1
 801c8ac:	d05f      	beq.n	801c96e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 801c8ae:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 801c8b2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801c8b6:	b2b6      	uxth	r6, r6
 801c8b8:	fa1f f989 	uxth.w	r9, r9
 801c8bc:	970b      	str	r7, [sp, #44]	; 0x2c
 801c8be:	42a8      	cmp	r0, r5
 801c8c0:	d26f      	bcs.n	801c9a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801c8c2:	eb00 010b 	add.w	r1, r0, fp
 801c8c6:	4288      	cmp	r0, r1
 801c8c8:	4623      	mov	r3, r4
 801c8ca:	d244      	bcs.n	801c956 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 801c8cc:	781b      	ldrb	r3, [r3, #0]
 801c8ce:	8807      	ldrh	r7, [r0, #0]
 801c8d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c8d4:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801c8d8:	ea4f 2e23 	mov.w	lr, r3, asr #8
 801c8dc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c8e0:	fb1c fc09 	smulbb	ip, ip, r9
 801c8e4:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 801c8e8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c8ec:	00ff      	lsls	r7, r7, #3
 801c8ee:	fb0e ce06 	mla	lr, lr, r6, ip
 801c8f2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c8f6:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 801c8fa:	b2ff      	uxtb	r7, r7
 801c8fc:	00db      	lsls	r3, r3, #3
 801c8fe:	fa1f fe8e 	uxth.w	lr, lr
 801c902:	fb1a fa09 	smulbb	sl, sl, r9
 801c906:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c90a:	b2db      	uxtb	r3, r3
 801c90c:	fb17 f709 	smulbb	r7, r7, r9
 801c910:	fb0c ac06 	mla	ip, ip, r6, sl
 801c914:	fb03 7306 	mla	r3, r3, r6, r7
 801c918:	f10e 0a01 	add.w	sl, lr, #1
 801c91c:	b29b      	uxth	r3, r3
 801c91e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c922:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 801c926:	f103 0e01 	add.w	lr, r3, #1
 801c92a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801c92e:	fa1f fc8c 	uxth.w	ip, ip
 801c932:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c936:	ea4a 0e03 	orr.w	lr, sl, r3
 801c93a:	f10c 0a01 	add.w	sl, ip, #1
 801c93e:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801c942:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c946:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801c94a:	ea4e 0e0c 	orr.w	lr, lr, ip
 801c94e:	3401      	adds	r4, #1
 801c950:	f820 eb02 	strh.w	lr, [r0], #2
 801c954:	e7b7      	b.n	801c8c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 801c956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c958:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801c95c:	881b      	ldrh	r3, [r3, #0]
 801c95e:	eba1 0108 	sub.w	r1, r1, r8
 801c962:	eba3 0308 	sub.w	r3, r3, r8
 801c966:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c96a:	440c      	add	r4, r1
 801c96c:	e7a7      	b.n	801c8be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 801c96e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801c972:	42a8      	cmp	r0, r5
 801c974:	d215      	bcs.n	801c9a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801c976:	eb00 010b 	add.w	r1, r0, fp
 801c97a:	4288      	cmp	r0, r1
 801c97c:	d206      	bcs.n	801c98c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 801c97e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c986:	f820 3b02 	strh.w	r3, [r0], #2
 801c98a:	e7f6      	b.n	801c97a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 801c98c:	883b      	ldrh	r3, [r7, #0]
 801c98e:	eba3 0308 	sub.w	r3, r3, r8
 801c992:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c996:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c99a:	eba3 0308 	sub.w	r3, r3, r8
 801c99e:	441c      	add	r4, r3
 801c9a0:	e7e7      	b.n	801c972 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 801c9a2:	4b07      	ldr	r3, [pc, #28]	; (801c9c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801c9a4:	6818      	ldr	r0, [r3, #0]
 801c9a6:	6803      	ldr	r3, [r0, #0]
 801c9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9aa:	4798      	blx	r3
 801c9ac:	e766      	b.n	801c87c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801c9ae:	bf00      	nop
 801c9b0:	0802a8b0 	.word	0x0802a8b0
 801c9b4:	0802af78 	.word	0x0802af78
 801c9b8:	0802ac4b 	.word	0x0802ac4b
 801c9bc:	2000a05a 	.word	0x2000a05a
 801c9c0:	2000a060 	.word	0x2000a060

0801c9c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801c9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9c8:	4614      	mov	r4, r2
 801c9ca:	880a      	ldrh	r2, [r1, #0]
 801c9cc:	b091      	sub	sp, #68	; 0x44
 801c9ce:	2a01      	cmp	r2, #1
 801c9d0:	4606      	mov	r6, r0
 801c9d2:	4688      	mov	r8, r1
 801c9d4:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801c9d8:	d006      	beq.n	801c9e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801c9da:	4b7c      	ldr	r3, [pc, #496]	; (801cbcc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 801c9dc:	4a7c      	ldr	r2, [pc, #496]	; (801cbd0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 801c9de:	487d      	ldr	r0, [pc, #500]	; (801cbd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 801c9e0:	f240 1197 	movw	r1, #407	; 0x197
 801c9e4:	f008 fb66 	bl	80250b4 <__assert_func>
 801c9e8:	2f00      	cmp	r7, #0
 801c9ea:	d04b      	beq.n	801ca84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801c9ec:	6820      	ldr	r0, [r4, #0]
 801c9ee:	6861      	ldr	r1, [r4, #4]
 801c9f0:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801cbe0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801c9f4:	ad0c      	add	r5, sp, #48	; 0x30
 801c9f6:	c503      	stmia	r5!, {r0, r1}
 801c9f8:	6818      	ldr	r0, [r3, #0]
 801c9fa:	6859      	ldr	r1, [r3, #4]
 801c9fc:	ad0e      	add	r5, sp, #56	; 0x38
 801c9fe:	c503      	stmia	r5!, {r0, r1}
 801ca00:	a80c      	add	r0, sp, #48	; 0x30
 801ca02:	f7f9 fab1 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca06:	4621      	mov	r1, r4
 801ca08:	a80e      	add	r0, sp, #56	; 0x38
 801ca0a:	f7f9 fa95 	bl	8015f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca0e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ca12:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ca16:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ca1a:	f8da 0000 	ldr.w	r0, [sl]
 801ca1e:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801ca22:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 801ca26:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ca2a:	1874      	adds	r4, r6, r1
 801ca2c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ca30:	4e69      	ldr	r6, [pc, #420]	; (801cbd8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 801ca32:	440a      	add	r2, r1
 801ca34:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ca38:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ca3c:	4413      	add	r3, r2
 801ca3e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ca42:	6803      	ldr	r3, [r0, #0]
 801ca44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ca48:	4798      	blx	r3
 801ca4a:	2801      	cmp	r0, #1
 801ca4c:	d11d      	bne.n	801ca8a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801ca4e:	220b      	movs	r2, #11
 801ca50:	2100      	movs	r1, #0
 801ca52:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801ca56:	8832      	ldrh	r2, [r6, #0]
 801ca58:	9704      	str	r7, [sp, #16]
 801ca5a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801ca5e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ca62:	9203      	str	r2, [sp, #12]
 801ca64:	fa1f f289 	uxth.w	r2, r9
 801ca68:	9202      	str	r2, [sp, #8]
 801ca6a:	b2ad      	uxth	r5, r5
 801ca6c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ca70:	9200      	str	r2, [sp, #0]
 801ca72:	9501      	str	r5, [sp, #4]
 801ca74:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ca78:	f8da 0000 	ldr.w	r0, [sl]
 801ca7c:	4642      	mov	r2, r8
 801ca7e:	4621      	mov	r1, r4
 801ca80:	f7f6 ffd6 	bl	8013a30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ca84:	b011      	add	sp, #68	; 0x44
 801ca86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca8a:	f8da 0000 	ldr.w	r0, [sl]
 801ca8e:	6803      	ldr	r3, [r0, #0]
 801ca90:	6a1b      	ldr	r3, [r3, #32]
 801ca92:	4798      	blx	r3
 801ca94:	8832      	ldrh	r2, [r6, #0]
 801ca96:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ca9a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801ca9e:	2fff      	cmp	r7, #255	; 0xff
 801caa0:	fb02 1303 	mla	r3, r2, r3, r1
 801caa4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801caa8:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 801caac:	fb09 f902 	mul.w	r9, r9, r2
 801cab0:	d056      	beq.n	801cb60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 801cab2:	ea6f 0c07 	mvn.w	ip, r7
 801cab6:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 801caba:	b2bb      	uxth	r3, r7
 801cabc:	fa5f fc8c 	uxtb.w	ip, ip
 801cac0:	960b      	str	r6, [sp, #44]	; 0x2c
 801cac2:	4548      	cmp	r0, r9
 801cac4:	d27b      	bcs.n	801cbbe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 801cac6:	eb00 0a0e 	add.w	sl, r0, lr
 801caca:	4550      	cmp	r0, sl
 801cacc:	4622      	mov	r2, r4
 801cace:	d23d      	bcs.n	801cb4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 801cad0:	7811      	ldrb	r1, [r2, #0]
 801cad2:	2604      	movs	r6, #4
 801cad4:	2203      	movs	r2, #3
 801cad6:	fb12 6101 	smlabb	r1, r2, r1, r6
 801cada:	eb08 0b01 	add.w	fp, r8, r1
 801cade:	8802      	ldrh	r2, [r0, #0]
 801cae0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801cae4:	f89b b001 	ldrb.w	fp, [fp, #1]
 801cae8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801caec:	1217      	asrs	r7, r2, #8
 801caee:	fb16 f603 	smulbb	r6, r6, r3
 801caf2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801caf6:	fb07 670c 	mla	r7, r7, ip, r6
 801cafa:	10d6      	asrs	r6, r2, #3
 801cafc:	00d2      	lsls	r2, r2, #3
 801cafe:	b2d2      	uxtb	r2, r2
 801cb00:	fb1b fb03 	smulbb	fp, fp, r3
 801cb04:	fb12 f20c 	smulbb	r2, r2, ip
 801cb08:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cb0c:	b2bf      	uxth	r7, r7
 801cb0e:	fb06 b60c 	mla	r6, r6, ip, fp
 801cb12:	fb01 2103 	mla	r1, r1, r3, r2
 801cb16:	b2b6      	uxth	r6, r6
 801cb18:	b289      	uxth	r1, r1
 801cb1a:	1c7a      	adds	r2, r7, #1
 801cb1c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801cb20:	f106 0b01 	add.w	fp, r6, #1
 801cb24:	1c4a      	adds	r2, r1, #1
 801cb26:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801cb2a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801cb2e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801cb32:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cb36:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801cb3a:	4317      	orrs	r7, r2
 801cb3c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801cb40:	ea47 070b 	orr.w	r7, r7, fp
 801cb44:	3401      	adds	r4, #1
 801cb46:	f820 7b02 	strh.w	r7, [r0], #2
 801cb4a:	e7be      	b.n	801caca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 801cb4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cb4e:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801cb52:	8812      	ldrh	r2, [r2, #0]
 801cb54:	1b49      	subs	r1, r1, r5
 801cb56:	1b52      	subs	r2, r2, r5
 801cb58:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cb5c:	440c      	add	r4, r1
 801cb5e:	e7b0      	b.n	801cac2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 801cb60:	491e      	ldr	r1, [pc, #120]	; (801cbdc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801cb62:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 801cb66:	2203      	movs	r2, #3
 801cb68:	2704      	movs	r7, #4
 801cb6a:	4548      	cmp	r0, r9
 801cb6c:	d227      	bcs.n	801cbbe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 801cb6e:	eb00 0c0e 	add.w	ip, r0, lr
 801cb72:	4560      	cmp	r0, ip
 801cb74:	4623      	mov	r3, r4
 801cb76:	d219      	bcs.n	801cbac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801cb78:	f893 a000 	ldrb.w	sl, [r3]
 801cb7c:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 801cb80:	eb08 0b0a 	add.w	fp, r8, sl
 801cb84:	f818 a00a 	ldrb.w	sl, [r8, sl]
 801cb88:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801cb8c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801cb90:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801cb94:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801cb98:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801cb9c:	ea43 030b 	orr.w	r3, r3, fp
 801cba0:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 801cba4:	3401      	adds	r4, #1
 801cba6:	f820 3b02 	strh.w	r3, [r0], #2
 801cbaa:	e7e2      	b.n	801cb72 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801cbac:	8833      	ldrh	r3, [r6, #0]
 801cbae:	1b5b      	subs	r3, r3, r5
 801cbb0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cbb4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801cbb8:	1b5b      	subs	r3, r3, r5
 801cbba:	441c      	add	r4, r3
 801cbbc:	e7d5      	b.n	801cb6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801cbbe:	4b08      	ldr	r3, [pc, #32]	; (801cbe0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801cbc0:	6818      	ldr	r0, [r3, #0]
 801cbc2:	6803      	ldr	r3, [r0, #0]
 801cbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbc6:	4798      	blx	r3
 801cbc8:	e75c      	b.n	801ca84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801cbca:	bf00      	nop
 801cbcc:	0802a8fe 	.word	0x0802a8fe
 801cbd0:	0802b001 	.word	0x0802b001
 801cbd4:	0802ac4b 	.word	0x0802ac4b
 801cbd8:	2000a05a 	.word	0x2000a05a
 801cbdc:	fffff800 	.word	0xfffff800
 801cbe0:	2000a060 	.word	0x2000a060

0801cbe4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801cbe4:	b430      	push	{r4, r5}
 801cbe6:	780d      	ldrb	r5, [r1, #0]
 801cbe8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801cbec:	2d01      	cmp	r5, #1
 801cbee:	d00a      	beq.n	801cc06 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801cbf0:	d305      	bcc.n	801cbfe <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801cbf2:	2d02      	cmp	r5, #2
 801cbf4:	d10b      	bne.n	801cc0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801cbf6:	9402      	str	r4, [sp, #8]
 801cbf8:	bc30      	pop	{r4, r5}
 801cbfa:	f7ff bddf 	b.w	801c7bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801cbfe:	9402      	str	r4, [sp, #8]
 801cc00:	bc30      	pop	{r4, r5}
 801cc02:	f7ff bce7 	b.w	801c5d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801cc06:	9402      	str	r4, [sp, #8]
 801cc08:	bc30      	pop	{r4, r5}
 801cc0a:	f7ff bedb 	b.w	801c9c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801cc0e:	bc30      	pop	{r4, r5}
 801cc10:	4770      	bx	lr
	...

0801cc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801cc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc18:	4604      	mov	r4, r0
 801cc1a:	b087      	sub	sp, #28
 801cc1c:	6810      	ldr	r0, [r2, #0]
 801cc1e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801cc22:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801ce5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801cc26:	460e      	mov	r6, r1
 801cc28:	6851      	ldr	r1, [r2, #4]
 801cc2a:	ad02      	add	r5, sp, #8
 801cc2c:	c503      	stmia	r5!, {r0, r1}
 801cc2e:	6818      	ldr	r0, [r3, #0]
 801cc30:	6859      	ldr	r1, [r3, #4]
 801cc32:	ad04      	add	r5, sp, #16
 801cc34:	4617      	mov	r7, r2
 801cc36:	c503      	stmia	r5!, {r0, r1}
 801cc38:	a802      	add	r0, sp, #8
 801cc3a:	f7f9 f995 	bl	8015f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc3e:	4639      	mov	r1, r7
 801cc40:	a804      	add	r0, sp, #16
 801cc42:	f7f9 f979 	bl	8015f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cc46:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801cc4a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cc4e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801cc52:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801cc56:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801cc5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cc5e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801cc62:	440e      	add	r6, r1
 801cc64:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801cc68:	440a      	add	r2, r1
 801cc6a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cc6e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cc72:	4413      	add	r3, r2
 801cc74:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cc78:	4b77      	ldr	r3, [pc, #476]	; (801ce58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801cc7a:	6818      	ldr	r0, [r3, #0]
 801cc7c:	6803      	ldr	r3, [r0, #0]
 801cc7e:	6a1b      	ldr	r3, [r3, #32]
 801cc80:	4798      	blx	r3
 801cc82:	f8b9 b000 	ldrh.w	fp, [r9]
 801cc86:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cc8a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801cc8e:	fb0b 2303 	mla	r3, fp, r3, r2
 801cc92:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cc96:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801cc9a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801cc9e:	fb05 f50b 	mul.w	r5, r5, fp
 801cca2:	9300      	str	r3, [sp, #0]
 801cca4:	d068      	beq.n	801cd78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 801cca6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801ccaa:	4558      	cmp	r0, fp
 801ccac:	f080 80cc 	bcs.w	801ce48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801ccb0:	9b00      	ldr	r3, [sp, #0]
 801ccb2:	18c3      	adds	r3, r0, r3
 801ccb4:	9301      	str	r3, [sp, #4]
 801ccb6:	4631      	mov	r1, r6
 801ccb8:	9b01      	ldr	r3, [sp, #4]
 801ccba:	4298      	cmp	r0, r3
 801ccbc:	d24e      	bcs.n	801cd5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 801ccbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ccc2:	2a00      	cmp	r2, #0
 801ccc4:	d047      	beq.n	801cd56 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 801ccc6:	fb0a f202 	mul.w	r2, sl, r2
 801ccca:	1c53      	adds	r3, r2, #1
 801cccc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ccd0:	121b      	asrs	r3, r3, #8
 801ccd2:	d040      	beq.n	801cd56 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 801ccd4:	8802      	ldrh	r2, [r0, #0]
 801ccd6:	f8b4 c000 	ldrh.w	ip, [r4]
 801ccda:	b29e      	uxth	r6, r3
 801ccdc:	1215      	asrs	r5, r2, #8
 801ccde:	43db      	mvns	r3, r3
 801cce0:	b2db      	uxtb	r3, r3
 801cce2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801cce6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ccea:	fb15 f503 	smulbb	r5, r5, r3
 801ccee:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801ccf2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ccf6:	00d2      	lsls	r2, r2, #3
 801ccf8:	fb07 5706 	mla	r7, r7, r6, r5
 801ccfc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801cd00:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801cd04:	b2d2      	uxtb	r2, r2
 801cd06:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801cd0a:	fb1e fe03 	smulbb	lr, lr, r3
 801cd0e:	fb12 f203 	smulbb	r2, r2, r3
 801cd12:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cd16:	fa5f fc8c 	uxtb.w	ip, ip
 801cd1a:	fb05 e506 	mla	r5, r5, r6, lr
 801cd1e:	fb0c 2c06 	mla	ip, ip, r6, r2
 801cd22:	b2bf      	uxth	r7, r7
 801cd24:	b2ad      	uxth	r5, r5
 801cd26:	fa1f fc8c 	uxth.w	ip, ip
 801cd2a:	1c7b      	adds	r3, r7, #1
 801cd2c:	f10c 0601 	add.w	r6, ip, #1
 801cd30:	f105 0e01 	add.w	lr, r5, #1
 801cd34:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801cd38:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801cd3c:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801cd40:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801cd44:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801cd48:	096d      	lsrs	r5, r5, #5
 801cd4a:	ea47 070c 	orr.w	r7, r7, ip
 801cd4e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cd52:	432f      	orrs	r7, r5
 801cd54:	8007      	strh	r7, [r0, #0]
 801cd56:	3002      	adds	r0, #2
 801cd58:	3402      	adds	r4, #2
 801cd5a:	e7ad      	b.n	801ccb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801cd5c:	f8b9 3000 	ldrh.w	r3, [r9]
 801cd60:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801cd64:	eba3 0308 	sub.w	r3, r3, r8
 801cd68:	eba6 0608 	sub.w	r6, r6, r8
 801cd6c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801cd70:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cd74:	440e      	add	r6, r1
 801cd76:	e798      	b.n	801ccaa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801cd78:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801cd7c:	42a8      	cmp	r0, r5
 801cd7e:	d263      	bcs.n	801ce48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801cd80:	9b00      	ldr	r3, [sp, #0]
 801cd82:	4631      	mov	r1, r6
 801cd84:	eb00 0b03 	add.w	fp, r0, r3
 801cd88:	4558      	cmp	r0, fp
 801cd8a:	d24f      	bcs.n	801ce2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801cd8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd90:	b12b      	cbz	r3, 801cd9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801cd92:	2bff      	cmp	r3, #255	; 0xff
 801cd94:	f8b4 e000 	ldrh.w	lr, [r4]
 801cd98:	d104      	bne.n	801cda4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 801cd9a:	f8a0 e000 	strh.w	lr, [r0]
 801cd9e:	3002      	adds	r0, #2
 801cda0:	3402      	adds	r4, #2
 801cda2:	e7f1      	b.n	801cd88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 801cda4:	8802      	ldrh	r2, [r0, #0]
 801cda6:	b29f      	uxth	r7, r3
 801cda8:	1216      	asrs	r6, r2, #8
 801cdaa:	43db      	mvns	r3, r3
 801cdac:	b2db      	uxtb	r3, r3
 801cdae:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cdb2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cdb6:	fb16 f603 	smulbb	r6, r6, r3
 801cdba:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801cdbe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cdc2:	00d2      	lsls	r2, r2, #3
 801cdc4:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cdc8:	b2d2      	uxtb	r2, r2
 801cdca:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cdce:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cdd2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cdd6:	fb1a fa03 	smulbb	sl, sl, r3
 801cdda:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cdde:	fb12 f303 	smulbb	r3, r2, r3
 801cde2:	fa5f fe8e 	uxtb.w	lr, lr
 801cde6:	fb06 a607 	mla	r6, r6, r7, sl
 801cdea:	fb0e 3e07 	mla	lr, lr, r7, r3
 801cdee:	fa1f fc8c 	uxth.w	ip, ip
 801cdf2:	b2b6      	uxth	r6, r6
 801cdf4:	fa1f fe8e 	uxth.w	lr, lr
 801cdf8:	f10c 0201 	add.w	r2, ip, #1
 801cdfc:	f10e 0301 	add.w	r3, lr, #1
 801ce00:	f106 0a01 	add.w	sl, r6, #1
 801ce04:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801ce08:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801ce0c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801ce10:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ce14:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801ce18:	0976      	lsrs	r6, r6, #5
 801ce1a:	ea4c 0c0e 	orr.w	ip, ip, lr
 801ce1e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ce22:	ea4c 0c06 	orr.w	ip, ip, r6
 801ce26:	f8a0 c000 	strh.w	ip, [r0]
 801ce2a:	e7b8      	b.n	801cd9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801ce2c:	f8b9 3000 	ldrh.w	r3, [r9]
 801ce30:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801ce34:	eba3 0308 	sub.w	r3, r3, r8
 801ce38:	eba6 0608 	sub.w	r6, r6, r8
 801ce3c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801ce40:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ce44:	440e      	add	r6, r1
 801ce46:	e799      	b.n	801cd7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 801ce48:	4b03      	ldr	r3, [pc, #12]	; (801ce58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801ce4a:	6818      	ldr	r0, [r3, #0]
 801ce4c:	6803      	ldr	r3, [r0, #0]
 801ce4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce50:	4798      	blx	r3
 801ce52:	b007      	add	sp, #28
 801ce54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce58:	2000a060 	.word	0x2000a060
 801ce5c:	2000a05a 	.word	0x2000a05a

0801ce60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce64:	b089      	sub	sp, #36	; 0x24
 801ce66:	4682      	mov	sl, r0
 801ce68:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801ce6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ce6e:	460d      	mov	r5, r1
 801ce70:	4691      	mov	r9, r2
 801ce72:	4698      	mov	r8, r3
 801ce74:	b3ae      	cbz	r6, 801cee2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801ce76:	4608      	mov	r0, r1
 801ce78:	f7fc fa0a 	bl	8019290 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ce7c:	4607      	mov	r7, r0
 801ce7e:	4628      	mov	r0, r5
 801ce80:	f7fc fa40 	bl	8019304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ce84:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ce88:	4628      	mov	r0, r5
 801ce8a:	f8ad 9008 	strh.w	r9, [sp, #8]
 801ce8e:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ce92:	f8ad 700c 	strh.w	r7, [sp, #12]
 801ce96:	f7fc fb8d 	bl	80195b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ce9a:	b178      	cbz	r0, 801cebc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ce9c:	4628      	mov	r0, r5
 801ce9e:	f7fc fb89 	bl	80195b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cea2:	2802      	cmp	r0, #2
 801cea4:	d00a      	beq.n	801cebc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801cea6:	4628      	mov	r0, r5
 801cea8:	f7fc fb84 	bl	80195b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ceac:	280b      	cmp	r0, #11
 801ceae:	d005      	beq.n	801cebc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ceb0:	4b69      	ldr	r3, [pc, #420]	; (801d058 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 801ceb2:	4a6a      	ldr	r2, [pc, #424]	; (801d05c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 801ceb4:	486a      	ldr	r0, [pc, #424]	; (801d060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 801ceb6:	214b      	movs	r1, #75	; 0x4b
 801ceb8:	f008 f8fc 	bl	80250b4 <__assert_func>
 801cebc:	4628      	mov	r0, r5
 801cebe:	f7fc faef 	bl	80194a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801cec2:	4607      	mov	r7, r0
 801cec4:	4628      	mov	r0, r5
 801cec6:	f7fc fb1d 	bl	8019504 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ceca:	4681      	mov	r9, r0
 801cecc:	4628      	mov	r0, r5
 801cece:	f7fc fb71 	bl	80195b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ced2:	2802      	cmp	r0, #2
 801ced4:	d108      	bne.n	801cee8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801ced6:	4633      	mov	r3, r6
 801ced8:	4622      	mov	r2, r4
 801ceda:	a902      	add	r1, sp, #8
 801cedc:	4638      	mov	r0, r7
 801cede:	f7ff fa69 	bl	801c3b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cee2:	b009      	add	sp, #36	; 0x24
 801cee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cee8:	4628      	mov	r0, r5
 801ceea:	f7fc fb63 	bl	80195b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ceee:	280b      	cmp	r0, #11
 801cef0:	d107      	bne.n	801cf02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801cef2:	9600      	str	r6, [sp, #0]
 801cef4:	4623      	mov	r3, r4
 801cef6:	aa02      	add	r2, sp, #8
 801cef8:	4649      	mov	r1, r9
 801cefa:	4638      	mov	r0, r7
 801cefc:	f7ff fe72 	bl	801cbe4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801cf00:	e7ef      	b.n	801cee2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801cf02:	4628      	mov	r0, r5
 801cf04:	f7fc fa92 	bl	801942c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801cf08:	b950      	cbnz	r0, 801cf20 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801cf0a:	e9cd 6000 	strd	r6, r0, [sp]
 801cf0e:	f8da 3000 	ldr.w	r3, [sl]
 801cf12:	aa02      	add	r2, sp, #8
 801cf14:	68dd      	ldr	r5, [r3, #12]
 801cf16:	4639      	mov	r1, r7
 801cf18:	4623      	mov	r3, r4
 801cf1a:	4650      	mov	r0, sl
 801cf1c:	47a8      	blx	r5
 801cf1e:	e7e0      	b.n	801cee2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801cf20:	f10d 0818 	add.w	r8, sp, #24
 801cf24:	4629      	mov	r1, r5
 801cf26:	4640      	mov	r0, r8
 801cf28:	f7fc fa26 	bl	8019378 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801cf2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 801cf30:	ad04      	add	r5, sp, #16
 801cf32:	e885 0003 	stmia.w	r5, {r0, r1}
 801cf36:	4628      	mov	r0, r5
 801cf38:	4621      	mov	r1, r4
 801cf3a:	f7f6 f915 	bl	8013168 <_ZN8touchgfx4RectaNERKS0_>
 801cf3e:	4628      	mov	r0, r5
 801cf40:	f7f6 f955 	bl	80131ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf44:	b138      	cbz	r0, 801cf56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 801cf46:	9600      	str	r6, [sp, #0]
 801cf48:	4623      	mov	r3, r4
 801cf4a:	aa02      	add	r2, sp, #8
 801cf4c:	4649      	mov	r1, r9
 801cf4e:	4638      	mov	r0, r7
 801cf50:	f7ff fe60 	bl	801cc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801cf54:	e7c5      	b.n	801cee2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801cf56:	e9cd 6000 	strd	r6, r0, [sp]
 801cf5a:	f8da 3000 	ldr.w	r3, [sl]
 801cf5e:	aa02      	add	r2, sp, #8
 801cf60:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801cf64:	4639      	mov	r1, r7
 801cf66:	462b      	mov	r3, r5
 801cf68:	4650      	mov	r0, sl
 801cf6a:	47d8      	blx	fp
 801cf6c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cf70:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cf74:	4293      	cmp	r3, r2
 801cf76:	dd13      	ble.n	801cfa0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 801cf78:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cf7c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cf80:	f8ad 0018 	strh.w	r0, [sp, #24]
 801cf84:	1a9b      	subs	r3, r3, r2
 801cf86:	f8ad 201a 	strh.w	r2, [sp, #26]
 801cf8a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801cf8e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cf92:	9600      	str	r6, [sp, #0]
 801cf94:	4643      	mov	r3, r8
 801cf96:	aa02      	add	r2, sp, #8
 801cf98:	4649      	mov	r1, r9
 801cf9a:	4638      	mov	r0, r7
 801cf9c:	f7ff fe3a 	bl	801cc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801cfa0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801cfa4:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cfa8:	4293      	cmp	r3, r2
 801cfaa:	dd13      	ble.n	801cfd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801cfac:	1a9b      	subs	r3, r3, r2
 801cfae:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801cfb2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801cfb6:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cfba:	f8ad 001a 	strh.w	r0, [sp, #26]
 801cfbe:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cfc2:	f8ad 101e 	strh.w	r1, [sp, #30]
 801cfc6:	9600      	str	r6, [sp, #0]
 801cfc8:	4643      	mov	r3, r8
 801cfca:	aa02      	add	r2, sp, #8
 801cfcc:	4649      	mov	r1, r9
 801cfce:	4638      	mov	r0, r7
 801cfd0:	f7ff fe20 	bl	801cc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801cfd4:	88a2      	ldrh	r2, [r4, #4]
 801cfd6:	8823      	ldrh	r3, [r4, #0]
 801cfd8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801cfdc:	4413      	add	r3, r2
 801cfde:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cfe2:	440a      	add	r2, r1
 801cfe4:	b29b      	uxth	r3, r3
 801cfe6:	b292      	uxth	r2, r2
 801cfe8:	b211      	sxth	r1, r2
 801cfea:	b218      	sxth	r0, r3
 801cfec:	4288      	cmp	r0, r1
 801cfee:	dd13      	ble.n	801d018 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 801cff0:	1a9b      	subs	r3, r3, r2
 801cff2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801cff6:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 801cffa:	f8ad 1018 	strh.w	r1, [sp, #24]
 801cffe:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d002:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d006:	9600      	str	r6, [sp, #0]
 801d008:	4643      	mov	r3, r8
 801d00a:	aa02      	add	r2, sp, #8
 801d00c:	4649      	mov	r1, r9
 801d00e:	4638      	mov	r0, r7
 801d010:	f8ad 501a 	strh.w	r5, [sp, #26]
 801d014:	f7ff fdfe 	bl	801cc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d018:	88e2      	ldrh	r2, [r4, #6]
 801d01a:	8863      	ldrh	r3, [r4, #2]
 801d01c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d020:	4413      	add	r3, r2
 801d022:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d026:	440a      	add	r2, r1
 801d028:	b29b      	uxth	r3, r3
 801d02a:	b292      	uxth	r2, r2
 801d02c:	b211      	sxth	r1, r2
 801d02e:	b218      	sxth	r0, r3
 801d030:	4288      	cmp	r0, r1
 801d032:	f77f af56 	ble.w	801cee2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801d036:	f9b4 5000 	ldrsh.w	r5, [r4]
 801d03a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d03e:	f8ad 5018 	strh.w	r5, [sp, #24]
 801d042:	1a9b      	subs	r3, r3, r2
 801d044:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d048:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d04c:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d050:	9600      	str	r6, [sp, #0]
 801d052:	4643      	mov	r3, r8
 801d054:	e779      	b.n	801cf4a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801d056:	bf00      	nop
 801d058:	0802a94c 	.word	0x0802a94c
 801d05c:	0802b08a 	.word	0x0802b08a
 801d060:	0802ac4b 	.word	0x0802ac4b

0801d064 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801d064:	b508      	push	{r3, lr}
 801d066:	b180      	cbz	r0, 801d08a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801d068:	2902      	cmp	r1, #2
 801d06a:	d014      	beq.n	801d096 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801d06c:	2903      	cmp	r1, #3
 801d06e:	d01d      	beq.n	801d0ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801d070:	2901      	cmp	r1, #1
 801d072:	d101      	bne.n	801d078 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801d074:	2001      	movs	r0, #1
 801d076:	bd08      	pop	{r3, pc}
 801d078:	4b0e      	ldr	r3, [pc, #56]	; (801d0b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d07a:	8818      	ldrh	r0, [r3, #0]
 801d07c:	b990      	cbnz	r0, 801d0a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d07e:	4b0e      	ldr	r3, [pc, #56]	; (801d0b8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801d080:	4a0e      	ldr	r2, [pc, #56]	; (801d0bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801d082:	480f      	ldr	r0, [pc, #60]	; (801d0c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801d084:	2154      	movs	r1, #84	; 0x54
 801d086:	f008 f815 	bl	80250b4 <__assert_func>
 801d08a:	2902      	cmp	r1, #2
 801d08c:	d00e      	beq.n	801d0ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801d08e:	2903      	cmp	r1, #3
 801d090:	d0f2      	beq.n	801d078 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801d092:	2901      	cmp	r1, #1
 801d094:	d1ee      	bne.n	801d074 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801d096:	4b07      	ldr	r3, [pc, #28]	; (801d0b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d098:	8818      	ldrh	r0, [r3, #0]
 801d09a:	2800      	cmp	r0, #0
 801d09c:	d0ef      	beq.n	801d07e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801d09e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d0a2:	e7e8      	b.n	801d076 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d0a4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d0a8:	4240      	negs	r0, r0
 801d0aa:	e7e4      	b.n	801d076 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d0ac:	f04f 30ff 	mov.w	r0, #4294967295
 801d0b0:	e7e1      	b.n	801d076 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d0b2:	bf00      	nop
 801d0b4:	2000a05a 	.word	0x2000a05a
 801d0b8:	0802ac7d 	.word	0x0802ac7d
 801d0bc:	0802b207 	.word	0x0802b207
 801d0c0:	0802acbf 	.word	0x0802acbf

0801d0c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801d0c4:	b508      	push	{r3, lr}
 801d0c6:	b180      	cbz	r0, 801d0ea <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801d0c8:	2902      	cmp	r1, #2
 801d0ca:	d014      	beq.n	801d0f6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801d0cc:	2903      	cmp	r1, #3
 801d0ce:	d018      	beq.n	801d102 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801d0d0:	2901      	cmp	r1, #1
 801d0d2:	d001      	beq.n	801d0d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801d0d4:	2001      	movs	r0, #1
 801d0d6:	e013      	b.n	801d100 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801d0d8:	4b0e      	ldr	r3, [pc, #56]	; (801d114 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d0da:	8818      	ldrh	r0, [r3, #0]
 801d0dc:	b970      	cbnz	r0, 801d0fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801d0de:	4b0e      	ldr	r3, [pc, #56]	; (801d118 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801d0e0:	4a0e      	ldr	r2, [pc, #56]	; (801d11c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801d0e2:	480f      	ldr	r0, [pc, #60]	; (801d120 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801d0e4:	2154      	movs	r1, #84	; 0x54
 801d0e6:	f007 ffe5 	bl	80250b4 <__assert_func>
 801d0ea:	2902      	cmp	r1, #2
 801d0ec:	d009      	beq.n	801d102 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801d0ee:	2903      	cmp	r1, #3
 801d0f0:	d0f0      	beq.n	801d0d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801d0f2:	2901      	cmp	r1, #1
 801d0f4:	d1f0      	bne.n	801d0d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801d0f6:	f04f 30ff 	mov.w	r0, #4294967295
 801d0fa:	e001      	b.n	801d100 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801d0fc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d100:	bd08      	pop	{r3, pc}
 801d102:	4b04      	ldr	r3, [pc, #16]	; (801d114 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d104:	8818      	ldrh	r0, [r3, #0]
 801d106:	2800      	cmp	r0, #0
 801d108:	d0e9      	beq.n	801d0de <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801d10a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d10e:	4240      	negs	r0, r0
 801d110:	e7f6      	b.n	801d100 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801d112:	bf00      	nop
 801d114:	2000a05a 	.word	0x2000a05a
 801d118:	0802ac7d 	.word	0x0802ac7d
 801d11c:	0802b207 	.word	0x0802b207
 801d120:	0802acbf 	.word	0x0802acbf

0801d124 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d128:	b099      	sub	sp, #100	; 0x64
 801d12a:	910b      	str	r1, [sp, #44]	; 0x2c
 801d12c:	a914      	add	r1, sp, #80	; 0x50
 801d12e:	e881 000c 	stmia.w	r1, {r2, r3}
 801d132:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801d136:	9308      	str	r3, [sp, #32]
 801d138:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 801d13c:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 801d140:	f893 b00d 	ldrb.w	fp, [r3, #13]
 801d144:	910c      	str	r1, [sp, #48]	; 0x30
 801d146:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 801d14a:	910d      	str	r1, [sp, #52]	; 0x34
 801d14c:	7998      	ldrb	r0, [r3, #6]
 801d14e:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801d152:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801d156:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801d15a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801d15e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801d162:	ea4f 114b 	mov.w	r1, fp, lsl #5
 801d166:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d16a:	4301      	orrs	r1, r0
 801d16c:	9109      	str	r1, [sp, #36]	; 0x24
 801d16e:	f000 81e2 	beq.w	801d536 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801d172:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 801d176:	79d9      	ldrb	r1, [r3, #7]
 801d178:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 801d17c:	ea51 0b0b 	orrs.w	fp, r1, fp
 801d180:	f000 81d9 	beq.w	801d536 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801d184:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801d188:	b29b      	uxth	r3, r3
 801d18a:	2e00      	cmp	r6, #0
 801d18c:	f000 80fc 	beq.w	801d388 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 801d190:	1af6      	subs	r6, r6, r3
 801d192:	b2b6      	uxth	r6, r6
 801d194:	0433      	lsls	r3, r6, #16
 801d196:	d502      	bpl.n	801d19e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801d198:	1bad      	subs	r5, r5, r6
 801d19a:	b22d      	sxth	r5, r5
 801d19c:	2600      	movs	r6, #0
 801d19e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d1a2:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801d1a6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801d1aa:	428d      	cmp	r5, r1
 801d1ac:	b28b      	uxth	r3, r1
 801d1ae:	bfbf      	itttt	lt
 801d1b0:	18f6      	addlt	r6, r6, r3
 801d1b2:	1b75      	sublt	r5, r6, r5
 801d1b4:	b2ae      	uxthlt	r6, r5
 801d1b6:	460d      	movlt	r5, r1
 801d1b8:	8891      	ldrh	r1, [r2, #4]
 801d1ba:	440b      	add	r3, r1
 801d1bc:	b21b      	sxth	r3, r3
 801d1be:	9311      	str	r3, [sp, #68]	; 0x44
 801d1c0:	8853      	ldrh	r3, [r2, #2]
 801d1c2:	88d2      	ldrh	r2, [r2, #6]
 801d1c4:	4413      	add	r3, r2
 801d1c6:	b21b      	sxth	r3, r3
 801d1c8:	9310      	str	r3, [sp, #64]	; 0x40
 801d1ca:	4bb2      	ldr	r3, [pc, #712]	; (801d494 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 801d1cc:	9a08      	ldr	r2, [sp, #32]
 801d1ce:	f893 9000 	ldrb.w	r9, [r3]
 801d1d2:	f109 3cff 	add.w	ip, r9, #4294967295
 801d1d6:	f1dc 0300 	rsbs	r3, ip, #0
 801d1da:	eb43 030c 	adc.w	r3, r3, ip
 801d1de:	930f      	str	r3, [sp, #60]	; 0x3c
 801d1e0:	4629      	mov	r1, r5
 801d1e2:	4653      	mov	r3, sl
 801d1e4:	a814      	add	r0, sp, #80	; 0x50
 801d1e6:	f7f8 fd17 	bl	8015c18 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d1ea:	4629      	mov	r1, r5
 801d1ec:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801d1f0:	4653      	mov	r3, sl
 801d1f2:	9a08      	ldr	r2, [sp, #32]
 801d1f4:	a814      	add	r0, sp, #80	; 0x50
 801d1f6:	f7f8 fd27 	bl	8015c48 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d1fa:	a918      	add	r1, sp, #96	; 0x60
 801d1fc:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d200:	a817      	add	r0, sp, #92	; 0x5c
 801d202:	f7f8 fe83 	bl	8015f0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d206:	f1ba 0f00 	cmp.w	sl, #0
 801d20a:	f040 80c0 	bne.w	801d38e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 801d20e:	f1b9 0f01 	cmp.w	r9, #1
 801d212:	f040 80c4 	bne.w	801d39e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 801d216:	2301      	movs	r3, #1
 801d218:	fa03 f308 	lsl.w	r3, r3, r8
 801d21c:	3b01      	subs	r3, #1
 801d21e:	b2db      	uxtb	r3, r3
 801d220:	f1b8 0f01 	cmp.w	r8, #1
 801d224:	930a      	str	r3, [sp, #40]	; 0x28
 801d226:	f000 80e5 	beq.w	801d3f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801d22a:	f1b8 0f02 	cmp.w	r8, #2
 801d22e:	f000 80e4 	beq.w	801d3fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d6>
 801d232:	f1b8 0f04 	cmp.w	r8, #4
 801d236:	bf15      	itete	ne
 801d238:	46c1      	movne	r9, r8
 801d23a:	f04f 0904 	moveq.w	r9, #4
 801d23e:	2301      	movne	r3, #1
 801d240:	2311      	moveq	r3, #17
 801d242:	9307      	str	r3, [sp, #28]
 801d244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d246:	b153      	cbz	r3, 801d25e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13a>
 801d248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d24a:	2408      	movs	r4, #8
 801d24c:	fb94 f3f9 	sdiv	r3, r4, r9
 801d250:	1e5c      	subs	r4, r3, #1
 801d252:	4414      	add	r4, r2
 801d254:	fb94 f4f3 	sdiv	r4, r4, r3
 801d258:	fb14 f403 	smulbb	r4, r4, r3
 801d25c:	b2a4      	uxth	r4, r4
 801d25e:	b906      	cbnz	r6, 801d262 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d260:	b16f      	cbz	r7, 801d27e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15a>
 801d262:	fb07 6304 	mla	r3, r7, r4, r6
 801d266:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d268:	fb08 f303 	mul.w	r3, r8, r3
 801d26c:	4639      	mov	r1, r7
 801d26e:	f003 0707 	and.w	r7, r3, #7
 801d272:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 801d276:	9328      	str	r3, [sp, #160]	; 0xa0
 801d278:	ebab 0301 	sub.w	r3, fp, r1
 801d27c:	930e      	str	r3, [sp, #56]	; 0x38
 801d27e:	4651      	mov	r1, sl
 801d280:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d282:	f7ff feef 	bl	801d064 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801d286:	4651      	mov	r1, sl
 801d288:	4683      	mov	fp, r0
 801d28a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d28c:	f7ff ff1a 	bl	801d0c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801d290:	9a08      	ldr	r2, [sp, #32]
 801d292:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d294:	1a9b      	subs	r3, r3, r2
 801d296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d298:	429a      	cmp	r2, r3
 801d29a:	bfa8      	it	ge
 801d29c:	461a      	movge	r2, r3
 801d29e:	2a00      	cmp	r2, #0
 801d2a0:	4682      	mov	sl, r0
 801d2a2:	9208      	str	r2, [sp, #32]
 801d2a4:	f340 8147 	ble.w	801d536 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801d2a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d2aa:	1bad      	subs	r5, r5, r6
 801d2ac:	1b5d      	subs	r5, r3, r5
 801d2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2b0:	429d      	cmp	r5, r3
 801d2b2:	bfd4      	ite	le
 801d2b4:	ebc6 0605 	rsble	r6, r6, r5
 801d2b8:	ebc6 0603 	rsbgt	r6, r6, r3
 801d2bc:	2e00      	cmp	r6, #0
 801d2be:	f340 813a 	ble.w	801d536 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801d2c2:	1ba4      	subs	r4, r4, r6
 801d2c4:	fb09 f304 	mul.w	r3, r9, r4
 801d2c8:	930e      	str	r3, [sp, #56]	; 0x38
 801d2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	f040 809d 	bne.w	801d40c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801d2d2:	4b71      	ldr	r3, [pc, #452]	; (801d498 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801d2d4:	6818      	ldr	r0, [r3, #0]
 801d2d6:	6803      	ldr	r3, [r0, #0]
 801d2d8:	6a1b      	ldr	r3, [r3, #32]
 801d2da:	4798      	blx	r3
 801d2dc:	496f      	ldr	r1, [pc, #444]	; (801d49c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801d2de:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801d2e2:	880c      	ldrh	r4, [r1, #0]
 801d2e4:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801d2e8:	fb04 1303 	mla	r3, r4, r3, r1
 801d2ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d2f0:	9309      	str	r3, [sp, #36]	; 0x24
 801d2f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d2f4:	7819      	ldrb	r1, [r3, #0]
 801d2f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d2f8:	0a1b      	lsrs	r3, r3, #8
 801d2fa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d2fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801d300:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d302:	08db      	lsrs	r3, r3, #3
 801d304:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d308:	9310      	str	r3, [sp, #64]	; 0x40
 801d30a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d30c:	00db      	lsls	r3, r3, #3
 801d30e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d312:	9311      	str	r3, [sp, #68]	; 0x44
 801d314:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801d318:	fb0b ab16 	mls	fp, fp, r6, sl
 801d31c:	fb03 fa06 	mul.w	sl, r3, r6
 801d320:	930c      	str	r3, [sp, #48]	; 0x30
 801d322:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 801d326:	9312      	str	r3, [sp, #72]	; 0x48
 801d328:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d32a:	4139      	asrs	r1, r7
 801d32c:	b29b      	uxth	r3, r3
 801d32e:	b2c9      	uxtb	r1, r1
 801d330:	9313      	str	r3, [sp, #76]	; 0x4c
 801d332:	9b08      	ldr	r3, [sp, #32]
 801d334:	3b01      	subs	r3, #1
 801d336:	9308      	str	r3, [sp, #32]
 801d338:	3301      	adds	r3, #1
 801d33a:	f000 80c3 	beq.w	801d4c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801d33e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801d342:	46b2      	mov	sl, r6
 801d344:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801d348:	f0c0 80aa 	bcc.w	801d4a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801d34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d34e:	400b      	ands	r3, r1
 801d350:	d00a      	beq.n	801d368 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x244>
 801d352:	9807      	ldr	r0, [sp, #28]
 801d354:	fb13 f300 	smulbb	r3, r3, r0
 801d358:	2bfe      	cmp	r3, #254	; 0xfe
 801d35a:	dd59      	ble.n	801d410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801d35c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d35e:	28ff      	cmp	r0, #255	; 0xff
 801d360:	d156      	bne.n	801d410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801d362:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d364:	f8ae 4000 	strh.w	r4, [lr]
 801d368:	4447      	add	r7, r8
 801d36a:	b2bf      	uxth	r7, r7
 801d36c:	2f07      	cmp	r7, #7
 801d36e:	bf81      	itttt	hi
 801d370:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801d372:	7859      	ldrbhi	r1, [r3, #1]
 801d374:	3301      	addhi	r3, #1
 801d376:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801d378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d37a:	bf9a      	itte	ls
 801d37c:	fa41 f109 	asrls.w	r1, r1, r9
 801d380:	b2c9      	uxtbls	r1, r1
 801d382:	2700      	movhi	r7, #0
 801d384:	449e      	add	lr, r3
 801d386:	e7dd      	b.n	801d344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 801d388:	441d      	add	r5, r3
 801d38a:	b22d      	sxth	r5, r5
 801d38c:	e707      	b.n	801d19e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801d38e:	f1ba 0f01 	cmp.w	sl, #1
 801d392:	f47f af40 	bne.w	801d216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801d396:	f1b9 0f01 	cmp.w	r9, #1
 801d39a:	f47f af3c 	bne.w	801d216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801d39e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 801d498 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801d3a2:	f8d9 0000 	ldr.w	r0, [r9]
 801d3a6:	6803      	ldr	r3, [r0, #0]
 801d3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3aa:	4798      	blx	r3
 801d3ac:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801d3b0:	464a      	mov	r2, r9
 801d3b2:	d006      	beq.n	801d3c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 801d3b4:	f1b8 0f04 	cmp.w	r8, #4
 801d3b8:	d11a      	bne.n	801d3f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801d3ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3bc:	3300      	adds	r3, #0
 801d3be:	bf18      	it	ne
 801d3c0:	2301      	movne	r3, #1
 801d3c2:	05c0      	lsls	r0, r0, #23
 801d3c4:	f140 8087 	bpl.w	801d4d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801d3c8:	f1b8 0f08 	cmp.w	r8, #8
 801d3cc:	f040 8083 	bne.w	801d4d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	bf14      	ite	ne
 801d3d4:	2180      	movne	r1, #128	; 0x80
 801d3d6:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801d3da:	2e00      	cmp	r6, #0
 801d3dc:	f040 80ae 	bne.w	801d53c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x418>
 801d3e0:	2f00      	cmp	r7, #0
 801d3e2:	f000 8082 	beq.w	801d4ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801d3e6:	23ff      	movs	r3, #255	; 0xff
 801d3e8:	930a      	str	r3, [sp, #40]	; 0x28
 801d3ea:	46c1      	mov	r9, r8
 801d3ec:	2301      	movs	r3, #1
 801d3ee:	e728      	b.n	801d242 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 801d3f0:	2300      	movs	r3, #0
 801d3f2:	e7e6      	b.n	801d3c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 801d3f4:	46c1      	mov	r9, r8
 801d3f6:	23ff      	movs	r3, #255	; 0xff
 801d3f8:	e723      	b.n	801d242 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 801d3fa:	46c1      	mov	r9, r8
 801d3fc:	2355      	movs	r3, #85	; 0x55
 801d3fe:	e720      	b.n	801d242 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 801d400:	23ff      	movs	r3, #255	; 0xff
 801d402:	930a      	str	r3, [sp, #40]	; 0x28
 801d404:	2301      	movs	r3, #1
 801d406:	46c1      	mov	r9, r8
 801d408:	9307      	str	r3, [sp, #28]
 801d40a:	e71d      	b.n	801d248 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x124>
 801d40c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d40e:	e765      	b.n	801d2dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1b8>
 801d410:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d412:	f8be 5000 	ldrh.w	r5, [lr]
 801d416:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d418:	fb10 f303 	smulbb	r3, r0, r3
 801d41c:	b29b      	uxth	r3, r3
 801d41e:	1c58      	adds	r0, r3, #1
 801d420:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d424:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d428:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d42a:	fa1f fc83 	uxth.w	ip, r3
 801d42e:	122c      	asrs	r4, r5, #8
 801d430:	43db      	mvns	r3, r3
 801d432:	b2db      	uxtb	r3, r3
 801d434:	fb1c fb02 	smulbb	fp, ip, r2
 801d438:	fb10 f00c 	smulbb	r0, r0, ip
 801d43c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d442:	fb04 0403 	mla	r4, r4, r3, r0
 801d446:	10e8      	asrs	r0, r5, #3
 801d448:	00ed      	lsls	r5, r5, #3
 801d44a:	b2ed      	uxtb	r5, r5
 801d44c:	fb1c fc02 	smulbb	ip, ip, r2
 801d450:	fb05 cc03 	mla	ip, r5, r3, ip
 801d454:	b2a4      	uxth	r4, r4
 801d456:	fa1f fc8c 	uxth.w	ip, ip
 801d45a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d45e:	fb00 b003 	mla	r0, r0, r3, fp
 801d462:	1c63      	adds	r3, r4, #1
 801d464:	f10c 0b01 	add.w	fp, ip, #1
 801d468:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801d46c:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 801d470:	b280      	uxth	r0, r0
 801d472:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801d476:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d47a:	ea44 040b 	orr.w	r4, r4, fp
 801d47e:	f100 0b01 	add.w	fp, r0, #1
 801d482:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801d486:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d48a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d48e:	ea44 040b 	orr.w	r4, r4, fp
 801d492:	e767      	b.n	801d364 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x240>
 801d494:	2000a058 	.word	0x2000a058
 801d498:	2000a060 	.word	0x2000a060
 801d49c:	2000a05a 	.word	0x2000a05a
 801d4a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4a2:	b153      	cbz	r3, 801d4ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801d4a4:	441f      	add	r7, r3
 801d4a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d4a8:	b2bf      	uxth	r7, r7
 801d4aa:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801d4ae:	f007 0707 	and.w	r7, r7, #7
 801d4b2:	7819      	ldrb	r1, [r3, #0]
 801d4b4:	9328      	str	r3, [sp, #160]	; 0xa0
 801d4b6:	4139      	asrs	r1, r7
 801d4b8:	b2c9      	uxtb	r1, r1
 801d4ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d4be:	441a      	add	r2, r3
 801d4c0:	9209      	str	r2, [sp, #36]	; 0x24
 801d4c2:	e736      	b.n	801d332 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20e>
 801d4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d135      	bne.n	801d536 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801d4ca:	4b21      	ldr	r3, [pc, #132]	; (801d550 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x42c>)
 801d4cc:	6818      	ldr	r0, [r3, #0]
 801d4ce:	6803      	ldr	r3, [r0, #0]
 801d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4d2:	4798      	blx	r3
 801d4d4:	e02f      	b.n	801d536 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	f43f ae9d 	beq.w	801d216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801d4dc:	2e00      	cmp	r6, #0
 801d4de:	f47f ae9a 	bne.w	801d216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801d4e2:	2f00      	cmp	r7, #0
 801d4e4:	f47f ae97 	bne.w	801d216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801d4e8:	2180      	movs	r1, #128	; 0x80
 801d4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d4ee:	18eb      	adds	r3, r5, r3
 801d4f0:	4283      	cmp	r3, r0
 801d4f2:	f73f ae90 	bgt.w	801d216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801d4f6:	9b08      	ldr	r3, [sp, #32]
 801d4f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d4fa:	445b      	add	r3, fp
 801d4fc:	4283      	cmp	r3, r0
 801d4fe:	f73f ae8a 	bgt.w	801d216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801d502:	6810      	ldr	r0, [r2, #0]
 801d504:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801d508:	6805      	ldr	r5, [r0, #0]
 801d50a:	9105      	str	r1, [sp, #20]
 801d50c:	f1b8 0f08 	cmp.w	r8, #8
 801d510:	bf18      	it	ne
 801d512:	3401      	addne	r4, #1
 801d514:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d516:	9104      	str	r1, [sp, #16]
 801d518:	bf18      	it	ne
 801d51a:	f024 0401 	bicne.w	r4, r4, #1
 801d51e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801d520:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801d524:	bf18      	it	ne
 801d526:	b2a4      	uxthne	r4, r4
 801d528:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801d52c:	e9cd 4b00 	strd	r4, fp, [sp]
 801d530:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d532:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 801d534:	47a0      	blx	r4
 801d536:	b019      	add	sp, #100	; 0x64
 801d538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d53e:	2b00      	cmp	r3, #0
 801d540:	f47f af5e 	bne.w	801d400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801d544:	23ff      	movs	r3, #255	; 0xff
 801d546:	930a      	str	r3, [sp, #40]	; 0x28
 801d548:	2301      	movs	r3, #1
 801d54a:	46c1      	mov	r9, r8
 801d54c:	9307      	str	r3, [sp, #28]
 801d54e:	e688      	b.n	801d262 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d550:	2000a060 	.word	0x2000a060

0801d554 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801d554:	b538      	push	{r3, r4, r5, lr}
 801d556:	4c15      	ldr	r4, [pc, #84]	; (801d5ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801d558:	7823      	ldrb	r3, [r4, #0]
 801d55a:	f3bf 8f5b 	dmb	ish
 801d55e:	07da      	lsls	r2, r3, #31
 801d560:	4605      	mov	r5, r0
 801d562:	d40b      	bmi.n	801d57c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d564:	4620      	mov	r0, r4
 801d566:	f007 fc7c 	bl	8024e62 <__cxa_guard_acquire>
 801d56a:	b138      	cbz	r0, 801d57c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d56c:	4620      	mov	r0, r4
 801d56e:	f007 fc84 	bl	8024e7a <__cxa_guard_release>
 801d572:	4a0f      	ldr	r2, [pc, #60]	; (801d5b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801d574:	490f      	ldr	r1, [pc, #60]	; (801d5b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801d576:	4810      	ldr	r0, [pc, #64]	; (801d5b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801d578:	f007 fc6c 	bl	8024e54 <__aeabi_atexit>
 801d57c:	4c0f      	ldr	r4, [pc, #60]	; (801d5bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801d57e:	7823      	ldrb	r3, [r4, #0]
 801d580:	f3bf 8f5b 	dmb	ish
 801d584:	07db      	lsls	r3, r3, #31
 801d586:	d40b      	bmi.n	801d5a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801d588:	4620      	mov	r0, r4
 801d58a:	f007 fc6a 	bl	8024e62 <__cxa_guard_acquire>
 801d58e:	b138      	cbz	r0, 801d5a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801d590:	4620      	mov	r0, r4
 801d592:	f007 fc72 	bl	8024e7a <__cxa_guard_release>
 801d596:	4a06      	ldr	r2, [pc, #24]	; (801d5b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801d598:	4909      	ldr	r1, [pc, #36]	; (801d5c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801d59a:	480a      	ldr	r0, [pc, #40]	; (801d5c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801d59c:	f007 fc5a 	bl	8024e54 <__aeabi_atexit>
 801d5a0:	4b05      	ldr	r3, [pc, #20]	; (801d5b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801d5a2:	612b      	str	r3, [r5, #16]
 801d5a4:	4b07      	ldr	r3, [pc, #28]	; (801d5c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801d5a6:	616b      	str	r3, [r5, #20]
 801d5a8:	bd38      	pop	{r3, r4, r5, pc}
 801d5aa:	bf00      	nop
 801d5ac:	2000a12c 	.word	0x2000a12c
 801d5b0:	20000000 	.word	0x20000000
 801d5b4:	0801bb5b 	.word	0x0801bb5b
 801d5b8:	200000e4 	.word	0x200000e4
 801d5bc:	2000a130 	.word	0x2000a130
 801d5c0:	0801bb59 	.word	0x0801bb59
 801d5c4:	200000e8 	.word	0x200000e8

0801d5c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801d5c8:	b538      	push	{r3, r4, r5, lr}
 801d5ca:	4c15      	ldr	r4, [pc, #84]	; (801d620 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801d5cc:	7823      	ldrb	r3, [r4, #0]
 801d5ce:	f3bf 8f5b 	dmb	ish
 801d5d2:	07da      	lsls	r2, r3, #31
 801d5d4:	4605      	mov	r5, r0
 801d5d6:	d40b      	bmi.n	801d5f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801d5d8:	4620      	mov	r0, r4
 801d5da:	f007 fc42 	bl	8024e62 <__cxa_guard_acquire>
 801d5de:	b138      	cbz	r0, 801d5f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801d5e0:	4620      	mov	r0, r4
 801d5e2:	f007 fc4a 	bl	8024e7a <__cxa_guard_release>
 801d5e6:	4a0f      	ldr	r2, [pc, #60]	; (801d624 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801d5e8:	490f      	ldr	r1, [pc, #60]	; (801d628 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801d5ea:	4810      	ldr	r0, [pc, #64]	; (801d62c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801d5ec:	f007 fc32 	bl	8024e54 <__aeabi_atexit>
 801d5f0:	4c0f      	ldr	r4, [pc, #60]	; (801d630 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801d5f2:	7823      	ldrb	r3, [r4, #0]
 801d5f4:	f3bf 8f5b 	dmb	ish
 801d5f8:	07db      	lsls	r3, r3, #31
 801d5fa:	d40b      	bmi.n	801d614 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f007 fc30 	bl	8024e62 <__cxa_guard_acquire>
 801d602:	b138      	cbz	r0, 801d614 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801d604:	4620      	mov	r0, r4
 801d606:	f007 fc38 	bl	8024e7a <__cxa_guard_release>
 801d60a:	4a06      	ldr	r2, [pc, #24]	; (801d624 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801d60c:	4909      	ldr	r1, [pc, #36]	; (801d634 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801d60e:	480a      	ldr	r0, [pc, #40]	; (801d638 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801d610:	f007 fc20 	bl	8024e54 <__aeabi_atexit>
 801d614:	4b05      	ldr	r3, [pc, #20]	; (801d62c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801d616:	60ab      	str	r3, [r5, #8]
 801d618:	4b07      	ldr	r3, [pc, #28]	; (801d638 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801d61a:	60eb      	str	r3, [r5, #12]
 801d61c:	bd38      	pop	{r3, r4, r5, pc}
 801d61e:	bf00      	nop
 801d620:	2000a104 	.word	0x2000a104
 801d624:	20000000 	.word	0x20000000
 801d628:	0801bb5f 	.word	0x0801bb5f
 801d62c:	200000bc 	.word	0x200000bc
 801d630:	2000a108 	.word	0x2000a108
 801d634:	0801bb5d 	.word	0x0801bb5d
 801d638:	200000c0 	.word	0x200000c0

0801d63c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801d63c:	b510      	push	{r4, lr}
 801d63e:	4604      	mov	r4, r0
 801d640:	f7ff ff88 	bl	801d554 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801d644:	4620      	mov	r0, r4
 801d646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d64a:	f7ff bfbd 	b.w	801d5c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801d650 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801d650:	b538      	push	{r3, r4, r5, lr}
 801d652:	4c15      	ldr	r4, [pc, #84]	; (801d6a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801d654:	7823      	ldrb	r3, [r4, #0]
 801d656:	f3bf 8f5b 	dmb	ish
 801d65a:	07da      	lsls	r2, r3, #31
 801d65c:	4605      	mov	r5, r0
 801d65e:	d40b      	bmi.n	801d678 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d660:	4620      	mov	r0, r4
 801d662:	f007 fbfe 	bl	8024e62 <__cxa_guard_acquire>
 801d666:	b138      	cbz	r0, 801d678 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d668:	4620      	mov	r0, r4
 801d66a:	f007 fc06 	bl	8024e7a <__cxa_guard_release>
 801d66e:	4a0f      	ldr	r2, [pc, #60]	; (801d6ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d670:	490f      	ldr	r1, [pc, #60]	; (801d6b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801d672:	4810      	ldr	r0, [pc, #64]	; (801d6b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d674:	f007 fbee 	bl	8024e54 <__aeabi_atexit>
 801d678:	4c0f      	ldr	r4, [pc, #60]	; (801d6b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801d67a:	7823      	ldrb	r3, [r4, #0]
 801d67c:	f3bf 8f5b 	dmb	ish
 801d680:	07db      	lsls	r3, r3, #31
 801d682:	d40b      	bmi.n	801d69c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d684:	4620      	mov	r0, r4
 801d686:	f007 fbec 	bl	8024e62 <__cxa_guard_acquire>
 801d68a:	b138      	cbz	r0, 801d69c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d68c:	4620      	mov	r0, r4
 801d68e:	f007 fbf4 	bl	8024e7a <__cxa_guard_release>
 801d692:	4a06      	ldr	r2, [pc, #24]	; (801d6ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d694:	4909      	ldr	r1, [pc, #36]	; (801d6bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801d696:	480a      	ldr	r0, [pc, #40]	; (801d6c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d698:	f007 fbdc 	bl	8024e54 <__aeabi_atexit>
 801d69c:	4b05      	ldr	r3, [pc, #20]	; (801d6b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d69e:	622b      	str	r3, [r5, #32]
 801d6a0:	4b07      	ldr	r3, [pc, #28]	; (801d6c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d6a2:	626b      	str	r3, [r5, #36]	; 0x24
 801d6a4:	bd38      	pop	{r3, r4, r5, pc}
 801d6a6:	bf00      	nop
 801d6a8:	2000a134 	.word	0x2000a134
 801d6ac:	20000000 	.word	0x20000000
 801d6b0:	0801bb53 	.word	0x0801bb53
 801d6b4:	200000ec 	.word	0x200000ec
 801d6b8:	2000a138 	.word	0x2000a138
 801d6bc:	0801bb51 	.word	0x0801bb51
 801d6c0:	200000f0 	.word	0x200000f0

0801d6c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801d6c4:	b538      	push	{r3, r4, r5, lr}
 801d6c6:	4c15      	ldr	r4, [pc, #84]	; (801d71c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801d6c8:	7823      	ldrb	r3, [r4, #0]
 801d6ca:	f3bf 8f5b 	dmb	ish
 801d6ce:	07da      	lsls	r2, r3, #31
 801d6d0:	4605      	mov	r5, r0
 801d6d2:	d40b      	bmi.n	801d6ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d6d4:	4620      	mov	r0, r4
 801d6d6:	f007 fbc4 	bl	8024e62 <__cxa_guard_acquire>
 801d6da:	b138      	cbz	r0, 801d6ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d6dc:	4620      	mov	r0, r4
 801d6de:	f007 fbcc 	bl	8024e7a <__cxa_guard_release>
 801d6e2:	4a0f      	ldr	r2, [pc, #60]	; (801d720 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d6e4:	490f      	ldr	r1, [pc, #60]	; (801d724 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801d6e6:	4810      	ldr	r0, [pc, #64]	; (801d728 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d6e8:	f007 fbb4 	bl	8024e54 <__aeabi_atexit>
 801d6ec:	4c0f      	ldr	r4, [pc, #60]	; (801d72c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801d6ee:	7823      	ldrb	r3, [r4, #0]
 801d6f0:	f3bf 8f5b 	dmb	ish
 801d6f4:	07db      	lsls	r3, r3, #31
 801d6f6:	d40b      	bmi.n	801d710 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d6f8:	4620      	mov	r0, r4
 801d6fa:	f007 fbb2 	bl	8024e62 <__cxa_guard_acquire>
 801d6fe:	b138      	cbz	r0, 801d710 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d700:	4620      	mov	r0, r4
 801d702:	f007 fbba 	bl	8024e7a <__cxa_guard_release>
 801d706:	4a06      	ldr	r2, [pc, #24]	; (801d720 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d708:	4909      	ldr	r1, [pc, #36]	; (801d730 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801d70a:	480a      	ldr	r0, [pc, #40]	; (801d734 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d70c:	f007 fba2 	bl	8024e54 <__aeabi_atexit>
 801d710:	4b05      	ldr	r3, [pc, #20]	; (801d728 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d712:	61ab      	str	r3, [r5, #24]
 801d714:	4b07      	ldr	r3, [pc, #28]	; (801d734 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d716:	61eb      	str	r3, [r5, #28]
 801d718:	bd38      	pop	{r3, r4, r5, pc}
 801d71a:	bf00      	nop
 801d71c:	2000a10c 	.word	0x2000a10c
 801d720:	20000000 	.word	0x20000000
 801d724:	0801bb57 	.word	0x0801bb57
 801d728:	200000c4 	.word	0x200000c4
 801d72c:	2000a110 	.word	0x2000a110
 801d730:	0801bb55 	.word	0x0801bb55
 801d734:	200000c8 	.word	0x200000c8

0801d738 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801d738:	b510      	push	{r4, lr}
 801d73a:	4604      	mov	r4, r0
 801d73c:	f7ff ff88 	bl	801d650 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801d740:	4620      	mov	r0, r4
 801d742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d746:	f7ff bfbd 	b.w	801d6c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801d74c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801d74c:	b538      	push	{r3, r4, r5, lr}
 801d74e:	4c15      	ldr	r4, [pc, #84]	; (801d7a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801d750:	7823      	ldrb	r3, [r4, #0]
 801d752:	f3bf 8f5b 	dmb	ish
 801d756:	07da      	lsls	r2, r3, #31
 801d758:	4605      	mov	r5, r0
 801d75a:	d40b      	bmi.n	801d774 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d75c:	4620      	mov	r0, r4
 801d75e:	f007 fb80 	bl	8024e62 <__cxa_guard_acquire>
 801d762:	b138      	cbz	r0, 801d774 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d764:	4620      	mov	r0, r4
 801d766:	f007 fb88 	bl	8024e7a <__cxa_guard_release>
 801d76a:	4a0f      	ldr	r2, [pc, #60]	; (801d7a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d76c:	490f      	ldr	r1, [pc, #60]	; (801d7ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801d76e:	4810      	ldr	r0, [pc, #64]	; (801d7b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d770:	f007 fb70 	bl	8024e54 <__aeabi_atexit>
 801d774:	4c0f      	ldr	r4, [pc, #60]	; (801d7b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801d776:	7823      	ldrb	r3, [r4, #0]
 801d778:	f3bf 8f5b 	dmb	ish
 801d77c:	07db      	lsls	r3, r3, #31
 801d77e:	d40b      	bmi.n	801d798 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d780:	4620      	mov	r0, r4
 801d782:	f007 fb6e 	bl	8024e62 <__cxa_guard_acquire>
 801d786:	b138      	cbz	r0, 801d798 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d788:	4620      	mov	r0, r4
 801d78a:	f007 fb76 	bl	8024e7a <__cxa_guard_release>
 801d78e:	4a06      	ldr	r2, [pc, #24]	; (801d7a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d790:	4909      	ldr	r1, [pc, #36]	; (801d7b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801d792:	480a      	ldr	r0, [pc, #40]	; (801d7bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d794:	f007 fb5e 	bl	8024e54 <__aeabi_atexit>
 801d798:	4b05      	ldr	r3, [pc, #20]	; (801d7b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d79a:	632b      	str	r3, [r5, #48]	; 0x30
 801d79c:	4b07      	ldr	r3, [pc, #28]	; (801d7bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d79e:	636b      	str	r3, [r5, #52]	; 0x34
 801d7a0:	bd38      	pop	{r3, r4, r5, pc}
 801d7a2:	bf00      	nop
 801d7a4:	2000a144 	.word	0x2000a144
 801d7a8:	20000000 	.word	0x20000000
 801d7ac:	0801bb4b 	.word	0x0801bb4b
 801d7b0:	200000fc 	.word	0x200000fc
 801d7b4:	2000a148 	.word	0x2000a148
 801d7b8:	0801bb49 	.word	0x0801bb49
 801d7bc:	20000100 	.word	0x20000100

0801d7c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801d7c0:	b538      	push	{r3, r4, r5, lr}
 801d7c2:	4c15      	ldr	r4, [pc, #84]	; (801d818 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801d7c4:	7823      	ldrb	r3, [r4, #0]
 801d7c6:	f3bf 8f5b 	dmb	ish
 801d7ca:	07da      	lsls	r2, r3, #31
 801d7cc:	4605      	mov	r5, r0
 801d7ce:	d40b      	bmi.n	801d7e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d7d0:	4620      	mov	r0, r4
 801d7d2:	f007 fb46 	bl	8024e62 <__cxa_guard_acquire>
 801d7d6:	b138      	cbz	r0, 801d7e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d7d8:	4620      	mov	r0, r4
 801d7da:	f007 fb4e 	bl	8024e7a <__cxa_guard_release>
 801d7de:	4a0f      	ldr	r2, [pc, #60]	; (801d81c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d7e0:	490f      	ldr	r1, [pc, #60]	; (801d820 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801d7e2:	4810      	ldr	r0, [pc, #64]	; (801d824 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d7e4:	f007 fb36 	bl	8024e54 <__aeabi_atexit>
 801d7e8:	4c0f      	ldr	r4, [pc, #60]	; (801d828 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801d7ea:	7823      	ldrb	r3, [r4, #0]
 801d7ec:	f3bf 8f5b 	dmb	ish
 801d7f0:	07db      	lsls	r3, r3, #31
 801d7f2:	d40b      	bmi.n	801d80c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d7f4:	4620      	mov	r0, r4
 801d7f6:	f007 fb34 	bl	8024e62 <__cxa_guard_acquire>
 801d7fa:	b138      	cbz	r0, 801d80c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d7fc:	4620      	mov	r0, r4
 801d7fe:	f007 fb3c 	bl	8024e7a <__cxa_guard_release>
 801d802:	4a06      	ldr	r2, [pc, #24]	; (801d81c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d804:	4909      	ldr	r1, [pc, #36]	; (801d82c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801d806:	480a      	ldr	r0, [pc, #40]	; (801d830 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d808:	f007 fb24 	bl	8024e54 <__aeabi_atexit>
 801d80c:	4b05      	ldr	r3, [pc, #20]	; (801d824 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d80e:	62ab      	str	r3, [r5, #40]	; 0x28
 801d810:	4b07      	ldr	r3, [pc, #28]	; (801d830 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d812:	62eb      	str	r3, [r5, #44]	; 0x2c
 801d814:	bd38      	pop	{r3, r4, r5, pc}
 801d816:	bf00      	nop
 801d818:	2000a114 	.word	0x2000a114
 801d81c:	20000000 	.word	0x20000000
 801d820:	0801bb4f 	.word	0x0801bb4f
 801d824:	200000cc 	.word	0x200000cc
 801d828:	2000a118 	.word	0x2000a118
 801d82c:	0801bb4d 	.word	0x0801bb4d
 801d830:	200000d0 	.word	0x200000d0

0801d834 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801d834:	b510      	push	{r4, lr}
 801d836:	4604      	mov	r4, r0
 801d838:	f7ff ff88 	bl	801d74c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801d83c:	4620      	mov	r0, r4
 801d83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d842:	f7ff bfbd 	b.w	801d7c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801d848 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801d848:	b538      	push	{r3, r4, r5, lr}
 801d84a:	4c15      	ldr	r4, [pc, #84]	; (801d8a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801d84c:	7823      	ldrb	r3, [r4, #0]
 801d84e:	f3bf 8f5b 	dmb	ish
 801d852:	07da      	lsls	r2, r3, #31
 801d854:	4605      	mov	r5, r0
 801d856:	d40b      	bmi.n	801d870 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d858:	4620      	mov	r0, r4
 801d85a:	f007 fb02 	bl	8024e62 <__cxa_guard_acquire>
 801d85e:	b138      	cbz	r0, 801d870 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d860:	4620      	mov	r0, r4
 801d862:	f007 fb0a 	bl	8024e7a <__cxa_guard_release>
 801d866:	4a0f      	ldr	r2, [pc, #60]	; (801d8a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d868:	490f      	ldr	r1, [pc, #60]	; (801d8a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801d86a:	4810      	ldr	r0, [pc, #64]	; (801d8ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d86c:	f007 faf2 	bl	8024e54 <__aeabi_atexit>
 801d870:	4c0f      	ldr	r4, [pc, #60]	; (801d8b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801d872:	7823      	ldrb	r3, [r4, #0]
 801d874:	f3bf 8f5b 	dmb	ish
 801d878:	07db      	lsls	r3, r3, #31
 801d87a:	d40b      	bmi.n	801d894 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d87c:	4620      	mov	r0, r4
 801d87e:	f007 faf0 	bl	8024e62 <__cxa_guard_acquire>
 801d882:	b138      	cbz	r0, 801d894 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d884:	4620      	mov	r0, r4
 801d886:	f007 faf8 	bl	8024e7a <__cxa_guard_release>
 801d88a:	4a06      	ldr	r2, [pc, #24]	; (801d8a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d88c:	4909      	ldr	r1, [pc, #36]	; (801d8b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801d88e:	480a      	ldr	r0, [pc, #40]	; (801d8b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d890:	f007 fae0 	bl	8024e54 <__aeabi_atexit>
 801d894:	4b05      	ldr	r3, [pc, #20]	; (801d8ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d896:	652b      	str	r3, [r5, #80]	; 0x50
 801d898:	4b07      	ldr	r3, [pc, #28]	; (801d8b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d89a:	656b      	str	r3, [r5, #84]	; 0x54
 801d89c:	bd38      	pop	{r3, r4, r5, pc}
 801d89e:	bf00      	nop
 801d8a0:	2000a14c 	.word	0x2000a14c
 801d8a4:	20000000 	.word	0x20000000
 801d8a8:	0801bb3b 	.word	0x0801bb3b
 801d8ac:	20000104 	.word	0x20000104
 801d8b0:	2000a150 	.word	0x2000a150
 801d8b4:	0801bb39 	.word	0x0801bb39
 801d8b8:	20000108 	.word	0x20000108

0801d8bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801d8bc:	b538      	push	{r3, r4, r5, lr}
 801d8be:	4c15      	ldr	r4, [pc, #84]	; (801d914 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801d8c0:	7823      	ldrb	r3, [r4, #0]
 801d8c2:	f3bf 8f5b 	dmb	ish
 801d8c6:	07da      	lsls	r2, r3, #31
 801d8c8:	4605      	mov	r5, r0
 801d8ca:	d40b      	bmi.n	801d8e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d8cc:	4620      	mov	r0, r4
 801d8ce:	f007 fac8 	bl	8024e62 <__cxa_guard_acquire>
 801d8d2:	b138      	cbz	r0, 801d8e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d8d4:	4620      	mov	r0, r4
 801d8d6:	f007 fad0 	bl	8024e7a <__cxa_guard_release>
 801d8da:	4a0f      	ldr	r2, [pc, #60]	; (801d918 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d8dc:	490f      	ldr	r1, [pc, #60]	; (801d91c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801d8de:	4810      	ldr	r0, [pc, #64]	; (801d920 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d8e0:	f007 fab8 	bl	8024e54 <__aeabi_atexit>
 801d8e4:	4c0f      	ldr	r4, [pc, #60]	; (801d924 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801d8e6:	7823      	ldrb	r3, [r4, #0]
 801d8e8:	f3bf 8f5b 	dmb	ish
 801d8ec:	07db      	lsls	r3, r3, #31
 801d8ee:	d40b      	bmi.n	801d908 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d8f0:	4620      	mov	r0, r4
 801d8f2:	f007 fab6 	bl	8024e62 <__cxa_guard_acquire>
 801d8f6:	b138      	cbz	r0, 801d908 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d8f8:	4620      	mov	r0, r4
 801d8fa:	f007 fabe 	bl	8024e7a <__cxa_guard_release>
 801d8fe:	4a06      	ldr	r2, [pc, #24]	; (801d918 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d900:	4909      	ldr	r1, [pc, #36]	; (801d928 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801d902:	480a      	ldr	r0, [pc, #40]	; (801d92c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d904:	f007 faa6 	bl	8024e54 <__aeabi_atexit>
 801d908:	4b05      	ldr	r3, [pc, #20]	; (801d920 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d90a:	64ab      	str	r3, [r5, #72]	; 0x48
 801d90c:	4b07      	ldr	r3, [pc, #28]	; (801d92c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d90e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d910:	bd38      	pop	{r3, r4, r5, pc}
 801d912:	bf00      	nop
 801d914:	2000a154 	.word	0x2000a154
 801d918:	20000000 	.word	0x20000000
 801d91c:	0801bb3f 	.word	0x0801bb3f
 801d920:	2000010c 	.word	0x2000010c
 801d924:	2000a158 	.word	0x2000a158
 801d928:	0801bb3d 	.word	0x0801bb3d
 801d92c:	20000110 	.word	0x20000110

0801d930 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801d930:	b538      	push	{r3, r4, r5, lr}
 801d932:	4c15      	ldr	r4, [pc, #84]	; (801d988 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801d934:	7823      	ldrb	r3, [r4, #0]
 801d936:	f3bf 8f5b 	dmb	ish
 801d93a:	07da      	lsls	r2, r3, #31
 801d93c:	4605      	mov	r5, r0
 801d93e:	d40b      	bmi.n	801d958 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801d940:	4620      	mov	r0, r4
 801d942:	f007 fa8e 	bl	8024e62 <__cxa_guard_acquire>
 801d946:	b138      	cbz	r0, 801d958 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801d948:	4620      	mov	r0, r4
 801d94a:	f007 fa96 	bl	8024e7a <__cxa_guard_release>
 801d94e:	4a0f      	ldr	r2, [pc, #60]	; (801d98c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801d950:	490f      	ldr	r1, [pc, #60]	; (801d990 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801d952:	4810      	ldr	r0, [pc, #64]	; (801d994 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801d954:	f007 fa7e 	bl	8024e54 <__aeabi_atexit>
 801d958:	4c0f      	ldr	r4, [pc, #60]	; (801d998 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801d95a:	7823      	ldrb	r3, [r4, #0]
 801d95c:	f3bf 8f5b 	dmb	ish
 801d960:	07db      	lsls	r3, r3, #31
 801d962:	d40b      	bmi.n	801d97c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801d964:	4620      	mov	r0, r4
 801d966:	f007 fa7c 	bl	8024e62 <__cxa_guard_acquire>
 801d96a:	b138      	cbz	r0, 801d97c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801d96c:	4620      	mov	r0, r4
 801d96e:	f007 fa84 	bl	8024e7a <__cxa_guard_release>
 801d972:	4a06      	ldr	r2, [pc, #24]	; (801d98c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801d974:	4909      	ldr	r1, [pc, #36]	; (801d99c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801d976:	480a      	ldr	r0, [pc, #40]	; (801d9a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801d978:	f007 fa6c 	bl	8024e54 <__aeabi_atexit>
 801d97c:	4b05      	ldr	r3, [pc, #20]	; (801d994 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801d97e:	642b      	str	r3, [r5, #64]	; 0x40
 801d980:	4b07      	ldr	r3, [pc, #28]	; (801d9a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801d982:	646b      	str	r3, [r5, #68]	; 0x44
 801d984:	bd38      	pop	{r3, r4, r5, pc}
 801d986:	bf00      	nop
 801d988:	2000a11c 	.word	0x2000a11c
 801d98c:	20000000 	.word	0x20000000
 801d990:	0801bb43 	.word	0x0801bb43
 801d994:	200000d4 	.word	0x200000d4
 801d998:	2000a120 	.word	0x2000a120
 801d99c:	0801bb41 	.word	0x0801bb41
 801d9a0:	200000d8 	.word	0x200000d8

0801d9a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801d9a4:	b538      	push	{r3, r4, r5, lr}
 801d9a6:	4c15      	ldr	r4, [pc, #84]	; (801d9fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801d9a8:	7823      	ldrb	r3, [r4, #0]
 801d9aa:	f3bf 8f5b 	dmb	ish
 801d9ae:	07da      	lsls	r2, r3, #31
 801d9b0:	4605      	mov	r5, r0
 801d9b2:	d40b      	bmi.n	801d9cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	f007 fa54 	bl	8024e62 <__cxa_guard_acquire>
 801d9ba:	b138      	cbz	r0, 801d9cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801d9bc:	4620      	mov	r0, r4
 801d9be:	f007 fa5c 	bl	8024e7a <__cxa_guard_release>
 801d9c2:	4a0f      	ldr	r2, [pc, #60]	; (801da00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801d9c4:	490f      	ldr	r1, [pc, #60]	; (801da04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801d9c6:	4810      	ldr	r0, [pc, #64]	; (801da08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801d9c8:	f007 fa44 	bl	8024e54 <__aeabi_atexit>
 801d9cc:	4c0f      	ldr	r4, [pc, #60]	; (801da0c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801d9ce:	7823      	ldrb	r3, [r4, #0]
 801d9d0:	f3bf 8f5b 	dmb	ish
 801d9d4:	07db      	lsls	r3, r3, #31
 801d9d6:	d40b      	bmi.n	801d9f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801d9d8:	4620      	mov	r0, r4
 801d9da:	f007 fa42 	bl	8024e62 <__cxa_guard_acquire>
 801d9de:	b138      	cbz	r0, 801d9f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801d9e0:	4620      	mov	r0, r4
 801d9e2:	f007 fa4a 	bl	8024e7a <__cxa_guard_release>
 801d9e6:	4a06      	ldr	r2, [pc, #24]	; (801da00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801d9e8:	4909      	ldr	r1, [pc, #36]	; (801da10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801d9ea:	480a      	ldr	r0, [pc, #40]	; (801da14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801d9ec:	f007 fa32 	bl	8024e54 <__aeabi_atexit>
 801d9f0:	4b05      	ldr	r3, [pc, #20]	; (801da08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801d9f2:	63ab      	str	r3, [r5, #56]	; 0x38
 801d9f4:	4b07      	ldr	r3, [pc, #28]	; (801da14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801d9f6:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d9f8:	bd38      	pop	{r3, r4, r5, pc}
 801d9fa:	bf00      	nop
 801d9fc:	2000a13c 	.word	0x2000a13c
 801da00:	20000000 	.word	0x20000000
 801da04:	0801bb47 	.word	0x0801bb47
 801da08:	200000f4 	.word	0x200000f4
 801da0c:	2000a140 	.word	0x2000a140
 801da10:	0801bb45 	.word	0x0801bb45
 801da14:	200000f8 	.word	0x200000f8

0801da18 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801da18:	b510      	push	{r4, lr}
 801da1a:	4604      	mov	r4, r0
 801da1c:	f7ff ff14 	bl	801d848 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801da20:	4620      	mov	r0, r4
 801da22:	f7ff ff85 	bl	801d930 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801da26:	4620      	mov	r0, r4
 801da28:	f7ff ff48 	bl	801d8bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801da2c:	4620      	mov	r0, r4
 801da2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da32:	f7ff bfb7 	b.w	801d9a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801da38 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801da38:	b538      	push	{r3, r4, r5, lr}
 801da3a:	4c15      	ldr	r4, [pc, #84]	; (801da90 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801da3c:	7823      	ldrb	r3, [r4, #0]
 801da3e:	f3bf 8f5b 	dmb	ish
 801da42:	07da      	lsls	r2, r3, #31
 801da44:	4605      	mov	r5, r0
 801da46:	d40b      	bmi.n	801da60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801da48:	4620      	mov	r0, r4
 801da4a:	f007 fa0a 	bl	8024e62 <__cxa_guard_acquire>
 801da4e:	b138      	cbz	r0, 801da60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801da50:	4620      	mov	r0, r4
 801da52:	f007 fa12 	bl	8024e7a <__cxa_guard_release>
 801da56:	4a0f      	ldr	r2, [pc, #60]	; (801da94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801da58:	490f      	ldr	r1, [pc, #60]	; (801da98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801da5a:	4810      	ldr	r0, [pc, #64]	; (801da9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801da5c:	f007 f9fa 	bl	8024e54 <__aeabi_atexit>
 801da60:	4c0f      	ldr	r4, [pc, #60]	; (801daa0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801da62:	7823      	ldrb	r3, [r4, #0]
 801da64:	f3bf 8f5b 	dmb	ish
 801da68:	07db      	lsls	r3, r3, #31
 801da6a:	d40b      	bmi.n	801da84 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801da6c:	4620      	mov	r0, r4
 801da6e:	f007 f9f8 	bl	8024e62 <__cxa_guard_acquire>
 801da72:	b138      	cbz	r0, 801da84 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801da74:	4620      	mov	r0, r4
 801da76:	f007 fa00 	bl	8024e7a <__cxa_guard_release>
 801da7a:	4a06      	ldr	r2, [pc, #24]	; (801da94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801da7c:	4909      	ldr	r1, [pc, #36]	; (801daa4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801da7e:	480a      	ldr	r0, [pc, #40]	; (801daa8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801da80:	f007 f9e8 	bl	8024e54 <__aeabi_atexit>
 801da84:	4b05      	ldr	r3, [pc, #20]	; (801da9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801da86:	662b      	str	r3, [r5, #96]	; 0x60
 801da88:	4b07      	ldr	r3, [pc, #28]	; (801daa8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801da8a:	666b      	str	r3, [r5, #100]	; 0x64
 801da8c:	bd38      	pop	{r3, r4, r5, pc}
 801da8e:	bf00      	nop
 801da90:	2000a124 	.word	0x2000a124
 801da94:	20000000 	.word	0x20000000
 801da98:	0801bb33 	.word	0x0801bb33
 801da9c:	200000dc 	.word	0x200000dc
 801daa0:	2000a128 	.word	0x2000a128
 801daa4:	0801bb31 	.word	0x0801bb31
 801daa8:	200000e0 	.word	0x200000e0

0801daac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801daac:	b538      	push	{r3, r4, r5, lr}
 801daae:	4c15      	ldr	r4, [pc, #84]	; (801db04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801dab0:	7823      	ldrb	r3, [r4, #0]
 801dab2:	f3bf 8f5b 	dmb	ish
 801dab6:	07da      	lsls	r2, r3, #31
 801dab8:	4605      	mov	r5, r0
 801daba:	d40b      	bmi.n	801dad4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801dabc:	4620      	mov	r0, r4
 801dabe:	f007 f9d0 	bl	8024e62 <__cxa_guard_acquire>
 801dac2:	b138      	cbz	r0, 801dad4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801dac4:	4620      	mov	r0, r4
 801dac6:	f007 f9d8 	bl	8024e7a <__cxa_guard_release>
 801daca:	4a0f      	ldr	r2, [pc, #60]	; (801db08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801dacc:	490f      	ldr	r1, [pc, #60]	; (801db0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801dace:	4810      	ldr	r0, [pc, #64]	; (801db10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801dad0:	f007 f9c0 	bl	8024e54 <__aeabi_atexit>
 801dad4:	4c0f      	ldr	r4, [pc, #60]	; (801db14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801dad6:	7823      	ldrb	r3, [r4, #0]
 801dad8:	f3bf 8f5b 	dmb	ish
 801dadc:	07db      	lsls	r3, r3, #31
 801dade:	d40b      	bmi.n	801daf8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801dae0:	4620      	mov	r0, r4
 801dae2:	f007 f9be 	bl	8024e62 <__cxa_guard_acquire>
 801dae6:	b138      	cbz	r0, 801daf8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801dae8:	4620      	mov	r0, r4
 801daea:	f007 f9c6 	bl	8024e7a <__cxa_guard_release>
 801daee:	4a06      	ldr	r2, [pc, #24]	; (801db08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801daf0:	4909      	ldr	r1, [pc, #36]	; (801db18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801daf2:	480a      	ldr	r0, [pc, #40]	; (801db1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801daf4:	f007 f9ae 	bl	8024e54 <__aeabi_atexit>
 801daf8:	4b05      	ldr	r3, [pc, #20]	; (801db10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801dafa:	65ab      	str	r3, [r5, #88]	; 0x58
 801dafc:	4b07      	ldr	r3, [pc, #28]	; (801db1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801dafe:	65eb      	str	r3, [r5, #92]	; 0x5c
 801db00:	bd38      	pop	{r3, r4, r5, pc}
 801db02:	bf00      	nop
 801db04:	2000a0fc 	.word	0x2000a0fc
 801db08:	20000000 	.word	0x20000000
 801db0c:	0801bb37 	.word	0x0801bb37
 801db10:	200000b4 	.word	0x200000b4
 801db14:	2000a100 	.word	0x2000a100
 801db18:	0801bb35 	.word	0x0801bb35
 801db1c:	200000b8 	.word	0x200000b8

0801db20 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801db20:	b510      	push	{r4, lr}
 801db22:	4604      	mov	r4, r0
 801db24:	f7ff ff88 	bl	801da38 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801db28:	4620      	mov	r0, r4
 801db2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db2e:	f7ff bfbd 	b.w	801daac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801db34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801db34:	b538      	push	{r3, r4, r5, lr}
 801db36:	4c15      	ldr	r4, [pc, #84]	; (801db8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801db38:	7823      	ldrb	r3, [r4, #0]
 801db3a:	f3bf 8f5b 	dmb	ish
 801db3e:	07da      	lsls	r2, r3, #31
 801db40:	4605      	mov	r5, r0
 801db42:	d40b      	bmi.n	801db5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801db44:	4620      	mov	r0, r4
 801db46:	f007 f98c 	bl	8024e62 <__cxa_guard_acquire>
 801db4a:	b138      	cbz	r0, 801db5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801db4c:	4620      	mov	r0, r4
 801db4e:	f007 f994 	bl	8024e7a <__cxa_guard_release>
 801db52:	4a0f      	ldr	r2, [pc, #60]	; (801db90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801db54:	490f      	ldr	r1, [pc, #60]	; (801db94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801db56:	4810      	ldr	r0, [pc, #64]	; (801db98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801db58:	f007 f97c 	bl	8024e54 <__aeabi_atexit>
 801db5c:	4c0f      	ldr	r4, [pc, #60]	; (801db9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801db5e:	7823      	ldrb	r3, [r4, #0]
 801db60:	f3bf 8f5b 	dmb	ish
 801db64:	07db      	lsls	r3, r3, #31
 801db66:	d40b      	bmi.n	801db80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801db68:	4620      	mov	r0, r4
 801db6a:	f007 f97a 	bl	8024e62 <__cxa_guard_acquire>
 801db6e:	b138      	cbz	r0, 801db80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801db70:	4620      	mov	r0, r4
 801db72:	f007 f982 	bl	8024e7a <__cxa_guard_release>
 801db76:	4a06      	ldr	r2, [pc, #24]	; (801db90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801db78:	4909      	ldr	r1, [pc, #36]	; (801dba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801db7a:	480a      	ldr	r0, [pc, #40]	; (801dba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801db7c:	f007 f96a 	bl	8024e54 <__aeabi_atexit>
 801db80:	4b05      	ldr	r3, [pc, #20]	; (801db98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801db82:	672b      	str	r3, [r5, #112]	; 0x70
 801db84:	4b07      	ldr	r3, [pc, #28]	; (801dba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801db86:	676b      	str	r3, [r5, #116]	; 0x74
 801db88:	bd38      	pop	{r3, r4, r5, pc}
 801db8a:	bf00      	nop
 801db8c:	2000a0f4 	.word	0x2000a0f4
 801db90:	20000000 	.word	0x20000000
 801db94:	0801bb2b 	.word	0x0801bb2b
 801db98:	200000ac 	.word	0x200000ac
 801db9c:	2000a0f8 	.word	0x2000a0f8
 801dba0:	0801bb29 	.word	0x0801bb29
 801dba4:	200000b0 	.word	0x200000b0

0801dba8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801dba8:	b538      	push	{r3, r4, r5, lr}
 801dbaa:	4c15      	ldr	r4, [pc, #84]	; (801dc00 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801dbac:	7823      	ldrb	r3, [r4, #0]
 801dbae:	f3bf 8f5b 	dmb	ish
 801dbb2:	07da      	lsls	r2, r3, #31
 801dbb4:	4605      	mov	r5, r0
 801dbb6:	d40b      	bmi.n	801dbd0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801dbb8:	4620      	mov	r0, r4
 801dbba:	f007 f952 	bl	8024e62 <__cxa_guard_acquire>
 801dbbe:	b138      	cbz	r0, 801dbd0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801dbc0:	4620      	mov	r0, r4
 801dbc2:	f007 f95a 	bl	8024e7a <__cxa_guard_release>
 801dbc6:	4a0f      	ldr	r2, [pc, #60]	; (801dc04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801dbc8:	490f      	ldr	r1, [pc, #60]	; (801dc08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801dbca:	4810      	ldr	r0, [pc, #64]	; (801dc0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801dbcc:	f007 f942 	bl	8024e54 <__aeabi_atexit>
 801dbd0:	4c0f      	ldr	r4, [pc, #60]	; (801dc10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801dbd2:	7823      	ldrb	r3, [r4, #0]
 801dbd4:	f3bf 8f5b 	dmb	ish
 801dbd8:	07db      	lsls	r3, r3, #31
 801dbda:	d40b      	bmi.n	801dbf4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dbdc:	4620      	mov	r0, r4
 801dbde:	f007 f940 	bl	8024e62 <__cxa_guard_acquire>
 801dbe2:	b138      	cbz	r0, 801dbf4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f007 f948 	bl	8024e7a <__cxa_guard_release>
 801dbea:	4a06      	ldr	r2, [pc, #24]	; (801dc04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801dbec:	4909      	ldr	r1, [pc, #36]	; (801dc14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801dbee:	480a      	ldr	r0, [pc, #40]	; (801dc18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dbf0:	f007 f930 	bl	8024e54 <__aeabi_atexit>
 801dbf4:	4b05      	ldr	r3, [pc, #20]	; (801dc0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801dbf6:	66ab      	str	r3, [r5, #104]	; 0x68
 801dbf8:	4b07      	ldr	r3, [pc, #28]	; (801dc18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dbfa:	66eb      	str	r3, [r5, #108]	; 0x6c
 801dbfc:	bd38      	pop	{r3, r4, r5, pc}
 801dbfe:	bf00      	nop
 801dc00:	2000a0ec 	.word	0x2000a0ec
 801dc04:	20000000 	.word	0x20000000
 801dc08:	0801bb2f 	.word	0x0801bb2f
 801dc0c:	200000a4 	.word	0x200000a4
 801dc10:	2000a0f0 	.word	0x2000a0f0
 801dc14:	0801bb2d 	.word	0x0801bb2d
 801dc18:	200000a8 	.word	0x200000a8

0801dc1c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801dc1c:	b510      	push	{r4, lr}
 801dc1e:	4604      	mov	r4, r0
 801dc20:	f7ff ff88 	bl	801db34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801dc24:	4620      	mov	r0, r4
 801dc26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc2a:	f7ff bfbd 	b.w	801dba8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801dc2e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801dc2e:	b510      	push	{r4, lr}
 801dc30:	4604      	mov	r4, r0
 801dc32:	f7ff fff3 	bl	801dc1c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801dc36:	4620      	mov	r0, r4
 801dc38:	f7ff ff72 	bl	801db20 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801dc3c:	4620      	mov	r0, r4
 801dc3e:	f7ff fdf9 	bl	801d834 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801dc42:	4620      	mov	r0, r4
 801dc44:	f7ff fcfa 	bl	801d63c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801dc48:	4620      	mov	r0, r4
 801dc4a:	f7ff fd75 	bl	801d738 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801dc4e:	4620      	mov	r0, r4
 801dc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc54:	f7ff bee0 	b.w	801da18 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801dc58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801dc58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc5c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801dc60:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801dc64:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801dc68:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801dc6c:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801dc70:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801dc74:	8808      	ldrh	r0, [r1, #0]
 801dc76:	fb0e 4708 	mla	r7, lr, r8, r4
 801dc7a:	f1be 0f00 	cmp.w	lr, #0
 801dc7e:	eb02 0a07 	add.w	sl, r2, r7
 801dc82:	db37      	blt.n	801dcf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801dc84:	45f3      	cmp	fp, lr
 801dc86:	dd35      	ble.n	801dcf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801dc88:	2c00      	cmp	r4, #0
 801dc8a:	db31      	blt.n	801dcf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801dc8c:	45a0      	cmp	r8, r4
 801dc8e:	dd2f      	ble.n	801dcf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801dc90:	5dd2      	ldrb	r2, [r2, r7]
 801dc92:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801dc96:	1c62      	adds	r2, r4, #1
 801dc98:	d42f      	bmi.n	801dcfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801dc9a:	4590      	cmp	r8, r2
 801dc9c:	dd2d      	ble.n	801dcfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801dc9e:	b366      	cbz	r6, 801dcfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801dca0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801dca4:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801dca8:	f11e 0e01 	adds.w	lr, lr, #1
 801dcac:	d429      	bmi.n	801dd02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801dcae:	45f3      	cmp	fp, lr
 801dcb0:	dd27      	ble.n	801dd02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801dcb2:	f1bc 0f00 	cmp.w	ip, #0
 801dcb6:	f000 80a0 	beq.w	801ddfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801dcba:	2c00      	cmp	r4, #0
 801dcbc:	db1f      	blt.n	801dcfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801dcbe:	45a0      	cmp	r8, r4
 801dcc0:	dd1d      	ble.n	801dcfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801dcc2:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801dcc6:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801dcca:	3401      	adds	r4, #1
 801dccc:	d41c      	bmi.n	801dd08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801dcce:	45a0      	cmp	r8, r4
 801dcd0:	dd1a      	ble.n	801dd08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801dcd2:	b1de      	cbz	r6, 801dd0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801dcd4:	44d0      	add	r8, sl
 801dcd6:	f898 2001 	ldrb.w	r2, [r8, #1]
 801dcda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801dcde:	2e0f      	cmp	r6, #15
 801dce0:	d915      	bls.n	801dd0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801dce2:	4b49      	ldr	r3, [pc, #292]	; (801de08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801dce4:	4a49      	ldr	r2, [pc, #292]	; (801de0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801dce6:	484a      	ldr	r0, [pc, #296]	; (801de10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801dce8:	f240 11ef 	movw	r1, #495	; 0x1ef
 801dcec:	f007 f9e2 	bl	80250b4 <__assert_func>
 801dcf0:	4681      	mov	r9, r0
 801dcf2:	e7d0      	b.n	801dc96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801dcf4:	4607      	mov	r7, r0
 801dcf6:	4681      	mov	r9, r0
 801dcf8:	e7d6      	b.n	801dca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801dcfa:	4607      	mov	r7, r0
 801dcfc:	e7d4      	b.n	801dca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801dcfe:	4686      	mov	lr, r0
 801dd00:	e7e3      	b.n	801dcca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801dd02:	4603      	mov	r3, r0
 801dd04:	4686      	mov	lr, r0
 801dd06:	e7ea      	b.n	801dcde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801dd08:	4603      	mov	r3, r0
 801dd0a:	e7e8      	b.n	801dcde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801dd0c:	4603      	mov	r3, r0
 801dd0e:	f1bc 0f0f 	cmp.w	ip, #15
 801dd12:	d8e6      	bhi.n	801dce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801dd14:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801dd18:	fb16 f80c 	smulbb	r8, r6, ip
 801dd1c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801dd20:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801dd24:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801dd28:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801dd2c:	ea44 0909 	orr.w	r9, r4, r9
 801dd30:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801dd34:	f1cc 0410 	rsb	r4, ip, #16
 801dd38:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801dd3c:	1ba4      	subs	r4, r4, r6
 801dd3e:	041a      	lsls	r2, r3, #16
 801dd40:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801dd44:	ea4a 0707 	orr.w	r7, sl, r7
 801dd48:	4377      	muls	r7, r6
 801dd4a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801dd4e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801dd52:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801dd56:	fb04 7409 	mla	r4, r4, r9, r7
 801dd5a:	4313      	orrs	r3, r2
 801dd5c:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801dd60:	fb08 4303 	mla	r3, r8, r3, r4
 801dd64:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801dd68:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801dd6c:	4322      	orrs	r2, r4
 801dd6e:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801dd72:	fb0c 3202 	mla	r2, ip, r2, r3
 801dd76:	0d53      	lsrs	r3, r2, #21
 801dd78:	0952      	lsrs	r2, r2, #5
 801dd7a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dd7e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801dd82:	431a      	orrs	r2, r3
 801dd84:	b293      	uxth	r3, r2
 801dd86:	b2af      	uxth	r7, r5
 801dd88:	1202      	asrs	r2, r0, #8
 801dd8a:	43ed      	mvns	r5, r5
 801dd8c:	b2ed      	uxtb	r5, r5
 801dd8e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801dd92:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801dd96:	fb12 f205 	smulbb	r2, r2, r5
 801dd9a:	10c6      	asrs	r6, r0, #3
 801dd9c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dda0:	fb0c 2c07 	mla	ip, ip, r7, r2
 801dda4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dda8:	10da      	asrs	r2, r3, #3
 801ddaa:	fb16 f605 	smulbb	r6, r6, r5
 801ddae:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ddb2:	fb02 6207 	mla	r2, r2, r7, r6
 801ddb6:	b296      	uxth	r6, r2
 801ddb8:	00c2      	lsls	r2, r0, #3
 801ddba:	00dc      	lsls	r4, r3, #3
 801ddbc:	b2d2      	uxtb	r2, r2
 801ddbe:	b2e4      	uxtb	r4, r4
 801ddc0:	fb12 f205 	smulbb	r2, r2, r5
 801ddc4:	fb04 2207 	mla	r2, r4, r7, r2
 801ddc8:	fa1f fc8c 	uxth.w	ip, ip
 801ddcc:	b292      	uxth	r2, r2
 801ddce:	f10c 0301 	add.w	r3, ip, #1
 801ddd2:	1c50      	adds	r0, r2, #1
 801ddd4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801ddd8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801dddc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801dde0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801dde4:	4313      	orrs	r3, r2
 801dde6:	1c72      	adds	r2, r6, #1
 801dde8:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801ddec:	0952      	lsrs	r2, r2, #5
 801ddee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ddf2:	4313      	orrs	r3, r2
 801ddf4:	800b      	strh	r3, [r1, #0]
 801ddf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddfa:	2e0f      	cmp	r6, #15
 801ddfc:	f63f af71 	bhi.w	801dce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801de00:	4603      	mov	r3, r0
 801de02:	4686      	mov	lr, r0
 801de04:	e786      	b.n	801dd14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801de06:	bf00      	nop
 801de08:	0802abd6 	.word	0x0802abd6
 801de0c:	0802b242 	.word	0x0802b242
 801de10:	0802acbf 	.word	0x0802acbf

0801de14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de18:	ed2d 8b08 	vpush	{d8-d11}
 801de1c:	b099      	sub	sp, #100	; 0x64
 801de1e:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 801de22:	9215      	str	r2, [sp, #84]	; 0x54
 801de24:	9309      	str	r3, [sp, #36]	; 0x24
 801de26:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801de28:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801de2c:	930d      	str	r3, [sp, #52]	; 0x34
 801de2e:	910c      	str	r1, [sp, #48]	; 0x30
 801de30:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801de34:	9016      	str	r0, [sp, #88]	; 0x58
 801de36:	6850      	ldr	r0, [r2, #4]
 801de38:	6812      	ldr	r2, [r2, #0]
 801de3a:	fb00 1303 	mla	r3, r0, r3, r1
 801de3e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801de42:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801de44:	681b      	ldr	r3, [r3, #0]
 801de46:	930b      	str	r3, [sp, #44]	; 0x2c
 801de48:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801de4a:	685e      	ldr	r6, [r3, #4]
 801de4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801de4e:	43db      	mvns	r3, r3
 801de50:	b2db      	uxtb	r3, r3
 801de52:	eeb0 aa40 	vmov.f32	s20, s0
 801de56:	eef0 9a60 	vmov.f32	s19, s1
 801de5a:	eeb0 9a41 	vmov.f32	s18, s2
 801de5e:	eeb0 8a62 	vmov.f32	s16, s5
 801de62:	eef0 8a43 	vmov.f32	s17, s6
 801de66:	eef0 ba44 	vmov.f32	s23, s8
 801de6a:	eeb0 ba64 	vmov.f32	s22, s9
 801de6e:	eef0 aa45 	vmov.f32	s21, s10
 801de72:	3604      	adds	r6, #4
 801de74:	930a      	str	r3, [sp, #40]	; 0x28
 801de76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de78:	2b00      	cmp	r3, #0
 801de7a:	dc03      	bgt.n	801de84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801de7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801de7e:	2b00      	cmp	r3, #0
 801de80:	f340 8226 	ble.w	801e2d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 801de84:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801de86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801de8a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801de8e:	1e48      	subs	r0, r1, #1
 801de90:	1e57      	subs	r7, r2, #1
 801de92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de94:	2b00      	cmp	r3, #0
 801de96:	f340 80e4 	ble.w	801e062 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801de9a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801de9e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801dea2:	d406      	bmi.n	801deb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dea4:	4584      	cmp	ip, r0
 801dea6:	da04      	bge.n	801deb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dea8:	2b00      	cmp	r3, #0
 801deaa:	db02      	blt.n	801deb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801deac:	42bb      	cmp	r3, r7
 801deae:	f2c0 80d9 	blt.w	801e064 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801deb2:	f11c 0c01 	adds.w	ip, ip, #1
 801deb6:	f100 80ca 	bmi.w	801e04e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801deba:	4561      	cmp	r1, ip
 801debc:	f2c0 80c7 	blt.w	801e04e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801dec0:	3301      	adds	r3, #1
 801dec2:	f100 80c4 	bmi.w	801e04e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801dec6:	429a      	cmp	r2, r3
 801dec8:	f2c0 80c1 	blt.w	801e04e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801decc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ded0:	4647      	mov	r7, r8
 801ded2:	f1bb 0f00 	cmp.w	fp, #0
 801ded6:	f340 80e4 	ble.w	801e0a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801deda:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801dedc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801dede:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801dee2:	689b      	ldr	r3, [r3, #8]
 801dee4:	ea5f 422a 	movs.w	r2, sl, asr #16
 801dee8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801deec:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801def0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801def4:	f100 8122 	bmi.w	801e13c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801def8:	f103 39ff 	add.w	r9, r3, #4294967295
 801defc:	454a      	cmp	r2, r9
 801defe:	f280 811d 	bge.w	801e13c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801df02:	f1bc 0f00 	cmp.w	ip, #0
 801df06:	f2c0 8119 	blt.w	801e13c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801df0a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801df0e:	45cc      	cmp	ip, r9
 801df10:	f280 8114 	bge.w	801e13c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801df14:	b21b      	sxth	r3, r3
 801df16:	fb0c 2203 	mla	r2, ip, r3, r2
 801df1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801df1c:	eb04 0902 	add.w	r9, r4, r2
 801df20:	5ca2      	ldrb	r2, [r4, r2]
 801df22:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801df26:	2800      	cmp	r0, #0
 801df28:	f000 80ff 	beq.w	801e12a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 801df2c:	f899 2001 	ldrb.w	r2, [r9, #1]
 801df30:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801df34:	9211      	str	r2, [sp, #68]	; 0x44
 801df36:	b151      	cbz	r1, 801df4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801df38:	eb09 0203 	add.w	r2, r9, r3
 801df3c:	f819 3003 	ldrb.w	r3, [r9, r3]
 801df40:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801df44:	930f      	str	r3, [sp, #60]	; 0x3c
 801df46:	7853      	ldrb	r3, [r2, #1]
 801df48:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801df4c:	9312      	str	r3, [sp, #72]	; 0x48
 801df4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df50:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801df52:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801df56:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801df5a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801df5e:	ea4c 0c03 	orr.w	ip, ip, r3
 801df62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801df64:	041b      	lsls	r3, r3, #16
 801df66:	fb10 f201 	smulbb	r2, r0, r1
 801df6a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801df6e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801df72:	10d2      	asrs	r2, r2, #3
 801df74:	4323      	orrs	r3, r4
 801df76:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801df7a:	4353      	muls	r3, r2
 801df7c:	fb09 330c 	mla	r3, r9, ip, r3
 801df80:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801df84:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801df88:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801df8c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801df90:	f1c1 0c10 	rsb	ip, r1, #16
 801df94:	ebac 0c00 	sub.w	ip, ip, r0
 801df98:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801df9c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801dfa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dfa2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dfa4:	0418      	lsls	r0, r3, #16
 801dfa6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801dfaa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801dfae:	4318      	orrs	r0, r3
 801dfb0:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801dfb4:	fb02 c200 	mla	r2, r2, r0, ip
 801dfb8:	0d53      	lsrs	r3, r2, #21
 801dfba:	0952      	lsrs	r2, r2, #5
 801dfbc:	f8b7 c000 	ldrh.w	ip, [r7]
 801dfc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dfc4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801dfc8:	431a      	orrs	r2, r3
 801dfca:	b292      	uxth	r2, r2
 801dfcc:	ea4f 212c 	mov.w	r1, ip, asr #8
 801dfd0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801dfd4:	1210      	asrs	r0, r2, #8
 801dfd6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801dfda:	fb11 f104 	smulbb	r1, r1, r4
 801dfde:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801dfe2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801dfe6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dfea:	fb00 1003 	mla	r0, r0, r3, r1
 801dfee:	fa5f fc8c 	uxtb.w	ip, ip
 801dff2:	10d1      	asrs	r1, r2, #3
 801dff4:	00d2      	lsls	r2, r2, #3
 801dff6:	fb1c fc04 	smulbb	ip, ip, r4
 801dffa:	b2d2      	uxtb	r2, r2
 801dffc:	fb02 c203 	mla	r2, r2, r3, ip
 801e000:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e004:	b280      	uxth	r0, r0
 801e006:	b292      	uxth	r2, r2
 801e008:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e00c:	fb1e fe04 	smulbb	lr, lr, r4
 801e010:	fb01 e103 	mla	r1, r1, r3, lr
 801e014:	f102 0c01 	add.w	ip, r2, #1
 801e018:	1c43      	adds	r3, r0, #1
 801e01a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e01e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e022:	b289      	uxth	r1, r1
 801e024:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e028:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e02c:	4313      	orrs	r3, r2
 801e02e:	1c4a      	adds	r2, r1, #1
 801e030:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e034:	0949      	lsrs	r1, r1, #5
 801e036:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e03a:	430b      	orrs	r3, r1
 801e03c:	803b      	strh	r3, [r7, #0]
 801e03e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e040:	449a      	add	sl, r3
 801e042:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e044:	3702      	adds	r7, #2
 801e046:	441d      	add	r5, r3
 801e048:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e04c:	e741      	b.n	801ded2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801e04e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e050:	449a      	add	sl, r3
 801e052:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e054:	441d      	add	r5, r3
 801e056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e058:	3b01      	subs	r3, #1
 801e05a:	9309      	str	r3, [sp, #36]	; 0x24
 801e05c:	f108 0802 	add.w	r8, r8, #2
 801e060:	e717      	b.n	801de92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e062:	d023      	beq.n	801e0ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801e064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e066:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801e068:	3b01      	subs	r3, #1
 801e06a:	fb00 a003 	mla	r0, r0, r3, sl
 801e06e:	1400      	asrs	r0, r0, #16
 801e070:	f53f af2c 	bmi.w	801decc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801e074:	3901      	subs	r1, #1
 801e076:	4288      	cmp	r0, r1
 801e078:	f6bf af28 	bge.w	801decc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801e07c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801e07e:	fb01 5303 	mla	r3, r1, r3, r5
 801e082:	141b      	asrs	r3, r3, #16
 801e084:	f53f af22 	bmi.w	801decc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801e088:	3a01      	subs	r2, #1
 801e08a:	4293      	cmp	r3, r2
 801e08c:	f6bf af1e 	bge.w	801decc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801e090:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801e094:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801e098:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801e09c:	f1be 0f00 	cmp.w	lr, #0
 801e0a0:	dc6c      	bgt.n	801e17c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801e0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e0a8:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801e0ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	f340 810e 	ble.w	801e2d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 801e0b4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e0b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e0bc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e0c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e0c2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e0c6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e0ca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e0ce:	eef0 6a48 	vmov.f32	s13, s16
 801e0d2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e0d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e0da:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e0de:	ee16 aa90 	vmov	sl, s13
 801e0e2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e0e6:	eef0 6a68 	vmov.f32	s13, s17
 801e0ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e0ee:	ee18 2a10 	vmov	r2, s16
 801e0f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e0f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0fa:	ee18 2a90 	vmov	r2, s17
 801e0fe:	932d      	str	r3, [sp, #180]	; 0xb4
 801e100:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e102:	fb92 f3f3 	sdiv	r3, r2, r3
 801e106:	932e      	str	r3, [sp, #184]	; 0xb8
 801e108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e10a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e10c:	3b01      	subs	r3, #1
 801e10e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e112:	930c      	str	r3, [sp, #48]	; 0x30
 801e114:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e116:	bf08      	it	eq
 801e118:	4613      	moveq	r3, r2
 801e11a:	ee16 5a90 	vmov	r5, s13
 801e11e:	9309      	str	r3, [sp, #36]	; 0x24
 801e120:	eef0 8a67 	vmov.f32	s17, s15
 801e124:	eeb0 8a47 	vmov.f32	s16, s14
 801e128:	e6a5      	b.n	801de76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e12a:	2900      	cmp	r1, #0
 801e12c:	f43f af0f 	beq.w	801df4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e130:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e134:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e138:	930f      	str	r3, [sp, #60]	; 0x3c
 801e13a:	e708      	b.n	801df4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e13c:	f112 0901 	adds.w	r9, r2, #1
 801e140:	f53f af7d 	bmi.w	801e03e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e144:	454b      	cmp	r3, r9
 801e146:	f6ff af7a 	blt.w	801e03e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e14a:	f11c 0901 	adds.w	r9, ip, #1
 801e14e:	f53f af76 	bmi.w	801e03e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e152:	45ce      	cmp	lr, r9
 801e154:	f6ff af73 	blt.w	801e03e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e158:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e15a:	9202      	str	r2, [sp, #8]
 801e15c:	b21b      	sxth	r3, r3
 801e15e:	fa0f f28e 	sxth.w	r2, lr
 801e162:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e166:	e9cd c003 	strd	ip, r0, [sp, #12]
 801e16a:	9201      	str	r2, [sp, #4]
 801e16c:	9300      	str	r3, [sp, #0]
 801e16e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e170:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e172:	4633      	mov	r3, r6
 801e174:	4639      	mov	r1, r7
 801e176:	f7ff fd6f 	bl	801dc58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801e17a:	e760      	b.n	801e03e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e17c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e17e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e180:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e184:	ea4f 422a 	mov.w	r2, sl, asr #16
 801e188:	1429      	asrs	r1, r5, #16
 801e18a:	fb03 2101 	mla	r1, r3, r1, r2
 801e18e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e190:	440a      	add	r2, r1
 801e192:	5c61      	ldrb	r1, [r4, r1]
 801e194:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801e198:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e19c:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801e1a0:	f1bc 0f00 	cmp.w	ip, #0
 801e1a4:	f000 808c 	beq.w	801e2c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801e1a8:	7857      	ldrb	r7, [r2, #1]
 801e1aa:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801e1ae:	9413      	str	r4, [sp, #76]	; 0x4c
 801e1b0:	b140      	cbz	r0, 801e1c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801e1b2:	18d7      	adds	r7, r2, r3
 801e1b4:	5cd3      	ldrb	r3, [r2, r3]
 801e1b6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e1ba:	9310      	str	r3, [sp, #64]	; 0x40
 801e1bc:	787b      	ldrb	r3, [r7, #1]
 801e1be:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e1c2:	9314      	str	r3, [sp, #80]	; 0x50
 801e1c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e1c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e1c8:	fb1c f200 	smulbb	r2, ip, r0
 801e1cc:	041f      	lsls	r7, r3, #16
 801e1ce:	10d2      	asrs	r2, r2, #3
 801e1d0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e1d4:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801e1d8:	431f      	orrs	r7, r3
 801e1da:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801e1de:	9317      	str	r3, [sp, #92]	; 0x5c
 801e1e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e1e2:	041b      	lsls	r3, r3, #16
 801e1e4:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801e1e8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e1ec:	ea43 030b 	orr.w	r3, r3, fp
 801e1f0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e1f2:	4353      	muls	r3, r2
 801e1f4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e1f8:	fb04 3707 	mla	r7, r4, r7, r3
 801e1fc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e200:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e204:	ea43 0b01 	orr.w	fp, r3, r1
 801e208:	f1c0 0110 	rsb	r1, r0, #16
 801e20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e20e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e210:	eba1 0c0c 	sub.w	ip, r1, ip
 801e214:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e218:	fb0c 770b 	mla	r7, ip, fp, r7
 801e21c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e220:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801e224:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e228:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e22c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e230:	fb02 770c 	mla	r7, r2, ip, r7
 801e234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e236:	0d79      	lsrs	r1, r7, #21
 801e238:	097f      	lsrs	r7, r7, #5
 801e23a:	8812      	ldrh	r2, [r2, #0]
 801e23c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e240:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e244:	430f      	orrs	r7, r1
 801e246:	b2bb      	uxth	r3, r7
 801e248:	1211      	asrs	r1, r2, #8
 801e24a:	1218      	asrs	r0, r3, #8
 801e24c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e250:	fb11 f104 	smulbb	r1, r1, r4
 801e254:	10d7      	asrs	r7, r2, #3
 801e256:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e25a:	00d2      	lsls	r2, r2, #3
 801e25c:	fb00 1009 	mla	r0, r0, r9, r1
 801e260:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e264:	10d9      	asrs	r1, r3, #3
 801e266:	b2d2      	uxtb	r2, r2
 801e268:	00db      	lsls	r3, r3, #3
 801e26a:	fb17 f704 	smulbb	r7, r7, r4
 801e26e:	fb12 f204 	smulbb	r2, r2, r4
 801e272:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e276:	b2db      	uxtb	r3, r3
 801e278:	b280      	uxth	r0, r0
 801e27a:	fb01 7109 	mla	r1, r1, r9, r7
 801e27e:	fb03 2309 	mla	r3, r3, r9, r2
 801e282:	b29b      	uxth	r3, r3
 801e284:	b289      	uxth	r1, r1
 801e286:	1c42      	adds	r2, r0, #1
 801e288:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e28c:	1c4f      	adds	r7, r1, #1
 801e28e:	1c5a      	adds	r2, r3, #1
 801e290:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e294:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801e298:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e29c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e2a0:	0949      	lsrs	r1, r1, #5
 801e2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2a4:	4310      	orrs	r0, r2
 801e2a6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e2aa:	4308      	orrs	r0, r1
 801e2ac:	f823 0b02 	strh.w	r0, [r3], #2
 801e2b0:	930e      	str	r3, [sp, #56]	; 0x38
 801e2b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e2b4:	449a      	add	sl, r3
 801e2b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e2b8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e2bc:	441d      	add	r5, r3
 801e2be:	e6ed      	b.n	801e09c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e2c0:	2800      	cmp	r0, #0
 801e2c2:	f43f af7f 	beq.w	801e1c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801e2c6:	5cd3      	ldrb	r3, [r2, r3]
 801e2c8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e2cc:	9310      	str	r3, [sp, #64]	; 0x40
 801e2ce:	e779      	b.n	801e1c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801e2d0:	b019      	add	sp, #100	; 0x64
 801e2d2:	ecbd 8b08 	vpop	{d8-d11}
 801e2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e2dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801e2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2e0:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801e2e4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801e2e8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801e2ec:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801e2f0:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e2f4:	8808      	ldrh	r0, [r1, #0]
 801e2f6:	fb06 570e 	mla	r7, r6, lr, r5
 801e2fa:	2e00      	cmp	r6, #0
 801e2fc:	eb02 0807 	add.w	r8, r2, r7
 801e300:	db38      	blt.n	801e374 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801e302:	45b1      	cmp	r9, r6
 801e304:	dd36      	ble.n	801e374 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801e306:	2d00      	cmp	r5, #0
 801e308:	db32      	blt.n	801e370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801e30a:	45ae      	cmp	lr, r5
 801e30c:	dd30      	ble.n	801e370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801e30e:	5dd2      	ldrb	r2, [r2, r7]
 801e310:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801e314:	1c6a      	adds	r2, r5, #1
 801e316:	d430      	bmi.n	801e37a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801e318:	4596      	cmp	lr, r2
 801e31a:	dd2e      	ble.n	801e37a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801e31c:	b36c      	cbz	r4, 801e37a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801e31e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e322:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801e326:	3601      	adds	r6, #1
 801e328:	d42b      	bmi.n	801e382 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801e32a:	45b1      	cmp	r9, r6
 801e32c:	dd29      	ble.n	801e382 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801e32e:	f1bc 0f00 	cmp.w	ip, #0
 801e332:	d028      	beq.n	801e386 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801e334:	2d00      	cmp	r5, #0
 801e336:	db22      	blt.n	801e37e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801e338:	45ae      	cmp	lr, r5
 801e33a:	dd20      	ble.n	801e37e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801e33c:	f818 600e 	ldrb.w	r6, [r8, lr]
 801e340:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801e344:	3501      	adds	r5, #1
 801e346:	d407      	bmi.n	801e358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801e348:	45ae      	cmp	lr, r5
 801e34a:	dd05      	ble.n	801e358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801e34c:	b134      	cbz	r4, 801e35c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801e34e:	44c6      	add	lr, r8
 801e350:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801e354:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801e358:	2c0f      	cmp	r4, #15
 801e35a:	d802      	bhi.n	801e362 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801e35c:	f1bc 0f0f 	cmp.w	ip, #15
 801e360:	d914      	bls.n	801e38c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801e362:	4b26      	ldr	r3, [pc, #152]	; (801e3fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801e364:	4a26      	ldr	r2, [pc, #152]	; (801e400 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801e366:	4827      	ldr	r0, [pc, #156]	; (801e404 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801e368:	f240 11ef 	movw	r1, #495	; 0x1ef
 801e36c:	f006 fea2 	bl	80250b4 <__assert_func>
 801e370:	4607      	mov	r7, r0
 801e372:	e7cf      	b.n	801e314 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801e374:	4602      	mov	r2, r0
 801e376:	4607      	mov	r7, r0
 801e378:	e7d5      	b.n	801e326 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801e37a:	4602      	mov	r2, r0
 801e37c:	e7d3      	b.n	801e326 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801e37e:	4606      	mov	r6, r0
 801e380:	e7e0      	b.n	801e344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801e382:	4606      	mov	r6, r0
 801e384:	e7e8      	b.n	801e358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801e386:	2c0f      	cmp	r4, #15
 801e388:	d8eb      	bhi.n	801e362 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801e38a:	4606      	mov	r6, r0
 801e38c:	043d      	lsls	r5, r7, #16
 801e38e:	fb14 f30c 	smulbb	r3, r4, ip
 801e392:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801e396:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801e39a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e39e:	10db      	asrs	r3, r3, #3
 801e3a0:	432f      	orrs	r7, r5
 801e3a2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e3a6:	f1cc 0510 	rsb	r5, ip, #16
 801e3aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e3ae:	1b2d      	subs	r5, r5, r4
 801e3b0:	ea4e 0202 	orr.w	r2, lr, r2
 801e3b4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801e3b8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801e3bc:	4354      	muls	r4, r2
 801e3be:	fb05 4507 	mla	r5, r5, r7, r4
 801e3c2:	0404      	lsls	r4, r0, #16
 801e3c4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e3c8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e3cc:	4320      	orrs	r0, r4
 801e3ce:	fb03 5400 	mla	r4, r3, r0, r5
 801e3d2:	0430      	lsls	r0, r6, #16
 801e3d4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e3d8:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801e3dc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801e3e0:	4330      	orrs	r0, r6
 801e3e2:	fb03 4000 	mla	r0, r3, r0, r4
 801e3e6:	0d43      	lsrs	r3, r0, #21
 801e3e8:	0940      	lsrs	r0, r0, #5
 801e3ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e3ee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e3f2:	4318      	orrs	r0, r3
 801e3f4:	8008      	strh	r0, [r1, #0]
 801e3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e3fa:	bf00      	nop
 801e3fc:	0802abd6 	.word	0x0802abd6
 801e400:	0802b242 	.word	0x0802b242
 801e404:	0802acbf 	.word	0x0802acbf

0801e408 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e40c:	ed2d 8b0a 	vpush	{d8-d12}
 801e410:	b093      	sub	sp, #76	; 0x4c
 801e412:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801e416:	920f      	str	r2, [sp, #60]	; 0x3c
 801e418:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e41a:	9108      	str	r1, [sp, #32]
 801e41c:	9306      	str	r3, [sp, #24]
 801e41e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e422:	9010      	str	r0, [sp, #64]	; 0x40
 801e424:	6850      	ldr	r0, [r2, #4]
 801e426:	6812      	ldr	r2, [r2, #0]
 801e428:	fb00 1303 	mla	r3, r0, r3, r1
 801e42c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801e430:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	9307      	str	r3, [sp, #28]
 801e436:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e438:	685f      	ldr	r7, [r3, #4]
 801e43a:	eeb0 aa40 	vmov.f32	s20, s0
 801e43e:	eef0 9a60 	vmov.f32	s19, s1
 801e442:	eeb0 9a41 	vmov.f32	s18, s2
 801e446:	eeb0 8a62 	vmov.f32	s16, s5
 801e44a:	eef0 8a43 	vmov.f32	s17, s6
 801e44e:	eeb0 ca44 	vmov.f32	s24, s8
 801e452:	eef0 ba64 	vmov.f32	s23, s9
 801e456:	eeb0 ba45 	vmov.f32	s22, s10
 801e45a:	3704      	adds	r7, #4
 801e45c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801e460:	9b08      	ldr	r3, [sp, #32]
 801e462:	2b00      	cmp	r3, #0
 801e464:	dc03      	bgt.n	801e46e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e468:	2b00      	cmp	r3, #0
 801e46a:	f340 81b2 	ble.w	801e7d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801e46e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e470:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e474:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e478:	1e48      	subs	r0, r1, #1
 801e47a:	f102 3cff 	add.w	ip, r2, #4294967295
 801e47e:	9b06      	ldr	r3, [sp, #24]
 801e480:	2b00      	cmp	r3, #0
 801e482:	f340 80a9 	ble.w	801e5d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801e486:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e48a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e48e:	d406      	bmi.n	801e49e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e490:	4586      	cmp	lr, r0
 801e492:	da04      	bge.n	801e49e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e494:	2b00      	cmp	r3, #0
 801e496:	db02      	blt.n	801e49e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e498:	4563      	cmp	r3, ip
 801e49a:	f2c0 809e 	blt.w	801e5da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e49e:	f11e 0e01 	adds.w	lr, lr, #1
 801e4a2:	f100 808f 	bmi.w	801e5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801e4a6:	4571      	cmp	r1, lr
 801e4a8:	f2c0 808c 	blt.w	801e5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801e4ac:	3301      	adds	r3, #1
 801e4ae:	f100 8089 	bmi.w	801e5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801e4b2:	429a      	cmp	r2, r3
 801e4b4:	f2c0 8086 	blt.w	801e5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801e4b8:	f8dd b018 	ldr.w	fp, [sp, #24]
 801e4bc:	46c8      	mov	r8, r9
 801e4be:	f1bb 0f00 	cmp.w	fp, #0
 801e4c2:	f340 80a6 	ble.w	801e612 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801e4c6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801e4c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e4ca:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e4ce:	689b      	ldr	r3, [r3, #8]
 801e4d0:	1422      	asrs	r2, r4, #16
 801e4d2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801e4d6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801e4da:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e4de:	f100 80e3 	bmi.w	801e6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801e4e2:	f103 3aff 	add.w	sl, r3, #4294967295
 801e4e6:	4552      	cmp	r2, sl
 801e4e8:	f280 80de 	bge.w	801e6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801e4ec:	f1bc 0f00 	cmp.w	ip, #0
 801e4f0:	f2c0 80da 	blt.w	801e6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801e4f4:	f10e 3aff 	add.w	sl, lr, #4294967295
 801e4f8:	45d4      	cmp	ip, sl
 801e4fa:	f280 80d5 	bge.w	801e6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801e4fe:	b21b      	sxth	r3, r3
 801e500:	fb0c 2203 	mla	r2, ip, r3, r2
 801e504:	9d07      	ldr	r5, [sp, #28]
 801e506:	eb05 0a02 	add.w	sl, r5, r2
 801e50a:	5caa      	ldrb	r2, [r5, r2]
 801e50c:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801e510:	2800      	cmp	r0, #0
 801e512:	f000 80c0 	beq.w	801e696 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801e516:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e51a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801e51e:	920b      	str	r2, [sp, #44]	; 0x2c
 801e520:	b151      	cbz	r1, 801e538 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801e522:	eb0a 0203 	add.w	r2, sl, r3
 801e526:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801e52a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e52e:	9309      	str	r3, [sp, #36]	; 0x24
 801e530:	7853      	ldrb	r3, [r2, #1]
 801e532:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e536:	930c      	str	r3, [sp, #48]	; 0x30
 801e538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e53a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e53c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e540:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e544:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e548:	ea4c 0c03 	orr.w	ip, ip, r3
 801e54c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e54e:	041b      	lsls	r3, r3, #16
 801e550:	fb10 f201 	smulbb	r2, r0, r1
 801e554:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e558:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e55c:	10d2      	asrs	r2, r2, #3
 801e55e:	432b      	orrs	r3, r5
 801e560:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801e564:	4353      	muls	r3, r2
 801e566:	fb0a 330c 	mla	r3, sl, ip, r3
 801e56a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e56e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e572:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e576:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e57a:	f1c1 0c10 	rsb	ip, r1, #16
 801e57e:	ebac 0c00 	sub.w	ip, ip, r0
 801e582:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e586:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e58c:	0418      	lsls	r0, r3, #16
 801e58e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e592:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e596:	4318      	orrs	r0, r3
 801e598:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e59c:	fb02 c200 	mla	r2, r2, r0, ip
 801e5a0:	0d53      	lsrs	r3, r2, #21
 801e5a2:	0952      	lsrs	r2, r2, #5
 801e5a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e5a8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e5ac:	431a      	orrs	r2, r3
 801e5ae:	f8a8 2000 	strh.w	r2, [r8]
 801e5b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e5b4:	441c      	add	r4, r3
 801e5b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e5b8:	f108 0802 	add.w	r8, r8, #2
 801e5bc:	441e      	add	r6, r3
 801e5be:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e5c2:	e77c      	b.n	801e4be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e5c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e5c6:	441c      	add	r4, r3
 801e5c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e5ca:	441e      	add	r6, r3
 801e5cc:	9b06      	ldr	r3, [sp, #24]
 801e5ce:	3b01      	subs	r3, #1
 801e5d0:	9306      	str	r3, [sp, #24]
 801e5d2:	f109 0902 	add.w	r9, r9, #2
 801e5d6:	e752      	b.n	801e47e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e5d8:	d020      	beq.n	801e61c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e5da:	9b06      	ldr	r3, [sp, #24]
 801e5dc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801e5de:	3b01      	subs	r3, #1
 801e5e0:	fb00 4003 	mla	r0, r0, r3, r4
 801e5e4:	1400      	asrs	r0, r0, #16
 801e5e6:	f53f af67 	bmi.w	801e4b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e5ea:	3901      	subs	r1, #1
 801e5ec:	4288      	cmp	r0, r1
 801e5ee:	f6bf af63 	bge.w	801e4b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e5f2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e5f4:	fb01 6303 	mla	r3, r1, r3, r6
 801e5f8:	141b      	asrs	r3, r3, #16
 801e5fa:	f53f af5d 	bmi.w	801e4b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e5fe:	3a01      	subs	r2, #1
 801e600:	4293      	cmp	r3, r2
 801e602:	f6bf af59 	bge.w	801e4b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e606:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801e60a:	46ca      	mov	sl, r9
 801e60c:	f1b8 0f00 	cmp.w	r8, #0
 801e610:	dc67      	bgt.n	801e6e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801e612:	9b06      	ldr	r3, [sp, #24]
 801e614:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801e618:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801e61c:	9b08      	ldr	r3, [sp, #32]
 801e61e:	2b00      	cmp	r3, #0
 801e620:	f340 80d7 	ble.w	801e7d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801e624:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801e628:	ee79 9aab 	vadd.f32	s19, s19, s23
 801e62c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801e630:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e632:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801e636:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e63a:	eef0 6a48 	vmov.f32	s13, s16
 801e63e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e642:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e646:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e64a:	ee16 4a90 	vmov	r4, s13
 801e64e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e652:	eef0 6a68 	vmov.f32	s13, s17
 801e656:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e65a:	ee18 2a10 	vmov	r2, s16
 801e65e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e662:	fb92 f3f3 	sdiv	r3, r2, r3
 801e666:	ee18 2a90 	vmov	r2, s17
 801e66a:	9329      	str	r3, [sp, #164]	; 0xa4
 801e66c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e66e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e672:	932a      	str	r3, [sp, #168]	; 0xa8
 801e674:	9b08      	ldr	r3, [sp, #32]
 801e676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e678:	3b01      	subs	r3, #1
 801e67a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e67e:	9308      	str	r3, [sp, #32]
 801e680:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e682:	bf08      	it	eq
 801e684:	4613      	moveq	r3, r2
 801e686:	ee16 6a90 	vmov	r6, s13
 801e68a:	9306      	str	r3, [sp, #24]
 801e68c:	eef0 8a67 	vmov.f32	s17, s15
 801e690:	eeb0 8a47 	vmov.f32	s16, s14
 801e694:	e6e4      	b.n	801e460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e696:	2900      	cmp	r1, #0
 801e698:	f43f af4e 	beq.w	801e538 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801e69c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801e6a0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e6a4:	9309      	str	r3, [sp, #36]	; 0x24
 801e6a6:	e747      	b.n	801e538 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801e6a8:	f112 0a01 	adds.w	sl, r2, #1
 801e6ac:	d481      	bmi.n	801e5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e6ae:	4553      	cmp	r3, sl
 801e6b0:	f6ff af7f 	blt.w	801e5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e6b4:	f11c 0a01 	adds.w	sl, ip, #1
 801e6b8:	f53f af7b 	bmi.w	801e5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e6bc:	45d6      	cmp	lr, sl
 801e6be:	f6ff af78 	blt.w	801e5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e6c2:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801e6c6:	b21b      	sxth	r3, r3
 801e6c8:	fa0f f28e 	sxth.w	r2, lr
 801e6cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e6d0:	9201      	str	r2, [sp, #4]
 801e6d2:	9300      	str	r3, [sp, #0]
 801e6d4:	9a07      	ldr	r2, [sp, #28]
 801e6d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e6d8:	463b      	mov	r3, r7
 801e6da:	4641      	mov	r1, r8
 801e6dc:	f7ff fdfe 	bl	801e2dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801e6e0:	e767      	b.n	801e5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e6e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e6e4:	9d07      	ldr	r5, [sp, #28]
 801e6e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e6ea:	1422      	asrs	r2, r4, #16
 801e6ec:	1431      	asrs	r1, r6, #16
 801e6ee:	fb03 2101 	mla	r1, r3, r1, r2
 801e6f2:	9a07      	ldr	r2, [sp, #28]
 801e6f4:	440a      	add	r2, r1
 801e6f6:	5c69      	ldrb	r1, [r5, r1]
 801e6f8:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801e6fc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e700:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801e704:	f1be 0f00 	cmp.w	lr, #0
 801e708:	d05c      	beq.n	801e7c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801e70a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801e70e:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801e712:	950d      	str	r5, [sp, #52]	; 0x34
 801e714:	b150      	cbz	r0, 801e72c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801e716:	eb02 0c03 	add.w	ip, r2, r3
 801e71a:	5cd3      	ldrb	r3, [r2, r3]
 801e71c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e720:	930a      	str	r3, [sp, #40]	; 0x28
 801e722:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e726:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e72a:	930e      	str	r3, [sp, #56]	; 0x38
 801e72c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e72e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e730:	fb1e f200 	smulbb	r2, lr, r0
 801e734:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e738:	10d2      	asrs	r2, r2, #3
 801e73a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e73e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e742:	ea4c 0c03 	orr.w	ip, ip, r3
 801e746:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801e74a:	9311      	str	r3, [sp, #68]	; 0x44
 801e74c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e74e:	041b      	lsls	r3, r3, #16
 801e750:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801e754:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e758:	ea43 030b 	orr.w	r3, r3, fp
 801e75c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e75e:	4353      	muls	r3, r2
 801e760:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e764:	fb05 3c0c 	mla	ip, r5, ip, r3
 801e768:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e76c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e770:	ea43 0b01 	orr.w	fp, r3, r1
 801e774:	f1c0 0110 	rsb	r1, r0, #16
 801e778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e77a:	eba1 0e0e 	sub.w	lr, r1, lr
 801e77e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801e782:	fb0e cc0b 	mla	ip, lr, fp, ip
 801e786:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801e78a:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801e78e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e792:	ea4b 0e0e 	orr.w	lr, fp, lr
 801e796:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e79a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e79e:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801e7a2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e7a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e7aa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e7ae:	ea43 0c0c 	orr.w	ip, r3, ip
 801e7b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e7b4:	f82a cb02 	strh.w	ip, [sl], #2
 801e7b8:	441c      	add	r4, r3
 801e7ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e7bc:	f108 38ff 	add.w	r8, r8, #4294967295
 801e7c0:	441e      	add	r6, r3
 801e7c2:	e723      	b.n	801e60c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e7c4:	2800      	cmp	r0, #0
 801e7c6:	d0b1      	beq.n	801e72c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801e7c8:	5cd3      	ldrb	r3, [r2, r3]
 801e7ca:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e7ce:	930a      	str	r3, [sp, #40]	; 0x28
 801e7d0:	e7ac      	b.n	801e72c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801e7d2:	b013      	add	sp, #76	; 0x4c
 801e7d4:	ecbd 8b0a 	vpop	{d8-d12}
 801e7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e0:	468b      	mov	fp, r1
 801e7e2:	8809      	ldrh	r1, [r1, #0]
 801e7e4:	b089      	sub	sp, #36	; 0x24
 801e7e6:	10cd      	asrs	r5, r1, #3
 801e7e8:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801e7ec:	ea4f 2921 	mov.w	r9, r1, asr #8
 801e7f0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e7f4:	00c9      	lsls	r1, r1, #3
 801e7f6:	9500      	str	r5, [sp, #0]
 801e7f8:	b2c9      	uxtb	r1, r1
 801e7fa:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801e7fe:	9101      	str	r1, [sp, #4]
 801e800:	9900      	ldr	r1, [sp, #0]
 801e802:	9202      	str	r2, [sp, #8]
 801e804:	fb04 650e 	mla	r5, r4, lr, r6
 801e808:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801e80c:	eb02 0805 	add.w	r8, r2, r5
 801e810:	0209      	lsls	r1, r1, #8
 801e812:	9a01      	ldr	r2, [sp, #4]
 801e814:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801e818:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e81c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801e820:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801e824:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801e828:	4311      	orrs	r1, r2
 801e82a:	2c00      	cmp	r4, #0
 801e82c:	9107      	str	r1, [sp, #28]
 801e82e:	db43      	blt.n	801e8b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801e830:	45a2      	cmp	sl, r4
 801e832:	dd41      	ble.n	801e8b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801e834:	2e00      	cmp	r6, #0
 801e836:	db3d      	blt.n	801e8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801e838:	45b6      	cmp	lr, r6
 801e83a:	dd3b      	ble.n	801e8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801e83c:	9a02      	ldr	r2, [sp, #8]
 801e83e:	5d55      	ldrb	r5, [r2, r5]
 801e840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e844:	441d      	add	r5, r3
 801e846:	1c72      	adds	r2, r6, #1
 801e848:	d439      	bmi.n	801e8be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801e84a:	4596      	cmp	lr, r2
 801e84c:	dd37      	ble.n	801e8be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801e84e:	2f00      	cmp	r7, #0
 801e850:	d035      	beq.n	801e8be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801e852:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e856:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e85a:	4419      	add	r1, r3
 801e85c:	3401      	adds	r4, #1
 801e85e:	d432      	bmi.n	801e8c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801e860:	45a2      	cmp	sl, r4
 801e862:	dd30      	ble.n	801e8c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801e864:	b378      	cbz	r0, 801e8c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801e866:	2e00      	cmp	r6, #0
 801e868:	db2b      	blt.n	801e8c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801e86a:	45b6      	cmp	lr, r6
 801e86c:	dd29      	ble.n	801e8c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801e86e:	f818 400e 	ldrb.w	r4, [r8, lr]
 801e872:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e876:	441c      	add	r4, r3
 801e878:	3601      	adds	r6, #1
 801e87a:	d427      	bmi.n	801e8cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801e87c:	45b6      	cmp	lr, r6
 801e87e:	dd25      	ble.n	801e8cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801e880:	b327      	cbz	r7, 801e8cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801e882:	44c6      	add	lr, r8
 801e884:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e888:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e88c:	4413      	add	r3, r2
 801e88e:	782a      	ldrb	r2, [r5, #0]
 801e890:	9202      	str	r2, [sp, #8]
 801e892:	780a      	ldrb	r2, [r1, #0]
 801e894:	9203      	str	r2, [sp, #12]
 801e896:	7822      	ldrb	r2, [r4, #0]
 801e898:	9204      	str	r2, [sp, #16]
 801e89a:	2f0f      	cmp	r7, #15
 801e89c:	781a      	ldrb	r2, [r3, #0]
 801e89e:	9205      	str	r2, [sp, #20]
 801e8a0:	d801      	bhi.n	801e8a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 801e8a2:	280f      	cmp	r0, #15
 801e8a4:	d914      	bls.n	801e8d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 801e8a6:	4b3f      	ldr	r3, [pc, #252]	; (801e9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 801e8a8:	4a3f      	ldr	r2, [pc, #252]	; (801e9a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801e8aa:	4840      	ldr	r0, [pc, #256]	; (801e9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801e8ac:	f240 210d 	movw	r1, #525	; 0x20d
 801e8b0:	f006 fc00 	bl	80250b4 <__assert_func>
 801e8b4:	ad07      	add	r5, sp, #28
 801e8b6:	e7c6      	b.n	801e846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 801e8b8:	a907      	add	r1, sp, #28
 801e8ba:	460d      	mov	r5, r1
 801e8bc:	e7ce      	b.n	801e85c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801e8be:	a907      	add	r1, sp, #28
 801e8c0:	e7cc      	b.n	801e85c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801e8c2:	ac07      	add	r4, sp, #28
 801e8c4:	e7d8      	b.n	801e878 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 801e8c6:	ab07      	add	r3, sp, #28
 801e8c8:	461c      	mov	r4, r3
 801e8ca:	e7e0      	b.n	801e88e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801e8cc:	ab07      	add	r3, sp, #28
 801e8ce:	e7de      	b.n	801e88e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801e8d0:	b2ba      	uxth	r2, r7
 801e8d2:	b280      	uxth	r0, r0
 801e8d4:	fb02 fa00 	mul.w	sl, r2, r0
 801e8d8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801e8dc:	0112      	lsls	r2, r2, #4
 801e8de:	b280      	uxth	r0, r0
 801e8e0:	f891 8002 	ldrb.w	r8, [r1, #2]
 801e8e4:	7849      	ldrb	r1, [r1, #1]
 801e8e6:	78ae      	ldrb	r6, [r5, #2]
 801e8e8:	786d      	ldrb	r5, [r5, #1]
 801e8ea:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e8ee:	eba2 020a 	sub.w	r2, r2, sl
 801e8f2:	b292      	uxth	r2, r2
 801e8f4:	ebae 0e00 	sub.w	lr, lr, r0
 801e8f8:	fa1f fe8e 	uxth.w	lr, lr
 801e8fc:	4351      	muls	r1, r2
 801e8fe:	fb02 f808 	mul.w	r8, r2, r8
 801e902:	fb0e 8806 	mla	r8, lr, r6, r8
 801e906:	fb0e 1505 	mla	r5, lr, r5, r1
 801e90a:	78a6      	ldrb	r6, [r4, #2]
 801e90c:	7861      	ldrb	r1, [r4, #1]
 801e90e:	fa1f f78c 	uxth.w	r7, ip
 801e912:	fb00 8806 	mla	r8, r0, r6, r8
 801e916:	fb00 5501 	mla	r5, r0, r1, r5
 801e91a:	789e      	ldrb	r6, [r3, #2]
 801e91c:	7859      	ldrb	r1, [r3, #1]
 801e91e:	9b00      	ldr	r3, [sp, #0]
 801e920:	ea6f 0c0c 	mvn.w	ip, ip
 801e924:	fa5f fc8c 	uxtb.w	ip, ip
 801e928:	fb0a 5101 	mla	r1, sl, r1, r5
 801e92c:	fb13 f50c 	smulbb	r5, r3, ip
 801e930:	9b03      	ldr	r3, [sp, #12]
 801e932:	435a      	muls	r2, r3
 801e934:	9b02      	ldr	r3, [sp, #8]
 801e936:	fb0e 2203 	mla	r2, lr, r3, r2
 801e93a:	9b04      	ldr	r3, [sp, #16]
 801e93c:	fb00 2003 	mla	r0, r0, r3, r2
 801e940:	9b05      	ldr	r3, [sp, #20]
 801e942:	fb0a 8606 	mla	r6, sl, r6, r8
 801e946:	fb0a 0a03 	mla	sl, sl, r3, r0
 801e94a:	9b01      	ldr	r3, [sp, #4]
 801e94c:	fb19 f90c 	smulbb	r9, r9, ip
 801e950:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e954:	fb13 fc0c 	smulbb	ip, r3, ip
 801e958:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e95c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e960:	fb06 9607 	mla	r6, r6, r7, r9
 801e964:	fb01 5107 	mla	r1, r1, r7, r5
 801e968:	fb0a c707 	mla	r7, sl, r7, ip
 801e96c:	b2b6      	uxth	r6, r6
 801e96e:	b289      	uxth	r1, r1
 801e970:	b2bf      	uxth	r7, r7
 801e972:	f106 0901 	add.w	r9, r6, #1
 801e976:	f107 0c01 	add.w	ip, r7, #1
 801e97a:	1c4d      	adds	r5, r1, #1
 801e97c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801e980:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e984:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801e988:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e98c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e990:	0949      	lsrs	r1, r1, #5
 801e992:	433e      	orrs	r6, r7
 801e994:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e998:	430e      	orrs	r6, r1
 801e99a:	f8ab 6000 	strh.w	r6, [fp]
 801e99e:	b009      	add	sp, #36	; 0x24
 801e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9a4:	0802abd6 	.word	0x0802abd6
 801e9a8:	0802b199 	.word	0x0802b199
 801e9ac:	0802acbf 	.word	0x0802acbf

0801e9b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9b4:	ed2d 8b08 	vpush	{d8-d11}
 801e9b8:	b095      	sub	sp, #84	; 0x54
 801e9ba:	eeb0 aa40 	vmov.f32	s20, s0
 801e9be:	9212      	str	r2, [sp, #72]	; 0x48
 801e9c0:	9309      	str	r3, [sp, #36]	; 0x24
 801e9c2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e9c4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801e9c8:	930f      	str	r3, [sp, #60]	; 0x3c
 801e9ca:	910e      	str	r1, [sp, #56]	; 0x38
 801e9cc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e9d0:	9013      	str	r0, [sp, #76]	; 0x4c
 801e9d2:	6850      	ldr	r0, [r2, #4]
 801e9d4:	6812      	ldr	r2, [r2, #0]
 801e9d6:	fb00 1303 	mla	r3, r0, r3, r1
 801e9da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e9de:	930a      	str	r3, [sp, #40]	; 0x28
 801e9e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	930d      	str	r3, [sp, #52]	; 0x34
 801e9e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e9e8:	685c      	ldr	r4, [r3, #4]
 801e9ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9ec:	43db      	mvns	r3, r3
 801e9ee:	b2db      	uxtb	r3, r3
 801e9f0:	eef0 9a60 	vmov.f32	s19, s1
 801e9f4:	eeb0 9a41 	vmov.f32	s18, s2
 801e9f8:	eeb0 8a62 	vmov.f32	s16, s5
 801e9fc:	eef0 8a43 	vmov.f32	s17, s6
 801ea00:	eef0 ba44 	vmov.f32	s23, s8
 801ea04:	eeb0 ba64 	vmov.f32	s22, s9
 801ea08:	eef0 aa45 	vmov.f32	s21, s10
 801ea0c:	3404      	adds	r4, #4
 801ea0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	dc03      	bgt.n	801ea1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	f340 8258 	ble.w	801eece <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801ea1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ea20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ea24:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ea28:	1e48      	subs	r0, r1, #1
 801ea2a:	1e55      	subs	r5, r2, #1
 801ea2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	f340 80fc 	ble.w	801ec2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ea34:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801ea36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ea38:	1436      	asrs	r6, r6, #16
 801ea3a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ea3e:	d406      	bmi.n	801ea4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea40:	4286      	cmp	r6, r0
 801ea42:	da04      	bge.n	801ea4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	db02      	blt.n	801ea4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea48:	42ab      	cmp	r3, r5
 801ea4a:	f2c0 80f0 	blt.w	801ec2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ea4e:	3601      	adds	r6, #1
 801ea50:	f100 80dd 	bmi.w	801ec0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ea54:	42b1      	cmp	r1, r6
 801ea56:	f2c0 80da 	blt.w	801ec0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ea5a:	3301      	adds	r3, #1
 801ea5c:	f100 80d7 	bmi.w	801ec0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ea60:	429a      	cmp	r2, r3
 801ea62:	f2c0 80d4 	blt.w	801ec0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ea66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea68:	9311      	str	r3, [sp, #68]	; 0x44
 801ea6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea6c:	930c      	str	r3, [sp, #48]	; 0x30
 801ea6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	f340 80fd 	ble.w	801ec70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 801ea76:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801ea78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ea7a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ea7c:	68c6      	ldr	r6, [r0, #12]
 801ea7e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ea80:	141d      	asrs	r5, r3, #16
 801ea82:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ea86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ea88:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801ea8a:	1400      	asrs	r0, r0, #16
 801ea8c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ea90:	6892      	ldr	r2, [r2, #8]
 801ea92:	f100 8141 	bmi.w	801ed18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801ea96:	1e57      	subs	r7, r2, #1
 801ea98:	42b8      	cmp	r0, r7
 801ea9a:	f280 813d 	bge.w	801ed18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801ea9e:	2d00      	cmp	r5, #0
 801eaa0:	f2c0 813a 	blt.w	801ed18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801eaa4:	1e77      	subs	r7, r6, #1
 801eaa6:	42bd      	cmp	r5, r7
 801eaa8:	f280 8136 	bge.w	801ed18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801eaac:	b212      	sxth	r2, r2
 801eaae:	fb05 0002 	mla	r0, r5, r2, r0
 801eab2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801eab4:	f815 a000 	ldrb.w	sl, [r5, r0]
 801eab8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801eabc:	182e      	adds	r6, r5, r0
 801eabe:	eb04 050a 	add.w	r5, r4, sl
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	f000 811a 	beq.w	801ecfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801eac8:	f896 c001 	ldrb.w	ip, [r6, #1]
 801eacc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ead0:	44a4      	add	ip, r4
 801ead2:	2900      	cmp	r1, #0
 801ead4:	f000 811a 	beq.w	801ed0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801ead8:	18b0      	adds	r0, r6, r2
 801eada:	5cb2      	ldrb	r2, [r6, r2]
 801eadc:	7840      	ldrb	r0, [r0, #1]
 801eade:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eae2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eae6:	4422      	add	r2, r4
 801eae8:	4420      	add	r0, r4
 801eaea:	b29b      	uxth	r3, r3
 801eaec:	b289      	uxth	r1, r1
 801eaee:	fb03 f901 	mul.w	r9, r3, r1
 801eaf2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801eaf6:	011b      	lsls	r3, r3, #4
 801eaf8:	b289      	uxth	r1, r1
 801eafa:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801eafe:	f895 b002 	ldrb.w	fp, [r5, #2]
 801eb02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801eb04:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801eb08:	f8b6 e000 	ldrh.w	lr, [r6]
 801eb0c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801eb10:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801eb14:	eba3 0309 	sub.w	r3, r3, r9
 801eb18:	b29b      	uxth	r3, r3
 801eb1a:	eba8 0801 	sub.w	r8, r8, r1
 801eb1e:	fa1f f888 	uxth.w	r8, r8
 801eb22:	435f      	muls	r7, r3
 801eb24:	fb08 770b 	mla	r7, r8, fp, r7
 801eb28:	f892 b002 	ldrb.w	fp, [r2, #2]
 801eb2c:	9310      	str	r3, [sp, #64]	; 0x40
 801eb2e:	fb01 770b 	mla	r7, r1, fp, r7
 801eb32:	f890 b002 	ldrb.w	fp, [r0, #2]
 801eb36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb38:	fb09 770b 	mla	r7, r9, fp, r7
 801eb3c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801eb40:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801eb44:	fb1b fb03 	smulbb	fp, fp, r3
 801eb48:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801eb4c:	fb07 b706 	mla	r7, r7, r6, fp
 801eb50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb52:	f895 b001 	ldrb.w	fp, [r5, #1]
 801eb56:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801eb5a:	f89c c000 	ldrb.w	ip, [ip]
 801eb5e:	435d      	muls	r5, r3
 801eb60:	fb08 550b 	mla	r5, r8, fp, r5
 801eb64:	f892 b001 	ldrb.w	fp, [r2, #1]
 801eb68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb6a:	fb01 550b 	mla	r5, r1, fp, r5
 801eb6e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801eb72:	fb09 550b 	mla	r5, r9, fp, r5
 801eb76:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801eb7a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801eb7e:	fb1b fb03 	smulbb	fp, fp, r3
 801eb82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb84:	fb03 f30c 	mul.w	r3, r3, ip
 801eb88:	f892 c000 	ldrb.w	ip, [r2]
 801eb8c:	fb08 330a 	mla	r3, r8, sl, r3
 801eb90:	fb01 330c 	mla	r3, r1, ip, r3
 801eb94:	f890 c000 	ldrb.w	ip, [r0]
 801eb98:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eb9c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801eba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eba2:	fa5f fe8e 	uxtb.w	lr, lr
 801eba6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ebaa:	fb1e fe03 	smulbb	lr, lr, r3
 801ebae:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801ebb2:	fb05 b506 	mla	r5, r5, r6, fp
 801ebb6:	fb0c ee06 	mla	lr, ip, r6, lr
 801ebba:	b2bf      	uxth	r7, r7
 801ebbc:	b2ad      	uxth	r5, r5
 801ebbe:	fa1f fe8e 	uxth.w	lr, lr
 801ebc2:	1c7a      	adds	r2, r7, #1
 801ebc4:	f10e 0c01 	add.w	ip, lr, #1
 801ebc8:	f105 0b01 	add.w	fp, r5, #1
 801ebcc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ebd0:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 801ebd4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801ebd8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ebdc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801ebe0:	096d      	lsrs	r5, r5, #5
 801ebe2:	ea47 070e 	orr.w	r7, r7, lr
 801ebe6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ebea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ebec:	433d      	orrs	r5, r7
 801ebee:	801d      	strh	r5, [r3, #0]
 801ebf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ebf2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ebf4:	3302      	adds	r3, #2
 801ebf6:	930c      	str	r3, [sp, #48]	; 0x30
 801ebf8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ebfa:	4413      	add	r3, r2
 801ebfc:	9327      	str	r3, [sp, #156]	; 0x9c
 801ebfe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ec00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec02:	4413      	add	r3, r2
 801ec04:	9328      	str	r3, [sp, #160]	; 0xa0
 801ec06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ec08:	3b01      	subs	r3, #1
 801ec0a:	9311      	str	r3, [sp, #68]	; 0x44
 801ec0c:	e72f      	b.n	801ea6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801ec0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ec10:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801ec12:	4433      	add	r3, r6
 801ec14:	9327      	str	r3, [sp, #156]	; 0x9c
 801ec16:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 801ec18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec1a:	4433      	add	r3, r6
 801ec1c:	9328      	str	r3, [sp, #160]	; 0xa0
 801ec1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec20:	3b01      	subs	r3, #1
 801ec22:	9309      	str	r3, [sp, #36]	; 0x24
 801ec24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec26:	3302      	adds	r3, #2
 801ec28:	930a      	str	r3, [sp, #40]	; 0x28
 801ec2a:	e6ff      	b.n	801ea2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ec2c:	d027      	beq.n	801ec7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 801ec2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec30:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801ec32:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801ec34:	3b01      	subs	r3, #1
 801ec36:	fb00 5003 	mla	r0, r0, r3, r5
 801ec3a:	1400      	asrs	r0, r0, #16
 801ec3c:	f53f af13 	bmi.w	801ea66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ec40:	3901      	subs	r1, #1
 801ec42:	4288      	cmp	r0, r1
 801ec44:	f6bf af0f 	bge.w	801ea66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ec48:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801ec4a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801ec4c:	fb01 0303 	mla	r3, r1, r3, r0
 801ec50:	141b      	asrs	r3, r3, #16
 801ec52:	f53f af08 	bmi.w	801ea66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ec56:	3a01      	subs	r2, #1
 801ec58:	4293      	cmp	r3, r2
 801ec5a:	f6bf af04 	bge.w	801ea66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ec5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec60:	9311      	str	r3, [sp, #68]	; 0x44
 801ec62:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801ec66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec68:	930c      	str	r3, [sp, #48]	; 0x30
 801ec6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	dc70      	bgt.n	801ed52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801ec70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ec7c:	930a      	str	r3, [sp, #40]	; 0x28
 801ec7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	f340 8124 	ble.w	801eece <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801ec86:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ec8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ec8e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ec92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ec94:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ec98:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ec9c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801eca0:	eef0 6a48 	vmov.f32	s13, s16
 801eca4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801eca8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ecac:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ecb0:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801ecb4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ecb8:	eef0 6a68 	vmov.f32	s13, s17
 801ecbc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ecc0:	ee18 2a10 	vmov	r2, s16
 801ecc4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ecc8:	fb92 f3f3 	sdiv	r3, r2, r3
 801eccc:	ee18 2a90 	vmov	r2, s17
 801ecd0:	9329      	str	r3, [sp, #164]	; 0xa4
 801ecd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ecd4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecd8:	932a      	str	r3, [sp, #168]	; 0xa8
 801ecda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ecde:	3b01      	subs	r3, #1
 801ece0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ece4:	930e      	str	r3, [sp, #56]	; 0x38
 801ece6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ece8:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801ecec:	bf08      	it	eq
 801ecee:	4613      	moveq	r3, r2
 801ecf0:	9309      	str	r3, [sp, #36]	; 0x24
 801ecf2:	eef0 8a67 	vmov.f32	s17, s15
 801ecf6:	eeb0 8a47 	vmov.f32	s16, s14
 801ecfa:	e689      	b.n	801ea10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ecfc:	b149      	cbz	r1, 801ed12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801ecfe:	5cb2      	ldrb	r2, [r6, r2]
 801ed00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed04:	4422      	add	r2, r4
 801ed06:	4628      	mov	r0, r5
 801ed08:	46ac      	mov	ip, r5
 801ed0a:	e6ee      	b.n	801eaea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ed0c:	4628      	mov	r0, r5
 801ed0e:	462a      	mov	r2, r5
 801ed10:	e6eb      	b.n	801eaea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ed12:	4628      	mov	r0, r5
 801ed14:	462a      	mov	r2, r5
 801ed16:	e7f7      	b.n	801ed08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801ed18:	1c47      	adds	r7, r0, #1
 801ed1a:	f53f af69 	bmi.w	801ebf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ed1e:	42ba      	cmp	r2, r7
 801ed20:	f6ff af66 	blt.w	801ebf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ed24:	1c6f      	adds	r7, r5, #1
 801ed26:	f53f af63 	bmi.w	801ebf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ed2a:	42be      	cmp	r6, r7
 801ed2c:	f6ff af60 	blt.w	801ebf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ed30:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ed32:	9002      	str	r0, [sp, #8]
 801ed34:	b236      	sxth	r6, r6
 801ed36:	b212      	sxth	r2, r2
 801ed38:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801ed3c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801ed40:	9200      	str	r2, [sp, #0]
 801ed42:	9601      	str	r6, [sp, #4]
 801ed44:	4623      	mov	r3, r4
 801ed46:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801ed4a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ed4c:	f7ff fd46 	bl	801e7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801ed50:	e74e      	b.n	801ebf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ed52:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ed54:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801ed56:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801ed58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ed5a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ed5e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801ed60:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ed64:	142d      	asrs	r5, r5, #16
 801ed66:	1400      	asrs	r0, r0, #16
 801ed68:	fb02 5000 	mla	r0, r2, r0, r5
 801ed6c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ed6e:	f815 9000 	ldrb.w	r9, [r5, r0]
 801ed72:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ed76:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ed7a:	182e      	adds	r6, r5, r0
 801ed7c:	eb04 0509 	add.w	r5, r4, r9
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	f000 8096 	beq.w	801eeb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 801ed86:	7877      	ldrb	r7, [r6, #1]
 801ed88:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ed8c:	4427      	add	r7, r4
 801ed8e:	2900      	cmp	r1, #0
 801ed90:	f000 8097 	beq.w	801eec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801ed94:	18b0      	adds	r0, r6, r2
 801ed96:	5cb2      	ldrb	r2, [r6, r2]
 801ed98:	7840      	ldrb	r0, [r0, #1]
 801ed9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eda2:	4422      	add	r2, r4
 801eda4:	4420      	add	r0, r4
 801eda6:	b29b      	uxth	r3, r3
 801eda8:	b289      	uxth	r1, r1
 801edaa:	fb03 f801 	mul.w	r8, r3, r1
 801edae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801edb0:	f895 b002 	ldrb.w	fp, [r5, #2]
 801edb4:	f8b6 c000 	ldrh.w	ip, [r6]
 801edb8:	78be      	ldrb	r6, [r7, #2]
 801edba:	f814 9009 	ldrb.w	r9, [r4, r9]
 801edbe:	011b      	lsls	r3, r3, #4
 801edc0:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801edc4:	b289      	uxth	r1, r1
 801edc6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801edca:	eba3 0308 	sub.w	r3, r3, r8
 801edce:	b29b      	uxth	r3, r3
 801edd0:	ebae 0e01 	sub.w	lr, lr, r1
 801edd4:	fa1f fe8e 	uxth.w	lr, lr
 801edd8:	435e      	muls	r6, r3
 801edda:	fb0e 660b 	mla	r6, lr, fp, r6
 801edde:	f892 b002 	ldrb.w	fp, [r2, #2]
 801ede2:	9310      	str	r3, [sp, #64]	; 0x40
 801ede4:	fb01 660b 	mla	r6, r1, fp, r6
 801ede8:	f890 b002 	ldrb.w	fp, [r0, #2]
 801edec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801edee:	fb08 660b 	mla	r6, r8, fp, r6
 801edf2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801edf6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801edfa:	fb1b fb03 	smulbb	fp, fp, r3
 801edfe:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ee02:	fb06 b60a 	mla	r6, r6, sl, fp
 801ee06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee08:	f895 b001 	ldrb.w	fp, [r5, #1]
 801ee0c:	787d      	ldrb	r5, [r7, #1]
 801ee0e:	783f      	ldrb	r7, [r7, #0]
 801ee10:	435d      	muls	r5, r3
 801ee12:	fb0e 550b 	mla	r5, lr, fp, r5
 801ee16:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ee1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee1c:	fb01 550b 	mla	r5, r1, fp, r5
 801ee20:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ee24:	fb08 550b 	mla	r5, r8, fp, r5
 801ee28:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801ee2c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ee30:	fb1b fb03 	smulbb	fp, fp, r3
 801ee34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee36:	437b      	muls	r3, r7
 801ee38:	7817      	ldrb	r7, [r2, #0]
 801ee3a:	fb0e 3309 	mla	r3, lr, r9, r3
 801ee3e:	fb01 3307 	mla	r3, r1, r7, r3
 801ee42:	7807      	ldrb	r7, [r0, #0]
 801ee44:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ee48:	fb08 3707 	mla	r7, r8, r7, r3
 801ee4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee4e:	fa5f fc8c 	uxtb.w	ip, ip
 801ee52:	fb1c fc03 	smulbb	ip, ip, r3
 801ee56:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801ee5a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ee5e:	fb05 b50a 	mla	r5, r5, sl, fp
 801ee62:	fb07 c70a 	mla	r7, r7, sl, ip
 801ee66:	b2b6      	uxth	r6, r6
 801ee68:	b2ad      	uxth	r5, r5
 801ee6a:	b2bf      	uxth	r7, r7
 801ee6c:	1c73      	adds	r3, r6, #1
 801ee6e:	1c7a      	adds	r2, r7, #1
 801ee70:	f105 0b01 	add.w	fp, r5, #1
 801ee74:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ee78:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801ee7c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801ee80:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ee84:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ee88:	096d      	lsrs	r5, r5, #5
 801ee8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee8c:	4316      	orrs	r6, r2
 801ee8e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ee92:	432e      	orrs	r6, r5
 801ee94:	f823 6b02 	strh.w	r6, [r3], #2
 801ee98:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ee9a:	930c      	str	r3, [sp, #48]	; 0x30
 801ee9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ee9e:	4413      	add	r3, r2
 801eea0:	9327      	str	r3, [sp, #156]	; 0x9c
 801eea2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eea4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eea6:	4413      	add	r3, r2
 801eea8:	9328      	str	r3, [sp, #160]	; 0xa0
 801eeaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eeac:	3b01      	subs	r3, #1
 801eeae:	9311      	str	r3, [sp, #68]	; 0x44
 801eeb0:	e6db      	b.n	801ec6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801eeb2:	b149      	cbz	r1, 801eec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801eeb4:	5cb2      	ldrb	r2, [r6, r2]
 801eeb6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eeba:	4422      	add	r2, r4
 801eebc:	4628      	mov	r0, r5
 801eebe:	462f      	mov	r7, r5
 801eec0:	e771      	b.n	801eda6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 801eec2:	4628      	mov	r0, r5
 801eec4:	462a      	mov	r2, r5
 801eec6:	e76e      	b.n	801eda6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 801eec8:	4628      	mov	r0, r5
 801eeca:	462a      	mov	r2, r5
 801eecc:	e7f7      	b.n	801eebe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 801eece:	b015      	add	sp, #84	; 0x54
 801eed0:	ecbd 8b08 	vpop	{d8-d11}
 801eed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eedc:	880e      	ldrh	r6, [r1, #0]
 801eede:	b085      	sub	sp, #20
 801eee0:	0230      	lsls	r0, r6, #8
 801eee2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801eee6:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801eeea:	0170      	lsls	r0, r6, #5
 801eeec:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801eef0:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801eef4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801eef8:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801eefc:	00f6      	lsls	r6, r6, #3
 801eefe:	ea4b 0000 	orr.w	r0, fp, r0
 801ef02:	b2f6      	uxtb	r6, r6
 801ef04:	4691      	mov	r9, r2
 801ef06:	fb05 7a0c 	mla	sl, r5, ip, r7
 801ef0a:	4306      	orrs	r6, r0
 801ef0c:	2d00      	cmp	r5, #0
 801ef0e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801ef12:	9603      	str	r6, [sp, #12]
 801ef14:	eb09 0e0a 	add.w	lr, r9, sl
 801ef18:	db42      	blt.n	801efa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801ef1a:	45a8      	cmp	r8, r5
 801ef1c:	dd40      	ble.n	801efa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801ef1e:	2f00      	cmp	r7, #0
 801ef20:	db3c      	blt.n	801ef9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801ef22:	45bc      	cmp	ip, r7
 801ef24:	dd3a      	ble.n	801ef9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801ef26:	f819 600a 	ldrb.w	r6, [r9, sl]
 801ef2a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef2e:	441e      	add	r6, r3
 801ef30:	1c78      	adds	r0, r7, #1
 801ef32:	d438      	bmi.n	801efa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801ef34:	4584      	cmp	ip, r0
 801ef36:	dd36      	ble.n	801efa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801ef38:	b3aa      	cbz	r2, 801efa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801ef3a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801ef3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ef42:	4418      	add	r0, r3
 801ef44:	3501      	adds	r5, #1
 801ef46:	d432      	bmi.n	801efae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801ef48:	45a8      	cmp	r8, r5
 801ef4a:	dd30      	ble.n	801efae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801ef4c:	b37c      	cbz	r4, 801efae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801ef4e:	2f00      	cmp	r7, #0
 801ef50:	db2b      	blt.n	801efaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801ef52:	45bc      	cmp	ip, r7
 801ef54:	dd29      	ble.n	801efaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801ef56:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801ef5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef5e:	441d      	add	r5, r3
 801ef60:	3701      	adds	r7, #1
 801ef62:	d427      	bmi.n	801efb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801ef64:	45bc      	cmp	ip, r7
 801ef66:	dd25      	ble.n	801efb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801ef68:	b322      	cbz	r2, 801efb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801ef6a:	44f4      	add	ip, lr
 801ef6c:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801ef70:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ef74:	443b      	add	r3, r7
 801ef76:	781f      	ldrb	r7, [r3, #0]
 801ef78:	f896 a000 	ldrb.w	sl, [r6]
 801ef7c:	f890 b000 	ldrb.w	fp, [r0]
 801ef80:	f895 9000 	ldrb.w	r9, [r5]
 801ef84:	9700      	str	r7, [sp, #0]
 801ef86:	2a0f      	cmp	r2, #15
 801ef88:	d801      	bhi.n	801ef8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 801ef8a:	2c0f      	cmp	r4, #15
 801ef8c:	d914      	bls.n	801efb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 801ef8e:	4b2c      	ldr	r3, [pc, #176]	; (801f040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 801ef90:	4a2c      	ldr	r2, [pc, #176]	; (801f044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801ef92:	482d      	ldr	r0, [pc, #180]	; (801f048 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801ef94:	f240 210d 	movw	r1, #525	; 0x20d
 801ef98:	f006 f88c 	bl	80250b4 <__assert_func>
 801ef9c:	ae03      	add	r6, sp, #12
 801ef9e:	e7c7      	b.n	801ef30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 801efa0:	a803      	add	r0, sp, #12
 801efa2:	4606      	mov	r6, r0
 801efa4:	e7ce      	b.n	801ef44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801efa6:	a803      	add	r0, sp, #12
 801efa8:	e7cc      	b.n	801ef44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801efaa:	ad03      	add	r5, sp, #12
 801efac:	e7d8      	b.n	801ef60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 801efae:	ab03      	add	r3, sp, #12
 801efb0:	461d      	mov	r5, r3
 801efb2:	e7e0      	b.n	801ef76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801efb4:	ab03      	add	r3, sp, #12
 801efb6:	e7de      	b.n	801ef76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801efb8:	b292      	uxth	r2, r2
 801efba:	b2a4      	uxth	r4, r4
 801efbc:	fb02 f804 	mul.w	r8, r2, r4
 801efc0:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801efc4:	0112      	lsls	r2, r2, #4
 801efc6:	b2a4      	uxth	r4, r4
 801efc8:	f890 e002 	ldrb.w	lr, [r0, #2]
 801efcc:	78b7      	ldrb	r7, [r6, #2]
 801efce:	7840      	ldrb	r0, [r0, #1]
 801efd0:	7876      	ldrb	r6, [r6, #1]
 801efd2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801efd6:	eba2 0208 	sub.w	r2, r2, r8
 801efda:	b292      	uxth	r2, r2
 801efdc:	ebac 0c04 	sub.w	ip, ip, r4
 801efe0:	fa1f fc8c 	uxth.w	ip, ip
 801efe4:	fb02 fe0e 	mul.w	lr, r2, lr
 801efe8:	fb0c ee07 	mla	lr, ip, r7, lr
 801efec:	78af      	ldrb	r7, [r5, #2]
 801efee:	fb04 ee07 	mla	lr, r4, r7, lr
 801eff2:	789f      	ldrb	r7, [r3, #2]
 801eff4:	785b      	ldrb	r3, [r3, #1]
 801eff6:	fb08 e707 	mla	r7, r8, r7, lr
 801effa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801effe:	fb02 fe0b 	mul.w	lr, r2, fp
 801f002:	4342      	muls	r2, r0
 801f004:	7868      	ldrb	r0, [r5, #1]
 801f006:	9701      	str	r7, [sp, #4]
 801f008:	fb0c ee0a 	mla	lr, ip, sl, lr
 801f00c:	9f00      	ldr	r7, [sp, #0]
 801f00e:	fb0c 2206 	mla	r2, ip, r6, r2
 801f012:	fb04 ee09 	mla	lr, r4, r9, lr
 801f016:	fb04 2400 	mla	r4, r4, r0, r2
 801f01a:	fb08 ee07 	mla	lr, r8, r7, lr
 801f01e:	9f01      	ldr	r7, [sp, #4]
 801f020:	fb08 4803 	mla	r8, r8, r3, r4
 801f024:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f028:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f02c:	ea47 070e 	orr.w	r7, r7, lr
 801f030:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f034:	ea47 0708 	orr.w	r7, r7, r8
 801f038:	800f      	strh	r7, [r1, #0]
 801f03a:	b005      	add	sp, #20
 801f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f040:	0802abd6 	.word	0x0802abd6
 801f044:	0802b199 	.word	0x0802b199
 801f048:	0802acbf 	.word	0x0802acbf

0801f04c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f050:	ed2d 8b08 	vpush	{d8-d11}
 801f054:	b08f      	sub	sp, #60	; 0x3c
 801f056:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 801f05a:	920c      	str	r2, [sp, #48]	; 0x30
 801f05c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f05e:	910a      	str	r1, [sp, #40]	; 0x28
 801f060:	9306      	str	r3, [sp, #24]
 801f062:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801f066:	900d      	str	r0, [sp, #52]	; 0x34
 801f068:	6850      	ldr	r0, [r2, #4]
 801f06a:	6812      	ldr	r2, [r2, #0]
 801f06c:	fb00 1303 	mla	r3, r0, r3, r1
 801f070:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f074:	9307      	str	r3, [sp, #28]
 801f076:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	9308      	str	r3, [sp, #32]
 801f07c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f07e:	685c      	ldr	r4, [r3, #4]
 801f080:	eeb0 aa40 	vmov.f32	s20, s0
 801f084:	eef0 9a60 	vmov.f32	s19, s1
 801f088:	eeb0 9a41 	vmov.f32	s18, s2
 801f08c:	eeb0 8a62 	vmov.f32	s16, s5
 801f090:	eef0 8a43 	vmov.f32	s17, s6
 801f094:	eef0 ba44 	vmov.f32	s23, s8
 801f098:	eeb0 ba64 	vmov.f32	s22, s9
 801f09c:	eef0 aa45 	vmov.f32	s21, s10
 801f0a0:	3404      	adds	r4, #4
 801f0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	dc03      	bgt.n	801f0b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f0a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f0aa:	2b00      	cmp	r3, #0
 801f0ac:	f340 81d6 	ble.w	801f45c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f0b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f0b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f0b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f0ba:	1e48      	subs	r0, r1, #1
 801f0bc:	1e56      	subs	r6, r2, #1
 801f0be:	9b06      	ldr	r3, [sp, #24]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	f340 80b7 	ble.w	801f234 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f0c6:	ea5f 472b 	movs.w	r7, fp, asr #16
 801f0ca:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f0ce:	d406      	bmi.n	801f0de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f0d0:	4287      	cmp	r7, r0
 801f0d2:	da04      	bge.n	801f0de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	db02      	blt.n	801f0de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f0d8:	42b3      	cmp	r3, r6
 801f0da:	f2c0 80ac 	blt.w	801f236 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f0de:	3701      	adds	r7, #1
 801f0e0:	f100 809d 	bmi.w	801f21e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f0e4:	42b9      	cmp	r1, r7
 801f0e6:	f2c0 809a 	blt.w	801f21e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f0ea:	3301      	adds	r3, #1
 801f0ec:	f100 8097 	bmi.w	801f21e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f0f0:	429a      	cmp	r2, r3
 801f0f2:	f2c0 8094 	blt.w	801f21e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f0f6:	9b06      	ldr	r3, [sp, #24]
 801f0f8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f0fa:	9b07      	ldr	r3, [sp, #28]
 801f0fc:	9309      	str	r3, [sp, #36]	; 0x24
 801f0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f100:	2b00      	cmp	r3, #0
 801f102:	f340 80b5 	ble.w	801f270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f106:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801f108:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f10a:	68c7      	ldr	r7, [r0, #12]
 801f10c:	6892      	ldr	r2, [r2, #8]
 801f10e:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f112:	ea4f 4625 	mov.w	r6, r5, asr #16
 801f116:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f11a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f11e:	f100 80fb 	bmi.w	801f318 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801f122:	f102 3cff 	add.w	ip, r2, #4294967295
 801f126:	4560      	cmp	r0, ip
 801f128:	f280 80f6 	bge.w	801f318 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801f12c:	2e00      	cmp	r6, #0
 801f12e:	f2c0 80f3 	blt.w	801f318 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801f132:	f107 3cff 	add.w	ip, r7, #4294967295
 801f136:	4566      	cmp	r6, ip
 801f138:	f280 80ee 	bge.w	801f318 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801f13c:	b212      	sxth	r2, r2
 801f13e:	fb06 0002 	mla	r0, r6, r2, r0
 801f142:	9e08      	ldr	r6, [sp, #32]
 801f144:	1837      	adds	r7, r6, r0
 801f146:	5c30      	ldrb	r0, [r6, r0]
 801f148:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801f14c:	eb04 0c08 	add.w	ip, r4, r8
 801f150:	2b00      	cmp	r3, #0
 801f152:	f000 80d3 	beq.w	801f2fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f156:	787e      	ldrb	r6, [r7, #1]
 801f158:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f15c:	4426      	add	r6, r4
 801f15e:	2900      	cmp	r1, #0
 801f160:	f000 80d4 	beq.w	801f30c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 801f164:	18b8      	adds	r0, r7, r2
 801f166:	5cba      	ldrb	r2, [r7, r2]
 801f168:	7840      	ldrb	r0, [r0, #1]
 801f16a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f16e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f172:	4422      	add	r2, r4
 801f174:	4420      	add	r0, r4
 801f176:	b29b      	uxth	r3, r3
 801f178:	b289      	uxth	r1, r1
 801f17a:	fb03 f901 	mul.w	r9, r3, r1
 801f17e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f182:	011b      	lsls	r3, r3, #4
 801f184:	b289      	uxth	r1, r1
 801f186:	78b7      	ldrb	r7, [r6, #2]
 801f188:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f18c:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f190:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f194:	eba3 0309 	sub.w	r3, r3, r9
 801f198:	b29b      	uxth	r3, r3
 801f19a:	ebae 0e01 	sub.w	lr, lr, r1
 801f19e:	fa1f fe8e 	uxth.w	lr, lr
 801f1a2:	435f      	muls	r7, r3
 801f1a4:	fb0e 770a 	mla	r7, lr, sl, r7
 801f1a8:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f1ac:	fb01 770a 	mla	r7, r1, sl, r7
 801f1b0:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f1b4:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f1b8:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f1bc:	f896 8000 	ldrb.w	r8, [r6]
 801f1c0:	7876      	ldrb	r6, [r6, #1]
 801f1c2:	fb03 f808 	mul.w	r8, r3, r8
 801f1c6:	fb0e 8807 	mla	r8, lr, r7, r8
 801f1ca:	7817      	ldrb	r7, [r2, #0]
 801f1cc:	fb01 8807 	mla	r8, r1, r7, r8
 801f1d0:	7807      	ldrb	r7, [r0, #0]
 801f1d2:	fb09 8707 	mla	r7, r9, r7, r8
 801f1d6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f1da:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f1de:	ea4a 0707 	orr.w	r7, sl, r7
 801f1e2:	4373      	muls	r3, r6
 801f1e4:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f1e8:	fb0e 330c 	mla	r3, lr, ip, r3
 801f1ec:	fb01 310a 	mla	r1, r1, sl, r3
 801f1f0:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1f6:	fb09 1a0a 	mla	sl, r9, sl, r1
 801f1fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f1fe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f202:	ea47 070a 	orr.w	r7, r7, sl
 801f206:	801f      	strh	r7, [r3, #0]
 801f208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f20a:	3302      	adds	r3, #2
 801f20c:	9309      	str	r3, [sp, #36]	; 0x24
 801f20e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f210:	449b      	add	fp, r3
 801f212:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f214:	441d      	add	r5, r3
 801f216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f218:	3b01      	subs	r3, #1
 801f21a:	930b      	str	r3, [sp, #44]	; 0x2c
 801f21c:	e76f      	b.n	801f0fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f21e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f220:	449b      	add	fp, r3
 801f222:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f224:	441d      	add	r5, r3
 801f226:	9b06      	ldr	r3, [sp, #24]
 801f228:	3b01      	subs	r3, #1
 801f22a:	9306      	str	r3, [sp, #24]
 801f22c:	9b07      	ldr	r3, [sp, #28]
 801f22e:	3302      	adds	r3, #2
 801f230:	9307      	str	r3, [sp, #28]
 801f232:	e744      	b.n	801f0be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f234:	d023      	beq.n	801f27e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801f236:	9b06      	ldr	r3, [sp, #24]
 801f238:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f23a:	3b01      	subs	r3, #1
 801f23c:	fb00 b003 	mla	r0, r0, r3, fp
 801f240:	1400      	asrs	r0, r0, #16
 801f242:	f53f af58 	bmi.w	801f0f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f246:	3901      	subs	r1, #1
 801f248:	4288      	cmp	r0, r1
 801f24a:	f6bf af54 	bge.w	801f0f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f24e:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f250:	fb01 5303 	mla	r3, r1, r3, r5
 801f254:	141b      	asrs	r3, r3, #16
 801f256:	f53f af4e 	bmi.w	801f0f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f25a:	3a01      	subs	r2, #1
 801f25c:	4293      	cmp	r3, r2
 801f25e:	f6bf af4a 	bge.w	801f0f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f262:	9b06      	ldr	r3, [sp, #24]
 801f264:	9309      	str	r3, [sp, #36]	; 0x24
 801f266:	9b07      	ldr	r3, [sp, #28]
 801f268:	930b      	str	r3, [sp, #44]	; 0x2c
 801f26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	dc70      	bgt.n	801f352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f270:	9b06      	ldr	r3, [sp, #24]
 801f272:	9a07      	ldr	r2, [sp, #28]
 801f274:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f278:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f27c:	9307      	str	r3, [sp, #28]
 801f27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f280:	2b00      	cmp	r3, #0
 801f282:	f340 80eb 	ble.w	801f45c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f286:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f28a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f28e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f292:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f294:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f298:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f29c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f2a0:	eef0 6a48 	vmov.f32	s13, s16
 801f2a4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f2a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2ac:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f2b0:	ee16 ba90 	vmov	fp, s13
 801f2b4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f2b8:	eef0 6a68 	vmov.f32	s13, s17
 801f2bc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f2c0:	ee18 2a10 	vmov	r2, s16
 801f2c4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f2c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2cc:	ee18 2a90 	vmov	r2, s17
 801f2d0:	9323      	str	r3, [sp, #140]	; 0x8c
 801f2d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f2d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2d8:	9324      	str	r3, [sp, #144]	; 0x90
 801f2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f2de:	3b01      	subs	r3, #1
 801f2e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2e4:	930a      	str	r3, [sp, #40]	; 0x28
 801f2e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f2e8:	bf08      	it	eq
 801f2ea:	4613      	moveq	r3, r2
 801f2ec:	ee16 5a90 	vmov	r5, s13
 801f2f0:	9306      	str	r3, [sp, #24]
 801f2f2:	eef0 8a67 	vmov.f32	s17, s15
 801f2f6:	eeb0 8a47 	vmov.f32	s16, s14
 801f2fa:	e6d2      	b.n	801f0a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f2fc:	b149      	cbz	r1, 801f312 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801f2fe:	5cba      	ldrb	r2, [r7, r2]
 801f300:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f304:	4422      	add	r2, r4
 801f306:	4660      	mov	r0, ip
 801f308:	4666      	mov	r6, ip
 801f30a:	e734      	b.n	801f176 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801f30c:	4660      	mov	r0, ip
 801f30e:	4662      	mov	r2, ip
 801f310:	e731      	b.n	801f176 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801f312:	4660      	mov	r0, ip
 801f314:	4662      	mov	r2, ip
 801f316:	e7f7      	b.n	801f308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f318:	f110 0c01 	adds.w	ip, r0, #1
 801f31c:	f53f af74 	bmi.w	801f208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f320:	4562      	cmp	r2, ip
 801f322:	f6ff af71 	blt.w	801f208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f326:	f116 0c01 	adds.w	ip, r6, #1
 801f32a:	f53f af6d 	bmi.w	801f208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f32e:	4567      	cmp	r7, ip
 801f330:	f6ff af6a 	blt.w	801f208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f334:	b23f      	sxth	r7, r7
 801f336:	b212      	sxth	r2, r2
 801f338:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f33c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801f340:	9200      	str	r2, [sp, #0]
 801f342:	9701      	str	r7, [sp, #4]
 801f344:	4623      	mov	r3, r4
 801f346:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f34a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f34c:	f7ff fdc4 	bl	801eed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801f350:	e75a      	b.n	801f208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f352:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f354:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f358:	ea4f 462b 	mov.w	r6, fp, asr #16
 801f35c:	1428      	asrs	r0, r5, #16
 801f35e:	fb02 6000 	mla	r0, r2, r0, r6
 801f362:	9e08      	ldr	r6, [sp, #32]
 801f364:	f816 8000 	ldrb.w	r8, [r6, r0]
 801f368:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f36c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f370:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f374:	1837      	adds	r7, r6, r0
 801f376:	eb04 0c08 	add.w	ip, r4, r8
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d060      	beq.n	801f440 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801f37e:	787e      	ldrb	r6, [r7, #1]
 801f380:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f384:	4426      	add	r6, r4
 801f386:	2900      	cmp	r1, #0
 801f388:	d062      	beq.n	801f450 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801f38a:	18b8      	adds	r0, r7, r2
 801f38c:	5cba      	ldrb	r2, [r7, r2]
 801f38e:	7840      	ldrb	r0, [r0, #1]
 801f390:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f394:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f398:	4422      	add	r2, r4
 801f39a:	4420      	add	r0, r4
 801f39c:	b29b      	uxth	r3, r3
 801f39e:	b289      	uxth	r1, r1
 801f3a0:	fb03 f901 	mul.w	r9, r3, r1
 801f3a4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f3a8:	011b      	lsls	r3, r3, #4
 801f3aa:	b289      	uxth	r1, r1
 801f3ac:	78b7      	ldrb	r7, [r6, #2]
 801f3ae:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f3b2:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f3b6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f3ba:	eba3 0309 	sub.w	r3, r3, r9
 801f3be:	b29b      	uxth	r3, r3
 801f3c0:	ebae 0e01 	sub.w	lr, lr, r1
 801f3c4:	fa1f fe8e 	uxth.w	lr, lr
 801f3c8:	435f      	muls	r7, r3
 801f3ca:	fb0e 770a 	mla	r7, lr, sl, r7
 801f3ce:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f3d2:	fb01 770a 	mla	r7, r1, sl, r7
 801f3d6:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f3da:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f3de:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f3e2:	f896 8000 	ldrb.w	r8, [r6]
 801f3e6:	7876      	ldrb	r6, [r6, #1]
 801f3e8:	fb03 f808 	mul.w	r8, r3, r8
 801f3ec:	fb0e 8807 	mla	r8, lr, r7, r8
 801f3f0:	7817      	ldrb	r7, [r2, #0]
 801f3f2:	fb01 8807 	mla	r8, r1, r7, r8
 801f3f6:	7807      	ldrb	r7, [r0, #0]
 801f3f8:	fb09 8707 	mla	r7, r9, r7, r8
 801f3fc:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f400:	4373      	muls	r3, r6
 801f402:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f406:	7856      	ldrb	r6, [r2, #1]
 801f408:	ea4a 0707 	orr.w	r7, sl, r7
 801f40c:	fb0e 330c 	mla	r3, lr, ip, r3
 801f410:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f414:	fb01 3306 	mla	r3, r1, r6, r3
 801f418:	fb09 3a0a 	mla	sl, r9, sl, r3
 801f41c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f422:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f426:	ea47 070a 	orr.w	r7, r7, sl
 801f42a:	f823 7b02 	strh.w	r7, [r3], #2
 801f42e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f430:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f432:	449b      	add	fp, r3
 801f434:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f436:	441d      	add	r5, r3
 801f438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f43a:	3b01      	subs	r3, #1
 801f43c:	9309      	str	r3, [sp, #36]	; 0x24
 801f43e:	e714      	b.n	801f26a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801f440:	b149      	cbz	r1, 801f456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801f442:	5cba      	ldrb	r2, [r7, r2]
 801f444:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f448:	4422      	add	r2, r4
 801f44a:	4660      	mov	r0, ip
 801f44c:	4666      	mov	r6, ip
 801f44e:	e7a5      	b.n	801f39c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f450:	4660      	mov	r0, ip
 801f452:	4662      	mov	r2, ip
 801f454:	e7a2      	b.n	801f39c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f456:	4660      	mov	r0, ip
 801f458:	4662      	mov	r2, ip
 801f45a:	e7f7      	b.n	801f44c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801f45c:	b00f      	add	sp, #60	; 0x3c
 801f45e:	ecbd 8b08 	vpop	{d8-d11}
 801f462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f46c:	880e      	ldrh	r6, [r1, #0]
 801f46e:	b085      	sub	sp, #20
 801f470:	ea4f 2e26 	mov.w	lr, r6, asr #8
 801f474:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801f478:	4691      	mov	r9, r2
 801f47a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801f47e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801f482:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801f486:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801f48a:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 801f48e:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 801f492:	9200      	str	r2, [sp, #0]
 801f494:	00f6      	lsls	r6, r6, #3
 801f496:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 801f49a:	9201      	str	r2, [sp, #4]
 801f49c:	2c00      	cmp	r4, #0
 801f49e:	b2f2      	uxtb	r2, r6
 801f4a0:	fb04 560c 	mla	r6, r4, ip, r5
 801f4a4:	9202      	str	r2, [sp, #8]
 801f4a6:	eb09 0e06 	add.w	lr, r9, r6
 801f4aa:	db3e      	blt.n	801f52a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 801f4ac:	45a0      	cmp	r8, r4
 801f4ae:	dd3c      	ble.n	801f52a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 801f4b0:	2d00      	cmp	r5, #0
 801f4b2:	db38      	blt.n	801f526 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801f4b4:	45ac      	cmp	ip, r5
 801f4b6:	dd36      	ble.n	801f526 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801f4b8:	f819 2006 	ldrb.w	r2, [r9, r6]
 801f4bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f4c0:	1c6e      	adds	r6, r5, #1
 801f4c2:	d435      	bmi.n	801f530 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 801f4c4:	45b4      	cmp	ip, r6
 801f4c6:	dd33      	ble.n	801f530 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 801f4c8:	b3a0      	cbz	r0, 801f534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801f4ca:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801f4ce:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801f4d2:	3401      	adds	r4, #1
 801f4d4:	d432      	bmi.n	801f53c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 801f4d6:	45a0      	cmp	r8, r4
 801f4d8:	dd30      	ble.n	801f53c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 801f4da:	b397      	cbz	r7, 801f542 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801f4dc:	2d00      	cmp	r5, #0
 801f4de:	db2b      	blt.n	801f538 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801f4e0:	45ac      	cmp	ip, r5
 801f4e2:	dd29      	ble.n	801f538 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801f4e4:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801f4e8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801f4ec:	3501      	adds	r5, #1
 801f4ee:	d42b      	bmi.n	801f548 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 801f4f0:	45ac      	cmp	ip, r5
 801f4f2:	dd29      	ble.n	801f548 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 801f4f4:	b350      	cbz	r0, 801f54c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 801f4f6:	44f4      	add	ip, lr
 801f4f8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f4fc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801f500:	280f      	cmp	r0, #15
 801f502:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f506:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f50a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f50e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801f512:	d801      	bhi.n	801f518 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 801f514:	2f0f      	cmp	r7, #15
 801f516:	d91b      	bls.n	801f550 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 801f518:	4b84      	ldr	r3, [pc, #528]	; (801f72c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 801f51a:	4a85      	ldr	r2, [pc, #532]	; (801f730 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 801f51c:	4885      	ldr	r0, [pc, #532]	; (801f734 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 801f51e:	f240 210d 	movw	r1, #525	; 0x20d
 801f522:	f005 fdc7 	bl	80250b4 <__assert_func>
 801f526:	2200      	movs	r2, #0
 801f528:	e7ca      	b.n	801f4c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 801f52a:	2600      	movs	r6, #0
 801f52c:	4632      	mov	r2, r6
 801f52e:	e7d0      	b.n	801f4d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 801f530:	2600      	movs	r6, #0
 801f532:	e7ce      	b.n	801f4d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 801f534:	4606      	mov	r6, r0
 801f536:	e7cc      	b.n	801f4d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 801f538:	2400      	movs	r4, #0
 801f53a:	e7d7      	b.n	801f4ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 801f53c:	2300      	movs	r3, #0
 801f53e:	461c      	mov	r4, r3
 801f540:	e7de      	b.n	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 801f542:	463b      	mov	r3, r7
 801f544:	463c      	mov	r4, r7
 801f546:	e7db      	b.n	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 801f548:	2300      	movs	r3, #0
 801f54a:	e7d9      	b.n	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 801f54c:	4603      	mov	r3, r0
 801f54e:	e7d7      	b.n	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 801f550:	b280      	uxth	r0, r0
 801f552:	b2bf      	uxth	r7, r7
 801f554:	fb00 fe07 	mul.w	lr, r0, r7
 801f558:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f55c:	0100      	lsls	r0, r0, #4
 801f55e:	eba0 0c0e 	sub.w	ip, r0, lr
 801f562:	b2bf      	uxth	r7, r7
 801f564:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801f568:	fa1f fc8c 	uxth.w	ip, ip
 801f56c:	1bed      	subs	r5, r5, r7
 801f56e:	b2ad      	uxth	r5, r5
 801f570:	fb0c f00a 	mul.w	r0, ip, sl
 801f574:	fb05 000b 	mla	r0, r5, fp, r0
 801f578:	fb07 0009 	mla	r0, r7, r9, r0
 801f57c:	fb0e 0008 	mla	r0, lr, r8, r0
 801f580:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f584:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f588:	9003      	str	r0, [sp, #12]
 801f58a:	d018      	beq.n	801f5be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x156>
 801f58c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801f590:	fb0b f000 	mul.w	r0, fp, r0
 801f594:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f598:	fb0b fb02 	mul.w	fp, fp, r2
 801f59c:	0a02      	lsrs	r2, r0, #8
 801f59e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f5a2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801f5a6:	4402      	add	r2, r0
 801f5a8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801f5ac:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801f5b0:	0a12      	lsrs	r2, r2, #8
 801f5b2:	0a00      	lsrs	r0, r0, #8
 801f5b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f5b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f5bc:	4302      	orrs	r2, r0
 801f5be:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f5c2:	d019      	beq.n	801f5f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x190>
 801f5c4:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f5c8:	fb0a fb0b 	mul.w	fp, sl, fp
 801f5cc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f5d0:	fb0a fa06 	mul.w	sl, sl, r6
 801f5d4:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f5d8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f5dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f5e0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801f5e4:	445e      	add	r6, fp
 801f5e6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f5ea:	0a36      	lsrs	r6, r6, #8
 801f5ec:	0a00      	lsrs	r0, r0, #8
 801f5ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f5f2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f5f6:	4306      	orrs	r6, r0
 801f5f8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f5fc:	d019      	beq.n	801f632 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ca>
 801f5fe:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f602:	fb09 fa0a 	mul.w	sl, r9, sl
 801f606:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f60a:	fb09 f904 	mul.w	r9, r9, r4
 801f60e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f612:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f616:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f61a:	f509 7080 	add.w	r0, r9, #256	; 0x100
 801f61e:	4454      	add	r4, sl
 801f620:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801f624:	0a24      	lsrs	r4, r4, #8
 801f626:	0a00      	lsrs	r0, r0, #8
 801f628:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f62c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f630:	4304      	orrs	r4, r0
 801f632:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f636:	d019      	beq.n	801f66c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x204>
 801f638:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801f63c:	fb08 f909 	mul.w	r9, r8, r9
 801f640:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f644:	fb08 f803 	mul.w	r8, r8, r3
 801f648:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801f64c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f650:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f654:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801f658:	444b      	add	r3, r9
 801f65a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f65e:	0a1b      	lsrs	r3, r3, #8
 801f660:	0a00      	lsrs	r0, r0, #8
 801f662:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f666:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f66a:	4303      	orrs	r3, r0
 801f66c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f670:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801f674:	fb0c f808 	mul.w	r8, ip, r8
 801f678:	fb05 8800 	mla	r8, r5, r0, r8
 801f67c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801f680:	fb07 8800 	mla	r8, r7, r0, r8
 801f684:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801f688:	fb0e 8000 	mla	r0, lr, r0, r8
 801f68c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f690:	fb0c f606 	mul.w	r6, ip, r6
 801f694:	0a00      	lsrs	r0, r0, #8
 801f696:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f69a:	fb05 6202 	mla	r2, r5, r2, r6
 801f69e:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801f6a2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801f6a6:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 801f6aa:	fb07 2700 	mla	r7, r7, r0, r2
 801f6ae:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801f6b2:	9b03      	ldr	r3, [sp, #12]
 801f6b4:	9c00      	ldr	r4, [sp, #0]
 801f6b6:	b2ad      	uxth	r5, r5
 801f6b8:	436b      	muls	r3, r5
 801f6ba:	fb0e 7000 	mla	r0, lr, r0, r7
 801f6be:	1c5a      	adds	r2, r3, #1
 801f6c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f6c4:	0a00      	lsrs	r0, r0, #8
 801f6c6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f6ca:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801f6ce:	ea48 0000 	orr.w	r0, r8, r0
 801f6d2:	b2d2      	uxtb	r2, r2
 801f6d4:	fb14 f602 	smulbb	r6, r4, r2
 801f6d8:	0c03      	lsrs	r3, r0, #16
 801f6da:	fb03 6305 	mla	r3, r3, r5, r6
 801f6de:	b29e      	uxth	r6, r3
 801f6e0:	9b01      	ldr	r3, [sp, #4]
 801f6e2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801f6e6:	fb13 f302 	smulbb	r3, r3, r2
 801f6ea:	fb04 3405 	mla	r4, r4, r5, r3
 801f6ee:	9b02      	ldr	r3, [sp, #8]
 801f6f0:	b2c0      	uxtb	r0, r0
 801f6f2:	fb13 f202 	smulbb	r2, r3, r2
 801f6f6:	fb00 2005 	mla	r0, r0, r5, r2
 801f6fa:	b280      	uxth	r0, r0
 801f6fc:	b2a4      	uxth	r4, r4
 801f6fe:	1c42      	adds	r2, r0, #1
 801f700:	1c73      	adds	r3, r6, #1
 801f702:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f706:	1c62      	adds	r2, r4, #1
 801f708:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801f70c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f710:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801f714:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f718:	0952      	lsrs	r2, r2, #5
 801f71a:	4303      	orrs	r3, r0
 801f71c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f720:	4313      	orrs	r3, r2
 801f722:	800b      	strh	r3, [r1, #0]
 801f724:	b005      	add	sp, #20
 801f726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f72a:	bf00      	nop
 801f72c:	0802abd6 	.word	0x0802abd6
 801f730:	0802b199 	.word	0x0802b199
 801f734:	0802acbf 	.word	0x0802acbf

0801f738 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f73c:	ed2d 8b08 	vpush	{d8-d11}
 801f740:	b09f      	sub	sp, #124	; 0x7c
 801f742:	eeb0 aa40 	vmov.f32	s20, s0
 801f746:	921b      	str	r2, [sp, #108]	; 0x6c
 801f748:	9309      	str	r3, [sp, #36]	; 0x24
 801f74a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801f74c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801f750:	931c      	str	r3, [sp, #112]	; 0x70
 801f752:	9119      	str	r1, [sp, #100]	; 0x64
 801f754:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801f758:	901d      	str	r0, [sp, #116]	; 0x74
 801f75a:	6850      	ldr	r0, [r2, #4]
 801f75c:	6812      	ldr	r2, [r2, #0]
 801f75e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801f760:	fb00 1303 	mla	r3, r0, r3, r1
 801f764:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f768:	930c      	str	r3, [sp, #48]	; 0x30
 801f76a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f76c:	681b      	ldr	r3, [r3, #0]
 801f76e:	9312      	str	r3, [sp, #72]	; 0x48
 801f770:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f772:	685e      	ldr	r6, [r3, #4]
 801f774:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f778:	930d      	str	r3, [sp, #52]	; 0x34
 801f77a:	eef0 9a60 	vmov.f32	s19, s1
 801f77e:	eeb0 9a41 	vmov.f32	s18, s2
 801f782:	eeb0 8a62 	vmov.f32	s16, s5
 801f786:	eef0 8a43 	vmov.f32	s17, s6
 801f78a:	eef0 ba44 	vmov.f32	s23, s8
 801f78e:	eeb0 ba64 	vmov.f32	s22, s9
 801f792:	eef0 aa45 	vmov.f32	s21, s10
 801f796:	3604      	adds	r6, #4
 801f798:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f79a:	2b00      	cmp	r3, #0
 801f79c:	dc03      	bgt.n	801f7a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f79e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	f340 838e 	ble.w	801fec2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78a>
 801f7a6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f7a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f7b0:	1e48      	subs	r0, r1, #1
 801f7b2:	1e57      	subs	r7, r2, #1
 801f7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	f340 819b 	ble.w	801faf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f7bc:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801f7be:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f7c2:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f7c6:	d406      	bmi.n	801f7d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f7c8:	4584      	cmp	ip, r0
 801f7ca:	da04      	bge.n	801f7d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	db02      	blt.n	801f7d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f7d0:	42bb      	cmp	r3, r7
 801f7d2:	f2c0 818f 	blt.w	801faf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801f7d6:	f11c 0c01 	adds.w	ip, ip, #1
 801f7da:	f100 817d 	bmi.w	801fad8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801f7de:	4561      	cmp	r1, ip
 801f7e0:	f2c0 817a 	blt.w	801fad8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801f7e4:	3301      	adds	r3, #1
 801f7e6:	f100 8177 	bmi.w	801fad8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801f7ea:	429a      	cmp	r2, r3
 801f7ec:	f2c0 8174 	blt.w	801fad8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801f7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f7f4:	931a      	str	r3, [sp, #104]	; 0x68
 801f7f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	f340 8199 	ble.w	801fb30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801f7fe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f800:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f804:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f806:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f80a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f80c:	141b      	asrs	r3, r3, #16
 801f80e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f812:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f816:	f100 81dc 	bmi.w	801fbd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801f81a:	f100 38ff 	add.w	r8, r0, #4294967295
 801f81e:	4543      	cmp	r3, r8
 801f820:	f280 81d7 	bge.w	801fbd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801f824:	f1bc 0f00 	cmp.w	ip, #0
 801f828:	f2c0 81d3 	blt.w	801fbd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801f82c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f830:	45c4      	cmp	ip, r8
 801f832:	f280 81ce 	bge.w	801fbd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801f836:	b200      	sxth	r0, r0
 801f838:	fb0c 3300 	mla	r3, ip, r0, r3
 801f83c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f83e:	eb04 0803 	add.w	r8, r4, r3
 801f842:	5ce3      	ldrb	r3, [r4, r3]
 801f844:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f848:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f84c:	2a00      	cmp	r2, #0
 801f84e:	f000 81b5 	beq.w	801fbbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801f852:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f856:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f85a:	940e      	str	r4, [sp, #56]	; 0x38
 801f85c:	0e24      	lsrs	r4, r4, #24
 801f85e:	9415      	str	r4, [sp, #84]	; 0x54
 801f860:	b179      	cbz	r1, 801f882 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f862:	eb08 0c00 	add.w	ip, r8, r0
 801f866:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f86a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f86e:	900a      	str	r0, [sp, #40]	; 0x28
 801f870:	0e00      	lsrs	r0, r0, #24
 801f872:	9013      	str	r0, [sp, #76]	; 0x4c
 801f874:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f878:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f87c:	900f      	str	r0, [sp, #60]	; 0x3c
 801f87e:	0e00      	lsrs	r0, r0, #24
 801f880:	9016      	str	r0, [sp, #88]	; 0x58
 801f882:	b292      	uxth	r2, r2
 801f884:	b289      	uxth	r1, r1
 801f886:	fb02 f901 	mul.w	r9, r2, r1
 801f88a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f88e:	0112      	lsls	r2, r2, #4
 801f890:	eba2 0809 	sub.w	r8, r2, r9
 801f894:	b289      	uxth	r1, r1
 801f896:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f89a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f89c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f89e:	fa1f f888 	uxth.w	r8, r8
 801f8a2:	1a52      	subs	r2, r2, r1
 801f8a4:	b292      	uxth	r2, r2
 801f8a6:	fb08 f000 	mul.w	r0, r8, r0
 801f8aa:	fb02 000e 	mla	r0, r2, lr, r0
 801f8ae:	fb01 0004 	mla	r0, r1, r4, r0
 801f8b2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f8b4:	fb09 0004 	mla	r0, r9, r4, r0
 801f8b8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f8bc:	2800      	cmp	r0, #0
 801f8be:	f000 8100 	beq.w	801fac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f8c2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f8c6:	d01b      	beq.n	801f900 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f8c8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f8cc:	fb0e fa0a 	mul.w	sl, lr, sl
 801f8d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f8d4:	fb0e fe03 	mul.w	lr, lr, r3
 801f8d8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f8dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f8e0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f8e4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f8e8:	4453      	add	r3, sl
 801f8ea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f8ee:	0a1b      	lsrs	r3, r3, #8
 801f8f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f8f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f8fc:	ea43 030c 	orr.w	r3, r3, ip
 801f900:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f902:	2cff      	cmp	r4, #255	; 0xff
 801f904:	d021      	beq.n	801f94a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801f906:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f908:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f90c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f90e:	fb04 fb0b 	mul.w	fp, r4, fp
 801f912:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f914:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f918:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f91a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f91e:	fb04 fa0a 	mul.w	sl, r4, sl
 801f922:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f926:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f92a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f92e:	44de      	add	lr, fp
 801f930:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f934:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f938:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f93c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f940:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f944:	ea4e 040a 	orr.w	r4, lr, sl
 801f948:	940e      	str	r4, [sp, #56]	; 0x38
 801f94a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f94c:	2cff      	cmp	r4, #255	; 0xff
 801f94e:	d021      	beq.n	801f994 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 801f950:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f952:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f956:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f958:	fb04 fb0b 	mul.w	fp, r4, fp
 801f95c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f95e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f962:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f964:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f968:	fb04 fa0a 	mul.w	sl, r4, sl
 801f96c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f970:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f974:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f978:	44de      	add	lr, fp
 801f97a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f97e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f982:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f986:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f98a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f98e:	ea4e 040a 	orr.w	r4, lr, sl
 801f992:	940a      	str	r4, [sp, #40]	; 0x28
 801f994:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f996:	2cff      	cmp	r4, #255	; 0xff
 801f998:	d021      	beq.n	801f9de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f99a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f99c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f9a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f9a2:	fb04 fb0b 	mul.w	fp, r4, fp
 801f9a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f9a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f9ac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f9ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f9b2:	fb04 fa0a 	mul.w	sl, r4, sl
 801f9b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f9ba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f9be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f9c2:	44de      	add	lr, fp
 801f9c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f9c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f9cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f9d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f9d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f9d8:	ea4e 040a 	orr.w	r4, lr, sl
 801f9dc:	940f      	str	r4, [sp, #60]	; 0x3c
 801f9de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f9e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f9e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f9e6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f9ea:	fb08 fc0c 	mul.w	ip, r8, ip
 801f9ee:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f9f2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f9f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f9f8:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f9fc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fa00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fa02:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fa06:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801fa0a:	fb08 f80e 	mul.w	r8, r8, lr
 801fa0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa12:	fb02 8303 	mla	r3, r2, r3, r8
 801fa16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa18:	f8b7 e000 	ldrh.w	lr, [r7]
 801fa1c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fa1e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fa22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fa24:	fb01 330a 	mla	r3, r1, sl, r3
 801fa28:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801fa2c:	fb09 3901 	mla	r9, r9, r1, r3
 801fa30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fa34:	4343      	muls	r3, r0
 801fa36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa3a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fa3e:	1c58      	adds	r0, r3, #1
 801fa40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa44:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fa48:	ea4c 0c09 	orr.w	ip, ip, r9
 801fa4c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fa50:	ea4f 411c 	mov.w	r1, ip, lsr #16
 801fa54:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fa58:	ea4f 232e 	mov.w	r3, lr, asr #8
 801fa5c:	b2c0      	uxtb	r0, r0
 801fa5e:	fb11 f102 	smulbb	r1, r1, r2
 801fa62:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801fa66:	fb03 1300 	mla	r3, r3, r0, r1
 801fa6a:	b299      	uxth	r1, r3
 801fa6c:	ea4f 02ee 	mov.w	r2, lr, asr #3
 801fa70:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fa74:	fb13 f304 	smulbb	r3, r3, r4
 801fa78:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fa7c:	fb02 3200 	mla	r2, r2, r0, r3
 801fa80:	fa5f fc8c 	uxtb.w	ip, ip
 801fa84:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 801fa88:	b2db      	uxtb	r3, r3
 801fa8a:	fb1c fc04 	smulbb	ip, ip, r4
 801fa8e:	fb03 cc00 	mla	ip, r3, r0, ip
 801fa92:	b292      	uxth	r2, r2
 801fa94:	fa1f fc8c 	uxth.w	ip, ip
 801fa98:	1c4b      	adds	r3, r1, #1
 801fa9a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fa9e:	f10c 0001 	add.w	r0, ip, #1
 801faa2:	1c51      	adds	r1, r2, #1
 801faa4:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801faa8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801faac:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801fab0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fab4:	0952      	lsrs	r2, r2, #5
 801fab6:	ea43 030c 	orr.w	r3, r3, ip
 801faba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fabe:	4313      	orrs	r3, r2
 801fac0:	803b      	strh	r3, [r7, #0]
 801fac2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801fac4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801fac6:	441a      	add	r2, r3
 801fac8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801faca:	9231      	str	r2, [sp, #196]	; 0xc4
 801facc:	441d      	add	r5, r3
 801face:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fad0:	3b01      	subs	r3, #1
 801fad2:	3702      	adds	r7, #2
 801fad4:	931a      	str	r3, [sp, #104]	; 0x68
 801fad6:	e68e      	b.n	801f7f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801fad8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801fada:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801fadc:	441c      	add	r4, r3
 801fade:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801fae0:	9431      	str	r4, [sp, #196]	; 0xc4
 801fae2:	441d      	add	r5, r3
 801fae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fae6:	3b01      	subs	r3, #1
 801fae8:	9309      	str	r3, [sp, #36]	; 0x24
 801faea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801faec:	3302      	adds	r3, #2
 801faee:	930c      	str	r3, [sp, #48]	; 0x30
 801faf0:	e660      	b.n	801f7b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801faf2:	d024      	beq.n	801fb3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 801faf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801faf6:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801faf8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801fafa:	3b01      	subs	r3, #1
 801fafc:	fb00 4003 	mla	r0, r0, r3, r4
 801fb00:	1400      	asrs	r0, r0, #16
 801fb02:	f53f ae75 	bmi.w	801f7f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fb06:	3901      	subs	r1, #1
 801fb08:	4288      	cmp	r0, r1
 801fb0a:	f6bf ae71 	bge.w	801f7f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fb0e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801fb10:	fb01 5303 	mla	r3, r1, r3, r5
 801fb14:	141b      	asrs	r3, r3, #16
 801fb16:	f53f ae6b 	bmi.w	801f7f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fb1a:	3a01      	subs	r2, #1
 801fb1c:	4293      	cmp	r3, r2
 801fb1e:	f6bf ae67 	bge.w	801f7f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fb22:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801fb26:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801fb2a:	f1bb 0f00 	cmp.w	fp, #0
 801fb2e:	dc70      	bgt.n	801fc12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801fb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb32:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fb36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb38:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801fb3c:	930c      	str	r3, [sp, #48]	; 0x30
 801fb3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	f340 81be 	ble.w	801fec2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78a>
 801fb46:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fb4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fb4e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fb52:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fb54:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fb58:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fb5c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fb60:	eef0 6a48 	vmov.f32	s13, s16
 801fb64:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fb68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb6c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fb70:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801fb74:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fb78:	eef0 6a68 	vmov.f32	s13, s17
 801fb7c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fb80:	ee18 2a10 	vmov	r2, s16
 801fb84:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fb88:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb8c:	ee18 2a90 	vmov	r2, s17
 801fb90:	9333      	str	r3, [sp, #204]	; 0xcc
 801fb92:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fb94:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb98:	9334      	str	r3, [sp, #208]	; 0xd0
 801fb9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fb9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801fb9e:	3b01      	subs	r3, #1
 801fba0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fba4:	9319      	str	r3, [sp, #100]	; 0x64
 801fba6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fba8:	bf08      	it	eq
 801fbaa:	4613      	moveq	r3, r2
 801fbac:	ee16 5a90 	vmov	r5, s13
 801fbb0:	9309      	str	r3, [sp, #36]	; 0x24
 801fbb2:	eef0 8a67 	vmov.f32	s17, s15
 801fbb6:	eeb0 8a47 	vmov.f32	s16, s14
 801fbba:	e5ed      	b.n	801f798 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fbbc:	2900      	cmp	r1, #0
 801fbbe:	f43f ae60 	beq.w	801f882 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fbc2:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fbc6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fbca:	900a      	str	r0, [sp, #40]	; 0x28
 801fbcc:	0e00      	lsrs	r0, r0, #24
 801fbce:	9013      	str	r0, [sp, #76]	; 0x4c
 801fbd0:	e657      	b.n	801f882 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fbd2:	f113 0801 	adds.w	r8, r3, #1
 801fbd6:	f53f af74 	bmi.w	801fac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fbda:	4540      	cmp	r0, r8
 801fbdc:	f6ff af71 	blt.w	801fac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fbe0:	f11c 0801 	adds.w	r8, ip, #1
 801fbe4:	f53f af6d 	bmi.w	801fac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fbe8:	45c6      	cmp	lr, r8
 801fbea:	f6ff af6a 	blt.w	801fac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fbee:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801fbf0:	9302      	str	r3, [sp, #8]
 801fbf2:	b200      	sxth	r0, r0
 801fbf4:	fa0f f38e 	sxth.w	r3, lr
 801fbf8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801fbfc:	e9cd c203 	strd	ip, r2, [sp, #12]
 801fc00:	9301      	str	r3, [sp, #4]
 801fc02:	9000      	str	r0, [sp, #0]
 801fc04:	4633      	mov	r3, r6
 801fc06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fc08:	981d      	ldr	r0, [sp, #116]	; 0x74
 801fc0a:	4639      	mov	r1, r7
 801fc0c:	f7ff fc2c 	bl	801f468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801fc10:	e757      	b.n	801fac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fc12:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801fc14:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801fc16:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fc1a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801fc1c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fc20:	1427      	asrs	r7, r4, #16
 801fc22:	142b      	asrs	r3, r5, #16
 801fc24:	fb01 7303 	mla	r3, r1, r3, r7
 801fc28:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fc2a:	18e7      	adds	r7, r4, r3
 801fc2c:	5ce3      	ldrb	r3, [r4, r3]
 801fc2e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fc32:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fc36:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fc3a:	2a00      	cmp	r2, #0
 801fc3c:	f000 8137 	beq.w	801feae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x776>
 801fc40:	f897 e001 	ldrb.w	lr, [r7, #1]
 801fc44:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801fc48:	9410      	str	r4, [sp, #64]	; 0x40
 801fc4a:	0e24      	lsrs	r4, r4, #24
 801fc4c:	9417      	str	r4, [sp, #92]	; 0x5c
 801fc4e:	b170      	cbz	r0, 801fc6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 801fc50:	eb07 0e01 	add.w	lr, r7, r1
 801fc54:	5c79      	ldrb	r1, [r7, r1]
 801fc56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fc5a:	910b      	str	r1, [sp, #44]	; 0x2c
 801fc5c:	0e09      	lsrs	r1, r1, #24
 801fc5e:	9114      	str	r1, [sp, #80]	; 0x50
 801fc60:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801fc64:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fc68:	9111      	str	r1, [sp, #68]	; 0x44
 801fc6a:	0e09      	lsrs	r1, r1, #24
 801fc6c:	9118      	str	r1, [sp, #96]	; 0x60
 801fc6e:	b292      	uxth	r2, r2
 801fc70:	b280      	uxth	r0, r0
 801fc72:	fb02 f800 	mul.w	r8, r2, r0
 801fc76:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801fc7a:	0112      	lsls	r2, r2, #4
 801fc7c:	eba2 0e08 	sub.w	lr, r2, r8
 801fc80:	b280      	uxth	r0, r0
 801fc82:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fc86:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801fc88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fc8a:	fa1f fe8e 	uxth.w	lr, lr
 801fc8e:	1a12      	subs	r2, r2, r0
 801fc90:	b292      	uxth	r2, r2
 801fc92:	fb0e f101 	mul.w	r1, lr, r1
 801fc96:	fb02 110c 	mla	r1, r2, ip, r1
 801fc9a:	fb00 1104 	mla	r1, r0, r4, r1
 801fc9e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fca0:	fb08 1104 	mla	r1, r8, r4, r1
 801fca4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fca8:	2900      	cmp	r1, #0
 801fcaa:	f000 80f5 	beq.w	801fe98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801fcae:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fcb2:	d019      	beq.n	801fce8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b0>
 801fcb4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fcb8:	fb0c fa0a 	mul.w	sl, ip, sl
 801fcbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fcc0:	fb0c fc03 	mul.w	ip, ip, r3
 801fcc4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fcc8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fccc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fcd0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801fcd4:	4453      	add	r3, sl
 801fcd6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fcda:	0a1b      	lsrs	r3, r3, #8
 801fcdc:	0a3f      	lsrs	r7, r7, #8
 801fcde:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fce2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fce6:	433b      	orrs	r3, r7
 801fce8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fcea:	2cff      	cmp	r4, #255	; 0xff
 801fcec:	d020      	beq.n	801fd30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f8>
 801fcee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fcf0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fcf4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fcf6:	4367      	muls	r7, r4
 801fcf8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fcfa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fcfe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fd00:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fd04:	fb04 fa0a 	mul.w	sl, r4, sl
 801fd08:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fd0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd10:	44bc      	add	ip, r7
 801fd12:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fd16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fd1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fd2a:	ea4c 040a 	orr.w	r4, ip, sl
 801fd2e:	9410      	str	r4, [sp, #64]	; 0x40
 801fd30:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fd32:	2cff      	cmp	r4, #255	; 0xff
 801fd34:	d020      	beq.n	801fd78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801fd36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fd38:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fd3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fd3e:	4367      	muls	r7, r4
 801fd40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fd42:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fd46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fd48:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fd4c:	fb04 fa0a 	mul.w	sl, r4, sl
 801fd50:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fd54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd58:	44bc      	add	ip, r7
 801fd5a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fd5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fd62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fd72:	ea4c 040a 	orr.w	r4, ip, sl
 801fd76:	940b      	str	r4, [sp, #44]	; 0x2c
 801fd78:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fd7a:	2cff      	cmp	r4, #255	; 0xff
 801fd7c:	d020      	beq.n	801fdc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 801fd7e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fd80:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fd84:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fd86:	4367      	muls	r7, r4
 801fd88:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fd8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fd8e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fd90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fd94:	fb04 fa0a 	mul.w	sl, r4, sl
 801fd98:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fd9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fda0:	44bc      	add	ip, r7
 801fda2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fda6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fdaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fdae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fdb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fdb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fdba:	ea4c 040a 	orr.w	r4, ip, sl
 801fdbe:	9411      	str	r4, [sp, #68]	; 0x44
 801fdc0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fdc2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fdc6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fdc8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fdcc:	fb0e f707 	mul.w	r7, lr, r7
 801fdd0:	fb02 770c 	mla	r7, r2, ip, r7
 801fdd4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fdd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fdda:	fb00 770c 	mla	r7, r0, ip, r7
 801fdde:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fde2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fde4:	fb08 770c 	mla	r7, r8, ip, r7
 801fde8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801fdec:	fb0e fe0c 	mul.w	lr, lr, ip
 801fdf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdf4:	fb02 e303 	mla	r3, r2, r3, lr
 801fdf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fdfa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fdfc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fe00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fe02:	fb00 330a 	mla	r3, r0, sl, r3
 801fe06:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fe0a:	fb08 3c0c 	mla	ip, r8, ip, r3
 801fe0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fe10:	f8b9 0000 	ldrh.w	r0, [r9]
 801fe14:	434b      	muls	r3, r1
 801fe16:	0a3f      	lsrs	r7, r7, #8
 801fe18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe1c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fe20:	1c59      	adds	r1, r3, #1
 801fe22:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fe26:	ea47 070c 	orr.w	r7, r7, ip
 801fe2a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fe2e:	1202      	asrs	r2, r0, #8
 801fe30:	0c3b      	lsrs	r3, r7, #16
 801fe32:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fe36:	b2c9      	uxtb	r1, r1
 801fe38:	fb13 f304 	smulbb	r3, r3, r4
 801fe3c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801fe40:	fb02 3201 	mla	r2, r2, r1, r3
 801fe44:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801fe48:	10c3      	asrs	r3, r0, #3
 801fe4a:	b2ff      	uxtb	r7, r7
 801fe4c:	00c0      	lsls	r0, r0, #3
 801fe4e:	b292      	uxth	r2, r2
 801fe50:	fb1c fc04 	smulbb	ip, ip, r4
 801fe54:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801fe58:	b2c0      	uxtb	r0, r0
 801fe5a:	fb17 f704 	smulbb	r7, r7, r4
 801fe5e:	fb03 c301 	mla	r3, r3, r1, ip
 801fe62:	fb00 7001 	mla	r0, r0, r1, r7
 801fe66:	f102 0c01 	add.w	ip, r2, #1
 801fe6a:	b280      	uxth	r0, r0
 801fe6c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fe70:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801fe74:	1c42      	adds	r2, r0, #1
 801fe76:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fe7a:	b29b      	uxth	r3, r3
 801fe7c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801fe80:	ea4c 0200 	orr.w	r2, ip, r0
 801fe84:	f103 0c01 	add.w	ip, r3, #1
 801fe88:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801fe8c:	095b      	lsrs	r3, r3, #5
 801fe8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fe92:	431a      	orrs	r2, r3
 801fe94:	f8a9 2000 	strh.w	r2, [r9]
 801fe98:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801fe9a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801fe9c:	441a      	add	r2, r3
 801fe9e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801fea0:	9231      	str	r2, [sp, #196]	; 0xc4
 801fea2:	f109 0902 	add.w	r9, r9, #2
 801fea6:	441d      	add	r5, r3
 801fea8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801feac:	e63d      	b.n	801fb2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801feae:	2800      	cmp	r0, #0
 801feb0:	f43f aedd 	beq.w	801fc6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 801feb4:	5c79      	ldrb	r1, [r7, r1]
 801feb6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801feba:	910b      	str	r1, [sp, #44]	; 0x2c
 801febc:	0e09      	lsrs	r1, r1, #24
 801febe:	9114      	str	r1, [sp, #80]	; 0x50
 801fec0:	e6d5      	b.n	801fc6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 801fec2:	b01f      	add	sp, #124	; 0x7c
 801fec4:	ecbd 8b08 	vpop	{d8-d11}
 801fec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fecc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801fecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fed0:	880e      	ldrh	r6, [r1, #0]
 801fed2:	b085      	sub	sp, #20
 801fed4:	ea4f 2e26 	mov.w	lr, r6, asr #8
 801fed8:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801fedc:	4691      	mov	r9, r2
 801fede:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fee2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801fee6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801feea:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801feee:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 801fef2:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 801fef6:	9200      	str	r2, [sp, #0]
 801fef8:	00f6      	lsls	r6, r6, #3
 801fefa:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 801fefe:	9201      	str	r2, [sp, #4]
 801ff00:	2c00      	cmp	r4, #0
 801ff02:	b2f2      	uxtb	r2, r6
 801ff04:	fb04 560c 	mla	r6, r4, ip, r5
 801ff08:	9202      	str	r2, [sp, #8]
 801ff0a:	eb09 0e06 	add.w	lr, r9, r6
 801ff0e:	db3e      	blt.n	801ff8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 801ff10:	45a0      	cmp	r8, r4
 801ff12:	dd3c      	ble.n	801ff8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 801ff14:	2d00      	cmp	r5, #0
 801ff16:	db38      	blt.n	801ff8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 801ff18:	45ac      	cmp	ip, r5
 801ff1a:	dd36      	ble.n	801ff8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 801ff1c:	f819 2006 	ldrb.w	r2, [r9, r6]
 801ff20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ff24:	1c6e      	adds	r6, r5, #1
 801ff26:	d435      	bmi.n	801ff94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 801ff28:	45b4      	cmp	ip, r6
 801ff2a:	dd33      	ble.n	801ff94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 801ff2c:	b3a0      	cbz	r0, 801ff98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801ff2e:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801ff32:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801ff36:	3401      	adds	r4, #1
 801ff38:	d432      	bmi.n	801ffa0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 801ff3a:	45a0      	cmp	r8, r4
 801ff3c:	dd30      	ble.n	801ffa0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 801ff3e:	b397      	cbz	r7, 801ffa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801ff40:	2d00      	cmp	r5, #0
 801ff42:	db2b      	blt.n	801ff9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801ff44:	45ac      	cmp	ip, r5
 801ff46:	dd29      	ble.n	801ff9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801ff48:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801ff4c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801ff50:	3501      	adds	r5, #1
 801ff52:	d42b      	bmi.n	801ffac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 801ff54:	45ac      	cmp	ip, r5
 801ff56:	dd29      	ble.n	801ffac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 801ff58:	b350      	cbz	r0, 801ffb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 801ff5a:	44f4      	add	ip, lr
 801ff5c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ff60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801ff64:	280f      	cmp	r0, #15
 801ff66:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801ff6a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ff6e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ff72:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801ff76:	d801      	bhi.n	801ff7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 801ff78:	2f0f      	cmp	r7, #15
 801ff7a:	d91b      	bls.n	801ffb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 801ff7c:	4b7d      	ldr	r3, [pc, #500]	; (8020174 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 801ff7e:	4a7e      	ldr	r2, [pc, #504]	; (8020178 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801ff80:	487e      	ldr	r0, [pc, #504]	; (802017c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 801ff82:	f240 210d 	movw	r1, #525	; 0x20d
 801ff86:	f005 f895 	bl	80250b4 <__assert_func>
 801ff8a:	2200      	movs	r2, #0
 801ff8c:	e7ca      	b.n	801ff24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 801ff8e:	2600      	movs	r6, #0
 801ff90:	4632      	mov	r2, r6
 801ff92:	e7d0      	b.n	801ff36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801ff94:	2600      	movs	r6, #0
 801ff96:	e7ce      	b.n	801ff36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801ff98:	4606      	mov	r6, r0
 801ff9a:	e7cc      	b.n	801ff36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801ff9c:	2400      	movs	r4, #0
 801ff9e:	e7d7      	b.n	801ff50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 801ffa0:	2300      	movs	r3, #0
 801ffa2:	461c      	mov	r4, r3
 801ffa4:	e7de      	b.n	801ff64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 801ffa6:	463b      	mov	r3, r7
 801ffa8:	463c      	mov	r4, r7
 801ffaa:	e7db      	b.n	801ff64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 801ffac:	2300      	movs	r3, #0
 801ffae:	e7d9      	b.n	801ff64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 801ffb0:	4603      	mov	r3, r0
 801ffb2:	e7d7      	b.n	801ff64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 801ffb4:	b280      	uxth	r0, r0
 801ffb6:	b2bf      	uxth	r7, r7
 801ffb8:	fb00 fe07 	mul.w	lr, r0, r7
 801ffbc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801ffc0:	0100      	lsls	r0, r0, #4
 801ffc2:	eba0 0c0e 	sub.w	ip, r0, lr
 801ffc6:	b2bf      	uxth	r7, r7
 801ffc8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801ffcc:	fa1f fc8c 	uxth.w	ip, ip
 801ffd0:	1bed      	subs	r5, r5, r7
 801ffd2:	b2ad      	uxth	r5, r5
 801ffd4:	fb0c f00a 	mul.w	r0, ip, sl
 801ffd8:	fb05 000b 	mla	r0, r5, fp, r0
 801ffdc:	fb07 0009 	mla	r0, r7, r9, r0
 801ffe0:	fb0e 0008 	mla	r0, lr, r8, r0
 801ffe4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ffe8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ffec:	9003      	str	r0, [sp, #12]
 801ffee:	d018      	beq.n	8020022 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x156>
 801fff0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801fff4:	fb0b f000 	mul.w	r0, fp, r0
 801fff8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fffc:	fb0b fb02 	mul.w	fp, fp, r2
 8020000:	0a02      	lsrs	r2, r0, #8
 8020002:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020006:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802000a:	4402      	add	r2, r0
 802000c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8020010:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020014:	0a12      	lsrs	r2, r2, #8
 8020016:	0a00      	lsrs	r0, r0, #8
 8020018:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802001c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020020:	4302      	orrs	r2, r0
 8020022:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020026:	d019      	beq.n	802005c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x190>
 8020028:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802002c:	fb0a fb0b 	mul.w	fp, sl, fp
 8020030:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020034:	fb0a fa06 	mul.w	sl, sl, r6
 8020038:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802003c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020040:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020044:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020048:	445e      	add	r6, fp
 802004a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802004e:	0a36      	lsrs	r6, r6, #8
 8020050:	0a00      	lsrs	r0, r0, #8
 8020052:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020056:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802005a:	4306      	orrs	r6, r0
 802005c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020060:	d019      	beq.n	8020096 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ca>
 8020062:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020066:	fb09 fa0a 	mul.w	sl, r9, sl
 802006a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802006e:	fb09 f904 	mul.w	r9, r9, r4
 8020072:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020076:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802007a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802007e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8020082:	4454      	add	r4, sl
 8020084:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8020088:	0a24      	lsrs	r4, r4, #8
 802008a:	0a00      	lsrs	r0, r0, #8
 802008c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020090:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020094:	4304      	orrs	r4, r0
 8020096:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802009a:	d019      	beq.n	80200d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x204>
 802009c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80200a0:	fb08 f909 	mul.w	r9, r8, r9
 80200a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200a8:	fb08 f803 	mul.w	r8, r8, r3
 80200ac:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80200b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80200b4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80200b8:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80200bc:	444b      	add	r3, r9
 80200be:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80200c2:	0a1b      	lsrs	r3, r3, #8
 80200c4:	0a00      	lsrs	r0, r0, #8
 80200c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80200ca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80200ce:	4303      	orrs	r3, r0
 80200d0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80200d4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80200d8:	fb0c f808 	mul.w	r8, ip, r8
 80200dc:	fb05 8800 	mla	r8, r5, r0, r8
 80200e0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80200e4:	fb07 8800 	mla	r8, r7, r0, r8
 80200e8:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80200ec:	fb0e 8000 	mla	r0, lr, r0, r8
 80200f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80200f4:	0a00      	lsrs	r0, r0, #8
 80200f6:	fb0c f606 	mul.w	r6, ip, r6
 80200fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80200fe:	fb05 6202 	mla	r2, r5, r2, r6
 8020102:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8020106:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802010a:	fb07 2700 	mla	r7, r7, r0, r2
 802010e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8020112:	9b03      	ldr	r3, [sp, #12]
 8020114:	9c02      	ldr	r4, [sp, #8]
 8020116:	9d01      	ldr	r5, [sp, #4]
 8020118:	fb0e 7000 	mla	r0, lr, r0, r7
 802011c:	43da      	mvns	r2, r3
 802011e:	9b00      	ldr	r3, [sp, #0]
 8020120:	b2d2      	uxtb	r2, r2
 8020122:	0a00      	lsrs	r0, r0, #8
 8020124:	4353      	muls	r3, r2
 8020126:	4354      	muls	r4, r2
 8020128:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802012c:	ea48 0000 	orr.w	r0, r8, r0
 8020130:	4355      	muls	r5, r2
 8020132:	4622      	mov	r2, r4
 8020134:	1c5c      	adds	r4, r3, #1
 8020136:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 802013a:	0c03      	lsrs	r3, r0, #16
 802013c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020140:	4b0f      	ldr	r3, [pc, #60]	; (8020180 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8020142:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8020146:	1c54      	adds	r4, r2, #1
 8020148:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 802014c:	b2c2      	uxtb	r2, r0
 802014e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020152:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8020156:	1c6a      	adds	r2, r5, #1
 8020158:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 802015c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020160:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020164:	00c0      	lsls	r0, r0, #3
 8020166:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802016a:	4318      	orrs	r0, r3
 802016c:	8008      	strh	r0, [r1, #0]
 802016e:	b005      	add	sp, #20
 8020170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020174:	0802abd6 	.word	0x0802abd6
 8020178:	0802b199 	.word	0x0802b199
 802017c:	0802acbf 	.word	0x0802acbf
 8020180:	fffff800 	.word	0xfffff800

08020184 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020188:	ed2d 8b08 	vpush	{d8-d11}
 802018c:	b09b      	sub	sp, #108	; 0x6c
 802018e:	eeb0 aa40 	vmov.f32	s20, s0
 8020192:	9218      	str	r2, [sp, #96]	; 0x60
 8020194:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020196:	9116      	str	r1, [sp, #88]	; 0x58
 8020198:	9307      	str	r3, [sp, #28]
 802019a:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802019e:	9019      	str	r0, [sp, #100]	; 0x64
 80201a0:	6850      	ldr	r0, [r2, #4]
 80201a2:	6812      	ldr	r2, [r2, #0]
 80201a4:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80201a6:	fb00 1303 	mla	r3, r0, r3, r1
 80201aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80201ae:	930a      	str	r3, [sp, #40]	; 0x28
 80201b0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80201b6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80201b8:	685e      	ldr	r6, [r3, #4]
 80201ba:	eef0 9a60 	vmov.f32	s19, s1
 80201be:	eeb0 9a41 	vmov.f32	s18, s2
 80201c2:	eeb0 8a62 	vmov.f32	s16, s5
 80201c6:	eef0 8a43 	vmov.f32	s17, s6
 80201ca:	eef0 ba44 	vmov.f32	s23, s8
 80201ce:	eeb0 ba64 	vmov.f32	s22, s9
 80201d2:	eef0 aa45 	vmov.f32	s21, s10
 80201d6:	3604      	adds	r6, #4
 80201d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80201da:	2b00      	cmp	r3, #0
 80201dc:	dc03      	bgt.n	80201e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80201de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	f340 8371 	ble.w	80208c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80201e6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80201e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80201ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80201f0:	1e48      	subs	r0, r1, #1
 80201f2:	1e57      	subs	r7, r2, #1
 80201f4:	9b07      	ldr	r3, [sp, #28]
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	f340 8189 	ble.w	802050e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80201fc:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80201fe:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020202:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020206:	d406      	bmi.n	8020216 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020208:	4584      	cmp	ip, r0
 802020a:	da04      	bge.n	8020216 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802020c:	2b00      	cmp	r3, #0
 802020e:	db02      	blt.n	8020216 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020210:	42bb      	cmp	r3, r7
 8020212:	f2c0 817d 	blt.w	8020510 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8020216:	f11c 0c01 	adds.w	ip, ip, #1
 802021a:	f100 816b 	bmi.w	80204f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802021e:	4561      	cmp	r1, ip
 8020220:	f2c0 8168 	blt.w	80204f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020224:	3301      	adds	r3, #1
 8020226:	f100 8165 	bmi.w	80204f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802022a:	429a      	cmp	r2, r3
 802022c:	f2c0 8162 	blt.w	80204f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020230:	9b07      	ldr	r3, [sp, #28]
 8020232:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020234:	9317      	str	r3, [sp, #92]	; 0x5c
 8020236:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020238:	2b00      	cmp	r3, #0
 802023a:	f340 8187 	ble.w	802054c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 802023e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020240:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020244:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020246:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802024a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802024c:	141b      	asrs	r3, r3, #16
 802024e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020252:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020256:	f100 81ca 	bmi.w	80205ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802025a:	f101 38ff 	add.w	r8, r1, #4294967295
 802025e:	4543      	cmp	r3, r8
 8020260:	f280 81c5 	bge.w	80205ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020264:	f1bc 0f00 	cmp.w	ip, #0
 8020268:	f2c0 81c1 	blt.w	80205ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802026c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020270:	45c4      	cmp	ip, r8
 8020272:	f280 81bc 	bge.w	80205ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020276:	b209      	sxth	r1, r1
 8020278:	fb0c 3301 	mla	r3, ip, r1, r3
 802027c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802027e:	eb04 0803 	add.w	r8, r4, r3
 8020282:	5ce3      	ldrb	r3, [r4, r3]
 8020284:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020288:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802028c:	2a00      	cmp	r2, #0
 802028e:	f000 81a3 	beq.w	80205d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8020292:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020296:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802029a:	940b      	str	r4, [sp, #44]	; 0x2c
 802029c:	0e24      	lsrs	r4, r4, #24
 802029e:	9412      	str	r4, [sp, #72]	; 0x48
 80202a0:	b178      	cbz	r0, 80202c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80202a2:	eb08 0c01 	add.w	ip, r8, r1
 80202a6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80202aa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202ae:	9108      	str	r1, [sp, #32]
 80202b0:	0e09      	lsrs	r1, r1, #24
 80202b2:	9110      	str	r1, [sp, #64]	; 0x40
 80202b4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80202b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202bc:	910c      	str	r1, [sp, #48]	; 0x30
 80202be:	0e09      	lsrs	r1, r1, #24
 80202c0:	9113      	str	r1, [sp, #76]	; 0x4c
 80202c2:	b292      	uxth	r2, r2
 80202c4:	b280      	uxth	r0, r0
 80202c6:	fb02 f900 	mul.w	r9, r2, r0
 80202ca:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80202ce:	0112      	lsls	r2, r2, #4
 80202d0:	eba2 0809 	sub.w	r8, r2, r9
 80202d4:	b280      	uxth	r0, r0
 80202d6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80202da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80202dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80202de:	fa1f f888 	uxth.w	r8, r8
 80202e2:	1a12      	subs	r2, r2, r0
 80202e4:	b292      	uxth	r2, r2
 80202e6:	fb08 f101 	mul.w	r1, r8, r1
 80202ea:	fb02 110e 	mla	r1, r2, lr, r1
 80202ee:	fb00 1104 	mla	r1, r0, r4, r1
 80202f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80202f4:	fb09 1104 	mla	r1, r9, r4, r1
 80202f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80202fc:	2900      	cmp	r1, #0
 80202fe:	f000 80ee 	beq.w	80204de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020302:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020306:	d01b      	beq.n	8020340 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020308:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802030c:	fb0e fa0a 	mul.w	sl, lr, sl
 8020310:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020314:	fb0e fe03 	mul.w	lr, lr, r3
 8020318:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802031c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020320:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020324:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020328:	4453      	add	r3, sl
 802032a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802032e:	0a1b      	lsrs	r3, r3, #8
 8020330:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020334:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020338:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802033c:	ea43 030c 	orr.w	r3, r3, ip
 8020340:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020342:	2cff      	cmp	r4, #255	; 0xff
 8020344:	d021      	beq.n	802038a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020346:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020348:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802034c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802034e:	fb04 fb0b 	mul.w	fp, r4, fp
 8020352:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020354:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020358:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802035a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802035e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020362:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020366:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802036a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802036e:	44de      	add	lr, fp
 8020370:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020374:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020378:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802037c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020380:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020384:	ea4e 040a 	orr.w	r4, lr, sl
 8020388:	940b      	str	r4, [sp, #44]	; 0x2c
 802038a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802038c:	2cff      	cmp	r4, #255	; 0xff
 802038e:	d021      	beq.n	80203d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020390:	9c08      	ldr	r4, [sp, #32]
 8020392:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020396:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020398:	fb04 fb0b 	mul.w	fp, r4, fp
 802039c:	9c08      	ldr	r4, [sp, #32]
 802039e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80203a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80203a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80203a8:	fb04 fa0a 	mul.w	sl, r4, sl
 80203ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80203b4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80203b8:	44de      	add	lr, fp
 80203ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80203be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80203c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80203ce:	ea4e 040a 	orr.w	r4, lr, sl
 80203d2:	9408      	str	r4, [sp, #32]
 80203d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80203d6:	2cff      	cmp	r4, #255	; 0xff
 80203d8:	d021      	beq.n	802041e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80203da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80203dc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80203e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80203e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80203e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80203e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80203ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80203ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80203f2:	fb04 fa0a 	mul.w	sl, r4, sl
 80203f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80203fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020402:	44de      	add	lr, fp
 8020404:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020408:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802040c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020410:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020414:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020418:	ea4e 040a 	orr.w	r4, lr, sl
 802041c:	940c      	str	r4, [sp, #48]	; 0x30
 802041e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020420:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020424:	9c08      	ldr	r4, [sp, #32]
 8020426:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802042a:	fb08 fc0c 	mul.w	ip, r8, ip
 802042e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020432:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020436:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020438:	fb00 cc0e 	mla	ip, r0, lr, ip
 802043c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020440:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020442:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020446:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802044a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802044e:	fb08 f80e 	mul.w	r8, r8, lr
 8020452:	fb02 8303 	mla	r3, r2, r3, r8
 8020456:	9a08      	ldr	r2, [sp, #32]
 8020458:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802045c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802045e:	fb00 330a 	mla	r3, r0, sl, r3
 8020462:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020466:	fb09 3900 	mla	r9, r9, r0, r3
 802046a:	883b      	ldrh	r3, [r7, #0]
 802046c:	43c9      	mvns	r1, r1
 802046e:	1218      	asrs	r0, r3, #8
 8020470:	b2c9      	uxtb	r1, r1
 8020472:	10da      	asrs	r2, r3, #3
 8020474:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020478:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802047c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020480:	00db      	lsls	r3, r3, #3
 8020482:	4348      	muls	r0, r1
 8020484:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020488:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802048c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020490:	b2db      	uxtb	r3, r3
 8020492:	434b      	muls	r3, r1
 8020494:	ea4c 0c09 	orr.w	ip, ip, r9
 8020498:	434a      	muls	r2, r1
 802049a:	1c41      	adds	r1, r0, #1
 802049c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80204a0:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80204a4:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80204a8:	4960      	ldr	r1, [pc, #384]	; (802062c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 80204aa:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 80204ae:	1c59      	adds	r1, r3, #1
 80204b0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80204b4:	fa5f f38c 	uxtb.w	r3, ip
 80204b8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80204bc:	1c51      	adds	r1, r2, #1
 80204be:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80204c2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80204c6:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80204ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80204ce:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 80204d2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80204d6:	ea43 0c0c 	orr.w	ip, r3, ip
 80204da:	f8a7 c000 	strh.w	ip, [r7]
 80204de:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80204e0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80204e2:	441a      	add	r2, r3
 80204e4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80204e6:	922d      	str	r2, [sp, #180]	; 0xb4
 80204e8:	441d      	add	r5, r3
 80204ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80204ec:	3b01      	subs	r3, #1
 80204ee:	3702      	adds	r7, #2
 80204f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80204f2:	e6a0      	b.n	8020236 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80204f4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80204f6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80204f8:	441c      	add	r4, r3
 80204fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80204fc:	942d      	str	r4, [sp, #180]	; 0xb4
 80204fe:	441d      	add	r5, r3
 8020500:	9b07      	ldr	r3, [sp, #28]
 8020502:	3b01      	subs	r3, #1
 8020504:	9307      	str	r3, [sp, #28]
 8020506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020508:	3302      	adds	r3, #2
 802050a:	930a      	str	r3, [sp, #40]	; 0x28
 802050c:	e672      	b.n	80201f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802050e:	d024      	beq.n	802055a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8020510:	9b07      	ldr	r3, [sp, #28]
 8020512:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8020514:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8020516:	3b01      	subs	r3, #1
 8020518:	fb00 4003 	mla	r0, r0, r3, r4
 802051c:	1400      	asrs	r0, r0, #16
 802051e:	f53f ae87 	bmi.w	8020230 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8020522:	3901      	subs	r1, #1
 8020524:	4288      	cmp	r0, r1
 8020526:	f6bf ae83 	bge.w	8020230 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802052a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802052c:	fb01 5303 	mla	r3, r1, r3, r5
 8020530:	141b      	asrs	r3, r3, #16
 8020532:	f53f ae7d 	bmi.w	8020230 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8020536:	3a01      	subs	r2, #1
 8020538:	4293      	cmp	r3, r2
 802053a:	f6bf ae79 	bge.w	8020230 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802053e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020542:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8020546:	f1bb 0f00 	cmp.w	fp, #0
 802054a:	dc71      	bgt.n	8020630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 802054c:	9b07      	ldr	r3, [sp, #28]
 802054e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020554:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020558:	930a      	str	r3, [sp, #40]	; 0x28
 802055a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802055c:	2b00      	cmp	r3, #0
 802055e:	f340 81b3 	ble.w	80208c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8020562:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802056a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802056e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020570:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020574:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020578:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802057c:	eef0 6a48 	vmov.f32	s13, s16
 8020580:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020584:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020588:	ee37 8a48 	vsub.f32	s16, s14, s16
 802058c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8020590:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020594:	eef0 6a68 	vmov.f32	s13, s17
 8020598:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802059c:	ee18 2a10 	vmov	r2, s16
 80205a0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80205a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80205a8:	ee18 2a90 	vmov	r2, s17
 80205ac:	932f      	str	r3, [sp, #188]	; 0xbc
 80205ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80205b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80205b4:	9330      	str	r3, [sp, #192]	; 0xc0
 80205b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80205b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80205ba:	3b01      	subs	r3, #1
 80205bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205c0:	9316      	str	r3, [sp, #88]	; 0x58
 80205c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80205c4:	bf08      	it	eq
 80205c6:	4613      	moveq	r3, r2
 80205c8:	ee16 5a90 	vmov	r5, s13
 80205cc:	9307      	str	r3, [sp, #28]
 80205ce:	eef0 8a67 	vmov.f32	s17, s15
 80205d2:	eeb0 8a47 	vmov.f32	s16, s14
 80205d6:	e5ff      	b.n	80201d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80205d8:	2800      	cmp	r0, #0
 80205da:	f43f ae72 	beq.w	80202c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80205de:	f818 1001 	ldrb.w	r1, [r8, r1]
 80205e2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80205e6:	9108      	str	r1, [sp, #32]
 80205e8:	0e09      	lsrs	r1, r1, #24
 80205ea:	9110      	str	r1, [sp, #64]	; 0x40
 80205ec:	e669      	b.n	80202c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80205ee:	f113 0801 	adds.w	r8, r3, #1
 80205f2:	f53f af74 	bmi.w	80204de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80205f6:	4541      	cmp	r1, r8
 80205f8:	f6ff af71 	blt.w	80204de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80205fc:	f11c 0801 	adds.w	r8, ip, #1
 8020600:	f53f af6d 	bmi.w	80204de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020604:	45c6      	cmp	lr, r8
 8020606:	f6ff af6a 	blt.w	80204de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802060a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802060e:	b209      	sxth	r1, r1
 8020610:	fa0f f38e 	sxth.w	r3, lr
 8020614:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020618:	9301      	str	r3, [sp, #4]
 802061a:	9100      	str	r1, [sp, #0]
 802061c:	4633      	mov	r3, r6
 802061e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020620:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020622:	4639      	mov	r1, r7
 8020624:	f7ff fc52 	bl	801fecc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8020628:	e759      	b.n	80204de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802062a:	bf00      	nop
 802062c:	fffff800 	.word	0xfffff800
 8020630:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020632:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8020634:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020638:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802063a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802063e:	1427      	asrs	r7, r4, #16
 8020640:	142b      	asrs	r3, r5, #16
 8020642:	fb01 7303 	mla	r3, r1, r3, r7
 8020646:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020648:	18e7      	adds	r7, r4, r3
 802064a:	5ce3      	ldrb	r3, [r4, r3]
 802064c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020650:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020654:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020658:	2a00      	cmp	r2, #0
 802065a:	f000 812b 	beq.w	80208b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802065e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020662:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020666:	940d      	str	r4, [sp, #52]	; 0x34
 8020668:	0e24      	lsrs	r4, r4, #24
 802066a:	9414      	str	r4, [sp, #80]	; 0x50
 802066c:	b170      	cbz	r0, 802068c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802066e:	eb07 0e01 	add.w	lr, r7, r1
 8020672:	5c79      	ldrb	r1, [r7, r1]
 8020674:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020678:	9109      	str	r1, [sp, #36]	; 0x24
 802067a:	0e09      	lsrs	r1, r1, #24
 802067c:	9111      	str	r1, [sp, #68]	; 0x44
 802067e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020682:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020686:	910e      	str	r1, [sp, #56]	; 0x38
 8020688:	0e09      	lsrs	r1, r1, #24
 802068a:	9115      	str	r1, [sp, #84]	; 0x54
 802068c:	b292      	uxth	r2, r2
 802068e:	b280      	uxth	r0, r0
 8020690:	fb02 f800 	mul.w	r8, r2, r0
 8020694:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020698:	0112      	lsls	r2, r2, #4
 802069a:	eba2 0e08 	sub.w	lr, r2, r8
 802069e:	b280      	uxth	r0, r0
 80206a0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80206a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80206a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80206a8:	fa1f fe8e 	uxth.w	lr, lr
 80206ac:	1a09      	subs	r1, r1, r0
 80206ae:	b289      	uxth	r1, r1
 80206b0:	fb0e f202 	mul.w	r2, lr, r2
 80206b4:	fb01 220c 	mla	r2, r1, ip, r2
 80206b8:	fb00 2204 	mla	r2, r0, r4, r2
 80206bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80206be:	fb08 2204 	mla	r2, r8, r4, r2
 80206c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80206c6:	2a00      	cmp	r2, #0
 80206c8:	f000 80e9 	beq.w	802089e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71a>
 80206cc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80206d0:	d019      	beq.n	8020706 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 80206d2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80206d6:	fb0c fa0a 	mul.w	sl, ip, sl
 80206da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206de:	fb0c fc03 	mul.w	ip, ip, r3
 80206e2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80206e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80206ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80206ee:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80206f2:	4453      	add	r3, sl
 80206f4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80206f8:	0a1b      	lsrs	r3, r3, #8
 80206fa:	0a3f      	lsrs	r7, r7, #8
 80206fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020700:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020704:	433b      	orrs	r3, r7
 8020706:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020708:	2cff      	cmp	r4, #255	; 0xff
 802070a:	d020      	beq.n	802074e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802070c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802070e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020712:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020714:	4367      	muls	r7, r4
 8020716:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020718:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802071c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802071e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020722:	fb04 fa0a 	mul.w	sl, r4, sl
 8020726:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802072a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802072e:	44bc      	add	ip, r7
 8020730:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020734:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020738:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802073c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020740:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020744:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020748:	ea4c 040a 	orr.w	r4, ip, sl
 802074c:	940d      	str	r4, [sp, #52]	; 0x34
 802074e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020750:	2cff      	cmp	r4, #255	; 0xff
 8020752:	d020      	beq.n	8020796 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8020754:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020756:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802075a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802075c:	4367      	muls	r7, r4
 802075e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020760:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020764:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020766:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802076a:	fb04 fa0a 	mul.w	sl, r4, sl
 802076e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020772:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020776:	44bc      	add	ip, r7
 8020778:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802077c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020780:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020784:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020788:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802078c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020790:	ea4c 040a 	orr.w	r4, ip, sl
 8020794:	9409      	str	r4, [sp, #36]	; 0x24
 8020796:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020798:	2cff      	cmp	r4, #255	; 0xff
 802079a:	d020      	beq.n	80207de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 802079c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802079e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80207a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80207a4:	4367      	muls	r7, r4
 80207a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80207a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80207ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80207ae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80207b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80207b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80207ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207be:	44bc      	add	ip, r7
 80207c0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80207c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80207c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80207d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80207d8:	ea4c 040a 	orr.w	r4, ip, sl
 80207dc:	940e      	str	r4, [sp, #56]	; 0x38
 80207de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80207e0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80207e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80207e6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80207ea:	fb0e f707 	mul.w	r7, lr, r7
 80207ee:	fb01 770c 	mla	r7, r1, ip, r7
 80207f2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80207f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80207f8:	fb00 770c 	mla	r7, r0, ip, r7
 80207fc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020800:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020802:	fb08 770c 	mla	r7, r8, ip, r7
 8020806:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802080a:	fb0e fe0c 	mul.w	lr, lr, ip
 802080e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020812:	fb01 e303 	mla	r3, r1, r3, lr
 8020816:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020818:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802081c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802081e:	fb00 330a 	mla	r3, r0, sl, r3
 8020822:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020826:	fb08 3c0c 	mla	ip, r8, ip, r3
 802082a:	f8b9 3000 	ldrh.w	r3, [r9]
 802082e:	43d2      	mvns	r2, r2
 8020830:	1218      	asrs	r0, r3, #8
 8020832:	b2d2      	uxtb	r2, r2
 8020834:	0a3f      	lsrs	r7, r7, #8
 8020836:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802083a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802083e:	4350      	muls	r0, r2
 8020840:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020844:	10d9      	asrs	r1, r3, #3
 8020846:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802084a:	00db      	lsls	r3, r3, #3
 802084c:	ea47 070c 	orr.w	r7, r7, ip
 8020850:	b2db      	uxtb	r3, r3
 8020852:	f100 0c01 	add.w	ip, r0, #1
 8020856:	4353      	muls	r3, r2
 8020858:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802085c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020860:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020864:	4351      	muls	r1, r2
 8020866:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802086a:	4a1a      	ldr	r2, [pc, #104]	; (80208d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802086c:	f103 0c01 	add.w	ip, r3, #1
 8020870:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020874:	fa5f fc87 	uxtb.w	ip, r7
 8020878:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802087c:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8020880:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8020884:	1c4b      	adds	r3, r1, #1
 8020886:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802088a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802088e:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8020892:	00ff      	lsls	r7, r7, #3
 8020894:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020898:	4338      	orrs	r0, r7
 802089a:	f8a9 0000 	strh.w	r0, [r9]
 802089e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80208a0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80208a2:	441a      	add	r2, r3
 80208a4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80208a6:	922d      	str	r2, [sp, #180]	; 0xb4
 80208a8:	f109 0902 	add.w	r9, r9, #2
 80208ac:	441d      	add	r5, r3
 80208ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80208b2:	e648      	b.n	8020546 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80208b4:	2800      	cmp	r0, #0
 80208b6:	f43f aee9 	beq.w	802068c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80208ba:	5c79      	ldrb	r1, [r7, r1]
 80208bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80208c0:	9109      	str	r1, [sp, #36]	; 0x24
 80208c2:	0e09      	lsrs	r1, r1, #24
 80208c4:	9111      	str	r1, [sp, #68]	; 0x44
 80208c6:	e6e1      	b.n	802068c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80208c8:	b01b      	add	sp, #108	; 0x6c
 80208ca:	ecbd 8b08 	vpop	{d8-d11}
 80208ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208d2:	bf00      	nop
 80208d4:	fffff800 	.word	0xfffff800

080208d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80208d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208dc:	b085      	sub	sp, #20
 80208de:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80208e2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80208e6:	9103      	str	r1, [sp, #12]
 80208e8:	fb05 7106 	mla	r1, r5, r6, r7
 80208ec:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80208f0:	2d00      	cmp	r5, #0
 80208f2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80208f6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80208fa:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80208fe:	9401      	str	r4, [sp, #4]
 8020900:	eb03 0901 	add.w	r9, r3, r1
 8020904:	f2c0 80c0 	blt.w	8020a88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8020908:	45a8      	cmp	r8, r5
 802090a:	f340 80bd 	ble.w	8020a88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 802090e:	2f00      	cmp	r7, #0
 8020910:	f2c0 80b6 	blt.w	8020a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8020914:	42be      	cmp	r6, r7
 8020916:	f340 80b3 	ble.w	8020a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 802091a:	f813 c001 	ldrb.w	ip, [r3, r1]
 802091e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8020922:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020926:	d019      	beq.n	802095c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8020928:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 802092c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020930:	435a      	muls	r2, r3
 8020932:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8020936:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802093a:	fb0c f403 	mul.w	r4, ip, r3
 802093e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8020942:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8020946:	441a      	add	r2, r3
 8020948:	f104 0320 	add.w	r3, r4, #32
 802094c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8020950:	0a1b      	lsrs	r3, r3, #8
 8020952:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8020956:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802095a:	4319      	orrs	r1, r3
 802095c:	b289      	uxth	r1, r1
 802095e:	1c7b      	adds	r3, r7, #1
 8020960:	f100 8097 	bmi.w	8020a92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8020964:	429e      	cmp	r6, r3
 8020966:	f340 8094 	ble.w	8020a92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802096a:	2800      	cmp	r0, #0
 802096c:	f000 8094 	beq.w	8020a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8020970:	f899 4001 	ldrb.w	r4, [r9, #1]
 8020974:	9b01      	ldr	r3, [sp, #4]
 8020976:	2cff      	cmp	r4, #255	; 0xff
 8020978:	885b      	ldrh	r3, [r3, #2]
 802097a:	d01b      	beq.n	80209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 802097c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8020980:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8020984:	fb0a f202 	mul.w	r2, sl, r2
 8020988:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802098c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8020990:	fb04 fa03 	mul.w	sl, r4, r3
 8020994:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8020998:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802099c:	441a      	add	r2, r3
 802099e:	f10a 0320 	add.w	r3, sl, #32
 80209a2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80209a6:	0a1b      	lsrs	r3, r3, #8
 80209a8:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80209ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80209b0:	ea4b 0303 	orr.w	r3, fp, r3
 80209b4:	b29b      	uxth	r3, r3
 80209b6:	3501      	adds	r5, #1
 80209b8:	d474      	bmi.n	8020aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80209ba:	45a8      	cmp	r8, r5
 80209bc:	dd72      	ble.n	8020aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80209be:	f1be 0f00 	cmp.w	lr, #0
 80209c2:	f000 8120 	beq.w	8020c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 80209c6:	2f00      	cmp	r7, #0
 80209c8:	db69      	blt.n	8020a9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80209ca:	42be      	cmp	r6, r7
 80209cc:	dd67      	ble.n	8020a9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80209ce:	f819 5006 	ldrb.w	r5, [r9, r6]
 80209d2:	9a01      	ldr	r2, [sp, #4]
 80209d4:	2dff      	cmp	r5, #255	; 0xff
 80209d6:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80209da:	d01c      	beq.n	8020a16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 80209dc:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80209e0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80209e4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80209e8:	fb05 fa0b 	mul.w	sl, r5, fp
 80209ec:	fb08 f802 	mul.w	r8, r8, r2
 80209f0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80209f4:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80209f8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80209fc:	4490      	add	r8, r2
 80209fe:	f10a 0220 	add.w	r2, sl, #32
 8020a02:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8020a06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a0a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8020a0e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020a12:	ea4b 0b0a 	orr.w	fp, fp, sl
 8020a16:	fa1f fb8b 	uxth.w	fp, fp
 8020a1a:	3701      	adds	r7, #1
 8020a1c:	d447      	bmi.n	8020aae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8020a1e:	42be      	cmp	r6, r7
 8020a20:	dd45      	ble.n	8020aae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8020a22:	2800      	cmp	r0, #0
 8020a24:	d046      	beq.n	8020ab4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8020a26:	3601      	adds	r6, #1
 8020a28:	9a01      	ldr	r2, [sp, #4]
 8020a2a:	f819 7006 	ldrb.w	r7, [r9, r6]
 8020a2e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8020a32:	2fff      	cmp	r7, #255	; 0xff
 8020a34:	d01a      	beq.n	8020a6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8020a36:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8020a3a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8020a3e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020a42:	fb07 f902 	mul.w	r9, r7, r2
 8020a46:	fb08 f806 	mul.w	r8, r8, r6
 8020a4a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8020a4e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8020a52:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020a56:	44b0      	add	r8, r6
 8020a58:	f109 0620 	add.w	r6, r9, #32
 8020a5c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8020a60:	0a36      	lsrs	r6, r6, #8
 8020a62:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8020a66:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020a6a:	4332      	orrs	r2, r6
 8020a6c:	b292      	uxth	r2, r2
 8020a6e:	280f      	cmp	r0, #15
 8020a70:	d922      	bls.n	8020ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8020a72:	4b69      	ldr	r3, [pc, #420]	; (8020c18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8020a74:	4a69      	ldr	r2, [pc, #420]	; (8020c1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8020a76:	486a      	ldr	r0, [pc, #424]	; (8020c20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8020a78:	f240 210d 	movw	r1, #525	; 0x20d
 8020a7c:	f004 fb1a 	bl	80250b4 <__assert_func>
 8020a80:	f04f 0c00 	mov.w	ip, #0
 8020a84:	4661      	mov	r1, ip
 8020a86:	e76a      	b.n	802095e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8020a88:	2400      	movs	r4, #0
 8020a8a:	46a4      	mov	ip, r4
 8020a8c:	4623      	mov	r3, r4
 8020a8e:	4621      	mov	r1, r4
 8020a90:	e791      	b.n	80209b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8020a92:	2400      	movs	r4, #0
 8020a94:	4623      	mov	r3, r4
 8020a96:	e78e      	b.n	80209b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8020a98:	4604      	mov	r4, r0
 8020a9a:	4603      	mov	r3, r0
 8020a9c:	e78b      	b.n	80209b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8020a9e:	2500      	movs	r5, #0
 8020aa0:	46ab      	mov	fp, r5
 8020aa2:	e7ba      	b.n	8020a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8020aa4:	2700      	movs	r7, #0
 8020aa6:	463d      	mov	r5, r7
 8020aa8:	463a      	mov	r2, r7
 8020aaa:	46bb      	mov	fp, r7
 8020aac:	e7df      	b.n	8020a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8020aae:	2700      	movs	r7, #0
 8020ab0:	463a      	mov	r2, r7
 8020ab2:	e7dc      	b.n	8020a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8020ab4:	4607      	mov	r7, r0
 8020ab6:	4602      	mov	r2, r0
 8020ab8:	f1be 0f0f 	cmp.w	lr, #15
 8020abc:	d8d9      	bhi.n	8020a72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8020abe:	b286      	uxth	r6, r0
 8020ac0:	fa1f f98e 	uxth.w	r9, lr
 8020ac4:	fb06 f809 	mul.w	r8, r6, r9
 8020ac8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020acc:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8020ad0:	0136      	lsls	r6, r6, #4
 8020ad2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020ad6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020ada:	9601      	str	r6, [sp, #4]
 8020adc:	ea4a 0101 	orr.w	r1, sl, r1
 8020ae0:	fa1f f689 	uxth.w	r6, r9
 8020ae4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8020ae8:	fb10 f90e 	smulbb	r9, r0, lr
 8020aec:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8020af0:	9602      	str	r6, [sp, #8]
 8020af2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020af6:	460e      	mov	r6, r1
 8020af8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020afc:	f1ce 0110 	rsb	r1, lr, #16
 8020b00:	1a09      	subs	r1, r1, r0
 8020b02:	ea4a 0303 	orr.w	r3, sl, r3
 8020b06:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8020b0a:	4343      	muls	r3, r0
 8020b0c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8020b10:	9801      	ldr	r0, [sp, #4]
 8020b12:	fb01 3106 	mla	r1, r1, r6, r3
 8020b16:	9e02      	ldr	r6, [sp, #8]
 8020b18:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8020b1c:	1b80      	subs	r0, r0, r6
 8020b1e:	9e01      	ldr	r6, [sp, #4]
 8020b20:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020b24:	eba6 0608 	sub.w	r6, r6, r8
 8020b28:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020b2c:	b2b6      	uxth	r6, r6
 8020b2e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020b32:	ea4a 0202 	orr.w	r2, sl, r2
 8020b36:	b280      	uxth	r0, r0
 8020b38:	4374      	muls	r4, r6
 8020b3a:	fb09 1302 	mla	r3, r9, r2, r1
 8020b3e:	fb0c 4400 	mla	r4, ip, r0, r4
 8020b42:	9a03      	ldr	r2, [sp, #12]
 8020b44:	9802      	ldr	r0, [sp, #8]
 8020b46:	8811      	ldrh	r1, [r2, #0]
 8020b48:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8020b4c:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8020b50:	fb00 4505 	mla	r5, r0, r5, r4
 8020b54:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020b58:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020b5c:	fb08 5707 	mla	r7, r8, r7, r5
 8020b60:	ea4a 0b0b 	orr.w	fp, sl, fp
 8020b64:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8020b68:	b292      	uxth	r2, r2
 8020b6a:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8020b6e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020b72:	4357      	muls	r7, r2
 8020b74:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8020b78:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020b7c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020b80:	f107 0801 	add.w	r8, r7, #1
 8020b84:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020b88:	ea43 0e0e 	orr.w	lr, r3, lr
 8020b8c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8020b90:	fa1f f38e 	uxth.w	r3, lr
 8020b94:	1208      	asrs	r0, r1, #8
 8020b96:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8020b9a:	b2ff      	uxtb	r7, r7
 8020b9c:	121c      	asrs	r4, r3, #8
 8020b9e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020ba2:	fb10 f007 	smulbb	r0, r0, r7
 8020ba6:	10cd      	asrs	r5, r1, #3
 8020ba8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020bac:	00c9      	lsls	r1, r1, #3
 8020bae:	fb04 0402 	mla	r4, r4, r2, r0
 8020bb2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020bb6:	10d8      	asrs	r0, r3, #3
 8020bb8:	b2c9      	uxtb	r1, r1
 8020bba:	00db      	lsls	r3, r3, #3
 8020bbc:	fb11 f107 	smulbb	r1, r1, r7
 8020bc0:	fb15 f507 	smulbb	r5, r5, r7
 8020bc4:	b2db      	uxtb	r3, r3
 8020bc6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020bca:	fb00 5002 	mla	r0, r0, r2, r5
 8020bce:	fb03 1202 	mla	r2, r3, r2, r1
 8020bd2:	b2a4      	uxth	r4, r4
 8020bd4:	b292      	uxth	r2, r2
 8020bd6:	1c63      	adds	r3, r4, #1
 8020bd8:	1c51      	adds	r1, r2, #1
 8020bda:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8020bde:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020be2:	b280      	uxth	r0, r0
 8020be4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020be8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020bec:	4313      	orrs	r3, r2
 8020bee:	1c42      	adds	r2, r0, #1
 8020bf0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020bf4:	0940      	lsrs	r0, r0, #5
 8020bf6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020bfa:	9a03      	ldr	r2, [sp, #12]
 8020bfc:	4303      	orrs	r3, r0
 8020bfe:	8013      	strh	r3, [r2, #0]
 8020c00:	b005      	add	sp, #20
 8020c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c06:	280f      	cmp	r0, #15
 8020c08:	f63f af33 	bhi.w	8020a72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8020c0c:	4677      	mov	r7, lr
 8020c0e:	4675      	mov	r5, lr
 8020c10:	4672      	mov	r2, lr
 8020c12:	46f3      	mov	fp, lr
 8020c14:	e753      	b.n	8020abe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8020c16:	bf00      	nop
 8020c18:	0802abd6 	.word	0x0802abd6
 8020c1c:	0802b199 	.word	0x0802b199
 8020c20:	0802acbf 	.word	0x0802acbf

08020c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c28:	ed2d 8b08 	vpush	{d8-d11}
 8020c2c:	b097      	sub	sp, #92	; 0x5c
 8020c2e:	eeb0 aa40 	vmov.f32	s20, s0
 8020c32:	9214      	str	r2, [sp, #80]	; 0x50
 8020c34:	9308      	str	r3, [sp, #32]
 8020c36:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020c38:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020c3c:	9312      	str	r3, [sp, #72]	; 0x48
 8020c3e:	9111      	str	r1, [sp, #68]	; 0x44
 8020c40:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020c44:	9015      	str	r0, [sp, #84]	; 0x54
 8020c46:	6850      	ldr	r0, [r2, #4]
 8020c48:	6812      	ldr	r2, [r2, #0]
 8020c4a:	fb00 1303 	mla	r3, r0, r3, r1
 8020c4e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020c52:	9309      	str	r3, [sp, #36]	; 0x24
 8020c54:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020c56:	681b      	ldr	r3, [r3, #0]
 8020c58:	930b      	str	r3, [sp, #44]	; 0x2c
 8020c5a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020c5c:	685b      	ldr	r3, [r3, #4]
 8020c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8020c60:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8020c64:	930a      	str	r3, [sp, #40]	; 0x28
 8020c66:	eef0 9a60 	vmov.f32	s19, s1
 8020c6a:	eeb0 9a41 	vmov.f32	s18, s2
 8020c6e:	eeb0 8a62 	vmov.f32	s16, s5
 8020c72:	eef0 8a43 	vmov.f32	s17, s6
 8020c76:	eef0 ba44 	vmov.f32	s23, s8
 8020c7a:	eeb0 ba64 	vmov.f32	s22, s9
 8020c7e:	eef0 aa45 	vmov.f32	s21, s10
 8020c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	dc03      	bgt.n	8020c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020c88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	f340 83cb 	ble.w	8021426 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8020c90:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020c92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020c9a:	1e48      	subs	r0, r1, #1
 8020c9c:	1e55      	subs	r5, r2, #1
 8020c9e:	9b08      	ldr	r3, [sp, #32]
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	f340 81a3 	ble.w	8020fec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8020ca6:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8020ca8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020caa:	1436      	asrs	r6, r6, #16
 8020cac:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020cb0:	d406      	bmi.n	8020cc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020cb2:	4286      	cmp	r6, r0
 8020cb4:	da04      	bge.n	8020cc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	db02      	blt.n	8020cc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020cba:	42ab      	cmp	r3, r5
 8020cbc:	f2c0 8197 	blt.w	8020fee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8020cc0:	3601      	adds	r6, #1
 8020cc2:	f100 8184 	bmi.w	8020fce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020cc6:	42b1      	cmp	r1, r6
 8020cc8:	f2c0 8181 	blt.w	8020fce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020ccc:	3301      	adds	r3, #1
 8020cce:	f100 817e 	bmi.w	8020fce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020cd2:	429a      	cmp	r2, r3
 8020cd4:	f2c0 817b 	blt.w	8020fce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020cd8:	9b08      	ldr	r3, [sp, #32]
 8020cda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020cdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8020cde:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020ce2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020ce4:	2b00      	cmp	r3, #0
 8020ce6:	f340 81a4 	ble.w	8021032 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8020cea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020cec:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8020cee:	1418      	asrs	r0, r3, #16
 8020cf0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020cf2:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020cf6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020cf8:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8020cfc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020cfe:	142d      	asrs	r5, r5, #16
 8020d00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8020d04:	f100 81f8 	bmi.w	80210f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8020d08:	f102 3eff 	add.w	lr, r2, #4294967295
 8020d0c:	4575      	cmp	r5, lr
 8020d0e:	f280 81f3 	bge.w	80210f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8020d12:	2800      	cmp	r0, #0
 8020d14:	f2c0 81f0 	blt.w	80210f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8020d18:	f103 3eff 	add.w	lr, r3, #4294967295
 8020d1c:	4570      	cmp	r0, lr
 8020d1e:	f280 81eb 	bge.w	80210f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8020d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d24:	b212      	sxth	r2, r2
 8020d26:	fb00 5002 	mla	r0, r0, r2, r5
 8020d2a:	fa1f fe81 	uxth.w	lr, r1
 8020d2e:	eb03 0a00 	add.w	sl, r3, r0
 8020d32:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8020d36:	f813 9000 	ldrb.w	r9, [r3, r0]
 8020d3a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020d3e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8020d42:	b29b      	uxth	r3, r3
 8020d44:	f1bc 0f00 	cmp.w	ip, #0
 8020d48:	f000 81b9 	beq.w	80210be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8020d4c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8020d50:	940d      	str	r4, [sp, #52]	; 0x34
 8020d52:	eb0a 0b02 	add.w	fp, sl, r2
 8020d56:	fa1f fa8c 	uxth.w	sl, ip
 8020d5a:	fb0a fe0e 	mul.w	lr, sl, lr
 8020d5e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8020d62:	fa1f fa8a 	uxth.w	sl, sl
 8020d66:	eba5 050e 	sub.w	r5, r5, lr
 8020d6a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020d6e:	940e      	str	r4, [sp, #56]	; 0x38
 8020d70:	eba3 030a 	sub.w	r3, r3, sl
 8020d74:	b2ad      	uxth	r5, r5
 8020d76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020d78:	b29b      	uxth	r3, r3
 8020d7a:	fb08 f505 	mul.w	r5, r8, r5
 8020d7e:	fb09 5303 	mla	r3, r9, r3, r5
 8020d82:	fb0a 3304 	mla	r3, sl, r4, r3
 8020d86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020d88:	fb0e 3304 	mla	r3, lr, r4, r3
 8020d8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	f000 810f 	beq.w	8020fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8020d96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020d9c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8020da0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8020da4:	f000 8190 	beq.w	80210c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8020da8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8020dac:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020db0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020db4:	fb09 f000 	mul.w	r0, r9, r0
 8020db8:	fb0a fe0e 	mul.w	lr, sl, lr
 8020dbc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8020dc0:	f100 0b20 	add.w	fp, r0, #32
 8020dc4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020dc8:	44ce      	add	lr, r9
 8020dca:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8020dce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020dd2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020dd6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020dda:	ea4e 0909 	orr.w	r9, lr, r9
 8020dde:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020de2:	8868      	ldrh	r0, [r5, #2]
 8020de4:	d019      	beq.n	8020e1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020de6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8020dea:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020dee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020df2:	fb08 f800 	mul.w	r8, r8, r0
 8020df6:	fb0a fe0e 	mul.w	lr, sl, lr
 8020dfa:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8020dfe:	f108 0b20 	add.w	fp, r8, #32
 8020e02:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020e06:	4486      	add	lr, r0
 8020e08:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8020e0c:	0a00      	lsrs	r0, r0, #8
 8020e0e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020e12:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020e16:	ea4e 0000 	orr.w	r0, lr, r0
 8020e1a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8020e1e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8020e22:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020e26:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020e2a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020e2e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020e32:	ea4e 0909 	orr.w	r9, lr, r9
 8020e36:	ea4a 0000 	orr.w	r0, sl, r0
 8020e3a:	f1bc 0f00 	cmp.w	ip, #0
 8020e3e:	f000 8145 	beq.w	80210cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8020e42:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8020e46:	3a01      	subs	r2, #1
 8020e48:	0052      	lsls	r2, r2, #1
 8020e4a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020e4c:	3202      	adds	r2, #2
 8020e4e:	2cff      	cmp	r4, #255	; 0xff
 8020e50:	eb05 0e02 	add.w	lr, r5, r2
 8020e54:	5aaa      	ldrh	r2, [r5, r2]
 8020e56:	d018      	beq.n	8020e8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8020e58:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8020e5c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020e60:	fb04 fa02 	mul.w	sl, r4, r2
 8020e64:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020e68:	fb08 f805 	mul.w	r8, r8, r5
 8020e6c:	f10a 0520 	add.w	r5, sl, #32
 8020e70:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8020e74:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8020e78:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020e7c:	4442      	add	r2, r8
 8020e7e:	0a2d      	lsrs	r5, r5, #8
 8020e80:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8020e84:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e88:	432a      	orrs	r2, r5
 8020e8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020e8c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8020e90:	2cff      	cmp	r4, #255	; 0xff
 8020e92:	d01a      	beq.n	8020eca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020e94:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8020e98:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e9c:	fb04 fa05 	mul.w	sl, r4, r5
 8020ea0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020ea4:	fb08 f80e 	mul.w	r8, r8, lr
 8020ea8:	f10a 0e20 	add.w	lr, sl, #32
 8020eac:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8020eb0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8020eb4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020eb8:	4445      	add	r5, r8
 8020eba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ebe:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8020ec2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8020ec6:	ea45 050e 	orr.w	r5, r5, lr
 8020eca:	fb1c fe01 	smulbb	lr, ip, r1
 8020ece:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8020ed2:	f1cc 0810 	rsb	r8, ip, #16
 8020ed6:	eba8 0801 	sub.w	r8, r8, r1
 8020eda:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020ede:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8020ee2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8020ee6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8020eea:	4341      	muls	r1, r0
 8020eec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020ef0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020ef4:	ea4a 0202 	orr.w	r2, sl, r2
 8020ef8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8020efc:	fb09 1108 	mla	r1, r9, r8, r1
 8020f00:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020f04:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8020f08:	fb0c 1102 	mla	r1, ip, r2, r1
 8020f0c:	ea4b 0505 	orr.w	r5, fp, r5
 8020f10:	fb0e 1e05 	mla	lr, lr, r5, r1
 8020f14:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8020f18:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020f1c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020f20:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020f24:	ea42 0e0e 	orr.w	lr, r2, lr
 8020f28:	fa1f f28e 	uxth.w	r2, lr
 8020f2c:	2bff      	cmp	r3, #255	; 0xff
 8020f2e:	d103      	bne.n	8020f38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8020f30:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020f32:	29ff      	cmp	r1, #255	; 0xff
 8020f34:	f000 80de 	beq.w	80210f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8020f38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020f3a:	8838      	ldrh	r0, [r7, #0]
 8020f3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020f3e:	434b      	muls	r3, r1
 8020f40:	f103 0c01 	add.w	ip, r3, #1
 8020f44:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8020f48:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 8020f4c:	1205      	asrs	r5, r0, #8
 8020f4e:	fa5f fc8c 	uxtb.w	ip, ip
 8020f52:	1213      	asrs	r3, r2, #8
 8020f54:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020f58:	fb15 f50c 	smulbb	r5, r5, ip
 8020f5c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020f60:	fb03 5301 	mla	r3, r3, r1, r5
 8020f64:	b29d      	uxth	r5, r3
 8020f66:	10c3      	asrs	r3, r0, #3
 8020f68:	00c0      	lsls	r0, r0, #3
 8020f6a:	10d1      	asrs	r1, r2, #3
 8020f6c:	b2c0      	uxtb	r0, r0
 8020f6e:	00d2      	lsls	r2, r2, #3
 8020f70:	fb10 f00c 	smulbb	r0, r0, ip
 8020f74:	b2d2      	uxtb	r2, r2
 8020f76:	fb02 0204 	mla	r2, r2, r4, r0
 8020f7a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020f7e:	fb13 f30c 	smulbb	r3, r3, ip
 8020f82:	b292      	uxth	r2, r2
 8020f84:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020f88:	fb01 3104 	mla	r1, r1, r4, r3
 8020f8c:	1c50      	adds	r0, r2, #1
 8020f8e:	1c6b      	adds	r3, r5, #1
 8020f90:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8020f94:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020f98:	b289      	uxth	r1, r1
 8020f9a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020f9e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020fa2:	4313      	orrs	r3, r2
 8020fa4:	1c4a      	adds	r2, r1, #1
 8020fa6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020faa:	0949      	lsrs	r1, r1, #5
 8020fac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020fb0:	430b      	orrs	r3, r1
 8020fb2:	803b      	strh	r3, [r7, #0]
 8020fb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020fb6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020fb8:	4413      	add	r3, r2
 8020fba:	9329      	str	r3, [sp, #164]	; 0xa4
 8020fbc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020fbe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020fc0:	441a      	add	r2, r3
 8020fc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020fc4:	922a      	str	r2, [sp, #168]	; 0xa8
 8020fc6:	3b01      	subs	r3, #1
 8020fc8:	3702      	adds	r7, #2
 8020fca:	9313      	str	r3, [sp, #76]	; 0x4c
 8020fcc:	e689      	b.n	8020ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8020fce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020fd0:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8020fd2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8020fd4:	4433      	add	r3, r6
 8020fd6:	9329      	str	r3, [sp, #164]	; 0xa4
 8020fd8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020fda:	441c      	add	r4, r3
 8020fdc:	9b08      	ldr	r3, [sp, #32]
 8020fde:	942a      	str	r4, [sp, #168]	; 0xa8
 8020fe0:	3b01      	subs	r3, #1
 8020fe2:	9308      	str	r3, [sp, #32]
 8020fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fe6:	3302      	adds	r3, #2
 8020fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8020fea:	e658      	b.n	8020c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020fec:	d028      	beq.n	8021040 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8020fee:	9b08      	ldr	r3, [sp, #32]
 8020ff0:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020ff2:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8020ff4:	3b01      	subs	r3, #1
 8020ff6:	fb00 5003 	mla	r0, r0, r3, r5
 8020ffa:	1400      	asrs	r0, r0, #16
 8020ffc:	f53f ae6c 	bmi.w	8020cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021000:	3901      	subs	r1, #1
 8021002:	4288      	cmp	r0, r1
 8021004:	f6bf ae68 	bge.w	8020cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021008:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802100a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 802100c:	fb01 0303 	mla	r3, r1, r3, r0
 8021010:	141b      	asrs	r3, r3, #16
 8021012:	f53f ae61 	bmi.w	8020cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021016:	3a01      	subs	r2, #1
 8021018:	4293      	cmp	r3, r2
 802101a:	f6bf ae5d 	bge.w	8020cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802101e:	9b08      	ldr	r3, [sp, #32]
 8021020:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021024:	9313      	str	r3, [sp, #76]	; 0x4c
 8021026:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802102a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802102c:	2b00      	cmp	r3, #0
 802102e:	f300 8082 	bgt.w	8021136 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8021032:	9b08      	ldr	r3, [sp, #32]
 8021034:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802103a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802103e:	9309      	str	r3, [sp, #36]	; 0x24
 8021040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021042:	2b00      	cmp	r3, #0
 8021044:	f340 81ef 	ble.w	8021426 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8021048:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802104c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021050:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021054:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021056:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802105a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802105e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021062:	eef0 6a48 	vmov.f32	s13, s16
 8021066:	ee69 7a27 	vmul.f32	s15, s18, s15
 802106a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802106e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021072:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021076:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802107a:	eef0 6a68 	vmov.f32	s13, s17
 802107e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021082:	ee18 2a10 	vmov	r2, s16
 8021086:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802108a:	fb92 f3f3 	sdiv	r3, r2, r3
 802108e:	ee18 2a90 	vmov	r2, s17
 8021092:	932b      	str	r3, [sp, #172]	; 0xac
 8021094:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021096:	fb92 f3f3 	sdiv	r3, r2, r3
 802109a:	932c      	str	r3, [sp, #176]	; 0xb0
 802109c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802109e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80210a0:	3b01      	subs	r3, #1
 80210a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210a6:	9311      	str	r3, [sp, #68]	; 0x44
 80210a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80210aa:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80210ae:	bf08      	it	eq
 80210b0:	4613      	moveq	r3, r2
 80210b2:	9308      	str	r3, [sp, #32]
 80210b4:	eef0 8a67 	vmov.f32	s17, s15
 80210b8:	eeb0 8a47 	vmov.f32	s16, s14
 80210bc:	e5e1      	b.n	8020c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80210be:	fb08 f505 	mul.w	r5, r8, r5
 80210c2:	fb09 5303 	mla	r3, r9, r3, r5
 80210c6:	e661      	b.n	8020d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 80210c8:	4681      	mov	r9, r0
 80210ca:	e688      	b.n	8020dde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80210cc:	f1c1 0210 	rsb	r2, r1, #16
 80210d0:	4341      	muls	r1, r0
 80210d2:	fb09 1902 	mla	r9, r9, r2, r1
 80210d6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80210da:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80210de:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80210e2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80210e6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80210ea:	ea42 0909 	orr.w	r9, r2, r9
 80210ee:	fa1f f289 	uxth.w	r2, r9
 80210f2:	e71b      	b.n	8020f2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80210f4:	803a      	strh	r2, [r7, #0]
 80210f6:	e75d      	b.n	8020fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80210f8:	f115 0e01 	adds.w	lr, r5, #1
 80210fc:	f53f af5a 	bmi.w	8020fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8021100:	4572      	cmp	r2, lr
 8021102:	f6ff af57 	blt.w	8020fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8021106:	f110 0e01 	adds.w	lr, r0, #1
 802110a:	f53f af53 	bmi.w	8020fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802110e:	4573      	cmp	r3, lr
 8021110:	f6ff af50 	blt.w	8020fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8021114:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021116:	9502      	str	r5, [sp, #8]
 8021118:	b21b      	sxth	r3, r3
 802111a:	b212      	sxth	r2, r2
 802111c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8021120:	9301      	str	r3, [sp, #4]
 8021122:	9200      	str	r2, [sp, #0]
 8021124:	e9cd c405 	strd	ip, r4, [sp, #20]
 8021128:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 802112c:	4639      	mov	r1, r7
 802112e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021130:	f7ff fbd2 	bl	80208d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8021134:	e73e      	b.n	8020fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8021136:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021138:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802113c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802113e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8021142:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021144:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021148:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802114a:	141f      	asrs	r7, r3, #16
 802114c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802114e:	141b      	asrs	r3, r3, #16
 8021150:	fb01 3707 	mla	r7, r1, r7, r3
 8021154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021156:	fa1f fc82 	uxth.w	ip, r2
 802115a:	eb03 0a07 	add.w	sl, r3, r7
 802115e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8021162:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021166:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802116a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802116e:	b29b      	uxth	r3, r3
 8021170:	2d00      	cmp	r5, #0
 8021172:	f000 813d 	beq.w	80213f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8021176:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802117a:	940f      	str	r4, [sp, #60]	; 0x3c
 802117c:	eb0a 0b01 	add.w	fp, sl, r1
 8021180:	fa1f fa85 	uxth.w	sl, r5
 8021184:	fb0a fc0c 	mul.w	ip, sl, ip
 8021188:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802118c:	fa1f fa8a 	uxth.w	sl, sl
 8021190:	eba0 000c 	sub.w	r0, r0, ip
 8021194:	eba3 030a 	sub.w	r3, r3, sl
 8021198:	b280      	uxth	r0, r0
 802119a:	fb08 f000 	mul.w	r0, r8, r0
 802119e:	b29b      	uxth	r3, r3
 80211a0:	fb09 0303 	mla	r3, r9, r3, r0
 80211a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80211a6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80211aa:	9410      	str	r4, [sp, #64]	; 0x40
 80211ac:	fb0a 3300 	mla	r3, sl, r0, r3
 80211b0:	fb0c 3304 	mla	r3, ip, r4, r3
 80211b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	f000 810b 	beq.w	80213d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 80211be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80211c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80211c2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80211c6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80211ca:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80211ce:	f000 8114 	beq.w	80213fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 80211d2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80211d6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80211da:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80211de:	fb09 f707 	mul.w	r7, r9, r7
 80211e2:	fb0a fc0c 	mul.w	ip, sl, ip
 80211e6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80211ea:	f107 0b20 	add.w	fp, r7, #32
 80211ee:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80211f2:	44cc      	add	ip, r9
 80211f4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80211f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80211fc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021200:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021204:	ea4c 0909 	orr.w	r9, ip, r9
 8021208:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802120c:	8847      	ldrh	r7, [r0, #2]
 802120e:	d019      	beq.n	8021244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 8021210:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021214:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021218:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802121c:	fb08 f807 	mul.w	r8, r8, r7
 8021220:	fb0a fc0c 	mul.w	ip, sl, ip
 8021224:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021228:	f108 0b20 	add.w	fp, r8, #32
 802122c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021230:	44bc      	add	ip, r7
 8021232:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021236:	0a3f      	lsrs	r7, r7, #8
 8021238:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802123c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021240:	ea4c 0707 	orr.w	r7, ip, r7
 8021244:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021248:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802124c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021250:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021254:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021258:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802125c:	ea4c 0909 	orr.w	r9, ip, r9
 8021260:	ea4a 0707 	orr.w	r7, sl, r7
 8021264:	2d00      	cmp	r5, #0
 8021266:	f000 80ca 	beq.w	80213fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 802126a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802126e:	3901      	subs	r1, #1
 8021270:	0049      	lsls	r1, r1, #1
 8021272:	3102      	adds	r1, #2
 8021274:	eb00 0c01 	add.w	ip, r0, r1
 8021278:	5a41      	ldrh	r1, [r0, r1]
 802127a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802127c:	28ff      	cmp	r0, #255	; 0xff
 802127e:	d019      	beq.n	80212b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 8021280:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021282:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8021286:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802128a:	fb04 fa01 	mul.w	sl, r4, r1
 802128e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021292:	fb08 f800 	mul.w	r8, r8, r0
 8021296:	f10a 0020 	add.w	r0, sl, #32
 802129a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802129e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80212a2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80212a6:	4441      	add	r1, r8
 80212a8:	0a00      	lsrs	r0, r0, #8
 80212aa:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80212ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80212b2:	4301      	orrs	r1, r0
 80212b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80212b6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80212ba:	2cff      	cmp	r4, #255	; 0xff
 80212bc:	d01a      	beq.n	80212f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80212be:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80212c2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80212c6:	fb04 fa00 	mul.w	sl, r4, r0
 80212ca:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80212ce:	fb08 f80c 	mul.w	r8, r8, ip
 80212d2:	f10a 0c20 	add.w	ip, sl, #32
 80212d6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80212da:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80212de:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80212e2:	4440      	add	r0, r8
 80212e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212e8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80212ec:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80212f0:	ea40 000c 	orr.w	r0, r0, ip
 80212f4:	fb15 fc02 	smulbb	ip, r5, r2
 80212f8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80212fc:	f1c5 0810 	rsb	r8, r5, #16
 8021300:	eba8 0802 	sub.w	r8, r8, r2
 8021304:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021308:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802130c:	437a      	muls	r2, r7
 802130e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021312:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8021316:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802131a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802131e:	fb09 2208 	mla	r2, r9, r8, r2
 8021322:	ea4a 0101 	orr.w	r1, sl, r1
 8021326:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802132a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802132e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021332:	fb05 2201 	mla	r2, r5, r1, r2
 8021336:	ea4b 0000 	orr.w	r0, fp, r0
 802133a:	fb0c 2200 	mla	r2, ip, r0, r2
 802133e:	0d57      	lsrs	r7, r2, #21
 8021340:	0952      	lsrs	r2, r2, #5
 8021342:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021346:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802134a:	433a      	orrs	r2, r7
 802134c:	2bff      	cmp	r3, #255	; 0xff
 802134e:	b292      	uxth	r2, r2
 8021350:	d102      	bne.n	8021358 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8021352:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021354:	29ff      	cmp	r1, #255	; 0xff
 8021356:	d063      	beq.n	8021420 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 8021358:	980a      	ldr	r0, [sp, #40]	; 0x28
 802135a:	f8be 1000 	ldrh.w	r1, [lr]
 802135e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021360:	4343      	muls	r3, r0
 8021362:	1c58      	adds	r0, r3, #1
 8021364:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8021368:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802136c:	1208      	asrs	r0, r1, #8
 802136e:	b2db      	uxtb	r3, r3
 8021370:	1215      	asrs	r5, r2, #8
 8021372:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021376:	fb10 f003 	smulbb	r0, r0, r3
 802137a:	10cf      	asrs	r7, r1, #3
 802137c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021380:	00c9      	lsls	r1, r1, #3
 8021382:	fb05 0504 	mla	r5, r5, r4, r0
 8021386:	b2c9      	uxtb	r1, r1
 8021388:	10d0      	asrs	r0, r2, #3
 802138a:	00d2      	lsls	r2, r2, #3
 802138c:	fb11 f103 	smulbb	r1, r1, r3
 8021390:	b2d2      	uxtb	r2, r2
 8021392:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021396:	fb02 1204 	mla	r2, r2, r4, r1
 802139a:	fb17 f703 	smulbb	r7, r7, r3
 802139e:	b2ad      	uxth	r5, r5
 80213a0:	b292      	uxth	r2, r2
 80213a2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80213a6:	fb00 7004 	mla	r0, r0, r4, r7
 80213aa:	1c6b      	adds	r3, r5, #1
 80213ac:	1c57      	adds	r7, r2, #1
 80213ae:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80213b2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80213b6:	b280      	uxth	r0, r0
 80213b8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80213bc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80213c0:	433d      	orrs	r5, r7
 80213c2:	1c47      	adds	r7, r0, #1
 80213c4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80213c8:	097f      	lsrs	r7, r7, #5
 80213ca:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80213ce:	433d      	orrs	r5, r7
 80213d0:	f8ae 5000 	strh.w	r5, [lr]
 80213d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80213d6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80213d8:	4413      	add	r3, r2
 80213da:	9329      	str	r3, [sp, #164]	; 0xa4
 80213dc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80213de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80213e0:	441a      	add	r2, r3
 80213e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80213e4:	922a      	str	r2, [sp, #168]	; 0xa8
 80213e6:	3b01      	subs	r3, #1
 80213e8:	f10e 0e02 	add.w	lr, lr, #2
 80213ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80213ee:	e61c      	b.n	802102a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 80213f0:	fb08 f000 	mul.w	r0, r8, r0
 80213f4:	fb09 0303 	mla	r3, r9, r3, r0
 80213f8:	e6dc      	b.n	80211b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 80213fa:	46b9      	mov	r9, r7
 80213fc:	e704      	b.n	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 80213fe:	f1c2 0110 	rsb	r1, r2, #16
 8021402:	437a      	muls	r2, r7
 8021404:	fb09 2901 	mla	r9, r9, r1, r2
 8021408:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802140c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021410:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021414:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021418:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802141c:	4302      	orrs	r2, r0
 802141e:	e795      	b.n	802134c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8021420:	f8ae 2000 	strh.w	r2, [lr]
 8021424:	e7d6      	b.n	80213d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8021426:	b017      	add	sp, #92	; 0x5c
 8021428:	ecbd 8b08 	vpop	{d8-d11}
 802142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021430 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021434:	b085      	sub	sp, #20
 8021436:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802143a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802143e:	9103      	str	r1, [sp, #12]
 8021440:	fb05 7106 	mla	r1, r5, r6, r7
 8021444:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8021448:	2d00      	cmp	r5, #0
 802144a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802144e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8021452:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021456:	9401      	str	r4, [sp, #4]
 8021458:	eb02 0901 	add.w	r9, r2, r1
 802145c:	f2c0 80c0 	blt.w	80215e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8021460:	45a8      	cmp	r8, r5
 8021462:	f340 80bd 	ble.w	80215e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8021466:	2f00      	cmp	r7, #0
 8021468:	f2c0 80b6 	blt.w	80215d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 802146c:	42be      	cmp	r6, r7
 802146e:	f340 80b3 	ble.w	80215d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8021472:	f812 c001 	ldrb.w	ip, [r2, r1]
 8021476:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 802147a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802147e:	d019      	beq.n	80214b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8021480:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8021484:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021488:	435a      	muls	r2, r3
 802148a:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 802148e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8021492:	fb0c f403 	mul.w	r4, ip, r3
 8021496:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802149a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802149e:	441a      	add	r2, r3
 80214a0:	f104 0320 	add.w	r3, r4, #32
 80214a4:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80214a8:	0a1b      	lsrs	r3, r3, #8
 80214aa:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80214ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214b2:	4319      	orrs	r1, r3
 80214b4:	b289      	uxth	r1, r1
 80214b6:	1c7b      	adds	r3, r7, #1
 80214b8:	f100 8097 	bmi.w	80215ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80214bc:	429e      	cmp	r6, r3
 80214be:	f340 8094 	ble.w	80215ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80214c2:	2800      	cmp	r0, #0
 80214c4:	f000 8094 	beq.w	80215f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 80214c8:	f899 4001 	ldrb.w	r4, [r9, #1]
 80214cc:	9b01      	ldr	r3, [sp, #4]
 80214ce:	2cff      	cmp	r4, #255	; 0xff
 80214d0:	885b      	ldrh	r3, [r3, #2]
 80214d2:	d01b      	beq.n	802150c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 80214d4:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80214d8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80214dc:	fb0a f202 	mul.w	r2, sl, r2
 80214e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214e4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80214e8:	fb04 fa03 	mul.w	sl, r4, r3
 80214ec:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80214f0:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80214f4:	441a      	add	r2, r3
 80214f6:	f10a 0320 	add.w	r3, sl, #32
 80214fa:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80214fe:	0a1b      	lsrs	r3, r3, #8
 8021500:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8021504:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021508:	ea4b 0303 	orr.w	r3, fp, r3
 802150c:	b29b      	uxth	r3, r3
 802150e:	3501      	adds	r5, #1
 8021510:	d474      	bmi.n	80215fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8021512:	45a8      	cmp	r8, r5
 8021514:	dd72      	ble.n	80215fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8021516:	f1be 0f00 	cmp.w	lr, #0
 802151a:	f000 8111 	beq.w	8021740 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 802151e:	2f00      	cmp	r7, #0
 8021520:	db69      	blt.n	80215f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8021522:	42be      	cmp	r6, r7
 8021524:	dd67      	ble.n	80215f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8021526:	f819 5006 	ldrb.w	r5, [r9, r6]
 802152a:	9a01      	ldr	r2, [sp, #4]
 802152c:	2dff      	cmp	r5, #255	; 0xff
 802152e:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8021532:	d01c      	beq.n	802156e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8021534:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8021538:	ea4f 08e5 	mov.w	r8, r5, asr #3
 802153c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021540:	fb05 fa0b 	mul.w	sl, r5, fp
 8021544:	fb08 f802 	mul.w	r8, r8, r2
 8021548:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802154c:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8021550:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021554:	4490      	add	r8, r2
 8021556:	f10a 0220 	add.w	r2, sl, #32
 802155a:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 802155e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021562:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8021566:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802156a:	ea4b 0b0a 	orr.w	fp, fp, sl
 802156e:	fa1f fb8b 	uxth.w	fp, fp
 8021572:	3701      	adds	r7, #1
 8021574:	d447      	bmi.n	8021606 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8021576:	42be      	cmp	r6, r7
 8021578:	dd45      	ble.n	8021606 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802157a:	2800      	cmp	r0, #0
 802157c:	d046      	beq.n	802160c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 802157e:	3601      	adds	r6, #1
 8021580:	9a01      	ldr	r2, [sp, #4]
 8021582:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021586:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 802158a:	2fff      	cmp	r7, #255	; 0xff
 802158c:	d01a      	beq.n	80215c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 802158e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8021592:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8021596:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802159a:	fb07 f902 	mul.w	r9, r7, r2
 802159e:	fb08 f806 	mul.w	r8, r8, r6
 80215a2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80215a6:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80215aa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80215ae:	44b0      	add	r8, r6
 80215b0:	f109 0620 	add.w	r6, r9, #32
 80215b4:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80215b8:	0a36      	lsrs	r6, r6, #8
 80215ba:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80215be:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80215c2:	4332      	orrs	r2, r6
 80215c4:	b292      	uxth	r2, r2
 80215c6:	280f      	cmp	r0, #15
 80215c8:	d922      	bls.n	8021610 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80215ca:	4b61      	ldr	r3, [pc, #388]	; (8021750 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 80215cc:	4a61      	ldr	r2, [pc, #388]	; (8021754 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 80215ce:	4862      	ldr	r0, [pc, #392]	; (8021758 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 80215d0:	f240 210d 	movw	r1, #525	; 0x20d
 80215d4:	f003 fd6e 	bl	80250b4 <__assert_func>
 80215d8:	f04f 0c00 	mov.w	ip, #0
 80215dc:	4661      	mov	r1, ip
 80215de:	e76a      	b.n	80214b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80215e0:	2400      	movs	r4, #0
 80215e2:	46a4      	mov	ip, r4
 80215e4:	4623      	mov	r3, r4
 80215e6:	4621      	mov	r1, r4
 80215e8:	e791      	b.n	802150e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80215ea:	2400      	movs	r4, #0
 80215ec:	4623      	mov	r3, r4
 80215ee:	e78e      	b.n	802150e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80215f0:	4604      	mov	r4, r0
 80215f2:	4603      	mov	r3, r0
 80215f4:	e78b      	b.n	802150e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80215f6:	2500      	movs	r5, #0
 80215f8:	46ab      	mov	fp, r5
 80215fa:	e7ba      	b.n	8021572 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 80215fc:	2700      	movs	r7, #0
 80215fe:	463d      	mov	r5, r7
 8021600:	463a      	mov	r2, r7
 8021602:	46bb      	mov	fp, r7
 8021604:	e7df      	b.n	80215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8021606:	2700      	movs	r7, #0
 8021608:	463a      	mov	r2, r7
 802160a:	e7dc      	b.n	80215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 802160c:	4607      	mov	r7, r0
 802160e:	4602      	mov	r2, r0
 8021610:	f1be 0f0f 	cmp.w	lr, #15
 8021614:	d8d9      	bhi.n	80215ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8021616:	b286      	uxth	r6, r0
 8021618:	fa1f f98e 	uxth.w	r9, lr
 802161c:	fb06 f809 	mul.w	r8, r6, r9
 8021620:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021624:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021628:	0136      	lsls	r6, r6, #4
 802162a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802162e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021632:	9601      	str	r6, [sp, #4]
 8021634:	ea4a 0101 	orr.w	r1, sl, r1
 8021638:	fa1f f689 	uxth.w	r6, r9
 802163c:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8021640:	fb10 f90e 	smulbb	r9, r0, lr
 8021644:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8021648:	9602      	str	r6, [sp, #8]
 802164a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802164e:	460e      	mov	r6, r1
 8021650:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021654:	f1ce 0110 	rsb	r1, lr, #16
 8021658:	1a09      	subs	r1, r1, r0
 802165a:	ea4a 0303 	orr.w	r3, sl, r3
 802165e:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8021662:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021666:	4343      	muls	r3, r0
 8021668:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 802166c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021670:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021674:	fb01 3106 	mla	r1, r1, r6, r3
 8021678:	ea4a 0202 	orr.w	r2, sl, r2
 802167c:	fb09 1302 	mla	r3, r9, r2, r1
 8021680:	9901      	ldr	r1, [sp, #4]
 8021682:	9802      	ldr	r0, [sp, #8]
 8021684:	9a03      	ldr	r2, [sp, #12]
 8021686:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802168a:	1a09      	subs	r1, r1, r0
 802168c:	9801      	ldr	r0, [sp, #4]
 802168e:	8812      	ldrh	r2, [r2, #0]
 8021690:	eba0 0608 	sub.w	r6, r0, r8
 8021694:	b2b6      	uxth	r6, r6
 8021696:	b289      	uxth	r1, r1
 8021698:	4374      	muls	r4, r6
 802169a:	fb0c 4401 	mla	r4, ip, r1, r4
 802169e:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80216a2:	9902      	ldr	r1, [sp, #8]
 80216a4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80216a8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80216ac:	fb01 4505 	mla	r5, r1, r5, r4
 80216b0:	ea4a 0b0b 	orr.w	fp, sl, fp
 80216b4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80216b8:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80216bc:	fb08 5707 	mla	r7, r8, r7, r5
 80216c0:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80216c4:	1211      	asrs	r1, r2, #8
 80216c6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80216ca:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80216ce:	b2ff      	uxtb	r7, r7
 80216d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80216d4:	10d0      	asrs	r0, r2, #3
 80216d6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80216da:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80216de:	00d2      	lsls	r2, r2, #3
 80216e0:	4379      	muls	r1, r7
 80216e2:	ea43 0e0e 	orr.w	lr, r3, lr
 80216e6:	b2d2      	uxtb	r2, r2
 80216e8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80216ec:	fa1f f38e 	uxth.w	r3, lr
 80216f0:	4378      	muls	r0, r7
 80216f2:	4357      	muls	r7, r2
 80216f4:	1c4a      	adds	r2, r1, #1
 80216f6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80216fa:	1219      	asrs	r1, r3, #8
 80216fc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021700:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8021704:	4a15      	ldr	r2, [pc, #84]	; (802175c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 8021706:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 802170a:	1c42      	adds	r2, r0, #1
 802170c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021710:	10da      	asrs	r2, r3, #3
 8021712:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021716:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802171a:	00d2      	lsls	r2, r2, #3
 802171c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021720:	430a      	orrs	r2, r1
 8021722:	00db      	lsls	r3, r3, #3
 8021724:	1c79      	adds	r1, r7, #1
 8021726:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802172a:	b2db      	uxtb	r3, r3
 802172c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021730:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8021734:	4313      	orrs	r3, r2
 8021736:	9a03      	ldr	r2, [sp, #12]
 8021738:	8013      	strh	r3, [r2, #0]
 802173a:	b005      	add	sp, #20
 802173c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021740:	280f      	cmp	r0, #15
 8021742:	f63f af42 	bhi.w	80215ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8021746:	4677      	mov	r7, lr
 8021748:	4675      	mov	r5, lr
 802174a:	4672      	mov	r2, lr
 802174c:	46f3      	mov	fp, lr
 802174e:	e762      	b.n	8021616 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8021750:	0802abd6 	.word	0x0802abd6
 8021754:	0802b199 	.word	0x0802b199
 8021758:	0802acbf 	.word	0x0802acbf
 802175c:	fffff800 	.word	0xfffff800

08021760 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021764:	ed2d 8b08 	vpush	{d8-d11}
 8021768:	b093      	sub	sp, #76	; 0x4c
 802176a:	eeb0 aa40 	vmov.f32	s20, s0
 802176e:	9210      	str	r2, [sp, #64]	; 0x40
 8021770:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021772:	910e      	str	r1, [sp, #56]	; 0x38
 8021774:	9306      	str	r3, [sp, #24]
 8021776:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802177a:	9011      	str	r0, [sp, #68]	; 0x44
 802177c:	6850      	ldr	r0, [r2, #4]
 802177e:	6812      	ldr	r2, [r2, #0]
 8021780:	fb00 1303 	mla	r3, r0, r3, r1
 8021784:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021788:	9307      	str	r3, [sp, #28]
 802178a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802178c:	681b      	ldr	r3, [r3, #0]
 802178e:	9308      	str	r3, [sp, #32]
 8021790:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021792:	685b      	ldr	r3, [r3, #4]
 8021794:	9309      	str	r3, [sp, #36]	; 0x24
 8021796:	eef0 9a60 	vmov.f32	s19, s1
 802179a:	eeb0 9a41 	vmov.f32	s18, s2
 802179e:	eeb0 8a62 	vmov.f32	s16, s5
 80217a2:	eef0 8a43 	vmov.f32	s17, s6
 80217a6:	eef0 ba44 	vmov.f32	s23, s8
 80217aa:	eeb0 ba64 	vmov.f32	s22, s9
 80217ae:	eef0 aa45 	vmov.f32	s21, s10
 80217b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	dc03      	bgt.n	80217c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80217b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	f340 83b6 	ble.w	8021f2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80217c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80217c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80217c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80217ca:	1e48      	subs	r0, r1, #1
 80217cc:	1e55      	subs	r5, r2, #1
 80217ce:	9b06      	ldr	r3, [sp, #24]
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	f340 8199 	ble.w	8021b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80217d6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80217d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80217da:	1436      	asrs	r6, r6, #16
 80217dc:	ea4f 4323 	mov.w	r3, r3, asr #16
 80217e0:	d406      	bmi.n	80217f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80217e2:	4286      	cmp	r6, r0
 80217e4:	da04      	bge.n	80217f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80217e6:	2b00      	cmp	r3, #0
 80217e8:	db02      	blt.n	80217f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80217ea:	42ab      	cmp	r3, r5
 80217ec:	f2c0 818d 	blt.w	8021b0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80217f0:	3601      	adds	r6, #1
 80217f2:	f100 817a 	bmi.w	8021aea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80217f6:	42b1      	cmp	r1, r6
 80217f8:	f2c0 8177 	blt.w	8021aea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80217fc:	3301      	adds	r3, #1
 80217fe:	f100 8174 	bmi.w	8021aea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021802:	429a      	cmp	r2, r3
 8021804:	f2c0 8171 	blt.w	8021aea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021808:	9b06      	ldr	r3, [sp, #24]
 802180a:	9f07      	ldr	r7, [sp, #28]
 802180c:	930f      	str	r3, [sp, #60]	; 0x3c
 802180e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021814:	2b00      	cmp	r3, #0
 8021816:	f340 819a 	ble.w	8021b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802181a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802181c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802181e:	1418      	asrs	r0, r3, #16
 8021820:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021822:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021826:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021828:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802182c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802182e:	142d      	asrs	r5, r5, #16
 8021830:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021834:	f100 81ee 	bmi.w	8021c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021838:	f102 3eff 	add.w	lr, r2, #4294967295
 802183c:	4575      	cmp	r5, lr
 802183e:	f280 81e9 	bge.w	8021c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021842:	2800      	cmp	r0, #0
 8021844:	f2c0 81e6 	blt.w	8021c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021848:	f103 3eff 	add.w	lr, r3, #4294967295
 802184c:	4570      	cmp	r0, lr
 802184e:	f280 81e1 	bge.w	8021c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021854:	b212      	sxth	r2, r2
 8021856:	fb00 5002 	mla	r0, r0, r2, r5
 802185a:	fa1f fe81 	uxth.w	lr, r1
 802185e:	eb03 0a00 	add.w	sl, r3, r0
 8021862:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021866:	f813 9000 	ldrb.w	r9, [r3, r0]
 802186a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802186e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021872:	b29b      	uxth	r3, r3
 8021874:	f1bc 0f00 	cmp.w	ip, #0
 8021878:	f000 81af 	beq.w	8021bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802187c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021880:	940a      	str	r4, [sp, #40]	; 0x28
 8021882:	eb0a 0b02 	add.w	fp, sl, r2
 8021886:	fa1f fa8c 	uxth.w	sl, ip
 802188a:	fb0a fe0e 	mul.w	lr, sl, lr
 802188e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021892:	fa1f fa8a 	uxth.w	sl, sl
 8021896:	eba5 050e 	sub.w	r5, r5, lr
 802189a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802189e:	940b      	str	r4, [sp, #44]	; 0x2c
 80218a0:	eba3 030a 	sub.w	r3, r3, sl
 80218a4:	b2ad      	uxth	r5, r5
 80218a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80218a8:	b29b      	uxth	r3, r3
 80218aa:	fb08 f505 	mul.w	r5, r8, r5
 80218ae:	fb09 5303 	mla	r3, r9, r3, r5
 80218b2:	fb0a 3304 	mla	r3, sl, r4, r3
 80218b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80218b8:	fb0e 3304 	mla	r3, lr, r4, r3
 80218bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	f000 8105 	beq.w	8021ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80218c6:	9c08      	ldr	r4, [sp, #32]
 80218c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80218cc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80218d0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80218d4:	f000 8186 	beq.w	8021be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80218d8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80218dc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80218e0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80218e4:	fb09 f000 	mul.w	r0, r9, r0
 80218e8:	fb0a fe0e 	mul.w	lr, sl, lr
 80218ec:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80218f0:	f100 0b20 	add.w	fp, r0, #32
 80218f4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80218f8:	44ce      	add	lr, r9
 80218fa:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80218fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021902:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021906:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802190a:	ea4e 0909 	orr.w	r9, lr, r9
 802190e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021912:	8868      	ldrh	r0, [r5, #2]
 8021914:	d019      	beq.n	802194a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021916:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802191a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802191e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021922:	fb08 f800 	mul.w	r8, r8, r0
 8021926:	fb0a fe0e 	mul.w	lr, sl, lr
 802192a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802192e:	f108 0b20 	add.w	fp, r8, #32
 8021932:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021936:	4486      	add	lr, r0
 8021938:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802193c:	0a00      	lsrs	r0, r0, #8
 802193e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021942:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021946:	ea4e 0000 	orr.w	r0, lr, r0
 802194a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802194e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021952:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021956:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802195a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802195e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021962:	ea4e 0909 	orr.w	r9, lr, r9
 8021966:	ea4a 0000 	orr.w	r0, sl, r0
 802196a:	f1bc 0f00 	cmp.w	ip, #0
 802196e:	f000 813b 	beq.w	8021be8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8021972:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021976:	3a01      	subs	r2, #1
 8021978:	0052      	lsls	r2, r2, #1
 802197a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802197c:	3202      	adds	r2, #2
 802197e:	2cff      	cmp	r4, #255	; 0xff
 8021980:	eb05 0e02 	add.w	lr, r5, r2
 8021984:	5aaa      	ldrh	r2, [r5, r2]
 8021986:	d018      	beq.n	80219ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8021988:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802198c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021990:	fb04 fa02 	mul.w	sl, r4, r2
 8021994:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021998:	fb08 f805 	mul.w	r8, r8, r5
 802199c:	f10a 0520 	add.w	r5, sl, #32
 80219a0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80219a4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80219a8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80219ac:	4442      	add	r2, r8
 80219ae:	0a2d      	lsrs	r5, r5, #8
 80219b0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80219b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80219b8:	432a      	orrs	r2, r5
 80219ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219bc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80219c0:	2cff      	cmp	r4, #255	; 0xff
 80219c2:	d01a      	beq.n	80219fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80219c4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80219c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80219cc:	fb04 fa05 	mul.w	sl, r4, r5
 80219d0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80219d4:	fb08 f80e 	mul.w	r8, r8, lr
 80219d8:	f10a 0e20 	add.w	lr, sl, #32
 80219dc:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80219e0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80219e4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80219e8:	4445      	add	r5, r8
 80219ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80219ee:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80219f2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80219f6:	ea45 050e 	orr.w	r5, r5, lr
 80219fa:	fb1c fe01 	smulbb	lr, ip, r1
 80219fe:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021a02:	f1cc 0810 	rsb	r8, ip, #16
 8021a06:	eba8 0801 	sub.w	r8, r8, r1
 8021a0a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021a0e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021a12:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021a16:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021a1a:	4341      	muls	r1, r0
 8021a1c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a20:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021a24:	ea4a 0202 	orr.w	r2, sl, r2
 8021a28:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021a2c:	fb09 1108 	mla	r1, r9, r8, r1
 8021a30:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021a34:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021a38:	fb0c 1102 	mla	r1, ip, r2, r1
 8021a3c:	ea4b 0505 	orr.w	r5, fp, r5
 8021a40:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021a44:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021a48:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021a4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021a50:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021a54:	ea42 0e0e 	orr.w	lr, r2, lr
 8021a58:	fa1f f28e 	uxth.w	r2, lr
 8021a5c:	2bff      	cmp	r3, #255	; 0xff
 8021a5e:	f000 80d7 	beq.w	8021c10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021a62:	f8b7 c000 	ldrh.w	ip, [r7]
 8021a66:	43db      	mvns	r3, r3
 8021a68:	ea4f 202c 	mov.w	r0, ip, asr #8
 8021a6c:	fa5f fe83 	uxtb.w	lr, r3
 8021a70:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021a74:	fb00 f00e 	mul.w	r0, r0, lr
 8021a78:	1c41      	adds	r1, r0, #1
 8021a7a:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021a7e:	1210      	asrs	r0, r2, #8
 8021a80:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021a84:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021a88:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8021a8c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021a90:	496f      	ldr	r1, [pc, #444]	; (8021c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>)
 8021a92:	fb05 f50e 	mul.w	r5, r5, lr
 8021a96:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8021a9a:	1c69      	adds	r1, r5, #1
 8021a9c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021aa0:	10d1      	asrs	r1, r2, #3
 8021aa2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021aa6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8021aaa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021aae:	b2db      	uxtb	r3, r3
 8021ab0:	00c9      	lsls	r1, r1, #3
 8021ab2:	fb03 f30e 	mul.w	r3, r3, lr
 8021ab6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021aba:	4301      	orrs	r1, r0
 8021abc:	1c58      	adds	r0, r3, #1
 8021abe:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021ac2:	00d3      	lsls	r3, r2, #3
 8021ac4:	b2db      	uxtb	r3, r3
 8021ac6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021aca:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8021ace:	803b      	strh	r3, [r7, #0]
 8021ad0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021ad2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021ad4:	4413      	add	r3, r2
 8021ad6:	9325      	str	r3, [sp, #148]	; 0x94
 8021ad8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021ada:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021adc:	441a      	add	r2, r3
 8021ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021ae0:	9226      	str	r2, [sp, #152]	; 0x98
 8021ae2:	3b01      	subs	r3, #1
 8021ae4:	3702      	adds	r7, #2
 8021ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8021ae8:	e693      	b.n	8021812 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021aea:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021aec:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8021aee:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8021af0:	4433      	add	r3, r6
 8021af2:	9325      	str	r3, [sp, #148]	; 0x94
 8021af4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021af6:	441c      	add	r4, r3
 8021af8:	9b06      	ldr	r3, [sp, #24]
 8021afa:	9426      	str	r4, [sp, #152]	; 0x98
 8021afc:	3b01      	subs	r3, #1
 8021afe:	9306      	str	r3, [sp, #24]
 8021b00:	9b07      	ldr	r3, [sp, #28]
 8021b02:	3302      	adds	r3, #2
 8021b04:	9307      	str	r3, [sp, #28]
 8021b06:	e662      	b.n	80217ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021b08:	d028      	beq.n	8021b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8021b0a:	9b06      	ldr	r3, [sp, #24]
 8021b0c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021b0e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8021b10:	3b01      	subs	r3, #1
 8021b12:	fb00 5003 	mla	r0, r0, r3, r5
 8021b16:	1400      	asrs	r0, r0, #16
 8021b18:	f53f ae76 	bmi.w	8021808 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021b1c:	3901      	subs	r1, #1
 8021b1e:	4288      	cmp	r0, r1
 8021b20:	f6bf ae72 	bge.w	8021808 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021b24:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021b26:	9826      	ldr	r0, [sp, #152]	; 0x98
 8021b28:	fb01 0303 	mla	r3, r1, r3, r0
 8021b2c:	141b      	asrs	r3, r3, #16
 8021b2e:	f53f ae6b 	bmi.w	8021808 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021b32:	3a01      	subs	r2, #1
 8021b34:	4293      	cmp	r3, r2
 8021b36:	f6bf ae67 	bge.w	8021808 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021b3a:	9b06      	ldr	r3, [sp, #24]
 8021b3c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8021b40:	930f      	str	r3, [sp, #60]	; 0x3c
 8021b42:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	f300 8083 	bgt.w	8021c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8021b4e:	9b06      	ldr	r3, [sp, #24]
 8021b50:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021b54:	9b07      	ldr	r3, [sp, #28]
 8021b56:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021b5a:	9307      	str	r3, [sp, #28]
 8021b5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	f340 81e4 	ble.w	8021f2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8021b64:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b6c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021b70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b72:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021b76:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021b7a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021b7e:	eef0 6a48 	vmov.f32	s13, s16
 8021b82:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021b86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b8a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021b8e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8021b92:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021b96:	eef0 6a68 	vmov.f32	s13, s17
 8021b9a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021b9e:	ee18 2a10 	vmov	r2, s16
 8021ba2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021ba6:	fb92 f3f3 	sdiv	r3, r2, r3
 8021baa:	ee18 2a90 	vmov	r2, s17
 8021bae:	9327      	str	r3, [sp, #156]	; 0x9c
 8021bb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bb6:	9328      	str	r3, [sp, #160]	; 0xa0
 8021bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021bbc:	3b01      	subs	r3, #1
 8021bbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bc2:	930e      	str	r3, [sp, #56]	; 0x38
 8021bc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bc6:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8021bca:	bf08      	it	eq
 8021bcc:	4613      	moveq	r3, r2
 8021bce:	9306      	str	r3, [sp, #24]
 8021bd0:	eef0 8a67 	vmov.f32	s17, s15
 8021bd4:	eeb0 8a47 	vmov.f32	s16, s14
 8021bd8:	e5eb      	b.n	80217b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021bda:	fb08 f505 	mul.w	r5, r8, r5
 8021bde:	fb09 5303 	mla	r3, r9, r3, r5
 8021be2:	e66b      	b.n	80218bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8021be4:	4681      	mov	r9, r0
 8021be6:	e692      	b.n	802190e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8021be8:	f1c1 0210 	rsb	r2, r1, #16
 8021bec:	4341      	muls	r1, r0
 8021bee:	fb09 1902 	mla	r9, r9, r2, r1
 8021bf2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021bf6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021bfa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021bfe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c02:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021c06:	ea42 0909 	orr.w	r9, r2, r9
 8021c0a:	fa1f f289 	uxth.w	r2, r9
 8021c0e:	e725      	b.n	8021a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021c10:	803a      	strh	r2, [r7, #0]
 8021c12:	e75d      	b.n	8021ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021c14:	f115 0e01 	adds.w	lr, r5, #1
 8021c18:	f53f af5a 	bmi.w	8021ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021c1c:	4572      	cmp	r2, lr
 8021c1e:	f6ff af57 	blt.w	8021ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021c22:	f110 0e01 	adds.w	lr, r0, #1
 8021c26:	f53f af53 	bmi.w	8021ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021c2a:	4573      	cmp	r3, lr
 8021c2c:	f6ff af50 	blt.w	8021ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021c30:	b21b      	sxth	r3, r3
 8021c32:	b212      	sxth	r2, r2
 8021c34:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8021c38:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8021c3c:	9301      	str	r3, [sp, #4]
 8021c3e:	9200      	str	r2, [sp, #0]
 8021c40:	4639      	mov	r1, r7
 8021c42:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8021c46:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021c48:	f7ff fbf2 	bl	8021430 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021c4c:	e740      	b.n	8021ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021c4e:	bf00      	nop
 8021c50:	fffff800 	.word	0xfffff800
 8021c54:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021c56:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021c5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021c5c:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8021c60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021c62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021c68:	141f      	asrs	r7, r3, #16
 8021c6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021c6c:	141b      	asrs	r3, r3, #16
 8021c6e:	fb01 3707 	mla	r7, r1, r7, r3
 8021c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c74:	fa1f fc82 	uxth.w	ip, r2
 8021c78:	eb03 0a07 	add.w	sl, r3, r7
 8021c7c:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8021c80:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021c84:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021c88:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8021c8c:	b29b      	uxth	r3, r3
 8021c8e:	2d00      	cmp	r5, #0
 8021c90:	f000 8131 	beq.w	8021ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x796>
 8021c94:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8021c98:	940c      	str	r4, [sp, #48]	; 0x30
 8021c9a:	eb0a 0b01 	add.w	fp, sl, r1
 8021c9e:	fa1f fa85 	uxth.w	sl, r5
 8021ca2:	fb0a fc0c 	mul.w	ip, sl, ip
 8021ca6:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021caa:	fa1f fa8a 	uxth.w	sl, sl
 8021cae:	eba0 000c 	sub.w	r0, r0, ip
 8021cb2:	eba3 030a 	sub.w	r3, r3, sl
 8021cb6:	b280      	uxth	r0, r0
 8021cb8:	fb08 f000 	mul.w	r0, r8, r0
 8021cbc:	b29b      	uxth	r3, r3
 8021cbe:	fb09 0303 	mla	r3, r9, r3, r0
 8021cc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021cc4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021cc8:	940d      	str	r4, [sp, #52]	; 0x34
 8021cca:	fb0a 3300 	mla	r3, sl, r0, r3
 8021cce:	fb0c 3304 	mla	r3, ip, r4, r3
 8021cd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	f000 80ff 	beq.w	8021eda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77a>
 8021cdc:	9808      	ldr	r0, [sp, #32]
 8021cde:	9c08      	ldr	r4, [sp, #32]
 8021ce0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ce4:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8021ce8:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021cec:	f000 8108 	beq.w	8021f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a0>
 8021cf0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021cf4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021cf8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021cfc:	fb09 f707 	mul.w	r7, r9, r7
 8021d00:	fb0a fc0c 	mul.w	ip, sl, ip
 8021d04:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021d08:	f107 0b20 	add.w	fp, r7, #32
 8021d0c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021d10:	44cc      	add	ip, r9
 8021d12:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021d16:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021d1a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021d1e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021d22:	ea4c 0909 	orr.w	r9, ip, r9
 8021d26:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021d2a:	8847      	ldrh	r7, [r0, #2]
 8021d2c:	d019      	beq.n	8021d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x602>
 8021d2e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021d32:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021d36:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021d3a:	fb08 f807 	mul.w	r8, r8, r7
 8021d3e:	fb0a fc0c 	mul.w	ip, sl, ip
 8021d42:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021d46:	f108 0b20 	add.w	fp, r8, #32
 8021d4a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021d4e:	44bc      	add	ip, r7
 8021d50:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021d54:	0a3f      	lsrs	r7, r7, #8
 8021d56:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021d5a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021d5e:	ea4c 0707 	orr.w	r7, ip, r7
 8021d62:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021d66:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021d6a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021d6e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021d72:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021d76:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021d7a:	ea4c 0909 	orr.w	r9, ip, r9
 8021d7e:	ea4a 0707 	orr.w	r7, sl, r7
 8021d82:	2d00      	cmp	r5, #0
 8021d84:	f000 80be 	beq.w	8021f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8021d88:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8021d8c:	3901      	subs	r1, #1
 8021d8e:	0049      	lsls	r1, r1, #1
 8021d90:	3102      	adds	r1, #2
 8021d92:	eb00 0c01 	add.w	ip, r0, r1
 8021d96:	5a41      	ldrh	r1, [r0, r1]
 8021d98:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021d9a:	28ff      	cmp	r0, #255	; 0xff
 8021d9c:	d019      	beq.n	8021dd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 8021d9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021da0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8021da4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021da8:	fb04 fa01 	mul.w	sl, r4, r1
 8021dac:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021db0:	fb08 f800 	mul.w	r8, r8, r0
 8021db4:	f10a 0020 	add.w	r0, sl, #32
 8021db8:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8021dbc:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021dc0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021dc4:	4441      	add	r1, r8
 8021dc6:	0a00      	lsrs	r0, r0, #8
 8021dc8:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021dcc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021dd0:	4301      	orrs	r1, r0
 8021dd2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021dd4:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8021dd8:	2cff      	cmp	r4, #255	; 0xff
 8021dda:	d01a      	beq.n	8021e12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b2>
 8021ddc:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8021de0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021de4:	fb04 fa00 	mul.w	sl, r4, r0
 8021de8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021dec:	fb08 f80c 	mul.w	r8, r8, ip
 8021df0:	f10a 0c20 	add.w	ip, sl, #32
 8021df4:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8021df8:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021dfc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021e00:	4440      	add	r0, r8
 8021e02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e06:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021e0a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021e0e:	ea40 000c 	orr.w	r0, r0, ip
 8021e12:	fb15 fc02 	smulbb	ip, r5, r2
 8021e16:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021e1a:	f1c5 0810 	rsb	r8, r5, #16
 8021e1e:	eba8 0802 	sub.w	r8, r8, r2
 8021e22:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021e26:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8021e2a:	437a      	muls	r2, r7
 8021e2c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021e30:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8021e34:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021e38:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021e3c:	fb09 2208 	mla	r2, r9, r8, r2
 8021e40:	ea4a 0101 	orr.w	r1, sl, r1
 8021e44:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8021e48:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021e4c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021e50:	fb05 2201 	mla	r2, r5, r1, r2
 8021e54:	ea4b 0000 	orr.w	r0, fp, r0
 8021e58:	fb0c 2200 	mla	r2, ip, r0, r2
 8021e5c:	0d57      	lsrs	r7, r2, #21
 8021e5e:	0952      	lsrs	r2, r2, #5
 8021e60:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021e64:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021e68:	433a      	orrs	r2, r7
 8021e6a:	2bff      	cmp	r3, #255	; 0xff
 8021e6c:	b292      	uxth	r2, r2
 8021e6e:	d05a      	beq.n	8021f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c6>
 8021e70:	f8be 7000 	ldrh.w	r7, [lr]
 8021e74:	4c30      	ldr	r4, [pc, #192]	; (8021f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8021e76:	43db      	mvns	r3, r3
 8021e78:	1238      	asrs	r0, r7, #8
 8021e7a:	fa5f fc83 	uxtb.w	ip, r3
 8021e7e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021e82:	10fd      	asrs	r5, r7, #3
 8021e84:	fb00 f00c 	mul.w	r0, r0, ip
 8021e88:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021e8c:	fb05 f10c 	mul.w	r1, r5, ip
 8021e90:	1c45      	adds	r5, r0, #1
 8021e92:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021e96:	1215      	asrs	r5, r2, #8
 8021e98:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021e9c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021ea0:	1c4d      	adds	r5, r1, #1
 8021ea2:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8021ea6:	10d1      	asrs	r1, r2, #3
 8021ea8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021eac:	00fb      	lsls	r3, r7, #3
 8021eae:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021eb2:	b2db      	uxtb	r3, r3
 8021eb4:	00c9      	lsls	r1, r1, #3
 8021eb6:	fb03 f30c 	mul.w	r3, r3, ip
 8021eba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021ebe:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8021ec2:	4308      	orrs	r0, r1
 8021ec4:	00d2      	lsls	r2, r2, #3
 8021ec6:	1c59      	adds	r1, r3, #1
 8021ec8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021ecc:	b2d1      	uxtb	r1, r2
 8021ece:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021ed2:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8021ed6:	f8ae 0000 	strh.w	r0, [lr]
 8021eda:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021edc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021ede:	4413      	add	r3, r2
 8021ee0:	9325      	str	r3, [sp, #148]	; 0x94
 8021ee2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021ee4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ee6:	441a      	add	r2, r3
 8021ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021eea:	9226      	str	r2, [sp, #152]	; 0x98
 8021eec:	3b01      	subs	r3, #1
 8021eee:	f10e 0e02 	add.w	lr, lr, #2
 8021ef2:	930f      	str	r3, [sp, #60]	; 0x3c
 8021ef4:	e627      	b.n	8021b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021ef6:	fb08 f000 	mul.w	r0, r8, r0
 8021efa:	fb09 0303 	mla	r3, r9, r3, r0
 8021efe:	e6e8      	b.n	8021cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x572>
 8021f00:	46b9      	mov	r9, r7
 8021f02:	e710      	b.n	8021d26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8021f04:	f1c2 0110 	rsb	r1, r2, #16
 8021f08:	437a      	muls	r2, r7
 8021f0a:	fb09 2901 	mla	r9, r9, r1, r2
 8021f0e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021f12:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021f16:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021f1a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f1e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021f22:	4302      	orrs	r2, r0
 8021f24:	e7a1      	b.n	8021e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8021f26:	f8ae 2000 	strh.w	r2, [lr]
 8021f2a:	e7d6      	b.n	8021eda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77a>
 8021f2c:	b013      	add	sp, #76	; 0x4c
 8021f2e:	ecbd 8b08 	vpop	{d8-d11}
 8021f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f36:	bf00      	nop
 8021f38:	fffff800 	.word	0xfffff800

08021f3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8021f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f40:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8021f44:	fb0c 4e03 	mla	lr, ip, r3, r4
 8021f48:	f1bc 0f00 	cmp.w	ip, #0
 8021f4c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8021f50:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8021f54:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8021f58:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8021f5c:	8808      	ldrh	r0, [r1, #0]
 8021f5e:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8021f62:	db2f      	blt.n	8021fc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8021f64:	45e2      	cmp	sl, ip
 8021f66:	dd2d      	ble.n	8021fc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8021f68:	2c00      	cmp	r4, #0
 8021f6a:	db29      	blt.n	8021fc0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8021f6c:	42a3      	cmp	r3, r4
 8021f6e:	dd27      	ble.n	8021fc0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8021f70:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8021f74:	1c62      	adds	r2, r4, #1
 8021f76:	d428      	bmi.n	8021fca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8021f78:	4293      	cmp	r3, r2
 8021f7a:	dd26      	ble.n	8021fca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8021f7c:	b32f      	cbz	r7, 8021fca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8021f7e:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8021f82:	f11c 0c01 	adds.w	ip, ip, #1
 8021f86:	d424      	bmi.n	8021fd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8021f88:	45e2      	cmp	sl, ip
 8021f8a:	dd22      	ble.n	8021fd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8021f8c:	2e00      	cmp	r6, #0
 8021f8e:	f000 809c 	beq.w	80220ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 8021f92:	2c00      	cmp	r4, #0
 8021f94:	db1b      	blt.n	8021fce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8021f96:	42a3      	cmp	r3, r4
 8021f98:	dd19      	ble.n	8021fce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8021f9a:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8021f9e:	3401      	adds	r4, #1
 8021fa0:	d41a      	bmi.n	8021fd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8021fa2:	42a3      	cmp	r3, r4
 8021fa4:	dd18      	ble.n	8021fd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8021fa6:	b1cf      	cbz	r7, 8021fdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8021fa8:	3301      	adds	r3, #1
 8021faa:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8021fae:	2f0f      	cmp	r7, #15
 8021fb0:	d915      	bls.n	8021fde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8021fb2:	4b49      	ldr	r3, [pc, #292]	; (80220d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8021fb4:	4a49      	ldr	r2, [pc, #292]	; (80220dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8021fb6:	484a      	ldr	r0, [pc, #296]	; (80220e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8021fb8:	f240 11ef 	movw	r1, #495	; 0x1ef
 8021fbc:	f003 f87a 	bl	80250b4 <__assert_func>
 8021fc0:	4681      	mov	r9, r0
 8021fc2:	e7d7      	b.n	8021f74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8021fc4:	4686      	mov	lr, r0
 8021fc6:	4681      	mov	r9, r0
 8021fc8:	e7db      	b.n	8021f82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8021fca:	4686      	mov	lr, r0
 8021fcc:	e7d9      	b.n	8021f82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8021fce:	4684      	mov	ip, r0
 8021fd0:	e7e5      	b.n	8021f9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8021fd2:	4603      	mov	r3, r0
 8021fd4:	4684      	mov	ip, r0
 8021fd6:	e7ea      	b.n	8021fae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8021fd8:	4603      	mov	r3, r0
 8021fda:	e7e8      	b.n	8021fae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8021fdc:	4603      	mov	r3, r0
 8021fde:	2e0f      	cmp	r6, #15
 8021fe0:	d8e7      	bhi.n	8021fb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8021fe2:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8021fe6:	fb17 f806 	smulbb	r8, r7, r6
 8021fea:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021fee:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8021ff2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021ff6:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8021ffa:	ea44 0909 	orr.w	r9, r4, r9
 8021ffe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022002:	f1c6 0410 	rsb	r4, r6, #16
 8022006:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802200a:	1be4      	subs	r4, r4, r7
 802200c:	041a      	lsls	r2, r3, #16
 802200e:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8022012:	ea4a 0e0e 	orr.w	lr, sl, lr
 8022016:	fb07 fe0e 	mul.w	lr, r7, lr
 802201a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802201e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022022:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022026:	fb04 e409 	mla	r4, r4, r9, lr
 802202a:	4313      	orrs	r3, r2
 802202c:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8022030:	fb08 4303 	mla	r3, r8, r3, r4
 8022034:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022038:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 802203c:	4322      	orrs	r2, r4
 802203e:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8022042:	fb06 3202 	mla	r2, r6, r2, r3
 8022046:	0d53      	lsrs	r3, r2, #21
 8022048:	0952      	lsrs	r2, r2, #5
 802204a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802204e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022052:	431a      	orrs	r2, r3
 8022054:	b293      	uxth	r3, r2
 8022056:	b2af      	uxth	r7, r5
 8022058:	1202      	asrs	r2, r0, #8
 802205a:	43ed      	mvns	r5, r5
 802205c:	b2ed      	uxtb	r5, r5
 802205e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022062:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022066:	fb12 f205 	smulbb	r2, r2, r5
 802206a:	10c6      	asrs	r6, r0, #3
 802206c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022070:	fb0c 2c07 	mla	ip, ip, r7, r2
 8022074:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022078:	10da      	asrs	r2, r3, #3
 802207a:	fb16 f605 	smulbb	r6, r6, r5
 802207e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022082:	fb02 6207 	mla	r2, r2, r7, r6
 8022086:	b296      	uxth	r6, r2
 8022088:	00c2      	lsls	r2, r0, #3
 802208a:	00dc      	lsls	r4, r3, #3
 802208c:	b2d2      	uxtb	r2, r2
 802208e:	b2e4      	uxtb	r4, r4
 8022090:	fb12 f205 	smulbb	r2, r2, r5
 8022094:	fb04 2207 	mla	r2, r4, r7, r2
 8022098:	fa1f fc8c 	uxth.w	ip, ip
 802209c:	b292      	uxth	r2, r2
 802209e:	f10c 0301 	add.w	r3, ip, #1
 80220a2:	1c50      	adds	r0, r2, #1
 80220a4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80220a8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80220ac:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80220b0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80220b4:	4313      	orrs	r3, r2
 80220b6:	1c72      	adds	r2, r6, #1
 80220b8:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80220bc:	0952      	lsrs	r2, r2, #5
 80220be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220c2:	4313      	orrs	r3, r2
 80220c4:	800b      	strh	r3, [r1, #0]
 80220c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220ca:	2f0f      	cmp	r7, #15
 80220cc:	f63f af71 	bhi.w	8021fb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80220d0:	4603      	mov	r3, r0
 80220d2:	4684      	mov	ip, r0
 80220d4:	e785      	b.n	8021fe2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 80220d6:	bf00      	nop
 80220d8:	0802abd6 	.word	0x0802abd6
 80220dc:	0802b242 	.word	0x0802b242
 80220e0:	0802acbf 	.word	0x0802acbf

080220e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80220e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220e8:	ed2d 8b08 	vpush	{d8-d11}
 80220ec:	b093      	sub	sp, #76	; 0x4c
 80220ee:	461d      	mov	r5, r3
 80220f0:	9210      	str	r2, [sp, #64]	; 0x40
 80220f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80220f4:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80220f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80220fa:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 80220fe:	910a      	str	r1, [sp, #40]	; 0x28
 8022100:	6859      	ldr	r1, [r3, #4]
 8022102:	681b      	ldr	r3, [r3, #0]
 8022104:	9011      	str	r0, [sp, #68]	; 0x44
 8022106:	fb01 2707 	mla	r7, r1, r7, r2
 802210a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802210e:	9307      	str	r3, [sp, #28]
 8022110:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022112:	681b      	ldr	r3, [r3, #0]
 8022114:	9309      	str	r3, [sp, #36]	; 0x24
 8022116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022118:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802211c:	43db      	mvns	r3, r3
 802211e:	b2db      	uxtb	r3, r3
 8022120:	eeb0 aa40 	vmov.f32	s20, s0
 8022124:	eef0 9a60 	vmov.f32	s19, s1
 8022128:	eeb0 9a41 	vmov.f32	s18, s2
 802212c:	eeb0 8a62 	vmov.f32	s16, s5
 8022130:	eef0 8a43 	vmov.f32	s17, s6
 8022134:	eef0 ba44 	vmov.f32	s23, s8
 8022138:	eeb0 ba64 	vmov.f32	s22, s9
 802213c:	eef0 aa45 	vmov.f32	s21, s10
 8022140:	9308      	str	r3, [sp, #32]
 8022142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022144:	2b00      	cmp	r3, #0
 8022146:	dc03      	bgt.n	8022150 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022148:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802214a:	2b00      	cmp	r3, #0
 802214c:	f340 8203 	ble.w	8022556 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8022150:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022152:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022156:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802215a:	1e48      	subs	r0, r1, #1
 802215c:	f102 3cff 	add.w	ip, r2, #4294967295
 8022160:	2d00      	cmp	r5, #0
 8022162:	f340 80da 	ble.w	802231a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022166:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802216a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802216e:	d406      	bmi.n	802217e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022170:	4586      	cmp	lr, r0
 8022172:	da04      	bge.n	802217e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022174:	2b00      	cmp	r3, #0
 8022176:	db02      	blt.n	802217e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022178:	4563      	cmp	r3, ip
 802217a:	f2c0 80cf 	blt.w	802231c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802217e:	f11e 0e01 	adds.w	lr, lr, #1
 8022182:	f100 80c1 	bmi.w	8022308 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022186:	4571      	cmp	r1, lr
 8022188:	f2c0 80be 	blt.w	8022308 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802218c:	3301      	adds	r3, #1
 802218e:	f100 80bb 	bmi.w	8022308 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022192:	429a      	cmp	r2, r3
 8022194:	f2c0 80b8 	blt.w	8022308 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022198:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802219c:	46a9      	mov	r9, r5
 802219e:	f1b9 0f00 	cmp.w	r9, #0
 80221a2:	f340 80d8 	ble.w	8022356 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80221a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80221a8:	1421      	asrs	r1, r4, #16
 80221aa:	ea4f 4026 	mov.w	r0, r6, asr #16
 80221ae:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80221b2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80221b6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80221ba:	f100 8111 	bmi.w	80223e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80221be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80221c2:	4551      	cmp	r1, sl
 80221c4:	f280 810c 	bge.w	80223e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80221c8:	2800      	cmp	r0, #0
 80221ca:	f2c0 8109 	blt.w	80223e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80221ce:	f103 3aff 	add.w	sl, r3, #4294967295
 80221d2:	4550      	cmp	r0, sl
 80221d4:	f280 8104 	bge.w	80223e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80221d8:	fa0f f38e 	sxth.w	r3, lr
 80221dc:	fb00 1103 	mla	r1, r0, r3, r1
 80221e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80221e2:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80221e6:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80221ea:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80221ee:	f1bc 0f00 	cmp.w	ip, #0
 80221f2:	d007      	beq.n	8022204 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80221f4:	005b      	lsls	r3, r3, #1
 80221f6:	eb0a 0003 	add.w	r0, sl, r3
 80221fa:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80221fe:	930c      	str	r3, [sp, #48]	; 0x30
 8022200:	8843      	ldrh	r3, [r0, #2]
 8022202:	930d      	str	r3, [sp, #52]	; 0x34
 8022204:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8022208:	fb12 f30c 	smulbb	r3, r2, ip
 802220c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022210:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022214:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022218:	10db      	asrs	r3, r3, #3
 802221a:	ea40 000e 	orr.w	r0, r0, lr
 802221e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022222:	f1cc 0e10 	rsb	lr, ip, #16
 8022226:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802222a:	ebae 0e02 	sub.w	lr, lr, r2
 802222e:	ea4a 0101 	orr.w	r1, sl, r1
 8022232:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022236:	4351      	muls	r1, r2
 8022238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802223a:	9f08      	ldr	r7, [sp, #32]
 802223c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022240:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022244:	0410      	lsls	r0, r2, #16
 8022246:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802224a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802224e:	4310      	orrs	r0, r2
 8022250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022252:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022254:	0412      	lsls	r2, r2, #16
 8022256:	fb03 e000 	mla	r0, r3, r0, lr
 802225a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802225e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022262:	ea42 020e 	orr.w	r2, r2, lr
 8022266:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802226a:	fb03 0302 	mla	r3, r3, r2, r0
 802226e:	0d5a      	lsrs	r2, r3, #21
 8022270:	095b      	lsrs	r3, r3, #5
 8022272:	f8b8 c000 	ldrh.w	ip, [r8]
 8022276:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802227a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802227e:	4313      	orrs	r3, r2
 8022280:	b29b      	uxth	r3, r3
 8022282:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022286:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802228a:	1218      	asrs	r0, r3, #8
 802228c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022290:	fb11 f107 	smulbb	r1, r1, r7
 8022294:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8022298:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802229c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80222a0:	fb00 1002 	mla	r0, r0, r2, r1
 80222a4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80222a8:	10d9      	asrs	r1, r3, #3
 80222aa:	fa5f fc8c 	uxtb.w	ip, ip
 80222ae:	00db      	lsls	r3, r3, #3
 80222b0:	b2db      	uxtb	r3, r3
 80222b2:	fb1c fc07 	smulbb	ip, ip, r7
 80222b6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80222ba:	fb1e fe07 	smulbb	lr, lr, r7
 80222be:	fb01 e102 	mla	r1, r1, r2, lr
 80222c2:	fb03 c202 	mla	r2, r3, r2, ip
 80222c6:	b280      	uxth	r0, r0
 80222c8:	b292      	uxth	r2, r2
 80222ca:	1c43      	adds	r3, r0, #1
 80222cc:	f102 0c01 	add.w	ip, r2, #1
 80222d0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80222d4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80222d8:	b289      	uxth	r1, r1
 80222da:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80222de:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80222e2:	4313      	orrs	r3, r2
 80222e4:	1c4a      	adds	r2, r1, #1
 80222e6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80222ea:	0949      	lsrs	r1, r1, #5
 80222ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80222f0:	430b      	orrs	r3, r1
 80222f2:	f8a8 3000 	strh.w	r3, [r8]
 80222f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80222f8:	441c      	add	r4, r3
 80222fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222fc:	f108 0802 	add.w	r8, r8, #2
 8022300:	441e      	add	r6, r3
 8022302:	f109 39ff 	add.w	r9, r9, #4294967295
 8022306:	e74a      	b.n	802219e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022308:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802230a:	441c      	add	r4, r3
 802230c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802230e:	441e      	add	r6, r3
 8022310:	9b07      	ldr	r3, [sp, #28]
 8022312:	3302      	adds	r3, #2
 8022314:	3d01      	subs	r5, #1
 8022316:	9307      	str	r3, [sp, #28]
 8022318:	e722      	b.n	8022160 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802231a:	d022      	beq.n	8022362 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802231c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802231e:	1e6b      	subs	r3, r5, #1
 8022320:	fb00 4003 	mla	r0, r0, r3, r4
 8022324:	1400      	asrs	r0, r0, #16
 8022326:	f53f af37 	bmi.w	8022198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802232a:	3901      	subs	r1, #1
 802232c:	4288      	cmp	r0, r1
 802232e:	f6bf af33 	bge.w	8022198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022332:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022334:	fb01 6303 	mla	r3, r1, r3, r6
 8022338:	141b      	asrs	r3, r3, #16
 802233a:	f53f af2d 	bmi.w	8022198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802233e:	3a01      	subs	r2, #1
 8022340:	4293      	cmp	r3, r2
 8022342:	f6bf af29 	bge.w	8022198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022346:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802234a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 802234e:	46a8      	mov	r8, r5
 8022350:	f1b8 0f00 	cmp.w	r8, #0
 8022354:	dc5e      	bgt.n	8022414 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022356:	9b07      	ldr	r3, [sp, #28]
 8022358:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802235c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022360:	9307      	str	r3, [sp, #28]
 8022362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022364:	2b00      	cmp	r3, #0
 8022366:	f340 80f6 	ble.w	8022556 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802236a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802236e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022372:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022376:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022378:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802237c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022380:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022384:	eef0 6a48 	vmov.f32	s13, s16
 8022388:	ee69 7a27 	vmul.f32	s15, s18, s15
 802238c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022390:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022394:	ee16 4a90 	vmov	r4, s13
 8022398:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802239c:	eef0 6a68 	vmov.f32	s13, s17
 80223a0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80223a4:	ee18 2a10 	vmov	r2, s16
 80223a8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80223ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80223b0:	ee18 2a90 	vmov	r2, s17
 80223b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80223b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80223b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80223bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80223be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80223c2:	3b01      	subs	r3, #1
 80223c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223c8:	930a      	str	r3, [sp, #40]	; 0x28
 80223ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80223cc:	ee16 6a90 	vmov	r6, s13
 80223d0:	bf14      	ite	ne
 80223d2:	461d      	movne	r5, r3
 80223d4:	4615      	moveq	r5, r2
 80223d6:	eef0 8a67 	vmov.f32	s17, s15
 80223da:	eeb0 8a47 	vmov.f32	s16, s14
 80223de:	e6b0      	b.n	8022142 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80223e0:	f111 0a01 	adds.w	sl, r1, #1
 80223e4:	d487      	bmi.n	80222f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80223e6:	45d6      	cmp	lr, sl
 80223e8:	db85      	blt.n	80222f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80223ea:	f110 0a01 	adds.w	sl, r0, #1
 80223ee:	d482      	bmi.n	80222f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80223f0:	4553      	cmp	r3, sl
 80223f2:	db80      	blt.n	80222f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80223f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80223f6:	9101      	str	r1, [sp, #4]
 80223f8:	b21b      	sxth	r3, r3
 80223fa:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80223fe:	9300      	str	r3, [sp, #0]
 8022400:	e9cd c704 	strd	ip, r7, [sp, #16]
 8022404:	fa0f f38e 	sxth.w	r3, lr
 8022408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802240a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802240c:	4641      	mov	r1, r8
 802240e:	f7ff fd95 	bl	8021f3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8022412:	e770      	b.n	80222f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8022414:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022416:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022418:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802241c:	1430      	asrs	r0, r6, #16
 802241e:	1423      	asrs	r3, r4, #16
 8022420:	fb01 3000 	mla	r0, r1, r0, r3
 8022424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022426:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802242a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802242e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022432:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022436:	8858      	ldrh	r0, [r3, #2]
 8022438:	f1be 0f00 	cmp.w	lr, #0
 802243c:	d00b      	beq.n	8022456 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 802243e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022442:	3901      	subs	r1, #1
 8022444:	0049      	lsls	r1, r1, #1
 8022446:	3102      	adds	r1, #2
 8022448:	eb03 0b01 	add.w	fp, r3, r1
 802244c:	5a5b      	ldrh	r3, [r3, r1]
 802244e:	930e      	str	r3, [sp, #56]	; 0x38
 8022450:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022454:	930f      	str	r3, [sp, #60]	; 0x3c
 8022456:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802245a:	fb12 f30e 	smulbb	r3, r2, lr
 802245e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022462:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022466:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802246a:	10db      	asrs	r3, r3, #3
 802246c:	ea41 010c 	orr.w	r1, r1, ip
 8022470:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022474:	f1ce 0c10 	rsb	ip, lr, #16
 8022478:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802247c:	ebac 0c02 	sub.w	ip, ip, r2
 8022480:	ea4b 0000 	orr.w	r0, fp, r0
 8022484:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022488:	4350      	muls	r0, r2
 802248a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802248c:	9f08      	ldr	r7, [sp, #32]
 802248e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022492:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022496:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802249a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802249e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80224a0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80224a2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80224a6:	0412      	lsls	r2, r2, #16
 80224a8:	ea4b 0101 	orr.w	r1, fp, r1
 80224ac:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80224b0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80224b4:	fb03 c101 	mla	r1, r3, r1, ip
 80224b8:	4302      	orrs	r2, r0
 80224ba:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80224be:	fb03 1202 	mla	r2, r3, r2, r1
 80224c2:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80224c6:	0952      	lsrs	r2, r2, #5
 80224c8:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80224cc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80224d0:	f8b9 2000 	ldrh.w	r2, [r9]
 80224d4:	ea4b 0303 	orr.w	r3, fp, r3
 80224d8:	b29b      	uxth	r3, r3
 80224da:	1211      	asrs	r1, r2, #8
 80224dc:	1218      	asrs	r0, r3, #8
 80224de:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80224e2:	fb11 f107 	smulbb	r1, r1, r7
 80224e6:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80224ea:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80224ee:	00d2      	lsls	r2, r2, #3
 80224f0:	fb00 100a 	mla	r0, r0, sl, r1
 80224f4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80224f8:	10d9      	asrs	r1, r3, #3
 80224fa:	b2d2      	uxtb	r2, r2
 80224fc:	00db      	lsls	r3, r3, #3
 80224fe:	fb1c fc07 	smulbb	ip, ip, r7
 8022502:	fb12 f207 	smulbb	r2, r2, r7
 8022506:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802250a:	b2db      	uxtb	r3, r3
 802250c:	b280      	uxth	r0, r0
 802250e:	fb01 c10a 	mla	r1, r1, sl, ip
 8022512:	fb03 230a 	mla	r3, r3, sl, r2
 8022516:	b29b      	uxth	r3, r3
 8022518:	b289      	uxth	r1, r1
 802251a:	1c42      	adds	r2, r0, #1
 802251c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022520:	f101 0c01 	add.w	ip, r1, #1
 8022524:	1c5a      	adds	r2, r3, #1
 8022526:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802252a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802252e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022530:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022534:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022538:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802253c:	4310      	orrs	r0, r2
 802253e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022542:	441c      	add	r4, r3
 8022544:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022546:	ea40 000c 	orr.w	r0, r0, ip
 802254a:	f829 0b02 	strh.w	r0, [r9], #2
 802254e:	441e      	add	r6, r3
 8022550:	f108 38ff 	add.w	r8, r8, #4294967295
 8022554:	e6fc      	b.n	8022350 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8022556:	b013      	add	sp, #76	; 0x4c
 8022558:	ecbd 8b08 	vpop	{d8-d11}
 802255c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022560 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8022560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022564:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8022568:	fb06 5c03 	mla	ip, r6, r3, r5
 802256c:	2e00      	cmp	r6, #0
 802256e:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8022572:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8022576:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 802257a:	8808      	ldrh	r0, [r1, #0]
 802257c:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022580:	db2e      	blt.n	80225e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8022582:	45b0      	cmp	r8, r6
 8022584:	dd2c      	ble.n	80225e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8022586:	2d00      	cmp	r5, #0
 8022588:	db28      	blt.n	80225dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802258a:	42ab      	cmp	r3, r5
 802258c:	dd26      	ble.n	80225dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802258e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8022592:	1c6a      	adds	r2, r5, #1
 8022594:	d427      	bmi.n	80225e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8022596:	4293      	cmp	r3, r2
 8022598:	dd25      	ble.n	80225e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802259a:	b324      	cbz	r4, 80225e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802259c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80225a0:	3601      	adds	r6, #1
 80225a2:	d424      	bmi.n	80225ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80225a4:	45b0      	cmp	r8, r6
 80225a6:	dd22      	ble.n	80225ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80225a8:	b31f      	cbz	r7, 80225f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 80225aa:	2d00      	cmp	r5, #0
 80225ac:	db1d      	blt.n	80225ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80225ae:	42ab      	cmp	r3, r5
 80225b0:	dd1b      	ble.n	80225ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80225b2:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 80225b6:	3501      	adds	r5, #1
 80225b8:	d405      	bmi.n	80225c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80225ba:	42ab      	cmp	r3, r5
 80225bc:	dd03      	ble.n	80225c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80225be:	b124      	cbz	r4, 80225ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 80225c0:	3301      	adds	r3, #1
 80225c2:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 80225c6:	2c0f      	cmp	r4, #15
 80225c8:	d801      	bhi.n	80225ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80225ca:	2f0f      	cmp	r7, #15
 80225cc:	d914      	bls.n	80225f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 80225ce:	4b27      	ldr	r3, [pc, #156]	; (802266c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 80225d0:	4a27      	ldr	r2, [pc, #156]	; (8022670 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 80225d2:	4828      	ldr	r0, [pc, #160]	; (8022674 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 80225d4:	f240 11ef 	movw	r1, #495	; 0x1ef
 80225d8:	f002 fd6c 	bl	80250b4 <__assert_func>
 80225dc:	4684      	mov	ip, r0
 80225de:	e7d8      	b.n	8022592 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 80225e0:	4602      	mov	r2, r0
 80225e2:	4684      	mov	ip, r0
 80225e4:	e7dc      	b.n	80225a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80225e6:	4602      	mov	r2, r0
 80225e8:	e7da      	b.n	80225a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80225ea:	4606      	mov	r6, r0
 80225ec:	e7e3      	b.n	80225b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 80225ee:	4606      	mov	r6, r0
 80225f0:	e7e9      	b.n	80225c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80225f2:	2c0f      	cmp	r4, #15
 80225f4:	d8eb      	bhi.n	80225ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80225f6:	4606      	mov	r6, r0
 80225f8:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80225fc:	fb14 f307 	smulbb	r3, r4, r7
 8022600:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8022604:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8022608:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802260c:	10db      	asrs	r3, r3, #3
 802260e:	ea45 0c0c 	orr.w	ip, r5, ip
 8022612:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022616:	f1c7 0510 	rsb	r5, r7, #16
 802261a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802261e:	1b2d      	subs	r5, r5, r4
 8022620:	ea4e 0202 	orr.w	r2, lr, r2
 8022624:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8022628:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802262c:	4354      	muls	r4, r2
 802262e:	fb05 450c 	mla	r5, r5, ip, r4
 8022632:	0404      	lsls	r4, r0, #16
 8022634:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022638:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802263c:	4320      	orrs	r0, r4
 802263e:	fb03 5400 	mla	r4, r3, r0, r5
 8022642:	0430      	lsls	r0, r6, #16
 8022644:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022648:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 802264c:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8022650:	4330      	orrs	r0, r6
 8022652:	fb07 4000 	mla	r0, r7, r0, r4
 8022656:	0d43      	lsrs	r3, r0, #21
 8022658:	0940      	lsrs	r0, r0, #5
 802265a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802265e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022662:	4318      	orrs	r0, r3
 8022664:	8008      	strh	r0, [r1, #0]
 8022666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802266a:	bf00      	nop
 802266c:	0802abd6 	.word	0x0802abd6
 8022670:	0802b242 	.word	0x0802b242
 8022674:	0802acbf 	.word	0x0802acbf

08022678 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802267c:	ed2d 8b08 	vpush	{d8-d11}
 8022680:	b08f      	sub	sp, #60	; 0x3c
 8022682:	461d      	mov	r5, r3
 8022684:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022686:	920c      	str	r2, [sp, #48]	; 0x30
 8022688:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 802268c:	9107      	str	r1, [sp, #28]
 802268e:	6859      	ldr	r1, [r3, #4]
 8022690:	681b      	ldr	r3, [r3, #0]
 8022692:	900d      	str	r0, [sp, #52]	; 0x34
 8022694:	fb01 2707 	mla	r7, r1, r7, r2
 8022698:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802269c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802269e:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80226a2:	f8d3 8000 	ldr.w	r8, [r3]
 80226a6:	eeb0 aa40 	vmov.f32	s20, s0
 80226aa:	eef0 9a60 	vmov.f32	s19, s1
 80226ae:	eeb0 9a41 	vmov.f32	s18, s2
 80226b2:	eeb0 8a62 	vmov.f32	s16, s5
 80226b6:	eef0 8a43 	vmov.f32	s17, s6
 80226ba:	eef0 ba44 	vmov.f32	s23, s8
 80226be:	eeb0 ba64 	vmov.f32	s22, s9
 80226c2:	eef0 aa45 	vmov.f32	s21, s10
 80226c6:	9b07      	ldr	r3, [sp, #28]
 80226c8:	2b00      	cmp	r3, #0
 80226ca:	dc03      	bgt.n	80226d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80226cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80226ce:	2b00      	cmp	r3, #0
 80226d0:	f340 8181 	ble.w	80229d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80226d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80226da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80226de:	1e48      	subs	r0, r1, #1
 80226e0:	f102 3cff 	add.w	ip, r2, #4294967295
 80226e4:	2d00      	cmp	r5, #0
 80226e6:	f340 809b 	ble.w	8022820 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80226ea:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80226ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80226f2:	d406      	bmi.n	8022702 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80226f4:	4586      	cmp	lr, r0
 80226f6:	da04      	bge.n	8022702 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80226f8:	2b00      	cmp	r3, #0
 80226fa:	db02      	blt.n	8022702 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80226fc:	4563      	cmp	r3, ip
 80226fe:	f2c0 8090 	blt.w	8022822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022702:	f11e 0e01 	adds.w	lr, lr, #1
 8022706:	f100 8084 	bmi.w	8022812 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802270a:	4571      	cmp	r1, lr
 802270c:	f2c0 8081 	blt.w	8022812 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8022710:	3301      	adds	r3, #1
 8022712:	d47e      	bmi.n	8022812 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8022714:	429a      	cmp	r2, r3
 8022716:	db7c      	blt.n	8022812 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8022718:	46aa      	mov	sl, r5
 802271a:	46b9      	mov	r9, r7
 802271c:	f1ba 0f00 	cmp.w	sl, #0
 8022720:	f340 8099 	ble.w	8022856 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8022724:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022726:	1421      	asrs	r1, r4, #16
 8022728:	ea4f 4026 	mov.w	r0, r6, asr #16
 802272c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022730:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022734:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022738:	f100 80d0 	bmi.w	80228dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 802273c:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022740:	4559      	cmp	r1, fp
 8022742:	f280 80cb 	bge.w	80228dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8022746:	2800      	cmp	r0, #0
 8022748:	f2c0 80c8 	blt.w	80228dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 802274c:	f103 3bff 	add.w	fp, r3, #4294967295
 8022750:	4558      	cmp	r0, fp
 8022752:	f280 80c3 	bge.w	80228dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8022756:	fa0f fe8e 	sxth.w	lr, lr
 802275a:	fb00 110e 	mla	r1, r0, lr, r1
 802275e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022762:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8022766:	8841      	ldrh	r1, [r0, #2]
 8022768:	f1bc 0f00 	cmp.w	ip, #0
 802276c:	d00b      	beq.n	8022786 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802276e:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8022772:	3b01      	subs	r3, #1
 8022774:	005b      	lsls	r3, r3, #1
 8022776:	3302      	adds	r3, #2
 8022778:	eb00 0e03 	add.w	lr, r0, r3
 802277c:	5ac3      	ldrh	r3, [r0, r3]
 802277e:	9308      	str	r3, [sp, #32]
 8022780:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8022784:	9309      	str	r3, [sp, #36]	; 0x24
 8022786:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802278a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802278e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022792:	ea40 000b 	orr.w	r0, r0, fp
 8022796:	fb12 f30c 	smulbb	r3, r2, ip
 802279a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802279e:	10db      	asrs	r3, r3, #3
 80227a0:	f1cc 0e10 	rsb	lr, ip, #16
 80227a4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80227a8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80227ac:	ebae 0e02 	sub.w	lr, lr, r2
 80227b0:	ea4b 0101 	orr.w	r1, fp, r1
 80227b4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80227b8:	4351      	muls	r1, r2
 80227ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80227bc:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80227c0:	fb0e 1e00 	mla	lr, lr, r0, r1
 80227c4:	0410      	lsls	r0, r2, #16
 80227c6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80227ca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80227ce:	4310      	orrs	r0, r2
 80227d0:	9a08      	ldr	r2, [sp, #32]
 80227d2:	9908      	ldr	r1, [sp, #32]
 80227d4:	0412      	lsls	r2, r2, #16
 80227d6:	fb03 e000 	mla	r0, r3, r0, lr
 80227da:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80227de:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80227e2:	ea42 020e 	orr.w	r2, r2, lr
 80227e6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80227ea:	fb03 0302 	mla	r3, r3, r2, r0
 80227ee:	0d5a      	lsrs	r2, r3, #21
 80227f0:	095b      	lsrs	r3, r3, #5
 80227f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80227f6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80227fa:	4313      	orrs	r3, r2
 80227fc:	f8a9 3000 	strh.w	r3, [r9]
 8022800:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022802:	441c      	add	r4, r3
 8022804:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022806:	f109 0902 	add.w	r9, r9, #2
 802280a:	441e      	add	r6, r3
 802280c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022810:	e784      	b.n	802271c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8022812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022814:	441c      	add	r4, r3
 8022816:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022818:	3d01      	subs	r5, #1
 802281a:	441e      	add	r6, r3
 802281c:	3702      	adds	r7, #2
 802281e:	e761      	b.n	80226e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022820:	d01d      	beq.n	802285e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022822:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022824:	1e6b      	subs	r3, r5, #1
 8022826:	fb00 4003 	mla	r0, r0, r3, r4
 802282a:	1400      	asrs	r0, r0, #16
 802282c:	f53f af74 	bmi.w	8022718 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022830:	3901      	subs	r1, #1
 8022832:	4288      	cmp	r0, r1
 8022834:	f6bf af70 	bge.w	8022718 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022838:	9924      	ldr	r1, [sp, #144]	; 0x90
 802283a:	fb01 6303 	mla	r3, r1, r3, r6
 802283e:	141b      	asrs	r3, r3, #16
 8022840:	f53f af6a 	bmi.w	8022718 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022844:	3a01      	subs	r2, #1
 8022846:	4293      	cmp	r3, r2
 8022848:	f6bf af66 	bge.w	8022718 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802284c:	46a9      	mov	r9, r5
 802284e:	46ba      	mov	sl, r7
 8022850:	f1b9 0f00 	cmp.w	r9, #0
 8022854:	dc5a      	bgt.n	802290c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8022856:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802285a:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802285e:	9b07      	ldr	r3, [sp, #28]
 8022860:	2b00      	cmp	r3, #0
 8022862:	f340 80b8 	ble.w	80229d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8022866:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802286a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802286e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022872:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022874:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022878:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802287c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022880:	eef0 6a48 	vmov.f32	s13, s16
 8022884:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022888:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802288c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022890:	ee16 4a90 	vmov	r4, s13
 8022894:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022898:	eef0 6a68 	vmov.f32	s13, s17
 802289c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80228a0:	ee18 2a10 	vmov	r2, s16
 80228a4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80228a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80228ac:	ee18 2a90 	vmov	r2, s17
 80228b0:	9323      	str	r3, [sp, #140]	; 0x8c
 80228b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80228b8:	9324      	str	r3, [sp, #144]	; 0x90
 80228ba:	9b07      	ldr	r3, [sp, #28]
 80228bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80228be:	3b01      	subs	r3, #1
 80228c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228c4:	9307      	str	r3, [sp, #28]
 80228c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228c8:	ee16 6a90 	vmov	r6, s13
 80228cc:	bf14      	ite	ne
 80228ce:	461d      	movne	r5, r3
 80228d0:	4615      	moveq	r5, r2
 80228d2:	eef0 8a67 	vmov.f32	s17, s15
 80228d6:	eeb0 8a47 	vmov.f32	s16, s14
 80228da:	e6f4      	b.n	80226c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80228dc:	f111 0b01 	adds.w	fp, r1, #1
 80228e0:	d48e      	bmi.n	8022800 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80228e2:	45de      	cmp	lr, fp
 80228e4:	db8c      	blt.n	8022800 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80228e6:	f110 0b01 	adds.w	fp, r0, #1
 80228ea:	d489      	bmi.n	8022800 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80228ec:	455b      	cmp	r3, fp
 80228ee:	db87      	blt.n	8022800 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80228f0:	b21b      	sxth	r3, r3
 80228f2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80228f6:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80228fa:	9300      	str	r3, [sp, #0]
 80228fc:	4642      	mov	r2, r8
 80228fe:	fa0f f38e 	sxth.w	r3, lr
 8022902:	4649      	mov	r1, r9
 8022904:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022906:	f7ff fe2b 	bl	8022560 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802290a:	e779      	b.n	8022800 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802290c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802290e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022912:	1420      	asrs	r0, r4, #16
 8022914:	1431      	asrs	r1, r6, #16
 8022916:	fb03 0101 	mla	r1, r3, r1, r0
 802291a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802291e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022922:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8022926:	8841      	ldrh	r1, [r0, #2]
 8022928:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802292c:	f1be 0f00 	cmp.w	lr, #0
 8022930:	d00b      	beq.n	802294a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8022932:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022936:	3b01      	subs	r3, #1
 8022938:	005b      	lsls	r3, r3, #1
 802293a:	3302      	adds	r3, #2
 802293c:	eb00 0b03 	add.w	fp, r0, r3
 8022940:	5ac3      	ldrh	r3, [r0, r3]
 8022942:	930a      	str	r3, [sp, #40]	; 0x28
 8022944:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022948:	930b      	str	r3, [sp, #44]	; 0x2c
 802294a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802294e:	fb12 f30e 	smulbb	r3, r2, lr
 8022952:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022956:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802295a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802295e:	10db      	asrs	r3, r3, #3
 8022960:	ea40 000c 	orr.w	r0, r0, ip
 8022964:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022968:	f1ce 0c10 	rsb	ip, lr, #16
 802296c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022970:	ebac 0c02 	sub.w	ip, ip, r2
 8022974:	ea4b 0101 	orr.w	r1, fp, r1
 8022978:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802297c:	4351      	muls	r1, r2
 802297e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022980:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022984:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022988:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802298c:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8022990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022992:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022994:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022998:	0412      	lsls	r2, r2, #16
 802299a:	ea4b 0000 	orr.w	r0, fp, r0
 802299e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80229a2:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80229a6:	fb03 c000 	mla	r0, r3, r0, ip
 80229aa:	ea42 0b0b 	orr.w	fp, r2, fp
 80229ae:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80229b2:	fb03 000b 	mla	r0, r3, fp, r0
 80229b6:	0d43      	lsrs	r3, r0, #21
 80229b8:	0940      	lsrs	r0, r0, #5
 80229ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80229be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80229c2:	4318      	orrs	r0, r3
 80229c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229c6:	f82a 0b02 	strh.w	r0, [sl], #2
 80229ca:	441c      	add	r4, r3
 80229cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80229d2:	441e      	add	r6, r3
 80229d4:	e73c      	b.n	8022850 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80229d6:	b00f      	add	sp, #60	; 0x3c
 80229d8:	ecbd 8b08 	vpop	{d8-d11}
 80229dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080229e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80229e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229e4:	880e      	ldrh	r6, [r1, #0]
 80229e6:	b085      	sub	sp, #20
 80229e8:	ea4f 2c26 	mov.w	ip, r6, asr #8
 80229ec:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 80229f0:	4690      	mov	r8, r2
 80229f2:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 80229f6:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 80229fa:	9200      	str	r2, [sp, #0]
 80229fc:	00f6      	lsls	r6, r6, #3
 80229fe:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8022a02:	9201      	str	r2, [sp, #4]
 8022a04:	2c00      	cmp	r4, #0
 8022a06:	b2f2      	uxtb	r2, r6
 8022a08:	fb04 5603 	mla	r6, r4, r3, r5
 8022a0c:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8022a10:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022a14:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8022a18:	9202      	str	r2, [sp, #8]
 8022a1a:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8022a1e:	db36      	blt.n	8022a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8022a20:	45a6      	cmp	lr, r4
 8022a22:	dd34      	ble.n	8022a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8022a24:	2d00      	cmp	r5, #0
 8022a26:	db30      	blt.n	8022a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8022a28:	42ab      	cmp	r3, r5
 8022a2a:	dd2e      	ble.n	8022a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8022a2c:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8022a30:	1c6e      	adds	r6, r5, #1
 8022a32:	d42f      	bmi.n	8022a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8022a34:	42b3      	cmp	r3, r6
 8022a36:	dd2d      	ble.n	8022a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8022a38:	b370      	cbz	r0, 8022a98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 8022a3a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022a3e:	3401      	adds	r4, #1
 8022a40:	d42e      	bmi.n	8022aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8022a42:	45a6      	cmp	lr, r4
 8022a44:	dd2c      	ble.n	8022aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8022a46:	b377      	cbz	r7, 8022aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8022a48:	2d00      	cmp	r5, #0
 8022a4a:	db27      	blt.n	8022a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8022a4c:	42ab      	cmp	r3, r5
 8022a4e:	dd25      	ble.n	8022a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8022a50:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022a54:	3501      	adds	r5, #1
 8022a56:	d429      	bmi.n	8022aac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8022a58:	42ab      	cmp	r3, r5
 8022a5a:	dd27      	ble.n	8022aac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8022a5c:	b340      	cbz	r0, 8022ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8022a5e:	3301      	adds	r3, #1
 8022a60:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8022a64:	280f      	cmp	r0, #15
 8022a66:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022a6a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022a6e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022a72:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022a76:	d801      	bhi.n	8022a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8022a78:	2f0f      	cmp	r7, #15
 8022a7a:	d91b      	bls.n	8022ab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 8022a7c:	4b84      	ldr	r3, [pc, #528]	; (8022c90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b0>)
 8022a7e:	4a85      	ldr	r2, [pc, #532]	; (8022c94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8022a80:	4885      	ldr	r0, [pc, #532]	; (8022c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8022a82:	f240 210d 	movw	r1, #525	; 0x20d
 8022a86:	f002 fb15 	bl	80250b4 <__assert_func>
 8022a8a:	2200      	movs	r2, #0
 8022a8c:	e7d0      	b.n	8022a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 8022a8e:	2600      	movs	r6, #0
 8022a90:	4632      	mov	r2, r6
 8022a92:	e7d4      	b.n	8022a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8022a94:	2600      	movs	r6, #0
 8022a96:	e7d2      	b.n	8022a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8022a98:	4606      	mov	r6, r0
 8022a9a:	e7d0      	b.n	8022a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8022a9c:	2400      	movs	r4, #0
 8022a9e:	e7d9      	b.n	8022a54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8022aa0:	2300      	movs	r3, #0
 8022aa2:	461c      	mov	r4, r3
 8022aa4:	e7de      	b.n	8022a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8022aa6:	463b      	mov	r3, r7
 8022aa8:	463c      	mov	r4, r7
 8022aaa:	e7db      	b.n	8022a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8022aac:	2300      	movs	r3, #0
 8022aae:	e7d9      	b.n	8022a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8022ab0:	4603      	mov	r3, r0
 8022ab2:	e7d7      	b.n	8022a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8022ab4:	b280      	uxth	r0, r0
 8022ab6:	b2bf      	uxth	r7, r7
 8022ab8:	fb00 fe07 	mul.w	lr, r0, r7
 8022abc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022ac0:	0100      	lsls	r0, r0, #4
 8022ac2:	eba0 0c0e 	sub.w	ip, r0, lr
 8022ac6:	b2bf      	uxth	r7, r7
 8022ac8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8022acc:	fa1f fc8c 	uxth.w	ip, ip
 8022ad0:	1bed      	subs	r5, r5, r7
 8022ad2:	b2ad      	uxth	r5, r5
 8022ad4:	fb0c f00a 	mul.w	r0, ip, sl
 8022ad8:	fb05 000b 	mla	r0, r5, fp, r0
 8022adc:	fb07 0009 	mla	r0, r7, r9, r0
 8022ae0:	fb0e 0008 	mla	r0, lr, r8, r0
 8022ae4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022ae8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022aec:	9003      	str	r0, [sp, #12]
 8022aee:	d018      	beq.n	8022b22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 8022af0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022af4:	fb0b f000 	mul.w	r0, fp, r0
 8022af8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022afc:	fb0b fb02 	mul.w	fp, fp, r2
 8022b00:	0a02      	lsrs	r2, r0, #8
 8022b02:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022b06:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022b0a:	4402      	add	r2, r0
 8022b0c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022b10:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022b14:	0a12      	lsrs	r2, r2, #8
 8022b16:	0a00      	lsrs	r0, r0, #8
 8022b18:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022b1c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b20:	4302      	orrs	r2, r0
 8022b22:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022b26:	d019      	beq.n	8022b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 8022b28:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022b2c:	fb0a fb0b 	mul.w	fp, sl, fp
 8022b30:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022b34:	fb0a fa06 	mul.w	sl, sl, r6
 8022b38:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022b3c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b40:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b44:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022b48:	445e      	add	r6, fp
 8022b4a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022b4e:	0a36      	lsrs	r6, r6, #8
 8022b50:	0a00      	lsrs	r0, r0, #8
 8022b52:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b56:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b5a:	4306      	orrs	r6, r0
 8022b5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b60:	d019      	beq.n	8022b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 8022b62:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022b66:	fb09 fa0a 	mul.w	sl, r9, sl
 8022b6a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022b6e:	fb09 f904 	mul.w	r9, r9, r4
 8022b72:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022b76:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b7a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022b7e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8022b82:	4454      	add	r4, sl
 8022b84:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8022b88:	0a24      	lsrs	r4, r4, #8
 8022b8a:	0a00      	lsrs	r0, r0, #8
 8022b8c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b90:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b94:	4304      	orrs	r4, r0
 8022b96:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022b9a:	d019      	beq.n	8022bd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 8022b9c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022ba0:	fb08 f909 	mul.w	r9, r8, r9
 8022ba4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022ba8:	fb08 f803 	mul.w	r8, r8, r3
 8022bac:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022bb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022bb4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022bb8:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8022bbc:	444b      	add	r3, r9
 8022bbe:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022bc2:	0a1b      	lsrs	r3, r3, #8
 8022bc4:	0a00      	lsrs	r0, r0, #8
 8022bc6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022bca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022bce:	4303      	orrs	r3, r0
 8022bd0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022bd4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022bd8:	fb0c f808 	mul.w	r8, ip, r8
 8022bdc:	fb05 8800 	mla	r8, r5, r0, r8
 8022be0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022be4:	fb07 8800 	mla	r8, r7, r0, r8
 8022be8:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022bec:	fb0e 8000 	mla	r0, lr, r0, r8
 8022bf0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022bf4:	fb0c f606 	mul.w	r6, ip, r6
 8022bf8:	0a00      	lsrs	r0, r0, #8
 8022bfa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022bfe:	fb05 6202 	mla	r2, r5, r2, r6
 8022c02:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8022c06:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8022c0a:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8022c0e:	fb07 2700 	mla	r7, r7, r0, r2
 8022c12:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8022c16:	9b03      	ldr	r3, [sp, #12]
 8022c18:	9c00      	ldr	r4, [sp, #0]
 8022c1a:	b2ad      	uxth	r5, r5
 8022c1c:	436b      	muls	r3, r5
 8022c1e:	fb0e 7000 	mla	r0, lr, r0, r7
 8022c22:	1c5a      	adds	r2, r3, #1
 8022c24:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022c28:	0a00      	lsrs	r0, r0, #8
 8022c2a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022c2e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022c32:	ea48 0000 	orr.w	r0, r8, r0
 8022c36:	b2d2      	uxtb	r2, r2
 8022c38:	fb14 f602 	smulbb	r6, r4, r2
 8022c3c:	0c03      	lsrs	r3, r0, #16
 8022c3e:	fb03 6305 	mla	r3, r3, r5, r6
 8022c42:	b29e      	uxth	r6, r3
 8022c44:	9b01      	ldr	r3, [sp, #4]
 8022c46:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8022c4a:	fb13 f302 	smulbb	r3, r3, r2
 8022c4e:	fb04 3405 	mla	r4, r4, r5, r3
 8022c52:	9b02      	ldr	r3, [sp, #8]
 8022c54:	b2c0      	uxtb	r0, r0
 8022c56:	fb13 f202 	smulbb	r2, r3, r2
 8022c5a:	fb00 2005 	mla	r0, r0, r5, r2
 8022c5e:	b280      	uxth	r0, r0
 8022c60:	b2a4      	uxth	r4, r4
 8022c62:	1c42      	adds	r2, r0, #1
 8022c64:	1c73      	adds	r3, r6, #1
 8022c66:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022c6a:	1c62      	adds	r2, r4, #1
 8022c6c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8022c70:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022c74:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8022c78:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022c7c:	0952      	lsrs	r2, r2, #5
 8022c7e:	4303      	orrs	r3, r0
 8022c80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c84:	4313      	orrs	r3, r2
 8022c86:	800b      	strh	r3, [r1, #0]
 8022c88:	b005      	add	sp, #20
 8022c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c8e:	bf00      	nop
 8022c90:	0802abd6 	.word	0x0802abd6
 8022c94:	0802b199 	.word	0x0802b199
 8022c98:	0802acbf 	.word	0x0802acbf

08022c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ca0:	ed2d 8b08 	vpush	{d8-d11}
 8022ca4:	b09d      	sub	sp, #116	; 0x74
 8022ca6:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8022caa:	9219      	str	r2, [sp, #100]	; 0x64
 8022cac:	9307      	str	r3, [sp, #28]
 8022cae:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022cb0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8022cb6:	9117      	str	r1, [sp, #92]	; 0x5c
 8022cb8:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8022cbc:	901b      	str	r0, [sp, #108]	; 0x6c
 8022cbe:	6850      	ldr	r0, [r2, #4]
 8022cc0:	6812      	ldr	r2, [r2, #0]
 8022cc2:	fb00 1303 	mla	r3, r0, r3, r1
 8022cc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022cca:	930a      	str	r3, [sp, #40]	; 0x28
 8022ccc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022cce:	681b      	ldr	r3, [r3, #0]
 8022cd0:	9310      	str	r3, [sp, #64]	; 0x40
 8022cd2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cd8:	eeb0 aa40 	vmov.f32	s20, s0
 8022cdc:	eef0 9a60 	vmov.f32	s19, s1
 8022ce0:	eeb0 9a41 	vmov.f32	s18, s2
 8022ce4:	eeb0 8a62 	vmov.f32	s16, s5
 8022ce8:	eef0 8a43 	vmov.f32	s17, s6
 8022cec:	eef0 ba44 	vmov.f32	s23, s8
 8022cf0:	eeb0 ba64 	vmov.f32	s22, s9
 8022cf4:	eef0 aa45 	vmov.f32	s21, s10
 8022cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	dc03      	bgt.n	8022d06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022cfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022d00:	2b00      	cmp	r3, #0
 8022d02:	f340 837b 	ble.w	80233fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8022d06:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022d08:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d0c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022d10:	1e48      	subs	r0, r1, #1
 8022d12:	1e57      	subs	r7, r2, #1
 8022d14:	9b07      	ldr	r3, [sp, #28]
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	f340 8194 	ble.w	8023044 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8022d1c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022d20:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022d24:	d406      	bmi.n	8022d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022d26:	4584      	cmp	ip, r0
 8022d28:	da04      	bge.n	8022d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022d2a:	2b00      	cmp	r3, #0
 8022d2c:	db02      	blt.n	8022d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022d2e:	42bb      	cmp	r3, r7
 8022d30:	f2c0 8189 	blt.w	8023046 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022d34:	f11c 0c01 	adds.w	ip, ip, #1
 8022d38:	f100 8179 	bmi.w	802302e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022d3c:	4561      	cmp	r1, ip
 8022d3e:	f2c0 8176 	blt.w	802302e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022d42:	3301      	adds	r3, #1
 8022d44:	f100 8173 	bmi.w	802302e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022d48:	429a      	cmp	r2, r3
 8022d4a:	f2c0 8170 	blt.w	802302e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022d4e:	9b07      	ldr	r3, [sp, #28]
 8022d50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022d52:	9318      	str	r3, [sp, #96]	; 0x60
 8022d54:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d56:	2b00      	cmp	r3, #0
 8022d58:	f340 8192 	ble.w	8023080 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8022d5c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022d5e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022d60:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022d64:	689b      	ldr	r3, [r3, #8]
 8022d66:	1422      	asrs	r2, r4, #16
 8022d68:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022d6c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022d70:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022d74:	f100 81d3 	bmi.w	802311e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8022d78:	f103 38ff 	add.w	r8, r3, #4294967295
 8022d7c:	4542      	cmp	r2, r8
 8022d7e:	f280 81ce 	bge.w	802311e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8022d82:	f1bc 0f00 	cmp.w	ip, #0
 8022d86:	f2c0 81ca 	blt.w	802311e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8022d8a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022d8e:	45c4      	cmp	ip, r8
 8022d90:	f280 81c5 	bge.w	802311e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8022d94:	b21b      	sxth	r3, r3
 8022d96:	fb0c 2203 	mla	r2, ip, r3, r2
 8022d9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022d9c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8022da0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022da4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022da8:	2800      	cmp	r0, #0
 8022daa:	f000 81af 	beq.w	802310c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022dae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8022db2:	950c      	str	r5, [sp, #48]	; 0x30
 8022db4:	0e2d      	lsrs	r5, r5, #24
 8022db6:	9513      	str	r5, [sp, #76]	; 0x4c
 8022db8:	b181      	cbz	r1, 8022ddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022dba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022dbe:	3b01      	subs	r3, #1
 8022dc0:	009b      	lsls	r3, r3, #2
 8022dc2:	3304      	adds	r3, #4
 8022dc4:	eb08 0c03 	add.w	ip, r8, r3
 8022dc8:	f858 3003 	ldr.w	r3, [r8, r3]
 8022dcc:	9308      	str	r3, [sp, #32]
 8022dce:	0e1b      	lsrs	r3, r3, #24
 8022dd0:	9311      	str	r3, [sp, #68]	; 0x44
 8022dd2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8022dd8:	0e1b      	lsrs	r3, r3, #24
 8022dda:	9314      	str	r3, [sp, #80]	; 0x50
 8022ddc:	b280      	uxth	r0, r0
 8022dde:	b289      	uxth	r1, r1
 8022de0:	fb00 f901 	mul.w	r9, r0, r1
 8022de4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022de8:	0100      	lsls	r0, r0, #4
 8022dea:	eba0 0809 	sub.w	r8, r0, r9
 8022dee:	b289      	uxth	r1, r1
 8022df0:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022df4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022df6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022df8:	fa1f f888 	uxth.w	r8, r8
 8022dfc:	1a5b      	subs	r3, r3, r1
 8022dfe:	b29b      	uxth	r3, r3
 8022e00:	fb08 f000 	mul.w	r0, r8, r0
 8022e04:	fb03 000e 	mla	r0, r3, lr, r0
 8022e08:	fb01 0005 	mla	r0, r1, r5, r0
 8022e0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022e0e:	fb09 0005 	mla	r0, r9, r5, r0
 8022e12:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022e16:	2800      	cmp	r0, #0
 8022e18:	f000 8100 	beq.w	802301c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8022e1c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022e20:	d01b      	beq.n	8022e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022e22:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022e26:	fb0e fa0a 	mul.w	sl, lr, sl
 8022e2a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022e2e:	fb0e fe02 	mul.w	lr, lr, r2
 8022e32:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022e36:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022e3a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022e3e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022e42:	4452      	add	r2, sl
 8022e44:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022e48:	0a12      	lsrs	r2, r2, #8
 8022e4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022e52:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022e56:	ea42 020c 	orr.w	r2, r2, ip
 8022e5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022e5c:	2dff      	cmp	r5, #255	; 0xff
 8022e5e:	d021      	beq.n	8022ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022e60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022e62:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022e66:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022e68:	fb05 fb0b 	mul.w	fp, r5, fp
 8022e6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022e6e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022e72:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022e74:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022e78:	fb05 fa0a 	mul.w	sl, r5, sl
 8022e7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e80:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022e84:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022e88:	44de      	add	lr, fp
 8022e8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022e8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022e96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022e9e:	ea4e 050a 	orr.w	r5, lr, sl
 8022ea2:	950c      	str	r5, [sp, #48]	; 0x30
 8022ea4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022ea6:	2dff      	cmp	r5, #255	; 0xff
 8022ea8:	d021      	beq.n	8022eee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8022eaa:	9d08      	ldr	r5, [sp, #32]
 8022eac:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022eb0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022eb2:	fb05 fb0b 	mul.w	fp, r5, fp
 8022eb6:	9d08      	ldr	r5, [sp, #32]
 8022eb8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022ebc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022ebe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022ec2:	fb05 fa0a 	mul.w	sl, r5, sl
 8022ec6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022eca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022ece:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022ed2:	44de      	add	lr, fp
 8022ed4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022ed8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022edc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ee0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ee4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ee8:	ea4e 050a 	orr.w	r5, lr, sl
 8022eec:	9508      	str	r5, [sp, #32]
 8022eee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022ef0:	2dff      	cmp	r5, #255	; 0xff
 8022ef2:	d021      	beq.n	8022f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8022ef4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022ef6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022efa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022efc:	fb05 fb0b 	mul.w	fp, r5, fp
 8022f00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022f02:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022f06:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022f08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022f0c:	fb05 fa0a 	mul.w	sl, r5, sl
 8022f10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022f18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022f1c:	44de      	add	lr, fp
 8022f1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022f22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022f2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022f32:	ea4e 050a 	orr.w	r5, lr, sl
 8022f36:	950d      	str	r5, [sp, #52]	; 0x34
 8022f38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022f3a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022f3e:	9d08      	ldr	r5, [sp, #32]
 8022f40:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022f44:	fb08 fc0c 	mul.w	ip, r8, ip
 8022f48:	fb03 cc0e 	mla	ip, r3, lr, ip
 8022f4c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8022f50:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022f52:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022f56:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8022f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022f5c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022f60:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8022f64:	fb08 f80e 	mul.w	r8, r8, lr
 8022f68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022f6c:	fb03 8202 	mla	r2, r3, r2, r8
 8022f70:	9b08      	ldr	r3, [sp, #32]
 8022f72:	f8b7 e000 	ldrh.w	lr, [r7]
 8022f76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022f78:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8022f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f7e:	fb01 220a 	mla	r2, r1, sl, r2
 8022f82:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8022f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f88:	fb09 2901 	mla	r9, r9, r1, r2
 8022f8c:	4343      	muls	r3, r0
 8022f8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022f96:	1c58      	adds	r0, r3, #1
 8022f98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f9c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022fa0:	ea4c 0c09 	orr.w	ip, ip, r9
 8022fa4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022faa:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8022fae:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022fb2:	ea4f 232e 	mov.w	r3, lr, asr #8
 8022fb6:	b2c0      	uxtb	r0, r0
 8022fb8:	fb11 f102 	smulbb	r1, r1, r2
 8022fbc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022fc0:	fb03 1300 	mla	r3, r3, r0, r1
 8022fc4:	b299      	uxth	r1, r3
 8022fc6:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8022fca:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022fce:	fb13 f305 	smulbb	r3, r3, r5
 8022fd2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022fd6:	fb02 3200 	mla	r2, r2, r0, r3
 8022fda:	fa5f fc8c 	uxtb.w	ip, ip
 8022fde:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8022fe2:	b2db      	uxtb	r3, r3
 8022fe4:	fb1c fc05 	smulbb	ip, ip, r5
 8022fe8:	fb03 cc00 	mla	ip, r3, r0, ip
 8022fec:	b292      	uxth	r2, r2
 8022fee:	fa1f fc8c 	uxth.w	ip, ip
 8022ff2:	1c4b      	adds	r3, r1, #1
 8022ff4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022ff8:	f10c 0001 	add.w	r0, ip, #1
 8022ffc:	1c51      	adds	r1, r2, #1
 8022ffe:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8023002:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023006:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802300a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802300e:	0952      	lsrs	r2, r2, #5
 8023010:	ea43 030c 	orr.w	r3, r3, ip
 8023014:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023018:	4313      	orrs	r3, r2
 802301a:	803b      	strh	r3, [r7, #0]
 802301c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802301e:	441c      	add	r4, r3
 8023020:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023022:	441e      	add	r6, r3
 8023024:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023026:	3b01      	subs	r3, #1
 8023028:	3702      	adds	r7, #2
 802302a:	9318      	str	r3, [sp, #96]	; 0x60
 802302c:	e692      	b.n	8022d54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802302e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023030:	441c      	add	r4, r3
 8023032:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023034:	441e      	add	r6, r3
 8023036:	9b07      	ldr	r3, [sp, #28]
 8023038:	3b01      	subs	r3, #1
 802303a:	9307      	str	r3, [sp, #28]
 802303c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802303e:	3302      	adds	r3, #2
 8023040:	930a      	str	r3, [sp, #40]	; 0x28
 8023042:	e667      	b.n	8022d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023044:	d023      	beq.n	802308e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023046:	9b07      	ldr	r3, [sp, #28]
 8023048:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802304a:	3b01      	subs	r3, #1
 802304c:	fb00 4003 	mla	r0, r0, r3, r4
 8023050:	1400      	asrs	r0, r0, #16
 8023052:	f53f ae7c 	bmi.w	8022d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023056:	3901      	subs	r1, #1
 8023058:	4288      	cmp	r0, r1
 802305a:	f6bf ae78 	bge.w	8022d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802305e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8023060:	fb01 6303 	mla	r3, r1, r3, r6
 8023064:	141b      	asrs	r3, r3, #16
 8023066:	f53f ae72 	bmi.w	8022d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802306a:	3a01      	subs	r2, #1
 802306c:	4293      	cmp	r3, r2
 802306e:	f6bf ae6e 	bge.w	8022d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023072:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023076:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802307a:	f1bb 0f00 	cmp.w	fp, #0
 802307e:	dc6c      	bgt.n	802315a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 8023080:	9b07      	ldr	r3, [sp, #28]
 8023082:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023088:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802308c:	930a      	str	r3, [sp, #40]	; 0x28
 802308e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023090:	2b00      	cmp	r3, #0
 8023092:	f340 81b3 	ble.w	80233fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8023096:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802309a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802309e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80230a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80230a4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80230a8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80230ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80230b0:	eef0 6a48 	vmov.f32	s13, s16
 80230b4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80230b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230bc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80230c0:	ee16 4a90 	vmov	r4, s13
 80230c4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80230c8:	eef0 6a68 	vmov.f32	s13, s17
 80230cc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80230d0:	ee18 2a10 	vmov	r2, s16
 80230d4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80230d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80230dc:	ee18 2a90 	vmov	r2, s17
 80230e0:	9331      	str	r3, [sp, #196]	; 0xc4
 80230e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80230e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80230e8:	9332      	str	r3, [sp, #200]	; 0xc8
 80230ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80230ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80230ee:	3b01      	subs	r3, #1
 80230f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80230f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80230f8:	bf08      	it	eq
 80230fa:	4613      	moveq	r3, r2
 80230fc:	ee16 6a90 	vmov	r6, s13
 8023100:	9307      	str	r3, [sp, #28]
 8023102:	eef0 8a67 	vmov.f32	s17, s15
 8023106:	eeb0 8a47 	vmov.f32	s16, s14
 802310a:	e5f5      	b.n	8022cf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802310c:	2900      	cmp	r1, #0
 802310e:	f43f ae65 	beq.w	8022ddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023112:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023116:	9308      	str	r3, [sp, #32]
 8023118:	0e1b      	lsrs	r3, r3, #24
 802311a:	9311      	str	r3, [sp, #68]	; 0x44
 802311c:	e65e      	b.n	8022ddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802311e:	f112 0801 	adds.w	r8, r2, #1
 8023122:	f53f af7b 	bmi.w	802301c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8023126:	4543      	cmp	r3, r8
 8023128:	f6ff af78 	blt.w	802301c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802312c:	f11c 0801 	adds.w	r8, ip, #1
 8023130:	f53f af74 	bmi.w	802301c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8023134:	45c6      	cmp	lr, r8
 8023136:	f6ff af71 	blt.w	802301c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802313a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802313c:	9201      	str	r2, [sp, #4]
 802313e:	fa0f f28e 	sxth.w	r2, lr
 8023142:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023146:	e9cd c002 	strd	ip, r0, [sp, #8]
 802314a:	9200      	str	r2, [sp, #0]
 802314c:	b21b      	sxth	r3, r3
 802314e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023150:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023152:	4639      	mov	r1, r7
 8023154:	f7ff fc44 	bl	80229e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023158:	e760      	b.n	802301c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802315a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802315c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802315e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023162:	1427      	asrs	r7, r4, #16
 8023164:	1433      	asrs	r3, r6, #16
 8023166:	fb01 7303 	mla	r3, r1, r3, r7
 802316a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802316e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023172:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023176:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802317a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802317e:	2a00      	cmp	r2, #0
 8023180:	f000 8133 	beq.w	80233ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 8023184:	687d      	ldr	r5, [r7, #4]
 8023186:	950e      	str	r5, [sp, #56]	; 0x38
 8023188:	0e2d      	lsrs	r5, r5, #24
 802318a:	9515      	str	r5, [sp, #84]	; 0x54
 802318c:	b178      	cbz	r0, 80231ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802318e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8023192:	3901      	subs	r1, #1
 8023194:	0089      	lsls	r1, r1, #2
 8023196:	3104      	adds	r1, #4
 8023198:	eb07 0e01 	add.w	lr, r7, r1
 802319c:	5879      	ldr	r1, [r7, r1]
 802319e:	9109      	str	r1, [sp, #36]	; 0x24
 80231a0:	0e09      	lsrs	r1, r1, #24
 80231a2:	9112      	str	r1, [sp, #72]	; 0x48
 80231a4:	f8de 1004 	ldr.w	r1, [lr, #4]
 80231a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80231aa:	0e09      	lsrs	r1, r1, #24
 80231ac:	9116      	str	r1, [sp, #88]	; 0x58
 80231ae:	b292      	uxth	r2, r2
 80231b0:	b280      	uxth	r0, r0
 80231b2:	fb02 f800 	mul.w	r8, r2, r0
 80231b6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80231ba:	0112      	lsls	r2, r2, #4
 80231bc:	eba2 0e08 	sub.w	lr, r2, r8
 80231c0:	b280      	uxth	r0, r0
 80231c2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80231c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80231c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80231ca:	fa1f fe8e 	uxth.w	lr, lr
 80231ce:	1a12      	subs	r2, r2, r0
 80231d0:	b292      	uxth	r2, r2
 80231d2:	fb0e f101 	mul.w	r1, lr, r1
 80231d6:	fb02 110c 	mla	r1, r2, ip, r1
 80231da:	fb00 1105 	mla	r1, r0, r5, r1
 80231de:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80231e0:	fb08 1105 	mla	r1, r8, r5, r1
 80231e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80231e8:	2900      	cmp	r1, #0
 80231ea:	f000 80f5 	beq.w	80233d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80231ee:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80231f2:	d019      	beq.n	8023228 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 80231f4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80231f8:	fb0c fa0a 	mul.w	sl, ip, sl
 80231fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023200:	fb0c fc03 	mul.w	ip, ip, r3
 8023204:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023208:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802320c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023210:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023214:	4453      	add	r3, sl
 8023216:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802321a:	0a1b      	lsrs	r3, r3, #8
 802321c:	0a3f      	lsrs	r7, r7, #8
 802321e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023222:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023226:	433b      	orrs	r3, r7
 8023228:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802322a:	2dff      	cmp	r5, #255	; 0xff
 802322c:	d020      	beq.n	8023270 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 802322e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023230:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023234:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023236:	436f      	muls	r7, r5
 8023238:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802323a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802323e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023240:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023244:	fb05 fa0a 	mul.w	sl, r5, sl
 8023248:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802324c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023250:	44bc      	add	ip, r7
 8023252:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023256:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802325a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802325e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023262:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023266:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802326a:	ea4c 050a 	orr.w	r5, ip, sl
 802326e:	950e      	str	r5, [sp, #56]	; 0x38
 8023270:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023272:	2dff      	cmp	r5, #255	; 0xff
 8023274:	d020      	beq.n	80232b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8023276:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023278:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802327c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802327e:	436f      	muls	r7, r5
 8023280:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023282:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023286:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023288:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802328c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023290:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023294:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023298:	44bc      	add	ip, r7
 802329a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802329e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80232a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80232aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80232ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80232b2:	ea4c 050a 	orr.w	r5, ip, sl
 80232b6:	9509      	str	r5, [sp, #36]	; 0x24
 80232b8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80232ba:	2dff      	cmp	r5, #255	; 0xff
 80232bc:	d020      	beq.n	8023300 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 80232be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80232c0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80232c4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80232c6:	436f      	muls	r7, r5
 80232c8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80232ca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80232ce:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80232d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80232d4:	fb05 fa0a 	mul.w	sl, r5, sl
 80232d8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80232dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80232e0:	44bc      	add	ip, r7
 80232e2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80232e6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80232ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80232f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80232f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80232fa:	ea4c 050a 	orr.w	r5, ip, sl
 80232fe:	950f      	str	r5, [sp, #60]	; 0x3c
 8023300:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023302:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023306:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023308:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802330c:	fb0e f707 	mul.w	r7, lr, r7
 8023310:	fb02 770c 	mla	r7, r2, ip, r7
 8023314:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023318:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802331a:	fb00 770c 	mla	r7, r0, ip, r7
 802331e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023322:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023324:	fb08 770c 	mla	r7, r8, ip, r7
 8023328:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802332c:	fb0e fe0c 	mul.w	lr, lr, ip
 8023330:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023334:	fb02 e303 	mla	r3, r2, r3, lr
 8023338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802333a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802333c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023342:	fb00 330a 	mla	r3, r0, sl, r3
 8023346:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802334a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802334e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023350:	f8b9 0000 	ldrh.w	r0, [r9]
 8023354:	4359      	muls	r1, r3
 8023356:	0a3f      	lsrs	r7, r7, #8
 8023358:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802335c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023360:	1c4b      	adds	r3, r1, #1
 8023362:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023366:	ea47 070c 	orr.w	r7, r7, ip
 802336a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802336e:	1202      	asrs	r2, r0, #8
 8023370:	0c3b      	lsrs	r3, r7, #16
 8023372:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023376:	b2c9      	uxtb	r1, r1
 8023378:	fb13 f305 	smulbb	r3, r3, r5
 802337c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023380:	fb02 3201 	mla	r2, r2, r1, r3
 8023384:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023388:	10c3      	asrs	r3, r0, #3
 802338a:	b2ff      	uxtb	r7, r7
 802338c:	00c0      	lsls	r0, r0, #3
 802338e:	b2c0      	uxtb	r0, r0
 8023390:	fb17 f705 	smulbb	r7, r7, r5
 8023394:	fb00 7001 	mla	r0, r0, r1, r7
 8023398:	b292      	uxth	r2, r2
 802339a:	fb1c fc05 	smulbb	ip, ip, r5
 802339e:	b280      	uxth	r0, r0
 80233a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80233a4:	fb03 c301 	mla	r3, r3, r1, ip
 80233a8:	1c51      	adds	r1, r2, #1
 80233aa:	f100 0c01 	add.w	ip, r0, #1
 80233ae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80233b2:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80233b6:	b29b      	uxth	r3, r3
 80233b8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80233bc:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80233c0:	ea42 020c 	orr.w	r2, r2, ip
 80233c4:	f103 0c01 	add.w	ip, r3, #1
 80233c8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80233cc:	095b      	lsrs	r3, r3, #5
 80233ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80233d2:	431a      	orrs	r2, r3
 80233d4:	f8a9 2000 	strh.w	r2, [r9]
 80233d8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80233da:	441c      	add	r4, r3
 80233dc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80233de:	f109 0902 	add.w	r9, r9, #2
 80233e2:	441e      	add	r6, r3
 80233e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80233e8:	e647      	b.n	802307a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80233ea:	2800      	cmp	r0, #0
 80233ec:	f43f aedf 	beq.w	80231ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80233f0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80233f4:	9109      	str	r1, [sp, #36]	; 0x24
 80233f6:	0e09      	lsrs	r1, r1, #24
 80233f8:	9112      	str	r1, [sp, #72]	; 0x48
 80233fa:	e6d8      	b.n	80231ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80233fc:	b01d      	add	sp, #116	; 0x74
 80233fe:	ecbd 8b08 	vpop	{d8-d11}
 8023402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8023408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802340c:	880e      	ldrh	r6, [r1, #0]
 802340e:	b085      	sub	sp, #20
 8023410:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8023414:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8023418:	4690      	mov	r8, r2
 802341a:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 802341e:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8023422:	9200      	str	r2, [sp, #0]
 8023424:	00f6      	lsls	r6, r6, #3
 8023426:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 802342a:	9201      	str	r2, [sp, #4]
 802342c:	2c00      	cmp	r4, #0
 802342e:	b2f2      	uxtb	r2, r6
 8023430:	fb04 5603 	mla	r6, r4, r3, r5
 8023434:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023438:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802343c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8023440:	9202      	str	r2, [sp, #8]
 8023442:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8023446:	db36      	blt.n	80234b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8023448:	45a6      	cmp	lr, r4
 802344a:	dd34      	ble.n	80234b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802344c:	2d00      	cmp	r5, #0
 802344e:	db30      	blt.n	80234b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8023450:	42ab      	cmp	r3, r5
 8023452:	dd2e      	ble.n	80234b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8023454:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8023458:	1c6e      	adds	r6, r5, #1
 802345a:	d42f      	bmi.n	80234bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 802345c:	42b3      	cmp	r3, r6
 802345e:	dd2d      	ble.n	80234bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8023460:	b370      	cbz	r0, 80234c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 8023462:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8023466:	3401      	adds	r4, #1
 8023468:	d42e      	bmi.n	80234c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 802346a:	45a6      	cmp	lr, r4
 802346c:	dd2c      	ble.n	80234c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 802346e:	b377      	cbz	r7, 80234ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 8023470:	2d00      	cmp	r5, #0
 8023472:	db27      	blt.n	80234c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8023474:	42ab      	cmp	r3, r5
 8023476:	dd25      	ble.n	80234c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8023478:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802347c:	3501      	adds	r5, #1
 802347e:	d429      	bmi.n	80234d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8023480:	42ab      	cmp	r3, r5
 8023482:	dd27      	ble.n	80234d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8023484:	b340      	cbz	r0, 80234d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8023486:	3301      	adds	r3, #1
 8023488:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 802348c:	280f      	cmp	r0, #15
 802348e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8023492:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023496:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802349a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802349e:	d801      	bhi.n	80234a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 80234a0:	2f0f      	cmp	r7, #15
 80234a2:	d91b      	bls.n	80234dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 80234a4:	4b7d      	ldr	r3, [pc, #500]	; (802369c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>)
 80234a6:	4a7e      	ldr	r2, [pc, #504]	; (80236a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 80234a8:	487e      	ldr	r0, [pc, #504]	; (80236a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 80234aa:	f240 210d 	movw	r1, #525	; 0x20d
 80234ae:	f001 fe01 	bl	80250b4 <__assert_func>
 80234b2:	2200      	movs	r2, #0
 80234b4:	e7d0      	b.n	8023458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 80234b6:	2600      	movs	r6, #0
 80234b8:	4632      	mov	r2, r6
 80234ba:	e7d4      	b.n	8023466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80234bc:	2600      	movs	r6, #0
 80234be:	e7d2      	b.n	8023466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80234c0:	4606      	mov	r6, r0
 80234c2:	e7d0      	b.n	8023466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80234c4:	2400      	movs	r4, #0
 80234c6:	e7d9      	b.n	802347c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 80234c8:	2300      	movs	r3, #0
 80234ca:	461c      	mov	r4, r3
 80234cc:	e7de      	b.n	802348c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 80234ce:	463b      	mov	r3, r7
 80234d0:	463c      	mov	r4, r7
 80234d2:	e7db      	b.n	802348c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 80234d4:	2300      	movs	r3, #0
 80234d6:	e7d9      	b.n	802348c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 80234d8:	4603      	mov	r3, r0
 80234da:	e7d7      	b.n	802348c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 80234dc:	b280      	uxth	r0, r0
 80234de:	b2bf      	uxth	r7, r7
 80234e0:	fb00 fe07 	mul.w	lr, r0, r7
 80234e4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80234e8:	0100      	lsls	r0, r0, #4
 80234ea:	eba0 0c0e 	sub.w	ip, r0, lr
 80234ee:	b2bf      	uxth	r7, r7
 80234f0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80234f4:	fa1f fc8c 	uxth.w	ip, ip
 80234f8:	1bed      	subs	r5, r5, r7
 80234fa:	b2ad      	uxth	r5, r5
 80234fc:	fb0c f00a 	mul.w	r0, ip, sl
 8023500:	fb05 000b 	mla	r0, r5, fp, r0
 8023504:	fb07 0009 	mla	r0, r7, r9, r0
 8023508:	fb0e 0008 	mla	r0, lr, r8, r0
 802350c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023510:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023514:	9003      	str	r0, [sp, #12]
 8023516:	d018      	beq.n	802354a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 8023518:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802351c:	fb0b f000 	mul.w	r0, fp, r0
 8023520:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023524:	fb0b fb02 	mul.w	fp, fp, r2
 8023528:	0a02      	lsrs	r2, r0, #8
 802352a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802352e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023532:	4402      	add	r2, r0
 8023534:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8023538:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802353c:	0a12      	lsrs	r2, r2, #8
 802353e:	0a00      	lsrs	r0, r0, #8
 8023540:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023544:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023548:	4302      	orrs	r2, r0
 802354a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802354e:	d019      	beq.n	8023584 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 8023550:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023554:	fb0a fb0b 	mul.w	fp, sl, fp
 8023558:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802355c:	fb0a fa06 	mul.w	sl, sl, r6
 8023560:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023564:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023568:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802356c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8023570:	445e      	add	r6, fp
 8023572:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8023576:	0a36      	lsrs	r6, r6, #8
 8023578:	0a00      	lsrs	r0, r0, #8
 802357a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802357e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023582:	4306      	orrs	r6, r0
 8023584:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023588:	d019      	beq.n	80235be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 802358a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802358e:	fb09 fa0a 	mul.w	sl, r9, sl
 8023592:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023596:	fb09 f904 	mul.w	r9, r9, r4
 802359a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802359e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80235a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80235a6:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80235aa:	4454      	add	r4, sl
 80235ac:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80235b0:	0a24      	lsrs	r4, r4, #8
 80235b2:	0a00      	lsrs	r0, r0, #8
 80235b4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80235b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80235bc:	4304      	orrs	r4, r0
 80235be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80235c2:	d019      	beq.n	80235f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 80235c4:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80235c8:	fb08 f909 	mul.w	r9, r8, r9
 80235cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80235d0:	fb08 f803 	mul.w	r8, r8, r3
 80235d4:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80235d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80235dc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80235e0:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80235e4:	444b      	add	r3, r9
 80235e6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80235ea:	0a1b      	lsrs	r3, r3, #8
 80235ec:	0a00      	lsrs	r0, r0, #8
 80235ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80235f2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80235f6:	4303      	orrs	r3, r0
 80235f8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80235fc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8023600:	fb0c f808 	mul.w	r8, ip, r8
 8023604:	fb05 8800 	mla	r8, r5, r0, r8
 8023608:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802360c:	fb07 8800 	mla	r8, r7, r0, r8
 8023610:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8023614:	fb0e 8000 	mla	r0, lr, r0, r8
 8023618:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802361c:	0a00      	lsrs	r0, r0, #8
 802361e:	fb0c f606 	mul.w	r6, ip, r6
 8023622:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023626:	fb05 6202 	mla	r2, r5, r2, r6
 802362a:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 802362e:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8023632:	fb07 2700 	mla	r7, r7, r0, r2
 8023636:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802363a:	9b03      	ldr	r3, [sp, #12]
 802363c:	9c02      	ldr	r4, [sp, #8]
 802363e:	9d01      	ldr	r5, [sp, #4]
 8023640:	fb0e 7000 	mla	r0, lr, r0, r7
 8023644:	43da      	mvns	r2, r3
 8023646:	9b00      	ldr	r3, [sp, #0]
 8023648:	b2d2      	uxtb	r2, r2
 802364a:	0a00      	lsrs	r0, r0, #8
 802364c:	4353      	muls	r3, r2
 802364e:	4354      	muls	r4, r2
 8023650:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023654:	ea48 0000 	orr.w	r0, r8, r0
 8023658:	4355      	muls	r5, r2
 802365a:	4622      	mov	r2, r4
 802365c:	1c5c      	adds	r4, r3, #1
 802365e:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8023662:	0c03      	lsrs	r3, r0, #16
 8023664:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023668:	4b0f      	ldr	r3, [pc, #60]	; (80236a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 802366a:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 802366e:	1c54      	adds	r4, r2, #1
 8023670:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8023674:	b2c2      	uxtb	r2, r0
 8023676:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802367a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802367e:	1c6a      	adds	r2, r5, #1
 8023680:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8023684:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023688:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802368c:	00c0      	lsls	r0, r0, #3
 802368e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023692:	4318      	orrs	r0, r3
 8023694:	8008      	strh	r0, [r1, #0]
 8023696:	b005      	add	sp, #20
 8023698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802369c:	0802abd6 	.word	0x0802abd6
 80236a0:	0802b199 	.word	0x0802b199
 80236a4:	0802acbf 	.word	0x0802acbf
 80236a8:	fffff800 	.word	0xfffff800

080236ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80236ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236b0:	ed2d 8b08 	vpush	{d8-d11}
 80236b4:	b09b      	sub	sp, #108	; 0x6c
 80236b6:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 80236ba:	9218      	str	r2, [sp, #96]	; 0x60
 80236bc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80236be:	9116      	str	r1, [sp, #88]	; 0x58
 80236c0:	9307      	str	r3, [sp, #28]
 80236c2:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80236c6:	9019      	str	r0, [sp, #100]	; 0x64
 80236c8:	6850      	ldr	r0, [r2, #4]
 80236ca:	6812      	ldr	r2, [r2, #0]
 80236cc:	fb00 1303 	mla	r3, r0, r3, r1
 80236d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80236d4:	930a      	str	r3, [sp, #40]	; 0x28
 80236d6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80236d8:	681b      	ldr	r3, [r3, #0]
 80236da:	930f      	str	r3, [sp, #60]	; 0x3c
 80236dc:	eeb0 aa40 	vmov.f32	s20, s0
 80236e0:	eef0 9a60 	vmov.f32	s19, s1
 80236e4:	eeb0 9a41 	vmov.f32	s18, s2
 80236e8:	eeb0 8a62 	vmov.f32	s16, s5
 80236ec:	eef0 8a43 	vmov.f32	s17, s6
 80236f0:	eef0 ba44 	vmov.f32	s23, s8
 80236f4:	eeb0 ba64 	vmov.f32	s22, s9
 80236f8:	eef0 aa45 	vmov.f32	s21, s10
 80236fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80236fe:	2b00      	cmp	r3, #0
 8023700:	dc03      	bgt.n	802370a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023702:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023704:	2b00      	cmp	r3, #0
 8023706:	f340 838a 	ble.w	8023e1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x772>
 802370a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802370c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023710:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023714:	1e48      	subs	r0, r1, #1
 8023716:	1e57      	subs	r7, r2, #1
 8023718:	9b07      	ldr	r3, [sp, #28]
 802371a:	2b00      	cmp	r3, #0
 802371c:	f340 818b 	ble.w	8023a36 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023720:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023724:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023728:	d406      	bmi.n	8023738 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802372a:	4584      	cmp	ip, r0
 802372c:	da04      	bge.n	8023738 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802372e:	2b00      	cmp	r3, #0
 8023730:	db02      	blt.n	8023738 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023732:	42bb      	cmp	r3, r7
 8023734:	f2c0 8180 	blt.w	8023a38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8023738:	f11c 0c01 	adds.w	ip, ip, #1
 802373c:	f100 8170 	bmi.w	8023a20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023740:	4561      	cmp	r1, ip
 8023742:	f2c0 816d 	blt.w	8023a20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023746:	3301      	adds	r3, #1
 8023748:	f100 816a 	bmi.w	8023a20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802374c:	429a      	cmp	r2, r3
 802374e:	f2c0 8167 	blt.w	8023a20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023752:	9b07      	ldr	r3, [sp, #28]
 8023754:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023756:	9317      	str	r3, [sp, #92]	; 0x5c
 8023758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802375a:	2b00      	cmp	r3, #0
 802375c:	f340 8189 	ble.w	8023a72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023760:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8023762:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023764:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023768:	689b      	ldr	r3, [r3, #8]
 802376a:	1422      	asrs	r2, r4, #16
 802376c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023770:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023774:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023778:	f100 81d8 	bmi.w	8023b2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802377c:	f103 38ff 	add.w	r8, r3, #4294967295
 8023780:	4542      	cmp	r2, r8
 8023782:	f280 81d3 	bge.w	8023b2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8023786:	f1bc 0f00 	cmp.w	ip, #0
 802378a:	f2c0 81cf 	blt.w	8023b2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802378e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023792:	45c4      	cmp	ip, r8
 8023794:	f280 81ca 	bge.w	8023b2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8023798:	b21b      	sxth	r3, r3
 802379a:	fb0c 2203 	mla	r2, ip, r3, r2
 802379e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80237a0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80237a4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80237a8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80237ac:	2900      	cmp	r1, #0
 80237ae:	f000 81a6 	beq.w	8023afe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80237b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80237b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80237b8:	0e2d      	lsrs	r5, r5, #24
 80237ba:	9512      	str	r5, [sp, #72]	; 0x48
 80237bc:	b180      	cbz	r0, 80237e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80237be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80237c2:	3b01      	subs	r3, #1
 80237c4:	009b      	lsls	r3, r3, #2
 80237c6:	3304      	adds	r3, #4
 80237c8:	eb08 0c03 	add.w	ip, r8, r3
 80237cc:	f858 3003 	ldr.w	r3, [r8, r3]
 80237d0:	9308      	str	r3, [sp, #32]
 80237d2:	0e1b      	lsrs	r3, r3, #24
 80237d4:	9310      	str	r3, [sp, #64]	; 0x40
 80237d6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80237da:	930c      	str	r3, [sp, #48]	; 0x30
 80237dc:	0e1b      	lsrs	r3, r3, #24
 80237de:	9313      	str	r3, [sp, #76]	; 0x4c
 80237e0:	b289      	uxth	r1, r1
 80237e2:	b280      	uxth	r0, r0
 80237e4:	fb01 f900 	mul.w	r9, r1, r0
 80237e8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80237ec:	0109      	lsls	r1, r1, #4
 80237ee:	eba1 0809 	sub.w	r8, r1, r9
 80237f2:	b280      	uxth	r0, r0
 80237f4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80237f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80237fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80237fc:	fa1f f888 	uxth.w	r8, r8
 8023800:	1a09      	subs	r1, r1, r0
 8023802:	b289      	uxth	r1, r1
 8023804:	fb08 f303 	mul.w	r3, r8, r3
 8023808:	fb01 330e 	mla	r3, r1, lr, r3
 802380c:	fb00 3305 	mla	r3, r0, r5, r3
 8023810:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023812:	fb09 3305 	mla	r3, r9, r5, r3
 8023816:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802381a:	2b00      	cmp	r3, #0
 802381c:	f000 80f7 	beq.w	8023a0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023820:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023824:	d01b      	beq.n	802385e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8023826:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802382a:	fb0e fa0a 	mul.w	sl, lr, sl
 802382e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023832:	fb0e fe02 	mul.w	lr, lr, r2
 8023836:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802383a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802383e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023842:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023846:	4452      	add	r2, sl
 8023848:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802384c:	0a12      	lsrs	r2, r2, #8
 802384e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023852:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023856:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802385a:	ea42 020c 	orr.w	r2, r2, ip
 802385e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023860:	2dff      	cmp	r5, #255	; 0xff
 8023862:	d021      	beq.n	80238a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8023864:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023866:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802386a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802386c:	fb05 fb0b 	mul.w	fp, r5, fp
 8023870:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023872:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023876:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023878:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802387c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023880:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023884:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023888:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802388c:	44de      	add	lr, fp
 802388e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023892:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023896:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802389a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802389e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80238a2:	ea4e 050a 	orr.w	r5, lr, sl
 80238a6:	950b      	str	r5, [sp, #44]	; 0x2c
 80238a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80238aa:	2dff      	cmp	r5, #255	; 0xff
 80238ac:	d021      	beq.n	80238f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80238ae:	9d08      	ldr	r5, [sp, #32]
 80238b0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80238b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80238b6:	fb05 fb0b 	mul.w	fp, r5, fp
 80238ba:	9d08      	ldr	r5, [sp, #32]
 80238bc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80238c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80238c2:	fb05 fa0e 	mul.w	sl, r5, lr
 80238c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80238ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80238d2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80238d6:	44de      	add	lr, fp
 80238d8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80238dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80238e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80238ec:	ea4e 050a 	orr.w	r5, lr, sl
 80238f0:	9508      	str	r5, [sp, #32]
 80238f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80238f4:	2dff      	cmp	r5, #255	; 0xff
 80238f6:	d021      	beq.n	802393c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80238f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80238fa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80238fe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023900:	fb05 fb0b 	mul.w	fp, r5, fp
 8023904:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023906:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802390a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802390c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023910:	fb05 fa0a 	mul.w	sl, r5, sl
 8023914:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023918:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802391c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023920:	44de      	add	lr, fp
 8023922:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023926:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802392a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802392e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023932:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023936:	ea4e 050a 	orr.w	r5, lr, sl
 802393a:	950c      	str	r5, [sp, #48]	; 0x30
 802393c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802393e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023942:	9d08      	ldr	r5, [sp, #32]
 8023944:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023948:	fb08 fc0c 	mul.w	ip, r8, ip
 802394c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023950:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023954:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023956:	fb00 cc0e 	mla	ip, r0, lr, ip
 802395a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802395e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023960:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023964:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023968:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802396c:	fb08 f80e 	mul.w	r8, r8, lr
 8023970:	fb01 8202 	mla	r2, r1, r2, r8
 8023974:	9908      	ldr	r1, [sp, #32]
 8023976:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802397a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802397c:	fb00 220a 	mla	r2, r0, sl, r2
 8023980:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023984:	fb09 2900 	mla	r9, r9, r0, r2
 8023988:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802398c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023990:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023994:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023998:	ea4c 0c09 	orr.w	ip, ip, r9
 802399c:	2bff      	cmp	r3, #255	; 0xff
 802399e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80239a2:	f000 80b5 	beq.w	8023b10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 80239a6:	8839      	ldrh	r1, [r7, #0]
 80239a8:	43db      	mvns	r3, r3
 80239aa:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80239ae:	fa5f f883 	uxtb.w	r8, r3
 80239b2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80239b6:	fb0e fe08 	mul.w	lr, lr, r8
 80239ba:	10c8      	asrs	r0, r1, #3
 80239bc:	00cb      	lsls	r3, r1, #3
 80239be:	f10e 0101 	add.w	r1, lr, #1
 80239c2:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80239c6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80239ca:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 80239ce:	b2db      	uxtb	r3, r3
 80239d0:	4964      	ldr	r1, [pc, #400]	; (8023b64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 80239d2:	fb03 f308 	mul.w	r3, r3, r8
 80239d6:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 80239da:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80239de:	1c59      	adds	r1, r3, #1
 80239e0:	fb00 f008 	mul.w	r0, r0, r8
 80239e4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80239e8:	fa5f fc8c 	uxtb.w	ip, ip
 80239ec:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80239f0:	1c43      	adds	r3, r0, #1
 80239f2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80239f6:	b2d3      	uxtb	r3, r2
 80239f8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80239fc:	00db      	lsls	r3, r3, #3
 80239fe:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 8023a02:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8023a0a:	f8a7 c000 	strh.w	ip, [r7]
 8023a0e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023a10:	441c      	add	r4, r3
 8023a12:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023a14:	441e      	add	r6, r3
 8023a16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023a18:	3b01      	subs	r3, #1
 8023a1a:	3702      	adds	r7, #2
 8023a1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8023a1e:	e69b      	b.n	8023758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8023a20:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023a22:	441c      	add	r4, r3
 8023a24:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023a26:	441e      	add	r6, r3
 8023a28:	9b07      	ldr	r3, [sp, #28]
 8023a2a:	3b01      	subs	r3, #1
 8023a2c:	9307      	str	r3, [sp, #28]
 8023a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a30:	3302      	adds	r3, #2
 8023a32:	930a      	str	r3, [sp, #40]	; 0x28
 8023a34:	e670      	b.n	8023718 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023a36:	d023      	beq.n	8023a80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8023a38:	9b07      	ldr	r3, [sp, #28]
 8023a3a:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8023a3c:	3b01      	subs	r3, #1
 8023a3e:	fb00 4003 	mla	r0, r0, r3, r4
 8023a42:	1400      	asrs	r0, r0, #16
 8023a44:	f53f ae85 	bmi.w	8023752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023a48:	3901      	subs	r1, #1
 8023a4a:	4288      	cmp	r0, r1
 8023a4c:	f6bf ae81 	bge.w	8023752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023a50:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8023a52:	fb01 6303 	mla	r3, r1, r3, r6
 8023a56:	141b      	asrs	r3, r3, #16
 8023a58:	f53f ae7b 	bmi.w	8023752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023a5c:	3a01      	subs	r2, #1
 8023a5e:	4293      	cmp	r3, r2
 8023a60:	f6bf ae77 	bge.w	8023752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023a64:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023a68:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8023a6c:	f1bb 0f00 	cmp.w	fp, #0
 8023a70:	dc7a      	bgt.n	8023b68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8023a72:	9b07      	ldr	r3, [sp, #28]
 8023a74:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a7a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8023a80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023a82:	2b00      	cmp	r3, #0
 8023a84:	f340 81cb 	ble.w	8023e1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x772>
 8023a88:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a90:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023a94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a96:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023a9a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023a9e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023aa2:	eef0 6a48 	vmov.f32	s13, s16
 8023aa6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023aaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023aae:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023ab2:	ee16 4a90 	vmov	r4, s13
 8023ab6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023aba:	eef0 6a68 	vmov.f32	s13, s17
 8023abe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023ac2:	ee18 2a10 	vmov	r2, s16
 8023ac6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023aca:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ace:	ee18 2a90 	vmov	r2, s17
 8023ad2:	932f      	str	r3, [sp, #188]	; 0xbc
 8023ad4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ada:	9330      	str	r3, [sp, #192]	; 0xc0
 8023adc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023ade:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023ae0:	3b01      	subs	r3, #1
 8023ae2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ae6:	9316      	str	r3, [sp, #88]	; 0x58
 8023ae8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023aea:	bf08      	it	eq
 8023aec:	4613      	moveq	r3, r2
 8023aee:	ee16 6a90 	vmov	r6, s13
 8023af2:	9307      	str	r3, [sp, #28]
 8023af4:	eef0 8a67 	vmov.f32	s17, s15
 8023af8:	eeb0 8a47 	vmov.f32	s16, s14
 8023afc:	e5fe      	b.n	80236fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8023afe:	2800      	cmp	r0, #0
 8023b00:	f43f ae6e 	beq.w	80237e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8023b04:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023b08:	9308      	str	r3, [sp, #32]
 8023b0a:	0e1b      	lsrs	r3, r3, #24
 8023b0c:	9310      	str	r3, [sp, #64]	; 0x40
 8023b0e:	e667      	b.n	80237e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8023b10:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8023b14:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8023b18:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023b1c:	f022 0207 	bic.w	r2, r2, #7
 8023b20:	431a      	orrs	r2, r3
 8023b22:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023b26:	ea42 0c0c 	orr.w	ip, r2, ip
 8023b2a:	e76e      	b.n	8023a0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8023b2c:	f112 0801 	adds.w	r8, r2, #1
 8023b30:	f53f af6d 	bmi.w	8023a0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b34:	4543      	cmp	r3, r8
 8023b36:	f6ff af6a 	blt.w	8023a0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b3a:	f11c 0801 	adds.w	r8, ip, #1
 8023b3e:	f53f af66 	bmi.w	8023a0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b42:	45c6      	cmp	lr, r8
 8023b44:	f6ff af63 	blt.w	8023a0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b48:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023b4c:	fa0f f28e 	sxth.w	r2, lr
 8023b50:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023b54:	9200      	str	r2, [sp, #0]
 8023b56:	b21b      	sxth	r3, r3
 8023b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023b5a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023b5c:	4639      	mov	r1, r7
 8023b5e:	f7ff fc53 	bl	8023408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8023b62:	e754      	b.n	8023a0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b64:	fffff800 	.word	0xfffff800
 8023b68:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023b6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023b6c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8023b70:	1421      	asrs	r1, r4, #16
 8023b72:	1433      	asrs	r3, r6, #16
 8023b74:	fb07 1303 	mla	r3, r7, r3, r1
 8023b78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023b7a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023b7e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023b82:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023b86:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023b8a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023b8e:	2a00      	cmp	r2, #0
 8023b90:	f000 812e 	beq.w	8023df0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8023b94:	684d      	ldr	r5, [r1, #4]
 8023b96:	950d      	str	r5, [sp, #52]	; 0x34
 8023b98:	0e2d      	lsrs	r5, r5, #24
 8023b9a:	9514      	str	r5, [sp, #80]	; 0x50
 8023b9c:	b178      	cbz	r0, 8023bbe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8023b9e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8023ba2:	3f01      	subs	r7, #1
 8023ba4:	00bf      	lsls	r7, r7, #2
 8023ba6:	3704      	adds	r7, #4
 8023ba8:	eb01 0e07 	add.w	lr, r1, r7
 8023bac:	59c9      	ldr	r1, [r1, r7]
 8023bae:	9109      	str	r1, [sp, #36]	; 0x24
 8023bb0:	0e09      	lsrs	r1, r1, #24
 8023bb2:	9111      	str	r1, [sp, #68]	; 0x44
 8023bb4:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023bb8:	910e      	str	r1, [sp, #56]	; 0x38
 8023bba:	0e09      	lsrs	r1, r1, #24
 8023bbc:	9115      	str	r1, [sp, #84]	; 0x54
 8023bbe:	b292      	uxth	r2, r2
 8023bc0:	b280      	uxth	r0, r0
 8023bc2:	fb02 f900 	mul.w	r9, r2, r0
 8023bc6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023bca:	0112      	lsls	r2, r2, #4
 8023bcc:	eba2 0e09 	sub.w	lr, r2, r9
 8023bd0:	b280      	uxth	r0, r0
 8023bd2:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023bd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023bd8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023bda:	fa1f fe8e 	uxth.w	lr, lr
 8023bde:	1a09      	subs	r1, r1, r0
 8023be0:	b289      	uxth	r1, r1
 8023be2:	fb0e f202 	mul.w	r2, lr, r2
 8023be6:	fb01 220c 	mla	r2, r1, ip, r2
 8023bea:	fb00 2205 	mla	r2, r0, r5, r2
 8023bee:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023bf0:	fb09 2205 	mla	r2, r9, r5, r2
 8023bf4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023bf8:	2a00      	cmp	r2, #0
 8023bfa:	f000 80f0 	beq.w	8023dde <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x732>
 8023bfe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023c02:	d019      	beq.n	8023c38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8023c04:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023c08:	fb0c fa0a 	mul.w	sl, ip, sl
 8023c0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c10:	fb0c fc03 	mul.w	ip, ip, r3
 8023c14:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023c18:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c1c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023c20:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023c24:	4453      	add	r3, sl
 8023c26:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023c2a:	0a1b      	lsrs	r3, r3, #8
 8023c2c:	0a3f      	lsrs	r7, r7, #8
 8023c2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c32:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023c36:	433b      	orrs	r3, r7
 8023c38:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c3a:	2dff      	cmp	r5, #255	; 0xff
 8023c3c:	d020      	beq.n	8023c80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8023c3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c40:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023c44:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c46:	436f      	muls	r7, r5
 8023c48:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c4a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023c4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c50:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023c54:	fb05 fa0a 	mul.w	sl, r5, sl
 8023c58:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023c5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c60:	44bc      	add	ip, r7
 8023c62:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023c66:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023c6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c7a:	ea4c 050a 	orr.w	r5, ip, sl
 8023c7e:	950d      	str	r5, [sp, #52]	; 0x34
 8023c80:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c82:	2dff      	cmp	r5, #255	; 0xff
 8023c84:	d020      	beq.n	8023cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8023c86:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023c88:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023c8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c8e:	436f      	muls	r7, r5
 8023c90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023c92:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023c96:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c98:	fb05 fa0c 	mul.w	sl, r5, ip
 8023c9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ca0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ca4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023ca8:	44bc      	add	ip, r7
 8023caa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023cae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023cb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cbe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023cc2:	ea4c 050a 	orr.w	r5, ip, sl
 8023cc6:	9509      	str	r5, [sp, #36]	; 0x24
 8023cc8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023cca:	2dff      	cmp	r5, #255	; 0xff
 8023ccc:	d020      	beq.n	8023d10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8023cce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023cd0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023cd4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023cd6:	436f      	muls	r7, r5
 8023cd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023cda:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023cde:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023ce0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ce4:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ce8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023cec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cf0:	44bc      	add	ip, r7
 8023cf2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023cf6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023cfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d0a:	ea4c 050a 	orr.w	r5, ip, sl
 8023d0e:	950e      	str	r5, [sp, #56]	; 0x38
 8023d10:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d12:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023d16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023d18:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023d1c:	fb0e f707 	mul.w	r7, lr, r7
 8023d20:	fb01 770c 	mla	r7, r1, ip, r7
 8023d24:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023d28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023d2a:	fb00 770c 	mla	r7, r0, ip, r7
 8023d2e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023d32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d34:	fb09 770c 	mla	r7, r9, ip, r7
 8023d38:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023d3c:	fb0e fe0c 	mul.w	lr, lr, ip
 8023d40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023d44:	fb01 e303 	mla	r3, r1, r3, lr
 8023d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023d4a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023d4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023d50:	fb00 330a 	mla	r3, r0, sl, r3
 8023d54:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023d58:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023d5c:	0a3f      	lsrs	r7, r7, #8
 8023d5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d62:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023d66:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023d6a:	ea47 070c 	orr.w	r7, r7, ip
 8023d6e:	2aff      	cmp	r2, #255	; 0xff
 8023d70:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8023d74:	d045      	beq.n	8023e02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8023d76:	f8b8 1000 	ldrh.w	r1, [r8]
 8023d7a:	43d2      	mvns	r2, r2
 8023d7c:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8023d80:	fa5f fe82 	uxtb.w	lr, r2
 8023d84:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023d88:	fb0c fc0e 	mul.w	ip, ip, lr
 8023d8c:	10c8      	asrs	r0, r1, #3
 8023d8e:	00ca      	lsls	r2, r1, #3
 8023d90:	f10c 0101 	add.w	r1, ip, #1
 8023d94:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8023d98:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8023d9c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023da0:	b2d2      	uxtb	r2, r2
 8023da2:	4921      	ldr	r1, [pc, #132]	; (8023e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>)
 8023da4:	fb02 f20e 	mul.w	r2, r2, lr
 8023da8:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8023dac:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023db0:	1c51      	adds	r1, r2, #1
 8023db2:	fb00 f00e 	mul.w	r0, r0, lr
 8023db6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023dba:	b2ff      	uxtb	r7, r7
 8023dbc:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8023dc0:	1c42      	adds	r2, r0, #1
 8023dc2:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 8023dc6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023dca:	b2df      	uxtb	r7, r3
 8023dcc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8023dd0:	00ff      	lsls	r7, r7, #3
 8023dd2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023dd6:	ea4c 0c07 	orr.w	ip, ip, r7
 8023dda:	f8a8 c000 	strh.w	ip, [r8]
 8023dde:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023de0:	441c      	add	r4, r3
 8023de2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023de4:	f108 0802 	add.w	r8, r8, #2
 8023de8:	441e      	add	r6, r3
 8023dea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023dee:	e63d      	b.n	8023a6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023df0:	2800      	cmp	r0, #0
 8023df2:	f43f aee4 	beq.w	8023bbe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8023df6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8023dfa:	9109      	str	r1, [sp, #36]	; 0x24
 8023dfc:	0e09      	lsrs	r1, r1, #24
 8023dfe:	9111      	str	r1, [sp, #68]	; 0x44
 8023e00:	e6dd      	b.n	8023bbe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8023e02:	097a      	lsrs	r2, r7, #5
 8023e04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8023e08:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023e0c:	f023 0307 	bic.w	r3, r3, #7
 8023e10:	4313      	orrs	r3, r2
 8023e12:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8023e16:	431f      	orrs	r7, r3
 8023e18:	f8a8 7000 	strh.w	r7, [r8]
 8023e1c:	e7df      	b.n	8023dde <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x732>
 8023e1e:	b01b      	add	sp, #108	; 0x6c
 8023e20:	ecbd 8b08 	vpop	{d8-d11}
 8023e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e28:	fffff800 	.word	0xfffff800

08023e2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8023e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e30:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8023e34:	2c00      	cmp	r4, #0
 8023e36:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8023e3a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023e3e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8023e42:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8023e46:	fb04 ce03 	mla	lr, r4, r3, ip
 8023e4a:	db60      	blt.n	8023f0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8023e4c:	45a1      	cmp	r9, r4
 8023e4e:	dd5e      	ble.n	8023f0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8023e50:	f1bc 0f00 	cmp.w	ip, #0
 8023e54:	db59      	blt.n	8023f0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8023e56:	45e0      	cmp	r8, ip
 8023e58:	dd57      	ble.n	8023f0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8023e5a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8023e5e:	f01e 0f01 	tst.w	lr, #1
 8023e62:	5c16      	ldrb	r6, [r2, r0]
 8023e64:	bf0c      	ite	eq
 8023e66:	f006 060f 	andeq.w	r6, r6, #15
 8023e6a:	1136      	asrne	r6, r6, #4
 8023e6c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023e70:	b2f6      	uxtb	r6, r6
 8023e72:	f11c 0001 	adds.w	r0, ip, #1
 8023e76:	d44d      	bmi.n	8023f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8023e78:	4580      	cmp	r8, r0
 8023e7a:	dd4b      	ble.n	8023f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8023e7c:	2d00      	cmp	r5, #0
 8023e7e:	d04b      	beq.n	8023f18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8023e80:	f10e 0a01 	add.w	sl, lr, #1
 8023e84:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8023e88:	f01a 0f01 	tst.w	sl, #1
 8023e8c:	5c10      	ldrb	r0, [r2, r0]
 8023e8e:	bf0c      	ite	eq
 8023e90:	f000 000f 	andeq.w	r0, r0, #15
 8023e94:	1100      	asrne	r0, r0, #4
 8023e96:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023e9a:	b2c0      	uxtb	r0, r0
 8023e9c:	3401      	adds	r4, #1
 8023e9e:	d43f      	bmi.n	8023f20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8023ea0:	45a1      	cmp	r9, r4
 8023ea2:	dd3d      	ble.n	8023f20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8023ea4:	2f00      	cmp	r7, #0
 8023ea6:	f000 809e 	beq.w	8023fe6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 8023eaa:	f1bc 0f00 	cmp.w	ip, #0
 8023eae:	db35      	blt.n	8023f1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8023eb0:	45e0      	cmp	r8, ip
 8023eb2:	dd33      	ble.n	8023f1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8023eb4:	eb03 090e 	add.w	r9, r3, lr
 8023eb8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8023ebc:	f019 0f01 	tst.w	r9, #1
 8023ec0:	5d14      	ldrb	r4, [r2, r4]
 8023ec2:	bf0c      	ite	eq
 8023ec4:	f004 040f 	andeq.w	r4, r4, #15
 8023ec8:	1124      	asrne	r4, r4, #4
 8023eca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023ece:	b2e4      	uxtb	r4, r4
 8023ed0:	f11c 0c01 	adds.w	ip, ip, #1
 8023ed4:	d427      	bmi.n	8023f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8023ed6:	45e0      	cmp	r8, ip
 8023ed8:	dd25      	ble.n	8023f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8023eda:	b335      	cbz	r5, 8023f2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8023edc:	3301      	adds	r3, #1
 8023ede:	449e      	add	lr, r3
 8023ee0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023ee4:	f01e 0f01 	tst.w	lr, #1
 8023ee8:	5cd2      	ldrb	r2, [r2, r3]
 8023eea:	bf0c      	ite	eq
 8023eec:	f002 020f 	andeq.w	r2, r2, #15
 8023ef0:	1112      	asrne	r2, r2, #4
 8023ef2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023ef6:	b2d3      	uxtb	r3, r2
 8023ef8:	2d0f      	cmp	r5, #15
 8023efa:	d917      	bls.n	8023f2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8023efc:	4b3c      	ldr	r3, [pc, #240]	; (8023ff0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 8023efe:	4a3d      	ldr	r2, [pc, #244]	; (8023ff4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8023f00:	483d      	ldr	r0, [pc, #244]	; (8023ff8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8023f02:	f240 210d 	movw	r1, #525	; 0x20d
 8023f06:	f001 f8d5 	bl	80250b4 <__assert_func>
 8023f0a:	2600      	movs	r6, #0
 8023f0c:	e7b1      	b.n	8023e72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8023f0e:	2000      	movs	r0, #0
 8023f10:	4606      	mov	r6, r0
 8023f12:	e7c3      	b.n	8023e9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023f14:	2000      	movs	r0, #0
 8023f16:	e7c1      	b.n	8023e9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023f18:	4628      	mov	r0, r5
 8023f1a:	e7bf      	b.n	8023e9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023f1c:	2400      	movs	r4, #0
 8023f1e:	e7d7      	b.n	8023ed0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8023f20:	2300      	movs	r3, #0
 8023f22:	461c      	mov	r4, r3
 8023f24:	e7e8      	b.n	8023ef8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8023f26:	2300      	movs	r3, #0
 8023f28:	e7e6      	b.n	8023ef8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8023f2a:	462b      	mov	r3, r5
 8023f2c:	2f0f      	cmp	r7, #15
 8023f2e:	d8e5      	bhi.n	8023efc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8023f30:	b2ad      	uxth	r5, r5
 8023f32:	b2bf      	uxth	r7, r7
 8023f34:	fb05 fc07 	mul.w	ip, r5, r7
 8023f38:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8023f3c:	012d      	lsls	r5, r5, #4
 8023f3e:	b2bf      	uxth	r7, r7
 8023f40:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8023f44:	eba5 050c 	sub.w	r5, r5, ip
 8023f48:	1bd2      	subs	r2, r2, r7
 8023f4a:	b2ad      	uxth	r5, r5
 8023f4c:	b292      	uxth	r2, r2
 8023f4e:	4368      	muls	r0, r5
 8023f50:	fb06 0002 	mla	r0, r6, r2, r0
 8023f54:	fb07 0404 	mla	r4, r7, r4, r0
 8023f58:	fb0c 4303 	mla	r3, ip, r3, r4
 8023f5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023f60:	2b00      	cmp	r3, #0
 8023f62:	d03e      	beq.n	8023fe2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 8023f64:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8023f68:	4a24      	ldr	r2, [pc, #144]	; (8023ffc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 8023f6a:	4343      	muls	r3, r0
 8023f6c:	1c58      	adds	r0, r3, #1
 8023f6e:	6816      	ldr	r6, [r2, #0]
 8023f70:	880a      	ldrh	r2, [r1, #0]
 8023f72:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023f76:	1200      	asrs	r0, r0, #8
 8023f78:	b284      	uxth	r4, r0
 8023f7a:	1215      	asrs	r5, r2, #8
 8023f7c:	43c0      	mvns	r0, r0
 8023f7e:	b2c3      	uxtb	r3, r0
 8023f80:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023f84:	0a30      	lsrs	r0, r6, #8
 8023f86:	fb15 f503 	smulbb	r5, r5, r3
 8023f8a:	10d7      	asrs	r7, r2, #3
 8023f8c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023f90:	fb00 5004 	mla	r0, r0, r4, r5
 8023f94:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023f98:	08f5      	lsrs	r5, r6, #3
 8023f9a:	00d2      	lsls	r2, r2, #3
 8023f9c:	fb17 f703 	smulbb	r7, r7, r3
 8023fa0:	b2d2      	uxtb	r2, r2
 8023fa2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023fa6:	00f6      	lsls	r6, r6, #3
 8023fa8:	fb05 7504 	mla	r5, r5, r4, r7
 8023fac:	fb12 f303 	smulbb	r3, r2, r3
 8023fb0:	b2f6      	uxtb	r6, r6
 8023fb2:	fb06 3304 	mla	r3, r6, r4, r3
 8023fb6:	b2ad      	uxth	r5, r5
 8023fb8:	b29a      	uxth	r2, r3
 8023fba:	b280      	uxth	r0, r0
 8023fbc:	1c6b      	adds	r3, r5, #1
 8023fbe:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8023fc2:	1c44      	adds	r4, r0, #1
 8023fc4:	095b      	lsrs	r3, r3, #5
 8023fc6:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8023fca:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023fce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023fd2:	4303      	orrs	r3, r0
 8023fd4:	1c50      	adds	r0, r2, #1
 8023fd6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023fda:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023fde:	4313      	orrs	r3, r2
 8023fe0:	800b      	strh	r3, [r1, #0]
 8023fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023fe6:	2d0f      	cmp	r5, #15
 8023fe8:	d888      	bhi.n	8023efc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8023fea:	463b      	mov	r3, r7
 8023fec:	463c      	mov	r4, r7
 8023fee:	e79f      	b.n	8023f30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8023ff0:	0802abd6 	.word	0x0802abd6
 8023ff4:	0802b199 	.word	0x0802b199
 8023ff8:	0802acbf 	.word	0x0802acbf
 8023ffc:	2000a068 	.word	0x2000a068

08024000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024004:	ed2d 8b08 	vpush	{d8-d11}
 8024008:	b097      	sub	sp, #92	; 0x5c
 802400a:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802400e:	9214      	str	r2, [sp, #80]	; 0x50
 8024010:	9309      	str	r3, [sp, #36]	; 0x24
 8024012:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024014:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024018:	910d      	str	r1, [sp, #52]	; 0x34
 802401a:	930e      	str	r3, [sp, #56]	; 0x38
 802401c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024020:	9015      	str	r0, [sp, #84]	; 0x54
 8024022:	6850      	ldr	r0, [r2, #4]
 8024024:	6812      	ldr	r2, [r2, #0]
 8024026:	fb00 1303 	mla	r3, r0, r3, r1
 802402a:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 802402e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024030:	689b      	ldr	r3, [r3, #8]
 8024032:	3301      	adds	r3, #1
 8024034:	f023 0301 	bic.w	r3, r3, #1
 8024038:	930a      	str	r3, [sp, #40]	; 0x28
 802403a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802403c:	681f      	ldr	r7, [r3, #0]
 802403e:	eeb0 aa40 	vmov.f32	s20, s0
 8024042:	eef0 9a60 	vmov.f32	s19, s1
 8024046:	eeb0 9a41 	vmov.f32	s18, s2
 802404a:	eeb0 8a62 	vmov.f32	s16, s5
 802404e:	eef0 8a43 	vmov.f32	s17, s6
 8024052:	eef0 ba44 	vmov.f32	s23, s8
 8024056:	eeb0 ba64 	vmov.f32	s22, s9
 802405a:	eef0 aa45 	vmov.f32	s21, s10
 802405e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024060:	2b00      	cmp	r3, #0
 8024062:	dc03      	bgt.n	802406c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024064:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024066:	2b00      	cmp	r3, #0
 8024068:	f340 826a 	ble.w	8024540 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 802406c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802406e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024072:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024076:	1e48      	subs	r0, r1, #1
 8024078:	f102 3cff 	add.w	ip, r2, #4294967295
 802407c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802407e:	2b00      	cmp	r3, #0
 8024080:	f340 80f3 	ble.w	802426a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8024084:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024088:	ea4f 4326 	mov.w	r3, r6, asr #16
 802408c:	d406      	bmi.n	802409c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802408e:	4586      	cmp	lr, r0
 8024090:	da04      	bge.n	802409c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024092:	2b00      	cmp	r3, #0
 8024094:	db02      	blt.n	802409c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024096:	4563      	cmp	r3, ip
 8024098:	f2c0 80e8 	blt.w	802426c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802409c:	f11e 0e01 	adds.w	lr, lr, #1
 80240a0:	f100 80d9 	bmi.w	8024256 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80240a4:	4571      	cmp	r1, lr
 80240a6:	f2c0 80d6 	blt.w	8024256 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80240aa:	3301      	adds	r3, #1
 80240ac:	f100 80d3 	bmi.w	8024256 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80240b0:	429a      	cmp	r2, r3
 80240b2:	f2c0 80d0 	blt.w	8024256 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80240b6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80240ba:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80240be:	930f      	str	r3, [sp, #60]	; 0x3c
 80240c0:	46d0      	mov	r8, sl
 80240c2:	f1b9 0f00 	cmp.w	r9, #0
 80240c6:	f340 80f0 	ble.w	80242aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 80240ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80240cc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80240d0:	1423      	asrs	r3, r4, #16
 80240d2:	ea4f 4026 	mov.w	r0, r6, asr #16
 80240d6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80240da:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80240de:	f100 8139 	bmi.w	8024354 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80240e2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80240e6:	455b      	cmp	r3, fp
 80240e8:	f280 8134 	bge.w	8024354 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80240ec:	2800      	cmp	r0, #0
 80240ee:	f2c0 8131 	blt.w	8024354 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80240f2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80240f6:	4558      	cmp	r0, fp
 80240f8:	f280 812c 	bge.w	8024354 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80240fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80240fe:	fb00 3305 	mla	r3, r0, r5, r3
 8024102:	0858      	lsrs	r0, r3, #1
 8024104:	07dd      	lsls	r5, r3, #31
 8024106:	f817 c000 	ldrb.w	ip, [r7, r0]
 802410a:	bf54      	ite	pl
 802410c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024110:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024114:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024118:	fa5f fc8c 	uxtb.w	ip, ip
 802411c:	2a00      	cmp	r2, #0
 802411e:	f000 8108 	beq.w	8024332 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8024122:	1c58      	adds	r0, r3, #1
 8024124:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024128:	07c0      	lsls	r0, r0, #31
 802412a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802412e:	bf54      	ite	pl
 8024130:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024134:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024138:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802413c:	fa5f f08e 	uxtb.w	r0, lr
 8024140:	9010      	str	r0, [sp, #64]	; 0x40
 8024142:	b1d1      	cbz	r1, 802417a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8024144:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024146:	4403      	add	r3, r0
 8024148:	0858      	lsrs	r0, r3, #1
 802414a:	07dd      	lsls	r5, r3, #31
 802414c:	5c38      	ldrb	r0, [r7, r0]
 802414e:	bf54      	ite	pl
 8024150:	f000 000f 	andpl.w	r0, r0, #15
 8024154:	1100      	asrmi	r0, r0, #4
 8024156:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802415a:	3301      	adds	r3, #1
 802415c:	b2c0      	uxtb	r0, r0
 802415e:	900b      	str	r0, [sp, #44]	; 0x2c
 8024160:	0858      	lsrs	r0, r3, #1
 8024162:	07dd      	lsls	r5, r3, #31
 8024164:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024168:	bf54      	ite	pl
 802416a:	f00e 030f 	andpl.w	r3, lr, #15
 802416e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024172:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024176:	b2db      	uxtb	r3, r3
 8024178:	9311      	str	r3, [sp, #68]	; 0x44
 802417a:	b292      	uxth	r2, r2
 802417c:	b289      	uxth	r1, r1
 802417e:	fb02 f301 	mul.w	r3, r2, r1
 8024182:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024186:	0112      	lsls	r2, r2, #4
 8024188:	b289      	uxth	r1, r1
 802418a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802418e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024190:	1ad2      	subs	r2, r2, r3
 8024192:	1a40      	subs	r0, r0, r1
 8024194:	b292      	uxth	r2, r2
 8024196:	436a      	muls	r2, r5
 8024198:	b280      	uxth	r0, r0
 802419a:	fb0c 2c00 	mla	ip, ip, r0, r2
 802419e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80241a0:	fb01 c102 	mla	r1, r1, r2, ip
 80241a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80241a6:	fb03 1302 	mla	r3, r3, r2, r1
 80241aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	d048      	beq.n	8024244 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80241b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80241b4:	4a78      	ldr	r2, [pc, #480]	; (8024398 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 80241b6:	434b      	muls	r3, r1
 80241b8:	1c59      	adds	r1, r3, #1
 80241ba:	f8d2 e000 	ldr.w	lr, [r2]
 80241be:	f8b8 2000 	ldrh.w	r2, [r8]
 80241c2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80241c6:	121b      	asrs	r3, r3, #8
 80241c8:	b299      	uxth	r1, r3
 80241ca:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80241ce:	43db      	mvns	r3, r3
 80241d0:	b2db      	uxtb	r3, r3
 80241d2:	ea4f 201e 	mov.w	r0, lr, lsr #8
 80241d6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80241da:	fb1c fc03 	smulbb	ip, ip, r3
 80241de:	ea4f 0be2 	mov.w	fp, r2, asr #3
 80241e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80241e6:	fb00 c001 	mla	r0, r0, r1, ip
 80241ea:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80241ee:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 80241f2:	fb1b fb03 	smulbb	fp, fp, r3
 80241f6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80241fa:	00d2      	lsls	r2, r2, #3
 80241fc:	fb0c bc01 	mla	ip, ip, r1, fp
 8024200:	b2d2      	uxtb	r2, r2
 8024202:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024206:	fb12 f303 	smulbb	r3, r2, r3
 802420a:	fa1f fc8c 	uxth.w	ip, ip
 802420e:	fa5f fe8e 	uxtb.w	lr, lr
 8024212:	b280      	uxth	r0, r0
 8024214:	fb0e 3101 	mla	r1, lr, r1, r3
 8024218:	f10c 0201 	add.w	r2, ip, #1
 802421c:	b289      	uxth	r1, r1
 802421e:	1c43      	adds	r3, r0, #1
 8024220:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8024224:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024228:	0952      	lsrs	r2, r2, #5
 802422a:	1c4b      	adds	r3, r1, #1
 802422c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024230:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024234:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024238:	4310      	orrs	r0, r2
 802423a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802423e:	4308      	orrs	r0, r1
 8024240:	f8a8 0000 	strh.w	r0, [r8]
 8024244:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024246:	441c      	add	r4, r3
 8024248:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802424a:	f108 0802 	add.w	r8, r8, #2
 802424e:	441e      	add	r6, r3
 8024250:	f109 39ff 	add.w	r9, r9, #4294967295
 8024254:	e735      	b.n	80240c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8024256:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024258:	441c      	add	r4, r3
 802425a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802425c:	441e      	add	r6, r3
 802425e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024260:	3b01      	subs	r3, #1
 8024262:	9309      	str	r3, [sp, #36]	; 0x24
 8024264:	f10a 0a02 	add.w	sl, sl, #2
 8024268:	e708      	b.n	802407c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802426a:	d023      	beq.n	80242b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 802426c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802426e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8024270:	3b01      	subs	r3, #1
 8024272:	fb00 4003 	mla	r0, r0, r3, r4
 8024276:	1400      	asrs	r0, r0, #16
 8024278:	f53f af1d 	bmi.w	80240b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802427c:	3901      	subs	r1, #1
 802427e:	4288      	cmp	r0, r1
 8024280:	f6bf af19 	bge.w	80240b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024284:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024286:	fb01 6303 	mla	r3, r1, r3, r6
 802428a:	141b      	asrs	r3, r3, #16
 802428c:	f53f af13 	bmi.w	80240b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024290:	3a01      	subs	r2, #1
 8024292:	4293      	cmp	r3, r2
 8024294:	f6bf af0f 	bge.w	80240b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024298:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802429c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80242a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80242a2:	46d1      	mov	r9, sl
 80242a4:	f1bb 0f00 	cmp.w	fp, #0
 80242a8:	dc78      	bgt.n	802439c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80242aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242ac:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80242b0:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 80242b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80242b6:	2b00      	cmp	r3, #0
 80242b8:	f340 8142 	ble.w	8024540 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 80242bc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80242c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80242c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80242c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80242ca:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80242ce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80242d2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80242d6:	eef0 6a48 	vmov.f32	s13, s16
 80242da:	ee69 7a27 	vmul.f32	s15, s18, s15
 80242de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242e2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80242e6:	ee16 4a90 	vmov	r4, s13
 80242ea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80242ee:	eef0 6a68 	vmov.f32	s13, s17
 80242f2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80242f6:	ee18 2a10 	vmov	r2, s16
 80242fa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80242fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8024302:	ee18 2a90 	vmov	r2, s17
 8024306:	932b      	str	r3, [sp, #172]	; 0xac
 8024308:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802430a:	fb92 f3f3 	sdiv	r3, r2, r3
 802430e:	932c      	str	r3, [sp, #176]	; 0xb0
 8024310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024312:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024314:	3b01      	subs	r3, #1
 8024316:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802431a:	930d      	str	r3, [sp, #52]	; 0x34
 802431c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802431e:	bf08      	it	eq
 8024320:	4613      	moveq	r3, r2
 8024322:	ee16 6a90 	vmov	r6, s13
 8024326:	9309      	str	r3, [sp, #36]	; 0x24
 8024328:	eef0 8a67 	vmov.f32	s17, s15
 802432c:	eeb0 8a47 	vmov.f32	s16, s14
 8024330:	e695      	b.n	802405e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024332:	2900      	cmp	r1, #0
 8024334:	f43f af21 	beq.w	802417a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8024338:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802433a:	4418      	add	r0, r3
 802433c:	0843      	lsrs	r3, r0, #1
 802433e:	07c0      	lsls	r0, r0, #31
 8024340:	5cfb      	ldrb	r3, [r7, r3]
 8024342:	bf54      	ite	pl
 8024344:	f003 030f 	andpl.w	r3, r3, #15
 8024348:	111b      	asrmi	r3, r3, #4
 802434a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802434e:	b2db      	uxtb	r3, r3
 8024350:	930b      	str	r3, [sp, #44]	; 0x2c
 8024352:	e712      	b.n	802417a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8024354:	f113 0b01 	adds.w	fp, r3, #1
 8024358:	f53f af74 	bmi.w	8024244 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802435c:	45dc      	cmp	ip, fp
 802435e:	f6ff af71 	blt.w	8024244 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024362:	f110 0b01 	adds.w	fp, r0, #1
 8024366:	f53f af6d 	bmi.w	8024244 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802436a:	45de      	cmp	lr, fp
 802436c:	f6ff af6a 	blt.w	8024244 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024370:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024372:	9302      	str	r3, [sp, #8]
 8024374:	fa0f f38e 	sxth.w	r3, lr
 8024378:	9301      	str	r3, [sp, #4]
 802437a:	fa0f f38c 	sxth.w	r3, ip
 802437e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024382:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8024386:	9300      	str	r3, [sp, #0]
 8024388:	463a      	mov	r2, r7
 802438a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802438c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802438e:	4641      	mov	r1, r8
 8024390:	f7ff fd4c 	bl	8023e2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8024394:	e756      	b.n	8024244 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024396:	bf00      	nop
 8024398:	2000a068 	.word	0x2000a068
 802439c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802439e:	1422      	asrs	r2, r4, #16
 80243a0:	1433      	asrs	r3, r6, #16
 80243a2:	fb05 2303 	mla	r3, r5, r3, r2
 80243a6:	085a      	lsrs	r2, r3, #1
 80243a8:	07dd      	lsls	r5, r3, #31
 80243aa:	5cba      	ldrb	r2, [r7, r2]
 80243ac:	bf54      	ite	pl
 80243ae:	f002 020f 	andpl.w	r2, r2, #15
 80243b2:	1112      	asrmi	r2, r2, #4
 80243b4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80243b8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80243bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80243c0:	b2d2      	uxtb	r2, r2
 80243c2:	2900      	cmp	r1, #0
 80243c4:	f000 80a8 	beq.w	8024518 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80243c8:	f103 0e01 	add.w	lr, r3, #1
 80243cc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80243d0:	f01e 0f01 	tst.w	lr, #1
 80243d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243d8:	bf0c      	ite	eq
 80243da:	f00c 0c0f 	andeq.w	ip, ip, #15
 80243de:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80243e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80243e6:	fa5f f58c 	uxtb.w	r5, ip
 80243ea:	9512      	str	r5, [sp, #72]	; 0x48
 80243ec:	b300      	cbz	r0, 8024430 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 80243ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80243f0:	442b      	add	r3, r5
 80243f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80243f6:	07dd      	lsls	r5, r3, #31
 80243f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243fc:	bf54      	ite	pl
 80243fe:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024402:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024406:	3301      	adds	r3, #1
 8024408:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802440c:	fa5f f58c 	uxtb.w	r5, ip
 8024410:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024414:	950c      	str	r5, [sp, #48]	; 0x30
 8024416:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802441a:	07dd      	lsls	r5, r3, #31
 802441c:	bf54      	ite	pl
 802441e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024422:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024426:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802442a:	fa5f f38c 	uxtb.w	r3, ip
 802442e:	9313      	str	r3, [sp, #76]	; 0x4c
 8024430:	b289      	uxth	r1, r1
 8024432:	b280      	uxth	r0, r0
 8024434:	fb01 f300 	mul.w	r3, r1, r0
 8024438:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802443c:	0109      	lsls	r1, r1, #4
 802443e:	b280      	uxth	r0, r0
 8024440:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024444:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024446:	1ac9      	subs	r1, r1, r3
 8024448:	ebac 0c00 	sub.w	ip, ip, r0
 802444c:	b289      	uxth	r1, r1
 802444e:	4369      	muls	r1, r5
 8024450:	fa1f fc8c 	uxth.w	ip, ip
 8024454:	fb02 120c 	mla	r2, r2, ip, r1
 8024458:	990c      	ldr	r1, [sp, #48]	; 0x30
 802445a:	fb00 2001 	mla	r0, r0, r1, r2
 802445e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024460:	fb03 0302 	mla	r3, r3, r2, r0
 8024464:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024468:	2b00      	cmp	r3, #0
 802446a:	d04c      	beq.n	8024506 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802446c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802446e:	4a37      	ldr	r2, [pc, #220]	; (802454c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 8024470:	434b      	muls	r3, r1
 8024472:	1c59      	adds	r1, r3, #1
 8024474:	f8d2 e000 	ldr.w	lr, [r2]
 8024478:	f8b9 2000 	ldrh.w	r2, [r9]
 802447c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024480:	121b      	asrs	r3, r3, #8
 8024482:	b299      	uxth	r1, r3
 8024484:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024488:	43db      	mvns	r3, r3
 802448a:	b2db      	uxtb	r3, r3
 802448c:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8024490:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024494:	fb1c fc03 	smulbb	ip, ip, r3
 8024498:	ea4f 08e2 	mov.w	r8, r2, asr #3
 802449c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80244a0:	fb00 c001 	mla	r0, r0, r1, ip
 80244a4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80244a8:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 80244ac:	fb18 f803 	smulbb	r8, r8, r3
 80244b0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80244b4:	00d2      	lsls	r2, r2, #3
 80244b6:	fb0c 8c01 	mla	ip, ip, r1, r8
 80244ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80244be:	b2d2      	uxtb	r2, r2
 80244c0:	fa1f fc8c 	uxth.w	ip, ip
 80244c4:	fa5f fe8e 	uxtb.w	lr, lr
 80244c8:	fb12 f203 	smulbb	r2, r2, r3
 80244cc:	b280      	uxth	r0, r0
 80244ce:	fb0e 2201 	mla	r2, lr, r1, r2
 80244d2:	f10c 0801 	add.w	r8, ip, #1
 80244d6:	b292      	uxth	r2, r2
 80244d8:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 80244dc:	f100 0801 	add.w	r8, r0, #1
 80244e0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80244e4:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 80244e8:	1c51      	adds	r1, r2, #1
 80244ea:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80244ee:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80244f2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80244f6:	ea4c 0c00 	orr.w	ip, ip, r0
 80244fa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80244fe:	ea4c 0c02 	orr.w	ip, ip, r2
 8024502:	f8a9 c000 	strh.w	ip, [r9]
 8024506:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024508:	441c      	add	r4, r3
 802450a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802450c:	f109 0902 	add.w	r9, r9, #2
 8024510:	441e      	add	r6, r3
 8024512:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024516:	e6c5      	b.n	80242a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024518:	2800      	cmp	r0, #0
 802451a:	d089      	beq.n	8024430 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 802451c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802451e:	442b      	add	r3, r5
 8024520:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024524:	07db      	lsls	r3, r3, #31
 8024526:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802452a:	bf54      	ite	pl
 802452c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024530:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024534:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024538:	fa5f f38c 	uxtb.w	r3, ip
 802453c:	930c      	str	r3, [sp, #48]	; 0x30
 802453e:	e777      	b.n	8024430 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 8024540:	b017      	add	sp, #92	; 0x5c
 8024542:	ecbd 8b08 	vpop	{d8-d11}
 8024546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802454a:	bf00      	nop
 802454c:	2000a068 	.word	0x2000a068

08024550 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8024550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024554:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8024558:	2c00      	cmp	r4, #0
 802455a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802455e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024562:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8024566:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802456a:	fb04 ce03 	mla	lr, r4, r3, ip
 802456e:	db60      	blt.n	8024632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8024570:	45a1      	cmp	r9, r4
 8024572:	dd5e      	ble.n	8024632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8024574:	f1bc 0f00 	cmp.w	ip, #0
 8024578:	db59      	blt.n	802462e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802457a:	45e0      	cmp	r8, ip
 802457c:	dd57      	ble.n	802462e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802457e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8024582:	f01e 0f01 	tst.w	lr, #1
 8024586:	5c16      	ldrb	r6, [r2, r0]
 8024588:	bf0c      	ite	eq
 802458a:	f006 060f 	andeq.w	r6, r6, #15
 802458e:	1136      	asrne	r6, r6, #4
 8024590:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024594:	b2f6      	uxtb	r6, r6
 8024596:	f11c 0001 	adds.w	r0, ip, #1
 802459a:	d44d      	bmi.n	8024638 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802459c:	4580      	cmp	r8, r0
 802459e:	dd4b      	ble.n	8024638 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80245a0:	2d00      	cmp	r5, #0
 80245a2:	d04b      	beq.n	802463c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 80245a4:	f10e 0a01 	add.w	sl, lr, #1
 80245a8:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80245ac:	f01a 0f01 	tst.w	sl, #1
 80245b0:	5c10      	ldrb	r0, [r2, r0]
 80245b2:	bf0c      	ite	eq
 80245b4:	f000 000f 	andeq.w	r0, r0, #15
 80245b8:	1100      	asrne	r0, r0, #4
 80245ba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80245be:	b2c0      	uxtb	r0, r0
 80245c0:	3401      	adds	r4, #1
 80245c2:	d43f      	bmi.n	8024644 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80245c4:	45a1      	cmp	r9, r4
 80245c6:	dd3d      	ble.n	8024644 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80245c8:	2f00      	cmp	r7, #0
 80245ca:	f000 8097 	beq.w	80246fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 80245ce:	f1bc 0f00 	cmp.w	ip, #0
 80245d2:	db35      	blt.n	8024640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80245d4:	45e0      	cmp	r8, ip
 80245d6:	dd33      	ble.n	8024640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80245d8:	eb03 090e 	add.w	r9, r3, lr
 80245dc:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80245e0:	f019 0f01 	tst.w	r9, #1
 80245e4:	5d14      	ldrb	r4, [r2, r4]
 80245e6:	bf0c      	ite	eq
 80245e8:	f004 040f 	andeq.w	r4, r4, #15
 80245ec:	1124      	asrne	r4, r4, #4
 80245ee:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80245f2:	b2e4      	uxtb	r4, r4
 80245f4:	f11c 0c01 	adds.w	ip, ip, #1
 80245f8:	d427      	bmi.n	802464a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80245fa:	45e0      	cmp	r8, ip
 80245fc:	dd25      	ble.n	802464a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80245fe:	b335      	cbz	r5, 802464e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8024600:	3301      	adds	r3, #1
 8024602:	449e      	add	lr, r3
 8024604:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024608:	f01e 0f01 	tst.w	lr, #1
 802460c:	5cd2      	ldrb	r2, [r2, r3]
 802460e:	bf0c      	ite	eq
 8024610:	f002 020f 	andeq.w	r2, r2, #15
 8024614:	1112      	asrne	r2, r2, #4
 8024616:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802461a:	b2d3      	uxtb	r3, r2
 802461c:	2d0f      	cmp	r5, #15
 802461e:	d917      	bls.n	8024650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8024620:	4b39      	ldr	r3, [pc, #228]	; (8024708 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8024622:	4a3a      	ldr	r2, [pc, #232]	; (802470c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8024624:	483a      	ldr	r0, [pc, #232]	; (8024710 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 8024626:	f240 210d 	movw	r1, #525	; 0x20d
 802462a:	f000 fd43 	bl	80250b4 <__assert_func>
 802462e:	2600      	movs	r6, #0
 8024630:	e7b1      	b.n	8024596 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8024632:	2000      	movs	r0, #0
 8024634:	4606      	mov	r6, r0
 8024636:	e7c3      	b.n	80245c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8024638:	2000      	movs	r0, #0
 802463a:	e7c1      	b.n	80245c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802463c:	4628      	mov	r0, r5
 802463e:	e7bf      	b.n	80245c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8024640:	2400      	movs	r4, #0
 8024642:	e7d7      	b.n	80245f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8024644:	2300      	movs	r3, #0
 8024646:	461c      	mov	r4, r3
 8024648:	e7e8      	b.n	802461c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802464a:	2300      	movs	r3, #0
 802464c:	e7e6      	b.n	802461c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802464e:	462b      	mov	r3, r5
 8024650:	2f0f      	cmp	r7, #15
 8024652:	d8e5      	bhi.n	8024620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8024654:	b2ad      	uxth	r5, r5
 8024656:	b2bf      	uxth	r7, r7
 8024658:	fb05 fc07 	mul.w	ip, r5, r7
 802465c:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8024660:	012d      	lsls	r5, r5, #4
 8024662:	b2bf      	uxth	r7, r7
 8024664:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8024668:	eba5 050c 	sub.w	r5, r5, ip
 802466c:	1bd2      	subs	r2, r2, r7
 802466e:	b2ad      	uxth	r5, r5
 8024670:	b292      	uxth	r2, r2
 8024672:	4368      	muls	r0, r5
 8024674:	fb06 0002 	mla	r0, r6, r2, r0
 8024678:	fb07 0404 	mla	r4, r7, r4, r0
 802467c:	fb0c 4303 	mla	r3, ip, r3, r4
 8024680:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024684:	2b00      	cmp	r3, #0
 8024686:	d037      	beq.n	80246f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 8024688:	4a22      	ldr	r2, [pc, #136]	; (8024714 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 802468a:	6816      	ldr	r6, [r2, #0]
 802468c:	880a      	ldrh	r2, [r1, #0]
 802468e:	b298      	uxth	r0, r3
 8024690:	1215      	asrs	r5, r2, #8
 8024692:	43db      	mvns	r3, r3
 8024694:	b2db      	uxtb	r3, r3
 8024696:	0a34      	lsrs	r4, r6, #8
 8024698:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802469c:	fb15 f503 	smulbb	r5, r5, r3
 80246a0:	10d7      	asrs	r7, r2, #3
 80246a2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80246a6:	fb04 5400 	mla	r4, r4, r0, r5
 80246aa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80246ae:	08f5      	lsrs	r5, r6, #3
 80246b0:	fb17 f703 	smulbb	r7, r7, r3
 80246b4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80246b8:	00d2      	lsls	r2, r2, #3
 80246ba:	fb05 7500 	mla	r5, r5, r0, r7
 80246be:	b2d2      	uxtb	r2, r2
 80246c0:	00f6      	lsls	r6, r6, #3
 80246c2:	fb12 f303 	smulbb	r3, r2, r3
 80246c6:	b2ad      	uxth	r5, r5
 80246c8:	b2f6      	uxtb	r6, r6
 80246ca:	b2a4      	uxth	r4, r4
 80246cc:	fb06 3000 	mla	r0, r6, r0, r3
 80246d0:	1c6b      	adds	r3, r5, #1
 80246d2:	b280      	uxth	r0, r0
 80246d4:	1c62      	adds	r2, r4, #1
 80246d6:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80246da:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80246de:	095b      	lsrs	r3, r3, #5
 80246e0:	1c42      	adds	r2, r0, #1
 80246e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80246e6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80246ea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80246ee:	4323      	orrs	r3, r4
 80246f0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80246f4:	4303      	orrs	r3, r0
 80246f6:	800b      	strh	r3, [r1, #0]
 80246f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80246fc:	2d0f      	cmp	r5, #15
 80246fe:	d88f      	bhi.n	8024620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8024700:	463b      	mov	r3, r7
 8024702:	463c      	mov	r4, r7
 8024704:	e7a6      	b.n	8024654 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8024706:	bf00      	nop
 8024708:	0802abd6 	.word	0x0802abd6
 802470c:	0802b199 	.word	0x0802b199
 8024710:	0802acbf 	.word	0x0802acbf
 8024714:	2000a068 	.word	0x2000a068

08024718 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802471c:	ed2d 8b08 	vpush	{d8-d11}
 8024720:	b093      	sub	sp, #76	; 0x4c
 8024722:	461d      	mov	r5, r3
 8024724:	920c      	str	r2, [sp, #48]	; 0x30
 8024726:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024728:	9107      	str	r1, [sp, #28]
 802472a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802472e:	9011      	str	r0, [sp, #68]	; 0x44
 8024730:	6850      	ldr	r0, [r2, #4]
 8024732:	6812      	ldr	r2, [r2, #0]
 8024734:	fb00 1303 	mla	r3, r0, r3, r1
 8024738:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802473c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802473e:	689b      	ldr	r3, [r3, #8]
 8024740:	3301      	adds	r3, #1
 8024742:	f023 0301 	bic.w	r3, r3, #1
 8024746:	9306      	str	r3, [sp, #24]
 8024748:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802474a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802474e:	681f      	ldr	r7, [r3, #0]
 8024750:	eeb0 aa40 	vmov.f32	s20, s0
 8024754:	eef0 9a60 	vmov.f32	s19, s1
 8024758:	eeb0 9a41 	vmov.f32	s18, s2
 802475c:	eeb0 8a62 	vmov.f32	s16, s5
 8024760:	eef0 8a43 	vmov.f32	s17, s6
 8024764:	eef0 ba44 	vmov.f32	s23, s8
 8024768:	eeb0 ba64 	vmov.f32	s22, s9
 802476c:	eef0 aa45 	vmov.f32	s21, s10
 8024770:	9b07      	ldr	r3, [sp, #28]
 8024772:	2b00      	cmp	r3, #0
 8024774:	dc03      	bgt.n	802477e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024778:	2b00      	cmp	r3, #0
 802477a:	f340 8261 	ble.w	8024c40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 802477e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024780:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024784:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024788:	1e48      	subs	r0, r1, #1
 802478a:	f102 3cff 	add.w	ip, r2, #4294967295
 802478e:	2d00      	cmp	r5, #0
 8024790:	f340 80ef 	ble.w	8024972 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8024794:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024798:	ea4f 4326 	mov.w	r3, r6, asr #16
 802479c:	d406      	bmi.n	80247ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802479e:	4586      	cmp	lr, r0
 80247a0:	da04      	bge.n	80247ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80247a2:	2b00      	cmp	r3, #0
 80247a4:	db02      	blt.n	80247ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80247a6:	4563      	cmp	r3, ip
 80247a8:	f2c0 80e4 	blt.w	8024974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 80247ac:	f11e 0e01 	adds.w	lr, lr, #1
 80247b0:	f100 80d7 	bmi.w	8024962 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80247b4:	4571      	cmp	r1, lr
 80247b6:	f2c0 80d4 	blt.w	8024962 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80247ba:	3301      	adds	r3, #1
 80247bc:	f100 80d1 	bmi.w	8024962 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80247c0:	429a      	cmp	r2, r3
 80247c2:	f2c0 80ce 	blt.w	8024962 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80247c6:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80247ca:	9509      	str	r5, [sp, #36]	; 0x24
 80247cc:	46c8      	mov	r8, r9
 80247ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247d0:	2b00      	cmp	r3, #0
 80247d2:	f340 80ec 	ble.w	80249ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80247d6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80247da:	9308      	str	r3, [sp, #32]
 80247dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80247de:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80247e2:	1423      	asrs	r3, r4, #16
 80247e4:	ea4f 4026 	mov.w	r0, r6, asr #16
 80247e8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80247ec:	f100 813b 	bmi.w	8024a66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80247f0:	f10c 3bff 	add.w	fp, ip, #4294967295
 80247f4:	455b      	cmp	r3, fp
 80247f6:	f280 8136 	bge.w	8024a66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80247fa:	2800      	cmp	r0, #0
 80247fc:	f2c0 8133 	blt.w	8024a66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8024800:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024804:	4558      	cmp	r0, fp
 8024806:	f280 812e 	bge.w	8024a66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802480a:	9a06      	ldr	r2, [sp, #24]
 802480c:	fb00 3302 	mla	r3, r0, r2, r3
 8024810:	0858      	lsrs	r0, r3, #1
 8024812:	07da      	lsls	r2, r3, #31
 8024814:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024818:	9a08      	ldr	r2, [sp, #32]
 802481a:	bf54      	ite	pl
 802481c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024820:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024824:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024828:	fa5f fc8c 	uxtb.w	ip, ip
 802482c:	2a00      	cmp	r2, #0
 802482e:	f000 8101 	beq.w	8024a34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024832:	1c58      	adds	r0, r3, #1
 8024834:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024838:	07c0      	lsls	r0, r0, #31
 802483a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802483e:	bf54      	ite	pl
 8024840:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024844:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024848:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802484c:	fa5f fe8e 	uxtb.w	lr, lr
 8024850:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8024854:	b1b9      	cbz	r1, 8024886 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8024856:	4453      	add	r3, sl
 8024858:	0858      	lsrs	r0, r3, #1
 802485a:	07da      	lsls	r2, r3, #31
 802485c:	5c38      	ldrb	r0, [r7, r0]
 802485e:	bf54      	ite	pl
 8024860:	f000 000f 	andpl.w	r0, r0, #15
 8024864:	1100      	asrmi	r0, r0, #4
 8024866:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802486a:	b2c0      	uxtb	r0, r0
 802486c:	900a      	str	r0, [sp, #40]	; 0x28
 802486e:	1c58      	adds	r0, r3, #1
 8024870:	0843      	lsrs	r3, r0, #1
 8024872:	07c2      	lsls	r2, r0, #31
 8024874:	5cfb      	ldrb	r3, [r7, r3]
 8024876:	bf54      	ite	pl
 8024878:	f003 030f 	andpl.w	r3, r3, #15
 802487c:	111b      	asrmi	r3, r3, #4
 802487e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024882:	b2db      	uxtb	r3, r3
 8024884:	930e      	str	r3, [sp, #56]	; 0x38
 8024886:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802488a:	b289      	uxth	r1, r1
 802488c:	fb02 f301 	mul.w	r3, r2, r1
 8024890:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024894:	0112      	lsls	r2, r2, #4
 8024896:	b289      	uxth	r1, r1
 8024898:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802489c:	1a40      	subs	r0, r0, r1
 802489e:	fa1f fe80 	uxth.w	lr, r0
 80248a2:	1ad2      	subs	r2, r2, r3
 80248a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80248a6:	b292      	uxth	r2, r2
 80248a8:	4342      	muls	r2, r0
 80248aa:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80248ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80248b0:	fb01 c102 	mla	r1, r1, r2, ip
 80248b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80248b6:	fb03 1302 	mla	r3, r3, r2, r1
 80248ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80248be:	2b00      	cmp	r3, #0
 80248c0:	d045      	beq.n	802494e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80248c2:	4a79      	ldr	r2, [pc, #484]	; (8024aa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 80248c4:	6811      	ldr	r1, [r2, #0]
 80248c6:	2bff      	cmp	r3, #255	; 0xff
 80248c8:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80248cc:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 80248d0:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 80248d4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80248d8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80248dc:	b2c9      	uxtb	r1, r1
 80248de:	f000 80ba 	beq.w	8024a56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80248e2:	f8b8 c000 	ldrh.w	ip, [r8]
 80248e6:	fa1f fb83 	uxth.w	fp, r3
 80248ea:	ea4f 202c 	mov.w	r0, ip, asr #8
 80248ee:	43db      	mvns	r3, r3
 80248f0:	b2db      	uxtb	r3, r3
 80248f2:	fb1e fe0b 	smulbb	lr, lr, fp
 80248f6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80248fa:	fb00 e003 	mla	r0, r0, r3, lr
 80248fe:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8024902:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024906:	fb12 f20b 	smulbb	r2, r2, fp
 802490a:	fb0e 2203 	mla	r2, lr, r3, r2
 802490e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024912:	b292      	uxth	r2, r2
 8024914:	fb11 f10b 	smulbb	r1, r1, fp
 8024918:	fa5f fc8c 	uxtb.w	ip, ip
 802491c:	b280      	uxth	r0, r0
 802491e:	fb0c 1303 	mla	r3, ip, r3, r1
 8024922:	f102 0e01 	add.w	lr, r2, #1
 8024926:	b29b      	uxth	r3, r3
 8024928:	1c41      	adds	r1, r0, #1
 802492a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802492e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024932:	0952      	lsrs	r2, r2, #5
 8024934:	1c59      	adds	r1, r3, #1
 8024936:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802493a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802493e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024942:	4310      	orrs	r0, r2
 8024944:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024948:	4318      	orrs	r0, r3
 802494a:	f8a8 0000 	strh.w	r0, [r8]
 802494e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024950:	441c      	add	r4, r3
 8024952:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024954:	441e      	add	r6, r3
 8024956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024958:	3b01      	subs	r3, #1
 802495a:	f108 0802 	add.w	r8, r8, #2
 802495e:	9309      	str	r3, [sp, #36]	; 0x24
 8024960:	e735      	b.n	80247ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024962:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024964:	441c      	add	r4, r3
 8024966:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024968:	3d01      	subs	r5, #1
 802496a:	441e      	add	r6, r3
 802496c:	f109 0902 	add.w	r9, r9, #2
 8024970:	e70d      	b.n	802478e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8024972:	d020      	beq.n	80249b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8024974:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024976:	1e6b      	subs	r3, r5, #1
 8024978:	fb00 4003 	mla	r0, r0, r3, r4
 802497c:	1400      	asrs	r0, r0, #16
 802497e:	f53f af22 	bmi.w	80247c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024982:	3901      	subs	r1, #1
 8024984:	4288      	cmp	r0, r1
 8024986:	f6bf af1e 	bge.w	80247c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802498a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802498c:	fb01 6303 	mla	r3, r1, r3, r6
 8024990:	141b      	asrs	r3, r3, #16
 8024992:	f53f af18 	bmi.w	80247c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024996:	3a01      	subs	r2, #1
 8024998:	4293      	cmp	r3, r2
 802499a:	f6bf af14 	bge.w	80247c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802499e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80249a2:	9308      	str	r3, [sp, #32]
 80249a4:	46aa      	mov	sl, r5
 80249a6:	46c8      	mov	r8, r9
 80249a8:	f1ba 0f00 	cmp.w	sl, #0
 80249ac:	dc7e      	bgt.n	8024aac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80249ae:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80249b2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80249b6:	9b07      	ldr	r3, [sp, #28]
 80249b8:	2b00      	cmp	r3, #0
 80249ba:	f340 8141 	ble.w	8024c40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80249be:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80249c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80249c6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80249ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80249cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80249d0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80249d4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80249d8:	eef0 6a48 	vmov.f32	s13, s16
 80249dc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80249e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80249e8:	ee16 4a90 	vmov	r4, s13
 80249ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80249f0:	eef0 6a68 	vmov.f32	s13, s17
 80249f4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80249f8:	ee18 2a10 	vmov	r2, s16
 80249fc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024a00:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a04:	ee18 2a90 	vmov	r2, s17
 8024a08:	9327      	str	r3, [sp, #156]	; 0x9c
 8024a0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a10:	9328      	str	r3, [sp, #160]	; 0xa0
 8024a12:	9b07      	ldr	r3, [sp, #28]
 8024a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024a16:	3b01      	subs	r3, #1
 8024a18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a1c:	9307      	str	r3, [sp, #28]
 8024a1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a20:	ee16 6a90 	vmov	r6, s13
 8024a24:	bf14      	ite	ne
 8024a26:	461d      	movne	r5, r3
 8024a28:	4615      	moveq	r5, r2
 8024a2a:	eef0 8a67 	vmov.f32	s17, s15
 8024a2e:	eeb0 8a47 	vmov.f32	s16, s14
 8024a32:	e69d      	b.n	8024770 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024a34:	2900      	cmp	r1, #0
 8024a36:	f43f af26 	beq.w	8024886 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8024a3a:	eb0a 0003 	add.w	r0, sl, r3
 8024a3e:	0843      	lsrs	r3, r0, #1
 8024a40:	07c0      	lsls	r0, r0, #31
 8024a42:	5cfb      	ldrb	r3, [r7, r3]
 8024a44:	bf54      	ite	pl
 8024a46:	f003 030f 	andpl.w	r3, r3, #15
 8024a4a:	111b      	asrmi	r3, r3, #4
 8024a4c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024a50:	b2db      	uxtb	r3, r3
 8024a52:	930a      	str	r3, [sp, #40]	; 0x28
 8024a54:	e717      	b.n	8024886 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8024a56:	00d2      	lsls	r2, r2, #3
 8024a58:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8024a5c:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8024a60:	f8a8 1000 	strh.w	r1, [r8]
 8024a64:	e773      	b.n	802494e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024a66:	f113 0b01 	adds.w	fp, r3, #1
 8024a6a:	f53f af70 	bmi.w	802494e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024a6e:	45dc      	cmp	ip, fp
 8024a70:	f6ff af6d 	blt.w	802494e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024a74:	f110 0b01 	adds.w	fp, r0, #1
 8024a78:	f53f af69 	bmi.w	802494e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024a7c:	45de      	cmp	lr, fp
 8024a7e:	f6ff af66 	blt.w	802494e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024a82:	9a08      	ldr	r2, [sp, #32]
 8024a84:	9302      	str	r3, [sp, #8]
 8024a86:	fa0f f38e 	sxth.w	r3, lr
 8024a8a:	9301      	str	r3, [sp, #4]
 8024a8c:	fa0f f38c 	sxth.w	r3, ip
 8024a90:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024a94:	9105      	str	r1, [sp, #20]
 8024a96:	9300      	str	r3, [sp, #0]
 8024a98:	463a      	mov	r2, r7
 8024a9a:	4653      	mov	r3, sl
 8024a9c:	4641      	mov	r1, r8
 8024a9e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024aa0:	f7ff fd56 	bl	8024550 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8024aa4:	e753      	b.n	802494e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024aa6:	bf00      	nop
 8024aa8:	2000a068 	.word	0x2000a068
 8024aac:	9906      	ldr	r1, [sp, #24]
 8024aae:	1422      	asrs	r2, r4, #16
 8024ab0:	1433      	asrs	r3, r6, #16
 8024ab2:	fb01 2303 	mla	r3, r1, r3, r2
 8024ab6:	085a      	lsrs	r2, r3, #1
 8024ab8:	07d9      	lsls	r1, r3, #31
 8024aba:	5cba      	ldrb	r2, [r7, r2]
 8024abc:	bf54      	ite	pl
 8024abe:	f002 020f 	andpl.w	r2, r2, #15
 8024ac2:	1112      	asrmi	r2, r2, #4
 8024ac4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024ac8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024acc:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024ad0:	b2d2      	uxtb	r2, r2
 8024ad2:	2800      	cmp	r0, #0
 8024ad4:	f000 809b 	beq.w	8024c0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f6>
 8024ad8:	f103 0e01 	add.w	lr, r3, #1
 8024adc:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8024ae0:	f01e 0f01 	tst.w	lr, #1
 8024ae4:	5c79      	ldrb	r1, [r7, r1]
 8024ae6:	bf0c      	ite	eq
 8024ae8:	f001 010f 	andeq.w	r1, r1, #15
 8024aec:	1109      	asrne	r1, r1, #4
 8024aee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024af2:	b2c9      	uxtb	r1, r1
 8024af4:	910f      	str	r1, [sp, #60]	; 0x3c
 8024af6:	f1bc 0f00 	cmp.w	ip, #0
 8024afa:	d019      	beq.n	8024b30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8024afc:	9908      	ldr	r1, [sp, #32]
 8024afe:	440b      	add	r3, r1
 8024b00:	0859      	lsrs	r1, r3, #1
 8024b02:	f013 0f01 	tst.w	r3, #1
 8024b06:	5c79      	ldrb	r1, [r7, r1]
 8024b08:	bf0c      	ite	eq
 8024b0a:	f001 010f 	andeq.w	r1, r1, #15
 8024b0e:	1109      	asrne	r1, r1, #4
 8024b10:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b14:	b2c9      	uxtb	r1, r1
 8024b16:	3301      	adds	r3, #1
 8024b18:	910b      	str	r1, [sp, #44]	; 0x2c
 8024b1a:	0859      	lsrs	r1, r3, #1
 8024b1c:	07db      	lsls	r3, r3, #31
 8024b1e:	5c79      	ldrb	r1, [r7, r1]
 8024b20:	bf54      	ite	pl
 8024b22:	f001 010f 	andpl.w	r1, r1, #15
 8024b26:	1109      	asrmi	r1, r1, #4
 8024b28:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b2c:	b2c9      	uxtb	r1, r1
 8024b2e:	9110      	str	r1, [sp, #64]	; 0x40
 8024b30:	b280      	uxth	r0, r0
 8024b32:	fa1f fc8c 	uxth.w	ip, ip
 8024b36:	fb00 f30c 	mul.w	r3, r0, ip
 8024b3a:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024b3e:	0100      	lsls	r0, r0, #4
 8024b40:	fa1f fc8c 	uxth.w	ip, ip
 8024b44:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024b48:	eba1 010c 	sub.w	r1, r1, ip
 8024b4c:	fa1f fe81 	uxth.w	lr, r1
 8024b50:	1ac0      	subs	r0, r0, r3
 8024b52:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024b54:	b280      	uxth	r0, r0
 8024b56:	4348      	muls	r0, r1
 8024b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024b5a:	fb02 020e 	mla	r2, r2, lr, r0
 8024b5e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024b62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024b64:	fb03 c302 	mla	r3, r3, r2, ip
 8024b68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	d045      	beq.n	8024bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024b70:	4a36      	ldr	r2, [pc, #216]	; (8024c4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 8024b72:	6811      	ldr	r1, [r2, #0]
 8024b74:	2bff      	cmp	r3, #255	; 0xff
 8024b76:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8024b7a:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8024b7e:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8024b82:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024b86:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024b8a:	b2c9      	uxtb	r1, r1
 8024b8c:	d050      	beq.n	8024c30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8024b8e:	f8b8 c000 	ldrh.w	ip, [r8]
 8024b92:	fa1f fb83 	uxth.w	fp, r3
 8024b96:	ea4f 202c 	mov.w	r0, ip, asr #8
 8024b9a:	43db      	mvns	r3, r3
 8024b9c:	b2db      	uxtb	r3, r3
 8024b9e:	fb1e fe0b 	smulbb	lr, lr, fp
 8024ba2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024ba6:	fb00 e003 	mla	r0, r0, r3, lr
 8024baa:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8024bae:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024bb2:	fb12 f20b 	smulbb	r2, r2, fp
 8024bb6:	fb0e 2203 	mla	r2, lr, r3, r2
 8024bba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024bbe:	b292      	uxth	r2, r2
 8024bc0:	fa5f fc8c 	uxtb.w	ip, ip
 8024bc4:	fb11 f10b 	smulbb	r1, r1, fp
 8024bc8:	b280      	uxth	r0, r0
 8024bca:	fb0c 1103 	mla	r1, ip, r3, r1
 8024bce:	f102 0e01 	add.w	lr, r2, #1
 8024bd2:	b289      	uxth	r1, r1
 8024bd4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024bd8:	f100 0e01 	add.w	lr, r0, #1
 8024bdc:	0952      	lsrs	r2, r2, #5
 8024bde:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8024be2:	1c4b      	adds	r3, r1, #1
 8024be4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024be8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024bec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024bf0:	4302      	orrs	r2, r0
 8024bf2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024bf6:	430a      	orrs	r2, r1
 8024bf8:	f8a8 2000 	strh.w	r2, [r8]
 8024bfc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024bfe:	441c      	add	r4, r3
 8024c00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c02:	f108 0802 	add.w	r8, r8, #2
 8024c06:	441e      	add	r6, r3
 8024c08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024c0c:	e6cc      	b.n	80249a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8024c0e:	f1bc 0f00 	cmp.w	ip, #0
 8024c12:	d08d      	beq.n	8024b30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8024c14:	9908      	ldr	r1, [sp, #32]
 8024c16:	440b      	add	r3, r1
 8024c18:	0859      	lsrs	r1, r3, #1
 8024c1a:	07db      	lsls	r3, r3, #31
 8024c1c:	5c79      	ldrb	r1, [r7, r1]
 8024c1e:	bf54      	ite	pl
 8024c20:	f001 010f 	andpl.w	r1, r1, #15
 8024c24:	1109      	asrmi	r1, r1, #4
 8024c26:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024c2a:	b2c9      	uxtb	r1, r1
 8024c2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8024c2e:	e77f      	b.n	8024b30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8024c30:	00d2      	lsls	r2, r2, #3
 8024c32:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8024c36:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8024c3a:	f8a8 1000 	strh.w	r1, [r8]
 8024c3e:	e7dd      	b.n	8024bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024c40:	b013      	add	sp, #76	; 0x4c
 8024c42:	ecbd 8b08 	vpop	{d8-d11}
 8024c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c4a:	bf00      	nop
 8024c4c:	2000a068 	.word	0x2000a068

08024c50 <CRC_Lock>:
 8024c50:	b530      	push	{r4, r5, lr}
 8024c52:	4a1d      	ldr	r2, [pc, #116]	; (8024cc8 <CRC_Lock+0x78>)
 8024c54:	6813      	ldr	r3, [r2, #0]
 8024c56:	f023 0301 	bic.w	r3, r3, #1
 8024c5a:	6013      	str	r3, [r2, #0]
 8024c5c:	4b1b      	ldr	r3, [pc, #108]	; (8024ccc <CRC_Lock+0x7c>)
 8024c5e:	681a      	ldr	r2, [r3, #0]
 8024c60:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024c64:	4022      	ands	r2, r4
 8024c66:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024c6a:	42aa      	cmp	r2, r5
 8024c6c:	d005      	beq.n	8024c7a <CRC_Lock+0x2a>
 8024c6e:	681b      	ldr	r3, [r3, #0]
 8024c70:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024c74:	4023      	ands	r3, r4
 8024c76:	4293      	cmp	r3, r2
 8024c78:	d11d      	bne.n	8024cb6 <CRC_Lock+0x66>
 8024c7a:	4b15      	ldr	r3, [pc, #84]	; (8024cd0 <CRC_Lock+0x80>)
 8024c7c:	681b      	ldr	r3, [r3, #0]
 8024c7e:	b9d3      	cbnz	r3, 8024cb6 <CRC_Lock+0x66>
 8024c80:	4a14      	ldr	r2, [pc, #80]	; (8024cd4 <CRC_Lock+0x84>)
 8024c82:	6813      	ldr	r3, [r2, #0]
 8024c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024c88:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8024c8c:	d006      	beq.n	8024c9c <CRC_Lock+0x4c>
 8024c8e:	6813      	ldr	r3, [r2, #0]
 8024c90:	f240 4283 	movw	r2, #1155	; 0x483
 8024c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024c98:	4293      	cmp	r3, r2
 8024c9a:	d10c      	bne.n	8024cb6 <CRC_Lock+0x66>
 8024c9c:	4b0e      	ldr	r3, [pc, #56]	; (8024cd8 <CRC_Lock+0x88>)
 8024c9e:	2201      	movs	r2, #1
 8024ca0:	601a      	str	r2, [r3, #0]
 8024ca2:	681a      	ldr	r2, [r3, #0]
 8024ca4:	2a00      	cmp	r2, #0
 8024ca6:	d1fc      	bne.n	8024ca2 <CRC_Lock+0x52>
 8024ca8:	4b0c      	ldr	r3, [pc, #48]	; (8024cdc <CRC_Lock+0x8c>)
 8024caa:	6018      	str	r0, [r3, #0]
 8024cac:	6818      	ldr	r0, [r3, #0]
 8024cae:	1a43      	subs	r3, r0, r1
 8024cb0:	4258      	negs	r0, r3
 8024cb2:	4158      	adcs	r0, r3
 8024cb4:	bd30      	pop	{r4, r5, pc}
 8024cb6:	4b0a      	ldr	r3, [pc, #40]	; (8024ce0 <CRC_Lock+0x90>)
 8024cb8:	2201      	movs	r2, #1
 8024cba:	601a      	str	r2, [r3, #0]
 8024cbc:	681a      	ldr	r2, [r3, #0]
 8024cbe:	2a00      	cmp	r2, #0
 8024cc0:	d1fc      	bne.n	8024cbc <CRC_Lock+0x6c>
 8024cc2:	4b08      	ldr	r3, [pc, #32]	; (8024ce4 <CRC_Lock+0x94>)
 8024cc4:	e7f1      	b.n	8024caa <CRC_Lock+0x5a>
 8024cc6:	bf00      	nop
 8024cc8:	e0002000 	.word	0xe0002000
 8024ccc:	e000ed00 	.word	0xe000ed00
 8024cd0:	e0042000 	.word	0xe0042000
 8024cd4:	5c001000 	.word	0x5c001000
 8024cd8:	58024c08 	.word	0x58024c08
 8024cdc:	58024c00 	.word	0x58024c00
 8024ce0:	40023008 	.word	0x40023008
 8024ce4:	40023000 	.word	0x40023000

08024ce8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024ce8:	6101      	str	r1, [r0, #16]
 8024cea:	4770      	bx	lr

08024cec <_ZN8touchgfx8Gestures4tickEv>:
 8024cec:	7b83      	ldrb	r3, [r0, #14]
 8024cee:	b14b      	cbz	r3, 8024d04 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024cf0:	8903      	ldrh	r3, [r0, #8]
 8024cf2:	3301      	adds	r3, #1
 8024cf4:	b29b      	uxth	r3, r3
 8024cf6:	2b07      	cmp	r3, #7
 8024cf8:	8103      	strh	r3, [r0, #8]
 8024cfa:	bf81      	itttt	hi
 8024cfc:	2300      	movhi	r3, #0
 8024cfe:	8143      	strhhi	r3, [r0, #10]
 8024d00:	8183      	strhhi	r3, [r0, #12]
 8024d02:	7383      	strbhi	r3, [r0, #14]
 8024d04:	4770      	bx	lr
	...

08024d08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024d08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024d0c:	4604      	mov	r4, r0
 8024d0e:	8880      	ldrh	r0, [r0, #4]
 8024d10:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024d14:	4698      	mov	r8, r3
 8024d16:	eba8 0000 	sub.w	r0, r8, r0
 8024d1a:	4b1c      	ldr	r3, [pc, #112]	; (8024d8c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8024d1c:	9300      	str	r3, [sp, #0]
 8024d1e:	b280      	uxth	r0, r0
 8024d20:	2300      	movs	r3, #0
 8024d22:	f88d 3004 	strb.w	r3, [sp, #4]
 8024d26:	b203      	sxth	r3, r0
 8024d28:	2b00      	cmp	r3, #0
 8024d2a:	bfb8      	it	lt
 8024d2c:	4240      	neglt	r0, r0
 8024d2e:	4617      	mov	r7, r2
 8024d30:	8aa2      	ldrh	r2, [r4, #20]
 8024d32:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8024d36:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024d3a:	bfb8      	it	lt
 8024d3c:	b203      	sxthlt	r3, r0
 8024d3e:	460e      	mov	r6, r1
 8024d40:	4293      	cmp	r3, r2
 8024d42:	88e1      	ldrh	r1, [r4, #6]
 8024d44:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024d48:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024d4c:	dc08      	bgt.n	8024d60 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024d4e:	1a69      	subs	r1, r5, r1
 8024d50:	b289      	uxth	r1, r1
 8024d52:	b20b      	sxth	r3, r1
 8024d54:	2b00      	cmp	r3, #0
 8024d56:	bfbc      	itt	lt
 8024d58:	4249      	neglt	r1, r1
 8024d5a:	b20b      	sxthlt	r3, r1
 8024d5c:	429a      	cmp	r2, r3
 8024d5e:	da13      	bge.n	8024d88 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024d60:	6920      	ldr	r0, [r4, #16]
 8024d62:	6803      	ldr	r3, [r0, #0]
 8024d64:	4669      	mov	r1, sp
 8024d66:	685b      	ldr	r3, [r3, #4]
 8024d68:	4798      	blx	r3
 8024d6a:	eba8 0606 	sub.w	r6, r8, r6
 8024d6e:	2300      	movs	r3, #0
 8024d70:	1bef      	subs	r7, r5, r7
 8024d72:	2001      	movs	r0, #1
 8024d74:	8123      	strh	r3, [r4, #8]
 8024d76:	8166      	strh	r6, [r4, #10]
 8024d78:	81a7      	strh	r7, [r4, #12]
 8024d7a:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024d7e:	80e5      	strh	r5, [r4, #6]
 8024d80:	73a0      	strb	r0, [r4, #14]
 8024d82:	b004      	add	sp, #16
 8024d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d88:	2000      	movs	r0, #0
 8024d8a:	e7fa      	b.n	8024d82 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024d8c:	0802a054 	.word	0x0802a054

08024d90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d92:	461e      	mov	r6, r3
 8024d94:	1e4b      	subs	r3, r1, #1
 8024d96:	2b01      	cmp	r3, #1
 8024d98:	b085      	sub	sp, #20
 8024d9a:	4604      	mov	r4, r0
 8024d9c:	460d      	mov	r5, r1
 8024d9e:	4617      	mov	r7, r2
 8024da0:	d84b      	bhi.n	8024e3a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024da2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024da6:	1cd3      	adds	r3, r2, #3
 8024da8:	b29b      	uxth	r3, r3
 8024daa:	2b06      	cmp	r3, #6
 8024dac:	d916      	bls.n	8024ddc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024dae:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024e50 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024db2:	f8cd c004 	str.w	ip, [sp, #4]
 8024db6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024dba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024dbe:	6900      	ldr	r0, [r0, #16]
 8024dc0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024dc4:	f04f 0c00 	mov.w	ip, #0
 8024dc8:	f88d c008 	strb.w	ip, [sp, #8]
 8024dcc:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024dd0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024dd4:	6803      	ldr	r3, [r0, #0]
 8024dd6:	a901      	add	r1, sp, #4
 8024dd8:	689b      	ldr	r3, [r3, #8]
 8024dda:	4798      	blx	r3
 8024ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024de0:	1cd3      	adds	r3, r2, #3
 8024de2:	b29b      	uxth	r3, r3
 8024de4:	2b06      	cmp	r3, #6
 8024de6:	d916      	bls.n	8024e16 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024de8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024e50 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024dec:	f8cd c004 	str.w	ip, [sp, #4]
 8024df0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024df4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024df8:	6920      	ldr	r0, [r4, #16]
 8024dfa:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024dfe:	f04f 0c01 	mov.w	ip, #1
 8024e02:	f88d c008 	strb.w	ip, [sp, #8]
 8024e06:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024e0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024e0e:	6803      	ldr	r3, [r0, #0]
 8024e10:	a901      	add	r1, sp, #4
 8024e12:	689b      	ldr	r3, [r3, #8]
 8024e14:	4798      	blx	r3
 8024e16:	4b0d      	ldr	r3, [pc, #52]	; (8024e4c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024e18:	9301      	str	r3, [sp, #4]
 8024e1a:	6920      	ldr	r0, [r4, #16]
 8024e1c:	f88d 5008 	strb.w	r5, [sp, #8]
 8024e20:	2300      	movs	r3, #0
 8024e22:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024e26:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024e2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024e2e:	6803      	ldr	r3, [r0, #0]
 8024e30:	a901      	add	r1, sp, #4
 8024e32:	681b      	ldr	r3, [r3, #0]
 8024e34:	4798      	blx	r3
 8024e36:	b005      	add	sp, #20
 8024e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024e3a:	2900      	cmp	r1, #0
 8024e3c:	d1eb      	bne.n	8024e16 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024e3e:	80a2      	strh	r2, [r4, #4]
 8024e40:	80c6      	strh	r6, [r0, #6]
 8024e42:	60a1      	str	r1, [r4, #8]
 8024e44:	81a1      	strh	r1, [r4, #12]
 8024e46:	73a1      	strb	r1, [r4, #14]
 8024e48:	e7e5      	b.n	8024e16 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024e4a:	bf00      	nop
 8024e4c:	0802a040 	.word	0x0802a040
 8024e50:	0802a068 	.word	0x0802a068

08024e54 <__aeabi_atexit>:
 8024e54:	460b      	mov	r3, r1
 8024e56:	4601      	mov	r1, r0
 8024e58:	4618      	mov	r0, r3
 8024e5a:	f000 b953 	b.w	8025104 <__cxa_atexit>

08024e5e <_ZdlPvj>:
 8024e5e:	f000 b8f5 	b.w	802504c <_ZdlPv>

08024e62 <__cxa_guard_acquire>:
 8024e62:	6803      	ldr	r3, [r0, #0]
 8024e64:	07db      	lsls	r3, r3, #31
 8024e66:	d406      	bmi.n	8024e76 <__cxa_guard_acquire+0x14>
 8024e68:	7843      	ldrb	r3, [r0, #1]
 8024e6a:	b103      	cbz	r3, 8024e6e <__cxa_guard_acquire+0xc>
 8024e6c:	deff      	udf	#255	; 0xff
 8024e6e:	2301      	movs	r3, #1
 8024e70:	7043      	strb	r3, [r0, #1]
 8024e72:	4618      	mov	r0, r3
 8024e74:	4770      	bx	lr
 8024e76:	2000      	movs	r0, #0
 8024e78:	4770      	bx	lr

08024e7a <__cxa_guard_release>:
 8024e7a:	2301      	movs	r3, #1
 8024e7c:	6003      	str	r3, [r0, #0]
 8024e7e:	4770      	bx	lr

08024e80 <__cxa_pure_virtual>:
 8024e80:	b508      	push	{r3, lr}
 8024e82:	f000 f8f1 	bl	8025068 <_ZSt9terminatev>

08024e86 <_ZNSaIcEC1Ev>:
 8024e86:	4770      	bx	lr

08024e88 <_ZNSaIcED1Ev>:
 8024e88:	4770      	bx	lr

08024e8a <_ZSt17__throw_bad_allocv>:
 8024e8a:	b508      	push	{r3, lr}
 8024e8c:	f000 f90a 	bl	80250a4 <abort>

08024e90 <_ZSt19__throw_logic_errorPKc>:
 8024e90:	b508      	push	{r3, lr}
 8024e92:	f000 f907 	bl	80250a4 <abort>

08024e96 <_ZSt20__throw_length_errorPKc>:
 8024e96:	b508      	push	{r3, lr}
 8024e98:	f000 f904 	bl	80250a4 <abort>

08024e9c <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8024e9c:	b10a      	cbz	r2, 8024ea2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8024e9e:	f000 b98b 	b.w	80251b8 <memcpy>
 8024ea2:	4770      	bx	lr

08024ea4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8024ea4:	6001      	str	r1, [r0, #0]
 8024ea6:	4770      	bx	lr

08024ea8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8024ea8:	6800      	ldr	r0, [r0, #0]
 8024eaa:	4770      	bx	lr

08024eac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8024eac:	3008      	adds	r0, #8
 8024eae:	4770      	bx	lr

08024eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8024eb0:	6081      	str	r1, [r0, #8]
 8024eb2:	4770      	bx	lr

08024eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8024eb4:	6803      	ldr	r3, [r0, #0]
 8024eb6:	6041      	str	r1, [r0, #4]
 8024eb8:	2200      	movs	r2, #0
 8024eba:	545a      	strb	r2, [r3, r1]
 8024ebc:	4770      	bx	lr
	...

08024ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8024ec0:	b508      	push	{r3, lr}
 8024ec2:	680b      	ldr	r3, [r1, #0]
 8024ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024ec8:	d302      	bcc.n	8024ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8024eca:	480d      	ldr	r0, [pc, #52]	; (8024f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8024ecc:	f7ff ffe3 	bl	8024e96 <_ZSt20__throw_length_errorPKc>
 8024ed0:	4293      	cmp	r3, r2
 8024ed2:	d90b      	bls.n	8024eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8024ed4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8024ed8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8024edc:	d206      	bcs.n	8024eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8024ede:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8024ee2:	bf2a      	itet	cs
 8024ee4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8024ee8:	6008      	strcc	r0, [r1, #0]
 8024eea:	600b      	strcs	r3, [r1, #0]
 8024eec:	6808      	ldr	r0, [r1, #0]
 8024eee:	3001      	adds	r0, #1
 8024ef0:	d501      	bpl.n	8024ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8024ef2:	f7ff ffca 	bl	8024e8a <_ZSt17__throw_bad_allocv>
 8024ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8024efa:	f000 b8ba 	b.w	8025072 <_Znwj>
 8024efe:	bf00      	nop
 8024f00:	0802b433 	.word	0x0802b433

08024f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8024f04:	f850 3b08 	ldr.w	r3, [r0], #8
 8024f08:	4283      	cmp	r3, r0
 8024f0a:	d002      	beq.n	8024f12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8024f0c:	4618      	mov	r0, r3
 8024f0e:	f000 b89d 	b.w	802504c <_ZdlPv>
 8024f12:	4770      	bx	lr

08024f14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8024f14:	6840      	ldr	r0, [r0, #4]
 8024f16:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8024f1a:	3901      	subs	r1, #1
 8024f1c:	1a09      	subs	r1, r1, r0
 8024f1e:	4291      	cmp	r1, r2
 8024f20:	b508      	push	{r3, lr}
 8024f22:	d202      	bcs.n	8024f2a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8024f24:	4618      	mov	r0, r3
 8024f26:	f7ff ffb6 	bl	8024e96 <_ZSt20__throw_length_errorPKc>
 8024f2a:	bd08      	pop	{r3, pc}

08024f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8024f2c:	2a01      	cmp	r2, #1
 8024f2e:	b510      	push	{r4, lr}
 8024f30:	d102      	bne.n	8024f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8024f32:	780a      	ldrb	r2, [r1, #0]
 8024f34:	7002      	strb	r2, [r0, #0]
 8024f36:	bd10      	pop	{r4, pc}
 8024f38:	f7ff ffb0 	bl	8024e9c <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8024f3c:	e7fb      	b.n	8024f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08024f3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8024f3e:	b508      	push	{r3, lr}
 8024f40:	1a52      	subs	r2, r2, r1
 8024f42:	f7ff fff3 	bl	8024f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8024f46:	bd08      	pop	{r3, pc}

08024f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8024f48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8024f4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024f4e:	461f      	mov	r7, r3
 8024f50:	6843      	ldr	r3, [r0, #4]
 8024f52:	eb01 0802 	add.w	r8, r1, r2
 8024f56:	1ab2      	subs	r2, r6, r2
 8024f58:	441a      	add	r2, r3
 8024f5a:	eba3 0908 	sub.w	r9, r3, r8
 8024f5e:	4603      	mov	r3, r0
 8024f60:	9201      	str	r2, [sp, #4]
 8024f62:	f853 2b08 	ldr.w	r2, [r3], #8
 8024f66:	429a      	cmp	r2, r3
 8024f68:	bf18      	it	ne
 8024f6a:	6882      	ldrne	r2, [r0, #8]
 8024f6c:	460d      	mov	r5, r1
 8024f6e:	bf08      	it	eq
 8024f70:	220f      	moveq	r2, #15
 8024f72:	a901      	add	r1, sp, #4
 8024f74:	4604      	mov	r4, r0
 8024f76:	f7ff ffa3 	bl	8024ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8024f7a:	4682      	mov	sl, r0
 8024f7c:	b11d      	cbz	r5, 8024f86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8024f7e:	6821      	ldr	r1, [r4, #0]
 8024f80:	462a      	mov	r2, r5
 8024f82:	f7ff ffd3 	bl	8024f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8024f86:	b137      	cbz	r7, 8024f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8024f88:	b12e      	cbz	r6, 8024f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8024f8a:	4632      	mov	r2, r6
 8024f8c:	4639      	mov	r1, r7
 8024f8e:	eb0a 0005 	add.w	r0, sl, r5
 8024f92:	f7ff ffcb 	bl	8024f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8024f96:	f1b9 0f00 	cmp.w	r9, #0
 8024f9a:	d007      	beq.n	8024fac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8024f9c:	6821      	ldr	r1, [r4, #0]
 8024f9e:	4435      	add	r5, r6
 8024fa0:	464a      	mov	r2, r9
 8024fa2:	4441      	add	r1, r8
 8024fa4:	eb0a 0005 	add.w	r0, sl, r5
 8024fa8:	f7ff ffc0 	bl	8024f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8024fac:	4620      	mov	r0, r4
 8024fae:	f7ff ffa9 	bl	8024f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8024fb2:	9b01      	ldr	r3, [sp, #4]
 8024fb4:	f8c4 a000 	str.w	sl, [r4]
 8024fb8:	60a3      	str	r3, [r4, #8]
 8024fba:	b002      	add	sp, #8
 8024fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08024fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8024fc0:	b510      	push	{r4, lr}
 8024fc2:	4604      	mov	r4, r0
 8024fc4:	f7ff ff9e 	bl	8024f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8024fc8:	4620      	mov	r0, r4
 8024fca:	bd10      	pop	{r4, pc}

08024fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8024fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024fce:	4604      	mov	r4, r0
 8024fd0:	4623      	mov	r3, r4
 8024fd2:	6840      	ldr	r0, [r0, #4]
 8024fd4:	f853 6b08 	ldr.w	r6, [r3], #8
 8024fd8:	429e      	cmp	r6, r3
 8024fda:	bf18      	it	ne
 8024fdc:	68a3      	ldrne	r3, [r4, #8]
 8024fde:	eb00 0502 	add.w	r5, r0, r2
 8024fe2:	bf08      	it	eq
 8024fe4:	230f      	moveq	r3, #15
 8024fe6:	429d      	cmp	r5, r3
 8024fe8:	d80a      	bhi.n	8025000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8024fea:	b112      	cbz	r2, 8024ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8024fec:	4430      	add	r0, r6
 8024fee:	f7ff ff9d 	bl	8024f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8024ff2:	6823      	ldr	r3, [r4, #0]
 8024ff4:	6065      	str	r5, [r4, #4]
 8024ff6:	2200      	movs	r2, #0
 8024ff8:	4620      	mov	r0, r4
 8024ffa:	555a      	strb	r2, [r3, r5]
 8024ffc:	b002      	add	sp, #8
 8024ffe:	bd70      	pop	{r4, r5, r6, pc}
 8025000:	9200      	str	r2, [sp, #0]
 8025002:	460b      	mov	r3, r1
 8025004:	2200      	movs	r2, #0
 8025006:	4601      	mov	r1, r0
 8025008:	4620      	mov	r0, r4
 802500a:	f7ff ff9d 	bl	8024f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 802500e:	e7f0      	b.n	8024ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08025010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8025010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025012:	4604      	mov	r4, r0
 8025014:	4608      	mov	r0, r1
 8025016:	460d      	mov	r5, r1
 8025018:	f7db f93a 	bl	8000290 <strlen>
 802501c:	4b06      	ldr	r3, [pc, #24]	; (8025038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 802501e:	9001      	str	r0, [sp, #4]
 8025020:	4602      	mov	r2, r0
 8025022:	2100      	movs	r1, #0
 8025024:	4620      	mov	r0, r4
 8025026:	f7ff ff75 	bl	8024f14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 802502a:	9a01      	ldr	r2, [sp, #4]
 802502c:	4629      	mov	r1, r5
 802502e:	4620      	mov	r0, r4
 8025030:	f7ff ffcc 	bl	8024fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8025034:	b003      	add	sp, #12
 8025036:	bd30      	pop	{r4, r5, pc}
 8025038:	0802b44b 	.word	0x0802b44b

0802503c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 802503c:	b508      	push	{r3, lr}
 802503e:	f7ff ffe7 	bl	8025010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8025042:	bd08      	pop	{r3, pc}

08025044 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8025044:	6800      	ldr	r0, [r0, #0]
 8025046:	4770      	bx	lr

08025048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8025048:	6001      	str	r1, [r0, #0]
 802504a:	4770      	bx	lr

0802504c <_ZdlPv>:
 802504c:	f000 b8ac 	b.w	80251a8 <free>

08025050 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025050:	b508      	push	{r3, lr}
 8025052:	4780      	blx	r0
 8025054:	f000 f826 	bl	80250a4 <abort>

08025058 <_ZSt13get_terminatev>:
 8025058:	4b02      	ldr	r3, [pc, #8]	; (8025064 <_ZSt13get_terminatev+0xc>)
 802505a:	6818      	ldr	r0, [r3, #0]
 802505c:	f3bf 8f5b 	dmb	ish
 8025060:	4770      	bx	lr
 8025062:	bf00      	nop
 8025064:	20000114 	.word	0x20000114

08025068 <_ZSt9terminatev>:
 8025068:	b508      	push	{r3, lr}
 802506a:	f7ff fff5 	bl	8025058 <_ZSt13get_terminatev>
 802506e:	f7ff ffef 	bl	8025050 <_ZN10__cxxabiv111__terminateEPFvvE>

08025072 <_Znwj>:
 8025072:	2801      	cmp	r0, #1
 8025074:	bf38      	it	cc
 8025076:	2001      	movcc	r0, #1
 8025078:	b510      	push	{r4, lr}
 802507a:	4604      	mov	r4, r0
 802507c:	4620      	mov	r0, r4
 802507e:	f000 f88b 	bl	8025198 <malloc>
 8025082:	b930      	cbnz	r0, 8025092 <_Znwj+0x20>
 8025084:	f000 f806 	bl	8025094 <_ZSt15get_new_handlerv>
 8025088:	b908      	cbnz	r0, 802508e <_Znwj+0x1c>
 802508a:	f000 f80b 	bl	80250a4 <abort>
 802508e:	4780      	blx	r0
 8025090:	e7f4      	b.n	802507c <_Znwj+0xa>
 8025092:	bd10      	pop	{r4, pc}

08025094 <_ZSt15get_new_handlerv>:
 8025094:	4b02      	ldr	r3, [pc, #8]	; (80250a0 <_ZSt15get_new_handlerv+0xc>)
 8025096:	6818      	ldr	r0, [r3, #0]
 8025098:	f3bf 8f5b 	dmb	ish
 802509c:	4770      	bx	lr
 802509e:	bf00      	nop
 80250a0:	2000a15c 	.word	0x2000a15c

080250a4 <abort>:
 80250a4:	b508      	push	{r3, lr}
 80250a6:	2006      	movs	r0, #6
 80250a8:	f000 fc8e 	bl	80259c8 <raise>
 80250ac:	2001      	movs	r0, #1
 80250ae:	f7df f9bd 	bl	800442c <_exit>
	...

080250b4 <__assert_func>:
 80250b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80250b6:	4614      	mov	r4, r2
 80250b8:	461a      	mov	r2, r3
 80250ba:	4b09      	ldr	r3, [pc, #36]	; (80250e0 <__assert_func+0x2c>)
 80250bc:	681b      	ldr	r3, [r3, #0]
 80250be:	4605      	mov	r5, r0
 80250c0:	68d8      	ldr	r0, [r3, #12]
 80250c2:	b14c      	cbz	r4, 80250d8 <__assert_func+0x24>
 80250c4:	4b07      	ldr	r3, [pc, #28]	; (80250e4 <__assert_func+0x30>)
 80250c6:	9100      	str	r1, [sp, #0]
 80250c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80250cc:	4906      	ldr	r1, [pc, #24]	; (80250e8 <__assert_func+0x34>)
 80250ce:	462b      	mov	r3, r5
 80250d0:	f000 f82c 	bl	802512c <fiprintf>
 80250d4:	f7ff ffe6 	bl	80250a4 <abort>
 80250d8:	4b04      	ldr	r3, [pc, #16]	; (80250ec <__assert_func+0x38>)
 80250da:	461c      	mov	r4, r3
 80250dc:	e7f3      	b.n	80250c6 <__assert_func+0x12>
 80250de:	bf00      	nop
 80250e0:	20000118 	.word	0x20000118
 80250e4:	0802b460 	.word	0x0802b460
 80250e8:	0802b46d 	.word	0x0802b46d
 80250ec:	0802b49b 	.word	0x0802b49b

080250f0 <atexit>:
 80250f0:	2300      	movs	r3, #0
 80250f2:	4601      	mov	r1, r0
 80250f4:	461a      	mov	r2, r3
 80250f6:	4618      	mov	r0, r3
 80250f8:	f000 bf5e 	b.w	8025fb8 <__register_exitproc>

080250fc <atoi>:
 80250fc:	220a      	movs	r2, #10
 80250fe:	2100      	movs	r1, #0
 8025100:	f000 be44 	b.w	8025d8c <strtol>

08025104 <__cxa_atexit>:
 8025104:	b510      	push	{r4, lr}
 8025106:	4c05      	ldr	r4, [pc, #20]	; (802511c <__cxa_atexit+0x18>)
 8025108:	4613      	mov	r3, r2
 802510a:	b12c      	cbz	r4, 8025118 <__cxa_atexit+0x14>
 802510c:	460a      	mov	r2, r1
 802510e:	4601      	mov	r1, r0
 8025110:	2002      	movs	r0, #2
 8025112:	f000 ff51 	bl	8025fb8 <__register_exitproc>
 8025116:	bd10      	pop	{r4, pc}
 8025118:	4620      	mov	r0, r4
 802511a:	e7fc      	b.n	8025116 <__cxa_atexit+0x12>
 802511c:	08025fb9 	.word	0x08025fb9

08025120 <__errno>:
 8025120:	4b01      	ldr	r3, [pc, #4]	; (8025128 <__errno+0x8>)
 8025122:	6818      	ldr	r0, [r3, #0]
 8025124:	4770      	bx	lr
 8025126:	bf00      	nop
 8025128:	20000118 	.word	0x20000118

0802512c <fiprintf>:
 802512c:	b40e      	push	{r1, r2, r3}
 802512e:	b503      	push	{r0, r1, lr}
 8025130:	4601      	mov	r1, r0
 8025132:	ab03      	add	r3, sp, #12
 8025134:	4805      	ldr	r0, [pc, #20]	; (802514c <fiprintf+0x20>)
 8025136:	f853 2b04 	ldr.w	r2, [r3], #4
 802513a:	6800      	ldr	r0, [r0, #0]
 802513c:	9301      	str	r3, [sp, #4]
 802513e:	f000 f93f 	bl	80253c0 <_vfiprintf_r>
 8025142:	b002      	add	sp, #8
 8025144:	f85d eb04 	ldr.w	lr, [sp], #4
 8025148:	b003      	add	sp, #12
 802514a:	4770      	bx	lr
 802514c:	20000118 	.word	0x20000118

08025150 <__libc_init_array>:
 8025150:	b570      	push	{r4, r5, r6, lr}
 8025152:	4d0d      	ldr	r5, [pc, #52]	; (8025188 <__libc_init_array+0x38>)
 8025154:	4c0d      	ldr	r4, [pc, #52]	; (802518c <__libc_init_array+0x3c>)
 8025156:	1b64      	subs	r4, r4, r5
 8025158:	10a4      	asrs	r4, r4, #2
 802515a:	2600      	movs	r6, #0
 802515c:	42a6      	cmp	r6, r4
 802515e:	d109      	bne.n	8025174 <__libc_init_array+0x24>
 8025160:	4d0b      	ldr	r5, [pc, #44]	; (8025190 <__libc_init_array+0x40>)
 8025162:	4c0c      	ldr	r4, [pc, #48]	; (8025194 <__libc_init_array+0x44>)
 8025164:	f001 ffa6 	bl	80270b4 <_init>
 8025168:	1b64      	subs	r4, r4, r5
 802516a:	10a4      	asrs	r4, r4, #2
 802516c:	2600      	movs	r6, #0
 802516e:	42a6      	cmp	r6, r4
 8025170:	d105      	bne.n	802517e <__libc_init_array+0x2e>
 8025172:	bd70      	pop	{r4, r5, r6, pc}
 8025174:	f855 3b04 	ldr.w	r3, [r5], #4
 8025178:	4798      	blx	r3
 802517a:	3601      	adds	r6, #1
 802517c:	e7ee      	b.n	802515c <__libc_init_array+0xc>
 802517e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025182:	4798      	blx	r3
 8025184:	3601      	adds	r6, #1
 8025186:	e7f2      	b.n	802516e <__libc_init_array+0x1e>
 8025188:	080645d8 	.word	0x080645d8
 802518c:	080645d8 	.word	0x080645d8
 8025190:	080645d8 	.word	0x080645d8
 8025194:	080645ec 	.word	0x080645ec

08025198 <malloc>:
 8025198:	4b02      	ldr	r3, [pc, #8]	; (80251a4 <malloc+0xc>)
 802519a:	4601      	mov	r1, r0
 802519c:	6818      	ldr	r0, [r3, #0]
 802519e:	f000 b88b 	b.w	80252b8 <_malloc_r>
 80251a2:	bf00      	nop
 80251a4:	20000118 	.word	0x20000118

080251a8 <free>:
 80251a8:	4b02      	ldr	r3, [pc, #8]	; (80251b4 <free+0xc>)
 80251aa:	4601      	mov	r1, r0
 80251ac:	6818      	ldr	r0, [r3, #0]
 80251ae:	f000 b833 	b.w	8025218 <_free_r>
 80251b2:	bf00      	nop
 80251b4:	20000118 	.word	0x20000118

080251b8 <memcpy>:
 80251b8:	440a      	add	r2, r1
 80251ba:	4291      	cmp	r1, r2
 80251bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80251c0:	d100      	bne.n	80251c4 <memcpy+0xc>
 80251c2:	4770      	bx	lr
 80251c4:	b510      	push	{r4, lr}
 80251c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80251ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80251ce:	4291      	cmp	r1, r2
 80251d0:	d1f9      	bne.n	80251c6 <memcpy+0xe>
 80251d2:	bd10      	pop	{r4, pc}

080251d4 <memmove>:
 80251d4:	4288      	cmp	r0, r1
 80251d6:	b510      	push	{r4, lr}
 80251d8:	eb01 0402 	add.w	r4, r1, r2
 80251dc:	d902      	bls.n	80251e4 <memmove+0x10>
 80251de:	4284      	cmp	r4, r0
 80251e0:	4623      	mov	r3, r4
 80251e2:	d807      	bhi.n	80251f4 <memmove+0x20>
 80251e4:	1e43      	subs	r3, r0, #1
 80251e6:	42a1      	cmp	r1, r4
 80251e8:	d008      	beq.n	80251fc <memmove+0x28>
 80251ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80251ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80251f2:	e7f8      	b.n	80251e6 <memmove+0x12>
 80251f4:	4402      	add	r2, r0
 80251f6:	4601      	mov	r1, r0
 80251f8:	428a      	cmp	r2, r1
 80251fa:	d100      	bne.n	80251fe <memmove+0x2a>
 80251fc:	bd10      	pop	{r4, pc}
 80251fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025206:	e7f7      	b.n	80251f8 <memmove+0x24>

08025208 <memset>:
 8025208:	4402      	add	r2, r0
 802520a:	4603      	mov	r3, r0
 802520c:	4293      	cmp	r3, r2
 802520e:	d100      	bne.n	8025212 <memset+0xa>
 8025210:	4770      	bx	lr
 8025212:	f803 1b01 	strb.w	r1, [r3], #1
 8025216:	e7f9      	b.n	802520c <memset+0x4>

08025218 <_free_r>:
 8025218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802521a:	2900      	cmp	r1, #0
 802521c:	d048      	beq.n	80252b0 <_free_r+0x98>
 802521e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025222:	9001      	str	r0, [sp, #4]
 8025224:	2b00      	cmp	r3, #0
 8025226:	f1a1 0404 	sub.w	r4, r1, #4
 802522a:	bfb8      	it	lt
 802522c:	18e4      	addlt	r4, r4, r3
 802522e:	f001 f967 	bl	8026500 <__malloc_lock>
 8025232:	4a20      	ldr	r2, [pc, #128]	; (80252b4 <_free_r+0x9c>)
 8025234:	9801      	ldr	r0, [sp, #4]
 8025236:	6813      	ldr	r3, [r2, #0]
 8025238:	4615      	mov	r5, r2
 802523a:	b933      	cbnz	r3, 802524a <_free_r+0x32>
 802523c:	6063      	str	r3, [r4, #4]
 802523e:	6014      	str	r4, [r2, #0]
 8025240:	b003      	add	sp, #12
 8025242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025246:	f001 b961 	b.w	802650c <__malloc_unlock>
 802524a:	42a3      	cmp	r3, r4
 802524c:	d90b      	bls.n	8025266 <_free_r+0x4e>
 802524e:	6821      	ldr	r1, [r4, #0]
 8025250:	1862      	adds	r2, r4, r1
 8025252:	4293      	cmp	r3, r2
 8025254:	bf04      	itt	eq
 8025256:	681a      	ldreq	r2, [r3, #0]
 8025258:	685b      	ldreq	r3, [r3, #4]
 802525a:	6063      	str	r3, [r4, #4]
 802525c:	bf04      	itt	eq
 802525e:	1852      	addeq	r2, r2, r1
 8025260:	6022      	streq	r2, [r4, #0]
 8025262:	602c      	str	r4, [r5, #0]
 8025264:	e7ec      	b.n	8025240 <_free_r+0x28>
 8025266:	461a      	mov	r2, r3
 8025268:	685b      	ldr	r3, [r3, #4]
 802526a:	b10b      	cbz	r3, 8025270 <_free_r+0x58>
 802526c:	42a3      	cmp	r3, r4
 802526e:	d9fa      	bls.n	8025266 <_free_r+0x4e>
 8025270:	6811      	ldr	r1, [r2, #0]
 8025272:	1855      	adds	r5, r2, r1
 8025274:	42a5      	cmp	r5, r4
 8025276:	d10b      	bne.n	8025290 <_free_r+0x78>
 8025278:	6824      	ldr	r4, [r4, #0]
 802527a:	4421      	add	r1, r4
 802527c:	1854      	adds	r4, r2, r1
 802527e:	42a3      	cmp	r3, r4
 8025280:	6011      	str	r1, [r2, #0]
 8025282:	d1dd      	bne.n	8025240 <_free_r+0x28>
 8025284:	681c      	ldr	r4, [r3, #0]
 8025286:	685b      	ldr	r3, [r3, #4]
 8025288:	6053      	str	r3, [r2, #4]
 802528a:	4421      	add	r1, r4
 802528c:	6011      	str	r1, [r2, #0]
 802528e:	e7d7      	b.n	8025240 <_free_r+0x28>
 8025290:	d902      	bls.n	8025298 <_free_r+0x80>
 8025292:	230c      	movs	r3, #12
 8025294:	6003      	str	r3, [r0, #0]
 8025296:	e7d3      	b.n	8025240 <_free_r+0x28>
 8025298:	6825      	ldr	r5, [r4, #0]
 802529a:	1961      	adds	r1, r4, r5
 802529c:	428b      	cmp	r3, r1
 802529e:	bf04      	itt	eq
 80252a0:	6819      	ldreq	r1, [r3, #0]
 80252a2:	685b      	ldreq	r3, [r3, #4]
 80252a4:	6063      	str	r3, [r4, #4]
 80252a6:	bf04      	itt	eq
 80252a8:	1949      	addeq	r1, r1, r5
 80252aa:	6021      	streq	r1, [r4, #0]
 80252ac:	6054      	str	r4, [r2, #4]
 80252ae:	e7c7      	b.n	8025240 <_free_r+0x28>
 80252b0:	b003      	add	sp, #12
 80252b2:	bd30      	pop	{r4, r5, pc}
 80252b4:	2000a160 	.word	0x2000a160

080252b8 <_malloc_r>:
 80252b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80252ba:	1ccd      	adds	r5, r1, #3
 80252bc:	f025 0503 	bic.w	r5, r5, #3
 80252c0:	3508      	adds	r5, #8
 80252c2:	2d0c      	cmp	r5, #12
 80252c4:	bf38      	it	cc
 80252c6:	250c      	movcc	r5, #12
 80252c8:	2d00      	cmp	r5, #0
 80252ca:	4606      	mov	r6, r0
 80252cc:	db01      	blt.n	80252d2 <_malloc_r+0x1a>
 80252ce:	42a9      	cmp	r1, r5
 80252d0:	d903      	bls.n	80252da <_malloc_r+0x22>
 80252d2:	230c      	movs	r3, #12
 80252d4:	6033      	str	r3, [r6, #0]
 80252d6:	2000      	movs	r0, #0
 80252d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80252da:	f001 f911 	bl	8026500 <__malloc_lock>
 80252de:	4921      	ldr	r1, [pc, #132]	; (8025364 <_malloc_r+0xac>)
 80252e0:	680a      	ldr	r2, [r1, #0]
 80252e2:	4614      	mov	r4, r2
 80252e4:	b99c      	cbnz	r4, 802530e <_malloc_r+0x56>
 80252e6:	4f20      	ldr	r7, [pc, #128]	; (8025368 <_malloc_r+0xb0>)
 80252e8:	683b      	ldr	r3, [r7, #0]
 80252ea:	b923      	cbnz	r3, 80252f6 <_malloc_r+0x3e>
 80252ec:	4621      	mov	r1, r4
 80252ee:	4630      	mov	r0, r6
 80252f0:	f000 fb32 	bl	8025958 <_sbrk_r>
 80252f4:	6038      	str	r0, [r7, #0]
 80252f6:	4629      	mov	r1, r5
 80252f8:	4630      	mov	r0, r6
 80252fa:	f000 fb2d 	bl	8025958 <_sbrk_r>
 80252fe:	1c43      	adds	r3, r0, #1
 8025300:	d123      	bne.n	802534a <_malloc_r+0x92>
 8025302:	230c      	movs	r3, #12
 8025304:	6033      	str	r3, [r6, #0]
 8025306:	4630      	mov	r0, r6
 8025308:	f001 f900 	bl	802650c <__malloc_unlock>
 802530c:	e7e3      	b.n	80252d6 <_malloc_r+0x1e>
 802530e:	6823      	ldr	r3, [r4, #0]
 8025310:	1b5b      	subs	r3, r3, r5
 8025312:	d417      	bmi.n	8025344 <_malloc_r+0x8c>
 8025314:	2b0b      	cmp	r3, #11
 8025316:	d903      	bls.n	8025320 <_malloc_r+0x68>
 8025318:	6023      	str	r3, [r4, #0]
 802531a:	441c      	add	r4, r3
 802531c:	6025      	str	r5, [r4, #0]
 802531e:	e004      	b.n	802532a <_malloc_r+0x72>
 8025320:	6863      	ldr	r3, [r4, #4]
 8025322:	42a2      	cmp	r2, r4
 8025324:	bf0c      	ite	eq
 8025326:	600b      	streq	r3, [r1, #0]
 8025328:	6053      	strne	r3, [r2, #4]
 802532a:	4630      	mov	r0, r6
 802532c:	f001 f8ee 	bl	802650c <__malloc_unlock>
 8025330:	f104 000b 	add.w	r0, r4, #11
 8025334:	1d23      	adds	r3, r4, #4
 8025336:	f020 0007 	bic.w	r0, r0, #7
 802533a:	1ac2      	subs	r2, r0, r3
 802533c:	d0cc      	beq.n	80252d8 <_malloc_r+0x20>
 802533e:	1a1b      	subs	r3, r3, r0
 8025340:	50a3      	str	r3, [r4, r2]
 8025342:	e7c9      	b.n	80252d8 <_malloc_r+0x20>
 8025344:	4622      	mov	r2, r4
 8025346:	6864      	ldr	r4, [r4, #4]
 8025348:	e7cc      	b.n	80252e4 <_malloc_r+0x2c>
 802534a:	1cc4      	adds	r4, r0, #3
 802534c:	f024 0403 	bic.w	r4, r4, #3
 8025350:	42a0      	cmp	r0, r4
 8025352:	d0e3      	beq.n	802531c <_malloc_r+0x64>
 8025354:	1a21      	subs	r1, r4, r0
 8025356:	4630      	mov	r0, r6
 8025358:	f000 fafe 	bl	8025958 <_sbrk_r>
 802535c:	3001      	adds	r0, #1
 802535e:	d1dd      	bne.n	802531c <_malloc_r+0x64>
 8025360:	e7cf      	b.n	8025302 <_malloc_r+0x4a>
 8025362:	bf00      	nop
 8025364:	2000a160 	.word	0x2000a160
 8025368:	2000a164 	.word	0x2000a164

0802536c <__sfputc_r>:
 802536c:	6893      	ldr	r3, [r2, #8]
 802536e:	3b01      	subs	r3, #1
 8025370:	2b00      	cmp	r3, #0
 8025372:	b410      	push	{r4}
 8025374:	6093      	str	r3, [r2, #8]
 8025376:	da08      	bge.n	802538a <__sfputc_r+0x1e>
 8025378:	6994      	ldr	r4, [r2, #24]
 802537a:	42a3      	cmp	r3, r4
 802537c:	db01      	blt.n	8025382 <__sfputc_r+0x16>
 802537e:	290a      	cmp	r1, #10
 8025380:	d103      	bne.n	802538a <__sfputc_r+0x1e>
 8025382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025386:	f000 bd45 	b.w	8025e14 <__swbuf_r>
 802538a:	6813      	ldr	r3, [r2, #0]
 802538c:	1c58      	adds	r0, r3, #1
 802538e:	6010      	str	r0, [r2, #0]
 8025390:	7019      	strb	r1, [r3, #0]
 8025392:	4608      	mov	r0, r1
 8025394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025398:	4770      	bx	lr

0802539a <__sfputs_r>:
 802539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802539c:	4606      	mov	r6, r0
 802539e:	460f      	mov	r7, r1
 80253a0:	4614      	mov	r4, r2
 80253a2:	18d5      	adds	r5, r2, r3
 80253a4:	42ac      	cmp	r4, r5
 80253a6:	d101      	bne.n	80253ac <__sfputs_r+0x12>
 80253a8:	2000      	movs	r0, #0
 80253aa:	e007      	b.n	80253bc <__sfputs_r+0x22>
 80253ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80253b0:	463a      	mov	r2, r7
 80253b2:	4630      	mov	r0, r6
 80253b4:	f7ff ffda 	bl	802536c <__sfputc_r>
 80253b8:	1c43      	adds	r3, r0, #1
 80253ba:	d1f3      	bne.n	80253a4 <__sfputs_r+0xa>
 80253bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080253c0 <_vfiprintf_r>:
 80253c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253c4:	460d      	mov	r5, r1
 80253c6:	b09d      	sub	sp, #116	; 0x74
 80253c8:	4614      	mov	r4, r2
 80253ca:	4698      	mov	r8, r3
 80253cc:	4606      	mov	r6, r0
 80253ce:	b118      	cbz	r0, 80253d8 <_vfiprintf_r+0x18>
 80253d0:	6983      	ldr	r3, [r0, #24]
 80253d2:	b90b      	cbnz	r3, 80253d8 <_vfiprintf_r+0x18>
 80253d4:	f000 ff7c 	bl	80262d0 <__sinit>
 80253d8:	4b89      	ldr	r3, [pc, #548]	; (8025600 <_vfiprintf_r+0x240>)
 80253da:	429d      	cmp	r5, r3
 80253dc:	d11b      	bne.n	8025416 <_vfiprintf_r+0x56>
 80253de:	6875      	ldr	r5, [r6, #4]
 80253e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80253e2:	07d9      	lsls	r1, r3, #31
 80253e4:	d405      	bmi.n	80253f2 <_vfiprintf_r+0x32>
 80253e6:	89ab      	ldrh	r3, [r5, #12]
 80253e8:	059a      	lsls	r2, r3, #22
 80253ea:	d402      	bmi.n	80253f2 <_vfiprintf_r+0x32>
 80253ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80253ee:	f001 f80d 	bl	802640c <__retarget_lock_acquire_recursive>
 80253f2:	89ab      	ldrh	r3, [r5, #12]
 80253f4:	071b      	lsls	r3, r3, #28
 80253f6:	d501      	bpl.n	80253fc <_vfiprintf_r+0x3c>
 80253f8:	692b      	ldr	r3, [r5, #16]
 80253fa:	b9eb      	cbnz	r3, 8025438 <_vfiprintf_r+0x78>
 80253fc:	4629      	mov	r1, r5
 80253fe:	4630      	mov	r0, r6
 8025400:	f000 fd6c 	bl	8025edc <__swsetup_r>
 8025404:	b1c0      	cbz	r0, 8025438 <_vfiprintf_r+0x78>
 8025406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025408:	07dc      	lsls	r4, r3, #31
 802540a:	d50e      	bpl.n	802542a <_vfiprintf_r+0x6a>
 802540c:	f04f 30ff 	mov.w	r0, #4294967295
 8025410:	b01d      	add	sp, #116	; 0x74
 8025412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025416:	4b7b      	ldr	r3, [pc, #492]	; (8025604 <_vfiprintf_r+0x244>)
 8025418:	429d      	cmp	r5, r3
 802541a:	d101      	bne.n	8025420 <_vfiprintf_r+0x60>
 802541c:	68b5      	ldr	r5, [r6, #8]
 802541e:	e7df      	b.n	80253e0 <_vfiprintf_r+0x20>
 8025420:	4b79      	ldr	r3, [pc, #484]	; (8025608 <_vfiprintf_r+0x248>)
 8025422:	429d      	cmp	r5, r3
 8025424:	bf08      	it	eq
 8025426:	68f5      	ldreq	r5, [r6, #12]
 8025428:	e7da      	b.n	80253e0 <_vfiprintf_r+0x20>
 802542a:	89ab      	ldrh	r3, [r5, #12]
 802542c:	0598      	lsls	r0, r3, #22
 802542e:	d4ed      	bmi.n	802540c <_vfiprintf_r+0x4c>
 8025430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025432:	f000 ffed 	bl	8026410 <__retarget_lock_release_recursive>
 8025436:	e7e9      	b.n	802540c <_vfiprintf_r+0x4c>
 8025438:	2300      	movs	r3, #0
 802543a:	9309      	str	r3, [sp, #36]	; 0x24
 802543c:	2320      	movs	r3, #32
 802543e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025442:	f8cd 800c 	str.w	r8, [sp, #12]
 8025446:	2330      	movs	r3, #48	; 0x30
 8025448:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802560c <_vfiprintf_r+0x24c>
 802544c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025450:	f04f 0901 	mov.w	r9, #1
 8025454:	4623      	mov	r3, r4
 8025456:	469a      	mov	sl, r3
 8025458:	f813 2b01 	ldrb.w	r2, [r3], #1
 802545c:	b10a      	cbz	r2, 8025462 <_vfiprintf_r+0xa2>
 802545e:	2a25      	cmp	r2, #37	; 0x25
 8025460:	d1f9      	bne.n	8025456 <_vfiprintf_r+0x96>
 8025462:	ebba 0b04 	subs.w	fp, sl, r4
 8025466:	d00b      	beq.n	8025480 <_vfiprintf_r+0xc0>
 8025468:	465b      	mov	r3, fp
 802546a:	4622      	mov	r2, r4
 802546c:	4629      	mov	r1, r5
 802546e:	4630      	mov	r0, r6
 8025470:	f7ff ff93 	bl	802539a <__sfputs_r>
 8025474:	3001      	adds	r0, #1
 8025476:	f000 80aa 	beq.w	80255ce <_vfiprintf_r+0x20e>
 802547a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802547c:	445a      	add	r2, fp
 802547e:	9209      	str	r2, [sp, #36]	; 0x24
 8025480:	f89a 3000 	ldrb.w	r3, [sl]
 8025484:	2b00      	cmp	r3, #0
 8025486:	f000 80a2 	beq.w	80255ce <_vfiprintf_r+0x20e>
 802548a:	2300      	movs	r3, #0
 802548c:	f04f 32ff 	mov.w	r2, #4294967295
 8025490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025494:	f10a 0a01 	add.w	sl, sl, #1
 8025498:	9304      	str	r3, [sp, #16]
 802549a:	9307      	str	r3, [sp, #28]
 802549c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80254a0:	931a      	str	r3, [sp, #104]	; 0x68
 80254a2:	4654      	mov	r4, sl
 80254a4:	2205      	movs	r2, #5
 80254a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80254aa:	4858      	ldr	r0, [pc, #352]	; (802560c <_vfiprintf_r+0x24c>)
 80254ac:	f7da fea0 	bl	80001f0 <memchr>
 80254b0:	9a04      	ldr	r2, [sp, #16]
 80254b2:	b9d8      	cbnz	r0, 80254ec <_vfiprintf_r+0x12c>
 80254b4:	06d1      	lsls	r1, r2, #27
 80254b6:	bf44      	itt	mi
 80254b8:	2320      	movmi	r3, #32
 80254ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80254be:	0713      	lsls	r3, r2, #28
 80254c0:	bf44      	itt	mi
 80254c2:	232b      	movmi	r3, #43	; 0x2b
 80254c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80254c8:	f89a 3000 	ldrb.w	r3, [sl]
 80254cc:	2b2a      	cmp	r3, #42	; 0x2a
 80254ce:	d015      	beq.n	80254fc <_vfiprintf_r+0x13c>
 80254d0:	9a07      	ldr	r2, [sp, #28]
 80254d2:	4654      	mov	r4, sl
 80254d4:	2000      	movs	r0, #0
 80254d6:	f04f 0c0a 	mov.w	ip, #10
 80254da:	4621      	mov	r1, r4
 80254dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80254e0:	3b30      	subs	r3, #48	; 0x30
 80254e2:	2b09      	cmp	r3, #9
 80254e4:	d94e      	bls.n	8025584 <_vfiprintf_r+0x1c4>
 80254e6:	b1b0      	cbz	r0, 8025516 <_vfiprintf_r+0x156>
 80254e8:	9207      	str	r2, [sp, #28]
 80254ea:	e014      	b.n	8025516 <_vfiprintf_r+0x156>
 80254ec:	eba0 0308 	sub.w	r3, r0, r8
 80254f0:	fa09 f303 	lsl.w	r3, r9, r3
 80254f4:	4313      	orrs	r3, r2
 80254f6:	9304      	str	r3, [sp, #16]
 80254f8:	46a2      	mov	sl, r4
 80254fa:	e7d2      	b.n	80254a2 <_vfiprintf_r+0xe2>
 80254fc:	9b03      	ldr	r3, [sp, #12]
 80254fe:	1d19      	adds	r1, r3, #4
 8025500:	681b      	ldr	r3, [r3, #0]
 8025502:	9103      	str	r1, [sp, #12]
 8025504:	2b00      	cmp	r3, #0
 8025506:	bfbb      	ittet	lt
 8025508:	425b      	neglt	r3, r3
 802550a:	f042 0202 	orrlt.w	r2, r2, #2
 802550e:	9307      	strge	r3, [sp, #28]
 8025510:	9307      	strlt	r3, [sp, #28]
 8025512:	bfb8      	it	lt
 8025514:	9204      	strlt	r2, [sp, #16]
 8025516:	7823      	ldrb	r3, [r4, #0]
 8025518:	2b2e      	cmp	r3, #46	; 0x2e
 802551a:	d10c      	bne.n	8025536 <_vfiprintf_r+0x176>
 802551c:	7863      	ldrb	r3, [r4, #1]
 802551e:	2b2a      	cmp	r3, #42	; 0x2a
 8025520:	d135      	bne.n	802558e <_vfiprintf_r+0x1ce>
 8025522:	9b03      	ldr	r3, [sp, #12]
 8025524:	1d1a      	adds	r2, r3, #4
 8025526:	681b      	ldr	r3, [r3, #0]
 8025528:	9203      	str	r2, [sp, #12]
 802552a:	2b00      	cmp	r3, #0
 802552c:	bfb8      	it	lt
 802552e:	f04f 33ff 	movlt.w	r3, #4294967295
 8025532:	3402      	adds	r4, #2
 8025534:	9305      	str	r3, [sp, #20]
 8025536:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802561c <_vfiprintf_r+0x25c>
 802553a:	7821      	ldrb	r1, [r4, #0]
 802553c:	2203      	movs	r2, #3
 802553e:	4650      	mov	r0, sl
 8025540:	f7da fe56 	bl	80001f0 <memchr>
 8025544:	b140      	cbz	r0, 8025558 <_vfiprintf_r+0x198>
 8025546:	2340      	movs	r3, #64	; 0x40
 8025548:	eba0 000a 	sub.w	r0, r0, sl
 802554c:	fa03 f000 	lsl.w	r0, r3, r0
 8025550:	9b04      	ldr	r3, [sp, #16]
 8025552:	4303      	orrs	r3, r0
 8025554:	3401      	adds	r4, #1
 8025556:	9304      	str	r3, [sp, #16]
 8025558:	f814 1b01 	ldrb.w	r1, [r4], #1
 802555c:	482c      	ldr	r0, [pc, #176]	; (8025610 <_vfiprintf_r+0x250>)
 802555e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025562:	2206      	movs	r2, #6
 8025564:	f7da fe44 	bl	80001f0 <memchr>
 8025568:	2800      	cmp	r0, #0
 802556a:	d03f      	beq.n	80255ec <_vfiprintf_r+0x22c>
 802556c:	4b29      	ldr	r3, [pc, #164]	; (8025614 <_vfiprintf_r+0x254>)
 802556e:	bb1b      	cbnz	r3, 80255b8 <_vfiprintf_r+0x1f8>
 8025570:	9b03      	ldr	r3, [sp, #12]
 8025572:	3307      	adds	r3, #7
 8025574:	f023 0307 	bic.w	r3, r3, #7
 8025578:	3308      	adds	r3, #8
 802557a:	9303      	str	r3, [sp, #12]
 802557c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802557e:	443b      	add	r3, r7
 8025580:	9309      	str	r3, [sp, #36]	; 0x24
 8025582:	e767      	b.n	8025454 <_vfiprintf_r+0x94>
 8025584:	fb0c 3202 	mla	r2, ip, r2, r3
 8025588:	460c      	mov	r4, r1
 802558a:	2001      	movs	r0, #1
 802558c:	e7a5      	b.n	80254da <_vfiprintf_r+0x11a>
 802558e:	2300      	movs	r3, #0
 8025590:	3401      	adds	r4, #1
 8025592:	9305      	str	r3, [sp, #20]
 8025594:	4619      	mov	r1, r3
 8025596:	f04f 0c0a 	mov.w	ip, #10
 802559a:	4620      	mov	r0, r4
 802559c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80255a0:	3a30      	subs	r2, #48	; 0x30
 80255a2:	2a09      	cmp	r2, #9
 80255a4:	d903      	bls.n	80255ae <_vfiprintf_r+0x1ee>
 80255a6:	2b00      	cmp	r3, #0
 80255a8:	d0c5      	beq.n	8025536 <_vfiprintf_r+0x176>
 80255aa:	9105      	str	r1, [sp, #20]
 80255ac:	e7c3      	b.n	8025536 <_vfiprintf_r+0x176>
 80255ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80255b2:	4604      	mov	r4, r0
 80255b4:	2301      	movs	r3, #1
 80255b6:	e7f0      	b.n	802559a <_vfiprintf_r+0x1da>
 80255b8:	ab03      	add	r3, sp, #12
 80255ba:	9300      	str	r3, [sp, #0]
 80255bc:	462a      	mov	r2, r5
 80255be:	4b16      	ldr	r3, [pc, #88]	; (8025618 <_vfiprintf_r+0x258>)
 80255c0:	a904      	add	r1, sp, #16
 80255c2:	4630      	mov	r0, r6
 80255c4:	f3af 8000 	nop.w
 80255c8:	4607      	mov	r7, r0
 80255ca:	1c78      	adds	r0, r7, #1
 80255cc:	d1d6      	bne.n	802557c <_vfiprintf_r+0x1bc>
 80255ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80255d0:	07d9      	lsls	r1, r3, #31
 80255d2:	d405      	bmi.n	80255e0 <_vfiprintf_r+0x220>
 80255d4:	89ab      	ldrh	r3, [r5, #12]
 80255d6:	059a      	lsls	r2, r3, #22
 80255d8:	d402      	bmi.n	80255e0 <_vfiprintf_r+0x220>
 80255da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80255dc:	f000 ff18 	bl	8026410 <__retarget_lock_release_recursive>
 80255e0:	89ab      	ldrh	r3, [r5, #12]
 80255e2:	065b      	lsls	r3, r3, #25
 80255e4:	f53f af12 	bmi.w	802540c <_vfiprintf_r+0x4c>
 80255e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80255ea:	e711      	b.n	8025410 <_vfiprintf_r+0x50>
 80255ec:	ab03      	add	r3, sp, #12
 80255ee:	9300      	str	r3, [sp, #0]
 80255f0:	462a      	mov	r2, r5
 80255f2:	4b09      	ldr	r3, [pc, #36]	; (8025618 <_vfiprintf_r+0x258>)
 80255f4:	a904      	add	r1, sp, #16
 80255f6:	4630      	mov	r0, r6
 80255f8:	f000 f880 	bl	80256fc <_printf_i>
 80255fc:	e7e4      	b.n	80255c8 <_vfiprintf_r+0x208>
 80255fe:	bf00      	nop
 8025600:	0802b674 	.word	0x0802b674
 8025604:	0802b694 	.word	0x0802b694
 8025608:	0802b654 	.word	0x0802b654
 802560c:	0802b5a4 	.word	0x0802b5a4
 8025610:	0802b5ae 	.word	0x0802b5ae
 8025614:	00000000 	.word	0x00000000
 8025618:	0802539b 	.word	0x0802539b
 802561c:	0802b5aa 	.word	0x0802b5aa

08025620 <_printf_common>:
 8025620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025624:	4616      	mov	r6, r2
 8025626:	4699      	mov	r9, r3
 8025628:	688a      	ldr	r2, [r1, #8]
 802562a:	690b      	ldr	r3, [r1, #16]
 802562c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025630:	4293      	cmp	r3, r2
 8025632:	bfb8      	it	lt
 8025634:	4613      	movlt	r3, r2
 8025636:	6033      	str	r3, [r6, #0]
 8025638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802563c:	4607      	mov	r7, r0
 802563e:	460c      	mov	r4, r1
 8025640:	b10a      	cbz	r2, 8025646 <_printf_common+0x26>
 8025642:	3301      	adds	r3, #1
 8025644:	6033      	str	r3, [r6, #0]
 8025646:	6823      	ldr	r3, [r4, #0]
 8025648:	0699      	lsls	r1, r3, #26
 802564a:	bf42      	ittt	mi
 802564c:	6833      	ldrmi	r3, [r6, #0]
 802564e:	3302      	addmi	r3, #2
 8025650:	6033      	strmi	r3, [r6, #0]
 8025652:	6825      	ldr	r5, [r4, #0]
 8025654:	f015 0506 	ands.w	r5, r5, #6
 8025658:	d106      	bne.n	8025668 <_printf_common+0x48>
 802565a:	f104 0a19 	add.w	sl, r4, #25
 802565e:	68e3      	ldr	r3, [r4, #12]
 8025660:	6832      	ldr	r2, [r6, #0]
 8025662:	1a9b      	subs	r3, r3, r2
 8025664:	42ab      	cmp	r3, r5
 8025666:	dc26      	bgt.n	80256b6 <_printf_common+0x96>
 8025668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802566c:	1e13      	subs	r3, r2, #0
 802566e:	6822      	ldr	r2, [r4, #0]
 8025670:	bf18      	it	ne
 8025672:	2301      	movne	r3, #1
 8025674:	0692      	lsls	r2, r2, #26
 8025676:	d42b      	bmi.n	80256d0 <_printf_common+0xb0>
 8025678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802567c:	4649      	mov	r1, r9
 802567e:	4638      	mov	r0, r7
 8025680:	47c0      	blx	r8
 8025682:	3001      	adds	r0, #1
 8025684:	d01e      	beq.n	80256c4 <_printf_common+0xa4>
 8025686:	6823      	ldr	r3, [r4, #0]
 8025688:	68e5      	ldr	r5, [r4, #12]
 802568a:	6832      	ldr	r2, [r6, #0]
 802568c:	f003 0306 	and.w	r3, r3, #6
 8025690:	2b04      	cmp	r3, #4
 8025692:	bf08      	it	eq
 8025694:	1aad      	subeq	r5, r5, r2
 8025696:	68a3      	ldr	r3, [r4, #8]
 8025698:	6922      	ldr	r2, [r4, #16]
 802569a:	bf0c      	ite	eq
 802569c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80256a0:	2500      	movne	r5, #0
 80256a2:	4293      	cmp	r3, r2
 80256a4:	bfc4      	itt	gt
 80256a6:	1a9b      	subgt	r3, r3, r2
 80256a8:	18ed      	addgt	r5, r5, r3
 80256aa:	2600      	movs	r6, #0
 80256ac:	341a      	adds	r4, #26
 80256ae:	42b5      	cmp	r5, r6
 80256b0:	d11a      	bne.n	80256e8 <_printf_common+0xc8>
 80256b2:	2000      	movs	r0, #0
 80256b4:	e008      	b.n	80256c8 <_printf_common+0xa8>
 80256b6:	2301      	movs	r3, #1
 80256b8:	4652      	mov	r2, sl
 80256ba:	4649      	mov	r1, r9
 80256bc:	4638      	mov	r0, r7
 80256be:	47c0      	blx	r8
 80256c0:	3001      	adds	r0, #1
 80256c2:	d103      	bne.n	80256cc <_printf_common+0xac>
 80256c4:	f04f 30ff 	mov.w	r0, #4294967295
 80256c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80256cc:	3501      	adds	r5, #1
 80256ce:	e7c6      	b.n	802565e <_printf_common+0x3e>
 80256d0:	18e1      	adds	r1, r4, r3
 80256d2:	1c5a      	adds	r2, r3, #1
 80256d4:	2030      	movs	r0, #48	; 0x30
 80256d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80256da:	4422      	add	r2, r4
 80256dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80256e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80256e4:	3302      	adds	r3, #2
 80256e6:	e7c7      	b.n	8025678 <_printf_common+0x58>
 80256e8:	2301      	movs	r3, #1
 80256ea:	4622      	mov	r2, r4
 80256ec:	4649      	mov	r1, r9
 80256ee:	4638      	mov	r0, r7
 80256f0:	47c0      	blx	r8
 80256f2:	3001      	adds	r0, #1
 80256f4:	d0e6      	beq.n	80256c4 <_printf_common+0xa4>
 80256f6:	3601      	adds	r6, #1
 80256f8:	e7d9      	b.n	80256ae <_printf_common+0x8e>
	...

080256fc <_printf_i>:
 80256fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025700:	460c      	mov	r4, r1
 8025702:	4691      	mov	r9, r2
 8025704:	7e27      	ldrb	r7, [r4, #24]
 8025706:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025708:	2f78      	cmp	r7, #120	; 0x78
 802570a:	4680      	mov	r8, r0
 802570c:	469a      	mov	sl, r3
 802570e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025712:	d807      	bhi.n	8025724 <_printf_i+0x28>
 8025714:	2f62      	cmp	r7, #98	; 0x62
 8025716:	d80a      	bhi.n	802572e <_printf_i+0x32>
 8025718:	2f00      	cmp	r7, #0
 802571a:	f000 80d8 	beq.w	80258ce <_printf_i+0x1d2>
 802571e:	2f58      	cmp	r7, #88	; 0x58
 8025720:	f000 80a3 	beq.w	802586a <_printf_i+0x16e>
 8025724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802572c:	e03a      	b.n	80257a4 <_printf_i+0xa8>
 802572e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025732:	2b15      	cmp	r3, #21
 8025734:	d8f6      	bhi.n	8025724 <_printf_i+0x28>
 8025736:	a001      	add	r0, pc, #4	; (adr r0, 802573c <_printf_i+0x40>)
 8025738:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802573c:	08025795 	.word	0x08025795
 8025740:	080257a9 	.word	0x080257a9
 8025744:	08025725 	.word	0x08025725
 8025748:	08025725 	.word	0x08025725
 802574c:	08025725 	.word	0x08025725
 8025750:	08025725 	.word	0x08025725
 8025754:	080257a9 	.word	0x080257a9
 8025758:	08025725 	.word	0x08025725
 802575c:	08025725 	.word	0x08025725
 8025760:	08025725 	.word	0x08025725
 8025764:	08025725 	.word	0x08025725
 8025768:	080258b5 	.word	0x080258b5
 802576c:	080257d9 	.word	0x080257d9
 8025770:	08025897 	.word	0x08025897
 8025774:	08025725 	.word	0x08025725
 8025778:	08025725 	.word	0x08025725
 802577c:	080258d7 	.word	0x080258d7
 8025780:	08025725 	.word	0x08025725
 8025784:	080257d9 	.word	0x080257d9
 8025788:	08025725 	.word	0x08025725
 802578c:	08025725 	.word	0x08025725
 8025790:	0802589f 	.word	0x0802589f
 8025794:	680b      	ldr	r3, [r1, #0]
 8025796:	1d1a      	adds	r2, r3, #4
 8025798:	681b      	ldr	r3, [r3, #0]
 802579a:	600a      	str	r2, [r1, #0]
 802579c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80257a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80257a4:	2301      	movs	r3, #1
 80257a6:	e0a3      	b.n	80258f0 <_printf_i+0x1f4>
 80257a8:	6825      	ldr	r5, [r4, #0]
 80257aa:	6808      	ldr	r0, [r1, #0]
 80257ac:	062e      	lsls	r6, r5, #24
 80257ae:	f100 0304 	add.w	r3, r0, #4
 80257b2:	d50a      	bpl.n	80257ca <_printf_i+0xce>
 80257b4:	6805      	ldr	r5, [r0, #0]
 80257b6:	600b      	str	r3, [r1, #0]
 80257b8:	2d00      	cmp	r5, #0
 80257ba:	da03      	bge.n	80257c4 <_printf_i+0xc8>
 80257bc:	232d      	movs	r3, #45	; 0x2d
 80257be:	426d      	negs	r5, r5
 80257c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80257c4:	485e      	ldr	r0, [pc, #376]	; (8025940 <_printf_i+0x244>)
 80257c6:	230a      	movs	r3, #10
 80257c8:	e019      	b.n	80257fe <_printf_i+0x102>
 80257ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80257ce:	6805      	ldr	r5, [r0, #0]
 80257d0:	600b      	str	r3, [r1, #0]
 80257d2:	bf18      	it	ne
 80257d4:	b22d      	sxthne	r5, r5
 80257d6:	e7ef      	b.n	80257b8 <_printf_i+0xbc>
 80257d8:	680b      	ldr	r3, [r1, #0]
 80257da:	6825      	ldr	r5, [r4, #0]
 80257dc:	1d18      	adds	r0, r3, #4
 80257de:	6008      	str	r0, [r1, #0]
 80257e0:	0628      	lsls	r0, r5, #24
 80257e2:	d501      	bpl.n	80257e8 <_printf_i+0xec>
 80257e4:	681d      	ldr	r5, [r3, #0]
 80257e6:	e002      	b.n	80257ee <_printf_i+0xf2>
 80257e8:	0669      	lsls	r1, r5, #25
 80257ea:	d5fb      	bpl.n	80257e4 <_printf_i+0xe8>
 80257ec:	881d      	ldrh	r5, [r3, #0]
 80257ee:	4854      	ldr	r0, [pc, #336]	; (8025940 <_printf_i+0x244>)
 80257f0:	2f6f      	cmp	r7, #111	; 0x6f
 80257f2:	bf0c      	ite	eq
 80257f4:	2308      	moveq	r3, #8
 80257f6:	230a      	movne	r3, #10
 80257f8:	2100      	movs	r1, #0
 80257fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80257fe:	6866      	ldr	r6, [r4, #4]
 8025800:	60a6      	str	r6, [r4, #8]
 8025802:	2e00      	cmp	r6, #0
 8025804:	bfa2      	ittt	ge
 8025806:	6821      	ldrge	r1, [r4, #0]
 8025808:	f021 0104 	bicge.w	r1, r1, #4
 802580c:	6021      	strge	r1, [r4, #0]
 802580e:	b90d      	cbnz	r5, 8025814 <_printf_i+0x118>
 8025810:	2e00      	cmp	r6, #0
 8025812:	d04d      	beq.n	80258b0 <_printf_i+0x1b4>
 8025814:	4616      	mov	r6, r2
 8025816:	fbb5 f1f3 	udiv	r1, r5, r3
 802581a:	fb03 5711 	mls	r7, r3, r1, r5
 802581e:	5dc7      	ldrb	r7, [r0, r7]
 8025820:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025824:	462f      	mov	r7, r5
 8025826:	42bb      	cmp	r3, r7
 8025828:	460d      	mov	r5, r1
 802582a:	d9f4      	bls.n	8025816 <_printf_i+0x11a>
 802582c:	2b08      	cmp	r3, #8
 802582e:	d10b      	bne.n	8025848 <_printf_i+0x14c>
 8025830:	6823      	ldr	r3, [r4, #0]
 8025832:	07df      	lsls	r7, r3, #31
 8025834:	d508      	bpl.n	8025848 <_printf_i+0x14c>
 8025836:	6923      	ldr	r3, [r4, #16]
 8025838:	6861      	ldr	r1, [r4, #4]
 802583a:	4299      	cmp	r1, r3
 802583c:	bfde      	ittt	le
 802583e:	2330      	movle	r3, #48	; 0x30
 8025840:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025844:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025848:	1b92      	subs	r2, r2, r6
 802584a:	6122      	str	r2, [r4, #16]
 802584c:	f8cd a000 	str.w	sl, [sp]
 8025850:	464b      	mov	r3, r9
 8025852:	aa03      	add	r2, sp, #12
 8025854:	4621      	mov	r1, r4
 8025856:	4640      	mov	r0, r8
 8025858:	f7ff fee2 	bl	8025620 <_printf_common>
 802585c:	3001      	adds	r0, #1
 802585e:	d14c      	bne.n	80258fa <_printf_i+0x1fe>
 8025860:	f04f 30ff 	mov.w	r0, #4294967295
 8025864:	b004      	add	sp, #16
 8025866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802586a:	4835      	ldr	r0, [pc, #212]	; (8025940 <_printf_i+0x244>)
 802586c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025870:	6823      	ldr	r3, [r4, #0]
 8025872:	680e      	ldr	r6, [r1, #0]
 8025874:	061f      	lsls	r7, r3, #24
 8025876:	f856 5b04 	ldr.w	r5, [r6], #4
 802587a:	600e      	str	r6, [r1, #0]
 802587c:	d514      	bpl.n	80258a8 <_printf_i+0x1ac>
 802587e:	07d9      	lsls	r1, r3, #31
 8025880:	bf44      	itt	mi
 8025882:	f043 0320 	orrmi.w	r3, r3, #32
 8025886:	6023      	strmi	r3, [r4, #0]
 8025888:	b91d      	cbnz	r5, 8025892 <_printf_i+0x196>
 802588a:	6823      	ldr	r3, [r4, #0]
 802588c:	f023 0320 	bic.w	r3, r3, #32
 8025890:	6023      	str	r3, [r4, #0]
 8025892:	2310      	movs	r3, #16
 8025894:	e7b0      	b.n	80257f8 <_printf_i+0xfc>
 8025896:	6823      	ldr	r3, [r4, #0]
 8025898:	f043 0320 	orr.w	r3, r3, #32
 802589c:	6023      	str	r3, [r4, #0]
 802589e:	2378      	movs	r3, #120	; 0x78
 80258a0:	4828      	ldr	r0, [pc, #160]	; (8025944 <_printf_i+0x248>)
 80258a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80258a6:	e7e3      	b.n	8025870 <_printf_i+0x174>
 80258a8:	065e      	lsls	r6, r3, #25
 80258aa:	bf48      	it	mi
 80258ac:	b2ad      	uxthmi	r5, r5
 80258ae:	e7e6      	b.n	802587e <_printf_i+0x182>
 80258b0:	4616      	mov	r6, r2
 80258b2:	e7bb      	b.n	802582c <_printf_i+0x130>
 80258b4:	680b      	ldr	r3, [r1, #0]
 80258b6:	6826      	ldr	r6, [r4, #0]
 80258b8:	6960      	ldr	r0, [r4, #20]
 80258ba:	1d1d      	adds	r5, r3, #4
 80258bc:	600d      	str	r5, [r1, #0]
 80258be:	0635      	lsls	r5, r6, #24
 80258c0:	681b      	ldr	r3, [r3, #0]
 80258c2:	d501      	bpl.n	80258c8 <_printf_i+0x1cc>
 80258c4:	6018      	str	r0, [r3, #0]
 80258c6:	e002      	b.n	80258ce <_printf_i+0x1d2>
 80258c8:	0671      	lsls	r1, r6, #25
 80258ca:	d5fb      	bpl.n	80258c4 <_printf_i+0x1c8>
 80258cc:	8018      	strh	r0, [r3, #0]
 80258ce:	2300      	movs	r3, #0
 80258d0:	6123      	str	r3, [r4, #16]
 80258d2:	4616      	mov	r6, r2
 80258d4:	e7ba      	b.n	802584c <_printf_i+0x150>
 80258d6:	680b      	ldr	r3, [r1, #0]
 80258d8:	1d1a      	adds	r2, r3, #4
 80258da:	600a      	str	r2, [r1, #0]
 80258dc:	681e      	ldr	r6, [r3, #0]
 80258de:	6862      	ldr	r2, [r4, #4]
 80258e0:	2100      	movs	r1, #0
 80258e2:	4630      	mov	r0, r6
 80258e4:	f7da fc84 	bl	80001f0 <memchr>
 80258e8:	b108      	cbz	r0, 80258ee <_printf_i+0x1f2>
 80258ea:	1b80      	subs	r0, r0, r6
 80258ec:	6060      	str	r0, [r4, #4]
 80258ee:	6863      	ldr	r3, [r4, #4]
 80258f0:	6123      	str	r3, [r4, #16]
 80258f2:	2300      	movs	r3, #0
 80258f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80258f8:	e7a8      	b.n	802584c <_printf_i+0x150>
 80258fa:	6923      	ldr	r3, [r4, #16]
 80258fc:	4632      	mov	r2, r6
 80258fe:	4649      	mov	r1, r9
 8025900:	4640      	mov	r0, r8
 8025902:	47d0      	blx	sl
 8025904:	3001      	adds	r0, #1
 8025906:	d0ab      	beq.n	8025860 <_printf_i+0x164>
 8025908:	6823      	ldr	r3, [r4, #0]
 802590a:	079b      	lsls	r3, r3, #30
 802590c:	d413      	bmi.n	8025936 <_printf_i+0x23a>
 802590e:	68e0      	ldr	r0, [r4, #12]
 8025910:	9b03      	ldr	r3, [sp, #12]
 8025912:	4298      	cmp	r0, r3
 8025914:	bfb8      	it	lt
 8025916:	4618      	movlt	r0, r3
 8025918:	e7a4      	b.n	8025864 <_printf_i+0x168>
 802591a:	2301      	movs	r3, #1
 802591c:	4632      	mov	r2, r6
 802591e:	4649      	mov	r1, r9
 8025920:	4640      	mov	r0, r8
 8025922:	47d0      	blx	sl
 8025924:	3001      	adds	r0, #1
 8025926:	d09b      	beq.n	8025860 <_printf_i+0x164>
 8025928:	3501      	adds	r5, #1
 802592a:	68e3      	ldr	r3, [r4, #12]
 802592c:	9903      	ldr	r1, [sp, #12]
 802592e:	1a5b      	subs	r3, r3, r1
 8025930:	42ab      	cmp	r3, r5
 8025932:	dcf2      	bgt.n	802591a <_printf_i+0x21e>
 8025934:	e7eb      	b.n	802590e <_printf_i+0x212>
 8025936:	2500      	movs	r5, #0
 8025938:	f104 0619 	add.w	r6, r4, #25
 802593c:	e7f5      	b.n	802592a <_printf_i+0x22e>
 802593e:	bf00      	nop
 8025940:	0802b5b5 	.word	0x0802b5b5
 8025944:	0802b5c6 	.word	0x0802b5c6

08025948 <realloc>:
 8025948:	4b02      	ldr	r3, [pc, #8]	; (8025954 <realloc+0xc>)
 802594a:	460a      	mov	r2, r1
 802594c:	4601      	mov	r1, r0
 802594e:	6818      	ldr	r0, [r3, #0]
 8025950:	f000 bde2 	b.w	8026518 <_realloc_r>
 8025954:	20000118 	.word	0x20000118

08025958 <_sbrk_r>:
 8025958:	b538      	push	{r3, r4, r5, lr}
 802595a:	4d06      	ldr	r5, [pc, #24]	; (8025974 <_sbrk_r+0x1c>)
 802595c:	2300      	movs	r3, #0
 802595e:	4604      	mov	r4, r0
 8025960:	4608      	mov	r0, r1
 8025962:	602b      	str	r3, [r5, #0]
 8025964:	f7de fdda 	bl	800451c <_sbrk>
 8025968:	1c43      	adds	r3, r0, #1
 802596a:	d102      	bne.n	8025972 <_sbrk_r+0x1a>
 802596c:	682b      	ldr	r3, [r5, #0]
 802596e:	b103      	cbz	r3, 8025972 <_sbrk_r+0x1a>
 8025970:	6023      	str	r3, [r4, #0]
 8025972:	bd38      	pop	{r3, r4, r5, pc}
 8025974:	2000b2c4 	.word	0x2000b2c4

08025978 <_raise_r>:
 8025978:	291f      	cmp	r1, #31
 802597a:	b538      	push	{r3, r4, r5, lr}
 802597c:	4604      	mov	r4, r0
 802597e:	460d      	mov	r5, r1
 8025980:	d904      	bls.n	802598c <_raise_r+0x14>
 8025982:	2316      	movs	r3, #22
 8025984:	6003      	str	r3, [r0, #0]
 8025986:	f04f 30ff 	mov.w	r0, #4294967295
 802598a:	bd38      	pop	{r3, r4, r5, pc}
 802598c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802598e:	b112      	cbz	r2, 8025996 <_raise_r+0x1e>
 8025990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025994:	b94b      	cbnz	r3, 80259aa <_raise_r+0x32>
 8025996:	4620      	mov	r0, r4
 8025998:	f000 f830 	bl	80259fc <_getpid_r>
 802599c:	462a      	mov	r2, r5
 802599e:	4601      	mov	r1, r0
 80259a0:	4620      	mov	r0, r4
 80259a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80259a6:	f000 b817 	b.w	80259d8 <_kill_r>
 80259aa:	2b01      	cmp	r3, #1
 80259ac:	d00a      	beq.n	80259c4 <_raise_r+0x4c>
 80259ae:	1c59      	adds	r1, r3, #1
 80259b0:	d103      	bne.n	80259ba <_raise_r+0x42>
 80259b2:	2316      	movs	r3, #22
 80259b4:	6003      	str	r3, [r0, #0]
 80259b6:	2001      	movs	r0, #1
 80259b8:	e7e7      	b.n	802598a <_raise_r+0x12>
 80259ba:	2400      	movs	r4, #0
 80259bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80259c0:	4628      	mov	r0, r5
 80259c2:	4798      	blx	r3
 80259c4:	2000      	movs	r0, #0
 80259c6:	e7e0      	b.n	802598a <_raise_r+0x12>

080259c8 <raise>:
 80259c8:	4b02      	ldr	r3, [pc, #8]	; (80259d4 <raise+0xc>)
 80259ca:	4601      	mov	r1, r0
 80259cc:	6818      	ldr	r0, [r3, #0]
 80259ce:	f7ff bfd3 	b.w	8025978 <_raise_r>
 80259d2:	bf00      	nop
 80259d4:	20000118 	.word	0x20000118

080259d8 <_kill_r>:
 80259d8:	b538      	push	{r3, r4, r5, lr}
 80259da:	4d07      	ldr	r5, [pc, #28]	; (80259f8 <_kill_r+0x20>)
 80259dc:	2300      	movs	r3, #0
 80259de:	4604      	mov	r4, r0
 80259e0:	4608      	mov	r0, r1
 80259e2:	4611      	mov	r1, r2
 80259e4:	602b      	str	r3, [r5, #0]
 80259e6:	f7de fd11 	bl	800440c <_kill>
 80259ea:	1c43      	adds	r3, r0, #1
 80259ec:	d102      	bne.n	80259f4 <_kill_r+0x1c>
 80259ee:	682b      	ldr	r3, [r5, #0]
 80259f0:	b103      	cbz	r3, 80259f4 <_kill_r+0x1c>
 80259f2:	6023      	str	r3, [r4, #0]
 80259f4:	bd38      	pop	{r3, r4, r5, pc}
 80259f6:	bf00      	nop
 80259f8:	2000b2c4 	.word	0x2000b2c4

080259fc <_getpid_r>:
 80259fc:	f7de bcfe 	b.w	80043fc <_getpid>

08025a00 <sniprintf>:
 8025a00:	b40c      	push	{r2, r3}
 8025a02:	b530      	push	{r4, r5, lr}
 8025a04:	4b17      	ldr	r3, [pc, #92]	; (8025a64 <sniprintf+0x64>)
 8025a06:	1e0c      	subs	r4, r1, #0
 8025a08:	681d      	ldr	r5, [r3, #0]
 8025a0a:	b09d      	sub	sp, #116	; 0x74
 8025a0c:	da08      	bge.n	8025a20 <sniprintf+0x20>
 8025a0e:	238b      	movs	r3, #139	; 0x8b
 8025a10:	602b      	str	r3, [r5, #0]
 8025a12:	f04f 30ff 	mov.w	r0, #4294967295
 8025a16:	b01d      	add	sp, #116	; 0x74
 8025a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025a1c:	b002      	add	sp, #8
 8025a1e:	4770      	bx	lr
 8025a20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8025a24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025a28:	bf14      	ite	ne
 8025a2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8025a2e:	4623      	moveq	r3, r4
 8025a30:	9304      	str	r3, [sp, #16]
 8025a32:	9307      	str	r3, [sp, #28]
 8025a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025a38:	9002      	str	r0, [sp, #8]
 8025a3a:	9006      	str	r0, [sp, #24]
 8025a3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025a40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025a42:	ab21      	add	r3, sp, #132	; 0x84
 8025a44:	a902      	add	r1, sp, #8
 8025a46:	4628      	mov	r0, r5
 8025a48:	9301      	str	r3, [sp, #4]
 8025a4a:	f000 fde7 	bl	802661c <_svfiprintf_r>
 8025a4e:	1c43      	adds	r3, r0, #1
 8025a50:	bfbc      	itt	lt
 8025a52:	238b      	movlt	r3, #139	; 0x8b
 8025a54:	602b      	strlt	r3, [r5, #0]
 8025a56:	2c00      	cmp	r4, #0
 8025a58:	d0dd      	beq.n	8025a16 <sniprintf+0x16>
 8025a5a:	9b02      	ldr	r3, [sp, #8]
 8025a5c:	2200      	movs	r2, #0
 8025a5e:	701a      	strb	r2, [r3, #0]
 8025a60:	e7d9      	b.n	8025a16 <sniprintf+0x16>
 8025a62:	bf00      	nop
 8025a64:	20000118 	.word	0x20000118

08025a68 <siprintf>:
 8025a68:	b40e      	push	{r1, r2, r3}
 8025a6a:	b500      	push	{lr}
 8025a6c:	b09c      	sub	sp, #112	; 0x70
 8025a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8025a70:	9002      	str	r0, [sp, #8]
 8025a72:	9006      	str	r0, [sp, #24]
 8025a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025a78:	4809      	ldr	r0, [pc, #36]	; (8025aa0 <siprintf+0x38>)
 8025a7a:	9107      	str	r1, [sp, #28]
 8025a7c:	9104      	str	r1, [sp, #16]
 8025a7e:	4909      	ldr	r1, [pc, #36]	; (8025aa4 <siprintf+0x3c>)
 8025a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8025a84:	9105      	str	r1, [sp, #20]
 8025a86:	6800      	ldr	r0, [r0, #0]
 8025a88:	9301      	str	r3, [sp, #4]
 8025a8a:	a902      	add	r1, sp, #8
 8025a8c:	f000 fdc6 	bl	802661c <_svfiprintf_r>
 8025a90:	9b02      	ldr	r3, [sp, #8]
 8025a92:	2200      	movs	r2, #0
 8025a94:	701a      	strb	r2, [r3, #0]
 8025a96:	b01c      	add	sp, #112	; 0x70
 8025a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8025a9c:	b003      	add	sp, #12
 8025a9e:	4770      	bx	lr
 8025aa0:	20000118 	.word	0x20000118
 8025aa4:	ffff0208 	.word	0xffff0208

08025aa8 <siscanf>:
 8025aa8:	b40e      	push	{r1, r2, r3}
 8025aaa:	b510      	push	{r4, lr}
 8025aac:	b09f      	sub	sp, #124	; 0x7c
 8025aae:	ac21      	add	r4, sp, #132	; 0x84
 8025ab0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8025ab4:	f854 2b04 	ldr.w	r2, [r4], #4
 8025ab8:	9201      	str	r2, [sp, #4]
 8025aba:	f8ad 101c 	strh.w	r1, [sp, #28]
 8025abe:	9004      	str	r0, [sp, #16]
 8025ac0:	9008      	str	r0, [sp, #32]
 8025ac2:	f7da fbe5 	bl	8000290 <strlen>
 8025ac6:	4b0c      	ldr	r3, [pc, #48]	; (8025af8 <siscanf+0x50>)
 8025ac8:	9005      	str	r0, [sp, #20]
 8025aca:	9009      	str	r0, [sp, #36]	; 0x24
 8025acc:	930d      	str	r3, [sp, #52]	; 0x34
 8025ace:	480b      	ldr	r0, [pc, #44]	; (8025afc <siscanf+0x54>)
 8025ad0:	9a01      	ldr	r2, [sp, #4]
 8025ad2:	6800      	ldr	r0, [r0, #0]
 8025ad4:	9403      	str	r4, [sp, #12]
 8025ad6:	2300      	movs	r3, #0
 8025ad8:	9311      	str	r3, [sp, #68]	; 0x44
 8025ada:	9316      	str	r3, [sp, #88]	; 0x58
 8025adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025ae0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025ae4:	a904      	add	r1, sp, #16
 8025ae6:	4623      	mov	r3, r4
 8025ae8:	f000 fef2 	bl	80268d0 <__ssvfiscanf_r>
 8025aec:	b01f      	add	sp, #124	; 0x7c
 8025aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025af2:	b003      	add	sp, #12
 8025af4:	4770      	bx	lr
 8025af6:	bf00      	nop
 8025af8:	08025b23 	.word	0x08025b23
 8025afc:	20000118 	.word	0x20000118

08025b00 <__sread>:
 8025b00:	b510      	push	{r4, lr}
 8025b02:	460c      	mov	r4, r1
 8025b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b08:	f001 f9a6 	bl	8026e58 <_read_r>
 8025b0c:	2800      	cmp	r0, #0
 8025b0e:	bfab      	itete	ge
 8025b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025b12:	89a3      	ldrhlt	r3, [r4, #12]
 8025b14:	181b      	addge	r3, r3, r0
 8025b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025b1a:	bfac      	ite	ge
 8025b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8025b1e:	81a3      	strhlt	r3, [r4, #12]
 8025b20:	bd10      	pop	{r4, pc}

08025b22 <__seofread>:
 8025b22:	2000      	movs	r0, #0
 8025b24:	4770      	bx	lr

08025b26 <__swrite>:
 8025b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b2a:	461f      	mov	r7, r3
 8025b2c:	898b      	ldrh	r3, [r1, #12]
 8025b2e:	05db      	lsls	r3, r3, #23
 8025b30:	4605      	mov	r5, r0
 8025b32:	460c      	mov	r4, r1
 8025b34:	4616      	mov	r6, r2
 8025b36:	d505      	bpl.n	8025b44 <__swrite+0x1e>
 8025b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b3c:	2302      	movs	r3, #2
 8025b3e:	2200      	movs	r2, #0
 8025b40:	f000 fc68 	bl	8026414 <_lseek_r>
 8025b44:	89a3      	ldrh	r3, [r4, #12]
 8025b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025b4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025b4e:	81a3      	strh	r3, [r4, #12]
 8025b50:	4632      	mov	r2, r6
 8025b52:	463b      	mov	r3, r7
 8025b54:	4628      	mov	r0, r5
 8025b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025b5a:	f000 b9ad 	b.w	8025eb8 <_write_r>

08025b5e <__sseek>:
 8025b5e:	b510      	push	{r4, lr}
 8025b60:	460c      	mov	r4, r1
 8025b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b66:	f000 fc55 	bl	8026414 <_lseek_r>
 8025b6a:	1c43      	adds	r3, r0, #1
 8025b6c:	89a3      	ldrh	r3, [r4, #12]
 8025b6e:	bf15      	itete	ne
 8025b70:	6560      	strne	r0, [r4, #84]	; 0x54
 8025b72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025b76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025b7a:	81a3      	strheq	r3, [r4, #12]
 8025b7c:	bf18      	it	ne
 8025b7e:	81a3      	strhne	r3, [r4, #12]
 8025b80:	bd10      	pop	{r4, pc}

08025b82 <__sclose>:
 8025b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b86:	f000 ba79 	b.w	802607c <_close_r>

08025b8a <strcpy>:
 8025b8a:	4603      	mov	r3, r0
 8025b8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025b90:	f803 2b01 	strb.w	r2, [r3], #1
 8025b94:	2a00      	cmp	r2, #0
 8025b96:	d1f9      	bne.n	8025b8c <strcpy+0x2>
 8025b98:	4770      	bx	lr

08025b9a <strstr>:
 8025b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b9c:	780c      	ldrb	r4, [r1, #0]
 8025b9e:	b164      	cbz	r4, 8025bba <strstr+0x20>
 8025ba0:	4603      	mov	r3, r0
 8025ba2:	781a      	ldrb	r2, [r3, #0]
 8025ba4:	4618      	mov	r0, r3
 8025ba6:	1c5e      	adds	r6, r3, #1
 8025ba8:	b90a      	cbnz	r2, 8025bae <strstr+0x14>
 8025baa:	4610      	mov	r0, r2
 8025bac:	e005      	b.n	8025bba <strstr+0x20>
 8025bae:	4294      	cmp	r4, r2
 8025bb0:	d108      	bne.n	8025bc4 <strstr+0x2a>
 8025bb2:	460d      	mov	r5, r1
 8025bb4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8025bb8:	b902      	cbnz	r2, 8025bbc <strstr+0x22>
 8025bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025bbc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8025bc0:	4297      	cmp	r7, r2
 8025bc2:	d0f7      	beq.n	8025bb4 <strstr+0x1a>
 8025bc4:	4633      	mov	r3, r6
 8025bc6:	e7ec      	b.n	8025ba2 <strstr+0x8>

08025bc8 <strtok>:
 8025bc8:	4b16      	ldr	r3, [pc, #88]	; (8025c24 <strtok+0x5c>)
 8025bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025bcc:	681e      	ldr	r6, [r3, #0]
 8025bce:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8025bd0:	4605      	mov	r5, r0
 8025bd2:	b9fc      	cbnz	r4, 8025c14 <strtok+0x4c>
 8025bd4:	2050      	movs	r0, #80	; 0x50
 8025bd6:	9101      	str	r1, [sp, #4]
 8025bd8:	f7ff fade 	bl	8025198 <malloc>
 8025bdc:	9901      	ldr	r1, [sp, #4]
 8025bde:	65b0      	str	r0, [r6, #88]	; 0x58
 8025be0:	4602      	mov	r2, r0
 8025be2:	b920      	cbnz	r0, 8025bee <strtok+0x26>
 8025be4:	4b10      	ldr	r3, [pc, #64]	; (8025c28 <strtok+0x60>)
 8025be6:	4811      	ldr	r0, [pc, #68]	; (8025c2c <strtok+0x64>)
 8025be8:	2157      	movs	r1, #87	; 0x57
 8025bea:	f7ff fa63 	bl	80250b4 <__assert_func>
 8025bee:	e9c0 4400 	strd	r4, r4, [r0]
 8025bf2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8025bf6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8025bfa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8025bfe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8025c02:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8025c06:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8025c0a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8025c0e:	6184      	str	r4, [r0, #24]
 8025c10:	7704      	strb	r4, [r0, #28]
 8025c12:	6244      	str	r4, [r0, #36]	; 0x24
 8025c14:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8025c16:	2301      	movs	r3, #1
 8025c18:	4628      	mov	r0, r5
 8025c1a:	b002      	add	sp, #8
 8025c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025c20:	f000 b806 	b.w	8025c30 <__strtok_r>
 8025c24:	20000118 	.word	0x20000118
 8025c28:	0802b5dc 	.word	0x0802b5dc
 8025c2c:	0802b5f3 	.word	0x0802b5f3

08025c30 <__strtok_r>:
 8025c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c32:	b908      	cbnz	r0, 8025c38 <__strtok_r+0x8>
 8025c34:	6810      	ldr	r0, [r2, #0]
 8025c36:	b188      	cbz	r0, 8025c5c <__strtok_r+0x2c>
 8025c38:	4604      	mov	r4, r0
 8025c3a:	4620      	mov	r0, r4
 8025c3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8025c40:	460f      	mov	r7, r1
 8025c42:	f817 6b01 	ldrb.w	r6, [r7], #1
 8025c46:	b91e      	cbnz	r6, 8025c50 <__strtok_r+0x20>
 8025c48:	b965      	cbnz	r5, 8025c64 <__strtok_r+0x34>
 8025c4a:	6015      	str	r5, [r2, #0]
 8025c4c:	4628      	mov	r0, r5
 8025c4e:	e005      	b.n	8025c5c <__strtok_r+0x2c>
 8025c50:	42b5      	cmp	r5, r6
 8025c52:	d1f6      	bne.n	8025c42 <__strtok_r+0x12>
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	d1f0      	bne.n	8025c3a <__strtok_r+0xa>
 8025c58:	6014      	str	r4, [r2, #0]
 8025c5a:	7003      	strb	r3, [r0, #0]
 8025c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025c5e:	461c      	mov	r4, r3
 8025c60:	e00c      	b.n	8025c7c <__strtok_r+0x4c>
 8025c62:	b915      	cbnz	r5, 8025c6a <__strtok_r+0x3a>
 8025c64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025c68:	460e      	mov	r6, r1
 8025c6a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8025c6e:	42ab      	cmp	r3, r5
 8025c70:	d1f7      	bne.n	8025c62 <__strtok_r+0x32>
 8025c72:	2b00      	cmp	r3, #0
 8025c74:	d0f3      	beq.n	8025c5e <__strtok_r+0x2e>
 8025c76:	2300      	movs	r3, #0
 8025c78:	f804 3c01 	strb.w	r3, [r4, #-1]
 8025c7c:	6014      	str	r4, [r2, #0]
 8025c7e:	e7ed      	b.n	8025c5c <__strtok_r+0x2c>

08025c80 <_strtol_l.isra.0>:
 8025c80:	2b01      	cmp	r3, #1
 8025c82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025c86:	d001      	beq.n	8025c8c <_strtol_l.isra.0+0xc>
 8025c88:	2b24      	cmp	r3, #36	; 0x24
 8025c8a:	d906      	bls.n	8025c9a <_strtol_l.isra.0+0x1a>
 8025c8c:	f7ff fa48 	bl	8025120 <__errno>
 8025c90:	2316      	movs	r3, #22
 8025c92:	6003      	str	r3, [r0, #0]
 8025c94:	2000      	movs	r0, #0
 8025c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025c9a:	4f3a      	ldr	r7, [pc, #232]	; (8025d84 <_strtol_l.isra.0+0x104>)
 8025c9c:	468e      	mov	lr, r1
 8025c9e:	4676      	mov	r6, lr
 8025ca0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8025ca4:	5de5      	ldrb	r5, [r4, r7]
 8025ca6:	f015 0508 	ands.w	r5, r5, #8
 8025caa:	d1f8      	bne.n	8025c9e <_strtol_l.isra.0+0x1e>
 8025cac:	2c2d      	cmp	r4, #45	; 0x2d
 8025cae:	d134      	bne.n	8025d1a <_strtol_l.isra.0+0x9a>
 8025cb0:	f89e 4000 	ldrb.w	r4, [lr]
 8025cb4:	f04f 0801 	mov.w	r8, #1
 8025cb8:	f106 0e02 	add.w	lr, r6, #2
 8025cbc:	2b00      	cmp	r3, #0
 8025cbe:	d05c      	beq.n	8025d7a <_strtol_l.isra.0+0xfa>
 8025cc0:	2b10      	cmp	r3, #16
 8025cc2:	d10c      	bne.n	8025cde <_strtol_l.isra.0+0x5e>
 8025cc4:	2c30      	cmp	r4, #48	; 0x30
 8025cc6:	d10a      	bne.n	8025cde <_strtol_l.isra.0+0x5e>
 8025cc8:	f89e 4000 	ldrb.w	r4, [lr]
 8025ccc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8025cd0:	2c58      	cmp	r4, #88	; 0x58
 8025cd2:	d14d      	bne.n	8025d70 <_strtol_l.isra.0+0xf0>
 8025cd4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8025cd8:	2310      	movs	r3, #16
 8025cda:	f10e 0e02 	add.w	lr, lr, #2
 8025cde:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8025ce2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025ce6:	2600      	movs	r6, #0
 8025ce8:	fbbc f9f3 	udiv	r9, ip, r3
 8025cec:	4635      	mov	r5, r6
 8025cee:	fb03 ca19 	mls	sl, r3, r9, ip
 8025cf2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8025cf6:	2f09      	cmp	r7, #9
 8025cf8:	d818      	bhi.n	8025d2c <_strtol_l.isra.0+0xac>
 8025cfa:	463c      	mov	r4, r7
 8025cfc:	42a3      	cmp	r3, r4
 8025cfe:	dd24      	ble.n	8025d4a <_strtol_l.isra.0+0xca>
 8025d00:	2e00      	cmp	r6, #0
 8025d02:	db1f      	blt.n	8025d44 <_strtol_l.isra.0+0xc4>
 8025d04:	45a9      	cmp	r9, r5
 8025d06:	d31d      	bcc.n	8025d44 <_strtol_l.isra.0+0xc4>
 8025d08:	d101      	bne.n	8025d0e <_strtol_l.isra.0+0x8e>
 8025d0a:	45a2      	cmp	sl, r4
 8025d0c:	db1a      	blt.n	8025d44 <_strtol_l.isra.0+0xc4>
 8025d0e:	fb05 4503 	mla	r5, r5, r3, r4
 8025d12:	2601      	movs	r6, #1
 8025d14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8025d18:	e7eb      	b.n	8025cf2 <_strtol_l.isra.0+0x72>
 8025d1a:	2c2b      	cmp	r4, #43	; 0x2b
 8025d1c:	bf08      	it	eq
 8025d1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8025d22:	46a8      	mov	r8, r5
 8025d24:	bf08      	it	eq
 8025d26:	f106 0e02 	addeq.w	lr, r6, #2
 8025d2a:	e7c7      	b.n	8025cbc <_strtol_l.isra.0+0x3c>
 8025d2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8025d30:	2f19      	cmp	r7, #25
 8025d32:	d801      	bhi.n	8025d38 <_strtol_l.isra.0+0xb8>
 8025d34:	3c37      	subs	r4, #55	; 0x37
 8025d36:	e7e1      	b.n	8025cfc <_strtol_l.isra.0+0x7c>
 8025d38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8025d3c:	2f19      	cmp	r7, #25
 8025d3e:	d804      	bhi.n	8025d4a <_strtol_l.isra.0+0xca>
 8025d40:	3c57      	subs	r4, #87	; 0x57
 8025d42:	e7db      	b.n	8025cfc <_strtol_l.isra.0+0x7c>
 8025d44:	f04f 36ff 	mov.w	r6, #4294967295
 8025d48:	e7e4      	b.n	8025d14 <_strtol_l.isra.0+0x94>
 8025d4a:	2e00      	cmp	r6, #0
 8025d4c:	da05      	bge.n	8025d5a <_strtol_l.isra.0+0xda>
 8025d4e:	2322      	movs	r3, #34	; 0x22
 8025d50:	6003      	str	r3, [r0, #0]
 8025d52:	4665      	mov	r5, ip
 8025d54:	b942      	cbnz	r2, 8025d68 <_strtol_l.isra.0+0xe8>
 8025d56:	4628      	mov	r0, r5
 8025d58:	e79d      	b.n	8025c96 <_strtol_l.isra.0+0x16>
 8025d5a:	f1b8 0f00 	cmp.w	r8, #0
 8025d5e:	d000      	beq.n	8025d62 <_strtol_l.isra.0+0xe2>
 8025d60:	426d      	negs	r5, r5
 8025d62:	2a00      	cmp	r2, #0
 8025d64:	d0f7      	beq.n	8025d56 <_strtol_l.isra.0+0xd6>
 8025d66:	b10e      	cbz	r6, 8025d6c <_strtol_l.isra.0+0xec>
 8025d68:	f10e 31ff 	add.w	r1, lr, #4294967295
 8025d6c:	6011      	str	r1, [r2, #0]
 8025d6e:	e7f2      	b.n	8025d56 <_strtol_l.isra.0+0xd6>
 8025d70:	2430      	movs	r4, #48	; 0x30
 8025d72:	2b00      	cmp	r3, #0
 8025d74:	d1b3      	bne.n	8025cde <_strtol_l.isra.0+0x5e>
 8025d76:	2308      	movs	r3, #8
 8025d78:	e7b1      	b.n	8025cde <_strtol_l.isra.0+0x5e>
 8025d7a:	2c30      	cmp	r4, #48	; 0x30
 8025d7c:	d0a4      	beq.n	8025cc8 <_strtol_l.isra.0+0x48>
 8025d7e:	230a      	movs	r3, #10
 8025d80:	e7ad      	b.n	8025cde <_strtol_l.isra.0+0x5e>
 8025d82:	bf00      	nop
 8025d84:	0802b49d 	.word	0x0802b49d

08025d88 <_strtol_r>:
 8025d88:	f7ff bf7a 	b.w	8025c80 <_strtol_l.isra.0>

08025d8c <strtol>:
 8025d8c:	4613      	mov	r3, r2
 8025d8e:	460a      	mov	r2, r1
 8025d90:	4601      	mov	r1, r0
 8025d92:	4802      	ldr	r0, [pc, #8]	; (8025d9c <strtol+0x10>)
 8025d94:	6800      	ldr	r0, [r0, #0]
 8025d96:	f7ff bf73 	b.w	8025c80 <_strtol_l.isra.0>
 8025d9a:	bf00      	nop
 8025d9c:	20000118 	.word	0x20000118

08025da0 <_vsniprintf_r>:
 8025da0:	b530      	push	{r4, r5, lr}
 8025da2:	1e14      	subs	r4, r2, #0
 8025da4:	4605      	mov	r5, r0
 8025da6:	b09b      	sub	sp, #108	; 0x6c
 8025da8:	4618      	mov	r0, r3
 8025daa:	da05      	bge.n	8025db8 <_vsniprintf_r+0x18>
 8025dac:	238b      	movs	r3, #139	; 0x8b
 8025dae:	602b      	str	r3, [r5, #0]
 8025db0:	f04f 30ff 	mov.w	r0, #4294967295
 8025db4:	b01b      	add	sp, #108	; 0x6c
 8025db6:	bd30      	pop	{r4, r5, pc}
 8025db8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8025dbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025dc0:	bf14      	ite	ne
 8025dc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8025dc6:	4623      	moveq	r3, r4
 8025dc8:	9302      	str	r3, [sp, #8]
 8025dca:	9305      	str	r3, [sp, #20]
 8025dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025dd0:	9100      	str	r1, [sp, #0]
 8025dd2:	9104      	str	r1, [sp, #16]
 8025dd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025dd8:	4602      	mov	r2, r0
 8025dda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025ddc:	4669      	mov	r1, sp
 8025dde:	4628      	mov	r0, r5
 8025de0:	f000 fc1c 	bl	802661c <_svfiprintf_r>
 8025de4:	1c43      	adds	r3, r0, #1
 8025de6:	bfbc      	itt	lt
 8025de8:	238b      	movlt	r3, #139	; 0x8b
 8025dea:	602b      	strlt	r3, [r5, #0]
 8025dec:	2c00      	cmp	r4, #0
 8025dee:	d0e1      	beq.n	8025db4 <_vsniprintf_r+0x14>
 8025df0:	9b00      	ldr	r3, [sp, #0]
 8025df2:	2200      	movs	r2, #0
 8025df4:	701a      	strb	r2, [r3, #0]
 8025df6:	e7dd      	b.n	8025db4 <_vsniprintf_r+0x14>

08025df8 <vsniprintf>:
 8025df8:	b507      	push	{r0, r1, r2, lr}
 8025dfa:	9300      	str	r3, [sp, #0]
 8025dfc:	4613      	mov	r3, r2
 8025dfe:	460a      	mov	r2, r1
 8025e00:	4601      	mov	r1, r0
 8025e02:	4803      	ldr	r0, [pc, #12]	; (8025e10 <vsniprintf+0x18>)
 8025e04:	6800      	ldr	r0, [r0, #0]
 8025e06:	f7ff ffcb 	bl	8025da0 <_vsniprintf_r>
 8025e0a:	b003      	add	sp, #12
 8025e0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8025e10:	20000118 	.word	0x20000118

08025e14 <__swbuf_r>:
 8025e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e16:	460e      	mov	r6, r1
 8025e18:	4614      	mov	r4, r2
 8025e1a:	4605      	mov	r5, r0
 8025e1c:	b118      	cbz	r0, 8025e26 <__swbuf_r+0x12>
 8025e1e:	6983      	ldr	r3, [r0, #24]
 8025e20:	b90b      	cbnz	r3, 8025e26 <__swbuf_r+0x12>
 8025e22:	f000 fa55 	bl	80262d0 <__sinit>
 8025e26:	4b21      	ldr	r3, [pc, #132]	; (8025eac <__swbuf_r+0x98>)
 8025e28:	429c      	cmp	r4, r3
 8025e2a:	d12b      	bne.n	8025e84 <__swbuf_r+0x70>
 8025e2c:	686c      	ldr	r4, [r5, #4]
 8025e2e:	69a3      	ldr	r3, [r4, #24]
 8025e30:	60a3      	str	r3, [r4, #8]
 8025e32:	89a3      	ldrh	r3, [r4, #12]
 8025e34:	071a      	lsls	r2, r3, #28
 8025e36:	d52f      	bpl.n	8025e98 <__swbuf_r+0x84>
 8025e38:	6923      	ldr	r3, [r4, #16]
 8025e3a:	b36b      	cbz	r3, 8025e98 <__swbuf_r+0x84>
 8025e3c:	6923      	ldr	r3, [r4, #16]
 8025e3e:	6820      	ldr	r0, [r4, #0]
 8025e40:	1ac0      	subs	r0, r0, r3
 8025e42:	6963      	ldr	r3, [r4, #20]
 8025e44:	b2f6      	uxtb	r6, r6
 8025e46:	4283      	cmp	r3, r0
 8025e48:	4637      	mov	r7, r6
 8025e4a:	dc04      	bgt.n	8025e56 <__swbuf_r+0x42>
 8025e4c:	4621      	mov	r1, r4
 8025e4e:	4628      	mov	r0, r5
 8025e50:	f000 f9aa 	bl	80261a8 <_fflush_r>
 8025e54:	bb30      	cbnz	r0, 8025ea4 <__swbuf_r+0x90>
 8025e56:	68a3      	ldr	r3, [r4, #8]
 8025e58:	3b01      	subs	r3, #1
 8025e5a:	60a3      	str	r3, [r4, #8]
 8025e5c:	6823      	ldr	r3, [r4, #0]
 8025e5e:	1c5a      	adds	r2, r3, #1
 8025e60:	6022      	str	r2, [r4, #0]
 8025e62:	701e      	strb	r6, [r3, #0]
 8025e64:	6963      	ldr	r3, [r4, #20]
 8025e66:	3001      	adds	r0, #1
 8025e68:	4283      	cmp	r3, r0
 8025e6a:	d004      	beq.n	8025e76 <__swbuf_r+0x62>
 8025e6c:	89a3      	ldrh	r3, [r4, #12]
 8025e6e:	07db      	lsls	r3, r3, #31
 8025e70:	d506      	bpl.n	8025e80 <__swbuf_r+0x6c>
 8025e72:	2e0a      	cmp	r6, #10
 8025e74:	d104      	bne.n	8025e80 <__swbuf_r+0x6c>
 8025e76:	4621      	mov	r1, r4
 8025e78:	4628      	mov	r0, r5
 8025e7a:	f000 f995 	bl	80261a8 <_fflush_r>
 8025e7e:	b988      	cbnz	r0, 8025ea4 <__swbuf_r+0x90>
 8025e80:	4638      	mov	r0, r7
 8025e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e84:	4b0a      	ldr	r3, [pc, #40]	; (8025eb0 <__swbuf_r+0x9c>)
 8025e86:	429c      	cmp	r4, r3
 8025e88:	d101      	bne.n	8025e8e <__swbuf_r+0x7a>
 8025e8a:	68ac      	ldr	r4, [r5, #8]
 8025e8c:	e7cf      	b.n	8025e2e <__swbuf_r+0x1a>
 8025e8e:	4b09      	ldr	r3, [pc, #36]	; (8025eb4 <__swbuf_r+0xa0>)
 8025e90:	429c      	cmp	r4, r3
 8025e92:	bf08      	it	eq
 8025e94:	68ec      	ldreq	r4, [r5, #12]
 8025e96:	e7ca      	b.n	8025e2e <__swbuf_r+0x1a>
 8025e98:	4621      	mov	r1, r4
 8025e9a:	4628      	mov	r0, r5
 8025e9c:	f000 f81e 	bl	8025edc <__swsetup_r>
 8025ea0:	2800      	cmp	r0, #0
 8025ea2:	d0cb      	beq.n	8025e3c <__swbuf_r+0x28>
 8025ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8025ea8:	e7ea      	b.n	8025e80 <__swbuf_r+0x6c>
 8025eaa:	bf00      	nop
 8025eac:	0802b674 	.word	0x0802b674
 8025eb0:	0802b694 	.word	0x0802b694
 8025eb4:	0802b654 	.word	0x0802b654

08025eb8 <_write_r>:
 8025eb8:	b538      	push	{r3, r4, r5, lr}
 8025eba:	4d07      	ldr	r5, [pc, #28]	; (8025ed8 <_write_r+0x20>)
 8025ebc:	4604      	mov	r4, r0
 8025ebe:	4608      	mov	r0, r1
 8025ec0:	4611      	mov	r1, r2
 8025ec2:	2200      	movs	r2, #0
 8025ec4:	602a      	str	r2, [r5, #0]
 8025ec6:	461a      	mov	r2, r3
 8025ec8:	f7de fad7 	bl	800447a <_write>
 8025ecc:	1c43      	adds	r3, r0, #1
 8025ece:	d102      	bne.n	8025ed6 <_write_r+0x1e>
 8025ed0:	682b      	ldr	r3, [r5, #0]
 8025ed2:	b103      	cbz	r3, 8025ed6 <_write_r+0x1e>
 8025ed4:	6023      	str	r3, [r4, #0]
 8025ed6:	bd38      	pop	{r3, r4, r5, pc}
 8025ed8:	2000b2c4 	.word	0x2000b2c4

08025edc <__swsetup_r>:
 8025edc:	4b32      	ldr	r3, [pc, #200]	; (8025fa8 <__swsetup_r+0xcc>)
 8025ede:	b570      	push	{r4, r5, r6, lr}
 8025ee0:	681d      	ldr	r5, [r3, #0]
 8025ee2:	4606      	mov	r6, r0
 8025ee4:	460c      	mov	r4, r1
 8025ee6:	b125      	cbz	r5, 8025ef2 <__swsetup_r+0x16>
 8025ee8:	69ab      	ldr	r3, [r5, #24]
 8025eea:	b913      	cbnz	r3, 8025ef2 <__swsetup_r+0x16>
 8025eec:	4628      	mov	r0, r5
 8025eee:	f000 f9ef 	bl	80262d0 <__sinit>
 8025ef2:	4b2e      	ldr	r3, [pc, #184]	; (8025fac <__swsetup_r+0xd0>)
 8025ef4:	429c      	cmp	r4, r3
 8025ef6:	d10f      	bne.n	8025f18 <__swsetup_r+0x3c>
 8025ef8:	686c      	ldr	r4, [r5, #4]
 8025efa:	89a3      	ldrh	r3, [r4, #12]
 8025efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025f00:	0719      	lsls	r1, r3, #28
 8025f02:	d42c      	bmi.n	8025f5e <__swsetup_r+0x82>
 8025f04:	06dd      	lsls	r5, r3, #27
 8025f06:	d411      	bmi.n	8025f2c <__swsetup_r+0x50>
 8025f08:	2309      	movs	r3, #9
 8025f0a:	6033      	str	r3, [r6, #0]
 8025f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025f10:	81a3      	strh	r3, [r4, #12]
 8025f12:	f04f 30ff 	mov.w	r0, #4294967295
 8025f16:	e03e      	b.n	8025f96 <__swsetup_r+0xba>
 8025f18:	4b25      	ldr	r3, [pc, #148]	; (8025fb0 <__swsetup_r+0xd4>)
 8025f1a:	429c      	cmp	r4, r3
 8025f1c:	d101      	bne.n	8025f22 <__swsetup_r+0x46>
 8025f1e:	68ac      	ldr	r4, [r5, #8]
 8025f20:	e7eb      	b.n	8025efa <__swsetup_r+0x1e>
 8025f22:	4b24      	ldr	r3, [pc, #144]	; (8025fb4 <__swsetup_r+0xd8>)
 8025f24:	429c      	cmp	r4, r3
 8025f26:	bf08      	it	eq
 8025f28:	68ec      	ldreq	r4, [r5, #12]
 8025f2a:	e7e6      	b.n	8025efa <__swsetup_r+0x1e>
 8025f2c:	0758      	lsls	r0, r3, #29
 8025f2e:	d512      	bpl.n	8025f56 <__swsetup_r+0x7a>
 8025f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025f32:	b141      	cbz	r1, 8025f46 <__swsetup_r+0x6a>
 8025f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025f38:	4299      	cmp	r1, r3
 8025f3a:	d002      	beq.n	8025f42 <__swsetup_r+0x66>
 8025f3c:	4630      	mov	r0, r6
 8025f3e:	f7ff f96b 	bl	8025218 <_free_r>
 8025f42:	2300      	movs	r3, #0
 8025f44:	6363      	str	r3, [r4, #52]	; 0x34
 8025f46:	89a3      	ldrh	r3, [r4, #12]
 8025f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025f4c:	81a3      	strh	r3, [r4, #12]
 8025f4e:	2300      	movs	r3, #0
 8025f50:	6063      	str	r3, [r4, #4]
 8025f52:	6923      	ldr	r3, [r4, #16]
 8025f54:	6023      	str	r3, [r4, #0]
 8025f56:	89a3      	ldrh	r3, [r4, #12]
 8025f58:	f043 0308 	orr.w	r3, r3, #8
 8025f5c:	81a3      	strh	r3, [r4, #12]
 8025f5e:	6923      	ldr	r3, [r4, #16]
 8025f60:	b94b      	cbnz	r3, 8025f76 <__swsetup_r+0x9a>
 8025f62:	89a3      	ldrh	r3, [r4, #12]
 8025f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025f6c:	d003      	beq.n	8025f76 <__swsetup_r+0x9a>
 8025f6e:	4621      	mov	r1, r4
 8025f70:	4630      	mov	r0, r6
 8025f72:	f000 fa85 	bl	8026480 <__smakebuf_r>
 8025f76:	89a0      	ldrh	r0, [r4, #12]
 8025f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025f7c:	f010 0301 	ands.w	r3, r0, #1
 8025f80:	d00a      	beq.n	8025f98 <__swsetup_r+0xbc>
 8025f82:	2300      	movs	r3, #0
 8025f84:	60a3      	str	r3, [r4, #8]
 8025f86:	6963      	ldr	r3, [r4, #20]
 8025f88:	425b      	negs	r3, r3
 8025f8a:	61a3      	str	r3, [r4, #24]
 8025f8c:	6923      	ldr	r3, [r4, #16]
 8025f8e:	b943      	cbnz	r3, 8025fa2 <__swsetup_r+0xc6>
 8025f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025f94:	d1ba      	bne.n	8025f0c <__swsetup_r+0x30>
 8025f96:	bd70      	pop	{r4, r5, r6, pc}
 8025f98:	0781      	lsls	r1, r0, #30
 8025f9a:	bf58      	it	pl
 8025f9c:	6963      	ldrpl	r3, [r4, #20]
 8025f9e:	60a3      	str	r3, [r4, #8]
 8025fa0:	e7f4      	b.n	8025f8c <__swsetup_r+0xb0>
 8025fa2:	2000      	movs	r0, #0
 8025fa4:	e7f7      	b.n	8025f96 <__swsetup_r+0xba>
 8025fa6:	bf00      	nop
 8025fa8:	20000118 	.word	0x20000118
 8025fac:	0802b674 	.word	0x0802b674
 8025fb0:	0802b694 	.word	0x0802b694
 8025fb4:	0802b654 	.word	0x0802b654

08025fb8 <__register_exitproc>:
 8025fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025fbc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8026078 <__register_exitproc+0xc0>
 8025fc0:	4606      	mov	r6, r0
 8025fc2:	f8d8 0000 	ldr.w	r0, [r8]
 8025fc6:	461f      	mov	r7, r3
 8025fc8:	460d      	mov	r5, r1
 8025fca:	4691      	mov	r9, r2
 8025fcc:	f000 fa1e 	bl	802640c <__retarget_lock_acquire_recursive>
 8025fd0:	4b25      	ldr	r3, [pc, #148]	; (8026068 <__register_exitproc+0xb0>)
 8025fd2:	681c      	ldr	r4, [r3, #0]
 8025fd4:	b934      	cbnz	r4, 8025fe4 <__register_exitproc+0x2c>
 8025fd6:	4c25      	ldr	r4, [pc, #148]	; (802606c <__register_exitproc+0xb4>)
 8025fd8:	601c      	str	r4, [r3, #0]
 8025fda:	4b25      	ldr	r3, [pc, #148]	; (8026070 <__register_exitproc+0xb8>)
 8025fdc:	b113      	cbz	r3, 8025fe4 <__register_exitproc+0x2c>
 8025fde:	681b      	ldr	r3, [r3, #0]
 8025fe0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025fe4:	6863      	ldr	r3, [r4, #4]
 8025fe6:	2b1f      	cmp	r3, #31
 8025fe8:	dd07      	ble.n	8025ffa <__register_exitproc+0x42>
 8025fea:	f8d8 0000 	ldr.w	r0, [r8]
 8025fee:	f000 fa0f 	bl	8026410 <__retarget_lock_release_recursive>
 8025ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8025ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025ffa:	b34e      	cbz	r6, 8026050 <__register_exitproc+0x98>
 8025ffc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026000:	b988      	cbnz	r0, 8026026 <__register_exitproc+0x6e>
 8026002:	4b1c      	ldr	r3, [pc, #112]	; (8026074 <__register_exitproc+0xbc>)
 8026004:	b923      	cbnz	r3, 8026010 <__register_exitproc+0x58>
 8026006:	f8d8 0000 	ldr.w	r0, [r8]
 802600a:	f000 fa00 	bl	802640e <__retarget_lock_release>
 802600e:	e7f0      	b.n	8025ff2 <__register_exitproc+0x3a>
 8026010:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026014:	f7ff f8c0 	bl	8025198 <malloc>
 8026018:	2800      	cmp	r0, #0
 802601a:	d0f4      	beq.n	8026006 <__register_exitproc+0x4e>
 802601c:	2300      	movs	r3, #0
 802601e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026022:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026026:	6863      	ldr	r3, [r4, #4]
 8026028:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802602c:	2201      	movs	r2, #1
 802602e:	409a      	lsls	r2, r3
 8026030:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026034:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026038:	4313      	orrs	r3, r2
 802603a:	2e02      	cmp	r6, #2
 802603c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026040:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026044:	bf02      	ittt	eq
 8026046:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802604a:	431a      	orreq	r2, r3
 802604c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8026050:	6863      	ldr	r3, [r4, #4]
 8026052:	f8d8 0000 	ldr.w	r0, [r8]
 8026056:	1c5a      	adds	r2, r3, #1
 8026058:	3302      	adds	r3, #2
 802605a:	6062      	str	r2, [r4, #4]
 802605c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026060:	f000 f9d6 	bl	8026410 <__retarget_lock_release_recursive>
 8026064:	2000      	movs	r0, #0
 8026066:	e7c6      	b.n	8025ff6 <__register_exitproc+0x3e>
 8026068:	2000a2fc 	.word	0x2000a2fc
 802606c:	2000a270 	.word	0x2000a270
 8026070:	0802b5d8 	.word	0x0802b5d8
 8026074:	08025199 	.word	0x08025199
 8026078:	2000017c 	.word	0x2000017c

0802607c <_close_r>:
 802607c:	b538      	push	{r3, r4, r5, lr}
 802607e:	4d06      	ldr	r5, [pc, #24]	; (8026098 <_close_r+0x1c>)
 8026080:	2300      	movs	r3, #0
 8026082:	4604      	mov	r4, r0
 8026084:	4608      	mov	r0, r1
 8026086:	602b      	str	r3, [r5, #0]
 8026088:	f7de fa13 	bl	80044b2 <_close>
 802608c:	1c43      	adds	r3, r0, #1
 802608e:	d102      	bne.n	8026096 <_close_r+0x1a>
 8026090:	682b      	ldr	r3, [r5, #0]
 8026092:	b103      	cbz	r3, 8026096 <_close_r+0x1a>
 8026094:	6023      	str	r3, [r4, #0]
 8026096:	bd38      	pop	{r3, r4, r5, pc}
 8026098:	2000b2c4 	.word	0x2000b2c4

0802609c <__sflush_r>:
 802609c:	898a      	ldrh	r2, [r1, #12]
 802609e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80260a2:	4605      	mov	r5, r0
 80260a4:	0710      	lsls	r0, r2, #28
 80260a6:	460c      	mov	r4, r1
 80260a8:	d458      	bmi.n	802615c <__sflush_r+0xc0>
 80260aa:	684b      	ldr	r3, [r1, #4]
 80260ac:	2b00      	cmp	r3, #0
 80260ae:	dc05      	bgt.n	80260bc <__sflush_r+0x20>
 80260b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80260b2:	2b00      	cmp	r3, #0
 80260b4:	dc02      	bgt.n	80260bc <__sflush_r+0x20>
 80260b6:	2000      	movs	r0, #0
 80260b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80260bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80260be:	2e00      	cmp	r6, #0
 80260c0:	d0f9      	beq.n	80260b6 <__sflush_r+0x1a>
 80260c2:	2300      	movs	r3, #0
 80260c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80260c8:	682f      	ldr	r7, [r5, #0]
 80260ca:	602b      	str	r3, [r5, #0]
 80260cc:	d032      	beq.n	8026134 <__sflush_r+0x98>
 80260ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80260d0:	89a3      	ldrh	r3, [r4, #12]
 80260d2:	075a      	lsls	r2, r3, #29
 80260d4:	d505      	bpl.n	80260e2 <__sflush_r+0x46>
 80260d6:	6863      	ldr	r3, [r4, #4]
 80260d8:	1ac0      	subs	r0, r0, r3
 80260da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80260dc:	b10b      	cbz	r3, 80260e2 <__sflush_r+0x46>
 80260de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80260e0:	1ac0      	subs	r0, r0, r3
 80260e2:	2300      	movs	r3, #0
 80260e4:	4602      	mov	r2, r0
 80260e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80260e8:	6a21      	ldr	r1, [r4, #32]
 80260ea:	4628      	mov	r0, r5
 80260ec:	47b0      	blx	r6
 80260ee:	1c43      	adds	r3, r0, #1
 80260f0:	89a3      	ldrh	r3, [r4, #12]
 80260f2:	d106      	bne.n	8026102 <__sflush_r+0x66>
 80260f4:	6829      	ldr	r1, [r5, #0]
 80260f6:	291d      	cmp	r1, #29
 80260f8:	d82c      	bhi.n	8026154 <__sflush_r+0xb8>
 80260fa:	4a2a      	ldr	r2, [pc, #168]	; (80261a4 <__sflush_r+0x108>)
 80260fc:	40ca      	lsrs	r2, r1
 80260fe:	07d6      	lsls	r6, r2, #31
 8026100:	d528      	bpl.n	8026154 <__sflush_r+0xb8>
 8026102:	2200      	movs	r2, #0
 8026104:	6062      	str	r2, [r4, #4]
 8026106:	04d9      	lsls	r1, r3, #19
 8026108:	6922      	ldr	r2, [r4, #16]
 802610a:	6022      	str	r2, [r4, #0]
 802610c:	d504      	bpl.n	8026118 <__sflush_r+0x7c>
 802610e:	1c42      	adds	r2, r0, #1
 8026110:	d101      	bne.n	8026116 <__sflush_r+0x7a>
 8026112:	682b      	ldr	r3, [r5, #0]
 8026114:	b903      	cbnz	r3, 8026118 <__sflush_r+0x7c>
 8026116:	6560      	str	r0, [r4, #84]	; 0x54
 8026118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802611a:	602f      	str	r7, [r5, #0]
 802611c:	2900      	cmp	r1, #0
 802611e:	d0ca      	beq.n	80260b6 <__sflush_r+0x1a>
 8026120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026124:	4299      	cmp	r1, r3
 8026126:	d002      	beq.n	802612e <__sflush_r+0x92>
 8026128:	4628      	mov	r0, r5
 802612a:	f7ff f875 	bl	8025218 <_free_r>
 802612e:	2000      	movs	r0, #0
 8026130:	6360      	str	r0, [r4, #52]	; 0x34
 8026132:	e7c1      	b.n	80260b8 <__sflush_r+0x1c>
 8026134:	6a21      	ldr	r1, [r4, #32]
 8026136:	2301      	movs	r3, #1
 8026138:	4628      	mov	r0, r5
 802613a:	47b0      	blx	r6
 802613c:	1c41      	adds	r1, r0, #1
 802613e:	d1c7      	bne.n	80260d0 <__sflush_r+0x34>
 8026140:	682b      	ldr	r3, [r5, #0]
 8026142:	2b00      	cmp	r3, #0
 8026144:	d0c4      	beq.n	80260d0 <__sflush_r+0x34>
 8026146:	2b1d      	cmp	r3, #29
 8026148:	d001      	beq.n	802614e <__sflush_r+0xb2>
 802614a:	2b16      	cmp	r3, #22
 802614c:	d101      	bne.n	8026152 <__sflush_r+0xb6>
 802614e:	602f      	str	r7, [r5, #0]
 8026150:	e7b1      	b.n	80260b6 <__sflush_r+0x1a>
 8026152:	89a3      	ldrh	r3, [r4, #12]
 8026154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026158:	81a3      	strh	r3, [r4, #12]
 802615a:	e7ad      	b.n	80260b8 <__sflush_r+0x1c>
 802615c:	690f      	ldr	r7, [r1, #16]
 802615e:	2f00      	cmp	r7, #0
 8026160:	d0a9      	beq.n	80260b6 <__sflush_r+0x1a>
 8026162:	0793      	lsls	r3, r2, #30
 8026164:	680e      	ldr	r6, [r1, #0]
 8026166:	bf08      	it	eq
 8026168:	694b      	ldreq	r3, [r1, #20]
 802616a:	600f      	str	r7, [r1, #0]
 802616c:	bf18      	it	ne
 802616e:	2300      	movne	r3, #0
 8026170:	eba6 0807 	sub.w	r8, r6, r7
 8026174:	608b      	str	r3, [r1, #8]
 8026176:	f1b8 0f00 	cmp.w	r8, #0
 802617a:	dd9c      	ble.n	80260b6 <__sflush_r+0x1a>
 802617c:	6a21      	ldr	r1, [r4, #32]
 802617e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026180:	4643      	mov	r3, r8
 8026182:	463a      	mov	r2, r7
 8026184:	4628      	mov	r0, r5
 8026186:	47b0      	blx	r6
 8026188:	2800      	cmp	r0, #0
 802618a:	dc06      	bgt.n	802619a <__sflush_r+0xfe>
 802618c:	89a3      	ldrh	r3, [r4, #12]
 802618e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026192:	81a3      	strh	r3, [r4, #12]
 8026194:	f04f 30ff 	mov.w	r0, #4294967295
 8026198:	e78e      	b.n	80260b8 <__sflush_r+0x1c>
 802619a:	4407      	add	r7, r0
 802619c:	eba8 0800 	sub.w	r8, r8, r0
 80261a0:	e7e9      	b.n	8026176 <__sflush_r+0xda>
 80261a2:	bf00      	nop
 80261a4:	20400001 	.word	0x20400001

080261a8 <_fflush_r>:
 80261a8:	b538      	push	{r3, r4, r5, lr}
 80261aa:	690b      	ldr	r3, [r1, #16]
 80261ac:	4605      	mov	r5, r0
 80261ae:	460c      	mov	r4, r1
 80261b0:	b913      	cbnz	r3, 80261b8 <_fflush_r+0x10>
 80261b2:	2500      	movs	r5, #0
 80261b4:	4628      	mov	r0, r5
 80261b6:	bd38      	pop	{r3, r4, r5, pc}
 80261b8:	b118      	cbz	r0, 80261c2 <_fflush_r+0x1a>
 80261ba:	6983      	ldr	r3, [r0, #24]
 80261bc:	b90b      	cbnz	r3, 80261c2 <_fflush_r+0x1a>
 80261be:	f000 f887 	bl	80262d0 <__sinit>
 80261c2:	4b14      	ldr	r3, [pc, #80]	; (8026214 <_fflush_r+0x6c>)
 80261c4:	429c      	cmp	r4, r3
 80261c6:	d11b      	bne.n	8026200 <_fflush_r+0x58>
 80261c8:	686c      	ldr	r4, [r5, #4]
 80261ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80261ce:	2b00      	cmp	r3, #0
 80261d0:	d0ef      	beq.n	80261b2 <_fflush_r+0xa>
 80261d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80261d4:	07d0      	lsls	r0, r2, #31
 80261d6:	d404      	bmi.n	80261e2 <_fflush_r+0x3a>
 80261d8:	0599      	lsls	r1, r3, #22
 80261da:	d402      	bmi.n	80261e2 <_fflush_r+0x3a>
 80261dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80261de:	f000 f915 	bl	802640c <__retarget_lock_acquire_recursive>
 80261e2:	4628      	mov	r0, r5
 80261e4:	4621      	mov	r1, r4
 80261e6:	f7ff ff59 	bl	802609c <__sflush_r>
 80261ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80261ec:	07da      	lsls	r2, r3, #31
 80261ee:	4605      	mov	r5, r0
 80261f0:	d4e0      	bmi.n	80261b4 <_fflush_r+0xc>
 80261f2:	89a3      	ldrh	r3, [r4, #12]
 80261f4:	059b      	lsls	r3, r3, #22
 80261f6:	d4dd      	bmi.n	80261b4 <_fflush_r+0xc>
 80261f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80261fa:	f000 f909 	bl	8026410 <__retarget_lock_release_recursive>
 80261fe:	e7d9      	b.n	80261b4 <_fflush_r+0xc>
 8026200:	4b05      	ldr	r3, [pc, #20]	; (8026218 <_fflush_r+0x70>)
 8026202:	429c      	cmp	r4, r3
 8026204:	d101      	bne.n	802620a <_fflush_r+0x62>
 8026206:	68ac      	ldr	r4, [r5, #8]
 8026208:	e7df      	b.n	80261ca <_fflush_r+0x22>
 802620a:	4b04      	ldr	r3, [pc, #16]	; (802621c <_fflush_r+0x74>)
 802620c:	429c      	cmp	r4, r3
 802620e:	bf08      	it	eq
 8026210:	68ec      	ldreq	r4, [r5, #12]
 8026212:	e7da      	b.n	80261ca <_fflush_r+0x22>
 8026214:	0802b674 	.word	0x0802b674
 8026218:	0802b694 	.word	0x0802b694
 802621c:	0802b654 	.word	0x0802b654

08026220 <std>:
 8026220:	2300      	movs	r3, #0
 8026222:	b510      	push	{r4, lr}
 8026224:	4604      	mov	r4, r0
 8026226:	e9c0 3300 	strd	r3, r3, [r0]
 802622a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802622e:	6083      	str	r3, [r0, #8]
 8026230:	8181      	strh	r1, [r0, #12]
 8026232:	6643      	str	r3, [r0, #100]	; 0x64
 8026234:	81c2      	strh	r2, [r0, #14]
 8026236:	6183      	str	r3, [r0, #24]
 8026238:	4619      	mov	r1, r3
 802623a:	2208      	movs	r2, #8
 802623c:	305c      	adds	r0, #92	; 0x5c
 802623e:	f7fe ffe3 	bl	8025208 <memset>
 8026242:	4b05      	ldr	r3, [pc, #20]	; (8026258 <std+0x38>)
 8026244:	6263      	str	r3, [r4, #36]	; 0x24
 8026246:	4b05      	ldr	r3, [pc, #20]	; (802625c <std+0x3c>)
 8026248:	62a3      	str	r3, [r4, #40]	; 0x28
 802624a:	4b05      	ldr	r3, [pc, #20]	; (8026260 <std+0x40>)
 802624c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802624e:	4b05      	ldr	r3, [pc, #20]	; (8026264 <std+0x44>)
 8026250:	6224      	str	r4, [r4, #32]
 8026252:	6323      	str	r3, [r4, #48]	; 0x30
 8026254:	bd10      	pop	{r4, pc}
 8026256:	bf00      	nop
 8026258:	08025b01 	.word	0x08025b01
 802625c:	08025b27 	.word	0x08025b27
 8026260:	08025b5f 	.word	0x08025b5f
 8026264:	08025b83 	.word	0x08025b83

08026268 <_cleanup_r>:
 8026268:	4901      	ldr	r1, [pc, #4]	; (8026270 <_cleanup_r+0x8>)
 802626a:	f000 b8af 	b.w	80263cc <_fwalk_reent>
 802626e:	bf00      	nop
 8026270:	080261a9 	.word	0x080261a9

08026274 <__sfmoreglue>:
 8026274:	b570      	push	{r4, r5, r6, lr}
 8026276:	1e4a      	subs	r2, r1, #1
 8026278:	2568      	movs	r5, #104	; 0x68
 802627a:	4355      	muls	r5, r2
 802627c:	460e      	mov	r6, r1
 802627e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026282:	f7ff f819 	bl	80252b8 <_malloc_r>
 8026286:	4604      	mov	r4, r0
 8026288:	b140      	cbz	r0, 802629c <__sfmoreglue+0x28>
 802628a:	2100      	movs	r1, #0
 802628c:	e9c0 1600 	strd	r1, r6, [r0]
 8026290:	300c      	adds	r0, #12
 8026292:	60a0      	str	r0, [r4, #8]
 8026294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026298:	f7fe ffb6 	bl	8025208 <memset>
 802629c:	4620      	mov	r0, r4
 802629e:	bd70      	pop	{r4, r5, r6, pc}

080262a0 <__sfp_lock_acquire>:
 80262a0:	4801      	ldr	r0, [pc, #4]	; (80262a8 <__sfp_lock_acquire+0x8>)
 80262a2:	f000 b8b3 	b.w	802640c <__retarget_lock_acquire_recursive>
 80262a6:	bf00      	nop
 80262a8:	2000b2bc 	.word	0x2000b2bc

080262ac <__sfp_lock_release>:
 80262ac:	4801      	ldr	r0, [pc, #4]	; (80262b4 <__sfp_lock_release+0x8>)
 80262ae:	f000 b8af 	b.w	8026410 <__retarget_lock_release_recursive>
 80262b2:	bf00      	nop
 80262b4:	2000b2bc 	.word	0x2000b2bc

080262b8 <__sinit_lock_acquire>:
 80262b8:	4801      	ldr	r0, [pc, #4]	; (80262c0 <__sinit_lock_acquire+0x8>)
 80262ba:	f000 b8a7 	b.w	802640c <__retarget_lock_acquire_recursive>
 80262be:	bf00      	nop
 80262c0:	2000b2bb 	.word	0x2000b2bb

080262c4 <__sinit_lock_release>:
 80262c4:	4801      	ldr	r0, [pc, #4]	; (80262cc <__sinit_lock_release+0x8>)
 80262c6:	f000 b8a3 	b.w	8026410 <__retarget_lock_release_recursive>
 80262ca:	bf00      	nop
 80262cc:	2000b2bb 	.word	0x2000b2bb

080262d0 <__sinit>:
 80262d0:	b510      	push	{r4, lr}
 80262d2:	4604      	mov	r4, r0
 80262d4:	f7ff fff0 	bl	80262b8 <__sinit_lock_acquire>
 80262d8:	69a3      	ldr	r3, [r4, #24]
 80262da:	b11b      	cbz	r3, 80262e4 <__sinit+0x14>
 80262dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80262e0:	f7ff bff0 	b.w	80262c4 <__sinit_lock_release>
 80262e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80262e8:	6523      	str	r3, [r4, #80]	; 0x50
 80262ea:	4b13      	ldr	r3, [pc, #76]	; (8026338 <__sinit+0x68>)
 80262ec:	4a13      	ldr	r2, [pc, #76]	; (802633c <__sinit+0x6c>)
 80262ee:	681b      	ldr	r3, [r3, #0]
 80262f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80262f2:	42a3      	cmp	r3, r4
 80262f4:	bf04      	itt	eq
 80262f6:	2301      	moveq	r3, #1
 80262f8:	61a3      	streq	r3, [r4, #24]
 80262fa:	4620      	mov	r0, r4
 80262fc:	f000 f820 	bl	8026340 <__sfp>
 8026300:	6060      	str	r0, [r4, #4]
 8026302:	4620      	mov	r0, r4
 8026304:	f000 f81c 	bl	8026340 <__sfp>
 8026308:	60a0      	str	r0, [r4, #8]
 802630a:	4620      	mov	r0, r4
 802630c:	f000 f818 	bl	8026340 <__sfp>
 8026310:	2200      	movs	r2, #0
 8026312:	60e0      	str	r0, [r4, #12]
 8026314:	2104      	movs	r1, #4
 8026316:	6860      	ldr	r0, [r4, #4]
 8026318:	f7ff ff82 	bl	8026220 <std>
 802631c:	68a0      	ldr	r0, [r4, #8]
 802631e:	2201      	movs	r2, #1
 8026320:	2109      	movs	r1, #9
 8026322:	f7ff ff7d 	bl	8026220 <std>
 8026326:	68e0      	ldr	r0, [r4, #12]
 8026328:	2202      	movs	r2, #2
 802632a:	2112      	movs	r1, #18
 802632c:	f7ff ff78 	bl	8026220 <std>
 8026330:	2301      	movs	r3, #1
 8026332:	61a3      	str	r3, [r4, #24]
 8026334:	e7d2      	b.n	80262dc <__sinit+0xc>
 8026336:	bf00      	nop
 8026338:	0802b5a0 	.word	0x0802b5a0
 802633c:	08026269 	.word	0x08026269

08026340 <__sfp>:
 8026340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026342:	4607      	mov	r7, r0
 8026344:	f7ff ffac 	bl	80262a0 <__sfp_lock_acquire>
 8026348:	4b1e      	ldr	r3, [pc, #120]	; (80263c4 <__sfp+0x84>)
 802634a:	681e      	ldr	r6, [r3, #0]
 802634c:	69b3      	ldr	r3, [r6, #24]
 802634e:	b913      	cbnz	r3, 8026356 <__sfp+0x16>
 8026350:	4630      	mov	r0, r6
 8026352:	f7ff ffbd 	bl	80262d0 <__sinit>
 8026356:	3648      	adds	r6, #72	; 0x48
 8026358:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802635c:	3b01      	subs	r3, #1
 802635e:	d503      	bpl.n	8026368 <__sfp+0x28>
 8026360:	6833      	ldr	r3, [r6, #0]
 8026362:	b30b      	cbz	r3, 80263a8 <__sfp+0x68>
 8026364:	6836      	ldr	r6, [r6, #0]
 8026366:	e7f7      	b.n	8026358 <__sfp+0x18>
 8026368:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802636c:	b9d5      	cbnz	r5, 80263a4 <__sfp+0x64>
 802636e:	4b16      	ldr	r3, [pc, #88]	; (80263c8 <__sfp+0x88>)
 8026370:	60e3      	str	r3, [r4, #12]
 8026372:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026376:	6665      	str	r5, [r4, #100]	; 0x64
 8026378:	f000 f847 	bl	802640a <__retarget_lock_init_recursive>
 802637c:	f7ff ff96 	bl	80262ac <__sfp_lock_release>
 8026380:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026384:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026388:	6025      	str	r5, [r4, #0]
 802638a:	61a5      	str	r5, [r4, #24]
 802638c:	2208      	movs	r2, #8
 802638e:	4629      	mov	r1, r5
 8026390:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026394:	f7fe ff38 	bl	8025208 <memset>
 8026398:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802639c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80263a0:	4620      	mov	r0, r4
 80263a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80263a4:	3468      	adds	r4, #104	; 0x68
 80263a6:	e7d9      	b.n	802635c <__sfp+0x1c>
 80263a8:	2104      	movs	r1, #4
 80263aa:	4638      	mov	r0, r7
 80263ac:	f7ff ff62 	bl	8026274 <__sfmoreglue>
 80263b0:	4604      	mov	r4, r0
 80263b2:	6030      	str	r0, [r6, #0]
 80263b4:	2800      	cmp	r0, #0
 80263b6:	d1d5      	bne.n	8026364 <__sfp+0x24>
 80263b8:	f7ff ff78 	bl	80262ac <__sfp_lock_release>
 80263bc:	230c      	movs	r3, #12
 80263be:	603b      	str	r3, [r7, #0]
 80263c0:	e7ee      	b.n	80263a0 <__sfp+0x60>
 80263c2:	bf00      	nop
 80263c4:	0802b5a0 	.word	0x0802b5a0
 80263c8:	ffff0001 	.word	0xffff0001

080263cc <_fwalk_reent>:
 80263cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80263d0:	4606      	mov	r6, r0
 80263d2:	4688      	mov	r8, r1
 80263d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80263d8:	2700      	movs	r7, #0
 80263da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80263de:	f1b9 0901 	subs.w	r9, r9, #1
 80263e2:	d505      	bpl.n	80263f0 <_fwalk_reent+0x24>
 80263e4:	6824      	ldr	r4, [r4, #0]
 80263e6:	2c00      	cmp	r4, #0
 80263e8:	d1f7      	bne.n	80263da <_fwalk_reent+0xe>
 80263ea:	4638      	mov	r0, r7
 80263ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80263f0:	89ab      	ldrh	r3, [r5, #12]
 80263f2:	2b01      	cmp	r3, #1
 80263f4:	d907      	bls.n	8026406 <_fwalk_reent+0x3a>
 80263f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80263fa:	3301      	adds	r3, #1
 80263fc:	d003      	beq.n	8026406 <_fwalk_reent+0x3a>
 80263fe:	4629      	mov	r1, r5
 8026400:	4630      	mov	r0, r6
 8026402:	47c0      	blx	r8
 8026404:	4307      	orrs	r7, r0
 8026406:	3568      	adds	r5, #104	; 0x68
 8026408:	e7e9      	b.n	80263de <_fwalk_reent+0x12>

0802640a <__retarget_lock_init_recursive>:
 802640a:	4770      	bx	lr

0802640c <__retarget_lock_acquire_recursive>:
 802640c:	4770      	bx	lr

0802640e <__retarget_lock_release>:
 802640e:	4770      	bx	lr

08026410 <__retarget_lock_release_recursive>:
 8026410:	4770      	bx	lr
	...

08026414 <_lseek_r>:
 8026414:	b538      	push	{r3, r4, r5, lr}
 8026416:	4d07      	ldr	r5, [pc, #28]	; (8026434 <_lseek_r+0x20>)
 8026418:	4604      	mov	r4, r0
 802641a:	4608      	mov	r0, r1
 802641c:	4611      	mov	r1, r2
 802641e:	2200      	movs	r2, #0
 8026420:	602a      	str	r2, [r5, #0]
 8026422:	461a      	mov	r2, r3
 8026424:	f7de f86c 	bl	8004500 <_lseek>
 8026428:	1c43      	adds	r3, r0, #1
 802642a:	d102      	bne.n	8026432 <_lseek_r+0x1e>
 802642c:	682b      	ldr	r3, [r5, #0]
 802642e:	b103      	cbz	r3, 8026432 <_lseek_r+0x1e>
 8026430:	6023      	str	r3, [r4, #0]
 8026432:	bd38      	pop	{r3, r4, r5, pc}
 8026434:	2000b2c4 	.word	0x2000b2c4

08026438 <__swhatbuf_r>:
 8026438:	b570      	push	{r4, r5, r6, lr}
 802643a:	460e      	mov	r6, r1
 802643c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026440:	2900      	cmp	r1, #0
 8026442:	b096      	sub	sp, #88	; 0x58
 8026444:	4614      	mov	r4, r2
 8026446:	461d      	mov	r5, r3
 8026448:	da07      	bge.n	802645a <__swhatbuf_r+0x22>
 802644a:	2300      	movs	r3, #0
 802644c:	602b      	str	r3, [r5, #0]
 802644e:	89b3      	ldrh	r3, [r6, #12]
 8026450:	061a      	lsls	r2, r3, #24
 8026452:	d410      	bmi.n	8026476 <__swhatbuf_r+0x3e>
 8026454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026458:	e00e      	b.n	8026478 <__swhatbuf_r+0x40>
 802645a:	466a      	mov	r2, sp
 802645c:	f000 fe00 	bl	8027060 <_fstat_r>
 8026460:	2800      	cmp	r0, #0
 8026462:	dbf2      	blt.n	802644a <__swhatbuf_r+0x12>
 8026464:	9a01      	ldr	r2, [sp, #4]
 8026466:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802646a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802646e:	425a      	negs	r2, r3
 8026470:	415a      	adcs	r2, r3
 8026472:	602a      	str	r2, [r5, #0]
 8026474:	e7ee      	b.n	8026454 <__swhatbuf_r+0x1c>
 8026476:	2340      	movs	r3, #64	; 0x40
 8026478:	2000      	movs	r0, #0
 802647a:	6023      	str	r3, [r4, #0]
 802647c:	b016      	add	sp, #88	; 0x58
 802647e:	bd70      	pop	{r4, r5, r6, pc}

08026480 <__smakebuf_r>:
 8026480:	898b      	ldrh	r3, [r1, #12]
 8026482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026484:	079d      	lsls	r5, r3, #30
 8026486:	4606      	mov	r6, r0
 8026488:	460c      	mov	r4, r1
 802648a:	d507      	bpl.n	802649c <__smakebuf_r+0x1c>
 802648c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026490:	6023      	str	r3, [r4, #0]
 8026492:	6123      	str	r3, [r4, #16]
 8026494:	2301      	movs	r3, #1
 8026496:	6163      	str	r3, [r4, #20]
 8026498:	b002      	add	sp, #8
 802649a:	bd70      	pop	{r4, r5, r6, pc}
 802649c:	ab01      	add	r3, sp, #4
 802649e:	466a      	mov	r2, sp
 80264a0:	f7ff ffca 	bl	8026438 <__swhatbuf_r>
 80264a4:	9900      	ldr	r1, [sp, #0]
 80264a6:	4605      	mov	r5, r0
 80264a8:	4630      	mov	r0, r6
 80264aa:	f7fe ff05 	bl	80252b8 <_malloc_r>
 80264ae:	b948      	cbnz	r0, 80264c4 <__smakebuf_r+0x44>
 80264b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80264b4:	059a      	lsls	r2, r3, #22
 80264b6:	d4ef      	bmi.n	8026498 <__smakebuf_r+0x18>
 80264b8:	f023 0303 	bic.w	r3, r3, #3
 80264bc:	f043 0302 	orr.w	r3, r3, #2
 80264c0:	81a3      	strh	r3, [r4, #12]
 80264c2:	e7e3      	b.n	802648c <__smakebuf_r+0xc>
 80264c4:	4b0d      	ldr	r3, [pc, #52]	; (80264fc <__smakebuf_r+0x7c>)
 80264c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80264c8:	89a3      	ldrh	r3, [r4, #12]
 80264ca:	6020      	str	r0, [r4, #0]
 80264cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80264d0:	81a3      	strh	r3, [r4, #12]
 80264d2:	9b00      	ldr	r3, [sp, #0]
 80264d4:	6163      	str	r3, [r4, #20]
 80264d6:	9b01      	ldr	r3, [sp, #4]
 80264d8:	6120      	str	r0, [r4, #16]
 80264da:	b15b      	cbz	r3, 80264f4 <__smakebuf_r+0x74>
 80264dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80264e0:	4630      	mov	r0, r6
 80264e2:	f000 fdcf 	bl	8027084 <_isatty_r>
 80264e6:	b128      	cbz	r0, 80264f4 <__smakebuf_r+0x74>
 80264e8:	89a3      	ldrh	r3, [r4, #12]
 80264ea:	f023 0303 	bic.w	r3, r3, #3
 80264ee:	f043 0301 	orr.w	r3, r3, #1
 80264f2:	81a3      	strh	r3, [r4, #12]
 80264f4:	89a0      	ldrh	r0, [r4, #12]
 80264f6:	4305      	orrs	r5, r0
 80264f8:	81a5      	strh	r5, [r4, #12]
 80264fa:	e7cd      	b.n	8026498 <__smakebuf_r+0x18>
 80264fc:	08026269 	.word	0x08026269

08026500 <__malloc_lock>:
 8026500:	4801      	ldr	r0, [pc, #4]	; (8026508 <__malloc_lock+0x8>)
 8026502:	f7ff bf83 	b.w	802640c <__retarget_lock_acquire_recursive>
 8026506:	bf00      	nop
 8026508:	2000b2b8 	.word	0x2000b2b8

0802650c <__malloc_unlock>:
 802650c:	4801      	ldr	r0, [pc, #4]	; (8026514 <__malloc_unlock+0x8>)
 802650e:	f7ff bf7f 	b.w	8026410 <__retarget_lock_release_recursive>
 8026512:	bf00      	nop
 8026514:	2000b2b8 	.word	0x2000b2b8

08026518 <_realloc_r>:
 8026518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802651a:	4607      	mov	r7, r0
 802651c:	4614      	mov	r4, r2
 802651e:	460e      	mov	r6, r1
 8026520:	b921      	cbnz	r1, 802652c <_realloc_r+0x14>
 8026522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8026526:	4611      	mov	r1, r2
 8026528:	f7fe bec6 	b.w	80252b8 <_malloc_r>
 802652c:	b922      	cbnz	r2, 8026538 <_realloc_r+0x20>
 802652e:	f7fe fe73 	bl	8025218 <_free_r>
 8026532:	4625      	mov	r5, r4
 8026534:	4628      	mov	r0, r5
 8026536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026538:	f000 fdb4 	bl	80270a4 <_malloc_usable_size_r>
 802653c:	42a0      	cmp	r0, r4
 802653e:	d20f      	bcs.n	8026560 <_realloc_r+0x48>
 8026540:	4621      	mov	r1, r4
 8026542:	4638      	mov	r0, r7
 8026544:	f7fe feb8 	bl	80252b8 <_malloc_r>
 8026548:	4605      	mov	r5, r0
 802654a:	2800      	cmp	r0, #0
 802654c:	d0f2      	beq.n	8026534 <_realloc_r+0x1c>
 802654e:	4631      	mov	r1, r6
 8026550:	4622      	mov	r2, r4
 8026552:	f7fe fe31 	bl	80251b8 <memcpy>
 8026556:	4631      	mov	r1, r6
 8026558:	4638      	mov	r0, r7
 802655a:	f7fe fe5d 	bl	8025218 <_free_r>
 802655e:	e7e9      	b.n	8026534 <_realloc_r+0x1c>
 8026560:	4635      	mov	r5, r6
 8026562:	e7e7      	b.n	8026534 <_realloc_r+0x1c>

08026564 <__ssputs_r>:
 8026564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026568:	688e      	ldr	r6, [r1, #8]
 802656a:	429e      	cmp	r6, r3
 802656c:	4682      	mov	sl, r0
 802656e:	460c      	mov	r4, r1
 8026570:	4690      	mov	r8, r2
 8026572:	461f      	mov	r7, r3
 8026574:	d838      	bhi.n	80265e8 <__ssputs_r+0x84>
 8026576:	898a      	ldrh	r2, [r1, #12]
 8026578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802657c:	d032      	beq.n	80265e4 <__ssputs_r+0x80>
 802657e:	6825      	ldr	r5, [r4, #0]
 8026580:	6909      	ldr	r1, [r1, #16]
 8026582:	eba5 0901 	sub.w	r9, r5, r1
 8026586:	6965      	ldr	r5, [r4, #20]
 8026588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802658c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026590:	3301      	adds	r3, #1
 8026592:	444b      	add	r3, r9
 8026594:	106d      	asrs	r5, r5, #1
 8026596:	429d      	cmp	r5, r3
 8026598:	bf38      	it	cc
 802659a:	461d      	movcc	r5, r3
 802659c:	0553      	lsls	r3, r2, #21
 802659e:	d531      	bpl.n	8026604 <__ssputs_r+0xa0>
 80265a0:	4629      	mov	r1, r5
 80265a2:	f7fe fe89 	bl	80252b8 <_malloc_r>
 80265a6:	4606      	mov	r6, r0
 80265a8:	b950      	cbnz	r0, 80265c0 <__ssputs_r+0x5c>
 80265aa:	230c      	movs	r3, #12
 80265ac:	f8ca 3000 	str.w	r3, [sl]
 80265b0:	89a3      	ldrh	r3, [r4, #12]
 80265b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80265b6:	81a3      	strh	r3, [r4, #12]
 80265b8:	f04f 30ff 	mov.w	r0, #4294967295
 80265bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80265c0:	6921      	ldr	r1, [r4, #16]
 80265c2:	464a      	mov	r2, r9
 80265c4:	f7fe fdf8 	bl	80251b8 <memcpy>
 80265c8:	89a3      	ldrh	r3, [r4, #12]
 80265ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80265ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80265d2:	81a3      	strh	r3, [r4, #12]
 80265d4:	6126      	str	r6, [r4, #16]
 80265d6:	6165      	str	r5, [r4, #20]
 80265d8:	444e      	add	r6, r9
 80265da:	eba5 0509 	sub.w	r5, r5, r9
 80265de:	6026      	str	r6, [r4, #0]
 80265e0:	60a5      	str	r5, [r4, #8]
 80265e2:	463e      	mov	r6, r7
 80265e4:	42be      	cmp	r6, r7
 80265e6:	d900      	bls.n	80265ea <__ssputs_r+0x86>
 80265e8:	463e      	mov	r6, r7
 80265ea:	4632      	mov	r2, r6
 80265ec:	6820      	ldr	r0, [r4, #0]
 80265ee:	4641      	mov	r1, r8
 80265f0:	f7fe fdf0 	bl	80251d4 <memmove>
 80265f4:	68a3      	ldr	r3, [r4, #8]
 80265f6:	6822      	ldr	r2, [r4, #0]
 80265f8:	1b9b      	subs	r3, r3, r6
 80265fa:	4432      	add	r2, r6
 80265fc:	60a3      	str	r3, [r4, #8]
 80265fe:	6022      	str	r2, [r4, #0]
 8026600:	2000      	movs	r0, #0
 8026602:	e7db      	b.n	80265bc <__ssputs_r+0x58>
 8026604:	462a      	mov	r2, r5
 8026606:	f7ff ff87 	bl	8026518 <_realloc_r>
 802660a:	4606      	mov	r6, r0
 802660c:	2800      	cmp	r0, #0
 802660e:	d1e1      	bne.n	80265d4 <__ssputs_r+0x70>
 8026610:	6921      	ldr	r1, [r4, #16]
 8026612:	4650      	mov	r0, sl
 8026614:	f7fe fe00 	bl	8025218 <_free_r>
 8026618:	e7c7      	b.n	80265aa <__ssputs_r+0x46>
	...

0802661c <_svfiprintf_r>:
 802661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026620:	4698      	mov	r8, r3
 8026622:	898b      	ldrh	r3, [r1, #12]
 8026624:	061b      	lsls	r3, r3, #24
 8026626:	b09d      	sub	sp, #116	; 0x74
 8026628:	4607      	mov	r7, r0
 802662a:	460d      	mov	r5, r1
 802662c:	4614      	mov	r4, r2
 802662e:	d50e      	bpl.n	802664e <_svfiprintf_r+0x32>
 8026630:	690b      	ldr	r3, [r1, #16]
 8026632:	b963      	cbnz	r3, 802664e <_svfiprintf_r+0x32>
 8026634:	2140      	movs	r1, #64	; 0x40
 8026636:	f7fe fe3f 	bl	80252b8 <_malloc_r>
 802663a:	6028      	str	r0, [r5, #0]
 802663c:	6128      	str	r0, [r5, #16]
 802663e:	b920      	cbnz	r0, 802664a <_svfiprintf_r+0x2e>
 8026640:	230c      	movs	r3, #12
 8026642:	603b      	str	r3, [r7, #0]
 8026644:	f04f 30ff 	mov.w	r0, #4294967295
 8026648:	e0d1      	b.n	80267ee <_svfiprintf_r+0x1d2>
 802664a:	2340      	movs	r3, #64	; 0x40
 802664c:	616b      	str	r3, [r5, #20]
 802664e:	2300      	movs	r3, #0
 8026650:	9309      	str	r3, [sp, #36]	; 0x24
 8026652:	2320      	movs	r3, #32
 8026654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026658:	f8cd 800c 	str.w	r8, [sp, #12]
 802665c:	2330      	movs	r3, #48	; 0x30
 802665e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8026808 <_svfiprintf_r+0x1ec>
 8026662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026666:	f04f 0901 	mov.w	r9, #1
 802666a:	4623      	mov	r3, r4
 802666c:	469a      	mov	sl, r3
 802666e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026672:	b10a      	cbz	r2, 8026678 <_svfiprintf_r+0x5c>
 8026674:	2a25      	cmp	r2, #37	; 0x25
 8026676:	d1f9      	bne.n	802666c <_svfiprintf_r+0x50>
 8026678:	ebba 0b04 	subs.w	fp, sl, r4
 802667c:	d00b      	beq.n	8026696 <_svfiprintf_r+0x7a>
 802667e:	465b      	mov	r3, fp
 8026680:	4622      	mov	r2, r4
 8026682:	4629      	mov	r1, r5
 8026684:	4638      	mov	r0, r7
 8026686:	f7ff ff6d 	bl	8026564 <__ssputs_r>
 802668a:	3001      	adds	r0, #1
 802668c:	f000 80aa 	beq.w	80267e4 <_svfiprintf_r+0x1c8>
 8026690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026692:	445a      	add	r2, fp
 8026694:	9209      	str	r2, [sp, #36]	; 0x24
 8026696:	f89a 3000 	ldrb.w	r3, [sl]
 802669a:	2b00      	cmp	r3, #0
 802669c:	f000 80a2 	beq.w	80267e4 <_svfiprintf_r+0x1c8>
 80266a0:	2300      	movs	r3, #0
 80266a2:	f04f 32ff 	mov.w	r2, #4294967295
 80266a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80266aa:	f10a 0a01 	add.w	sl, sl, #1
 80266ae:	9304      	str	r3, [sp, #16]
 80266b0:	9307      	str	r3, [sp, #28]
 80266b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80266b6:	931a      	str	r3, [sp, #104]	; 0x68
 80266b8:	4654      	mov	r4, sl
 80266ba:	2205      	movs	r2, #5
 80266bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80266c0:	4851      	ldr	r0, [pc, #324]	; (8026808 <_svfiprintf_r+0x1ec>)
 80266c2:	f7d9 fd95 	bl	80001f0 <memchr>
 80266c6:	9a04      	ldr	r2, [sp, #16]
 80266c8:	b9d8      	cbnz	r0, 8026702 <_svfiprintf_r+0xe6>
 80266ca:	06d0      	lsls	r0, r2, #27
 80266cc:	bf44      	itt	mi
 80266ce:	2320      	movmi	r3, #32
 80266d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80266d4:	0711      	lsls	r1, r2, #28
 80266d6:	bf44      	itt	mi
 80266d8:	232b      	movmi	r3, #43	; 0x2b
 80266da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80266de:	f89a 3000 	ldrb.w	r3, [sl]
 80266e2:	2b2a      	cmp	r3, #42	; 0x2a
 80266e4:	d015      	beq.n	8026712 <_svfiprintf_r+0xf6>
 80266e6:	9a07      	ldr	r2, [sp, #28]
 80266e8:	4654      	mov	r4, sl
 80266ea:	2000      	movs	r0, #0
 80266ec:	f04f 0c0a 	mov.w	ip, #10
 80266f0:	4621      	mov	r1, r4
 80266f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80266f6:	3b30      	subs	r3, #48	; 0x30
 80266f8:	2b09      	cmp	r3, #9
 80266fa:	d94e      	bls.n	802679a <_svfiprintf_r+0x17e>
 80266fc:	b1b0      	cbz	r0, 802672c <_svfiprintf_r+0x110>
 80266fe:	9207      	str	r2, [sp, #28]
 8026700:	e014      	b.n	802672c <_svfiprintf_r+0x110>
 8026702:	eba0 0308 	sub.w	r3, r0, r8
 8026706:	fa09 f303 	lsl.w	r3, r9, r3
 802670a:	4313      	orrs	r3, r2
 802670c:	9304      	str	r3, [sp, #16]
 802670e:	46a2      	mov	sl, r4
 8026710:	e7d2      	b.n	80266b8 <_svfiprintf_r+0x9c>
 8026712:	9b03      	ldr	r3, [sp, #12]
 8026714:	1d19      	adds	r1, r3, #4
 8026716:	681b      	ldr	r3, [r3, #0]
 8026718:	9103      	str	r1, [sp, #12]
 802671a:	2b00      	cmp	r3, #0
 802671c:	bfbb      	ittet	lt
 802671e:	425b      	neglt	r3, r3
 8026720:	f042 0202 	orrlt.w	r2, r2, #2
 8026724:	9307      	strge	r3, [sp, #28]
 8026726:	9307      	strlt	r3, [sp, #28]
 8026728:	bfb8      	it	lt
 802672a:	9204      	strlt	r2, [sp, #16]
 802672c:	7823      	ldrb	r3, [r4, #0]
 802672e:	2b2e      	cmp	r3, #46	; 0x2e
 8026730:	d10c      	bne.n	802674c <_svfiprintf_r+0x130>
 8026732:	7863      	ldrb	r3, [r4, #1]
 8026734:	2b2a      	cmp	r3, #42	; 0x2a
 8026736:	d135      	bne.n	80267a4 <_svfiprintf_r+0x188>
 8026738:	9b03      	ldr	r3, [sp, #12]
 802673a:	1d1a      	adds	r2, r3, #4
 802673c:	681b      	ldr	r3, [r3, #0]
 802673e:	9203      	str	r2, [sp, #12]
 8026740:	2b00      	cmp	r3, #0
 8026742:	bfb8      	it	lt
 8026744:	f04f 33ff 	movlt.w	r3, #4294967295
 8026748:	3402      	adds	r4, #2
 802674a:	9305      	str	r3, [sp, #20]
 802674c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8026818 <_svfiprintf_r+0x1fc>
 8026750:	7821      	ldrb	r1, [r4, #0]
 8026752:	2203      	movs	r2, #3
 8026754:	4650      	mov	r0, sl
 8026756:	f7d9 fd4b 	bl	80001f0 <memchr>
 802675a:	b140      	cbz	r0, 802676e <_svfiprintf_r+0x152>
 802675c:	2340      	movs	r3, #64	; 0x40
 802675e:	eba0 000a 	sub.w	r0, r0, sl
 8026762:	fa03 f000 	lsl.w	r0, r3, r0
 8026766:	9b04      	ldr	r3, [sp, #16]
 8026768:	4303      	orrs	r3, r0
 802676a:	3401      	adds	r4, #1
 802676c:	9304      	str	r3, [sp, #16]
 802676e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026772:	4826      	ldr	r0, [pc, #152]	; (802680c <_svfiprintf_r+0x1f0>)
 8026774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026778:	2206      	movs	r2, #6
 802677a:	f7d9 fd39 	bl	80001f0 <memchr>
 802677e:	2800      	cmp	r0, #0
 8026780:	d038      	beq.n	80267f4 <_svfiprintf_r+0x1d8>
 8026782:	4b23      	ldr	r3, [pc, #140]	; (8026810 <_svfiprintf_r+0x1f4>)
 8026784:	bb1b      	cbnz	r3, 80267ce <_svfiprintf_r+0x1b2>
 8026786:	9b03      	ldr	r3, [sp, #12]
 8026788:	3307      	adds	r3, #7
 802678a:	f023 0307 	bic.w	r3, r3, #7
 802678e:	3308      	adds	r3, #8
 8026790:	9303      	str	r3, [sp, #12]
 8026792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026794:	4433      	add	r3, r6
 8026796:	9309      	str	r3, [sp, #36]	; 0x24
 8026798:	e767      	b.n	802666a <_svfiprintf_r+0x4e>
 802679a:	fb0c 3202 	mla	r2, ip, r2, r3
 802679e:	460c      	mov	r4, r1
 80267a0:	2001      	movs	r0, #1
 80267a2:	e7a5      	b.n	80266f0 <_svfiprintf_r+0xd4>
 80267a4:	2300      	movs	r3, #0
 80267a6:	3401      	adds	r4, #1
 80267a8:	9305      	str	r3, [sp, #20]
 80267aa:	4619      	mov	r1, r3
 80267ac:	f04f 0c0a 	mov.w	ip, #10
 80267b0:	4620      	mov	r0, r4
 80267b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80267b6:	3a30      	subs	r2, #48	; 0x30
 80267b8:	2a09      	cmp	r2, #9
 80267ba:	d903      	bls.n	80267c4 <_svfiprintf_r+0x1a8>
 80267bc:	2b00      	cmp	r3, #0
 80267be:	d0c5      	beq.n	802674c <_svfiprintf_r+0x130>
 80267c0:	9105      	str	r1, [sp, #20]
 80267c2:	e7c3      	b.n	802674c <_svfiprintf_r+0x130>
 80267c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80267c8:	4604      	mov	r4, r0
 80267ca:	2301      	movs	r3, #1
 80267cc:	e7f0      	b.n	80267b0 <_svfiprintf_r+0x194>
 80267ce:	ab03      	add	r3, sp, #12
 80267d0:	9300      	str	r3, [sp, #0]
 80267d2:	462a      	mov	r2, r5
 80267d4:	4b0f      	ldr	r3, [pc, #60]	; (8026814 <_svfiprintf_r+0x1f8>)
 80267d6:	a904      	add	r1, sp, #16
 80267d8:	4638      	mov	r0, r7
 80267da:	f3af 8000 	nop.w
 80267de:	1c42      	adds	r2, r0, #1
 80267e0:	4606      	mov	r6, r0
 80267e2:	d1d6      	bne.n	8026792 <_svfiprintf_r+0x176>
 80267e4:	89ab      	ldrh	r3, [r5, #12]
 80267e6:	065b      	lsls	r3, r3, #25
 80267e8:	f53f af2c 	bmi.w	8026644 <_svfiprintf_r+0x28>
 80267ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80267ee:	b01d      	add	sp, #116	; 0x74
 80267f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267f4:	ab03      	add	r3, sp, #12
 80267f6:	9300      	str	r3, [sp, #0]
 80267f8:	462a      	mov	r2, r5
 80267fa:	4b06      	ldr	r3, [pc, #24]	; (8026814 <_svfiprintf_r+0x1f8>)
 80267fc:	a904      	add	r1, sp, #16
 80267fe:	4638      	mov	r0, r7
 8026800:	f7fe ff7c 	bl	80256fc <_printf_i>
 8026804:	e7eb      	b.n	80267de <_svfiprintf_r+0x1c2>
 8026806:	bf00      	nop
 8026808:	0802b5a4 	.word	0x0802b5a4
 802680c:	0802b5ae 	.word	0x0802b5ae
 8026810:	00000000 	.word	0x00000000
 8026814:	08026565 	.word	0x08026565
 8026818:	0802b5aa 	.word	0x0802b5aa

0802681c <_sungetc_r>:
 802681c:	b538      	push	{r3, r4, r5, lr}
 802681e:	1c4b      	adds	r3, r1, #1
 8026820:	4614      	mov	r4, r2
 8026822:	d103      	bne.n	802682c <_sungetc_r+0x10>
 8026824:	f04f 35ff 	mov.w	r5, #4294967295
 8026828:	4628      	mov	r0, r5
 802682a:	bd38      	pop	{r3, r4, r5, pc}
 802682c:	8993      	ldrh	r3, [r2, #12]
 802682e:	f023 0320 	bic.w	r3, r3, #32
 8026832:	8193      	strh	r3, [r2, #12]
 8026834:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026836:	6852      	ldr	r2, [r2, #4]
 8026838:	b2cd      	uxtb	r5, r1
 802683a:	b18b      	cbz	r3, 8026860 <_sungetc_r+0x44>
 802683c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802683e:	4293      	cmp	r3, r2
 8026840:	dd08      	ble.n	8026854 <_sungetc_r+0x38>
 8026842:	6823      	ldr	r3, [r4, #0]
 8026844:	1e5a      	subs	r2, r3, #1
 8026846:	6022      	str	r2, [r4, #0]
 8026848:	f803 5c01 	strb.w	r5, [r3, #-1]
 802684c:	6863      	ldr	r3, [r4, #4]
 802684e:	3301      	adds	r3, #1
 8026850:	6063      	str	r3, [r4, #4]
 8026852:	e7e9      	b.n	8026828 <_sungetc_r+0xc>
 8026854:	4621      	mov	r1, r4
 8026856:	f000 fbc9 	bl	8026fec <__submore>
 802685a:	2800      	cmp	r0, #0
 802685c:	d0f1      	beq.n	8026842 <_sungetc_r+0x26>
 802685e:	e7e1      	b.n	8026824 <_sungetc_r+0x8>
 8026860:	6921      	ldr	r1, [r4, #16]
 8026862:	6823      	ldr	r3, [r4, #0]
 8026864:	b151      	cbz	r1, 802687c <_sungetc_r+0x60>
 8026866:	4299      	cmp	r1, r3
 8026868:	d208      	bcs.n	802687c <_sungetc_r+0x60>
 802686a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802686e:	42a9      	cmp	r1, r5
 8026870:	d104      	bne.n	802687c <_sungetc_r+0x60>
 8026872:	3b01      	subs	r3, #1
 8026874:	3201      	adds	r2, #1
 8026876:	6023      	str	r3, [r4, #0]
 8026878:	6062      	str	r2, [r4, #4]
 802687a:	e7d5      	b.n	8026828 <_sungetc_r+0xc>
 802687c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8026880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026884:	6363      	str	r3, [r4, #52]	; 0x34
 8026886:	2303      	movs	r3, #3
 8026888:	63a3      	str	r3, [r4, #56]	; 0x38
 802688a:	4623      	mov	r3, r4
 802688c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8026890:	6023      	str	r3, [r4, #0]
 8026892:	2301      	movs	r3, #1
 8026894:	e7dc      	b.n	8026850 <_sungetc_r+0x34>

08026896 <__ssrefill_r>:
 8026896:	b510      	push	{r4, lr}
 8026898:	460c      	mov	r4, r1
 802689a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802689c:	b169      	cbz	r1, 80268ba <__ssrefill_r+0x24>
 802689e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80268a2:	4299      	cmp	r1, r3
 80268a4:	d001      	beq.n	80268aa <__ssrefill_r+0x14>
 80268a6:	f7fe fcb7 	bl	8025218 <_free_r>
 80268aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80268ac:	6063      	str	r3, [r4, #4]
 80268ae:	2000      	movs	r0, #0
 80268b0:	6360      	str	r0, [r4, #52]	; 0x34
 80268b2:	b113      	cbz	r3, 80268ba <__ssrefill_r+0x24>
 80268b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80268b6:	6023      	str	r3, [r4, #0]
 80268b8:	bd10      	pop	{r4, pc}
 80268ba:	6923      	ldr	r3, [r4, #16]
 80268bc:	6023      	str	r3, [r4, #0]
 80268be:	2300      	movs	r3, #0
 80268c0:	6063      	str	r3, [r4, #4]
 80268c2:	89a3      	ldrh	r3, [r4, #12]
 80268c4:	f043 0320 	orr.w	r3, r3, #32
 80268c8:	81a3      	strh	r3, [r4, #12]
 80268ca:	f04f 30ff 	mov.w	r0, #4294967295
 80268ce:	e7f3      	b.n	80268b8 <__ssrefill_r+0x22>

080268d0 <__ssvfiscanf_r>:
 80268d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268d4:	460c      	mov	r4, r1
 80268d6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80268da:	2100      	movs	r1, #0
 80268dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80268e0:	49b2      	ldr	r1, [pc, #712]	; (8026bac <__ssvfiscanf_r+0x2dc>)
 80268e2:	91a0      	str	r1, [sp, #640]	; 0x280
 80268e4:	f10d 0804 	add.w	r8, sp, #4
 80268e8:	49b1      	ldr	r1, [pc, #708]	; (8026bb0 <__ssvfiscanf_r+0x2e0>)
 80268ea:	4fb2      	ldr	r7, [pc, #712]	; (8026bb4 <__ssvfiscanf_r+0x2e4>)
 80268ec:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8026bb8 <__ssvfiscanf_r+0x2e8>
 80268f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80268f4:	4606      	mov	r6, r0
 80268f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80268f8:	9300      	str	r3, [sp, #0]
 80268fa:	f892 a000 	ldrb.w	sl, [r2]
 80268fe:	f1ba 0f00 	cmp.w	sl, #0
 8026902:	f000 8151 	beq.w	8026ba8 <__ssvfiscanf_r+0x2d8>
 8026906:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802690a:	f013 0308 	ands.w	r3, r3, #8
 802690e:	f102 0501 	add.w	r5, r2, #1
 8026912:	d019      	beq.n	8026948 <__ssvfiscanf_r+0x78>
 8026914:	6863      	ldr	r3, [r4, #4]
 8026916:	2b00      	cmp	r3, #0
 8026918:	dd0f      	ble.n	802693a <__ssvfiscanf_r+0x6a>
 802691a:	6823      	ldr	r3, [r4, #0]
 802691c:	781a      	ldrb	r2, [r3, #0]
 802691e:	5cba      	ldrb	r2, [r7, r2]
 8026920:	0712      	lsls	r2, r2, #28
 8026922:	d401      	bmi.n	8026928 <__ssvfiscanf_r+0x58>
 8026924:	462a      	mov	r2, r5
 8026926:	e7e8      	b.n	80268fa <__ssvfiscanf_r+0x2a>
 8026928:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802692a:	3201      	adds	r2, #1
 802692c:	9245      	str	r2, [sp, #276]	; 0x114
 802692e:	6862      	ldr	r2, [r4, #4]
 8026930:	3301      	adds	r3, #1
 8026932:	3a01      	subs	r2, #1
 8026934:	6062      	str	r2, [r4, #4]
 8026936:	6023      	str	r3, [r4, #0]
 8026938:	e7ec      	b.n	8026914 <__ssvfiscanf_r+0x44>
 802693a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802693c:	4621      	mov	r1, r4
 802693e:	4630      	mov	r0, r6
 8026940:	4798      	blx	r3
 8026942:	2800      	cmp	r0, #0
 8026944:	d0e9      	beq.n	802691a <__ssvfiscanf_r+0x4a>
 8026946:	e7ed      	b.n	8026924 <__ssvfiscanf_r+0x54>
 8026948:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 802694c:	f040 8083 	bne.w	8026a56 <__ssvfiscanf_r+0x186>
 8026950:	9341      	str	r3, [sp, #260]	; 0x104
 8026952:	9343      	str	r3, [sp, #268]	; 0x10c
 8026954:	7853      	ldrb	r3, [r2, #1]
 8026956:	2b2a      	cmp	r3, #42	; 0x2a
 8026958:	bf02      	ittt	eq
 802695a:	2310      	moveq	r3, #16
 802695c:	1c95      	addeq	r5, r2, #2
 802695e:	9341      	streq	r3, [sp, #260]	; 0x104
 8026960:	220a      	movs	r2, #10
 8026962:	46ab      	mov	fp, r5
 8026964:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8026968:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802696c:	2b09      	cmp	r3, #9
 802696e:	d91d      	bls.n	80269ac <__ssvfiscanf_r+0xdc>
 8026970:	4891      	ldr	r0, [pc, #580]	; (8026bb8 <__ssvfiscanf_r+0x2e8>)
 8026972:	2203      	movs	r2, #3
 8026974:	f7d9 fc3c 	bl	80001f0 <memchr>
 8026978:	b140      	cbz	r0, 802698c <__ssvfiscanf_r+0xbc>
 802697a:	2301      	movs	r3, #1
 802697c:	eba0 0009 	sub.w	r0, r0, r9
 8026980:	fa03 f000 	lsl.w	r0, r3, r0
 8026984:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8026986:	4318      	orrs	r0, r3
 8026988:	9041      	str	r0, [sp, #260]	; 0x104
 802698a:	465d      	mov	r5, fp
 802698c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8026990:	2b78      	cmp	r3, #120	; 0x78
 8026992:	d806      	bhi.n	80269a2 <__ssvfiscanf_r+0xd2>
 8026994:	2b57      	cmp	r3, #87	; 0x57
 8026996:	d810      	bhi.n	80269ba <__ssvfiscanf_r+0xea>
 8026998:	2b25      	cmp	r3, #37	; 0x25
 802699a:	d05c      	beq.n	8026a56 <__ssvfiscanf_r+0x186>
 802699c:	d856      	bhi.n	8026a4c <__ssvfiscanf_r+0x17c>
 802699e:	2b00      	cmp	r3, #0
 80269a0:	d074      	beq.n	8026a8c <__ssvfiscanf_r+0x1bc>
 80269a2:	2303      	movs	r3, #3
 80269a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80269a6:	230a      	movs	r3, #10
 80269a8:	9342      	str	r3, [sp, #264]	; 0x108
 80269aa:	e081      	b.n	8026ab0 <__ssvfiscanf_r+0x1e0>
 80269ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80269ae:	fb02 1303 	mla	r3, r2, r3, r1
 80269b2:	3b30      	subs	r3, #48	; 0x30
 80269b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80269b6:	465d      	mov	r5, fp
 80269b8:	e7d3      	b.n	8026962 <__ssvfiscanf_r+0x92>
 80269ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80269be:	2a20      	cmp	r2, #32
 80269c0:	d8ef      	bhi.n	80269a2 <__ssvfiscanf_r+0xd2>
 80269c2:	a101      	add	r1, pc, #4	; (adr r1, 80269c8 <__ssvfiscanf_r+0xf8>)
 80269c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80269c8:	08026a9b 	.word	0x08026a9b
 80269cc:	080269a3 	.word	0x080269a3
 80269d0:	080269a3 	.word	0x080269a3
 80269d4:	08026af9 	.word	0x08026af9
 80269d8:	080269a3 	.word	0x080269a3
 80269dc:	080269a3 	.word	0x080269a3
 80269e0:	080269a3 	.word	0x080269a3
 80269e4:	080269a3 	.word	0x080269a3
 80269e8:	080269a3 	.word	0x080269a3
 80269ec:	080269a3 	.word	0x080269a3
 80269f0:	080269a3 	.word	0x080269a3
 80269f4:	08026b0f 	.word	0x08026b0f
 80269f8:	08026ae5 	.word	0x08026ae5
 80269fc:	08026a53 	.word	0x08026a53
 8026a00:	08026a53 	.word	0x08026a53
 8026a04:	08026a53 	.word	0x08026a53
 8026a08:	080269a3 	.word	0x080269a3
 8026a0c:	08026ae9 	.word	0x08026ae9
 8026a10:	080269a3 	.word	0x080269a3
 8026a14:	080269a3 	.word	0x080269a3
 8026a18:	080269a3 	.word	0x080269a3
 8026a1c:	080269a3 	.word	0x080269a3
 8026a20:	08026b1f 	.word	0x08026b1f
 8026a24:	08026af1 	.word	0x08026af1
 8026a28:	08026a93 	.word	0x08026a93
 8026a2c:	080269a3 	.word	0x080269a3
 8026a30:	080269a3 	.word	0x080269a3
 8026a34:	08026b1b 	.word	0x08026b1b
 8026a38:	080269a3 	.word	0x080269a3
 8026a3c:	08026ae5 	.word	0x08026ae5
 8026a40:	080269a3 	.word	0x080269a3
 8026a44:	080269a3 	.word	0x080269a3
 8026a48:	08026a9b 	.word	0x08026a9b
 8026a4c:	3b45      	subs	r3, #69	; 0x45
 8026a4e:	2b02      	cmp	r3, #2
 8026a50:	d8a7      	bhi.n	80269a2 <__ssvfiscanf_r+0xd2>
 8026a52:	2305      	movs	r3, #5
 8026a54:	e02b      	b.n	8026aae <__ssvfiscanf_r+0x1de>
 8026a56:	6863      	ldr	r3, [r4, #4]
 8026a58:	2b00      	cmp	r3, #0
 8026a5a:	dd0d      	ble.n	8026a78 <__ssvfiscanf_r+0x1a8>
 8026a5c:	6823      	ldr	r3, [r4, #0]
 8026a5e:	781a      	ldrb	r2, [r3, #0]
 8026a60:	4552      	cmp	r2, sl
 8026a62:	f040 80a1 	bne.w	8026ba8 <__ssvfiscanf_r+0x2d8>
 8026a66:	3301      	adds	r3, #1
 8026a68:	6862      	ldr	r2, [r4, #4]
 8026a6a:	6023      	str	r3, [r4, #0]
 8026a6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8026a6e:	3a01      	subs	r2, #1
 8026a70:	3301      	adds	r3, #1
 8026a72:	6062      	str	r2, [r4, #4]
 8026a74:	9345      	str	r3, [sp, #276]	; 0x114
 8026a76:	e755      	b.n	8026924 <__ssvfiscanf_r+0x54>
 8026a78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8026a7a:	4621      	mov	r1, r4
 8026a7c:	4630      	mov	r0, r6
 8026a7e:	4798      	blx	r3
 8026a80:	2800      	cmp	r0, #0
 8026a82:	d0eb      	beq.n	8026a5c <__ssvfiscanf_r+0x18c>
 8026a84:	9844      	ldr	r0, [sp, #272]	; 0x110
 8026a86:	2800      	cmp	r0, #0
 8026a88:	f040 8084 	bne.w	8026b94 <__ssvfiscanf_r+0x2c4>
 8026a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8026a90:	e086      	b.n	8026ba0 <__ssvfiscanf_r+0x2d0>
 8026a92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8026a94:	f042 0220 	orr.w	r2, r2, #32
 8026a98:	9241      	str	r2, [sp, #260]	; 0x104
 8026a9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8026a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8026aa0:	9241      	str	r2, [sp, #260]	; 0x104
 8026aa2:	2210      	movs	r2, #16
 8026aa4:	2b6f      	cmp	r3, #111	; 0x6f
 8026aa6:	9242      	str	r2, [sp, #264]	; 0x108
 8026aa8:	bf34      	ite	cc
 8026aaa:	2303      	movcc	r3, #3
 8026aac:	2304      	movcs	r3, #4
 8026aae:	9347      	str	r3, [sp, #284]	; 0x11c
 8026ab0:	6863      	ldr	r3, [r4, #4]
 8026ab2:	2b00      	cmp	r3, #0
 8026ab4:	dd41      	ble.n	8026b3a <__ssvfiscanf_r+0x26a>
 8026ab6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8026ab8:	0659      	lsls	r1, r3, #25
 8026aba:	d404      	bmi.n	8026ac6 <__ssvfiscanf_r+0x1f6>
 8026abc:	6823      	ldr	r3, [r4, #0]
 8026abe:	781a      	ldrb	r2, [r3, #0]
 8026ac0:	5cba      	ldrb	r2, [r7, r2]
 8026ac2:	0712      	lsls	r2, r2, #28
 8026ac4:	d440      	bmi.n	8026b48 <__ssvfiscanf_r+0x278>
 8026ac6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8026ac8:	2b02      	cmp	r3, #2
 8026aca:	dc4f      	bgt.n	8026b6c <__ssvfiscanf_r+0x29c>
 8026acc:	466b      	mov	r3, sp
 8026ace:	4622      	mov	r2, r4
 8026ad0:	a941      	add	r1, sp, #260	; 0x104
 8026ad2:	4630      	mov	r0, r6
 8026ad4:	f000 f874 	bl	8026bc0 <_scanf_chars>
 8026ad8:	2801      	cmp	r0, #1
 8026ada:	d065      	beq.n	8026ba8 <__ssvfiscanf_r+0x2d8>
 8026adc:	2802      	cmp	r0, #2
 8026ade:	f47f af21 	bne.w	8026924 <__ssvfiscanf_r+0x54>
 8026ae2:	e7cf      	b.n	8026a84 <__ssvfiscanf_r+0x1b4>
 8026ae4:	220a      	movs	r2, #10
 8026ae6:	e7dd      	b.n	8026aa4 <__ssvfiscanf_r+0x1d4>
 8026ae8:	2300      	movs	r3, #0
 8026aea:	9342      	str	r3, [sp, #264]	; 0x108
 8026aec:	2303      	movs	r3, #3
 8026aee:	e7de      	b.n	8026aae <__ssvfiscanf_r+0x1de>
 8026af0:	2308      	movs	r3, #8
 8026af2:	9342      	str	r3, [sp, #264]	; 0x108
 8026af4:	2304      	movs	r3, #4
 8026af6:	e7da      	b.n	8026aae <__ssvfiscanf_r+0x1de>
 8026af8:	4629      	mov	r1, r5
 8026afa:	4640      	mov	r0, r8
 8026afc:	f000 f9be 	bl	8026e7c <__sccl>
 8026b00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8026b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026b06:	9341      	str	r3, [sp, #260]	; 0x104
 8026b08:	4605      	mov	r5, r0
 8026b0a:	2301      	movs	r3, #1
 8026b0c:	e7cf      	b.n	8026aae <__ssvfiscanf_r+0x1de>
 8026b0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8026b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026b14:	9341      	str	r3, [sp, #260]	; 0x104
 8026b16:	2300      	movs	r3, #0
 8026b18:	e7c9      	b.n	8026aae <__ssvfiscanf_r+0x1de>
 8026b1a:	2302      	movs	r3, #2
 8026b1c:	e7c7      	b.n	8026aae <__ssvfiscanf_r+0x1de>
 8026b1e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8026b20:	06c3      	lsls	r3, r0, #27
 8026b22:	f53f aeff 	bmi.w	8026924 <__ssvfiscanf_r+0x54>
 8026b26:	9b00      	ldr	r3, [sp, #0]
 8026b28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8026b2a:	1d19      	adds	r1, r3, #4
 8026b2c:	9100      	str	r1, [sp, #0]
 8026b2e:	681b      	ldr	r3, [r3, #0]
 8026b30:	07c0      	lsls	r0, r0, #31
 8026b32:	bf4c      	ite	mi
 8026b34:	801a      	strhmi	r2, [r3, #0]
 8026b36:	601a      	strpl	r2, [r3, #0]
 8026b38:	e6f4      	b.n	8026924 <__ssvfiscanf_r+0x54>
 8026b3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8026b3c:	4621      	mov	r1, r4
 8026b3e:	4630      	mov	r0, r6
 8026b40:	4798      	blx	r3
 8026b42:	2800      	cmp	r0, #0
 8026b44:	d0b7      	beq.n	8026ab6 <__ssvfiscanf_r+0x1e6>
 8026b46:	e79d      	b.n	8026a84 <__ssvfiscanf_r+0x1b4>
 8026b48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8026b4a:	3201      	adds	r2, #1
 8026b4c:	9245      	str	r2, [sp, #276]	; 0x114
 8026b4e:	6862      	ldr	r2, [r4, #4]
 8026b50:	3a01      	subs	r2, #1
 8026b52:	2a00      	cmp	r2, #0
 8026b54:	6062      	str	r2, [r4, #4]
 8026b56:	dd02      	ble.n	8026b5e <__ssvfiscanf_r+0x28e>
 8026b58:	3301      	adds	r3, #1
 8026b5a:	6023      	str	r3, [r4, #0]
 8026b5c:	e7ae      	b.n	8026abc <__ssvfiscanf_r+0x1ec>
 8026b5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8026b60:	4621      	mov	r1, r4
 8026b62:	4630      	mov	r0, r6
 8026b64:	4798      	blx	r3
 8026b66:	2800      	cmp	r0, #0
 8026b68:	d0a8      	beq.n	8026abc <__ssvfiscanf_r+0x1ec>
 8026b6a:	e78b      	b.n	8026a84 <__ssvfiscanf_r+0x1b4>
 8026b6c:	2b04      	cmp	r3, #4
 8026b6e:	dc06      	bgt.n	8026b7e <__ssvfiscanf_r+0x2ae>
 8026b70:	466b      	mov	r3, sp
 8026b72:	4622      	mov	r2, r4
 8026b74:	a941      	add	r1, sp, #260	; 0x104
 8026b76:	4630      	mov	r0, r6
 8026b78:	f000 f87a 	bl	8026c70 <_scanf_i>
 8026b7c:	e7ac      	b.n	8026ad8 <__ssvfiscanf_r+0x208>
 8026b7e:	4b0f      	ldr	r3, [pc, #60]	; (8026bbc <__ssvfiscanf_r+0x2ec>)
 8026b80:	2b00      	cmp	r3, #0
 8026b82:	f43f aecf 	beq.w	8026924 <__ssvfiscanf_r+0x54>
 8026b86:	466b      	mov	r3, sp
 8026b88:	4622      	mov	r2, r4
 8026b8a:	a941      	add	r1, sp, #260	; 0x104
 8026b8c:	4630      	mov	r0, r6
 8026b8e:	f3af 8000 	nop.w
 8026b92:	e7a1      	b.n	8026ad8 <__ssvfiscanf_r+0x208>
 8026b94:	89a3      	ldrh	r3, [r4, #12]
 8026b96:	f013 0f40 	tst.w	r3, #64	; 0x40
 8026b9a:	bf18      	it	ne
 8026b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8026ba0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8026ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ba8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8026baa:	e7f9      	b.n	8026ba0 <__ssvfiscanf_r+0x2d0>
 8026bac:	0802681d 	.word	0x0802681d
 8026bb0:	08026897 	.word	0x08026897
 8026bb4:	0802b49d 	.word	0x0802b49d
 8026bb8:	0802b5aa 	.word	0x0802b5aa
 8026bbc:	00000000 	.word	0x00000000

08026bc0 <_scanf_chars>:
 8026bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026bc4:	4615      	mov	r5, r2
 8026bc6:	688a      	ldr	r2, [r1, #8]
 8026bc8:	4680      	mov	r8, r0
 8026bca:	460c      	mov	r4, r1
 8026bcc:	b932      	cbnz	r2, 8026bdc <_scanf_chars+0x1c>
 8026bce:	698a      	ldr	r2, [r1, #24]
 8026bd0:	2a00      	cmp	r2, #0
 8026bd2:	bf0c      	ite	eq
 8026bd4:	2201      	moveq	r2, #1
 8026bd6:	f04f 32ff 	movne.w	r2, #4294967295
 8026bda:	608a      	str	r2, [r1, #8]
 8026bdc:	6822      	ldr	r2, [r4, #0]
 8026bde:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8026c6c <_scanf_chars+0xac>
 8026be2:	06d1      	lsls	r1, r2, #27
 8026be4:	bf5f      	itttt	pl
 8026be6:	681a      	ldrpl	r2, [r3, #0]
 8026be8:	1d11      	addpl	r1, r2, #4
 8026bea:	6019      	strpl	r1, [r3, #0]
 8026bec:	6816      	ldrpl	r6, [r2, #0]
 8026bee:	2700      	movs	r7, #0
 8026bf0:	69a0      	ldr	r0, [r4, #24]
 8026bf2:	b188      	cbz	r0, 8026c18 <_scanf_chars+0x58>
 8026bf4:	2801      	cmp	r0, #1
 8026bf6:	d107      	bne.n	8026c08 <_scanf_chars+0x48>
 8026bf8:	682b      	ldr	r3, [r5, #0]
 8026bfa:	781a      	ldrb	r2, [r3, #0]
 8026bfc:	6963      	ldr	r3, [r4, #20]
 8026bfe:	5c9b      	ldrb	r3, [r3, r2]
 8026c00:	b953      	cbnz	r3, 8026c18 <_scanf_chars+0x58>
 8026c02:	bb27      	cbnz	r7, 8026c4e <_scanf_chars+0x8e>
 8026c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026c08:	2802      	cmp	r0, #2
 8026c0a:	d120      	bne.n	8026c4e <_scanf_chars+0x8e>
 8026c0c:	682b      	ldr	r3, [r5, #0]
 8026c0e:	781b      	ldrb	r3, [r3, #0]
 8026c10:	f813 3009 	ldrb.w	r3, [r3, r9]
 8026c14:	071b      	lsls	r3, r3, #28
 8026c16:	d41a      	bmi.n	8026c4e <_scanf_chars+0x8e>
 8026c18:	6823      	ldr	r3, [r4, #0]
 8026c1a:	06da      	lsls	r2, r3, #27
 8026c1c:	bf5e      	ittt	pl
 8026c1e:	682b      	ldrpl	r3, [r5, #0]
 8026c20:	781b      	ldrbpl	r3, [r3, #0]
 8026c22:	f806 3b01 	strbpl.w	r3, [r6], #1
 8026c26:	682a      	ldr	r2, [r5, #0]
 8026c28:	686b      	ldr	r3, [r5, #4]
 8026c2a:	3201      	adds	r2, #1
 8026c2c:	602a      	str	r2, [r5, #0]
 8026c2e:	68a2      	ldr	r2, [r4, #8]
 8026c30:	3b01      	subs	r3, #1
 8026c32:	3a01      	subs	r2, #1
 8026c34:	606b      	str	r3, [r5, #4]
 8026c36:	3701      	adds	r7, #1
 8026c38:	60a2      	str	r2, [r4, #8]
 8026c3a:	b142      	cbz	r2, 8026c4e <_scanf_chars+0x8e>
 8026c3c:	2b00      	cmp	r3, #0
 8026c3e:	dcd7      	bgt.n	8026bf0 <_scanf_chars+0x30>
 8026c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8026c44:	4629      	mov	r1, r5
 8026c46:	4640      	mov	r0, r8
 8026c48:	4798      	blx	r3
 8026c4a:	2800      	cmp	r0, #0
 8026c4c:	d0d0      	beq.n	8026bf0 <_scanf_chars+0x30>
 8026c4e:	6823      	ldr	r3, [r4, #0]
 8026c50:	f013 0310 	ands.w	r3, r3, #16
 8026c54:	d105      	bne.n	8026c62 <_scanf_chars+0xa2>
 8026c56:	68e2      	ldr	r2, [r4, #12]
 8026c58:	3201      	adds	r2, #1
 8026c5a:	60e2      	str	r2, [r4, #12]
 8026c5c:	69a2      	ldr	r2, [r4, #24]
 8026c5e:	b102      	cbz	r2, 8026c62 <_scanf_chars+0xa2>
 8026c60:	7033      	strb	r3, [r6, #0]
 8026c62:	6923      	ldr	r3, [r4, #16]
 8026c64:	441f      	add	r7, r3
 8026c66:	6127      	str	r7, [r4, #16]
 8026c68:	2000      	movs	r0, #0
 8026c6a:	e7cb      	b.n	8026c04 <_scanf_chars+0x44>
 8026c6c:	0802b49d 	.word	0x0802b49d

08026c70 <_scanf_i>:
 8026c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c74:	4698      	mov	r8, r3
 8026c76:	4b74      	ldr	r3, [pc, #464]	; (8026e48 <_scanf_i+0x1d8>)
 8026c78:	460c      	mov	r4, r1
 8026c7a:	4682      	mov	sl, r0
 8026c7c:	4616      	mov	r6, r2
 8026c7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8026c82:	b087      	sub	sp, #28
 8026c84:	ab03      	add	r3, sp, #12
 8026c86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8026c8a:	4b70      	ldr	r3, [pc, #448]	; (8026e4c <_scanf_i+0x1dc>)
 8026c8c:	69a1      	ldr	r1, [r4, #24]
 8026c8e:	4a70      	ldr	r2, [pc, #448]	; (8026e50 <_scanf_i+0x1e0>)
 8026c90:	2903      	cmp	r1, #3
 8026c92:	bf18      	it	ne
 8026c94:	461a      	movne	r2, r3
 8026c96:	68a3      	ldr	r3, [r4, #8]
 8026c98:	9201      	str	r2, [sp, #4]
 8026c9a:	1e5a      	subs	r2, r3, #1
 8026c9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8026ca0:	bf88      	it	hi
 8026ca2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8026ca6:	4627      	mov	r7, r4
 8026ca8:	bf82      	ittt	hi
 8026caa:	eb03 0905 	addhi.w	r9, r3, r5
 8026cae:	f240 135d 	movwhi	r3, #349	; 0x15d
 8026cb2:	60a3      	strhi	r3, [r4, #8]
 8026cb4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8026cb8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8026cbc:	bf98      	it	ls
 8026cbe:	f04f 0900 	movls.w	r9, #0
 8026cc2:	6023      	str	r3, [r4, #0]
 8026cc4:	463d      	mov	r5, r7
 8026cc6:	f04f 0b00 	mov.w	fp, #0
 8026cca:	6831      	ldr	r1, [r6, #0]
 8026ccc:	ab03      	add	r3, sp, #12
 8026cce:	7809      	ldrb	r1, [r1, #0]
 8026cd0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8026cd4:	2202      	movs	r2, #2
 8026cd6:	f7d9 fa8b 	bl	80001f0 <memchr>
 8026cda:	b328      	cbz	r0, 8026d28 <_scanf_i+0xb8>
 8026cdc:	f1bb 0f01 	cmp.w	fp, #1
 8026ce0:	d159      	bne.n	8026d96 <_scanf_i+0x126>
 8026ce2:	6862      	ldr	r2, [r4, #4]
 8026ce4:	b92a      	cbnz	r2, 8026cf2 <_scanf_i+0x82>
 8026ce6:	6822      	ldr	r2, [r4, #0]
 8026ce8:	2308      	movs	r3, #8
 8026cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8026cee:	6063      	str	r3, [r4, #4]
 8026cf0:	6022      	str	r2, [r4, #0]
 8026cf2:	6822      	ldr	r2, [r4, #0]
 8026cf4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8026cf8:	6022      	str	r2, [r4, #0]
 8026cfa:	68a2      	ldr	r2, [r4, #8]
 8026cfc:	1e51      	subs	r1, r2, #1
 8026cfe:	60a1      	str	r1, [r4, #8]
 8026d00:	b192      	cbz	r2, 8026d28 <_scanf_i+0xb8>
 8026d02:	6832      	ldr	r2, [r6, #0]
 8026d04:	1c51      	adds	r1, r2, #1
 8026d06:	6031      	str	r1, [r6, #0]
 8026d08:	7812      	ldrb	r2, [r2, #0]
 8026d0a:	f805 2b01 	strb.w	r2, [r5], #1
 8026d0e:	6872      	ldr	r2, [r6, #4]
 8026d10:	3a01      	subs	r2, #1
 8026d12:	2a00      	cmp	r2, #0
 8026d14:	6072      	str	r2, [r6, #4]
 8026d16:	dc07      	bgt.n	8026d28 <_scanf_i+0xb8>
 8026d18:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8026d1c:	4631      	mov	r1, r6
 8026d1e:	4650      	mov	r0, sl
 8026d20:	4790      	blx	r2
 8026d22:	2800      	cmp	r0, #0
 8026d24:	f040 8085 	bne.w	8026e32 <_scanf_i+0x1c2>
 8026d28:	f10b 0b01 	add.w	fp, fp, #1
 8026d2c:	f1bb 0f03 	cmp.w	fp, #3
 8026d30:	d1cb      	bne.n	8026cca <_scanf_i+0x5a>
 8026d32:	6863      	ldr	r3, [r4, #4]
 8026d34:	b90b      	cbnz	r3, 8026d3a <_scanf_i+0xca>
 8026d36:	230a      	movs	r3, #10
 8026d38:	6063      	str	r3, [r4, #4]
 8026d3a:	6863      	ldr	r3, [r4, #4]
 8026d3c:	4945      	ldr	r1, [pc, #276]	; (8026e54 <_scanf_i+0x1e4>)
 8026d3e:	6960      	ldr	r0, [r4, #20]
 8026d40:	1ac9      	subs	r1, r1, r3
 8026d42:	f000 f89b 	bl	8026e7c <__sccl>
 8026d46:	f04f 0b00 	mov.w	fp, #0
 8026d4a:	68a3      	ldr	r3, [r4, #8]
 8026d4c:	6822      	ldr	r2, [r4, #0]
 8026d4e:	2b00      	cmp	r3, #0
 8026d50:	d03d      	beq.n	8026dce <_scanf_i+0x15e>
 8026d52:	6831      	ldr	r1, [r6, #0]
 8026d54:	6960      	ldr	r0, [r4, #20]
 8026d56:	f891 c000 	ldrb.w	ip, [r1]
 8026d5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8026d5e:	2800      	cmp	r0, #0
 8026d60:	d035      	beq.n	8026dce <_scanf_i+0x15e>
 8026d62:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8026d66:	d124      	bne.n	8026db2 <_scanf_i+0x142>
 8026d68:	0510      	lsls	r0, r2, #20
 8026d6a:	d522      	bpl.n	8026db2 <_scanf_i+0x142>
 8026d6c:	f10b 0b01 	add.w	fp, fp, #1
 8026d70:	f1b9 0f00 	cmp.w	r9, #0
 8026d74:	d003      	beq.n	8026d7e <_scanf_i+0x10e>
 8026d76:	3301      	adds	r3, #1
 8026d78:	f109 39ff 	add.w	r9, r9, #4294967295
 8026d7c:	60a3      	str	r3, [r4, #8]
 8026d7e:	6873      	ldr	r3, [r6, #4]
 8026d80:	3b01      	subs	r3, #1
 8026d82:	2b00      	cmp	r3, #0
 8026d84:	6073      	str	r3, [r6, #4]
 8026d86:	dd1b      	ble.n	8026dc0 <_scanf_i+0x150>
 8026d88:	6833      	ldr	r3, [r6, #0]
 8026d8a:	3301      	adds	r3, #1
 8026d8c:	6033      	str	r3, [r6, #0]
 8026d8e:	68a3      	ldr	r3, [r4, #8]
 8026d90:	3b01      	subs	r3, #1
 8026d92:	60a3      	str	r3, [r4, #8]
 8026d94:	e7d9      	b.n	8026d4a <_scanf_i+0xda>
 8026d96:	f1bb 0f02 	cmp.w	fp, #2
 8026d9a:	d1ae      	bne.n	8026cfa <_scanf_i+0x8a>
 8026d9c:	6822      	ldr	r2, [r4, #0]
 8026d9e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8026da2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8026da6:	d1bf      	bne.n	8026d28 <_scanf_i+0xb8>
 8026da8:	2310      	movs	r3, #16
 8026daa:	6063      	str	r3, [r4, #4]
 8026dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026db0:	e7a2      	b.n	8026cf8 <_scanf_i+0x88>
 8026db2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8026db6:	6022      	str	r2, [r4, #0]
 8026db8:	780b      	ldrb	r3, [r1, #0]
 8026dba:	f805 3b01 	strb.w	r3, [r5], #1
 8026dbe:	e7de      	b.n	8026d7e <_scanf_i+0x10e>
 8026dc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8026dc4:	4631      	mov	r1, r6
 8026dc6:	4650      	mov	r0, sl
 8026dc8:	4798      	blx	r3
 8026dca:	2800      	cmp	r0, #0
 8026dcc:	d0df      	beq.n	8026d8e <_scanf_i+0x11e>
 8026dce:	6823      	ldr	r3, [r4, #0]
 8026dd0:	05d9      	lsls	r1, r3, #23
 8026dd2:	d50d      	bpl.n	8026df0 <_scanf_i+0x180>
 8026dd4:	42bd      	cmp	r5, r7
 8026dd6:	d909      	bls.n	8026dec <_scanf_i+0x17c>
 8026dd8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8026ddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8026de0:	4632      	mov	r2, r6
 8026de2:	4650      	mov	r0, sl
 8026de4:	4798      	blx	r3
 8026de6:	f105 39ff 	add.w	r9, r5, #4294967295
 8026dea:	464d      	mov	r5, r9
 8026dec:	42bd      	cmp	r5, r7
 8026dee:	d028      	beq.n	8026e42 <_scanf_i+0x1d2>
 8026df0:	6822      	ldr	r2, [r4, #0]
 8026df2:	f012 0210 	ands.w	r2, r2, #16
 8026df6:	d113      	bne.n	8026e20 <_scanf_i+0x1b0>
 8026df8:	702a      	strb	r2, [r5, #0]
 8026dfa:	6863      	ldr	r3, [r4, #4]
 8026dfc:	9e01      	ldr	r6, [sp, #4]
 8026dfe:	4639      	mov	r1, r7
 8026e00:	4650      	mov	r0, sl
 8026e02:	47b0      	blx	r6
 8026e04:	f8d8 3000 	ldr.w	r3, [r8]
 8026e08:	6821      	ldr	r1, [r4, #0]
 8026e0a:	1d1a      	adds	r2, r3, #4
 8026e0c:	f8c8 2000 	str.w	r2, [r8]
 8026e10:	f011 0f20 	tst.w	r1, #32
 8026e14:	681b      	ldr	r3, [r3, #0]
 8026e16:	d00f      	beq.n	8026e38 <_scanf_i+0x1c8>
 8026e18:	6018      	str	r0, [r3, #0]
 8026e1a:	68e3      	ldr	r3, [r4, #12]
 8026e1c:	3301      	adds	r3, #1
 8026e1e:	60e3      	str	r3, [r4, #12]
 8026e20:	1bed      	subs	r5, r5, r7
 8026e22:	44ab      	add	fp, r5
 8026e24:	6925      	ldr	r5, [r4, #16]
 8026e26:	445d      	add	r5, fp
 8026e28:	6125      	str	r5, [r4, #16]
 8026e2a:	2000      	movs	r0, #0
 8026e2c:	b007      	add	sp, #28
 8026e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e32:	f04f 0b00 	mov.w	fp, #0
 8026e36:	e7ca      	b.n	8026dce <_scanf_i+0x15e>
 8026e38:	07ca      	lsls	r2, r1, #31
 8026e3a:	bf4c      	ite	mi
 8026e3c:	8018      	strhmi	r0, [r3, #0]
 8026e3e:	6018      	strpl	r0, [r3, #0]
 8026e40:	e7eb      	b.n	8026e1a <_scanf_i+0x1aa>
 8026e42:	2001      	movs	r0, #1
 8026e44:	e7f2      	b.n	8026e2c <_scanf_i+0x1bc>
 8026e46:	bf00      	nop
 8026e48:	080283d4 	.word	0x080283d4
 8026e4c:	08026fe9 	.word	0x08026fe9
 8026e50:	08025d89 	.word	0x08025d89
 8026e54:	0802b6cd 	.word	0x0802b6cd

08026e58 <_read_r>:
 8026e58:	b538      	push	{r3, r4, r5, lr}
 8026e5a:	4d07      	ldr	r5, [pc, #28]	; (8026e78 <_read_r+0x20>)
 8026e5c:	4604      	mov	r4, r0
 8026e5e:	4608      	mov	r0, r1
 8026e60:	4611      	mov	r1, r2
 8026e62:	2200      	movs	r2, #0
 8026e64:	602a      	str	r2, [r5, #0]
 8026e66:	461a      	mov	r2, r3
 8026e68:	f7dd faea 	bl	8004440 <_read>
 8026e6c:	1c43      	adds	r3, r0, #1
 8026e6e:	d102      	bne.n	8026e76 <_read_r+0x1e>
 8026e70:	682b      	ldr	r3, [r5, #0]
 8026e72:	b103      	cbz	r3, 8026e76 <_read_r+0x1e>
 8026e74:	6023      	str	r3, [r4, #0]
 8026e76:	bd38      	pop	{r3, r4, r5, pc}
 8026e78:	2000b2c4 	.word	0x2000b2c4

08026e7c <__sccl>:
 8026e7c:	b570      	push	{r4, r5, r6, lr}
 8026e7e:	780b      	ldrb	r3, [r1, #0]
 8026e80:	4604      	mov	r4, r0
 8026e82:	2b5e      	cmp	r3, #94	; 0x5e
 8026e84:	bf0b      	itete	eq
 8026e86:	784b      	ldrbeq	r3, [r1, #1]
 8026e88:	1c48      	addne	r0, r1, #1
 8026e8a:	1c88      	addeq	r0, r1, #2
 8026e8c:	2200      	movne	r2, #0
 8026e8e:	bf08      	it	eq
 8026e90:	2201      	moveq	r2, #1
 8026e92:	1e61      	subs	r1, r4, #1
 8026e94:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8026e98:	f801 2f01 	strb.w	r2, [r1, #1]!
 8026e9c:	42a9      	cmp	r1, r5
 8026e9e:	d1fb      	bne.n	8026e98 <__sccl+0x1c>
 8026ea0:	b90b      	cbnz	r3, 8026ea6 <__sccl+0x2a>
 8026ea2:	3801      	subs	r0, #1
 8026ea4:	bd70      	pop	{r4, r5, r6, pc}
 8026ea6:	f082 0101 	eor.w	r1, r2, #1
 8026eaa:	54e1      	strb	r1, [r4, r3]
 8026eac:	1c42      	adds	r2, r0, #1
 8026eae:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8026eb2:	2d2d      	cmp	r5, #45	; 0x2d
 8026eb4:	f102 36ff 	add.w	r6, r2, #4294967295
 8026eb8:	4610      	mov	r0, r2
 8026eba:	d006      	beq.n	8026eca <__sccl+0x4e>
 8026ebc:	2d5d      	cmp	r5, #93	; 0x5d
 8026ebe:	d0f1      	beq.n	8026ea4 <__sccl+0x28>
 8026ec0:	b90d      	cbnz	r5, 8026ec6 <__sccl+0x4a>
 8026ec2:	4630      	mov	r0, r6
 8026ec4:	e7ee      	b.n	8026ea4 <__sccl+0x28>
 8026ec6:	462b      	mov	r3, r5
 8026ec8:	e7ef      	b.n	8026eaa <__sccl+0x2e>
 8026eca:	7816      	ldrb	r6, [r2, #0]
 8026ecc:	2e5d      	cmp	r6, #93	; 0x5d
 8026ece:	d0fa      	beq.n	8026ec6 <__sccl+0x4a>
 8026ed0:	42b3      	cmp	r3, r6
 8026ed2:	dcf8      	bgt.n	8026ec6 <__sccl+0x4a>
 8026ed4:	4618      	mov	r0, r3
 8026ed6:	3001      	adds	r0, #1
 8026ed8:	4286      	cmp	r6, r0
 8026eda:	5421      	strb	r1, [r4, r0]
 8026edc:	dcfb      	bgt.n	8026ed6 <__sccl+0x5a>
 8026ede:	43d8      	mvns	r0, r3
 8026ee0:	4430      	add	r0, r6
 8026ee2:	1c5d      	adds	r5, r3, #1
 8026ee4:	42b3      	cmp	r3, r6
 8026ee6:	bfa8      	it	ge
 8026ee8:	2000      	movge	r0, #0
 8026eea:	182b      	adds	r3, r5, r0
 8026eec:	3202      	adds	r2, #2
 8026eee:	e7de      	b.n	8026eae <__sccl+0x32>

08026ef0 <_strtoul_l.isra.0>:
 8026ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026ef4:	4e3b      	ldr	r6, [pc, #236]	; (8026fe4 <_strtoul_l.isra.0+0xf4>)
 8026ef6:	4686      	mov	lr, r0
 8026ef8:	468c      	mov	ip, r1
 8026efa:	4660      	mov	r0, ip
 8026efc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8026f00:	5da5      	ldrb	r5, [r4, r6]
 8026f02:	f015 0508 	ands.w	r5, r5, #8
 8026f06:	d1f8      	bne.n	8026efa <_strtoul_l.isra.0+0xa>
 8026f08:	2c2d      	cmp	r4, #45	; 0x2d
 8026f0a:	d134      	bne.n	8026f76 <_strtoul_l.isra.0+0x86>
 8026f0c:	f89c 4000 	ldrb.w	r4, [ip]
 8026f10:	f04f 0801 	mov.w	r8, #1
 8026f14:	f100 0c02 	add.w	ip, r0, #2
 8026f18:	2b00      	cmp	r3, #0
 8026f1a:	d05e      	beq.n	8026fda <_strtoul_l.isra.0+0xea>
 8026f1c:	2b10      	cmp	r3, #16
 8026f1e:	d10c      	bne.n	8026f3a <_strtoul_l.isra.0+0x4a>
 8026f20:	2c30      	cmp	r4, #48	; 0x30
 8026f22:	d10a      	bne.n	8026f3a <_strtoul_l.isra.0+0x4a>
 8026f24:	f89c 0000 	ldrb.w	r0, [ip]
 8026f28:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8026f2c:	2858      	cmp	r0, #88	; 0x58
 8026f2e:	d14f      	bne.n	8026fd0 <_strtoul_l.isra.0+0xe0>
 8026f30:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8026f34:	2310      	movs	r3, #16
 8026f36:	f10c 0c02 	add.w	ip, ip, #2
 8026f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8026f3e:	2500      	movs	r5, #0
 8026f40:	fbb7 f7f3 	udiv	r7, r7, r3
 8026f44:	fb03 f907 	mul.w	r9, r3, r7
 8026f48:	ea6f 0909 	mvn.w	r9, r9
 8026f4c:	4628      	mov	r0, r5
 8026f4e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8026f52:	2e09      	cmp	r6, #9
 8026f54:	d818      	bhi.n	8026f88 <_strtoul_l.isra.0+0x98>
 8026f56:	4634      	mov	r4, r6
 8026f58:	42a3      	cmp	r3, r4
 8026f5a:	dd24      	ble.n	8026fa6 <_strtoul_l.isra.0+0xb6>
 8026f5c:	2d00      	cmp	r5, #0
 8026f5e:	db1f      	blt.n	8026fa0 <_strtoul_l.isra.0+0xb0>
 8026f60:	4287      	cmp	r7, r0
 8026f62:	d31d      	bcc.n	8026fa0 <_strtoul_l.isra.0+0xb0>
 8026f64:	d101      	bne.n	8026f6a <_strtoul_l.isra.0+0x7a>
 8026f66:	45a1      	cmp	r9, r4
 8026f68:	db1a      	blt.n	8026fa0 <_strtoul_l.isra.0+0xb0>
 8026f6a:	fb00 4003 	mla	r0, r0, r3, r4
 8026f6e:	2501      	movs	r5, #1
 8026f70:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8026f74:	e7eb      	b.n	8026f4e <_strtoul_l.isra.0+0x5e>
 8026f76:	2c2b      	cmp	r4, #43	; 0x2b
 8026f78:	bf08      	it	eq
 8026f7a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8026f7e:	46a8      	mov	r8, r5
 8026f80:	bf08      	it	eq
 8026f82:	f100 0c02 	addeq.w	ip, r0, #2
 8026f86:	e7c7      	b.n	8026f18 <_strtoul_l.isra.0+0x28>
 8026f88:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8026f8c:	2e19      	cmp	r6, #25
 8026f8e:	d801      	bhi.n	8026f94 <_strtoul_l.isra.0+0xa4>
 8026f90:	3c37      	subs	r4, #55	; 0x37
 8026f92:	e7e1      	b.n	8026f58 <_strtoul_l.isra.0+0x68>
 8026f94:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8026f98:	2e19      	cmp	r6, #25
 8026f9a:	d804      	bhi.n	8026fa6 <_strtoul_l.isra.0+0xb6>
 8026f9c:	3c57      	subs	r4, #87	; 0x57
 8026f9e:	e7db      	b.n	8026f58 <_strtoul_l.isra.0+0x68>
 8026fa0:	f04f 35ff 	mov.w	r5, #4294967295
 8026fa4:	e7e4      	b.n	8026f70 <_strtoul_l.isra.0+0x80>
 8026fa6:	2d00      	cmp	r5, #0
 8026fa8:	da07      	bge.n	8026fba <_strtoul_l.isra.0+0xca>
 8026faa:	2322      	movs	r3, #34	; 0x22
 8026fac:	f8ce 3000 	str.w	r3, [lr]
 8026fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8026fb4:	b942      	cbnz	r2, 8026fc8 <_strtoul_l.isra.0+0xd8>
 8026fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026fba:	f1b8 0f00 	cmp.w	r8, #0
 8026fbe:	d000      	beq.n	8026fc2 <_strtoul_l.isra.0+0xd2>
 8026fc0:	4240      	negs	r0, r0
 8026fc2:	2a00      	cmp	r2, #0
 8026fc4:	d0f7      	beq.n	8026fb6 <_strtoul_l.isra.0+0xc6>
 8026fc6:	b10d      	cbz	r5, 8026fcc <_strtoul_l.isra.0+0xdc>
 8026fc8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8026fcc:	6011      	str	r1, [r2, #0]
 8026fce:	e7f2      	b.n	8026fb6 <_strtoul_l.isra.0+0xc6>
 8026fd0:	2430      	movs	r4, #48	; 0x30
 8026fd2:	2b00      	cmp	r3, #0
 8026fd4:	d1b1      	bne.n	8026f3a <_strtoul_l.isra.0+0x4a>
 8026fd6:	2308      	movs	r3, #8
 8026fd8:	e7af      	b.n	8026f3a <_strtoul_l.isra.0+0x4a>
 8026fda:	2c30      	cmp	r4, #48	; 0x30
 8026fdc:	d0a2      	beq.n	8026f24 <_strtoul_l.isra.0+0x34>
 8026fde:	230a      	movs	r3, #10
 8026fe0:	e7ab      	b.n	8026f3a <_strtoul_l.isra.0+0x4a>
 8026fe2:	bf00      	nop
 8026fe4:	0802b49d 	.word	0x0802b49d

08026fe8 <_strtoul_r>:
 8026fe8:	f7ff bf82 	b.w	8026ef0 <_strtoul_l.isra.0>

08026fec <__submore>:
 8026fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026ff0:	460c      	mov	r4, r1
 8026ff2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8026ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026ff8:	4299      	cmp	r1, r3
 8026ffa:	d11d      	bne.n	8027038 <__submore+0x4c>
 8026ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8027000:	f7fe f95a 	bl	80252b8 <_malloc_r>
 8027004:	b918      	cbnz	r0, 802700e <__submore+0x22>
 8027006:	f04f 30ff 	mov.w	r0, #4294967295
 802700a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802700e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027012:	63a3      	str	r3, [r4, #56]	; 0x38
 8027014:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8027018:	6360      	str	r0, [r4, #52]	; 0x34
 802701a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802701e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8027022:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8027026:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802702a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802702e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8027032:	6020      	str	r0, [r4, #0]
 8027034:	2000      	movs	r0, #0
 8027036:	e7e8      	b.n	802700a <__submore+0x1e>
 8027038:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802703a:	0077      	lsls	r7, r6, #1
 802703c:	463a      	mov	r2, r7
 802703e:	f7ff fa6b 	bl	8026518 <_realloc_r>
 8027042:	4605      	mov	r5, r0
 8027044:	2800      	cmp	r0, #0
 8027046:	d0de      	beq.n	8027006 <__submore+0x1a>
 8027048:	eb00 0806 	add.w	r8, r0, r6
 802704c:	4601      	mov	r1, r0
 802704e:	4632      	mov	r2, r6
 8027050:	4640      	mov	r0, r8
 8027052:	f7fe f8b1 	bl	80251b8 <memcpy>
 8027056:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802705a:	f8c4 8000 	str.w	r8, [r4]
 802705e:	e7e9      	b.n	8027034 <__submore+0x48>

08027060 <_fstat_r>:
 8027060:	b538      	push	{r3, r4, r5, lr}
 8027062:	4d07      	ldr	r5, [pc, #28]	; (8027080 <_fstat_r+0x20>)
 8027064:	2300      	movs	r3, #0
 8027066:	4604      	mov	r4, r0
 8027068:	4608      	mov	r0, r1
 802706a:	4611      	mov	r1, r2
 802706c:	602b      	str	r3, [r5, #0]
 802706e:	f7dd fa2c 	bl	80044ca <_fstat>
 8027072:	1c43      	adds	r3, r0, #1
 8027074:	d102      	bne.n	802707c <_fstat_r+0x1c>
 8027076:	682b      	ldr	r3, [r5, #0]
 8027078:	b103      	cbz	r3, 802707c <_fstat_r+0x1c>
 802707a:	6023      	str	r3, [r4, #0]
 802707c:	bd38      	pop	{r3, r4, r5, pc}
 802707e:	bf00      	nop
 8027080:	2000b2c4 	.word	0x2000b2c4

08027084 <_isatty_r>:
 8027084:	b538      	push	{r3, r4, r5, lr}
 8027086:	4d06      	ldr	r5, [pc, #24]	; (80270a0 <_isatty_r+0x1c>)
 8027088:	2300      	movs	r3, #0
 802708a:	4604      	mov	r4, r0
 802708c:	4608      	mov	r0, r1
 802708e:	602b      	str	r3, [r5, #0]
 8027090:	f7dd fa2b 	bl	80044ea <_isatty>
 8027094:	1c43      	adds	r3, r0, #1
 8027096:	d102      	bne.n	802709e <_isatty_r+0x1a>
 8027098:	682b      	ldr	r3, [r5, #0]
 802709a:	b103      	cbz	r3, 802709e <_isatty_r+0x1a>
 802709c:	6023      	str	r3, [r4, #0]
 802709e:	bd38      	pop	{r3, r4, r5, pc}
 80270a0:	2000b2c4 	.word	0x2000b2c4

080270a4 <_malloc_usable_size_r>:
 80270a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80270a8:	1f18      	subs	r0, r3, #4
 80270aa:	2b00      	cmp	r3, #0
 80270ac:	bfbc      	itt	lt
 80270ae:	580b      	ldrlt	r3, [r1, r0]
 80270b0:	18c0      	addlt	r0, r0, r3
 80270b2:	4770      	bx	lr

080270b4 <_init>:
 80270b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80270b6:	bf00      	nop
 80270b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80270ba:	bc08      	pop	{r3}
 80270bc:	469e      	mov	lr, r3
 80270be:	4770      	bx	lr

080270c0 <_fini>:
 80270c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80270c2:	bf00      	nop
 80270c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80270c6:	bc08      	pop	{r3}
 80270c8:	469e      	mov	lr, r3
 80270ca:	4770      	bx	lr
