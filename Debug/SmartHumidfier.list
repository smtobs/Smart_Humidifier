
SmartHumidfier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002cc50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004870  0802ce00  0802ce00  0003ce00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001956  08031670  08031670  00041670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  08032fc8  08032fc8  00042fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00037580  08032fd4  08032fd4  00042fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000001c  0806a554  0806a554  0007a554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0806a570  0806a570  000802e0  2**0
                  CONTENTS
  8 .ARM          00000008  0806a570  0806a570  0007a570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0806a578  0806a578  000802e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0806a578  0806a578  0007a578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0806a58c  0806a58c  0007a58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000002e0  20000000  0806a594  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000c374  200002e0  0806a874  000802e0  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  2000c654  0806a874  0008c654  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000802e0  2**0
                  CONTENTS, READONLY
 16 .debug_info   000be7de  00000000  00000000  00080310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001537b  00000000  00000000  0013eaee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000045f0  00000000  00000000  00153e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003fa0  00000000  00000000  00158460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003d009  00000000  00000000  0015c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00058164  00000000  00000000  00199409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00125632  00000000  00000000  001f156d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  00316b9f  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00014630  00000000  00000000  00316c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802cde8 	.word	0x0802cde8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	0802cde8 	.word	0x0802cde8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b96e 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468c      	mov	ip, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8083 	bne.w	8000d22 <__udivmoddi4+0x116>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4617      	mov	r7, r2
 8000c20:	d947      	bls.n	8000cb2 <__udivmoddi4+0xa6>
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	b142      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	f1c2 0020 	rsb	r0, r2, #32
 8000c2c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c30:	4091      	lsls	r1, r2
 8000c32:	4097      	lsls	r7, r2
 8000c34:	ea40 0c01 	orr.w	ip, r0, r1
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbbc f6f8 	udiv	r6, ip, r8
 8000c44:	fa1f fe87 	uxth.w	lr, r7
 8000c48:	fb08 c116 	mls	r1, r8, r6, ip
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb06 f10e 	mul.w	r1, r6, lr
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 8119 	bcs.w	8000e94 <__udivmoddi4+0x288>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8116 	bls.w	8000e94 <__udivmoddi4+0x288>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	f080 8105 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	f240 8102 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c94:	3802      	subs	r0, #2
 8000c96:	443c      	add	r4, r7
 8000c98:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	b902      	cbnz	r2, 8000cb6 <__udivmoddi4+0xaa>
 8000cb4:	deff      	udf	#255	; 0xff
 8000cb6:	fab2 f282 	clz	r2, r2
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d150      	bne.n	8000d60 <__udivmoddi4+0x154>
 8000cbe:	1bcb      	subs	r3, r1, r7
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	fa1f f887 	uxth.w	r8, r7
 8000cc8:	2601      	movs	r6, #1
 8000cca:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cce:	0c21      	lsrs	r1, r4, #16
 8000cd0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000ce0:	1879      	adds	r1, r7, r1
 8000ce2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0xe2>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	f200 80e9 	bhi.w	8000ec0 <__udivmoddi4+0x2b4>
 8000cee:	4684      	mov	ip, r0
 8000cf0:	1ac9      	subs	r1, r1, r3
 8000cf2:	b2a3      	uxth	r3, r4
 8000cf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d00:	fb08 f800 	mul.w	r8, r8, r0
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	d907      	bls.n	8000d18 <__udivmoddi4+0x10c>
 8000d08:	193c      	adds	r4, r7, r4
 8000d0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x10a>
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	f200 80d9 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d16:	4618      	mov	r0, r3
 8000d18:	eba4 0408 	sub.w	r4, r4, r8
 8000d1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d20:	e7bf      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x12e>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80b1 	beq.w	8000e8e <__udivmoddi4+0x282>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x1cc>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0x140>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80b8 	bhi.w	8000ebc <__udivmoddi4+0x2b0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	468c      	mov	ip, r1
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0a8      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000d5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5e:	e7a5      	b.n	8000cac <__udivmoddi4+0xa0>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f603 	lsr.w	r6, r0, r3
 8000d68:	4097      	lsls	r7, r2
 8000d6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d72:	40d9      	lsrs	r1, r3
 8000d74:	4330      	orrs	r0, r6
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f108 	mul.w	r1, r6, r8
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x19c>
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d9a:	f080 808d 	bcs.w	8000eb8 <__udivmoddi4+0x2ac>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 808a 	bls.w	8000eb8 <__udivmoddi4+0x2ac>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	443b      	add	r3, r7
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b281      	uxth	r1, r0
 8000dac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb00 f308 	mul.w	r3, r0, r8
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0x1c4>
 8000dc0:	1879      	adds	r1, r7, r1
 8000dc2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc6:	d273      	bcs.n	8000eb0 <__udivmoddi4+0x2a4>
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d971      	bls.n	8000eb0 <__udivmoddi4+0x2a4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4439      	add	r1, r7
 8000dd0:	1acb      	subs	r3, r1, r3
 8000dd2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd6:	e778      	b.n	8000cca <__udivmoddi4+0xbe>
 8000dd8:	f1c6 0c20 	rsb	ip, r6, #32
 8000ddc:	fa03 f406 	lsl.w	r4, r3, r6
 8000de0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de4:	431c      	orrs	r4, r3
 8000de6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000df2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df6:	431f      	orrs	r7, r3
 8000df8:	0c3b      	lsrs	r3, r7, #16
 8000dfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfe:	fa1f f884 	uxth.w	r8, r4
 8000e02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	fa02 f206 	lsl.w	r2, r2, r6
 8000e14:	fa00 f306 	lsl.w	r3, r0, r6
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x220>
 8000e1a:	1861      	adds	r1, r4, r1
 8000e1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e20:	d248      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e22:	458a      	cmp	sl, r1
 8000e24:	d946      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e26:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2a:	4421      	add	r1, r4
 8000e2c:	eba1 010a 	sub.w	r1, r1, sl
 8000e30:	b2bf      	uxth	r7, r7
 8000e32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3e:	fb00 f808 	mul.w	r8, r0, r8
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x24a>
 8000e46:	19e7      	adds	r7, r4, r7
 8000e48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e4c:	d22e      	bcs.n	8000eac <__udivmoddi4+0x2a0>
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d92c      	bls.n	8000eac <__udivmoddi4+0x2a0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4427      	add	r7, r4
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	eba7 0708 	sub.w	r7, r7, r8
 8000e5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e62:	454f      	cmp	r7, r9
 8000e64:	46c6      	mov	lr, r8
 8000e66:	4649      	mov	r1, r9
 8000e68:	d31a      	bcc.n	8000ea0 <__udivmoddi4+0x294>
 8000e6a:	d017      	beq.n	8000e9c <__udivmoddi4+0x290>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x27a>
 8000e6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e72:	eb67 0701 	sbc.w	r7, r7, r1
 8000e76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e7a:	40f2      	lsrs	r2, r6
 8000e7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e80:	40f7      	lsrs	r7, r6
 8000e82:	e9c5 2700 	strd	r2, r7, [r5]
 8000e86:	2600      	movs	r6, #0
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e70b      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e9      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fd      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000e9c:	4543      	cmp	r3, r8
 8000e9e:	d2e5      	bcs.n	8000e6c <__udivmoddi4+0x260>
 8000ea0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7df      	b.n	8000e6c <__udivmoddi4+0x260>
 8000eac:	4608      	mov	r0, r1
 8000eae:	e7d2      	b.n	8000e56 <__udivmoddi4+0x24a>
 8000eb0:	4660      	mov	r0, ip
 8000eb2:	e78d      	b.n	8000dd0 <__udivmoddi4+0x1c4>
 8000eb4:	4681      	mov	r9, r0
 8000eb6:	e7b9      	b.n	8000e2c <__udivmoddi4+0x220>
 8000eb8:	4666      	mov	r6, ip
 8000eba:	e775      	b.n	8000da8 <__udivmoddi4+0x19c>
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	e74a      	b.n	8000d56 <__udivmoddi4+0x14a>
 8000ec0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec4:	4439      	add	r1, r7
 8000ec6:	e713      	b.n	8000cf0 <__udivmoddi4+0xe4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	443c      	add	r4, r7
 8000ecc:	e724      	b.n	8000d18 <__udivmoddi4+0x10c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	e015      	b.n	8000f1c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff f9d7 	bl	80002a4 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	4798      	blx	r3
 8000f04:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e005      	b.n	8000f1c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	68b8      	ldr	r0, [r7, #8]
 8000f16:	f028 fae9 	bl	80294ec <memcpy>

    return copy;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2028      	movs	r0, #40	; 0x28
 8000f32:	4798      	blx	r3
 8000f34:	60f8      	str	r0, [r7, #12]
    if (node)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000f3c:	2228      	movs	r2, #40	; 0x28
 8000f3e:	2100      	movs	r1, #0
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f028 fafb 	bl	802953c <memset>
    }

    return node;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000f5c:	e037      	b.n	8000fce <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d108      	bne.n	8000f82 <cJSON_Delete+0x32>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d004      	beq.n	8000f82 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffe7 	bl	8000f50 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d109      	bne.n	8000fa2 <cJSON_Delete+0x52>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <cJSON_Delete+0x90>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	6912      	ldr	r2, [r2, #16]
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <cJSON_Delete+0x72>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <cJSON_Delete+0x90>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6a12      	ldr	r2, [r2, #32]
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <cJSON_Delete+0x90>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	4798      	blx	r3
        item = next;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1c4      	bne.n	8000f5e <cJSON_Delete+0xe>
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000fe8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <ensure+0x20>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <ensure+0x24>
    {
        return NULL;
 8001014:	2300      	movs	r3, #0
 8001016:	e083      	b.n	8001120 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <ensure+0x3c>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d301      	bcc.n	8001030 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800102c:	2300      	movs	r3, #0
 800102e:	e077      	b.n	8001120 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	da01      	bge.n	800103a <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001036:	2300      	movs	r3, #0
 8001038:	e072      	b.n	8001120 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	4413      	add	r3, r2
 8001042:	3301      	adds	r3, #1
 8001044:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d805      	bhi.n	800105c <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4413      	add	r3, r2
 800105a:	e061      	b.n	8001120 <ensure+0x12c>
    }

    if (p->noalloc) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <ensure+0x74>
        return NULL;
 8001064:	2300      	movs	r3, #0
 8001066:	e05b      	b.n	8001120 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106e:	d308      	bcc.n	8001082 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db03      	blt.n	800107e <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001076:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	e004      	b.n	8001088 <ensure+0x94>
        }
        else
        {
            return NULL;
 800107e:	2300      	movs	r3, #0
 8001080:	e04e      	b.n	8001120 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d018      	beq.n	80010c2 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	4610      	mov	r0, r2
 800109c:	4798      	blx	r3
 800109e:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d132      	bne.n	800110c <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	4610      	mov	r0, r2
 80010b0:	4798      	blx	r3
            p->length = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]

            return NULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	e02e      	b.n	8001120 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	68b8      	ldr	r0, [r7, #8]
 80010c8:	4798      	blx	r3
 80010ca:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10d      	bne.n	80010ee <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	4610      	mov	r0, r2
 80010dc:	4798      	blx	r3
            p->length = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

            return NULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e018      	b.n	8001120 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6819      	ldr	r1, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	3301      	adds	r3, #1
 80010f8:	461a      	mov	r2, r3
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f028 f9f6 	bl	80294ec <memcpy>
        p->hooks.deallocate(p->buffer);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	4610      	mov	r0, r2
 800110a:	4798      	blx	r3
    }
    p->length = newsize;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4413      	add	r3, r2
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d013      	beq.n	8001162 <update_offset+0x3a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00f      	beq.n	8001162 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689c      	ldr	r4, [r3, #8]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff f8a6 	bl	80002a4 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	18e2      	adds	r2, r4, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	e000      	b.n	8001164 <update_offset+0x3c>
        return;
 8001162:	bf00      	nop
}
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}
	...

0800116c <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800116c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001170:	b087      	sub	sp, #28
 8001172:	af00      	add	r7, sp, #0
 8001174:	ed87 0b02 	vstr	d0, [r7, #8]
 8001178:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	68fe      	ldr	r6, [r7, #12]
 8001180:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	687e      	ldr	r6, [r7, #4]
 8001188:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800118c:	f7ff fcde 	bl	8000b4c <__aeabi_dcmpgt>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <compare_double+0x34>
 8001196:	68bc      	ldr	r4, [r7, #8]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800119e:	e003      	b.n	80011a8 <compare_double+0x3c>
 80011a0:	683c      	ldr	r4, [r7, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80011a8:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80011ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011b4:	f7ff f882 	bl	80002bc <__aeabi_dsub>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4690      	mov	r8, r2
 80011be:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <compare_double+0x8c>)
 80011c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011cc:	f7ff fa2e 	bl	800062c <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	2101      	movs	r1, #1
 80011d6:	460c      	mov	r4, r1
 80011d8:	4640      	mov	r0, r8
 80011da:	4649      	mov	r1, r9
 80011dc:	f7ff fca2 	bl	8000b24 <__aeabi_dcmple>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <compare_double+0x7e>
 80011e6:	2300      	movs	r3, #0
 80011e8:	461c      	mov	r4, r3
 80011ea:	b2e3      	uxtb	r3, r4
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011f6:	bf00      	nop
 80011f8:	3cb00000 	.word	0x3cb00000

080011fc <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80011fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fe:	b093      	sub	sp, #76	; 0x4c
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001206:	2300      	movs	r3, #0
 8001208:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001210:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8001232:	f7ff fed7 	bl	8000fe4 <get_decimal_point>
 8001236:	4603      	mov	r3, r0
 8001238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <print_number+0x56>
    {
        return false;
 800124e:	2300      	movs	r3, #0
 8001250:	e0b4      	b.n	80013bc <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8001252:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001256:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800125a:	f7ff fc81 	bl	8000b60 <__aeabi_dcmpun>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d121      	bne.n	80012a8 <print_number+0xac>
 8001264:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001268:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800126c:	2301      	movs	r3, #1
 800126e:	461e      	mov	r6, r3
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <print_number+0x1c8>)
 8001276:	4620      	mov	r0, r4
 8001278:	4629      	mov	r1, r5
 800127a:	f7ff fc71 	bl	8000b60 <__aeabi_dcmpun>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10b      	bne.n	800129c <print_number+0xa0>
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	4b4e      	ldr	r3, [pc, #312]	; (80013c4 <print_number+0x1c8>)
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f7ff fc49 	bl	8000b24 <__aeabi_dcmple>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <print_number+0xa0>
 8001298:	2300      	movs	r3, #0
 800129a:	461e      	mov	r6, r3
 800129c:	b2f3      	uxtb	r3, r6
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d007      	beq.n	80012b8 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4946      	ldr	r1, [pc, #280]	; (80013c8 <print_number+0x1cc>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f029 f84a 	bl	802a348 <siprintf>
 80012b4:	6478      	str	r0, [r7, #68]	; 0x44
 80012b6:	e03f      	b.n	8001338 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f94b 	bl	8000558 <__aeabi_i2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012ca:	f7ff fc17 	bl	8000afc <__aeabi_dcmpeq>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	493b      	ldr	r1, [pc, #236]	; (80013cc <print_number+0x1d0>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f029 f832 	bl	802a348 <siprintf>
 80012e4:	6478      	str	r0, [r7, #68]	; 0x44
 80012e6:	e027      	b.n	8001338 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80012e8:	f107 0014 	add.w	r0, r7, #20
 80012ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012f0:	4937      	ldr	r1, [pc, #220]	; (80013d0 <print_number+0x1d4>)
 80012f2:	f029 f829 	bl	802a348 <siprintf>
 80012f6:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80012f8:	f107 0208 	add.w	r2, r7, #8
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4934      	ldr	r1, [pc, #208]	; (80013d4 <print_number+0x1d8>)
 8001302:	4618      	mov	r0, r3
 8001304:	f029 f840 	bl	802a388 <siscanf>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10c      	bne.n	8001328 <print_number+0x12c>
 800130e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001312:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8001316:	eeb0 0a47 	vmov.f32	s0, s14
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	f7ff ff25 	bl	800116c <compare_double>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001328:	f107 0014 	add.w	r0, r7, #20
 800132c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001330:	4929      	ldr	r1, [pc, #164]	; (80013d8 <print_number+0x1dc>)
 8001332:	f029 f809 	bl	802a348 <siprintf>
 8001336:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800133a:	2b00      	cmp	r3, #0
 800133c:	db02      	blt.n	8001344 <print_number+0x148>
 800133e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001340:	2b19      	cmp	r3, #25
 8001342:	dd01      	ble.n	8001348 <print_number+0x14c>
    {
        return false;
 8001344:	2300      	movs	r3, #0
 8001346:	e039      	b.n	80013bc <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800134a:	3301      	adds	r3, #1
 800134c:	4619      	mov	r1, r3
 800134e:	6838      	ldr	r0, [r7, #0]
 8001350:	f7ff fe50 	bl	8000ff4 <ensure>
 8001354:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8001356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <print_number+0x164>
    {
        return false;
 800135c:	2300      	movs	r3, #0
 800135e:	e02d      	b.n	80013bc <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001360:	2300      	movs	r3, #0
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
 8001364:	e01a      	b.n	800139c <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001366:	f107 0214 	add.w	r2, r7, #20
 800136a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001374:	429a      	cmp	r2, r3
 8001376:	d105      	bne.n	8001384 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800137a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800137c:	4413      	add	r3, r2
 800137e:	222e      	movs	r2, #46	; 0x2e
 8001380:	701a      	strb	r2, [r3, #0]
            continue;
 8001382:	e008      	b.n	8001396 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001388:	4413      	add	r3, r2
 800138a:	f107 0114 	add.w	r1, r7, #20
 800138e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001390:	440a      	add	r2, r1
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8001396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001398:	3301      	adds	r3, #1
 800139a:	643b      	str	r3, [r7, #64]	; 0x40
 800139c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800139e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3e0      	bcc.n	8001366 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 80013a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a8:	4413      	add	r3, r2
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b4:	441a      	add	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	609a      	str	r2, [r3, #8]

    return true;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	374c      	adds	r7, #76	; 0x4c
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c4:	7fefffff 	.word	0x7fefffff
 80013c8:	0802ce0c 	.word	0x0802ce0c
 80013cc:	0802ce14 	.word	0x0802ce14
 80013d0:	0802ce18 	.word	0x0802ce18
 80013d4:	0802ce20 	.word	0x0802ce20
 80013d8:	0802ce24 	.word	0x0802ce24

080013dc <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <print_string_ptr+0x28>
    {
        return false;
 8001400:	2300      	movs	r3, #0
 8001402:	e110      	b.n	8001626 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d111      	bne.n	800142e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800140a:	2103      	movs	r1, #3
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f7ff fdf1 	bl	8000ff4 <ensure>
 8001412:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <print_string_ptr+0x42>
        {
            return false;
 800141a:	2300      	movs	r3, #0
 800141c:	e103      	b.n	8001626 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4a83      	ldr	r2, [pc, #524]	; (8001630 <print_string_ptr+0x254>)
 8001422:	8811      	ldrh	r1, [r2, #0]
 8001424:	7892      	ldrb	r2, [r2, #2]
 8001426:	8019      	strh	r1, [r3, #0]
 8001428:	709a      	strb	r2, [r3, #2]

        return true;
 800142a:	2301      	movs	r3, #1
 800142c:	e0fb      	b.n	8001626 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e023      	b.n	800147c <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b22      	cmp	r3, #34	; 0x22
 800143a:	dc0e      	bgt.n	800145a <print_string_ptr+0x7e>
 800143c:	2b08      	cmp	r3, #8
 800143e:	db12      	blt.n	8001466 <print_string_ptr+0x8a>
 8001440:	3b08      	subs	r3, #8
 8001442:	2201      	movs	r2, #1
 8001444:	409a      	lsls	r2, r3
 8001446:	4b7b      	ldr	r3, [pc, #492]	; (8001634 <print_string_ptr+0x258>)
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	bf14      	ite	ne
 800144e:	2301      	movne	r3, #1
 8001450:	2300      	moveq	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <print_string_ptr+0x82>
 8001458:	e005      	b.n	8001466 <print_string_ptr+0x8a>
 800145a:	2b5c      	cmp	r3, #92	; 0x5c
 800145c:	d103      	bne.n	8001466 <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
                break;
 8001464:	e007      	b.n	8001476 <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b1f      	cmp	r3, #31
 800146c:	d802      	bhi.n	8001474 <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3305      	adds	r3, #5
 8001472:	617b      	str	r3, [r7, #20]
                }
                break;
 8001474:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1d7      	bne.n	8001434 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	461a      	mov	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3303      	adds	r3, #3
 8001496:	4619      	mov	r1, r3
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f7ff fdab 	bl	8000ff4 <ensure>
 800149e:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <print_string_ptr+0xce>
    {
        return false;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e0bd      	b.n	8001626 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d117      	bne.n	80014e0 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2222      	movs	r2, #34	; 0x22
 80014b4:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	3301      	adds	r3, #1
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f028 f814 	bl	80294ec <memcpy>
        output[output_length + 1] = '\"';
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4413      	add	r3, r2
 80014cc:	2222      	movs	r2, #34	; 0x22
 80014ce:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3302      	adds	r3, #2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]

        return true;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0a2      	b.n	8001626 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2222      	movs	r2, #34	; 0x22
 80014e4:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	3301      	adds	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	e087      	b.n	8001602 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b1f      	cmp	r3, #31
 80014f8:	d90c      	bls.n	8001514 <print_string_ptr+0x138>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b22      	cmp	r3, #34	; 0x22
 8001500:	d008      	beq.n	8001514 <print_string_ptr+0x138>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b5c      	cmp	r3, #92	; 0x5c
 8001508:	d004      	beq.n	8001514 <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e070      	b.n	80015f6 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	61ba      	str	r2, [r7, #24]
 800151a:	225c      	movs	r2, #92	; 0x5c
 800151c:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b22      	cmp	r3, #34	; 0x22
 8001524:	dc3e      	bgt.n	80015a4 <print_string_ptr+0x1c8>
 8001526:	2b08      	cmp	r3, #8
 8001528:	db5a      	blt.n	80015e0 <print_string_ptr+0x204>
 800152a:	3b08      	subs	r3, #8
 800152c:	2b1a      	cmp	r3, #26
 800152e:	d857      	bhi.n	80015e0 <print_string_ptr+0x204>
 8001530:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <print_string_ptr+0x15c>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	080015b9 	.word	0x080015b9
 800153c:	080015d9 	.word	0x080015d9
 8001540:	080015c9 	.word	0x080015c9
 8001544:	080015e1 	.word	0x080015e1
 8001548:	080015c1 	.word	0x080015c1
 800154c:	080015d1 	.word	0x080015d1
 8001550:	080015e1 	.word	0x080015e1
 8001554:	080015e1 	.word	0x080015e1
 8001558:	080015e1 	.word	0x080015e1
 800155c:	080015e1 	.word	0x080015e1
 8001560:	080015e1 	.word	0x080015e1
 8001564:	080015e1 	.word	0x080015e1
 8001568:	080015e1 	.word	0x080015e1
 800156c:	080015e1 	.word	0x080015e1
 8001570:	080015e1 	.word	0x080015e1
 8001574:	080015e1 	.word	0x080015e1
 8001578:	080015e1 	.word	0x080015e1
 800157c:	080015e1 	.word	0x080015e1
 8001580:	080015e1 	.word	0x080015e1
 8001584:	080015e1 	.word	0x080015e1
 8001588:	080015e1 	.word	0x080015e1
 800158c:	080015e1 	.word	0x080015e1
 8001590:	080015e1 	.word	0x080015e1
 8001594:	080015e1 	.word	0x080015e1
 8001598:	080015e1 	.word	0x080015e1
 800159c:	080015e1 	.word	0x080015e1
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	2b5c      	cmp	r3, #92	; 0x5c
 80015a6:	d11b      	bne.n	80015e0 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	225c      	movs	r2, #92	; 0x5c
 80015ac:	701a      	strb	r2, [r3, #0]
                    break;
 80015ae:	e022      	b.n	80015f6 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2222      	movs	r2, #34	; 0x22
 80015b4:	701a      	strb	r2, [r3, #0]
                    break;
 80015b6:	e01e      	b.n	80015f6 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2262      	movs	r2, #98	; 0x62
 80015bc:	701a      	strb	r2, [r3, #0]
                    break;
 80015be:	e01a      	b.n	80015f6 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2266      	movs	r2, #102	; 0x66
 80015c4:	701a      	strb	r2, [r3, #0]
                    break;
 80015c6:	e016      	b.n	80015f6 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	226e      	movs	r2, #110	; 0x6e
 80015cc:	701a      	strb	r2, [r3, #0]
                    break;
 80015ce:	e012      	b.n	80015f6 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2272      	movs	r2, #114	; 0x72
 80015d4:	701a      	strb	r2, [r3, #0]
                    break;
 80015d6:	e00e      	b.n	80015f6 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2274      	movs	r2, #116	; 0x74
 80015dc:	701a      	strb	r2, [r3, #0]
                    break;
 80015de:	e00a      	b.n	80015f6 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4914      	ldr	r1, [pc, #80]	; (8001638 <print_string_ptr+0x25c>)
 80015e8:	69b8      	ldr	r0, [r7, #24]
 80015ea:	f028 fead 	bl	802a348 <siprintf>
                    output_pointer += 4;
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	3304      	adds	r3, #4
 80015f2:	61bb      	str	r3, [r7, #24]
                    break;
 80015f4:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3301      	adds	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f af73 	bne.w	80014f2 <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3301      	adds	r3, #1
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4413      	add	r3, r2
 8001614:	2222      	movs	r2, #34	; 0x22
 8001616:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3302      	adds	r3, #2
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4413      	add	r3, r2
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]

    return true;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	0802ce2c 	.word	0x0802ce2c
 8001634:	04000037 	.word	0x04000037
 8001638:	0802ce30 	.word	0x0802ce30

0800163c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	6839      	ldr	r1, [r7, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fec5 	bl	80013dc <print_string_ptr>
 8001652:	4603      	mov	r3, r0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08e      	sub	sp, #56	; 0x38
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001668:	2300      	movs	r3, #0
 800166a:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2224      	movs	r2, #36	; 0x24
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f027 ff61 	bl	802953c <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a38      	ldr	r2, [pc, #224]	; (8001760 <print+0x104>)
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	4610      	mov	r0, r2
 8001684:	4798      	blx	r3
 8001686:	4603      	mov	r3, r0
 8001688:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800168a:	4b35      	ldr	r3, [pc, #212]	; (8001760 <print+0x104>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169a:	ca07      	ldmia	r2, {r0, r1, r2}
 800169c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d040      	beq.n	8001728 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	4619      	mov	r1, r3
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f869 	bl	8001784 <print_value>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d039      	beq.n	800172c <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fd33 	bl	8001128 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00d      	beq.n	80016e6 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	6938      	ldr	r0, [r7, #16]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	3201      	adds	r2, #1
 80016d4:	4611      	mov	r1, r2
 80016d6:	4798      	blx	r3
 80016d8:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 80016da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d027      	beq.n	8001730 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	e01e      	b.n	8001724 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	3201      	adds	r2, #1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4798      	blx	r3
 80016f2:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 80016f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d01c      	beq.n	8001734 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80016fa:	6939      	ldr	r1, [r7, #16]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	4293      	cmp	r3, r2
 8001704:	bf28      	it	cs
 8001706:	4613      	movcs	r3, r2
 8001708:	461a      	mov	r2, r3
 800170a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800170c:	f027 feee 	bl	80294ec <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001714:	4413      	add	r3, r2
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4610      	mov	r0, r2
 8001722:	4798      	blx	r3
    }

    return printed;
 8001724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001726:	e016      	b.n	8001756 <print+0xfa>
        goto fail;
 8001728:	bf00      	nop
 800172a:	e004      	b.n	8001736 <print+0xda>
        goto fail;
 800172c:	bf00      	nop
 800172e:	e002      	b.n	8001736 <print+0xda>
            goto fail;
 8001730:	bf00      	nop
 8001732:	e000      	b.n	8001736 <print+0xda>
            goto fail;
 8001734:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4610      	mov	r0, r2
 8001744:	4798      	blx	r3
    }

    if (printed != NULL)
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <print+0xf8>
    {
        hooks->deallocate(printed);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001752:	4798      	blx	r3
    }

    return NULL;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3738      	adds	r7, #56	; 0x38
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0802e048 	.word	0x0802e048

08001764 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <cJSON_Print+0x1c>)
 800176e:	2101      	movs	r1, #1
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff73 	bl	800165c <print>
 8001776:	4603      	mov	r3, r0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000004 	.word	0x20000004

08001784 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <print_value+0x1a>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <print_value+0x1e>
    {
        return false;
 800179e:	2300      	movs	r3, #0
 80017a0:	e0c9      	b.n	8001936 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	f000 808e 	beq.w	80018ca <print_value+0x146>
 80017ae:	2b80      	cmp	r3, #128	; 0x80
 80017b0:	f300 80c0 	bgt.w	8001934 <print_value+0x1b0>
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	dc49      	bgt.n	800184c <print_value+0xc8>
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f340 80bb 	ble.w	8001934 <print_value+0x1b0>
 80017be:	3b01      	subs	r3, #1
 80017c0:	2b1f      	cmp	r3, #31
 80017c2:	f200 80b7 	bhi.w	8001934 <print_value+0x1b0>
 80017c6:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <print_value+0x48>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	08001877 	.word	0x08001877
 80017d0:	0800189b 	.word	0x0800189b
 80017d4:	08001935 	.word	0x08001935
 80017d8:	08001853 	.word	0x08001853
 80017dc:	08001935 	.word	0x08001935
 80017e0:	08001935 	.word	0x08001935
 80017e4:	08001935 	.word	0x08001935
 80017e8:	080018bf 	.word	0x080018bf
 80017ec:	08001935 	.word	0x08001935
 80017f0:	08001935 	.word	0x08001935
 80017f4:	08001935 	.word	0x08001935
 80017f8:	08001935 	.word	0x08001935
 80017fc:	08001935 	.word	0x08001935
 8001800:	08001935 	.word	0x08001935
 8001804:	08001935 	.word	0x08001935
 8001808:	08001911 	.word	0x08001911
 800180c:	08001935 	.word	0x08001935
 8001810:	08001935 	.word	0x08001935
 8001814:	08001935 	.word	0x08001935
 8001818:	08001935 	.word	0x08001935
 800181c:	08001935 	.word	0x08001935
 8001820:	08001935 	.word	0x08001935
 8001824:	08001935 	.word	0x08001935
 8001828:	08001935 	.word	0x08001935
 800182c:	08001935 	.word	0x08001935
 8001830:	08001935 	.word	0x08001935
 8001834:	08001935 	.word	0x08001935
 8001838:	08001935 	.word	0x08001935
 800183c:	08001935 	.word	0x08001935
 8001840:	08001935 	.word	0x08001935
 8001844:	08001935 	.word	0x08001935
 8001848:	0800191d 	.word	0x0800191d
 800184c:	2b40      	cmp	r3, #64	; 0x40
 800184e:	d06b      	beq.n	8001928 <print_value+0x1a4>
 8001850:	e070      	b.n	8001934 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8001852:	2105      	movs	r1, #5
 8001854:	6838      	ldr	r0, [r7, #0]
 8001856:	f7ff fbcd 	bl	8000ff4 <ensure>
 800185a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <print_value+0xe2>
            {
                return false;
 8001862:	2300      	movs	r3, #0
 8001864:	e067      	b.n	8001936 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4a35      	ldr	r2, [pc, #212]	; (8001940 <print_value+0x1bc>)
 800186a:	6810      	ldr	r0, [r2, #0]
 800186c:	6018      	str	r0, [r3, #0]
 800186e:	7912      	ldrb	r2, [r2, #4]
 8001870:	711a      	strb	r2, [r3, #4]
            return true;
 8001872:	2301      	movs	r3, #1
 8001874:	e05f      	b.n	8001936 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001876:	2106      	movs	r1, #6
 8001878:	6838      	ldr	r0, [r7, #0]
 800187a:	f7ff fbbb 	bl	8000ff4 <ensure>
 800187e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <print_value+0x106>
            {
                return false;
 8001886:	2300      	movs	r3, #0
 8001888:	e055      	b.n	8001936 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <print_value+0x1c0>)
 800188e:	6810      	ldr	r0, [r2, #0]
 8001890:	6018      	str	r0, [r3, #0]
 8001892:	8892      	ldrh	r2, [r2, #4]
 8001894:	809a      	strh	r2, [r3, #4]
            return true;
 8001896:	2301      	movs	r3, #1
 8001898:	e04d      	b.n	8001936 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800189a:	2105      	movs	r1, #5
 800189c:	6838      	ldr	r0, [r7, #0]
 800189e:	f7ff fba9 	bl	8000ff4 <ensure>
 80018a2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <print_value+0x12a>
            {
                return false;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e043      	b.n	8001936 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4a25      	ldr	r2, [pc, #148]	; (8001948 <print_value+0x1c4>)
 80018b2:	6810      	ldr	r0, [r2, #0]
 80018b4:	6018      	str	r0, [r3, #0]
 80018b6:	7912      	ldrb	r2, [r2, #4]
 80018b8:	711a      	strb	r2, [r3, #4]
            return true;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e03b      	b.n	8001936 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff fc9b 	bl	80011fc <print_number>
 80018c6:	4603      	mov	r3, r0
 80018c8:	e035      	b.n	8001936 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <print_value+0x156>
            {
                return false;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e02d      	b.n	8001936 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fce0 	bl	80002a4 <strlen>
 80018e4:	4603      	mov	r3, r0
 80018e6:	3301      	adds	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	6838      	ldr	r0, [r7, #0]
 80018ee:	f7ff fb81 	bl	8000ff4 <ensure>
 80018f2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <print_value+0x17a>
            {
                return false;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e01b      	b.n	8001936 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	4619      	mov	r1, r3
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f027 fdf0 	bl	80294ec <memcpy>
            return true;
 800190c:	2301      	movs	r3, #1
 800190e:	e012      	b.n	8001936 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fe92 	bl	800163c <print_string>
 8001918:	4603      	mov	r3, r0
 800191a:	e00c      	b.n	8001936 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f814 	bl	800194c <print_array>
 8001924:	4603      	mov	r3, r0
 8001926:	e006      	b.n	8001936 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f894 	bl	8001a58 <print_object>
 8001930:	4603      	mov	r3, r0
 8001932:	e000      	b.n	8001936 <print_value+0x1b2>

        default:
            return false;
 8001934:	2300      	movs	r3, #0
    }
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	0802ce0c 	.word	0x0802ce0c
 8001944:	0802ce3c 	.word	0x0802ce3c
 8001948:	0802ce44 	.word	0x0802ce44

0800194c <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <print_array+0x22>
    {
        return false;
 800196a:	2300      	movs	r3, #0
 800196c:	e070      	b.n	8001a50 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800196e:	2101      	movs	r1, #1
 8001970:	6838      	ldr	r0, [r7, #0]
 8001972:	f7ff fb3f 	bl	8000ff4 <ensure>
 8001976:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <print_array+0x36>
    {
        return false;
 800197e:	2300      	movs	r3, #0
 8001980:	e066      	b.n	8001a50 <print_array+0x104>
    }

    *output_pointer = '[';
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	225b      	movs	r2, #91	; 0x5b
 8001986:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800199c:	e03d      	b.n	8001a1a <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	6938      	ldr	r0, [r7, #16]
 80019a2:	f7ff feef 	bl	8001784 <print_value>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <print_array+0x64>
        {
            return false;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e04f      	b.n	8001a50 <print_array+0x104>
        }
        update_offset(output_buffer);
 80019b0:	6838      	ldr	r0, [r7, #0]
 80019b2:	f7ff fbb9 	bl	8001128 <update_offset>
        if (current_element->next)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d02a      	beq.n	8001a14 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <print_array+0x7e>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e000      	b.n	80019cc <print_array+0x80>
 80019ca:	2301      	movs	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3301      	adds	r3, #1
 80019d2:	4619      	mov	r1, r3
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f7ff fb0d 	bl	8000ff4 <ensure>
 80019da:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <print_array+0x9a>
            {
                return false;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e034      	b.n	8001a50 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	617a      	str	r2, [r7, #20]
 80019ec:	222c      	movs	r2, #44	; 0x2c
 80019ee:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	617a      	str	r2, [r7, #20]
 80019fe:	2220      	movs	r2, #32
 8001a00:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	441a      	add	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1be      	bne.n	800199e <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8001a20:	2102      	movs	r1, #2
 8001a22:	6838      	ldr	r0, [r7, #0]
 8001a24:	f7ff fae6 	bl	8000ff4 <ensure>
 8001a28:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <print_array+0xe8>
    {
        return false;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e00d      	b.n	8001a50 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	617a      	str	r2, [r7, #20]
 8001a3a:	225d      	movs	r2, #93	; 0x5d
 8001a3c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	1e5a      	subs	r2, r3, #1
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	60da      	str	r2, [r3, #12]

    return true;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <print_object+0x22>
    {
        return false;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e108      	b.n	8001c8c <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <print_object+0x2e>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e000      	b.n	8001a88 <print_object+0x30>
 8001a86:	2301      	movs	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6838      	ldr	r0, [r7, #0]
 8001a92:	f7ff faaf 	bl	8000ff4 <ensure>
 8001a96:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <print_object+0x4a>
    {
        return false;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e0f4      	b.n	8001c8c <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	61fa      	str	r2, [r7, #28]
 8001aa8:	227b      	movs	r2, #123	; 0x7b
 8001aaa:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	61fa      	str	r2, [r7, #28]
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	441a      	add	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001ad4:	e0a0      	b.n	8001c18 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d022      	beq.n	8001b24 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f7ff fa85 	bl	8000ff4 <ensure>
 8001aea:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <print_object+0x9e>
            {
                return false;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e0ca      	b.n	8001c8c <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e007      	b.n	8001b0c <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	61fa      	str	r2, [r7, #28]
 8001b02:	2209      	movs	r2, #9
 8001b04:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3f2      	bcc.n	8001afc <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	441a      	add	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fc56 	bl	80013dc <print_string_ptr>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <print_object+0xe2>
        {
            return false;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e0a8      	b.n	8001c8c <print_object+0x234>
        }
        update_offset(output_buffer);
 8001b3a:	6838      	ldr	r0, [r7, #0]
 8001b3c:	f7ff faf4 	bl	8001128 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <print_object+0xf4>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e000      	b.n	8001b4e <print_object+0xf6>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	6838      	ldr	r0, [r7, #0]
 8001b54:	f7ff fa4e 	bl	8000ff4 <ensure>
 8001b58:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <print_object+0x10c>
        {
            return false;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e093      	b.n	8001c8c <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	61fa      	str	r2, [r7, #28]
 8001b6a:	223a      	movs	r2, #58	; 0x3a
 8001b6c:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	61fa      	str	r2, [r7, #28]
 8001b7c:	2209      	movs	r2, #9
 8001b7e:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	441a      	add	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	69b8      	ldr	r0, [r7, #24]
 8001b90:	f7ff fdf8 	bl	8001784 <print_value>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <print_object+0x146>
        {
            return false;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e076      	b.n	8001c8c <print_object+0x234>
        }
        update_offset(output_buffer);
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f7ff fac2 	bl	8001128 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <print_object+0x158>
 8001bac:	2201      	movs	r2, #1
 8001bae:	e000      	b.n	8001bb2 <print_object+0x15a>
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <print_object+0x166>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <print_object+0x168>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6838      	ldr	r0, [r7, #0]
 8001bcc:	f7ff fa12 	bl	8000ff4 <ensure>
 8001bd0:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <print_object+0x184>
        {
            return false;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e057      	b.n	8001c8c <print_object+0x234>
        }
        if (current_item->next)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <print_object+0x196>
        {
            *output_pointer++ = ',';
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	61fa      	str	r2, [r7, #28]
 8001bea:	222c      	movs	r2, #44	; 0x2c
 8001bec:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	61fa      	str	r2, [r7, #28]
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	441a      	add	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f af5b 	bne.w	8001ad6 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <print_object+0x1d8>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	e000      	b.n	8001c32 <print_object+0x1da>
 8001c30:	2302      	movs	r3, #2
 8001c32:	4619      	mov	r1, r3
 8001c34:	6838      	ldr	r0, [r7, #0]
 8001c36:	f7ff f9dd 	bl	8000ff4 <ensure>
 8001c3a:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <print_object+0x1ee>
    {
        return false;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e022      	b.n	8001c8c <print_object+0x234>
    }
    if (output_buffer->format)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e007      	b.n	8001c64 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	61fa      	str	r2, [r7, #28]
 8001c5a:	2209      	movs	r2, #9
 8001c5c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	3301      	adds	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3f1      	bcc.n	8001c54 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	61fa      	str	r2, [r7, #28]
 8001c76:	227d      	movs	r2, #125	; 0x7d
 8001c78:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	1e5a      	subs	r2, r3, #1
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	60da      	str	r2, [r3, #12]

    return true;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	605a      	str	r2, [r3, #4]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <add_item_to_array+0x22>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <add_item_to_array+0x22>
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d101      	bne.n	8001cdc <add_item_to_array+0x26>
    {
        return false;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e01e      	b.n	8001d1a <add_item_to_array+0x64>
    }

    child = array->child;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e00d      	b.n	8001d18 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ffc2 	bl	8001c94 <suffix_object>
            array->child->prev = item;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001d2a:	687b      	ldr	r3, [r7, #4]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <add_item_to_object+0x30>
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <add_item_to_object+0x30>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <add_item_to_object+0x30>
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d101      	bne.n	8001d6c <add_item_to_object+0x34>
    {
        return false;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e036      	b.n	8001dda <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001d72:	68b8      	ldr	r0, [r7, #8]
 8001d74:	f7ff ffd5 	bl	8001d22 <cast_away_const>
 8001d78:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	e00e      	b.n	8001da4 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	68b8      	ldr	r0, [r7, #8]
 8001d8a:	f7ff f8a3 	bl	8000ed4 <cJSON_strdup>
 8001d8e:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <add_item_to_object+0x62>
        {
            return false;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e01f      	b.n	8001dda <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001da2:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <add_item_to_object+0x8c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6a12      	ldr	r2, [r2, #32]
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4798      	blx	r3
    }

    item->string = new_key;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff ff6f 	bl	8001cb6 <add_item_to_array>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8001df0:	2300      	movs	r3, #0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <cJSON_AddItemToObject+0x28>)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff ff9c 	bl	8001d38 <add_item_to_object>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000004 	.word	0x20000004

08001e10 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001e18:	480f      	ldr	r0, [pc, #60]	; (8001e58 <cJSON_CreateString+0x48>)
 8001e1a:	f7ff f883 	bl	8000f24 <cJSON_New_Item>
 8001e1e:	60f8      	str	r0, [r7, #12]
    if(item)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2210      	movs	r2, #16
 8001e2a:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8001e2c:	490a      	ldr	r1, [pc, #40]	; (8001e58 <cJSON_CreateString+0x48>)
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff f850 	bl	8000ed4 <cJSON_strdup>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d104      	bne.n	8001e4c <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff f884 	bl	8000f50 <cJSON_Delete>
            return NULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000004 	.word	0x20000004

08001e5c <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <cJSON_CreateObject+0x24>)
 8001e64:	f7ff f85e 	bl	8000f24 <cJSON_New_Item>
 8001e68:	6078      	str	r0, [r7, #4]
    if (item)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001e76:	687b      	ldr	r3, [r7, #4]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000004 	.word	0x20000004

08001e84 <createJsonMessage>:
extern PRODUCT_STATUS   productStatus;

void sensorEventHandling();

static char *createJsonMessage(sensorDev *sensor)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	static unsigned long seq = 0;

	char value[8] = {0,};
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
	char *string = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
	cJSON *name  = NULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
	cJSON *monitor = cJSON_CreateObject();
 8001e9c:	f7ff ffde 	bl	8001e5c <cJSON_CreateObject>
 8001ea0:	6178      	str	r0, [r7, #20]

    if (monitor == NULL)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d07d      	beq.n	8001fa4 <createJsonMessage+0x120>
    {
        goto end;
    }

    /* Temp */
    snprintf(value, sizeof(value), "%lu", seq++);
 8001ea8:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <createJsonMessage+0x148>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	4947      	ldr	r1, [pc, #284]	; (8001fcc <createJsonMessage+0x148>)
 8001eb0:	600a      	str	r2, [r1, #0]
 8001eb2:	f107 000c 	add.w	r0, r7, #12
 8001eb6:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <createJsonMessage+0x14c>)
 8001eb8:	2108      	movs	r1, #8
 8001eba:	f028 fa11 	bl	802a2e0 <sniprintf>
    name = cJSON_CreateString(value);
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ffa4 	bl	8001e10 <cJSON_CreateString>
 8001ec8:	61b8      	str	r0, [r7, #24]
    if (name == NULL)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d06b      	beq.n	8001fa8 <createJsonMessage+0x124>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "sequence", name);
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4940      	ldr	r1, [pc, #256]	; (8001fd4 <createJsonMessage+0x150>)
 8001ed4:	6978      	ldr	r0, [r7, #20]
 8001ed6:	f7ff ff85 	bl	8001de4 <cJSON_AddItemToObject>


    memset(value, 0x0, sizeof(value));
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	2208      	movs	r2, #8
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f027 fb2a 	bl	802953c <memset>
    /* Temp */
    snprintf(value, sizeof(value), "%u", sensor->temparature);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f107 000c 	add.w	r0, r7, #12
 8001ef0:	4a39      	ldr	r2, [pc, #228]	; (8001fd8 <createJsonMessage+0x154>)
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	f028 f9f4 	bl	802a2e0 <sniprintf>
    name = cJSON_CreateString(value);
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff87 	bl	8001e10 <cJSON_CreateString>
 8001f02:	61b8      	str	r0, [r7, #24]
    if (name == NULL)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d050      	beq.n	8001fac <createJsonMessage+0x128>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "temp", name);
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4933      	ldr	r1, [pc, #204]	; (8001fdc <createJsonMessage+0x158>)
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff68 	bl	8001de4 <cJSON_AddItemToObject>


    memset(value, 0x0, sizeof(value));
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2208      	movs	r2, #8
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f027 fb0d 	bl	802953c <memset>
    /* Humidity */
    snprintf(value, sizeof(value), "%u", sensor->humidity);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f107 000c 	add.w	r0, r7, #12
 8001f2a:	4a2b      	ldr	r2, [pc, #172]	; (8001fd8 <createJsonMessage+0x154>)
 8001f2c:	2108      	movs	r1, #8
 8001f2e:	f028 f9d7 	bl	802a2e0 <sniprintf>
    name = cJSON_CreateString(value);
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff6a 	bl	8001e10 <cJSON_CreateString>
 8001f3c:	61b8      	str	r0, [r7, #24]
    if (name == NULL)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d035      	beq.n	8001fb0 <createJsonMessage+0x12c>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "humidity", name);
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4926      	ldr	r1, [pc, #152]	; (8001fe0 <createJsonMessage+0x15c>)
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f7ff ff4b 	bl	8001de4 <cJSON_AddItemToObject>

    memset(value, 0x0, sizeof(value));
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	2208      	movs	r2, #8
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f027 faf0 	bl	802953c <memset>
    /* Humidity */
    snprintf(value, sizeof(value), "%d", productStatus);
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <createJsonMessage+0x160>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f107 000c 	add.w	r0, r7, #12
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <createJsonMessage+0x164>)
 8001f66:	2108      	movs	r1, #8
 8001f68:	f028 f9ba 	bl	802a2e0 <sniprintf>
    name = cJSON_CreateString(value);
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff4d 	bl	8001e10 <cJSON_CreateString>
 8001f76:	61b8      	str	r0, [r7, #24]
    if (name == NULL)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01a      	beq.n	8001fb4 <createJsonMessage+0x130>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "status", name);
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	491a      	ldr	r1, [pc, #104]	; (8001fec <createJsonMessage+0x168>)
 8001f82:	6978      	ldr	r0, [r7, #20]
 8001f84:	f7ff ff2e 	bl	8001de4 <cJSON_AddItemToObject>

    string = cJSON_Print(monitor);
 8001f88:	6978      	ldr	r0, [r7, #20]
 8001f8a:	f7ff fbeb 	bl	8001764 <cJSON_Print>
 8001f8e:	61f8      	str	r0, [r7, #28]
    if (string == NULL)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d110      	bne.n	8001fb8 <createJsonMessage+0x134>
    {
        DEBUG_PRINT("Failed to print monitor.");
 8001f96:	2351      	movs	r3, #81	; 0x51
 8001f98:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <createJsonMessage+0x16c>)
 8001f9a:	4916      	ldr	r1, [pc, #88]	; (8001ff4 <createJsonMessage+0x170>)
 8001f9c:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <createJsonMessage+0x174>)
 8001f9e:	f003 fa35 	bl	800540c <_debugPrint>
 8001fa2:	e00a      	b.n	8001fba <createJsonMessage+0x136>
        goto end;
 8001fa4:	bf00      	nop
 8001fa6:	e008      	b.n	8001fba <createJsonMessage+0x136>
        goto end;
 8001fa8:	bf00      	nop
 8001faa:	e006      	b.n	8001fba <createJsonMessage+0x136>
        goto end;
 8001fac:	bf00      	nop
 8001fae:	e004      	b.n	8001fba <createJsonMessage+0x136>
        goto end;
 8001fb0:	bf00      	nop
 8001fb2:	e002      	b.n	8001fba <createJsonMessage+0x136>
        goto end;
 8001fb4:	bf00      	nop
 8001fb6:	e000      	b.n	8001fba <createJsonMessage+0x136>
    }

    end:
 8001fb8:	bf00      	nop
        cJSON_Delete(monitor);
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7fe ffc8 	bl	8000f50 <cJSON_Delete>
        return string;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200002fc 	.word	0x200002fc
 8001fd0:	0802ce4c 	.word	0x0802ce4c
 8001fd4:	0802ce50 	.word	0x0802ce50
 8001fd8:	0802ce5c 	.word	0x0802ce5c
 8001fdc:	0802ce60 	.word	0x0802ce60
 8001fe0:	0802ce68 	.word	0x0802ce68
 8001fe4:	2000a52c 	.word	0x2000a52c
 8001fe8:	0802ce74 	.word	0x0802ce74
 8001fec:	0802ce78 	.word	0x0802ce78
 8001ff0:	0802e04c 	.word	0x0802e04c
 8001ff4:	0802ce80 	.word	0x0802ce80
 8001ff8:	0802cea8 	.word	0x0802cea8

08001ffc <messageForwardBroker>:

static void messageForwardBroker(sensorDev *sensor)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	char *message = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]

	message = createJsonMessage(sensor);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff3b 	bl	8001e84 <createJsonMessage>
 800200e:	60f8      	str	r0, [r7, #12]
	publish(message);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fbaf 	bl	8002774 <publish>

	if (message)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <messageForwardBroker+0x26>
	{
		free(message);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f027 fa5d 	bl	80294dc <free>
	}
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <messageForwardLcdTask>:

osStatus messageForwardLcdTask(ENV_MSG *envData)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	return osMessageQueuePut(envQueueHandle, envData, 0, 10);
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <messageForwardLcdTask+0x20>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	230a      	movs	r3, #10
 800203a:	2200      	movs	r2, #0
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	f00c fad1 	bl	800e5e4 <osMessageQueuePut>
 8002042:	4603      	mov	r3, r0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000c2ec 	.word	0x2000c2ec

08002050 <sensorEventHandling>:

void sensorEventHandling()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0a4      	sub	sp, #144	; 0x90
 8002054:	af00      	add	r7, sp, #0
	ENV_MSG envData;
	sensorDev sensor;
	char debug[128] = {0,};
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	227c      	movs	r2, #124	; 0x7c
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f027 fa6b 	bl	802953c <memset>

	readEth01dvSensor(&sensor);
 8002066:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fd08 	bl	8002a80 <readEth01dvSensor>

	snprintf(debug, sizeof(debug), "sensor.temparature [%d]", sensor.temparature);
 8002070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002074:	4638      	mov	r0, r7
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <sensorEventHandling+0x68>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	f028 f931 	bl	802a2e0 <sniprintf>
	//DEBUG_PRINT(debug);

	envData.humid    = sensor.humidity;
 800207e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	envData.temp     = sensor.temparature;
 8002086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800208a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if ( (messageForwardLcdTask(&envData) == osOK) && (isConnectBroker == true) )
 800208e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ffca 	bl	800202c <messageForwardLcdTask>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <sensorEventHandling+0x60>
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <sensorEventHandling+0x6c>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <sensorEventHandling+0x60>
	{
		messageForwardBroker(&sensor);
 80020a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ffa6 	bl	8001ffc <messageForwardBroker>
	}
}
 80020b0:	bf00      	nop
 80020b2:	3790      	adds	r7, #144	; 0x90
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	0802cec4 	.word	0x0802cec4
 80020bc:	2000ba68 	.word	0x2000ba68

080020c0 <humidifierOn>:

void humidifierOn()
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	productStatus = ON;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <humidifierOn+0x34>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]

	/* humidifier I/O */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	2140      	movs	r1, #64	; 0x40
 80020ce:	480a      	ldr	r0, [pc, #40]	; (80020f8 <humidifierOn+0x38>)
 80020d0:	f005 fcf8 	bl	8007ac4 <HAL_GPIO_WritePin>

	/* FET ON */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	2108      	movs	r1, #8
 80020d8:	4808      	ldr	r0, [pc, #32]	; (80020fc <humidifierOn+0x3c>)
 80020da:	f005 fcf3 	bl	8007ac4 <HAL_GPIO_WritePin>

	/* LED */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, SET);
 80020de:	2201      	movs	r2, #1
 80020e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e4:	4806      	ldr	r0, [pc, #24]	; (8002100 <humidifierOn+0x40>)
 80020e6:	f005 fced 	bl	8007ac4 <HAL_GPIO_WritePin>

	humidifierOnBuzzerSound();
 80020ea:	f000 fc43 	bl	8002974 <humidifierOnBuzzerSound>
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000a52c 	.word	0x2000a52c
 80020f8:	40021400 	.word	0x40021400
 80020fc:	40021000 	.word	0x40021000
 8002100:	40021800 	.word	0x40021800

08002104 <humidifierOff>:

void humidifierOff()
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	productStatus = OFF;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <humidifierOff+0x30>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	2140      	movs	r1, #64	; 0x40
 8002112:	4809      	ldr	r0, [pc, #36]	; (8002138 <humidifierOff+0x34>)
 8002114:	f005 fcd6 	bl	8007ac4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2108      	movs	r1, #8
 800211c:	4807      	ldr	r0, [pc, #28]	; (800213c <humidifierOff+0x38>)
 800211e:	f005 fcd1 	bl	8007ac4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <humidifierOff+0x3c>)
 800212a:	f005 fccb 	bl	8007ac4 <HAL_GPIO_WritePin>

}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000a52c 	.word	0x2000a52c
 8002138:	40021400 	.word	0x40021400
 800213c:	40021000 	.word	0x40021000
 8002140:	40021800 	.word	0x40021800

08002144 <receiveHandlling>:

void receiveHandlling()
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	PacketProcessing(&mqttPublish);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <receiveHandlling+0x10>)
 800214a:	f000 fa37 	bl	80025bc <PacketProcessing>
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000c0b0 	.word	0x2000c0b0

08002158 <_eventHandler>:

void _eventHandler(void const * argument)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08e      	sub	sp, #56	; 0x38
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	unsigned char index;
	int cnt;
	char debug[32] = {0,};
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	615a      	str	r2, [r3, #20]
 8002176:	619a      	str	r2, [r3, #24]

	DEBUG_PRINT("eventHandler init !!!!");
 8002178:	23a5      	movs	r3, #165	; 0xa5
 800217a:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <_eventHandler+0xcc>)
 800217c:	492a      	ldr	r1, [pc, #168]	; (8002228 <_eventHandler+0xd0>)
 800217e:	482b      	ldr	r0, [pc, #172]	; (800222c <_eventHandler+0xd4>)
 8002180:	f003 f944 	bl	800540c <_debugPrint>

	buzzerInit(&htim2, TIM_CHANNEL_1);
 8002184:	2100      	movs	r1, #0
 8002186:	482a      	ldr	r0, [pc, #168]	; (8002230 <_eventHandler+0xd8>)
 8002188:	f000 fbdc 	bl	8002944 <buzzerInit>
	osDelay(500);
 800218c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002190:	f00b fed0 	bl	800df34 <osDelay>

	humidifierOn();
 8002194:	f7ff ff94 	bl	80020c0 <humidifierOn>

	ring_buffer_init(&ring_buffer);
 8002198:	4826      	ldr	r0, [pc, #152]	; (8002234 <_eventHandler+0xdc>)
 800219a:	f000 fb6f 	bl	800287c <ring_buffer_init>

	osTimerStart(updateSensorTimerHandle, 500);
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <_eventHandler+0xe0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021a6:	4618      	mov	r0, r3
 80021a8:	f00b ff70 	bl	800e08c <osTimerStart>

	for (;;)
	{
		for (cnt = 0; ring_buffer_dequeue(&ring_buffer, &index) > 0; cnt++)
 80021ac:	2300      	movs	r3, #0
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
 80021b0:	e02a      	b.n	8002208 <_eventHandler+0xb0>
		{
			int32_t evn = (int32_t)index;
 80021b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
			snprintf(debug, sizeof(debug), "dev:[%lu]\r\n", evn);
 80021b8:	f107 000c 	add.w	r0, r7, #12
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	4a1f      	ldr	r2, [pc, #124]	; (800223c <_eventHandler+0xe4>)
 80021c0:	2120      	movs	r1, #32
 80021c2:	f028 f88d 	bl	802a2e0 <sniprintf>
			//DEBUG_PRINT(debug);
			switch (index)
 80021c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021ca:	3b03      	subs	r3, #3
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d817      	bhi.n	8002200 <_eventHandler+0xa8>
 80021d0:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <_eventHandler+0x80>)
 80021d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d6:	bf00      	nop
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021ef 	.word	0x080021ef
 80021e0:	080021f5 	.word	0x080021f5
 80021e4:	080021fb 	.word	0x080021fb
			{
				case HUM_ON:
					humidifierOn();
 80021e8:	f7ff ff6a 	bl	80020c0 <humidifierOn>
					break;
 80021ec:	e009      	b.n	8002202 <_eventHandler+0xaa>

				case HUM_OFF:
					humidifierOff();
 80021ee:	f7ff ff89 	bl	8002104 <humidifierOff>
					break;
 80021f2:	e006      	b.n	8002202 <_eventHandler+0xaa>

				case UPDATE_SENSOR_VALUE:
					sensorEventHandling();
 80021f4:	f7ff ff2c 	bl	8002050 <sensorEventHandling>
					break;
 80021f8:	e003      	b.n	8002202 <_eventHandler+0xaa>

				case UART_RECEIVE:
					receiveHandlling();
 80021fa:	f7ff ffa3 	bl	8002144 <receiveHandlling>
					break;
 80021fe:	e000      	b.n	8002202 <_eventHandler+0xaa>

				default :
					break;
 8002200:	bf00      	nop
		for (cnt = 0; ring_buffer_dequeue(&ring_buffer, &index) > 0; cnt++)
 8002202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002204:	3301      	adds	r3, #1
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
 8002208:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800220c:	4619      	mov	r1, r3
 800220e:	4809      	ldr	r0, [pc, #36]	; (8002234 <_eventHandler+0xdc>)
 8002210:	f000 fb73 	bl	80028fa <ring_buffer_dequeue>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1cb      	bne.n	80021b2 <_eventHandler+0x5a>
			}
		}
	    osDelay(1);
 800221a:	2001      	movs	r0, #1
 800221c:	f00b fe8a 	bl	800df34 <osDelay>
		for (cnt = 0; ring_buffer_dequeue(&ring_buffer, &index) > 0; cnt++)
 8002220:	e7c4      	b.n	80021ac <_eventHandler+0x54>
 8002222:	bf00      	nop
 8002224:	0802e060 	.word	0x0802e060
 8002228:	0802ce80 	.word	0x0802ce80
 800222c:	0802cedc 	.word	0x0802cedc
 8002230:	2000c494 	.word	0x2000c494
 8002234:	2000b9e0 	.word	0x2000b9e0
 8002238:	2000c2d4 	.word	0x2000c2d4
 800223c:	0802cef4 	.word	0x0802cef4

08002240 <eventLoopTask>:
#include "event_loop.h"

extern osEventFlagsId_t eventFlagHandle;

void eventLoopTask(void const * argument)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint32_t eventFlag;

	DEBUG_PRINT("eventLoopTask..");
 8002248:	2311      	movs	r3, #17
 800224a:	4a24      	ldr	r2, [pc, #144]	; (80022dc <eventLoopTask+0x9c>)
 800224c:	4924      	ldr	r1, [pc, #144]	; (80022e0 <eventLoopTask+0xa0>)
 800224e:	4825      	ldr	r0, [pc, #148]	; (80022e4 <eventLoopTask+0xa4>)
 8002250:	f003 f8dc 	bl	800540c <_debugPrint>

  /* Infinite loop */
  for (;;)
  {
	    eventFlag = osEventFlagsWait(eventFlagHandle, 0x00FF, osFlagsWaitAny, osWaitForever);
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <eventLoopTask+0xa8>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	2200      	movs	r2, #0
 800225e:	21ff      	movs	r1, #255	; 0xff
 8002260:	f00b ffc6 	bl	800e1f0 <osEventFlagsWait>
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b03      	subs	r3, #3
 800226a:	2b04      	cmp	r3, #4
 800226c:	d831      	bhi.n	80022d2 <eventLoopTask+0x92>
 800226e:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <eventLoopTask+0x34>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	080022bf 	.word	0x080022bf
 8002278:	080022c9 	.word	0x080022c9
 800227c:	080022b5 	.word	0x080022b5
 8002280:	0800229f 	.word	0x0800229f
 8002284:	08002289 	.word	0x08002289
		{
				switch (eventFlag)
				{
					case WIFI_SEND_REP:
						DEBUG_PRINT("WIFI_SEND_REP");
 8002288:	231b      	movs	r3, #27
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <eventLoopTask+0x9c>)
 800228c:	4914      	ldr	r1, [pc, #80]	; (80022e0 <eventLoopTask+0xa0>)
 800228e:	4817      	ldr	r0, [pc, #92]	; (80022ec <eventLoopTask+0xac>)
 8002290:	f003 f8bc 	bl	800540c <_debugPrint>
						ring_buffer_queue(&ring_buffer, (unsigned char)WIFI_SEND_REP);
 8002294:	2107      	movs	r1, #7
 8002296:	4816      	ldr	r0, [pc, #88]	; (80022f0 <eventLoopTask+0xb0>)
 8002298:	f000 fb02 	bl	80028a0 <ring_buffer_queue>
						break;
 800229c:	e01a      	b.n	80022d4 <eventLoopTask+0x94>

					case UART_RECEIVE:
						DEBUG_PRINT("UART_RECEIVE");
 800229e:	2320      	movs	r3, #32
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <eventLoopTask+0x9c>)
 80022a2:	490f      	ldr	r1, [pc, #60]	; (80022e0 <eventLoopTask+0xa0>)
 80022a4:	4813      	ldr	r0, [pc, #76]	; (80022f4 <eventLoopTask+0xb4>)
 80022a6:	f003 f8b1 	bl	800540c <_debugPrint>
						ring_buffer_queue(&ring_buffer, (unsigned char)UART_RECEIVE);
 80022aa:	2106      	movs	r1, #6
 80022ac:	4810      	ldr	r0, [pc, #64]	; (80022f0 <eventLoopTask+0xb0>)
 80022ae:	f000 faf7 	bl	80028a0 <ring_buffer_queue>
						break;
 80022b2:	e00f      	b.n	80022d4 <eventLoopTask+0x94>

					case UPDATE_SENSOR_VALUE:
						ring_buffer_queue(&ring_buffer, (unsigned char)UPDATE_SENSOR_VALUE);
 80022b4:	2105      	movs	r1, #5
 80022b6:	480e      	ldr	r0, [pc, #56]	; (80022f0 <eventLoopTask+0xb0>)
 80022b8:	f000 faf2 	bl	80028a0 <ring_buffer_queue>
						break;
 80022bc:	e00a      	b.n	80022d4 <eventLoopTask+0x94>

					case HUM_ON:
						ring_buffer_queue(&ring_buffer, (unsigned char)HUM_ON);
 80022be:	2103      	movs	r1, #3
 80022c0:	480b      	ldr	r0, [pc, #44]	; (80022f0 <eventLoopTask+0xb0>)
 80022c2:	f000 faed 	bl	80028a0 <ring_buffer_queue>
						break;
 80022c6:	e005      	b.n	80022d4 <eventLoopTask+0x94>

					case HUM_OFF:

						ring_buffer_queue(&ring_buffer, (unsigned char)HUM_OFF);
 80022c8:	2104      	movs	r1, #4
 80022ca:	4809      	ldr	r0, [pc, #36]	; (80022f0 <eventLoopTask+0xb0>)
 80022cc:	f000 fae8 	bl	80028a0 <ring_buffer_queue>
						break;
 80022d0:	e000      	b.n	80022d4 <eventLoopTask+0x94>

					default:
						break;
 80022d2:	bf00      	nop
				}
		}
		osDelay(1);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f00b fe2d 	bl	800df34 <osDelay>
	    eventFlag = osEventFlagsWait(eventFlagHandle, 0x00FF, osFlagsWaitAny, osWaitForever);
 80022da:	e7bb      	b.n	8002254 <eventLoopTask+0x14>
 80022dc:	0802e070 	.word	0x0802e070
 80022e0:	0802cf00 	.word	0x0802cf00
 80022e4:	0802cf20 	.word	0x0802cf20
 80022e8:	2000c2d8 	.word	0x2000c2d8
 80022ec:	0802cf30 	.word	0x0802cf30
 80022f0:	2000b9e0 	.word	0x2000b9e0
 80022f4:	0802cf40 	.word	0x0802cf40

080022f8 <publish_transport_getdata>:

extern Wifi_t Wifi;
extern osEventFlagsId_t  eventFlagHandle;

int publish_transport_getdata(uint8_t *buf, int buflen)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
#if (1)
	for (int i=0; i<buflen && (!ring_buffer_is_empty(&Wifi.wifi_ring_buffer[0])); i++)
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e009      	b.n	800231c <publish_transport_getdata+0x24>
	{
		ring_buffer_dequeue(&Wifi.wifi_ring_buffer[0], (unsigned char *)(&buf[i]));
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4619      	mov	r1, r3
 8002310:	480a      	ldr	r0, [pc, #40]	; (800233c <publish_transport_getdata+0x44>)
 8002312:	f000 faf2 	bl	80028fa <ring_buffer_dequeue>
	for (int i=0; i<buflen && (!ring_buffer_is_empty(&Wifi.wifi_ring_buffer[0])); i++)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3301      	adds	r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	da05      	bge.n	8002330 <publish_transport_getdata+0x38>
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <publish_transport_getdata+0x44>)
 8002326:	f000 fa7b 	bl	8002820 <ring_buffer_is_empty>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0eb      	beq.n	8002308 <publish_transport_getdata+0x10>
	}
	return buflen;
 8002330:	683b      	ldr	r3, [r7, #0]
#else
	return read(mqttPublish.network.socket, buf, buflen);
#endif
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000bd70 	.word	0x2000bd70

08002340 <subscribe_transport_getdata>:

int subscribe_transport_getdata(uint8_t *buf, int buflen)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
#if (1)
	for (int i=0; i<buflen && (!ring_buffer_is_empty(&Wifi.wifi_ring_buffer[0])); i++)
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	e009      	b.n	8002364 <subscribe_transport_getdata+0x24>
	{
		ring_buffer_dequeue(&Wifi.wifi_ring_buffer[0], (unsigned char *)(&buf[i]));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4619      	mov	r1, r3
 8002358:	480a      	ldr	r0, [pc, #40]	; (8002384 <subscribe_transport_getdata+0x44>)
 800235a:	f000 face 	bl	80028fa <ring_buffer_dequeue>
	for (int i=0; i<buflen && (!ring_buffer_is_empty(&Wifi.wifi_ring_buffer[0])); i++)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	da05      	bge.n	8002378 <subscribe_transport_getdata+0x38>
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <subscribe_transport_getdata+0x44>)
 800236e:	f000 fa57 	bl	8002820 <ring_buffer_is_empty>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0eb      	beq.n	8002350 <subscribe_transport_getdata+0x10>
	}
	return buflen;
 8002378:	683b      	ldr	r3, [r7, #0]
#else
	return read(mqttPublish.network.socket, buf, buflen);
#endif
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000bd70 	.word	0x2000bd70

08002388 <mqttInit>:

bool mqttInit()
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	mqttPublish.pubTopic = "/pub/smart/humidifier";
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <mqttInit+0x74>)
 800238e:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <mqttInit+0x78>)
 8002390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	mqttPublish.subTopic = "/sub/smart/humidifier";
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <mqttInit+0x74>)
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <mqttInit+0x7c>)
 8002398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	mqttSubscribe.pubTopic = "/pub/smart/humidifier";
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <mqttInit+0x80>)
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <mqttInit+0x78>)
 80023a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	mqttSubscribe.subTopic = "/sub/smart/humidifier";
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <mqttInit+0x80>)
 80023a6:	4a17      	ldr	r2, [pc, #92]	; (8002404 <mqttInit+0x7c>)
 80023a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	if ((socket(SOCK_STREAM, WIFI_IFACE, &mqttPublish.network)) == FAIL)
 80023ac:	4a17      	ldr	r2, [pc, #92]	; (800240c <mqttInit+0x84>)
 80023ae:	2100      	movs	r1, #0
 80023b0:	2001      	movs	r0, #1
 80023b2:	f002 fb51 	bl	8004a58 <socket>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <mqttInit+0x44>
	{
		DEBUG_PRINT("socket Fail !");
 80023bc:	2332      	movs	r3, #50	; 0x32
 80023be:	4a14      	ldr	r2, [pc, #80]	; (8002410 <mqttInit+0x88>)
 80023c0:	4914      	ldr	r1, [pc, #80]	; (8002414 <mqttInit+0x8c>)
 80023c2:	4815      	ldr	r0, [pc, #84]	; (8002418 <mqttInit+0x90>)
 80023c4:	f003 f822 	bl	800540c <_debugPrint>
		return false;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e014      	b.n	80023f6 <mqttInit+0x6e>
	}
	wifiRxClear(mqttPublish.network.socket);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <mqttInit+0x74>)
 80023ce:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fb06 	bl	80039e4 <wifiRxClear>

	mqttSubscribe.network.socket = mqttPublish.network.socket;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <mqttInit+0x74>)
 80023da:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <mqttInit+0x80>)
 80023e0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	mqttPublish.getfp   = publish_transport_getdata;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <mqttInit+0x74>)
 80023e6:	4a0d      	ldr	r2, [pc, #52]	; (800241c <mqttInit+0x94>)
 80023e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	mqttSubscribe.getfp = subscribe_transport_getdata;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <mqttInit+0x80>)
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <mqttInit+0x98>)
 80023f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	return true;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000c0b0 	.word	0x2000c0b0
 8002400:	0802cf50 	.word	0x0802cf50
 8002404:	0802cf68 	.word	0x0802cf68
 8002408:	2000c158 	.word	0x2000c158
 800240c:	2000c14c 	.word	0x2000c14c
 8002410:	0802e080 	.word	0x0802e080
 8002414:	0802cf80 	.word	0x0802cf80
 8002418:	0802cf98 	.word	0x0802cf98
 800241c:	080022f9 	.word	0x080022f9
 8002420:	08002341 	.word	0x08002341

08002424 <connectBroker>:

int connectBroker(s_mqtt *mqtt)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0bc      	sub	sp, #240	; 0xf0
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 800242c:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <connectBroker+0xd4>)
 800242e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002432:	4611      	mov	r1, r2
 8002434:	2258      	movs	r2, #88	; 0x58
 8002436:	4618      	mov	r0, r3
 8002438:	f027 f858 	bl	80294ec <memcpy>
	unsigned char buffer[128];
	int buflen = sizeof(buffer);
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	int length;

	uint8_t responMsg = 0xff;
 8002442:	23ff      	movs	r3, #255	; 0xff
 8002444:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	uint8_t sessionPresent = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	72fb      	strb	r3, [r7, #11]
	uint8_t connack_rc = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	72bb      	strb	r3, [r7, #10]

	connect(&mqtt->network, HOST_IP, HOST_PORT);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	339c      	adds	r3, #156	; 0x9c
 8002454:	4a29      	ldr	r2, [pc, #164]	; (80024fc <connectBroker+0xd8>)
 8002456:	492a      	ldr	r1, [pc, #168]	; (8002500 <connectBroker+0xdc>)
 8002458:	4618      	mov	r0, r3
 800245a:	f002 fb31 	bl	8004ac0 <connect>

	connectData.MQTTVersion = 3;
 800245e:	2303      	movs	r3, #3
 8002460:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	connectData.clientID.cstring = "Topuz1";
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <connectBroker+0xe0>)
 8002466:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	connectData.keepAliveInterval = 60 * 2;
 800246a:	2378      	movs	r3, #120	; 0x78
 800246c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4

	length = MQTTSerialize_connect(buffer, buflen, &connectData);
 8002470:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800247c:	4618      	mov	r0, r3
 800247e:	f00a fe71 	bl	800d164 <MQTTSerialize_connect>
 8002482:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

	send(&mqtt->network, buffer, length);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	339c      	adds	r3, #156	; 0x9c
 800248a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800248e:	b292      	uxth	r2, r2
 8002490:	f107 010c 	add.w	r1, r7, #12
 8002494:	4618      	mov	r0, r3
 8002496:	f002 fb30 	bl	8004afa <send>
	osDelay(100);
 800249a:	2064      	movs	r0, #100	; 0x64
 800249c:	f00b fd4a 	bl	800df34 <osDelay>

	//responMsg = MQTTPacket_read(buffer, length, mqtt->getfp);
	responMsg = MQTTPacket_read(buffer, length, publish_transport_getdata);
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	4a18      	ldr	r2, [pc, #96]	; (8002508 <connectBroker+0xe4>)
 80024a6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00b f9dc 	bl	800d868 <MQTTPacket_read>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

	if ((responMsg != CONNACK) || (MQTTDeserialize_connack(&sessionPresent, &connack_rc, buffer, length) != 1 || connack_rc != 0))
 80024b6:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d10f      	bne.n	80024de <connectBroker+0xba>
 80024be:	f107 020c 	add.w	r2, r7, #12
 80024c2:	f107 010a 	add.w	r1, r7, #10
 80024c6:	f107 000b 	add.w	r0, r7, #11
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f00a ff35 	bl	800d33c <MQTTDeserialize_connack>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d102      	bne.n	80024de <connectBroker+0xba>
 80024d8:	7abb      	ldrb	r3, [r7, #10]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <connectBroker+0xc4>
	{
		isConnectBroker = false;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <connectBroker+0xe8>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]

		return CONNECT_FAIL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e003      	b.n	80024f0 <connectBroker+0xcc>
	}
	isConnectBroker = true;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <connectBroker+0xe8>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
	return CONNECT_SUCCESS;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	37f0      	adds	r7, #240	; 0xf0
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	0802cfc8 	.word	0x0802cfc8
 80024fc:	0802cfa8 	.word	0x0802cfa8
 8002500:	0802cfb0 	.word	0x0802cfb0
 8002504:	0802cfc0 	.word	0x0802cfc0
 8002508:	080022f9 	.word	0x080022f9
 800250c:	2000ba68 	.word	0x2000ba68

08002510 <mqttMessageHandling>:

void mqttMessageHandling(const unsigned char *payLoad, const int payloadLen)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0a4      	sub	sp, #144	; 0x90
 8002514:	af02      	add	r7, sp, #8
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
	char message[128]={0,};
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	227c      	movs	r2, #124	; 0x7c
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f027 f808 	bl	802953c <memset>

	snprintf(message, sizeof(message), "%.*s", payloadLen, payLoad);
 800252c:	f107 0008 	add.w	r0, r7, #8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4a19      	ldr	r2, [pc, #100]	; (800259c <mqttMessageHandling+0x8c>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	f027 fed1 	bl	802a2e0 <sniprintf>
	if (!strncmp(message, "RUN", sizeof("RUN")))
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	4917      	ldr	r1, [pc, #92]	; (80025a0 <mqttMessageHandling+0x90>)
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd fea3 	bl	8000290 <strcmp>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10c      	bne.n	800256a <mqttMessageHandling+0x5a>
	{
		DEBUG_PRINT("mqttMessageHandling [RUN] !");
 8002550:	2368      	movs	r3, #104	; 0x68
 8002552:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <mqttMessageHandling+0x94>)
 8002554:	4914      	ldr	r1, [pc, #80]	; (80025a8 <mqttMessageHandling+0x98>)
 8002556:	4815      	ldr	r0, [pc, #84]	; (80025ac <mqttMessageHandling+0x9c>)
 8002558:	f002 ff58 	bl	800540c <_debugPrint>
		osEventFlagsSet(eventFlagHandle, HUM_ON);
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <mqttMessageHandling+0xa0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2103      	movs	r1, #3
 8002562:	4618      	mov	r0, r3
 8002564:	f00b fe00 	bl	800e168 <osEventFlagsSet>
	else if (!strncmp(message, "STOP", sizeof("STOP")))
	{
		DEBUG_PRINT("mqttMessageHandling [STOP] !");
		osEventFlagsSet(eventFlagHandle, HUM_OFF);
	}
}
 8002568:	e014      	b.n	8002594 <mqttMessageHandling+0x84>
	else if (!strncmp(message, "STOP", sizeof("STOP")))
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	4911      	ldr	r1, [pc, #68]	; (80025b4 <mqttMessageHandling+0xa4>)
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd fe8d 	bl	8000290 <strcmp>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <mqttMessageHandling+0x84>
		DEBUG_PRINT("mqttMessageHandling [STOP] !");
 800257c:	236e      	movs	r3, #110	; 0x6e
 800257e:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <mqttMessageHandling+0x94>)
 8002580:	4909      	ldr	r1, [pc, #36]	; (80025a8 <mqttMessageHandling+0x98>)
 8002582:	480d      	ldr	r0, [pc, #52]	; (80025b8 <mqttMessageHandling+0xa8>)
 8002584:	f002 ff42 	bl	800540c <_debugPrint>
		osEventFlagsSet(eventFlagHandle, HUM_OFF);
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <mqttMessageHandling+0xa0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2104      	movs	r1, #4
 800258e:	4618      	mov	r0, r3
 8002590:	f00b fdea 	bl	800e168 <osEventFlagsSet>
}
 8002594:	bf00      	nop
 8002596:	3788      	adds	r7, #136	; 0x88
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	0802d020 	.word	0x0802d020
 80025a0:	0802d028 	.word	0x0802d028
 80025a4:	0802e08c 	.word	0x0802e08c
 80025a8:	0802cf80 	.word	0x0802cf80
 80025ac:	0802d02c 	.word	0x0802d02c
 80025b0:	2000c2d8 	.word	0x2000c2d8
 80025b4:	0802d048 	.word	0x0802d048
 80025b8:	0802d050 	.word	0x0802d050

080025bc <PacketProcessing>:

enum msgTypes PacketProcessing(s_mqtt *mqtt)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0b4      	sub	sp, #208	; 0xd0
 80025c0:	af06      	add	r7, sp, #24
 80025c2:	6078      	str	r0, [r7, #4]
	unsigned char buffer[128];
	int buflen = sizeof(buffer);
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int messageType;

	unsigned char retained, dup;
	unsigned char* payload_in;
	static unsigned short msgid=1;
	int payloadlen_in, qos=0, subcount, len;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
	MQTTString receivedTopic;

	messageType = MQTTPacket_read(buffer, buflen, subscribe_transport_getdata);
 80025ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d2:	4a3f      	ldr	r2, [pc, #252]	; (80026d0 <PacketProcessing+0x114>)
 80025d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80025d8:	4618      	mov	r0, r3
 80025da:	f00b f945 	bl	800d868 <MQTTPacket_read>
 80025de:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	switch (messageType)
 80025e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d01f      	beq.n	800262a <PacketProcessing+0x6e>
 80025ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025ee:	2b09      	cmp	r3, #9
 80025f0:	d164      	bne.n	80026bc <PacketProcessing+0x100>
	{
		case SUBACK:
			MQTTDeserialize_suback(&msgid, 1, &subcount, &qos, buffer, buflen);
 80025f2:	f107 011c 	add.w	r1, r7, #28
 80025f6:	f107 0218 	add.w	r2, r7, #24
 80025fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	460b      	mov	r3, r1
 8002608:	2101      	movs	r1, #1
 800260a:	4832      	ldr	r0, [pc, #200]	; (80026d4 <PacketProcessing+0x118>)
 800260c:	f00b fb0a 	bl	800dc24 <MQTTDeserialize_suback>
			wifiRxClear(mqtt->network.socket);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002616:	4618      	mov	r0, r3
 8002618:	f001 f9e4 	bl	80039e4 <wifiRxClear>

			DEBUG_PRINT("SUBACK");
 800261c:	2386      	movs	r3, #134	; 0x86
 800261e:	4a2e      	ldr	r2, [pc, #184]	; (80026d8 <PacketProcessing+0x11c>)
 8002620:	492e      	ldr	r1, [pc, #184]	; (80026dc <PacketProcessing+0x120>)
 8002622:	482f      	ldr	r0, [pc, #188]	; (80026e0 <PacketProcessing+0x124>)
 8002624:	f002 fef2 	bl	800540c <_debugPrint>
			break;
 8002628:	e04b      	b.n	80026c2 <PacketProcessing+0x106>

		case PUBLISH:
			DEBUG_PRINT("PUBLISH");
 800262a:	238a      	movs	r3, #138	; 0x8a
 800262c:	4a2a      	ldr	r2, [pc, #168]	; (80026d8 <PacketProcessing+0x11c>)
 800262e:	492b      	ldr	r1, [pc, #172]	; (80026dc <PacketProcessing+0x120>)
 8002630:	482c      	ldr	r0, [pc, #176]	; (80026e4 <PacketProcessing+0x128>)
 8002632:	f002 feeb 	bl	800540c <_debugPrint>
			if (MQTTDeserialize_publish(&dup, &qos, &retained, &msgid, &receivedTopic,
 8002636:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 800263a:	f107 011c 	add.w	r1, r7, #28
 800263e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 8002642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002646:	9304      	str	r3, [sp, #16]
 8002648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264c:	9303      	str	r3, [sp, #12]
 800264e:	f107 0320 	add.w	r3, r7, #32
 8002652:	9302      	str	r3, [sp, #8]
 8002654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	f107 030c 	add.w	r3, r7, #12
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <PacketProcessing+0x118>)
 8002662:	f00a fec0 	bl	800d3e6 <MQTTDeserialize_publish>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d129      	bne.n	80026c0 <PacketProcessing+0x104>
					&payload_in, &payloadlen_in, buffer, buflen) == 1)
			{
				mqttMessageHandling(payload_in, payloadlen_in);
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	6a3a      	ldr	r2, [r7, #32]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff4c 	bl	8002510 <mqttMessageHandling>

				wifiRxClear(mqtt->network.socket);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800267e:	4618      	mov	r0, r3
 8002680:	f001 f9b0 	bl	80039e4 <wifiRxClear>
				if ((len = MQTTSerialize_ack(buffer, buflen, PUBACK, 0, msgid)) != 0)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <PacketProcessing+0x118>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	2204      	movs	r2, #4
 8002692:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8002696:	f00b f9cd 	bl	800da34 <MQTTSerialize_ack>
 800269a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 800269e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <PacketProcessing+0x104>
				{
					send(&mqtt->network, buffer, len);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	339c      	adds	r3, #156	; 0x9c
 80026aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026ae:	b292      	uxth	r2, r2
 80026b0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fa20 	bl	8004afa <send>
				}
			}
			break;
 80026ba:	e001      	b.n	80026c0 <PacketProcessing+0x104>

		default :
			//DEBUG_PRINT("default");
			break;
 80026bc:	bf00      	nop
 80026be:	e000      	b.n	80026c2 <PacketProcessing+0x106>
			break;
 80026c0:	bf00      	nop
	}
	return messageType;
 80026c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026c6:	b2db      	uxtb	r3, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	37b8      	adds	r7, #184	; 0xb8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	08002341 	.word	0x08002341
 80026d4:	20000010 	.word	0x20000010
 80026d8:	0802e0a0 	.word	0x0802e0a0
 80026dc:	0802cf80 	.word	0x0802cf80
 80026e0:	0802d070 	.word	0x0802d070
 80026e4:	0802d078 	.word	0x0802d078

080026e8 <subscribe>:

int subscribe(s_mqtt *mqtt)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0ac      	sub	sp, #176	; 0xb0
 80026ec:	af04      	add	r7, sp, #16
 80026ee:	6078      	str	r0, [r7, #4]
	int req_qos = 0, len;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	unsigned char buffer[128];
	MQTTString topic = MQTTString_initializer;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
	topic.cstring = mqttSubscribe.subTopic;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <subscribe+0x7c>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	60fb      	str	r3, [r7, #12]

	len = MQTTSerialize_subscribe(buffer, sizeof(buffer), 0, 1, 1, &topic, &req_qos);
 800270a:	f107 0018 	add.w	r0, r7, #24
 800270e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002712:	9302      	str	r3, [sp, #8]
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2301      	movs	r3, #1
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2301      	movs	r3, #1
 8002720:	2200      	movs	r2, #0
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	f00b fa02 	bl	800db2c <MQTTSerialize_subscribe>
 8002728:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	if (len <= 0)
 800272c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002730:	2b00      	cmp	r3, #0
 8002732:	dc07      	bgt.n	8002744 <subscribe+0x5c>
	{
		DEBUG_PRINT("len <= 0");
 8002734:	23a9      	movs	r3, #169	; 0xa9
 8002736:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <subscribe+0x80>)
 8002738:	490c      	ldr	r1, [pc, #48]	; (800276c <subscribe+0x84>)
 800273a:	480d      	ldr	r0, [pc, #52]	; (8002770 <subscribe+0x88>)
 800273c:	f002 fe66 	bl	800540c <_debugPrint>
		return false;
 8002740:	2300      	movs	r3, #0
 8002742:	e00a      	b.n	800275a <subscribe+0x72>
	}
	send(&mqtt->network, (uint8_t *)buffer, len);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	339c      	adds	r3, #156	; 0x9c
 8002748:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800274c:	b292      	uxth	r2, r2
 800274e:	f107 0118 	add.w	r1, r7, #24
 8002752:	4618      	mov	r0, r3
 8002754:	f002 f9d1 	bl	8004afa <send>

	return true;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	37a0      	adds	r7, #160	; 0xa0
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	2000c158 	.word	0x2000c158
 8002768:	0802e0b4 	.word	0x0802e0b4
 800276c:	0802cf80 	.word	0x0802cf80
 8002770:	0802d080 	.word	0x0802d080

08002774 <publish>:

void publish(char *message)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b08b      	sub	sp, #44	; 0x2c
 8002778:	af08      	add	r7, sp, #32
 800277a:	6078      	str	r0, [r7, #4]
	if (!message || !(*message))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <publish+0x16>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <publish+0x24>
	{
		DEBUG_PRINT("publish message NULL");
 800278a:	23b5      	movs	r3, #181	; 0xb5
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <publish+0x94>)
 800278e:	491f      	ldr	r1, [pc, #124]	; (800280c <publish+0x98>)
 8002790:	481f      	ldr	r0, [pc, #124]	; (8002810 <publish+0x9c>)
 8002792:	f002 fe3b 	bl	800540c <_debugPrint>
		return;
 8002796:	e033      	b.n	8002800 <publish+0x8c>
	}
	memset(mqttPublish.msg, 0x0, sizeof(mqttPublish.msg));
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	2100      	movs	r1, #0
 800279c:	481d      	ldr	r0, [pc, #116]	; (8002814 <publish+0xa0>)
 800279e:	f026 fecd 	bl	802953c <memset>

	mqttPublish.topicString.cstring = mqttPublish.pubTopic;
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <publish+0xa0>)
 80027a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a8:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <publish+0xa0>)
 80027aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	mqttPublish.length = MQTTSerialize_publish(mqttPublish.msg, sizeof(mqttPublish.msg), 0, 0, 0, 0,
											   mqttPublish.topicString, (unsigned char *)message, strlen(message));
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fd fd78 	bl	80002a4 <strlen>
 80027b4:	4603      	mov	r3, r0
	mqttPublish.length = MQTTSerialize_publish(mqttPublish.msg, sizeof(mqttPublish.msg), 0, 0, 0, 0,
 80027b6:	9306      	str	r3, [sp, #24]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	9305      	str	r3, [sp, #20]
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <publish+0xa0>)
 80027be:	ac02      	add	r4, sp, #8
 80027c0:	3390      	adds	r3, #144	; 0x90
 80027c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027ca:	2300      	movs	r3, #0
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2300      	movs	r3, #0
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2200      	movs	r2, #0
 80027d6:	2180      	movs	r1, #128	; 0x80
 80027d8:	480e      	ldr	r0, [pc, #56]	; (8002814 <publish+0xa0>)
 80027da:	f00b f8b5 	bl	800d948 <MQTTSerialize_publish>
 80027de:	4603      	mov	r3, r0
 80027e0:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <publish+0xa0>)
 80027e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	sendingPublisher = true;
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <publish+0xa4>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]

	send(&mqttPublish.network, mqttPublish.msg, mqttPublish.length);
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <publish+0xa0>)
 80027ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	4907      	ldr	r1, [pc, #28]	; (8002814 <publish+0xa0>)
 80027f8:	4808      	ldr	r0, [pc, #32]	; (800281c <publish+0xa8>)
 80027fa:	f002 f97e 	bl	8004afa <send>
	return;
 80027fe:	bf00      	nop
}
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	bf00      	nop
 8002808:	0802e0c0 	.word	0x0802e0c0
 800280c:	0802cf80 	.word	0x0802cf80
 8002810:	0802d08c 	.word	0x0802d08c
 8002814:	2000c0b0 	.word	0x2000c0b0
 8002818:	2000c154 	.word	0x2000c154
 800281c:	2000c14c 	.word	0x2000c14c

08002820 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002834:	429a      	cmp	r2, r3
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002866:	2b7f      	cmp	r3, #127	; 0x7f
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  buffer->head_index = 0;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, unsigned char data) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ffcc 	bl	800284a <ring_buffer_is_full>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80028be:	3301      	adds	r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80028d4:	4619      	mov	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80028e2:	3301      	adds	r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <ring_buffer_dequeue>:
  for(i = 0; i < size; i++) {
    ring_buffer_queue(buffer, data[i]);
  }
}

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, unsigned char *data) {
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff8b 	bl	8002820 <ring_buffer_is_empty>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8002910:	2300      	movs	r3, #0
 8002912:	e013      	b.n	800293c <ring_buffer_dequeue+0x42>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	5c9a      	ldrb	r2, [r3, r2]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800292a:	3301      	adds	r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return 1;
 800293a:	2301      	movs	r3, #1
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <buzzerInit>:

TIM_HandleTypeDef *hBuzzTim;
uint32_t buzzChannel;

void buzzerInit(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	hBuzzTim = htim;
 800294e:	4a07      	ldr	r2, [pc, #28]	; (800296c <buzzerInit+0x28>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6013      	str	r3, [r2, #0]
	buzzChannel = Channel;
 8002954:	4a06      	ldr	r2, [pc, #24]	; (8002970 <buzzerInit+0x2c>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6013      	str	r3, [r2, #0]

	humidifierOnBuzzerSound();
 800295a:	f000 f80b 	bl	8002974 <humidifierOnBuzzerSound>
	humidifierOnBuzzerSound();
 800295e:	f000 f809 	bl	8002974 <humidifierOnBuzzerSound>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2000c1fc 	.word	0x2000c1fc
 8002970:	2000c200 	.word	0x2000c200

08002974 <humidifierOnBuzzerSound>:

void humidifierOnBuzzerSound(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	buzzerStartFreq();
 8002978:	f000 f81a 	bl	80029b0 <buzzerStartFreq>

	buzzerGenFreq(1000);
 800297c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002980:	f000 f836 	bl	80029f0 <buzzerGenFreq>
	osDelay(100);
 8002984:	2064      	movs	r0, #100	; 0x64
 8002986:	f00b fad5 	bl	800df34 <osDelay>

	buzzerGenFreq(2000);
 800298a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800298e:	f000 f82f 	bl	80029f0 <buzzerGenFreq>
	osDelay(100);
 8002992:	2064      	movs	r0, #100	; 0x64
 8002994:	f00b face 	bl	800df34 <osDelay>

	buzzerGenFreq(3000);
 8002998:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800299c:	f000 f828 	bl	80029f0 <buzzerGenFreq>
	osDelay(100);
 80029a0:	2064      	movs	r0, #100	; 0x64
 80029a2:	f00b fac7 	bl	800df34 <osDelay>

	buzzerStoptFreq();
 80029a6:	f000 f813 	bl	80029d0 <buzzerStoptFreq>
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <buzzerStartFreq>:
	osDelay(100);
	buzzerStoptFreq();
}

void buzzerStartFreq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hBuzzTim, buzzChannel);
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <buzzerStartFreq+0x18>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <buzzerStartFreq+0x1c>)
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f008 fad4 	bl	800af6c <HAL_TIM_PWM_Start>
	//__HAL_TIM_SET_COUNTER(hBuzzTim, 0); //cnt 0으로 초기화
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000c1fc 	.word	0x2000c1fc
 80029cc:	2000c200 	.word	0x2000c200

080029d0 <buzzerStoptFreq>:

void buzzerStoptFreq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hBuzzTim, buzzChannel);
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <buzzerStoptFreq+0x18>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <buzzerStoptFreq+0x1c>)
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f008 fb8c 	bl	800b0fc <HAL_TIM_PWM_Stop>
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	2000c1fc 	.word	0x2000c1fc
 80029ec:	2000c200 	.word	0x2000c200

080029f0 <buzzerGenFreq>:

void buzzerGenFreq(uint16_t freq)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
	/* Frequncy */
	uint16_t arr = (100000/freq) - 1;
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <buzzerGenFreq+0x84>)
 80029fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	81fb      	strh	r3, [r7, #14]

	/* Duty */
	uint16_t ccr = arr/2;
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_AUTORELOAD(hBuzzTim, arr);
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <buzzerGenFreq+0x88>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	89fa      	ldrh	r2, [r7, #14]
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <buzzerGenFreq+0x88>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	89fa      	ldrh	r2, [r7, #14]
 8002a1e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(hBuzzTim, buzzChannel, ccr);
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <buzzerGenFreq+0x8c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <buzzerGenFreq+0x44>
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <buzzerGenFreq+0x88>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	89ba      	ldrh	r2, [r7, #12]
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a32:	e018      	b.n	8002a66 <buzzerGenFreq+0x76>
	__HAL_TIM_SET_COMPARE(hBuzzTim, buzzChannel, ccr);
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <buzzerGenFreq+0x8c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d105      	bne.n	8002a48 <buzzerGenFreq+0x58>
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <buzzerGenFreq+0x88>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	89bb      	ldrh	r3, [r7, #12]
 8002a44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a46:	e00e      	b.n	8002a66 <buzzerGenFreq+0x76>
	__HAL_TIM_SET_COMPARE(hBuzzTim, buzzChannel, ccr);
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <buzzerGenFreq+0x8c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d105      	bne.n	8002a5c <buzzerGenFreq+0x6c>
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <buzzerGenFreq+0x88>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	89bb      	ldrh	r3, [r7, #12]
 8002a58:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002a5a:	e004      	b.n	8002a66 <buzzerGenFreq+0x76>
	__HAL_TIM_SET_COMPARE(hBuzzTim, buzzChannel, ccr);
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <buzzerGenFreq+0x88>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	89bb      	ldrh	r3, [r7, #12]
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	000186a0 	.word	0x000186a0
 8002a78:	2000c1fc 	.word	0x2000c1fc
 8002a7c:	2000c200 	.word	0x2000c200

08002a80 <readEth01dvSensor>:
#include "sensor.h"

#define MAX_AVERAGE_FILTER     5

bool readEth01dvSensor(sensorDev *sensor)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	uint32_t val=0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
	int temp=0, humid=0, cont;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]

	/* 평균  */
	for (cont=0; cont<MAX_AVERAGE_FILTER; cont++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e055      	b.n	8002b46 <readEth01dvSensor+0xc6>
	{
		/* Temp */
		HAL_ADC_Start(&hadc1);
 8002a9a:	483d      	ldr	r0, [pc, #244]	; (8002b90 <readEth01dvSensor+0x110>)
 8002a9c:	f003 fe46 	bl	800672c <HAL_ADC_Start>
		val = HAL_ADC_GetValue(&hadc1);
 8002aa0:	483b      	ldr	r0, [pc, #236]	; (8002b90 <readEth01dvSensor+0x110>)
 8002aa2:	f003 ffa0 	bl	80069e6 <HAL_ADC_GetValue>
 8002aa6:	60b8      	str	r0, [r7, #8]
		HAL_ADC_PollForConversion(&hadc1, 10);
 8002aa8:	210a      	movs	r1, #10
 8002aaa:	4839      	ldr	r0, [pc, #228]	; (8002b90 <readEth01dvSensor+0x110>)
 8002aac:	f003 ff10 	bl	80068d0 <HAL_ADC_PollForConversion>
		temp += (int)(-66.875 + 218.75 * val / 1024);
 8002ab0:	68b8      	ldr	r0, [r7, #8]
 8002ab2:	f7fd fd41 	bl	8000538 <__aeabi_ui2d>
 8002ab6:	a332      	add	r3, pc, #200	; (adr r3, 8002b80 <readEth01dvSensor+0x100>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fdb6 	bl	800062c <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <readEth01dvSensor+0x114>)
 8002ace:	f7fd fed7 	bl	8000880 <__aeabi_ddiv>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	a32b      	add	r3, pc, #172	; (adr r3, 8002b88 <readEth01dvSensor+0x108>)
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f7fd fbec 	bl	80002bc <__aeabi_dsub>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7fe f84e 	bl	8000b8c <__aeabi_d2iz>
 8002af0:	4602      	mov	r2, r0
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4413      	add	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

		/* humidity */
		HAL_ADC_Start(&hadc1);
 8002af8:	4825      	ldr	r0, [pc, #148]	; (8002b90 <readEth01dvSensor+0x110>)
 8002afa:	f003 fe17 	bl	800672c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8002afe:	210a      	movs	r1, #10
 8002b00:	4823      	ldr	r0, [pc, #140]	; (8002b90 <readEth01dvSensor+0x110>)
 8002b02:	f003 fee5 	bl	80068d0 <HAL_ADC_PollForConversion>
		val = HAL_ADC_GetValue(&hadc1);
 8002b06:	4822      	ldr	r0, [pc, #136]	; (8002b90 <readEth01dvSensor+0x110>)
 8002b08:	f003 ff6d 	bl	80069e6 <HAL_ADC_GetValue>
 8002b0c:	60b8      	str	r0, [r7, #8]
		humid += (int)(-12.5 + 125 * val / 1024);
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4613      	mov	r3, r2
 8002b12:	015b      	lsls	r3, r3, #5
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	0a9b      	lsrs	r3, r3, #10
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fd0b 	bl	8000538 <__aeabi_ui2d>
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <readEth01dvSensor+0x118>)
 8002b28:	f7fd fbc8 	bl	80002bc <__aeabi_dsub>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fe f82a 	bl	8000b8c <__aeabi_d2iz>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
	for (cont=0; cont<MAX_AVERAGE_FILTER; cont++)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	dda6      	ble.n	8002a9a <readEth01dvSensor+0x1a>
	}
	sensor->temparature = temp  / MAX_AVERAGE_FILTER;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <readEth01dvSensor+0x11c>)
 8002b50:	fb82 1203 	smull	r1, r2, r2, r3
 8002b54:	1052      	asrs	r2, r2, #1
 8002b56:	17db      	asrs	r3, r3, #31
 8002b58:	1ad2      	subs	r2, r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	601a      	str	r2, [r3, #0]
	sensor->humidity    = humid / MAX_AVERAGE_FILTER;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <readEth01dvSensor+0x11c>)
 8002b62:	fb82 1203 	smull	r1, r2, r2, r3
 8002b66:	1052      	asrs	r2, r2, #1
 8002b68:	17db      	asrs	r3, r3, #31
 8002b6a:	1ad2      	subs	r2, r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	605a      	str	r2, [r3, #4]
	return true;
 8002b70:	2301      	movs	r3, #1
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w
 8002b80:	00000000 	.word	0x00000000
 8002b84:	406b5800 	.word	0x406b5800
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	4050b800 	.word	0x4050b800
 8002b90:	2000c20c 	.word	0x2000c20c
 8002b94:	40900000 	.word	0x40900000
 8002b98:	40290000 	.word	0x40290000
 8002b9c:	66666667 	.word	0x66666667

08002ba0 <LcdDrvStart>:
extern void TouchGFX_Task(void const * argument);

static LCD_DrvTypeDef* LcdDrv;

void LcdDrvStart()
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	LcdDrv = &ili9341_drv;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <LcdDrvStart+0x20>)
 8002ba6:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <LcdDrvStart+0x24>)
 8002ba8:	601a      	str	r2, [r3, #0]
	LcdDrv->Init();
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <LcdDrvStart+0x20>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4798      	blx	r3
	LcdDrv->DisplayOff();
 8002bb2:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <LcdDrvStart+0x20>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4798      	blx	r3
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000300 	.word	0x20000300
 8002bc4:	20000018 	.word	0x20000018

08002bc8 <Wifi_SendRaw>:

extern osEventFlagsId_t eventFlagHandle;

//#########################################################################################################
bool Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bda:	d812      	bhi.n	8002c02 <Wifi_SendRaw+0x3a>
	{
		memcpy(Wifi.TxBuffer,data,len);
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	461a      	mov	r2, r3
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	480a      	ldr	r0, [pc, #40]	; (8002c0c <Wifi_SendRaw+0x44>)
 8002be4:	f026 fc82 	bl	80294ec <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,100) == HAL_OK)
 8002be8:	887a      	ldrh	r2, [r7, #2]
 8002bea:	2364      	movs	r3, #100	; 0x64
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4808      	ldr	r0, [pc, #32]	; (8002c10 <Wifi_SendRaw+0x48>)
 8002bf0:	f009 f99b 	bl	800bf2a <HAL_UART_Transmit>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <Wifi_SendRaw+0x36>
			return true;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e002      	b.n	8002c04 <Wifi_SendRaw+0x3c>
		else
			return false;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <Wifi_SendRaw+0x3c>
	}
	else
		return false;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	2000bc6d 	.word	0x2000bc6d
 8002c10:	2000c568 	.word	0x2000c568

08002c14 <Wifi_SendString>:

bool Wifi_SendString(char *data)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7fd fb41 	bl	80002a4 <strlen>
 8002c22:	4603      	mov	r3, r0
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ffcd 	bl	8002bc8 <Wifi_SendRaw>
 8002c2e:	4603      	mov	r3, r0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <Wifi_WaitForString>:

bool Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 8002c38:	b40c      	push	{r2, r3}
 8002c3a:	b5b0      	push	{r4, r5, r7, lr}
 8002c3c:	b088      	sub	sp, #32
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
 8002c44:	466b      	mov	r3, sp
 8002c46:	461d      	mov	r5, r3
	
	if(result == NULL)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <Wifi_WaitForString+0x1a>
		return false;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e070      	b.n	8002d34 <Wifi_WaitForString+0xfc>
	if(CountOfParameter == 0)
 8002c52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <Wifi_WaitForString+0x26>
		return false;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e06a      	b.n	8002d34 <Wifi_WaitForString+0xfc>

	*result=0;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]

  va_list tag;
	va_start (tag,CountOfParameter);
 8002c64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c68:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 8002c6a:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
 8002c6e:	4623      	mov	r3, r4
 8002c70:	3b01      	subs	r3, #1
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	b2e0      	uxtb	r0, r4
 8002c76:	f04f 0100 	mov.w	r1, #0
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	014b      	lsls	r3, r1, #5
 8002c84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c88:	0142      	lsls	r2, r0, #5
 8002c8a:	b2e0      	uxtb	r0, r4
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	014b      	lsls	r3, r1, #5
 8002c9a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c9e:	0142      	lsls	r2, r0, #5
 8002ca0:	4623      	mov	r3, r4
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	3307      	adds	r3, #7
 8002ca6:	08db      	lsrs	r3, r3, #3
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	ebad 0d03 	sub.w	sp, sp, r3
 8002cae:	466b      	mov	r3, sp
 8002cb0:	3303      	adds	r3, #3
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	75fb      	strb	r3, [r7, #23]
 8002cbc:	e00a      	b.n	8002cd4 <Wifi_WaitForString+0x9c>
		arg[i] = va_arg (tag, char *);	
 8002cbe:	7dfa      	ldrb	r2, [r7, #23]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1d19      	adds	r1, r3, #4
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	75fb      	strb	r3, [r7, #23]
 8002cd4:	7dfa      	ldrb	r2, [r7, #23]
 8002cd6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d3ef      	bcc.n	8002cbe <Wifi_WaitForString+0x86>
  va_end (tag);
	
		
	//////////////////////////////////	
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=1)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e022      	b.n	8002d2a <Wifi_WaitForString+0xf2>
	{
		osDelay(1);
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f00b f925 	bl	800df34 <osDelay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e014      	b.n	8002d1a <Wifi_WaitForString+0xe2>
		{
			if(strstr((char*)Wifi.RxBuffer, arg[mx])!=NULL)
 8002cf0:	7ffa      	ldrb	r2, [r7, #31]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4812      	ldr	r0, [pc, #72]	; (8002d44 <Wifi_WaitForString+0x10c>)
 8002cfc:	f027 fbbd 	bl	802a47a <strstr>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <Wifi_WaitForString+0xdc>
			{
				*result = mx+1;
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	701a      	strb	r2, [r3, #0]
				return true;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e00f      	b.n	8002d34 <Wifi_WaitForString+0xfc>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8002d14:	7ffb      	ldrb	r3, [r7, #31]
 8002d16:	3301      	adds	r3, #1
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	7ffa      	ldrb	r2, [r7, #31]
 8002d1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d3e5      	bcc.n	8002cf0 <Wifi_WaitForString+0xb8>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=1)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3d8      	bcc.n	8002ce4 <Wifi_WaitForString+0xac>
			}				
		}				
	}
	// timeout
	return false;
 8002d32:	2300      	movs	r3, #0
 8002d34:	46ad      	mov	sp, r5
	
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002d40:	b002      	add	sp, #8
 8002d42:	4770      	bx	lr
 8002d44:	2000ba6d 	.word	0x2000ba6d

08002d48 <Wifi_ReturnString>:
//#########################################################################################################
bool Wifi_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	460b      	mov	r3, r1
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	72fb      	strb	r3, [r7, #11]
	if(result == NULL) 
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <Wifi_ReturnString+0x18>
		return false;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e02e      	b.n	8002dbe <Wifi_ReturnString+0x76>
	if(WantWhichOne==0)
 8002d60:	7afb      	ldrb	r3, [r7, #11]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <Wifi_ReturnString+0x22>
		return false;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e029      	b.n	8002dbe <Wifi_ReturnString+0x76>

	char *str = (char*)Wifi.RxBuffer;
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <Wifi_ReturnString+0x80>)
 8002d6c:	617b      	str	r3, [r7, #20]
	

	str = strtok (str,SplitterChars);
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	6978      	ldr	r0, [r7, #20]
 8002d72:	f027 fb99 	bl	802a4a8 <strtok>
 8002d76:	6178      	str	r0, [r7, #20]
	if(str == NULL)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <Wifi_ReturnString+0x68>
	{
		strcpy(result,"");
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
		return false;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e01a      	b.n	8002dbe <Wifi_ReturnString+0x76>
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f027 fb8c 	bl	802a4a8 <strtok>
 8002d90:	6178      	str	r0, [r7, #20]
		if(str != NULL)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <Wifi_ReturnString+0x56>
			WantWhichOne--;
 8002d98:	7afb      	ldrb	r3, [r7, #11]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	72fb      	strb	r3, [r7, #11]
		if(WantWhichOne==0)
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <Wifi_ReturnString+0x68>
		{
			strcpy(result,str);
 8002da4:	6979      	ldr	r1, [r7, #20]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f027 fb5f 	bl	802a46a <strcpy>
			return true;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e006      	b.n	8002dbe <Wifi_ReturnString+0x76>
	while (str != NULL)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e8      	bne.n	8002d88 <Wifi_ReturnString+0x40>
		}
  }
	strcpy(result,"");
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
	return false;	
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000ba6d 	.word	0x2000ba6d

08002dcc <Wifi_ReturnInteger>:
	return false;	
	
}
//#########################################################################################################
bool	Wifi_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	72fb      	strb	r3, [r7, #11]
	if((char*)Wifi.RxBuffer == NULL)
		return false;
	if(Wifi_ReturnString((char*)Wifi.RxBuffer,WantWhichOne,SplitterChars)==false)
 8002dda:	7afb      	ldrb	r3, [r7, #11]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4619      	mov	r1, r3
 8002de0:	480a      	ldr	r0, [pc, #40]	; (8002e0c <Wifi_ReturnInteger+0x40>)
 8002de2:	f7ff ffb1 	bl	8002d48 <Wifi_ReturnString>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f083 0301 	eor.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <Wifi_ReturnInteger+0x2a>
		return false;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e006      	b.n	8002e04 <Wifi_ReturnInteger+0x38>
	*result = atoi((char*)Wifi.RxBuffer);
 8002df6:	4805      	ldr	r0, [pc, #20]	; (8002e0c <Wifi_ReturnInteger+0x40>)
 8002df8:	f026 fb1a 	bl	8029430 <atoi>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]
	return true;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	2000ba6d 	.word	0x2000ba6d

08002e10 <Wifi_RxClear>:
	}
	*dst = '\0';
}
//#########################################################################################################
void Wifi_RxClear()
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 8002e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4807      	ldr	r0, [pc, #28]	; (8002e38 <Wifi_RxClear+0x28>)
 8002e1c:	f026 fb8e 	bl	802953c <memset>
	Wifi.RxIndex=0;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <Wifi_RxClear+0x2c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4904      	ldr	r1, [pc, #16]	; (8002e3c <Wifi_RxClear+0x2c>)
 8002e2c:	4804      	ldr	r0, [pc, #16]	; (8002e40 <Wifi_RxClear+0x30>)
 8002e2e:	f009 f90e 	bl	800c04e <HAL_UART_Receive_IT>
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000ba6d 	.word	0x2000ba6d
 8002e3c:	2000ba6c 	.word	0x2000ba6c
 8002e40:	2000c568 	.word	0x2000c568

08002e44 <Wifi_TxClear>:
//#########################################################################################################
void Wifi_TxClear(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 8002e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4802      	ldr	r0, [pc, #8]	; (8002e58 <Wifi_TxClear+0x14>)
 8002e50:	f026 fb74 	bl	802953c <memset>
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	2000bc6d 	.word	0x2000bc6d

08002e5c <Wifi_RxCallBack>:
//#########################################################################################################
void Wifi_RxCallBack(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)                                              
 8002e60:	4b9d      	ldr	r3, [pc, #628]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002e62:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8002e66:	f083 0301 	eor.w	r3, r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d018      	beq.n	8002ea2 <Wifi_RxCallBack+0x46>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 8002e70:	4b99      	ldr	r3, [pc, #612]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002e72:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002e76:	4619      	mov	r1, r3
 8002e78:	4b97      	ldr	r3, [pc, #604]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	4b96      	ldr	r3, [pc, #600]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002e7e:	440b      	add	r3, r1
 8002e80:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 8002e82:	4b95      	ldr	r3, [pc, #596]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002e84:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8c:	f080 80b1 	bcs.w	8002ff2 <Wifi_RxCallBack+0x196>
      Wifi.RxIndex++;
 8002e90:	4b91      	ldr	r3, [pc, #580]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002e92:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002e96:	3301      	adds	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	4b8f      	ldr	r3, [pc, #572]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002e9c:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
 8002ea0:	e0a7      	b.n	8002ff2 <Wifi_RxCallBack+0x196>
  }
  //--- at command buffer
  //+++  data buffer
  else                                                                  
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 8002ea2:	f003 fbcf 	bl	8006644 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	4b8b      	ldr	r3, [pc, #556]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002eaa:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b32      	cmp	r3, #50	; 0x32
 8002eb2:	d903      	bls.n	8002ebc <Wifi_RxCallBack+0x60>
      Wifi.RxIsData=false;
 8002eb4:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 8002ebc:	4b86      	ldr	r3, [pc, #536]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002ebe:	f8b3 3496 	ldrh.w	r3, [r3, #1174]	; 0x496
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d167      	bne.n	8002f96 <Wifi_RxCallBack+0x13a>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 8002ec6:	4b84      	ldr	r3, [pc, #528]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002ec8:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
 8002ecc:	f083 0301 	eor.w	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d028      	beq.n	8002f28 <Wifi_RxCallBack+0xcc>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8002ed6:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002ed8:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
 8002edc:	4619      	mov	r1, r3
 8002ede:	4b7e      	ldr	r3, [pc, #504]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	4b7d      	ldr	r3, [pc, #500]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
        Wifi.RxIndexForDataTmp++;
 8002eea:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002eec:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b78      	ldr	r3, [pc, #480]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002ef6:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 8002efa:	4b77      	ldr	r3, [pc, #476]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002efc:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
 8002f00:	3b01      	subs	r3, #1
 8002f02:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f04:	4413      	add	r3, r2
 8002f06:	f893 348a 	ldrb.w	r3, [r3, #1162]	; 0x48a
 8002f0a:	2b3a      	cmp	r3, #58	; 0x3a
 8002f0c:	d171      	bne.n	8002ff2 <Wifi_RxCallBack+0x196>
        {
          Wifi.RxDataConnectionNumber=0;
 8002f0e:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 8002f16:	4871      	ldr	r0, [pc, #452]	; (80030dc <Wifi_RxCallBack+0x280>)
 8002f18:	f026 fa8a 	bl	8029430 <atoi>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b6d      	ldr	r3, [pc, #436]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f22:	f8a3 2496 	strh.w	r2, [r3, #1174]	; 0x496
 8002f26:	e064      	b.n	8002ff2 <Wifi_RxCallBack+0x196>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8002f28:	4b6b      	ldr	r3, [pc, #428]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f2a:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4b69      	ldr	r3, [pc, #420]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	4b68      	ldr	r3, [pc, #416]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f36:	440b      	add	r3, r1
 8002f38:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
        Wifi.RxIndexForDataTmp++;
 8002f3c:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f3e:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
 8002f42:	3301      	adds	r3, #1
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f48:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
        if(Wifi.RxBufferForDataTmp[2]==',')
 8002f4c:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f4e:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
 8002f52:	2b2c      	cmp	r3, #44	; 0x2c
 8002f54:	d107      	bne.n	8002f66 <Wifi_RxCallBack+0x10a>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 8002f56:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f58:	f893 348b 	ldrb.w	r3, [r3, #1163]	; 0x48b
 8002f5c:	3b30      	subs	r3, #48	; 0x30
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b5d      	ldr	r3, [pc, #372]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f62:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 8002f66:	4b5c      	ldr	r3, [pc, #368]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f68:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d940      	bls.n	8002ff2 <Wifi_RxCallBack+0x196>
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f72:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
 8002f76:	3b01      	subs	r3, #1
 8002f78:	4a57      	ldr	r2, [pc, #348]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f893 348a 	ldrb.w	r3, [r3, #1162]	; 0x48a
 8002f80:	2b3a      	cmp	r3, #58	; 0x3a
 8002f82:	d136      	bne.n	8002ff2 <Wifi_RxCallBack+0x196>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 8002f84:	4856      	ldr	r0, [pc, #344]	; (80030e0 <Wifi_RxCallBack+0x284>)
 8002f86:	f026 fa53 	bl	8029430 <atoi>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	4b52      	ldr	r3, [pc, #328]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f90:	f8a3 2496 	strh.w	r2, [r3, #1174]	; 0x496
 8002f94:	e02d      	b.n	8002ff2 <Wifi_RxCallBack+0x196>
    else  
    {      
    	//ring_buffer_queue(&Wifi.wifi_ring_buffer[Wifi.RxDataConnectionNumber], (char)(Wifi.usartBuff));
    	//Wifi.RxBufferForData[Wifi.RxIndexForData] = Wifi.usartBuff;

        if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 8002f96:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002f98:	f8b3 3494 	ldrh.w	r3, [r3, #1172]	; 0x494
 8002f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa0:	d20d      	bcs.n	8002fbe <Wifi_RxCallBack+0x162>
        {
          ring_buffer_queue(&Wifi.wifi_ring_buffer[0], Wifi.usartBuff);
 8002fa2:	4b4d      	ldr	r3, [pc, #308]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	484e      	ldr	r0, [pc, #312]	; (80030e4 <Wifi_RxCallBack+0x288>)
 8002faa:	f7ff fc79 	bl	80028a0 <ring_buffer_queue>
          Wifi.RxIndexForData++;
 8002fae:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002fb0:	f8b3 3494 	ldrh.w	r3, [r3, #1172]	; 0x494
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002fba:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
        }
        if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 8002fbe:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002fc0:	f8b3 2494 	ldrh.w	r2, [r3, #1172]	; 0x494
 8002fc4:	4b44      	ldr	r3, [pc, #272]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002fc6:	f8b3 3496 	ldrh.w	r3, [r3, #1174]	; 0x496
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d311      	bcc.n	8002ff2 <Wifi_RxCallBack+0x196>
        {
          Wifi.RxIsData=false;
 8002fce:	4b42      	ldr	r3, [pc, #264]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
          Wifi.GotNewData=true;
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1

          if (isConnectBroker == true)
 8002fde:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <Wifi_RxCallBack+0x28c>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <Wifi_RxCallBack+0x196>
          {
        	  osEventFlagsSet(eventFlagHandle, UART_RECEIVE);
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <Wifi_RxCallBack+0x290>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2106      	movs	r1, #6
 8002fec:	4618      	mov	r0, r3
 8002fee:	f00b f8bb 	bl	800e168 <osEventFlagsSet>
        }
    }
    //--- Fill Data Buffer    
  }           
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4938      	ldr	r1, [pc, #224]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002ff6:	483e      	ldr	r0, [pc, #248]	; (80030f0 <Wifi_RxCallBack+0x294>)
 8002ff8:	f009 f829 	bl	800c04e <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 8002ffc:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8002ffe:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8003002:	2b04      	cmp	r3, #4
 8003004:	d966      	bls.n	80030d4 <Wifi_RxCallBack+0x278>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8003008:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800300c:	3b04      	subs	r3, #4
 800300e:	4a32      	ldr	r2, [pc, #200]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8003010:	4413      	add	r3, r2
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	2b2b      	cmp	r3, #43	; 0x2b
 8003016:	d15d      	bne.n	80030d4 <Wifi_RxCallBack+0x278>
 8003018:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 800301a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800301e:	3b03      	subs	r3, #3
 8003020:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8003022:	4413      	add	r3, r2
 8003024:	785b      	ldrb	r3, [r3, #1]
 8003026:	2b49      	cmp	r3, #73	; 0x49
 8003028:	d154      	bne.n	80030d4 <Wifi_RxCallBack+0x278>
 800302a:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 800302c:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8003030:	3b02      	subs	r3, #2
 8003032:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8003034:	4413      	add	r3, r2
 8003036:	785b      	ldrb	r3, [r3, #1]
 8003038:	2b50      	cmp	r3, #80	; 0x50
 800303a:	d14b      	bne.n	80030d4 <Wifi_RxCallBack+0x278>
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 800303e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8003042:	3b01      	subs	r3, #1
 8003044:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8003046:	4413      	add	r3, r2
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	2b44      	cmp	r3, #68	; 0x44
 800304c:	d142      	bne.n	80030d4 <Wifi_RxCallBack+0x278>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 800304e:	2208      	movs	r2, #8
 8003050:	2100      	movs	r1, #0
 8003052:	4828      	ldr	r0, [pc, #160]	; (80030f4 <Wifi_RxCallBack+0x298>)
 8003054:	f026 fa72 	bl	802953c <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 8003058:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 800305a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800305e:	3b04      	subs	r3, #4
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8003062:	4413      	add	r3, r2
 8003064:	2200      	movs	r2, #0
 8003066:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 800306a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800306e:	3b03      	subs	r3, #3
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8003072:	4413      	add	r3, r2
 8003074:	2200      	movs	r2, #0
 8003076:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 800307a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800307e:	3b02      	subs	r3, #2
 8003080:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8003082:	4413      	add	r3, r2
 8003084:	2200      	movs	r2, #0
 8003086:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 800308a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800308e:	3b01      	subs	r3, #1
 8003090:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 8003092:	4413      	add	r3, r2
 8003094:	2200      	movs	r2, #0
 8003096:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 8003098:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 800309a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800309e:	3b04      	subs	r3, #4
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 80030a4:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
      Wifi.RxIndexForData=0;
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
      Wifi.RxIndexForDataTmp=0;
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
      Wifi.RxIsData=true;
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
      Wifi.RxDataLen=0;  
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8a3 2496 	strh.w	r2, [r3, #1174]	; 0x496
      Wifi.RxDataLastTime = HAL_GetTick();      
 80030c8:	f003 fabc 	bl	8006644 <HAL_GetTick>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4a02      	ldr	r2, [pc, #8]	; (80030d8 <Wifi_RxCallBack+0x27c>)
 80030d0:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
    }
  }
  //--- check +IPD in At command buffer  
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	2000ba6c 	.word	0x2000ba6c
 80030dc:	2000bef7 	.word	0x2000bef7
 80030e0:	2000bef9 	.word	0x2000bef9
 80030e4:	2000bd70 	.word	0x2000bd70
 80030e8:	2000ba68 	.word	0x2000ba68
 80030ec:	2000c2d8 	.word	0x2000c2d8
 80030f0:	2000c568 	.word	0x2000c568
 80030f4:	2000bef6 	.word	0x2000bef6

080030f8 <WifiInit>:

void WifiInit()
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, SET);
	osDelay(1000);
 80030fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003102:	f00a ff17 	bl	800df34 <osDelay>

	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8003106:	2201      	movs	r2, #1
 8003108:	4948      	ldr	r1, [pc, #288]	; (800322c <WifiInit+0x134>)
 800310a:	4849      	ldr	r0, [pc, #292]	; (8003230 <WifiInit+0x138>)
 800310c:	f008 ff9f 	bl	800c04e <HAL_UART_Receive_IT>

	for (int i=0; i<3; i++)
 8003110:	2300      	movs	r3, #0
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	e00f      	b.n	8003136 <WifiInit+0x3e>
	{
		ring_buffer_init((&Wifi.wifi_ring_buffer[i]));
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	019b      	lsls	r3, r3, #6
 800311c:	4413      	add	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003124:	4a41      	ldr	r2, [pc, #260]	; (800322c <WifiInit+0x134>)
 8003126:	4413      	add	r3, r2
 8003128:	3304      	adds	r3, #4
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fba6 	bl	800287c <ring_buffer_init>
	for (int i=0; i<3; i++)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3301      	adds	r3, #1
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b02      	cmp	r3, #2
 800313a:	ddec      	ble.n	8003116 <WifiInit+0x1e>
	}
	Wifi_TxClear();
 800313c:	f7ff fe82 	bl	8002e44 <Wifi_TxClear>

	DEBUG_PRINT("Start WiFi Task !");
 8003140:	f44f 7389 	mov.w	r3, #274	; 0x112
 8003144:	4a3b      	ldr	r2, [pc, #236]	; (8003234 <WifiInit+0x13c>)
 8003146:	493c      	ldr	r1, [pc, #240]	; (8003238 <WifiInit+0x140>)
 8003148:	483c      	ldr	r0, [pc, #240]	; (800323c <WifiInit+0x144>)
 800314a:	f002 f95f 	bl	800540c <_debugPrint>

	if (mqttInit() == false)
 800314e:	f7ff f91b 	bl	8002388 <mqttInit>
 8003152:	4603      	mov	r3, r0
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <WifiInit+0x74>
	{
		DEBUG_PRINT("mqtt INIT Fail!!!");
 800315e:	f44f 738b 	mov.w	r3, #278	; 0x116
 8003162:	4a34      	ldr	r2, [pc, #208]	; (8003234 <WifiInit+0x13c>)
 8003164:	4934      	ldr	r1, [pc, #208]	; (8003238 <WifiInit+0x140>)
 8003166:	4836      	ldr	r0, [pc, #216]	; (8003240 <WifiInit+0x148>)
 8003168:	f002 f950 	bl	800540c <_debugPrint>
	}

	Wifi_SendString("AT\r\n");
 800316c:	4835      	ldr	r0, [pc, #212]	; (8003244 <WifiInit+0x14c>)
 800316e:	f7ff fd51 	bl	8002c14 <Wifi_SendString>
 	Wifi_SetRfPower(82);
 8003172:	2052      	movs	r0, #82	; 0x52
 8003174:	f000 f876 	bl	8003264 <Wifi_SetRfPower>

    Wifi_TcpIp_GetMultiConnection();
 8003178:	f000 fa94 	bl	80036a4 <Wifi_TcpIp_GetMultiConnection>
    Wifi_TcpIp_Close(0);
 800317c:	2000      	movs	r0, #0
 800317e:	f000 fae7 	bl	8003750 <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(1);
 8003182:	2001      	movs	r0, #1
 8003184:	f000 fae4 	bl	8003750 <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(2);
 8003188:	2002      	movs	r0, #2
 800318a:	f000 fae1 	bl	8003750 <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(3);
 800318e:	2003      	movs	r0, #3
 8003190:	f000 fade 	bl	8003750 <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(4);
 8003194:	2004      	movs	r0, #4
 8003196:	f000 fadb 	bl	8003750 <Wifi_TcpIp_Close>
    Wifi_TcpIp_SetMultiConnection(true);
 800319a:	2001      	movs	r0, #1
 800319c:	f000 fa20 	bl	80035e0 <Wifi_TcpIp_SetMultiConnection>
    DEBUG_PRINT("MultiConnection true !");
 80031a0:	f240 1323 	movw	r3, #291	; 0x123
 80031a4:	4a23      	ldr	r2, [pc, #140]	; (8003234 <WifiInit+0x13c>)
 80031a6:	4924      	ldr	r1, [pc, #144]	; (8003238 <WifiInit+0x140>)
 80031a8:	4827      	ldr	r0, [pc, #156]	; (8003248 <WifiInit+0x150>)
 80031aa:	f002 f92f 	bl	800540c <_debugPrint>

    //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, SET);
	Wifi_GetMode();
 80031ae:	f000 f8df 	bl	8003370 <Wifi_GetMode>
	DEBUG_PRINT("Get WiFi..");
 80031b2:	f240 1327 	movw	r3, #295	; 0x127
 80031b6:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <WifiInit+0x13c>)
 80031b8:	491f      	ldr	r1, [pc, #124]	; (8003238 <WifiInit+0x140>)
 80031ba:	4824      	ldr	r0, [pc, #144]	; (800324c <WifiInit+0x154>)
 80031bc:	f002 f926 	bl	800540c <_debugPrint>

	Wifi_Station_DhcpIsEnable();
 80031c0:	f000 f98e 	bl	80034e0 <Wifi_Station_DhcpIsEnable>
	DEBUG_PRINT("DhcpIsEnable..");
 80031c4:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80031c8:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <WifiInit+0x13c>)
 80031ca:	491b      	ldr	r1, [pc, #108]	; (8003238 <WifiInit+0x140>)
 80031cc:	4820      	ldr	r0, [pc, #128]	; (8003250 <WifiInit+0x158>)
 80031ce:	f002 f91d 	bl	800540c <_debugPrint>

	Wifi_UserInit();
 80031d2:	f000 fc49 	bl	8003a68 <Wifi_UserInit>
	DEBUG_PRINT("Wi-Fi Connect");
 80031d6:	f240 132d 	movw	r3, #301	; 0x12d
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <WifiInit+0x13c>)
 80031dc:	4916      	ldr	r1, [pc, #88]	; (8003238 <WifiInit+0x140>)
 80031de:	481d      	ldr	r0, [pc, #116]	; (8003254 <WifiInit+0x15c>)
 80031e0:	f002 f914 	bl	800540c <_debugPrint>

	do { osDelay(1); } while (connectBroker(&mqttPublish) == CONNECT_FAIL);
 80031e4:	2001      	movs	r0, #1
 80031e6:	f00a fea5 	bl	800df34 <osDelay>
 80031ea:	481b      	ldr	r0, [pc, #108]	; (8003258 <WifiInit+0x160>)
 80031ec:	f7ff f91a 	bl	8002424 <connectBroker>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f6      	beq.n	80031e4 <WifiInit+0xec>
	DEBUG_PRINT("mqttPublish Connect Broker !");
 80031f6:	f44f 7398 	mov.w	r3, #304	; 0x130
 80031fa:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <WifiInit+0x13c>)
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <WifiInit+0x140>)
 80031fe:	4817      	ldr	r0, [pc, #92]	; (800325c <WifiInit+0x164>)
 8003200:	f002 f904 	bl	800540c <_debugPrint>

	do { osDelay(1); } while (subscribe(&mqttPublish) != true);
 8003204:	2001      	movs	r0, #1
 8003206:	f00a fe95 	bl	800df34 <osDelay>
 800320a:	4813      	ldr	r0, [pc, #76]	; (8003258 <WifiInit+0x160>)
 800320c:	f7ff fa6c 	bl	80026e8 <subscribe>
 8003210:	4603      	mov	r3, r0
 8003212:	2b01      	cmp	r3, #1
 8003214:	d1f6      	bne.n	8003204 <WifiInit+0x10c>
	DEBUG_PRINT("subscribe!");
 8003216:	f240 1333 	movw	r3, #307	; 0x133
 800321a:	4a06      	ldr	r2, [pc, #24]	; (8003234 <WifiInit+0x13c>)
 800321c:	4906      	ldr	r1, [pc, #24]	; (8003238 <WifiInit+0x140>)
 800321e:	4810      	ldr	r0, [pc, #64]	; (8003260 <WifiInit+0x168>)
 8003220:	f002 f8f4 	bl	800540c <_debugPrint>

	while (1)
	{
		osDelay(1);
 8003224:	2001      	movs	r0, #1
 8003226:	f00a fe85 	bl	800df34 <osDelay>
 800322a:	e7fb      	b.n	8003224 <WifiInit+0x12c>
 800322c:	2000ba6c 	.word	0x2000ba6c
 8003230:	2000c568 	.word	0x2000c568
 8003234:	0802e0c8 	.word	0x0802e0c8
 8003238:	0802d0a4 	.word	0x0802d0a4
 800323c:	0802d0bc 	.word	0x0802d0bc
 8003240:	0802d0d0 	.word	0x0802d0d0
 8003244:	0802d0e4 	.word	0x0802d0e4
 8003248:	0802d0ec 	.word	0x0802d0ec
 800324c:	0802d104 	.word	0x0802d104
 8003250:	0802d110 	.word	0x0802d110
 8003254:	0802d120 	.word	0x0802d120
 8003258:	2000c0b0 	.word	0x2000c0b0
 800325c:	0802d130 	.word	0x0802d130
 8003260:	0802d150 	.word	0x0802d150

08003264 <Wifi_SetRfPower>:
	}
}

bool Wifi_SetRfPower(uint8_t Power_0_to_82)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af02      	add	r7, sp, #8
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
	//osSemaphoreWait(WifiSemHandle,osWaitForever);
	uint8_t result;
	bool		returnVal=false;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8003272:	f7ff fdcd 	bl	8002e10 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RFPOWER=%d\r\n",Power_0_to_82);
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	461a      	mov	r2, r3
 800327a:	4916      	ldr	r1, [pc, #88]	; (80032d4 <Wifi_SetRfPower+0x70>)
 800327c:	4816      	ldr	r0, [pc, #88]	; (80032d8 <Wifi_SetRfPower+0x74>)
 800327e:	f027 f863 	bl	802a348 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8003282:	4815      	ldr	r0, [pc, #84]	; (80032d8 <Wifi_SetRfPower+0x74>)
 8003284:	f7ff fcc6 	bl	8002c14 <Wifi_SendString>
 8003288:	4603      	mov	r3, r0
 800328a:	f083 0301 	eor.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d115      	bne.n	80032c0 <Wifi_SetRfPower+0x5c>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8003294:	f107 010e 	add.w	r1, r7, #14
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <Wifi_SetRfPower+0x78>)
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <Wifi_SetRfPower+0x7c>)
 800329e:	2202      	movs	r2, #2
 80032a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80032a4:	f7ff fcc8 	bl	8002c38 <Wifi_WaitForString>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f083 0301 	eor.w	r3, r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d107      	bne.n	80032c4 <Wifi_SetRfPower+0x60>
			break;
		if(result == 2)
 80032b4:	7bbb      	ldrb	r3, [r7, #14]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d006      	beq.n	80032c8 <Wifi_SetRfPower+0x64>
			break;			
		returnVal=true;	
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	e004      	b.n	80032ca <Wifi_SetRfPower+0x66>
			break;
 80032c0:	bf00      	nop
 80032c2:	e002      	b.n	80032ca <Wifi_SetRfPower+0x66>
			break;
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <Wifi_SetRfPower+0x66>
			break;			
 80032c8:	bf00      	nop
	}while(0);
	//osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	0802d15c 	.word	0x0802d15c
 80032d8:	2000bc6d 	.word	0x2000bc6d
 80032dc:	0802d170 	.word	0x0802d170
 80032e0:	0802d16c 	.word	0x0802d16c

080032e4 <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool Wifi_SetMode(WifiMode_t WifiMode_)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	bool		returnVal=false;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80032f2:	f7ff fd8d 	bl	8002e10 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4918      	ldr	r1, [pc, #96]	; (800335c <Wifi_SetMode+0x78>)
 80032fc:	4818      	ldr	r0, [pc, #96]	; (8003360 <Wifi_SetMode+0x7c>)
 80032fe:	f027 f823 	bl	802a348 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8003302:	4817      	ldr	r0, [pc, #92]	; (8003360 <Wifi_SetMode+0x7c>)
 8003304:	f7ff fc86 	bl	8002c14 <Wifi_SendString>
 8003308:	4603      	mov	r3, r0
 800330a:	f083 0301 	eor.w	r3, r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d119      	bne.n	8003348 <Wifi_SetMode+0x64>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8003314:	f107 010e 	add.w	r1, r7, #14
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <Wifi_SetMode+0x80>)
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <Wifi_SetMode+0x84>)
 800331e:	2202      	movs	r2, #2
 8003320:	f241 3088 	movw	r0, #5000	; 0x1388
 8003324:	f7ff fc88 	bl	8002c38 <Wifi_WaitForString>
 8003328:	4603      	mov	r3, r0
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <Wifi_SetMode+0x68>
			break;
		if(result == 2)
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d00a      	beq.n	8003350 <Wifi_SetMode+0x6c>
			break;			
		Wifi.Mode = WifiMode_;
 800333a:	4a0c      	ldr	r2, [pc, #48]	; (800336c <Wifi_SetMode+0x88>)
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	f882 34a2 	strb.w	r3, [r2, #1186]	; 0x4a2
		returnVal=true;	
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	e004      	b.n	8003352 <Wifi_SetMode+0x6e>
			break;
 8003348:	bf00      	nop
 800334a:	e002      	b.n	8003352 <Wifi_SetMode+0x6e>
			break;
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <Wifi_SetMode+0x6e>
			break;			
 8003350:	bf00      	nop
	}while(0);
	return returnVal;		
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	0802d178 	.word	0x0802d178
 8003360:	2000bc6d 	.word	0x2000bc6d
 8003364:	0802d170 	.word	0x0802d170
 8003368:	0802d16c 	.word	0x0802d16c
 800336c:	2000ba6c 	.word	0x2000ba6c

08003370 <Wifi_GetMode>:

//#########################################################################################################
bool Wifi_GetMode(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af02      	add	r7, sp, #8
	//osSemaphoreWait(WifiSemHandle,osWaitForever);
	uint8_t result;
	bool		returnVal=false;
 8003376:	2300      	movs	r3, #0
 8003378:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800337a:	f7ff fd49 	bl	8002e10 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR?\r\n");
 800337e:	491f      	ldr	r1, [pc, #124]	; (80033fc <Wifi_GetMode+0x8c>)
 8003380:	481f      	ldr	r0, [pc, #124]	; (8003400 <Wifi_GetMode+0x90>)
 8003382:	f026 ffe1 	bl	802a348 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8003386:	481e      	ldr	r0, [pc, #120]	; (8003400 <Wifi_GetMode+0x90>)
 8003388:	f7ff fc44 	bl	8002c14 <Wifi_SendString>
 800338c:	4603      	mov	r3, r0
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d126      	bne.n	80033e6 <Wifi_GetMode+0x76>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8003398:	1db9      	adds	r1, r7, #6
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <Wifi_GetMode+0x94>)
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <Wifi_GetMode+0x98>)
 80033a0:	2202      	movs	r2, #2
 80033a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80033a6:	f7ff fc47 	bl	8002c38 <Wifi_WaitForString>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f083 0301 	eor.w	r3, r3, #1
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d119      	bne.n	80033ea <Wifi_GetMode+0x7a>
			break;
		if(result == 2)
 80033b6:	79bb      	ldrb	r3, [r7, #6]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d018      	beq.n	80033ee <Wifi_GetMode+0x7e>
			break;			
		if(Wifi_ReturnInteger((int32_t*)&result,1,":"))
 80033bc:	1dbb      	adds	r3, r7, #6
 80033be:	4a13      	ldr	r2, [pc, #76]	; (800340c <Wifi_GetMode+0x9c>)
 80033c0:	2101      	movs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fd02 	bl	8002dcc <Wifi_ReturnInteger>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <Wifi_GetMode+0x68>
			Wifi.Mode = (WifiMode_t)result ;
 80033ce:	79ba      	ldrb	r2, [r7, #6]
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <Wifi_GetMode+0xa0>)
 80033d2:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 80033d6:	e003      	b.n	80033e0 <Wifi_GetMode+0x70>
		else
			Wifi.Mode = WifiMode_Error;
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <Wifi_GetMode+0xa0>)
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
		returnVal=true;	
 80033e0:	2301      	movs	r3, #1
 80033e2:	71fb      	strb	r3, [r7, #7]
 80033e4:	e004      	b.n	80033f0 <Wifi_GetMode+0x80>
			break;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <Wifi_GetMode+0x80>
			break;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <Wifi_GetMode+0x80>
			break;			
 80033ee:	bf00      	nop
	}while(0);
	//osSemaphoreRelease(WifiSemHandle);
	return returnVal;
 80033f0:	79fb      	ldrb	r3, [r7, #7]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	0802d18c 	.word	0x0802d18c
 8003400:	2000bc6d 	.word	0x2000bc6d
 8003404:	0802d170 	.word	0x0802d170
 8003408:	0802d16c 	.word	0x0802d16c
 800340c:	0802d1a0 	.word	0x0802d1a0
 8003410:	2000ba6c 	.word	0x2000ba6c

08003414 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
	//osSemaphoreWait(WifiSemHandle,osWaitForever);
	uint8_t result;
	bool		returnVal=false;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 8003424:	f7ff fcf4 	bl	8002e10 <Wifi_RxClear>
		if(MAC==NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <Wifi_Station_ConnectToAp+0x28>
		{
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4922      	ldr	r1, [pc, #136]	; (80034bc <Wifi_Station_ConnectToAp+0xa8>)
 8003434:	4822      	ldr	r0, [pc, #136]	; (80034c0 <Wifi_Station_ConnectToAp+0xac>)
 8003436:	f026 ff87 	bl	802a348 <siprintf>
 800343a:	e007      	b.n	800344c <Wifi_Station_ConnectToAp+0x38>
			//sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,Pass);
		}
		else
		{
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	491f      	ldr	r1, [pc, #124]	; (80034c4 <Wifi_Station_ConnectToAp+0xb0>)
 8003446:	481e      	ldr	r0, [pc, #120]	; (80034c0 <Wifi_Station_ConnectToAp+0xac>)
 8003448:	f026 ff7e 	bl	802a348 <siprintf>
			//sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
		}
		if (Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800344c:	481c      	ldr	r0, [pc, #112]	; (80034c0 <Wifi_Station_ConnectToAp+0xac>)
 800344e:	f7ff fbe1 	bl	8002c14 <Wifi_SendString>
 8003452:	4603      	mov	r3, r0
 8003454:	f083 0301 	eor.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <Wifi_Station_ConnectToAp+0x5a>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"111\r\n", (uint16_t)strlen("111\r\n"), 1000);
 800345e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003462:	2205      	movs	r2, #5
 8003464:	4918      	ldr	r1, [pc, #96]	; (80034c8 <Wifi_Station_ConnectToAp+0xb4>)
 8003466:	4819      	ldr	r0, [pc, #100]	; (80034cc <Wifi_Station_ConnectToAp+0xb8>)
 8003468:	f008 fd5f 	bl	800bf2a <HAL_UART_Transmit>
			break;
 800346c:	e020      	b.n	80034b0 <Wifi_Station_ConnectToAp+0x9c>
		}
		if (Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 800346e:	f107 0116 	add.w	r1, r7, #22
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <Wifi_Station_ConnectToAp+0xbc>)
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <Wifi_Station_ConnectToAp+0xc0>)
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <Wifi_Station_ConnectToAp+0xc4>)
 800347c:	2203      	movs	r2, #3
 800347e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8003482:	f7ff fbd9 	bl	8002c38 <Wifi_WaitForString>
 8003486:	4603      	mov	r3, r0
 8003488:	f083 0301 	eor.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <Wifi_Station_ConnectToAp+0x8e>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"ERROR!!!!!!!!!!!!!\r\n", (uint16_t)strlen("ERROR!!!!!!!!!!!!!\r\n"), 1000);
 8003492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003496:	2214      	movs	r2, #20
 8003498:	4910      	ldr	r1, [pc, #64]	; (80034dc <Wifi_Station_ConnectToAp+0xc8>)
 800349a:	480c      	ldr	r0, [pc, #48]	; (80034cc <Wifi_Station_ConnectToAp+0xb8>)
 800349c:	f008 fd45 	bl	800bf2a <HAL_UART_Transmit>
			break;
 80034a0:	e006      	b.n	80034b0 <Wifi_Station_ConnectToAp+0x9c>
		}

		if( result > 1)
 80034a2:	7dbb      	ldrb	r3, [r7, #22]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d802      	bhi.n	80034ae <Wifi_Station_ConnectToAp+0x9a>
		{
			break;
		}
		returnVal=true;	
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
 80034ac:	e000      	b.n	80034b0 <Wifi_Station_ConnectToAp+0x9c>
			break;
 80034ae:	bf00      	nop
	}while(0);

	//osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	0802d210 	.word	0x0802d210
 80034c0:	2000bc6d 	.word	0x2000bc6d
 80034c4:	0802d22c 	.word	0x0802d22c
 80034c8:	0802d24c 	.word	0x0802d24c
 80034cc:	2000c524 	.word	0x2000c524
 80034d0:	0802d25c 	.word	0x0802d25c
 80034d4:	0802d268 	.word	0x0802d268
 80034d8:	0802d254 	.word	0x0802d254
 80034dc:	0802d274 	.word	0x0802d274

080034e0 <Wifi_Station_DhcpIsEnable>:
	//osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool	Wifi_Station_DhcpIsEnable(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af02      	add	r7, sp, #8
	//osSemaphoreWait(WifiSemHandle,osWaitForever);
	uint8_t result;
	bool		returnVal=false;
 80034e6:	2300      	movs	r3, #0
 80034e8:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 80034ea:	f7ff fc91 	bl	8002e10 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWDHCP_CUR?\r\n");
 80034ee:	4936      	ldr	r1, [pc, #216]	; (80035c8 <Wifi_Station_DhcpIsEnable+0xe8>)
 80034f0:	4836      	ldr	r0, [pc, #216]	; (80035cc <Wifi_Station_DhcpIsEnable+0xec>)
 80034f2:	f026 ff29 	bl	802a348 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80034f6:	4835      	ldr	r0, [pc, #212]	; (80035cc <Wifi_Station_DhcpIsEnable+0xec>)
 80034f8:	f7ff fb8c 	bl	8002c14 <Wifi_SendString>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d152      	bne.n	80035ae <Wifi_Station_DhcpIsEnable+0xce>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8003508:	1db9      	adds	r1, r7, #6
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <Wifi_Station_DhcpIsEnable+0xf0>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <Wifi_Station_DhcpIsEnable+0xf4>)
 8003510:	2202      	movs	r2, #2
 8003512:	f241 3088 	movw	r0, #5000	; 0x1388
 8003516:	f7ff fb8f 	bl	8002c38 <Wifi_WaitForString>
 800351a:	4603      	mov	r3, r0
 800351c:	f083 0301 	eor.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d145      	bne.n	80035b2 <Wifi_Station_DhcpIsEnable+0xd2>
			break;
		if(result == 2)
 8003526:	79bb      	ldrb	r3, [r7, #6]
 8003528:	2b02      	cmp	r3, #2
 800352a:	d044      	beq.n	80035b6 <Wifi_Station_DhcpIsEnable+0xd6>
			break;		
		if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 800352c:	1dbb      	adds	r3, r7, #6
 800352e:	4a2a      	ldr	r2, [pc, #168]	; (80035d8 <Wifi_Station_DhcpIsEnable+0xf8>)
 8003530:	2101      	movs	r1, #1
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fc4a 	bl	8002dcc <Wifi_ReturnInteger>
 8003538:	4603      	mov	r3, r0
 800353a:	f083 0301 	eor.w	r3, r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d13a      	bne.n	80035ba <Wifi_Station_DhcpIsEnable+0xda>
			break;
		switch(result)
 8003544:	79bb      	ldrb	r3, [r7, #6]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d82e      	bhi.n	80035a8 <Wifi_Station_DhcpIsEnable+0xc8>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <Wifi_Station_DhcpIsEnable+0x70>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003561 	.word	0x08003561
 8003554:	08003573 	.word	0x08003573
 8003558:	08003585 	.word	0x08003585
 800355c:	08003597 	.word	0x08003597
		{
			case 0:
				Wifi.StationDhcp=false;
 8003560:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <Wifi_Station_DhcpIsEnable+0xfc>)
 8003562:	2200      	movs	r2, #0
 8003564:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
				Wifi.SoftApDhcp=false;				
 8003568:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <Wifi_Station_DhcpIsEnable+0xfc>)
 800356a:	2200      	movs	r2, #0
 800356c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
			break;
 8003570:	e01a      	b.n	80035a8 <Wifi_Station_DhcpIsEnable+0xc8>
			case 1:
				Wifi.StationDhcp=false;
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <Wifi_Station_DhcpIsEnable+0xfc>)
 8003574:	2200      	movs	r2, #0
 8003576:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
				Wifi.SoftApDhcp=true;				
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <Wifi_Station_DhcpIsEnable+0xfc>)
 800357c:	2201      	movs	r2, #1
 800357e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
			break;
 8003582:	e011      	b.n	80035a8 <Wifi_Station_DhcpIsEnable+0xc8>
			case 2:
				Wifi.StationDhcp=true;
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <Wifi_Station_DhcpIsEnable+0xfc>)
 8003586:	2201      	movs	r2, #1
 8003588:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
				Wifi.SoftApDhcp=false;				
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <Wifi_Station_DhcpIsEnable+0xfc>)
 800358e:	2200      	movs	r2, #0
 8003590:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
			break;
 8003594:	e008      	b.n	80035a8 <Wifi_Station_DhcpIsEnable+0xc8>
			case 3:
				Wifi.StationDhcp=true;
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <Wifi_Station_DhcpIsEnable+0xfc>)
 8003598:	2201      	movs	r2, #1
 800359a:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
				Wifi.SoftApDhcp=true;				
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <Wifi_Station_DhcpIsEnable+0xfc>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
			break;			
 80035a6:	bf00      	nop
		}
		returnVal=true;	
 80035a8:	2301      	movs	r3, #1
 80035aa:	71fb      	strb	r3, [r7, #7]
 80035ac:	e006      	b.n	80035bc <Wifi_Station_DhcpIsEnable+0xdc>
			break;
 80035ae:	bf00      	nop
 80035b0:	e004      	b.n	80035bc <Wifi_Station_DhcpIsEnable+0xdc>
			break;
 80035b2:	bf00      	nop
 80035b4:	e002      	b.n	80035bc <Wifi_Station_DhcpIsEnable+0xdc>
			break;		
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <Wifi_Station_DhcpIsEnable+0xdc>
			break;
 80035ba:	bf00      	nop
	}while(0);
	//osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
 80035bc:	79fb      	ldrb	r3, [r7, #7]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	0802d2a4 	.word	0x0802d2a4
 80035cc:	2000bc6d 	.word	0x2000bc6d
 80035d0:	0802d170 	.word	0x0802d170
 80035d4:	0802d16c 	.word	0x0802d16c
 80035d8:	0802d1a0 	.word	0x0802d1a0
 80035dc:	2000ba6c 	.word	0x2000ba6c

080035e0 <Wifi_TcpIp_SetMultiConnection>:
	//osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0a6      	sub	sp, #152	; 0x98
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
 // osSemaphoreWait(WifiSemHandle,osWaitForever);
	uint8_t result;
	uint8_t txBuffer[128] = {0,};
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	f107 0310 	add.w	r3, r7, #16
 80035f2:	227c      	movs	r2, #124	; 0x7c
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f025 ffa0 	bl	802953c <memset>
	bool		returnVal=false;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	do
	{
		Wifi_RxClear();
 8003602:	f7ff fc05 	bl	8002e10 <Wifi_RxClear>
		sprintf((char*)txBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 8003606:	79fa      	ldrb	r2, [r7, #7]
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	491d      	ldr	r1, [pc, #116]	; (8003684 <Wifi_TcpIp_SetMultiConnection+0xa4>)
 800360e:	4618      	mov	r0, r3
 8003610:	f026 fe9a 	bl	802a348 <siprintf>
		if (Wifi_SendString((char*)txBuffer) == false)
 8003614:	f107 030c 	add.w	r3, r7, #12
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fafb 	bl	8002c14 <Wifi_SendString>
 800361e:	4603      	mov	r3, r0
 8003620:	f083 0301 	eor.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <Wifi_TcpIp_SetMultiConnection+0x5a>
		{
			DEBUG_PRINT("false");
 800362a:	f240 238e 	movw	r3, #654	; 0x28e
 800362e:	4a16      	ldr	r2, [pc, #88]	; (8003688 <Wifi_TcpIp_SetMultiConnection+0xa8>)
 8003630:	4916      	ldr	r1, [pc, #88]	; (800368c <Wifi_TcpIp_SetMultiConnection+0xac>)
 8003632:	4817      	ldr	r0, [pc, #92]	; (8003690 <Wifi_TcpIp_SetMultiConnection+0xb0>)
 8003634:	f001 feea 	bl	800540c <_debugPrint>
			break;
 8003638:	e01e      	b.n	8003678 <Wifi_TcpIp_SetMultiConnection+0x98>
		}
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR") == false)
 800363a:	f107 018e 	add.w	r1, r7, #142	; 0x8e
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <Wifi_TcpIp_SetMultiConnection+0xb4>)
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <Wifi_TcpIp_SetMultiConnection+0xb8>)
 8003644:	2202      	movs	r2, #2
 8003646:	f241 3088 	movw	r0, #5000	; 0x1388
 800364a:	f7ff faf5 	bl	8002c38 <Wifi_WaitForString>
 800364e:	4603      	mov	r3, r0
 8003650:	f083 0301 	eor.w	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <Wifi_TcpIp_SetMultiConnection+0x8a>
		{
			DEBUG_PRINT("Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2, OK,ERROR) == false");
 800365a:	f240 2393 	movw	r3, #659	; 0x293
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <Wifi_TcpIp_SetMultiConnection+0xa8>)
 8003660:	490a      	ldr	r1, [pc, #40]	; (800368c <Wifi_TcpIp_SetMultiConnection+0xac>)
 8003662:	480e      	ldr	r0, [pc, #56]	; (800369c <Wifi_TcpIp_SetMultiConnection+0xbc>)
 8003664:	f001 fed2 	bl	800540c <_debugPrint>
			break;
 8003668:	e006      	b.n	8003678 <Wifi_TcpIp_SetMultiConnection+0x98>
		}
		Wifi.TcpIpMultiConnection=EnableMultiConnections;
 800366a:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <Wifi_TcpIp_SetMultiConnection+0xc0>)
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	f882 35a1 	strb.w	r3, [r2, #1441]	; 0x5a1
		returnVal=true;	
 8003672:	2301      	movs	r3, #1
 8003674:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}while(0);
	//osSemaphoreRelease(WifiSemHandle);
	return returnVal;			
 8003678:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800367c:	4618      	mov	r0, r3
 800367e:	3790      	adds	r7, #144	; 0x90
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	0802d360 	.word	0x0802d360
 8003688:	0802e0d4 	.word	0x0802e0d4
 800368c:	0802d0a4 	.word	0x0802d0a4
 8003690:	0802d370 	.word	0x0802d370
 8003694:	0802d170 	.word	0x0802d170
 8003698:	0802d16c 	.word	0x0802d16c
 800369c:	0802d378 	.word	0x0802d378
 80036a0:	2000ba6c 	.word	0x2000ba6c

080036a4 <Wifi_TcpIp_GetMultiConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_GetMultiConnection(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af02      	add	r7, sp, #8
  
 // osSemaphoreWait(WifiSemHandle,osWaitForever);
	uint8_t result;
	bool		returnVal=false;
 80036aa:	2300      	movs	r3, #0
 80036ac:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 80036ae:	f7ff fbaf 	bl	8002e10 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX?\r\n");
 80036b2:	4921      	ldr	r1, [pc, #132]	; (8003738 <Wifi_TcpIp_GetMultiConnection+0x94>)
 80036b4:	4821      	ldr	r0, [pc, #132]	; (800373c <Wifi_TcpIp_GetMultiConnection+0x98>)
 80036b6:	f026 fe47 	bl	802a348 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80036ba:	4820      	ldr	r0, [pc, #128]	; (800373c <Wifi_TcpIp_GetMultiConnection+0x98>)
 80036bc:	f7ff faaa 	bl	8002c14 <Wifi_SendString>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f083 0301 	eor.w	r3, r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d129      	bne.n	8003720 <Wifi_TcpIp_GetMultiConnection+0x7c>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80036cc:	1db9      	adds	r1, r7, #6
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <Wifi_TcpIp_GetMultiConnection+0x9c>)
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <Wifi_TcpIp_GetMultiConnection+0xa0>)
 80036d4:	2202      	movs	r2, #2
 80036d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80036da:	f7ff faad 	bl	8002c38 <Wifi_WaitForString>
 80036de:	4603      	mov	r3, r0
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11c      	bne.n	8003724 <Wifi_TcpIp_GetMultiConnection+0x80>
			break;
		if(result == 2)
 80036ea:	79bb      	ldrb	r3, [r7, #6]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d01b      	beq.n	8003728 <Wifi_TcpIp_GetMultiConnection+0x84>
			break;				
    if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 80036f0:	1dbb      	adds	r3, r7, #6
 80036f2:	4a15      	ldr	r2, [pc, #84]	; (8003748 <Wifi_TcpIp_GetMultiConnection+0xa4>)
 80036f4:	2101      	movs	r1, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fb68 	bl	8002dcc <Wifi_ReturnInteger>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f083 0301 	eor.w	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d111      	bne.n	800372c <Wifi_TcpIp_GetMultiConnection+0x88>
      break;
    Wifi.TcpIpMultiConnection=(bool)result;		
 8003708:	79bb      	ldrb	r3, [r7, #6]
 800370a:	2b00      	cmp	r3, #0
 800370c:	bf14      	ite	ne
 800370e:	2301      	movne	r3, #1
 8003710:	2300      	moveq	r3, #0
 8003712:	b2da      	uxtb	r2, r3
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <Wifi_TcpIp_GetMultiConnection+0xa8>)
 8003716:	f883 25a1 	strb.w	r2, [r3, #1441]	; 0x5a1
		returnVal=true;	
 800371a:	2301      	movs	r3, #1
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	e006      	b.n	800372e <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;
 8003720:	bf00      	nop
 8003722:	e004      	b.n	800372e <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;
 8003724:	bf00      	nop
 8003726:	e002      	b.n	800372e <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;				
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <Wifi_TcpIp_GetMultiConnection+0x8a>
      break;
 800372c:	bf00      	nop
	}while(0);
	//osSemaphoreRelease(WifiSemHandle);
	return returnVal;			
 800372e:	79fb      	ldrb	r3, [r7, #7]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	0802d3c0 	.word	0x0802d3c0
 800373c:	2000bc6d 	.word	0x2000bc6d
 8003740:	0802d170 	.word	0x0802d170
 8003744:	0802d16c 	.word	0x0802d16c
 8003748:	0802d1a0 	.word	0x0802d1a0
 800374c:	2000ba6c 	.word	0x2000ba6c

08003750 <Wifi_TcpIp_Close>:
//#########################################################################################################

//#########################################################################################################
bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af02      	add	r7, sp, #8
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  //osSemaphoreWait(WifiSemHandle,osWaitForever);
	uint8_t result;
	bool		returnVal=false;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800375e:	f7ff fb57 	bl	8002e10 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 8003762:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <Wifi_TcpIp_Close+0x8c>)
 8003764:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
 8003768:	f083 0301 	eor.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d004      	beq.n	800377c <Wifi_TcpIp_Close+0x2c>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 8003772:	491b      	ldr	r1, [pc, #108]	; (80037e0 <Wifi_TcpIp_Close+0x90>)
 8003774:	481b      	ldr	r0, [pc, #108]	; (80037e4 <Wifi_TcpIp_Close+0x94>)
 8003776:	f026 fde7 	bl	802a348 <siprintf>
 800377a:	e005      	b.n	8003788 <Wifi_TcpIp_Close+0x38>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	461a      	mov	r2, r3
 8003780:	4919      	ldr	r1, [pc, #100]	; (80037e8 <Wifi_TcpIp_Close+0x98>)
 8003782:	4818      	ldr	r0, [pc, #96]	; (80037e4 <Wifi_TcpIp_Close+0x94>)
 8003784:	f026 fde0 	bl	802a348 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8003788:	4816      	ldr	r0, [pc, #88]	; (80037e4 <Wifi_TcpIp_Close+0x94>)
 800378a:	f7ff fa43 	bl	8002c14 <Wifi_SendString>
 800378e:	4603      	mov	r3, r0
 8003790:	f083 0301 	eor.w	r3, r3, #1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d115      	bne.n	80037c6 <Wifi_TcpIp_Close+0x76>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800379a:	f107 010e 	add.w	r1, r7, #14
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <Wifi_TcpIp_Close+0x9c>)
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <Wifi_TcpIp_Close+0xa0>)
 80037a4:	2202      	movs	r2, #2
 80037a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80037aa:	f7ff fa45 	bl	8002c38 <Wifi_WaitForString>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f083 0301 	eor.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d107      	bne.n	80037ca <Wifi_TcpIp_Close+0x7a>
			break;
		if(result == 2)
 80037ba:	7bbb      	ldrb	r3, [r7, #14]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d006      	beq.n	80037ce <Wifi_TcpIp_Close+0x7e>
			break;		
		returnVal=true;	
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e004      	b.n	80037d0 <Wifi_TcpIp_Close+0x80>
			break;
 80037c6:	bf00      	nop
 80037c8:	e002      	b.n	80037d0 <Wifi_TcpIp_Close+0x80>
			break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <Wifi_TcpIp_Close+0x80>
			break;		
 80037ce:	bf00      	nop
	}while(0);
	//osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	2000ba6c 	.word	0x2000ba6c
 80037e0:	0802d3d0 	.word	0x0802d3d0
 80037e4:	2000bc6d 	.word	0x2000bc6d
 80037e8:	0802d3e0 	.word	0x0802d3e0
 80037ec:	0802d170 	.word	0x0802d170
 80037f0:	0802d16c 	.word	0x0802d16c

080037f4 <WifiTcpIpTcpConnection>:

bool WifiTcpIpTcpConnection(uint8_t socket, const char *ip, const char *port, uint16_t timeOut)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b0c7      	sub	sp, #284	; 0x11c
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	4604      	mov	r4, r0
 80037fc:	f107 0008 	add.w	r0, r7, #8
 8003800:	6001      	str	r1, [r0, #0]
 8003802:	1d39      	adds	r1, r7, #4
 8003804:	600a      	str	r2, [r1, #0]
 8003806:	4619      	mov	r1, r3
 8003808:	f107 030f 	add.w	r3, r7, #15
 800380c:	4622      	mov	r2, r4
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	460a      	mov	r2, r1
 8003816:	801a      	strh	r2, [r3, #0]
	char tx_buffer[128] = {0,};
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800381e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003822:	227c      	movs	r2, #124	; 0x7c
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f025 fe88 	bl	802953c <memset>

	char dsg[128] = {0,};
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	3304      	adds	r3, #4
 8003836:	227c      	movs	r2, #124	; 0x7c
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f025 fe7e 	bl	802953c <memset>
	snprintf(dsg, sizeof(dsg), "WifiTcpIpTcpConnection[%d]", socket);
 8003840:	f107 030f 	add.w	r3, r7, #15
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	f107 0010 	add.w	r0, r7, #16
 800384a:	4a31      	ldr	r2, [pc, #196]	; (8003910 <WifiTcpIpTcpConnection+0x11c>)
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	f026 fd47 	bl	802a2e0 <sniprintf>

	DEBUG_PRINT(dsg);
 8003852:	f107 0010 	add.w	r0, r7, #16
 8003856:	f240 23d7 	movw	r3, #727	; 0x2d7
 800385a:	4a2e      	ldr	r2, [pc, #184]	; (8003914 <WifiTcpIpTcpConnection+0x120>)
 800385c:	492e      	ldr	r1, [pc, #184]	; (8003918 <WifiTcpIpTcpConnection+0x124>)
 800385e:	f001 fdd5 	bl	800540c <_debugPrint>

	wifiRxClear(socket);
 8003862:	f107 030f 	add.w	r3, r7, #15
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f8bb 	bl	80039e4 <wifiRxClear>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIPSERVER=1,%d\r\n",strlen("AT+CIPSERVER=1,%d\r\n"), 1000);
 800386e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003872:	2213      	movs	r2, #19
 8003874:	4929      	ldr	r1, [pc, #164]	; (800391c <WifiTcpIpTcpConnection+0x128>)
 8003876:	482a      	ldr	r0, [pc, #168]	; (8003920 <WifiTcpIpTcpConnection+0x12c>)
 8003878:	f008 fb57 	bl	800bf2a <HAL_UART_Transmit>
	osDelay(100);
 800387c:	2064      	movs	r0, #100	; 0x64
 800387e:	f00a fb59 	bl	800df34 <osDelay>

	if (Wifi.TcpIpMultiConnection == false)
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <WifiTcpIpTcpConnection+0x130>)
 8003884:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
 8003888:	f083 0301 	eor.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d014      	beq.n	80038bc <WifiTcpIpTcpConnection+0xc8>
	{
		HAL_UART_Transmit(&_WIFI_USART, (uint8_t *)tx_buffer, sprintf(tx_buffer,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", ip, port), timeOut);
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	f107 0208 	add.w	r2, r7, #8
 8003898:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	4921      	ldr	r1, [pc, #132]	; (8003928 <WifiTcpIpTcpConnection+0x134>)
 80038a2:	f026 fd51 	bl	802a348 <siprintf>
 80038a6:	4603      	mov	r3, r0
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	f107 030c 	add.w	r3, r7, #12
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80038b4:	481a      	ldr	r0, [pc, #104]	; (8003920 <WifiTcpIpTcpConnection+0x12c>)
 80038b6:	f008 fb38 	bl	800bf2a <HAL_UART_Transmit>
 80038ba:	e018      	b.n	80038ee <WifiTcpIpTcpConnection+0xfa>
	}
	else
	{
		HAL_UART_Transmit(&_WIFI_USART, (uint8_t *)tx_buffer, sprintf(tx_buffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%s\r\n", socket, ip, port), timeOut);
 80038bc:	f107 030f 	add.w	r3, r7, #15
 80038c0:	7819      	ldrb	r1, [r3, #0]
 80038c2:	f107 0308 	add.w	r3, r7, #8
 80038c6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80038ca:	1d3a      	adds	r2, r7, #4
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	9200      	str	r2, [sp, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	460a      	mov	r2, r1
 80038d4:	4915      	ldr	r1, [pc, #84]	; (800392c <WifiTcpIpTcpConnection+0x138>)
 80038d6:	f026 fd37 	bl	802a348 <siprintf>
 80038da:	4603      	mov	r3, r0
 80038dc:	b29a      	uxth	r2, r3
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80038e8:	480d      	ldr	r0, [pc, #52]	; (8003920 <WifiTcpIpTcpConnection+0x12c>)
 80038ea:	f008 fb1e 	bl	800bf2a <HAL_UART_Transmit>
	}
	wifiRxClear(socket);
 80038ee:	f107 030f 	add.w	r3, r7, #15
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f875 	bl	80039e4 <wifiRxClear>
	osDelay(2000);
 80038fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80038fe:	f00a fb19 	bl	800df34 <osDelay>

	//DEBUG_PRINT(socket);
	return true;
 8003902:	2301      	movs	r3, #1
}
 8003904:	4618      	mov	r0, r3
 8003906:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800390a:	46bd      	mov	sp, r7
 800390c:	bd90      	pop	{r4, r7, pc}
 800390e:	bf00      	nop
 8003910:	0802d3f4 	.word	0x0802d3f4
 8003914:	0802e0f4 	.word	0x0802e0f4
 8003918:	0802d0a4 	.word	0x0802d0a4
 800391c:	0802d410 	.word	0x0802d410
 8003920:	2000c568 	.word	0x2000c568
 8003924:	2000ba6c 	.word	0x2000ba6c
 8003928:	0802d424 	.word	0x0802d424
 800392c:	0802d440 	.word	0x0802d440

08003930 <WifiSend>:

bool WifiSend(uint8_t socket, uint16_t length, uint8_t *data)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b0a2      	sub	sp, #136	; 0x88
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	603a      	str	r2, [r7, #0]
 800393a:	71fb      	strb	r3, [r7, #7]
 800393c:	460b      	mov	r3, r1
 800393e:	80bb      	strh	r3, [r7, #4]
	char tx_buffer[128] = {0,};
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	f107 030c 	add.w	r3, r7, #12
 8003948:	227c      	movs	r2, #124	; 0x7c
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f025 fdf5 	bl	802953c <memset>

	wifiRxClear(socket);
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f845 	bl	80039e4 <wifiRxClear>
	if (Wifi.TcpIpMultiConnection == false)
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <WifiSend+0xa4>)
 800395c:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
 8003960:	f083 0301 	eor.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d010      	beq.n	800398c <WifiSend+0x5c>
	{
		HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer, sprintf(tx_buffer,"AT+CIPSEND=%d\r\n", length), 1000);
 800396a:	88ba      	ldrh	r2, [r7, #4]
 800396c:	f107 0308 	add.w	r3, r7, #8
 8003970:	4919      	ldr	r1, [pc, #100]	; (80039d8 <WifiSend+0xa8>)
 8003972:	4618      	mov	r0, r3
 8003974:	f026 fce8 	bl	802a348 <siprintf>
 8003978:	4603      	mov	r3, r0
 800397a:	b29a      	uxth	r2, r3
 800397c:	f107 0108 	add.w	r1, r7, #8
 8003980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003984:	4815      	ldr	r0, [pc, #84]	; (80039dc <WifiSend+0xac>)
 8003986:	f008 fad0 	bl	800bf2a <HAL_UART_Transmit>
 800398a:	e00f      	b.n	80039ac <WifiSend+0x7c>
	}
	else
	{
		HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer, sprintf(tx_buffer,"AT+CIPSEND=%d,%d\r\n", socket, length), 1000);
 800398c:	79fa      	ldrb	r2, [r7, #7]
 800398e:	88bb      	ldrh	r3, [r7, #4]
 8003990:	f107 0008 	add.w	r0, r7, #8
 8003994:	4912      	ldr	r1, [pc, #72]	; (80039e0 <WifiSend+0xb0>)
 8003996:	f026 fcd7 	bl	802a348 <siprintf>
 800399a:	4603      	mov	r3, r0
 800399c:	b29a      	uxth	r2, r3
 800399e:	f107 0108 	add.w	r1, r7, #8
 80039a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039a6:	480d      	ldr	r0, [pc, #52]	; (80039dc <WifiSend+0xac>)
 80039a8:	f008 fabf 	bl	800bf2a <HAL_UART_Transmit>
	}
	osDelay(20);
 80039ac:	2014      	movs	r0, #20
 80039ae:	f00a fac1 	bl	800df34 <osDelay>

	wifiRxClear(socket);
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f815 	bl	80039e4 <wifiRxClear>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)data, length, 1000);
 80039ba:	88ba      	ldrh	r2, [r7, #4]
 80039bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	4806      	ldr	r0, [pc, #24]	; (80039dc <WifiSend+0xac>)
 80039c4:	f008 fab1 	bl	800bf2a <HAL_UART_Transmit>

	return true;
 80039c8:	2301      	movs	r3, #1
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3788      	adds	r7, #136	; 0x88
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	2000ba6c 	.word	0x2000ba6c
 80039d8:	0802d460 	.word	0x0802d460
 80039dc:	2000c568 	.word	0x2000c568
 80039e0:	0802d470 	.word	0x0802d470

080039e4 <wifiRxClear>:

void wifiRxClear(uint8_t socket)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 80039ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f2:	2100      	movs	r1, #0
 80039f4:	480f      	ldr	r0, [pc, #60]	; (8003a34 <wifiRxClear+0x50>)
 80039f6:	f025 fda1 	bl	802953c <memset>
	Wifi.RxIndex=0;
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <wifiRxClear+0x54>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302

	ring_buffer_init(&Wifi.wifi_ring_buffer[0]);
 8003a02:	480e      	ldr	r0, [pc, #56]	; (8003a3c <wifiRxClear+0x58>)
 8003a04:	f7fe ff3a 	bl	800287c <ring_buffer_init>
	ring_buffer_init(&Wifi.wifi_ring_buffer[socket]);
 8003a08:	79fa      	ldrb	r2, [r7, #7]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	019b      	lsls	r3, r3, #6
 8003a0e:	4413      	add	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <wifiRxClear+0x54>)
 8003a18:	4413      	add	r3, r2
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe ff2d 	bl	800287c <ring_buffer_init>
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8003a22:	2201      	movs	r2, #1
 8003a24:	4904      	ldr	r1, [pc, #16]	; (8003a38 <wifiRxClear+0x54>)
 8003a26:	4806      	ldr	r0, [pc, #24]	; (8003a40 <wifiRxClear+0x5c>)
 8003a28:	f008 fb11 	bl	800c04e <HAL_UART_Receive_IT>
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000ba6d 	.word	0x2000ba6d
 8003a38:	2000ba6c 	.word	0x2000ba6c
 8003a3c:	2000bd70 	.word	0x2000bd70
 8003a40:	2000c568 	.word	0x2000c568

08003a44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart5.Instance)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <HAL_UART_RxCpltCallback+0x20>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d101      	bne.n	8003a5c <HAL_UART_RxCpltCallback+0x18>
    {
    	Wifi_RxCallBack();
 8003a58:	f7ff fa00 	bl	8002e5c <Wifi_RxCallBack>
    }
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	2000c568 	.word	0x2000c568

08003a68 <Wifi_UserInit>:

#include "Wifi.h"

//#######################################################################################
void Wifi_UserInit(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	Wifi_SetMode(WifiMode_Station);
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7ff fc39 	bl	80032e4 <Wifi_SetMode>
	while (Wifi_Station_ConnectToAp("bsoh123","123456789as",NULL) == false);
 8003a72:	bf00      	nop
 8003a74:	2200      	movs	r2, #0
 8003a76:	4906      	ldr	r1, [pc, #24]	; (8003a90 <Wifi_UserInit+0x28>)
 8003a78:	4806      	ldr	r0, [pc, #24]	; (8003a94 <Wifi_UserInit+0x2c>)
 8003a7a:	f7ff fccb 	bl	8003414 <Wifi_Station_ConnectToAp>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f083 0301 	eor.w	r3, r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f4      	bne.n	8003a74 <Wifi_UserInit+0xc>
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	0802d484 	.word	0x0802d484
 8003a94:	0802d490 	.word	0x0802d490

08003a98 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a9e:	463b      	mov	r3, r7
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003aaa:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003aac:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <MX_ADC1_Init+0xa0>)
 8003aae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003ab0:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ab6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8003ab8:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ad4:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003adc:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <MX_ADC1_Init+0xa4>)
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003afa:	480e      	ldr	r0, [pc, #56]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003afc:	f002 fdd2 	bl	80066a4 <HAL_ADC_Init>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8003b06:	f000 ffa1 	bl	8004a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003b0a:	230d      	movs	r3, #13
 8003b0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003b12:	2301      	movs	r3, #1
 8003b14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b16:	463b      	mov	r3, r7
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4806      	ldr	r0, [pc, #24]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003b1c:	f002 ff70 	bl	8006a00 <HAL_ADC_ConfigChannel>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8003b26:	f000 ff91 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	2000c20c 	.word	0x2000c20c
 8003b38:	40012000 	.word	0x40012000
 8003b3c:	0f000001 	.word	0x0f000001

08003b40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <HAL_ADC_MspInit+0xb0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d141      	bne.n	8003be6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <HAL_ADC_MspInit+0xb4>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	4a22      	ldr	r2, [pc, #136]	; (8003bf4 <HAL_ADC_MspInit+0xb4>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6453      	str	r3, [r2, #68]	; 0x44
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <HAL_ADC_MspInit+0xb4>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <HAL_ADC_MspInit+0xb4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <HAL_ADC_MspInit+0xb4>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_ADC_MspInit+0xb4>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <HAL_ADC_MspInit+0xb4>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <HAL_ADC_MspInit+0xb4>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <HAL_ADC_MspInit+0xb4>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc2:	f107 0314 	add.w	r3, r7, #20
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <HAL_ADC_MspInit+0xb8>)
 8003bca:	f003 fcc3 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003bce:	2320      	movs	r3, #32
 8003bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bda:	f107 0314 	add.w	r3, r7, #20
 8003bde:	4619      	mov	r1, r3
 8003be0:	4806      	ldr	r0, [pc, #24]	; (8003bfc <HAL_ADC_MspInit+0xbc>)
 8003be2:	f003 fcb7 	bl	8007554 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003be6:	bf00      	nop
 8003be8:	3728      	adds	r7, #40	; 0x28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40012000 	.word	0x40012000
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40020800 	.word	0x40020800
 8003bfc:	40020000 	.word	0x40020000

08003c00 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <MX_CRC_Init+0x20>)
 8003c06:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <MX_CRC_Init+0x24>)
 8003c08:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003c0a:	4805      	ldr	r0, [pc, #20]	; (8003c20 <MX_CRC_Init+0x20>)
 8003c0c:	f003 fa08 	bl	8007020 <HAL_CRC_Init>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003c16:	f000 ff19 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2000c254 	.word	0x2000c254
 8003c24:	40023000 	.word	0x40023000

08003c28 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <HAL_CRC_MspInit+0x3c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10d      	bne.n	8003c56 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <HAL_CRC_MspInit+0x40>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <HAL_CRC_MspInit+0x40>)
 8003c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_CRC_MspInit+0x40>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023000 	.word	0x40023000
 8003c68:	40023800 	.word	0x40023800

08003c6c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <MX_DMA2D_Init+0x60>)
 8003c74:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003c7e:	2202      	movs	r2, #2
 8003c80:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003c90:	2202      	movs	r2, #2
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003ca0:	4809      	ldr	r0, [pc, #36]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003ca2:	f003 fa6b 	bl	800717c <HAL_DMA2D_Init>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8003cac:	f000 fece 	bl	8004a4c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <MX_DMA2D_Init+0x5c>)
 8003cb4:	f003 fbbc 	bl	8007430 <HAL_DMA2D_ConfigLayer>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8003cbe:	f000 fec5 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000c25c 	.word	0x2000c25c
 8003ccc:	4002b000 	.word	0x4002b000

08003cd0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <HAL_DMA2D_MspInit+0x48>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d115      	bne.n	8003d0e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_DMA2D_MspInit+0x4c>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <HAL_DMA2D_MspInit+0x4c>)
 8003cec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <HAL_DMA2D_MspInit+0x4c>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2105      	movs	r1, #5
 8003d02:	205a      	movs	r0, #90	; 0x5a
 8003d04:	f003 f962 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003d08:	205a      	movs	r0, #90	; 0x5a
 8003d0a:	f003 f97b 	bl	8007004 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	4002b000 	.word	0x4002b000
 8003d1c:	40023800 	.word	0x40023800

08003d20 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <DWT_Delay_Init+0x58>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <DWT_Delay_Init+0x58>)
 8003d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <DWT_Delay_Init+0x58>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <DWT_Delay_Init+0x58>)
 8003d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <DWT_Delay_Init+0x5c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <DWT_Delay_Init+0x5c>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <DWT_Delay_Init+0x5c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0b      	ldr	r2, [pc, #44]	; (8003d7c <DWT_Delay_Init+0x5c>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <DWT_Delay_Init+0x5c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8003d5a:	bf00      	nop
     __ASM volatile ("NOP");
 8003d5c:	bf00      	nop
  __ASM volatile ("NOP");
 8003d5e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <DWT_Delay_Init+0x5c>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8003d6c:	2301      	movs	r3, #1
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000edf0 	.word	0xe000edf0
 8003d7c:	e0001000 	.word	0xe0001000

08003d80 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08c      	sub	sp, #48	; 0x30
 8003d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	611a      	str	r2, [r3, #16]
 8003d96:	615a      	str	r2, [r3, #20]
 8003d98:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003d9a:	4b45      	ldr	r3, [pc, #276]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003d9c:	4a45      	ldr	r2, [pc, #276]	; (8003eb4 <MX_FMC_Init+0x134>)
 8003d9e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8003da0:	4b43      	ldr	r3, [pc, #268]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003da6:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003dac:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003dae:	2204      	movs	r2, #4
 8003db0:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003db2:	4b3f      	ldr	r3, [pc, #252]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003db4:	2210      	movs	r2, #16
 8003db6:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003db8:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003dba:	2240      	movs	r2, #64	; 0x40
 8003dbc:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003dbe:	4b3c      	ldr	r3, [pc, #240]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003dc0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003dc4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003dc6:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003dcc:	4b38      	ldr	r3, [pc, #224]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd2:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003dd4:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8003dda:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003de2:	2302      	movs	r3, #2
 8003de4:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003de6:	2307      	movs	r3, #7
 8003de8:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 8003dea:	2304      	movs	r3, #4
 8003dec:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8003dee:	2307      	movs	r3, #7
 8003df0:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8003df2:	2303      	movs	r3, #3
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8003df6:	2302      	movs	r3, #2
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003dfe:	f107 0314 	add.w	r3, r7, #20
 8003e02:	4619      	mov	r1, r3
 8003e04:	482a      	ldr	r0, [pc, #168]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003e06:	f006 f939 	bl	800a07c <HAL_SDRAM_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8003e10:	f000 fe1c 	bl	8004a4c <Error_Handler>
       */
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1386);
#endif
  }
  /* USER CODE END FMC_Init 2 */
}
 8003e14:	e048      	b.n	8003ea8 <MX_FMC_Init+0x128>
      __IO uint32_t tmpmrd =0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
      Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e1e:	2308      	movs	r3, #8
 8003e20:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e30:	4619      	mov	r1, r3
 8003e32:	481f      	ldr	r0, [pc, #124]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003e34:	f006 f956 	bl	800a0e4 <HAL_SDRAM_SendCommand>
      HAL_Delay(100);
 8003e38:	2064      	movs	r0, #100	; 0x64
 8003e3a:	f002 fc0f 	bl	800665c <HAL_Delay>
      Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e42:	2308      	movs	r3, #8
 8003e44:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 8003e46:	2301      	movs	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003e4e:	463b      	mov	r3, r7
 8003e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e54:	4619      	mov	r1, r3
 8003e56:	4816      	ldr	r0, [pc, #88]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003e58:	f006 f944 	bl	800a0e4 <HAL_SDRAM_SendCommand>
      Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e60:	2308      	movs	r3, #8
 8003e62:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 4;
 8003e64:	2304      	movs	r3, #4
 8003e66:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e72:	4619      	mov	r1, r3
 8003e74:	480e      	ldr	r0, [pc, #56]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003e76:	f006 f935 	bl	800a0e4 <HAL_SDRAM_SendCommand>
      tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003e7a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003e7e:	613b      	str	r3, [r7, #16]
      Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003e80:	2304      	movs	r3, #4
 8003e82:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e84:	2308      	movs	r3, #8
 8003e86:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = tmpmrd;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003e90:	463b      	mov	r3, r7
 8003e92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e96:	4619      	mov	r1, r3
 8003e98:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003e9a:	f006 f923 	bl	800a0e4 <HAL_SDRAM_SendCommand>
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1386);
 8003e9e:	f240 516a 	movw	r1, #1386	; 0x56a
 8003ea2:	4803      	ldr	r0, [pc, #12]	; (8003eb0 <MX_FMC_Init+0x130>)
 8003ea4:	f006 f949 	bl	800a13a <HAL_SDRAM_ProgramRefreshRate>
}
 8003ea8:	bf00      	nop
 8003eaa:	3730      	adds	r7, #48	; 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	2000c29c 	.word	0x2000c29c
 8003eb4:	a0000140 	.word	0xa0000140

08003eb8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebe:	1d3b      	adds	r3, r7, #4
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_FMC_MspInit+0x104>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d16f      	bne.n	8003fb4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003ed4:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <HAL_FMC_MspInit+0x104>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_FMC_MspInit+0x108>)
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	4a37      	ldr	r2, [pc, #220]	; (8003fc0 <HAL_FMC_MspInit+0x108>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6393      	str	r3, [r2, #56]	; 0x38
 8003eea:	4b35      	ldr	r3, [pc, #212]	; (8003fc0 <HAL_FMC_MspInit+0x108>)
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003ef6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003efa:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efc:	2302      	movs	r3, #2
 8003efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f04:	2303      	movs	r3, #3
 8003f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f08:	230c      	movs	r3, #12
 8003f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	482c      	ldr	r0, [pc, #176]	; (8003fc4 <HAL_FMC_MspInit+0x10c>)
 8003f12:	f003 fb1f 	bl	8007554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003f16:	2301      	movs	r3, #1
 8003f18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f22:	2303      	movs	r3, #3
 8003f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f26:	230c      	movs	r3, #12
 8003f28:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4826      	ldr	r0, [pc, #152]	; (8003fc8 <HAL_FMC_MspInit+0x110>)
 8003f30:	f003 fb10 	bl	8007554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003f34:	f248 1333 	movw	r3, #33075	; 0x8133
 8003f38:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f42:	2303      	movs	r3, #3
 8003f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f46:	230c      	movs	r3, #12
 8003f48:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	481f      	ldr	r0, [pc, #124]	; (8003fcc <HAL_FMC_MspInit+0x114>)
 8003f50:	f003 fb00 	bl	8007554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003f54:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f58:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f62:	2303      	movs	r3, #3
 8003f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f66:	230c      	movs	r3, #12
 8003f68:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4818      	ldr	r0, [pc, #96]	; (8003fd0 <HAL_FMC_MspInit+0x118>)
 8003f70:	f003 faf0 	bl	8007554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003f74:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003f78:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f82:	2303      	movs	r3, #3
 8003f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f86:	230c      	movs	r3, #12
 8003f88:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4811      	ldr	r0, [pc, #68]	; (8003fd4 <HAL_FMC_MspInit+0x11c>)
 8003f90:	f003 fae0 	bl	8007554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003f94:	2360      	movs	r3, #96	; 0x60
 8003f96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fa4:	230c      	movs	r3, #12
 8003fa6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	480a      	ldr	r0, [pc, #40]	; (8003fd8 <HAL_FMC_MspInit+0x120>)
 8003fae:	f003 fad1 	bl	8007554 <HAL_GPIO_Init>
 8003fb2:	e000      	b.n	8003fb6 <HAL_FMC_MspInit+0xfe>
    return;
 8003fb4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000304 	.word	0x20000304
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40021400 	.word	0x40021400
 8003fc8:	40020800 	.word	0x40020800
 8003fcc:	40021800 	.word	0x40021800
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40020c00 	.word	0x40020c00
 8003fd8:	40020400 	.word	0x40020400

08003fdc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003fe4:	f7ff ff68 	bl	8003eb8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sensorSem */
  sensorSemHandle = osSemaphoreNew(1, 1, &sensorSem_attributes);
 8004028:	4a20      	ldr	r2, [pc, #128]	; (80040ac <MX_FREERTOS_Init+0x88>)
 800402a:	2101      	movs	r1, #1
 800402c:	2001      	movs	r0, #1
 800402e:	f00a f945 	bl	800e2bc <osSemaphoreNew>
 8004032:	4603      	mov	r3, r0
 8004034:	4a1e      	ldr	r2, [pc, #120]	; (80040b0 <MX_FREERTOS_Init+0x8c>)
 8004036:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of updateSensorTimer */
  updateSensorTimerHandle = osTimerNew(CallbackUpdateSensor, osTimerPeriodic, NULL, &updateSensorTimer_attributes);
 8004038:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <MX_FREERTOS_Init+0x90>)
 800403a:	2200      	movs	r2, #0
 800403c:	2101      	movs	r1, #1
 800403e:	481e      	ldr	r0, [pc, #120]	; (80040b8 <MX_FREERTOS_Init+0x94>)
 8004040:	f009 ffa8 	bl	800df94 <osTimerNew>
 8004044:	4603      	mov	r3, r0
 8004046:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <MX_FREERTOS_Init+0x98>)
 8004048:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of envQueue */
  envQueueHandle = osMessageQueueNew (16, sizeof(ENV_MSG), &envQueue_attributes);
 800404a:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <MX_FREERTOS_Init+0x9c>)
 800404c:	2108      	movs	r1, #8
 800404e:	2010      	movs	r0, #16
 8004050:	f00a fa54 	bl	800e4fc <osMessageQueueNew>
 8004054:	4603      	mov	r3, r0
 8004056:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <MX_FREERTOS_Init+0xa0>)
 8004058:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800405a:	4a1b      	ldr	r2, [pc, #108]	; (80040c8 <MX_FREERTOS_Init+0xa4>)
 800405c:	2100      	movs	r1, #0
 800405e:	481b      	ldr	r0, [pc, #108]	; (80040cc <MX_FREERTOS_Init+0xa8>)
 8004060:	f009 fed6 	bl	800de10 <osThreadNew>
 8004064:	4603      	mov	r3, r0
 8004066:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <MX_FREERTOS_Init+0xac>)
 8004068:	6013      	str	r3, [r2, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(_TouchGFX_Task, NULL, &lcdTask_attributes);
 800406a:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <MX_FREERTOS_Init+0xb0>)
 800406c:	2100      	movs	r1, #0
 800406e:	481a      	ldr	r0, [pc, #104]	; (80040d8 <MX_FREERTOS_Init+0xb4>)
 8004070:	f009 fece 	bl	800de10 <osThreadNew>
 8004074:	4603      	mov	r3, r0
 8004076:	4a19      	ldr	r2, [pc, #100]	; (80040dc <MX_FREERTOS_Init+0xb8>)
 8004078:	6013      	str	r3, [r2, #0]

  /* creation of eventHandlerTas */
  eventHandlerTasHandle = osThreadNew(___eventHandler, NULL, &eventHandlerTas_attributes);
 800407a:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <MX_FREERTOS_Init+0xbc>)
 800407c:	2100      	movs	r1, #0
 800407e:	4819      	ldr	r0, [pc, #100]	; (80040e4 <MX_FREERTOS_Init+0xc0>)
 8004080:	f009 fec6 	bl	800de10 <osThreadNew>
 8004084:	4603      	mov	r3, r0
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <MX_FREERTOS_Init+0xc4>)
 8004088:	6013      	str	r3, [r2, #0]

  /* creation of event_loop_task */
  event_loop_taskHandle = osThreadNew(_eventLoopTask, NULL, &event_loop_task_attributes);
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <MX_FREERTOS_Init+0xc8>)
 800408c:	2100      	movs	r1, #0
 800408e:	4818      	ldr	r0, [pc, #96]	; (80040f0 <MX_FREERTOS_Init+0xcc>)
 8004090:	f009 febe 	bl	800de10 <osThreadNew>
 8004094:	4603      	mov	r3, r0
 8004096:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <MX_FREERTOS_Init+0xd0>)
 8004098:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of eventFlag */
  eventFlagHandle = osEventFlagsNew(&eventFlag_attributes);
 800409a:	4817      	ldr	r0, [pc, #92]	; (80040f8 <MX_FREERTOS_Init+0xd4>)
 800409c:	f00a f824 	bl	800e0e8 <osEventFlagsNew>
 80040a0:	4603      	mov	r3, r0
 80040a2:	4a16      	ldr	r2, [pc, #88]	; (80040fc <MX_FREERTOS_Init+0xd8>)
 80040a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	0802e1c4 	.word	0x0802e1c4
 80040b0:	2000c2e0 	.word	0x2000c2e0
 80040b4:	0802e1b4 	.word	0x0802e1b4
 80040b8:	0800415d 	.word	0x0800415d
 80040bc:	2000c2d4 	.word	0x2000c2d4
 80040c0:	0802e19c 	.word	0x0802e19c
 80040c4:	2000c2ec 	.word	0x2000c2ec
 80040c8:	0802e10c 	.word	0x0802e10c
 80040cc:	08004101 	.word	0x08004101
 80040d0:	2000c2f0 	.word	0x2000c2f0
 80040d4:	0802e130 	.word	0x0802e130
 80040d8:	08004115 	.word	0x08004115
 80040dc:	2000c204 	.word	0x2000c204
 80040e0:	0802e154 	.word	0x0802e154
 80040e4:	0800412f 	.word	0x0800412f
 80040e8:	2000c2d0 	.word	0x2000c2d0
 80040ec:	0802e178 	.word	0x0802e178
 80040f0:	08004145 	.word	0x08004145
 80040f4:	2000c2dc 	.word	0x2000c2dc
 80040f8:	0802e1d4 	.word	0x0802e1d4
 80040fc:	2000c2d8 	.word	0x2000c2d8

08004100 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	WifiInit();
 8004108:	f7fe fff6 	bl	80030f8 <WifiInit>
  /* Infinite loop */
  for (;;)
  {
	  osDelay(1);
 800410c:	2001      	movs	r0, #1
 800410e:	f009 ff11 	bl	800df34 <osDelay>
 8004112:	e7fb      	b.n	800410c <StartDefaultTask+0xc>

08004114 <_TouchGFX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__TouchGFX_Task */
void _TouchGFX_Task(void *argument)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _TouchGFX_Task */
  LcdDrvStart();
 800411c:	f7fe fd40 	bl	8002ba0 <LcdDrvStart>

  TouchGFX_Task(argument);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f00d ff45 	bl	8011fb0 <TouchGFX_Task>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004126:	2001      	movs	r0, #1
 8004128:	f009 ff04 	bl	800df34 <osDelay>
 800412c:	e7fb      	b.n	8004126 <_TouchGFX_Task+0x12>

0800412e <___eventHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header____eventHandler */
void ___eventHandler(void *argument)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ___eventHandler */
  _eventHandler(argument);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fe f80e 	bl	8002158 <_eventHandler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800413c:	2001      	movs	r0, #1
 800413e:	f009 fef9 	bl	800df34 <osDelay>
 8004142:	e7fb      	b.n	800413c <___eventHandler+0xe>

08004144 <_eventLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__eventLoopTask */
void _eventLoopTask(void *argument)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _eventLoopTask */
	eventLoopTask(argument);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fe f877 	bl	8002240 <eventLoopTask>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004152:	2001      	movs	r0, #1
 8004154:	f009 feee 	bl	800df34 <osDelay>
 8004158:	e7fb      	b.n	8004152 <_eventLoopTask+0xe>
	...

0800415c <CallbackUpdateSensor>:
  /* USER CODE END _eventLoopTask */
}

/* CallbackUpdateSensor function */
void CallbackUpdateSensor(void *argument)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackUpdateSensor */
	osEventFlagsSet(eventFlagHandle, UPDATE_SENSOR_VALUE);
 8004164:	4b04      	ldr	r3, [pc, #16]	; (8004178 <CallbackUpdateSensor+0x1c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2105      	movs	r1, #5
 800416a:	4618      	mov	r0, r3
 800416c:	f009 fffc 	bl	800e168 <osEventFlagsSet>
  /* USER CODE END CallbackUpdateSensor */
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	2000c2d8 	.word	0x2000c2d8

0800417c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08e      	sub	sp, #56	; 0x38
 8004180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	4b8f      	ldr	r3, [pc, #572]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a8e      	ldr	r2, [pc, #568]	; (80043d4 <MX_GPIO_Init+0x258>)
 800419c:	f043 0310 	orr.w	r3, r3, #16
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b8c      	ldr	r3, [pc, #560]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	4b88      	ldr	r3, [pc, #544]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4a87      	ldr	r2, [pc, #540]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041b8:	f043 0304 	orr.w	r3, r3, #4
 80041bc:	6313      	str	r3, [r2, #48]	; 0x30
 80041be:	4b85      	ldr	r3, [pc, #532]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	4b81      	ldr	r3, [pc, #516]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	4a80      	ldr	r2, [pc, #512]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041d4:	f043 0320 	orr.w	r3, r3, #32
 80041d8:	6313      	str	r3, [r2, #48]	; 0x30
 80041da:	4b7e      	ldr	r3, [pc, #504]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	4b7a      	ldr	r3, [pc, #488]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	4a79      	ldr	r2, [pc, #484]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f4:	6313      	str	r3, [r2, #48]	; 0x30
 80041f6:	4b77      	ldr	r3, [pc, #476]	; (80043d4 <MX_GPIO_Init+0x258>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	4b73      	ldr	r3, [pc, #460]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	4a72      	ldr	r2, [pc, #456]	; (80043d4 <MX_GPIO_Init+0x258>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6313      	str	r3, [r2, #48]	; 0x30
 8004212:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b6c      	ldr	r3, [pc, #432]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a6b      	ldr	r2, [pc, #428]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b69      	ldr	r3, [pc, #420]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	4b65      	ldr	r3, [pc, #404]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	4a64      	ldr	r2, [pc, #400]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004248:	6313      	str	r3, [r2, #48]	; 0x30
 800424a:	4b62      	ldr	r3, [pc, #392]	; (80043d4 <MX_GPIO_Init+0x258>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	4b5e      	ldr	r3, [pc, #376]	; (80043d4 <MX_GPIO_Init+0x258>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	4a5d      	ldr	r2, [pc, #372]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004260:	f043 0308 	orr.w	r3, r3, #8
 8004264:	6313      	str	r3, [r2, #48]	; 0x30
 8004266:	4b5b      	ldr	r3, [pc, #364]	; (80043d4 <MX_GPIO_Init+0x258>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, HUMIDIFIER_SW_PIN_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8004272:	2200      	movs	r2, #0
 8004274:	210c      	movs	r1, #12
 8004276:	4858      	ldr	r0, [pc, #352]	; (80043d8 <MX_GPIO_Init+0x25c>)
 8004278:	f003 fc24 	bl	8007ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800427c:	2200      	movs	r2, #0
 800427e:	f242 0116 	movw	r1, #8214	; 0x2016
 8004282:	4856      	ldr	r0, [pc, #344]	; (80043dc <MX_GPIO_Init+0x260>)
 8004284:	f003 fc1e 	bl	8007ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8004288:	2200      	movs	r2, #0
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	4854      	ldr	r0, [pc, #336]	; (80043e0 <MX_GPIO_Init+0x264>)
 800428e:	f003 fc19 	bl	8007ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8004292:	2200      	movs	r2, #0
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	4853      	ldr	r0, [pc, #332]	; (80043e4 <MX_GPIO_Init+0x268>)
 8004298:	f003 fc14 	bl	8007ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800429c:	2200      	movs	r2, #0
 800429e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80042a2:	4851      	ldr	r0, [pc, #324]	; (80043e8 <MX_GPIO_Init+0x26c>)
 80042a4:	f003 fc0e 	bl	8007ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80042a8:	2200      	movs	r2, #0
 80042aa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80042ae:	484f      	ldr	r0, [pc, #316]	; (80043ec <MX_GPIO_Init+0x270>)
 80042b0:	f003 fc08 	bl	8007ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PE3 */
  GPIO_InitStruct.Pin = HUMIDIFIER_SW_PIN_Pin|GPIO_PIN_3;
 80042b4:	230c      	movs	r3, #12
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042b8:	2301      	movs	r3, #1
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042bc:	2300      	movs	r3, #0
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c0:	2300      	movs	r3, #0
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042c8:	4619      	mov	r1, r3
 80042ca:	4843      	ldr	r0, [pc, #268]	; (80043d8 <MX_GPIO_Init+0x25c>)
 80042cc:	f003 f942 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80042d0:	f242 0316 	movw	r3, #8214	; 0x2016
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042d6:	2301      	movs	r3, #1
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042de:	2300      	movs	r3, #0
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042e6:	4619      	mov	r1, r3
 80042e8:	483c      	ldr	r0, [pc, #240]	; (80043dc <MX_GPIO_Init+0x260>)
 80042ea:	f003 f933 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042ee:	2340      	movs	r3, #64	; 0x40
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f2:	2301      	movs	r3, #1
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fa:	2300      	movs	r3, #0
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004302:	4619      	mov	r1, r3
 8004304:	4836      	ldr	r0, [pc, #216]	; (80043e0 <MX_GPIO_Init+0x264>)
 8004306:	f003 f925 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800430a:	f248 0306 	movw	r3, #32774	; 0x8006
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004310:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800431a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800431e:	4619      	mov	r1, r3
 8004320:	4830      	ldr	r0, [pc, #192]	; (80043e4 <MX_GPIO_Init+0x268>)
 8004322:	f003 f917 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800432a:	2301      	movs	r3, #1
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	2300      	movs	r3, #0
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004332:	2300      	movs	r3, #0
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8004336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800433a:	4619      	mov	r1, r3
 800433c:	4829      	ldr	r0, [pc, #164]	; (80043e4 <MX_GPIO_Init+0x268>)
 800433e:	f003 f909 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8004342:	2320      	movs	r3, #32
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004346:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8004350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004354:	4619      	mov	r1, r3
 8004356:	4821      	ldr	r0, [pc, #132]	; (80043dc <MX_GPIO_Init+0x260>)
 8004358:	f003 f8fc 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800435c:	2304      	movs	r3, #4
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004360:	2300      	movs	r3, #0
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004364:	2300      	movs	r3, #0
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436c:	4619      	mov	r1, r3
 800436e:	4820      	ldr	r0, [pc, #128]	; (80043f0 <MX_GPIO_Init+0x274>)
 8004370:	f003 f8f0 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8004374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800437a:	2300      	movs	r3, #0
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8004382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004386:	4619      	mov	r1, r3
 8004388:	4817      	ldr	r0, [pc, #92]	; (80043e8 <MX_GPIO_Init+0x26c>)
 800438a:	f003 f8e3 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800438e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004394:	2301      	movs	r3, #1
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439c:	2300      	movs	r3, #0
 800439e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043a4:	4619      	mov	r1, r3
 80043a6:	4810      	ldr	r0, [pc, #64]	; (80043e8 <MX_GPIO_Init+0x26c>)
 80043a8:	f003 f8d4 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80043ac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b2:	2301      	movs	r3, #1
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ba:	2300      	movs	r3, #0
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c2:	4619      	mov	r1, r3
 80043c4:	4809      	ldr	r0, [pc, #36]	; (80043ec <MX_GPIO_Init+0x270>)
 80043c6:	f003 f8c5 	bl	8007554 <HAL_GPIO_Init>

}
 80043ca:	bf00      	nop
 80043cc:	3738      	adds	r7, #56	; 0x38
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40020800 	.word	0x40020800
 80043e0:	40021400 	.word	0x40021400
 80043e4:	40020000 	.word	0x40020000
 80043e8:	40020c00 	.word	0x40020c00
 80043ec:	40021800 	.word	0x40021800
 80043f0:	40020400 	.word	0x40020400

080043f4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <MX_I2C3_Init+0x74>)
 80043fa:	4a1c      	ldr	r2, [pc, #112]	; (800446c <MX_I2C3_Init+0x78>)
 80043fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <MX_I2C3_Init+0x74>)
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <MX_I2C3_Init+0x7c>)
 8004402:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004404:	4b18      	ldr	r3, [pc, #96]	; (8004468 <MX_I2C3_Init+0x74>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800440a:	4b17      	ldr	r3, [pc, #92]	; (8004468 <MX_I2C3_Init+0x74>)
 800440c:	2200      	movs	r2, #0
 800440e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004410:	4b15      	ldr	r3, [pc, #84]	; (8004468 <MX_I2C3_Init+0x74>)
 8004412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004416:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004418:	4b13      	ldr	r3, [pc, #76]	; (8004468 <MX_I2C3_Init+0x74>)
 800441a:	2200      	movs	r2, #0
 800441c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800441e:	4b12      	ldr	r3, [pc, #72]	; (8004468 <MX_I2C3_Init+0x74>)
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004424:	4b10      	ldr	r3, [pc, #64]	; (8004468 <MX_I2C3_Init+0x74>)
 8004426:	2200      	movs	r2, #0
 8004428:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <MX_I2C3_Init+0x74>)
 800442c:	2200      	movs	r2, #0
 800442e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004430:	480d      	ldr	r0, [pc, #52]	; (8004468 <MX_I2C3_Init+0x74>)
 8004432:	f003 fb61 	bl	8007af8 <HAL_I2C_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800443c:	f000 fb06 	bl	8004a4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004440:	2100      	movs	r1, #0
 8004442:	4809      	ldr	r0, [pc, #36]	; (8004468 <MX_I2C3_Init+0x74>)
 8004444:	f004 fb55 	bl	8008af2 <HAL_I2CEx_ConfigAnalogFilter>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800444e:	f000 fafd 	bl	8004a4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004452:	2100      	movs	r1, #0
 8004454:	4804      	ldr	r0, [pc, #16]	; (8004468 <MX_I2C3_Init+0x74>)
 8004456:	f004 fb88 	bl	8008b6a <HAL_I2CEx_ConfigDigitalFilter>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8004460:	f000 faf4 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004464:	bf00      	nop
 8004466:	bd80      	pop	{r7, pc}
 8004468:	2000c2f8 	.word	0x2000c2f8
 800446c:	40005c00 	.word	0x40005c00
 8004470:	000186a0 	.word	0x000186a0

08004474 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a29      	ldr	r2, [pc, #164]	; (8004538 <HAL_I2C_MspInit+0xc4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d14b      	bne.n	800452e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	4b28      	ldr	r3, [pc, #160]	; (800453c <HAL_I2C_MspInit+0xc8>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a27      	ldr	r2, [pc, #156]	; (800453c <HAL_I2C_MspInit+0xc8>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
 80044a6:	4b25      	ldr	r3, [pc, #148]	; (800453c <HAL_I2C_MspInit+0xc8>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <HAL_I2C_MspInit+0xc8>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a20      	ldr	r2, [pc, #128]	; (800453c <HAL_I2C_MspInit+0xc8>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_I2C_MspInit+0xc8>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80044ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044d4:	2312      	movs	r3, #18
 80044d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044d8:	2301      	movs	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044dc:	2300      	movs	r3, #0
 80044de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80044e0:	2304      	movs	r3, #4
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80044e4:	f107 0314 	add.w	r3, r7, #20
 80044e8:	4619      	mov	r1, r3
 80044ea:	4815      	ldr	r0, [pc, #84]	; (8004540 <HAL_I2C_MspInit+0xcc>)
 80044ec:	f003 f832 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80044f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044f6:	2312      	movs	r3, #18
 80044f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fe:	2300      	movs	r3, #0
 8004500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004502:	2304      	movs	r3, #4
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004506:	f107 0314 	add.w	r3, r7, #20
 800450a:	4619      	mov	r1, r3
 800450c:	480d      	ldr	r0, [pc, #52]	; (8004544 <HAL_I2C_MspInit+0xd0>)
 800450e:	f003 f821 	bl	8007554 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_I2C_MspInit+0xc8>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a08      	ldr	r2, [pc, #32]	; (800453c <HAL_I2C_MspInit+0xc8>)
 800451c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_I2C_MspInit+0xc8>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800452e:	bf00      	nop
 8004530:	3728      	adds	r7, #40	; 0x28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40005c00 	.word	0x40005c00
 800453c:	40023800 	.word	0x40023800
 8004540:	40020800 	.word	0x40020800
 8004544:	40020000 	.word	0x40020000

08004548 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <HAL_I2C_MspDeInit+0x3c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d10f      	bne.n	800457a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_I2C_MspDeInit+0x40>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <HAL_I2C_MspDeInit+0x40>)
 8004560:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004564:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8004566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800456a:	4808      	ldr	r0, [pc, #32]	; (800458c <HAL_I2C_MspDeInit+0x44>)
 800456c:	f003 f99e 	bl	80078ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8004570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004574:	4806      	ldr	r0, [pc, #24]	; (8004590 <HAL_I2C_MspDeInit+0x48>)
 8004576:	f003 f999 	bl	80078ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40005c00 	.word	0x40005c00
 8004588:	40023800 	.word	0x40023800
 800458c:	40020800 	.word	0x40020800
 8004590:	40020000 	.word	0x40020000

08004594 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08e      	sub	sp, #56	; 0x38
 8004598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	2234      	movs	r2, #52	; 0x34
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f024 ffcb 	bl	802953c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80045a6:	4b39      	ldr	r3, [pc, #228]	; (800468c <MX_LTDC_Init+0xf8>)
 80045a8:	4a39      	ldr	r2, [pc, #228]	; (8004690 <MX_LTDC_Init+0xfc>)
 80045aa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80045ac:	4b37      	ldr	r3, [pc, #220]	; (800468c <MX_LTDC_Init+0xf8>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80045b2:	4b36      	ldr	r3, [pc, #216]	; (800468c <MX_LTDC_Init+0xf8>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80045b8:	4b34      	ldr	r3, [pc, #208]	; (800468c <MX_LTDC_Init+0xf8>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80045be:	4b33      	ldr	r3, [pc, #204]	; (800468c <MX_LTDC_Init+0xf8>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80045c4:	4b31      	ldr	r3, [pc, #196]	; (800468c <MX_LTDC_Init+0xf8>)
 80045c6:	2209      	movs	r2, #9
 80045c8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80045ca:	4b30      	ldr	r3, [pc, #192]	; (800468c <MX_LTDC_Init+0xf8>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80045d0:	4b2e      	ldr	r3, [pc, #184]	; (800468c <MX_LTDC_Init+0xf8>)
 80045d2:	221d      	movs	r2, #29
 80045d4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80045d6:	4b2d      	ldr	r3, [pc, #180]	; (800468c <MX_LTDC_Init+0xf8>)
 80045d8:	2203      	movs	r2, #3
 80045da:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <MX_LTDC_Init+0xf8>)
 80045de:	f240 120d 	movw	r2, #269	; 0x10d
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80045e4:	4b29      	ldr	r3, [pc, #164]	; (800468c <MX_LTDC_Init+0xf8>)
 80045e6:	f240 1243 	movw	r2, #323	; 0x143
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80045ec:	4b27      	ldr	r3, [pc, #156]	; (800468c <MX_LTDC_Init+0xf8>)
 80045ee:	f240 1217 	movw	r2, #279	; 0x117
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <MX_LTDC_Init+0xf8>)
 80045f6:	f240 1247 	movw	r2, #327	; 0x147
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80045fc:	4b23      	ldr	r3, [pc, #140]	; (800468c <MX_LTDC_Init+0xf8>)
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8004604:	4b21      	ldr	r3, [pc, #132]	; (800468c <MX_LTDC_Init+0xf8>)
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800460c:	4b1f      	ldr	r3, [pc, #124]	; (800468c <MX_LTDC_Init+0xf8>)
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004614:	481d      	ldr	r0, [pc, #116]	; (800468c <MX_LTDC_Init+0xf8>)
 8004616:	f004 fae7 	bl	8008be8 <HAL_LTDC_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8004620:	f000 fa14 	bl	8004a4c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8004628:	23f0      	movs	r3, #240	; 0xf0
 800462a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8004630:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004634:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8004636:	2302      	movs	r3, #2
 8004638:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800463a:	23ff      	movs	r3, #255	; 0xff
 800463c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8004642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004646:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004648:	2305      	movs	r3, #5
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800464c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8004652:	23f0      	movs	r3, #240	; 0xf0
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8004656:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	2200      	movs	r2, #0
 8004672:	4619      	mov	r1, r3
 8004674:	4805      	ldr	r0, [pc, #20]	; (800468c <MX_LTDC_Init+0xf8>)
 8004676:	f004 fc3f 	bl	8008ef8 <HAL_LTDC_ConfigLayer>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8004680:	f000 f9e4 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8004684:	bf00      	nop
 8004686:	3738      	adds	r7, #56	; 0x38
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	2000c34c 	.word	0x2000c34c
 8004690:	40016800 	.word	0x40016800

08004694 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08e      	sub	sp, #56	; 0x38
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a7b      	ldr	r2, [pc, #492]	; (80048a0 <HAL_LTDC_MspInit+0x20c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	f040 80ef 	bne.w	8004896 <HAL_LTDC_MspInit+0x202>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80046b8:	2300      	movs	r3, #0
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	4b79      	ldr	r3, [pc, #484]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	4a78      	ldr	r2, [pc, #480]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 80046c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046c6:	6453      	str	r3, [r2, #68]	; 0x44
 80046c8:	4b76      	ldr	r3, [pc, #472]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 80046ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	4b72      	ldr	r3, [pc, #456]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4a71      	ldr	r2, [pc, #452]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 80046de:	f043 0320 	orr.w	r3, r3, #32
 80046e2:	6313      	str	r3, [r2, #48]	; 0x30
 80046e4:	4b6f      	ldr	r3, [pc, #444]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	4b6b      	ldr	r3, [pc, #428]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	4a6a      	ldr	r2, [pc, #424]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004700:	4b68      	ldr	r3, [pc, #416]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	4b64      	ldr	r3, [pc, #400]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	4a63      	ldr	r2, [pc, #396]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 8004716:	f043 0302 	orr.w	r3, r3, #2
 800471a:	6313      	str	r3, [r2, #48]	; 0x30
 800471c:	4b61      	ldr	r3, [pc, #388]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	4a5c      	ldr	r2, [pc, #368]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 8004732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004736:	6313      	str	r3, [r2, #48]	; 0x30
 8004738:	4b5a      	ldr	r3, [pc, #360]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	4b56      	ldr	r3, [pc, #344]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	4a55      	ldr	r2, [pc, #340]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	6313      	str	r3, [r2, #48]	; 0x30
 8004754:	4b53      	ldr	r3, [pc, #332]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	4b4f      	ldr	r3, [pc, #316]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	4a4e      	ldr	r2, [pc, #312]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 800476a:	f043 0308 	orr.w	r3, r3, #8
 800476e:	6313      	str	r3, [r2, #48]	; 0x30
 8004770:	4b4c      	ldr	r3, [pc, #304]	; (80048a4 <HAL_LTDC_MspInit+0x210>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800477c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004782:	2302      	movs	r3, #2
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	2300      	movs	r3, #0
 8004788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478a:	2300      	movs	r3, #0
 800478c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800478e:	230e      	movs	r3, #14
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004796:	4619      	mov	r1, r3
 8004798:	4843      	ldr	r0, [pc, #268]	; (80048a8 <HAL_LTDC_MspInit+0x214>)
 800479a:	f002 fedb 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800479e:	f641 0358 	movw	r3, #6232	; 0x1858
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a4:	2302      	movs	r3, #2
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ac:	2300      	movs	r3, #0
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047b0:	230e      	movs	r3, #14
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b8:	4619      	mov	r1, r3
 80047ba:	483c      	ldr	r0, [pc, #240]	; (80048ac <HAL_LTDC_MspInit+0x218>)
 80047bc:	f002 feca 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80047c0:	2303      	movs	r3, #3
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c4:	2302      	movs	r3, #2
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047cc:	2300      	movs	r3, #0
 80047ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80047d0:	2309      	movs	r3, #9
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d8:	4619      	mov	r1, r3
 80047da:	4835      	ldr	r0, [pc, #212]	; (80048b0 <HAL_LTDC_MspInit+0x21c>)
 80047dc:	f002 feba 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80047e0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e6:	2302      	movs	r3, #2
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ee:	2300      	movs	r3, #0
 80047f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047f2:	230e      	movs	r3, #14
 80047f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047fa:	4619      	mov	r1, r3
 80047fc:	482c      	ldr	r0, [pc, #176]	; (80048b0 <HAL_LTDC_MspInit+0x21c>)
 80047fe:	f002 fea9 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004802:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004808:	2302      	movs	r3, #2
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004810:	2300      	movs	r3, #0
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004814:	230e      	movs	r3, #14
 8004816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800481c:	4619      	mov	r1, r3
 800481e:	4825      	ldr	r0, [pc, #148]	; (80048b4 <HAL_LTDC_MspInit+0x220>)
 8004820:	f002 fe98 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8004824:	23c0      	movs	r3, #192	; 0xc0
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004828:	2302      	movs	r3, #2
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	2300      	movs	r3, #0
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004830:	2300      	movs	r3, #0
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004834:	230e      	movs	r3, #14
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800483c:	4619      	mov	r1, r3
 800483e:	481e      	ldr	r0, [pc, #120]	; (80048b8 <HAL_LTDC_MspInit+0x224>)
 8004840:	f002 fe88 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin;
 8004844:	2308      	movs	r3, #8
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004848:	2302      	movs	r3, #2
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	2300      	movs	r3, #0
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004850:	2300      	movs	r3, #0
 8004852:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004854:	230e      	movs	r3, #14
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8004858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800485c:	4619      	mov	r1, r3
 800485e:	4817      	ldr	r0, [pc, #92]	; (80048bc <HAL_LTDC_MspInit+0x228>)
 8004860:	f002 fe78 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004864:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486a:	2302      	movs	r3, #2
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004876:	2309      	movs	r3, #9
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800487a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800487e:	4619      	mov	r1, r3
 8004880:	480c      	ldr	r0, [pc, #48]	; (80048b4 <HAL_LTDC_MspInit+0x220>)
 8004882:	f002 fe67 	bl	8007554 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2105      	movs	r1, #5
 800488a:	2058      	movs	r0, #88	; 0x58
 800488c:	f002 fb9e 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004890:	2058      	movs	r0, #88	; 0x58
 8004892:	f002 fbb7 	bl	8007004 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8004896:	bf00      	nop
 8004898:	3738      	adds	r7, #56	; 0x38
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40016800 	.word	0x40016800
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40021400 	.word	0x40021400
 80048ac:	40020000 	.word	0x40020000
 80048b0:	40020400 	.word	0x40020400
 80048b4:	40021800 	.word	0x40021800
 80048b8:	40020800 	.word	0x40020800
 80048bc:	40020c00 	.word	0x40020c00

080048c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 80048c4:	f001 fe88 	bl	80065d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048c8:	f000 f824 	bl	8004914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048cc:	f7ff fc56 	bl	800417c <MX_GPIO_Init>
  MX_CRC_Init();
 80048d0:	f7ff f996 	bl	8003c00 <MX_CRC_Init>
  MX_DMA2D_Init();
 80048d4:	f7ff f9ca 	bl	8003c6c <MX_DMA2D_Init>
  MX_FMC_Init();
 80048d8:	f7ff fa52 	bl	8003d80 <MX_FMC_Init>
  MX_LTDC_Init();
 80048dc:	f7ff fe5a 	bl	8004594 <MX_LTDC_Init>
  MX_SPI5_Init();
 80048e0:	f000 f92c 	bl	8004b3c <MX_SPI5_Init>
  MX_TIM1_Init();
 80048e4:	f000 fb62 	bl	8004fac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80048e8:	f000 fcbe 	bl	8005268 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80048ec:	f7ff fd82 	bl	80043f4 <MX_I2C3_Init>
  MX_UART5_Init();
 80048f0:	f000 fc90 	bl	8005214 <MX_UART5_Init>
  MX_ADC1_Init();
 80048f4:	f7ff f8d0 	bl	8003a98 <MX_ADC1_Init>
  MX_TIM2_Init();
 80048f8:	f000 fba8 	bl	800504c <MX_TIM2_Init>
  MX_TouchGFX_Init();
 80048fc:	f00d fb52 	bl	8011fa4 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8004900:	f7ff fa0e 	bl	8003d20 <DWT_Delay_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8004904:	f009 fa3a 	bl	800dd7c <osKernelInitialize>
  MX_FREERTOS_Init();
 8004908:	f7ff fb8c 	bl	8004024 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800490c:	f009 fa5a 	bl	800ddc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004910:	e7fe      	b.n	8004910 <main+0x50>
	...

08004914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b0a0      	sub	sp, #128	; 0x80
 8004918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800491a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800491e:	2230      	movs	r2, #48	; 0x30
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f024 fe0a 	bl	802953c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004928:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004938:	f107 030c 	add.w	r3, r7, #12
 800493c:	2230      	movs	r2, #48	; 0x30
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f024 fdfb 	bl	802953c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	4b35      	ldr	r3, [pc, #212]	; (8004a20 <SystemClock_Config+0x10c>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	4a34      	ldr	r2, [pc, #208]	; (8004a20 <SystemClock_Config+0x10c>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	6413      	str	r3, [r2, #64]	; 0x40
 8004956:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <SystemClock_Config+0x10c>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]
 8004966:	4b2f      	ldr	r3, [pc, #188]	; (8004a24 <SystemClock_Config+0x110>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800496e:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <SystemClock_Config+0x110>)
 8004970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <SystemClock_Config+0x110>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004982:	2301      	movs	r3, #1
 8004984:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800498a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800498c:	2302      	movs	r3, #2
 800498e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004990:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004994:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004996:	2304      	movs	r3, #4
 8004998:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 90;
 800499a:	235a      	movs	r3, #90	; 0x5a
 800499c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800499e:	2302      	movs	r3, #2
 80049a0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80049a2:	2303      	movs	r3, #3
 80049a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80049aa:	4618      	mov	r0, r3
 80049ac:	f004 fd02 	bl	80093b4 <HAL_RCC_OscConfig>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80049b6:	f000 f849 	bl	8004a4c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80049ba:	f004 fcab 	bl	8009314 <HAL_PWREx_EnableOverDrive>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80049c4:	f000 f842 	bl	8004a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049c8:	230f      	movs	r3, #15
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049cc:	2302      	movs	r3, #2
 80049ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049d0:	2300      	movs	r3, #0
 80049d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80049d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049da:	2300      	movs	r3, #0
 80049dc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80049de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049e2:	2102      	movs	r1, #2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f004 ff5d 	bl	80098a4 <HAL_RCC_ClockConfig>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80049f0:	f000 f82c 	bl	8004a4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80049f4:	2308      	movs	r3, #8
 80049f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 56;
 80049f8:	2338      	movs	r3, #56	; 0x38
 80049fa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80049fc:	2307      	movs	r3, #7
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004a00:	2300      	movs	r3, #0
 8004a02:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a04:	f107 030c 	add.w	r3, r7, #12
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f005 f979 	bl	8009d00 <HAL_RCCEx_PeriphCLKConfig>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8004a14:	f000 f81a 	bl	8004a4c <Error_Handler>
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3780      	adds	r7, #128	; 0x80
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40007000 	.word	0x40007000

08004a28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004a3a:	f001 fdef 	bl	800661c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40001000 	.word	0x40001000

08004a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a50:	b672      	cpsid	i
}
 8004a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a54:	e7fe      	b.n	8004a54 <Error_Handler+0x8>
	...

08004a58 <socket>:
//static uint8_t tcpFd = 1;

extern Wifi_t Wifi;

uint8_t socket(int type, NETWORK_IFACE iface, socketInfo *info)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	460b      	mov	r3, r1
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	72fb      	strb	r3, [r7, #11]
	uint8_t sockfd;

	/* Check TCP Or UDP */
	if (type == SOCK_STREAM)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d107      	bne.n	8004a7c <socket+0x24>
	{
		sockfd = Fd++;
 8004a6c:	4b13      	ldr	r3, [pc, #76]	; (8004abc <socket+0x64>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	b2d1      	uxtb	r1, r2
 8004a74:	4a11      	ldr	r2, [pc, #68]	; (8004abc <socket+0x64>)
 8004a76:	7011      	strb	r1, [r2, #0]
 8004a78:	75fb      	strb	r3, [r7, #23]
 8004a7a:	e00c      	b.n	8004a96 <socket+0x3e>
	}
	else if (type == SOCK_DGRAM)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d107      	bne.n	8004a92 <socket+0x3a>
	{
		sockfd = Fd++;
 8004a82:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <socket+0x64>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	b2d1      	uxtb	r1, r2
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <socket+0x64>)
 8004a8c:	7011      	strb	r1, [r2, #0]
 8004a8e:	75fb      	strb	r3, [r7, #23]
 8004a90:	e001      	b.n	8004a96 <socket+0x3e>
	}
	else
	{
		return FAIL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e00c      	b.n	8004ab0 <socket+0x58>
	if (sockfd >= 256)
	{
		return FAIL;
	}

	switch (iface)
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d108      	bne.n	8004aae <socket+0x56>
	{
		case WIFI_IFACE:
			info->iface = WIFI_IFACE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
			info->socket = sockfd;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	7dfa      	ldrb	r2, [r7, #23]
 8004aa6:	705a      	strb	r2, [r3, #1]
			break;
 8004aa8:	bf00      	nop

		default:
			return FAIL;
	}
	return SUCCESS;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <socket+0x58>
			return FAIL;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000012 	.word	0x20000012

08004ac0 <connect>:

bool connect(socketInfo *info, const char *ip, const char *port)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
	const int timeout = 5000;
 8004acc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ad0:	617b      	str	r3, [r7, #20]

	switch (info->iface)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <connect+0x2e>
	{
		case WIFI_IFACE:
			return WifiTcpIpTcpConnection(info->socket, ip, port, timeout);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	7858      	ldrb	r0, [r3, #1]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	f7fe fe85 	bl	80037f4 <WifiTcpIpTcpConnection>
 8004aea:	4603      	mov	r3, r0
 8004aec:	e001      	b.n	8004af2 <connect+0x32>

		default :
			break;
 8004aee:	bf00      	nop
	}
	return false;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <send>:

bool send(socketInfo *info, uint8_t *msg, uint16_t len)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80fb      	strh	r3, [r7, #6]

	if (info->socket == 0)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <send+0x1a>
	{
		return false;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e00e      	b.n	8004b32 <send+0x38>
	}
	else
	{
		switch (info->iface)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d108      	bne.n	8004b2e <send+0x34>
		{
			case WIFI_IFACE:
				return WifiSend(info->socket, len, msg);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	88f9      	ldrh	r1, [r7, #6]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fe ff03 	bl	8003930 <WifiSend>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	e001      	b.n	8004b32 <send+0x38>

			default :
				break;
 8004b2e:	bf00      	nop
		}
	}
	return false;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b42:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <MX_SPI5_Init+0x68>)
 8004b44:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b4c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b70:	2218      	movs	r2, #24
 8004b72:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b74:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b88:	220a      	movs	r2, #10
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004b8c:	4804      	ldr	r0, [pc, #16]	; (8004ba0 <MX_SPI5_Init+0x64>)
 8004b8e:	f005 faf4 	bl	800a17a <HAL_SPI_Init>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004b98:	f7ff ff58 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004b9c:	bf00      	nop
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	2000c3f4 	.word	0x2000c3f4
 8004ba4:	40015000 	.word	0x40015000

08004ba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb0:	f107 0314 	add.w	r3, r7, #20
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a19      	ldr	r2, [pc, #100]	; (8004c2c <HAL_SPI_MspInit+0x84>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d12c      	bne.n	8004c24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <HAL_SPI_MspInit+0x88>)
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <HAL_SPI_MspInit+0x88>)
 8004bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <HAL_SPI_MspInit+0x88>)
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_SPI_MspInit+0x88>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <HAL_SPI_MspInit+0x88>)
 8004bf0:	f043 0320 	orr.w	r3, r3, #32
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_SPI_MspInit+0x88>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004c02:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c10:	2300      	movs	r3, #0
 8004c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004c14:	2305      	movs	r3, #5
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4805      	ldr	r0, [pc, #20]	; (8004c34 <HAL_SPI_MspInit+0x8c>)
 8004c20:	f002 fc98 	bl	8007554 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004c24:	bf00      	nop
 8004c26:	3728      	adds	r7, #40	; 0x28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40015000 	.word	0x40015000
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40021400 	.word	0x40021400

08004c38 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <HAL_SPI_MspDeInit+0x30>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10a      	bne.n	8004c60 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <HAL_SPI_MspDeInit+0x34>)
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	4a07      	ldr	r2, [pc, #28]	; (8004c6c <HAL_SPI_MspDeInit+0x34>)
 8004c50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c54:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004c56:	f44f 7160 	mov.w	r1, #896	; 0x380
 8004c5a:	4805      	ldr	r0, [pc, #20]	; (8004c70 <HAL_SPI_MspDeInit+0x38>)
 8004c5c:	f002 fe26 	bl	80078ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40015000 	.word	0x40015000
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40021400 	.word	0x40021400

08004c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	607b      	str	r3, [r7, #4]
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <HAL_MspInit+0x54>)
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	4a11      	ldr	r2, [pc, #68]	; (8004cc8 <HAL_MspInit+0x54>)
 8004c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c88:	6453      	str	r3, [r2, #68]	; 0x44
 8004c8a:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <HAL_MspInit+0x54>)
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_MspInit+0x54>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <HAL_MspInit+0x54>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca6:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <HAL_MspInit+0x54>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	210f      	movs	r1, #15
 8004cb6:	f06f 0001 	mvn.w	r0, #1
 8004cba:	f002 f987 	bl	8006fcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800

08004ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08c      	sub	sp, #48	; 0x30
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	2036      	movs	r0, #54	; 0x36
 8004ce2:	f002 f973 	bl	8006fcc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ce6:	2036      	movs	r0, #54	; 0x36
 8004ce8:	f002 f98c 	bl	8007004 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <HAL_InitTick+0xa4>)
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_InitTick+0xa4>)
 8004cf6:	f043 0310 	orr.w	r3, r3, #16
 8004cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8004cfc:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <HAL_InitTick+0xa4>)
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d08:	f107 0210 	add.w	r2, r7, #16
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f004 ffc2 	bl	8009c9c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004d18:	f004 ff98 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <HAL_InitTick+0xa8>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0c9b      	lsrs	r3, r3, #18
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004d30:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <HAL_InitTick+0xac>)
 8004d32:	4a12      	ldr	r2, [pc, #72]	; (8004d7c <HAL_InitTick+0xb0>)
 8004d34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <HAL_InitTick+0xac>)
 8004d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <HAL_InitTick+0xac>)
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004d44:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <HAL_InitTick+0xac>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_InitTick+0xac>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004d50:	4809      	ldr	r0, [pc, #36]	; (8004d78 <HAL_InitTick+0xac>)
 8004d52:	f005 fff1 	bl	800ad38 <HAL_TIM_Base_Init>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004d5c:	4806      	ldr	r0, [pc, #24]	; (8004d78 <HAL_InitTick+0xac>)
 8004d5e:	f006 f83b 	bl	800add8 <HAL_TIM_Base_Start_IT>
 8004d62:	4603      	mov	r3, r0
 8004d64:	e000      	b.n	8004d68 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3730      	adds	r7, #48	; 0x30
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40023800 	.word	0x40023800
 8004d74:	431bde83 	.word	0x431bde83
 8004d78:	2000c44c 	.word	0x2000c44c
 8004d7c:	40001000 	.word	0x40001000

08004d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d84:	e7fe      	b.n	8004d84 <NMI_Handler+0x4>

08004d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d86:	b480      	push	{r7}
 8004d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d8a:	e7fe      	b.n	8004d8a <HardFault_Handler+0x4>

08004d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d90:	e7fe      	b.n	8004d90 <MemManage_Handler+0x4>

08004d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d92:	b480      	push	{r7}
 8004d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d96:	e7fe      	b.n	8004d96 <BusFault_Handler+0x4>

08004d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d9c:	e7fe      	b.n	8004d9c <UsageFault_Handler+0x4>

08004d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004da2:	bf00      	nop
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004db0:	4802      	ldr	r0, [pc, #8]	; (8004dbc <UART5_IRQHandler+0x10>)
 8004db2:	f007 f97d 	bl	800c0b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004db6:	bf00      	nop
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	2000c568 	.word	0x2000c568

08004dc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004dc4:	4802      	ldr	r0, [pc, #8]	; (8004dd0 <TIM6_DAC_IRQHandler+0x10>)
 8004dc6:	f006 fa09 	bl	800b1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	2000c44c 	.word	0x2000c44c

08004dd4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004dd8:	4802      	ldr	r0, [pc, #8]	; (8004de4 <LTDC_IRQHandler+0x10>)
 8004dda:	f003 ffd5 	bl	8008d88 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000c34c 	.word	0x2000c34c

08004de8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004dec:	4802      	ldr	r0, [pc, #8]	; (8004df8 <DMA2D_IRQHandler+0x10>)
 8004dee:	f002 fa0e 	bl	800720e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	2000c25c 	.word	0x2000c25c

08004dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
	return 1;
 8004e00:	2301      	movs	r3, #1
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <_kill>:

int _kill(int pid, int sig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e16:	f024 fb1d 	bl	8029454 <__errno>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2216      	movs	r2, #22
 8004e1e:	601a      	str	r2, [r3, #0]
	return -1;
 8004e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <_exit>:

void _exit (int status)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004e34:	f04f 31ff 	mov.w	r1, #4294967295
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ffe7 	bl	8004e0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004e3e:	e7fe      	b.n	8004e3e <_exit+0x12>

08004e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e00a      	b.n	8004e68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e52:	f3af 8000 	nop.w
 8004e56:	4601      	mov	r1, r0
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	60ba      	str	r2, [r7, #8]
 8004e5e:	b2ca      	uxtb	r2, r1
 8004e60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3301      	adds	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	dbf0      	blt.n	8004e52 <_read+0x12>
	}

return len;
 8004e70:	687b      	ldr	r3, [r7, #4]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e009      	b.n	8004ea0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	60ba      	str	r2, [r7, #8]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	dbf1      	blt.n	8004e8c <_write+0x12>
	}
	return len;
 8004ea8:	687b      	ldr	r3, [r7, #4]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <_close>:

int _close(int file)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8004eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eda:	605a      	str	r2, [r3, #4]
	return 0;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <_isatty>:

int _isatty(int file)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8004ef2:	2301      	movs	r3, #1
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f24:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <_sbrk+0x5c>)
 8004f26:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <_sbrk+0x60>)
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f30:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <_sbrk+0x64>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <_sbrk+0x64>)
 8004f3a:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <_sbrk+0x68>)
 8004f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <_sbrk+0x64>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d207      	bcs.n	8004f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f4c:	f024 fa82 	bl	8029454 <__errno>
 8004f50:	4603      	mov	r3, r0
 8004f52:	220c      	movs	r2, #12
 8004f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5a:	e009      	b.n	8004f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <_sbrk+0x64>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <_sbrk+0x64>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4413      	add	r3, r2
 8004f6a:	4a05      	ldr	r2, [pc, #20]	; (8004f80 <_sbrk+0x64>)
 8004f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20030000 	.word	0x20030000
 8004f7c:	00000400 	.word	0x00000400
 8004f80:	20000308 	.word	0x20000308
 8004f84:	2000c658 	.word	0x2000c658

08004f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f8c:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <SystemInit+0x20>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	4a05      	ldr	r2, [pc, #20]	; (8004fa8 <SystemInit+0x20>)
 8004f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f9c:	bf00      	nop
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
 8004fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <MX_TIM1_Init+0x98>)
 8004fca:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <MX_TIM1_Init+0x9c>)
 8004fcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004fce:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <MX_TIM1_Init+0x98>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <MX_TIM1_Init+0x98>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004fda:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <MX_TIM1_Init+0x98>)
 8004fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fe2:	4b18      	ldr	r3, [pc, #96]	; (8005044 <MX_TIM1_Init+0x98>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004fe8:	4b16      	ldr	r3, [pc, #88]	; (8005044 <MX_TIM1_Init+0x98>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <MX_TIM1_Init+0x98>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004ff4:	4813      	ldr	r0, [pc, #76]	; (8005044 <MX_TIM1_Init+0x98>)
 8004ff6:	f005 fe9f 	bl	800ad38 <HAL_TIM_Base_Init>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005000:	f7ff fd24 	bl	8004a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800500a:	f107 0308 	add.w	r3, r7, #8
 800500e:	4619      	mov	r1, r3
 8005010:	480c      	ldr	r0, [pc, #48]	; (8005044 <MX_TIM1_Init+0x98>)
 8005012:	f006 faad 	bl	800b570 <HAL_TIM_ConfigClockSource>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800501c:	f7ff fd16 	bl	8004a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005020:	2300      	movs	r3, #0
 8005022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005024:	2300      	movs	r3, #0
 8005026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005028:	463b      	mov	r3, r7
 800502a:	4619      	mov	r1, r3
 800502c:	4805      	ldr	r0, [pc, #20]	; (8005044 <MX_TIM1_Init+0x98>)
 800502e:	f006 fe9f 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005038:	f7ff fd08 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800503c:	bf00      	nop
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	2000c4dc 	.word	0x2000c4dc
 8005048:	40010000 	.word	0x40010000

0800504c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08e      	sub	sp, #56	; 0x38
 8005050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005052:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	609a      	str	r2, [r3, #8]
 800505e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005060:	f107 0320 	add.w	r3, r7, #32
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	611a      	str	r2, [r3, #16]
 8005078:	615a      	str	r2, [r3, #20]
 800507a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800507c:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <MX_TIM2_Init+0xe8>)
 800507e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8005084:	4b2b      	ldr	r3, [pc, #172]	; (8005134 <MX_TIM2_Init+0xe8>)
 8005086:	f240 3283 	movw	r2, #899	; 0x383
 800508a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800508c:	4b29      	ldr	r3, [pc, #164]	; (8005134 <MX_TIM2_Init+0xe8>)
 800508e:	2210      	movs	r2, #16
 8005090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005092:	4b28      	ldr	r3, [pc, #160]	; (8005134 <MX_TIM2_Init+0xe8>)
 8005094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005098:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800509a:	4b26      	ldr	r3, [pc, #152]	; (8005134 <MX_TIM2_Init+0xe8>)
 800509c:	2200      	movs	r2, #0
 800509e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <MX_TIM2_Init+0xe8>)
 80050a2:	2280      	movs	r2, #128	; 0x80
 80050a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80050a6:	4823      	ldr	r0, [pc, #140]	; (8005134 <MX_TIM2_Init+0xe8>)
 80050a8:	f005 fe46 	bl	800ad38 <HAL_TIM_Base_Init>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80050b2:	f7ff fccb 	bl	8004a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80050bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050c0:	4619      	mov	r1, r3
 80050c2:	481c      	ldr	r0, [pc, #112]	; (8005134 <MX_TIM2_Init+0xe8>)
 80050c4:	f006 fa54 	bl	800b570 <HAL_TIM_ConfigClockSource>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80050ce:	f7ff fcbd 	bl	8004a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80050d2:	4818      	ldr	r0, [pc, #96]	; (8005134 <MX_TIM2_Init+0xe8>)
 80050d4:	f005 fef0 	bl	800aeb8 <HAL_TIM_PWM_Init>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80050de:	f7ff fcb5 	bl	8004a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80050ea:	f107 0320 	add.w	r3, r7, #32
 80050ee:	4619      	mov	r1, r3
 80050f0:	4810      	ldr	r0, [pc, #64]	; (8005134 <MX_TIM2_Init+0xe8>)
 80050f2:	f006 fe3d 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80050fc:	f7ff fca6 	bl	8004a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005100:	2360      	movs	r3, #96	; 0x60
 8005102:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800510c:	2304      	movs	r3, #4
 800510e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005110:	1d3b      	adds	r3, r7, #4
 8005112:	2200      	movs	r2, #0
 8005114:	4619      	mov	r1, r3
 8005116:	4807      	ldr	r0, [pc, #28]	; (8005134 <MX_TIM2_Init+0xe8>)
 8005118:	f006 f968 	bl	800b3ec <HAL_TIM_PWM_ConfigChannel>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005122:	f7ff fc93 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005126:	4803      	ldr	r0, [pc, #12]	; (8005134 <MX_TIM2_Init+0xe8>)
 8005128:	f000 f83c 	bl	80051a4 <HAL_TIM_MspPostInit>

}
 800512c:	bf00      	nop
 800512e:	3738      	adds	r7, #56	; 0x38
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	2000c494 	.word	0x2000c494

08005138 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a15      	ldr	r2, [pc, #84]	; (800519c <HAL_TIM_Base_MspInit+0x64>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d10e      	bne.n	8005168 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <HAL_TIM_Base_MspInit+0x68>)
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <HAL_TIM_Base_MspInit+0x68>)
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	6453      	str	r3, [r2, #68]	; 0x44
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <HAL_TIM_Base_MspInit+0x68>)
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005166:	e012      	b.n	800518e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005170:	d10d      	bne.n	800518e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <HAL_TIM_Base_MspInit+0x68>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <HAL_TIM_Base_MspInit+0x68>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	6413      	str	r3, [r2, #64]	; 0x40
 8005182:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <HAL_TIM_Base_MspInit+0x68>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]
}
 800518e:	bf00      	nop
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40010000 	.word	0x40010000
 80051a0:	40023800 	.word	0x40023800

080051a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ac:	f107 030c 	add.w	r3, r7, #12
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c4:	d11d      	bne.n	8005202 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	4b10      	ldr	r3, [pc, #64]	; (800520c <HAL_TIM_MspPostInit+0x68>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	4a0f      	ldr	r2, [pc, #60]	; (800520c <HAL_TIM_MspPostInit+0x68>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	6313      	str	r3, [r2, #48]	; 0x30
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <HAL_TIM_MspPostInit+0x68>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80051e2:	2301      	movs	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e6:	2302      	movs	r3, #2
 80051e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80051f2:	2301      	movs	r3, #1
 80051f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f6:	f107 030c 	add.w	r3, r7, #12
 80051fa:	4619      	mov	r1, r3
 80051fc:	4804      	ldr	r0, [pc, #16]	; (8005210 <HAL_TIM_MspPostInit+0x6c>)
 80051fe:	f002 f9a9 	bl	8007554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005202:	bf00      	nop
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800
 8005210:	40020000 	.word	0x40020000

08005214 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <MX_UART5_Init+0x4c>)
 800521a:	4a12      	ldr	r2, [pc, #72]	; (8005264 <MX_UART5_Init+0x50>)
 800521c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <MX_UART5_Init+0x4c>)
 8005220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005224:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005226:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <MX_UART5_Init+0x4c>)
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <MX_UART5_Init+0x4c>)
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <MX_UART5_Init+0x4c>)
 8005234:	2200      	movs	r2, #0
 8005236:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <MX_UART5_Init+0x4c>)
 800523a:	220c      	movs	r2, #12
 800523c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <MX_UART5_Init+0x4c>)
 8005240:	2200      	movs	r2, #0
 8005242:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <MX_UART5_Init+0x4c>)
 8005246:	2200      	movs	r2, #0
 8005248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <MX_UART5_Init+0x4c>)
 800524c:	f006 fe20 	bl	800be90 <HAL_UART_Init>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005256:	f7ff fbf9 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	2000c568 	.word	0x2000c568
 8005264:	40005000 	.word	0x40005000

08005268 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800526c:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <MX_USART1_UART_Init+0x4c>)
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <MX_USART1_UART_Init+0x50>)
 8005270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <MX_USART1_UART_Init+0x4c>)
 8005274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800527a:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <MX_USART1_UART_Init+0x4c>)
 800527c:	2200      	movs	r2, #0
 800527e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <MX_USART1_UART_Init+0x4c>)
 8005282:	2200      	movs	r2, #0
 8005284:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <MX_USART1_UART_Init+0x4c>)
 8005288:	2200      	movs	r2, #0
 800528a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <MX_USART1_UART_Init+0x4c>)
 800528e:	220c      	movs	r2, #12
 8005290:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005292:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <MX_USART1_UART_Init+0x4c>)
 8005294:	2200      	movs	r2, #0
 8005296:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005298:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <MX_USART1_UART_Init+0x4c>)
 800529a:	2200      	movs	r2, #0
 800529c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800529e:	4805      	ldr	r0, [pc, #20]	; (80052b4 <MX_USART1_UART_Init+0x4c>)
 80052a0:	f006 fdf6 	bl	800be90 <HAL_UART_Init>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80052aa:	f7ff fbcf 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80052ae:	bf00      	nop
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	2000c524 	.word	0x2000c524
 80052b8:	40011000 	.word	0x40011000

080052bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08c      	sub	sp, #48	; 0x30
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c4:	f107 031c 	add.w	r3, r7, #28
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	605a      	str	r2, [r3, #4]
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	60da      	str	r2, [r3, #12]
 80052d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a46      	ldr	r2, [pc, #280]	; (80053f4 <HAL_UART_MspInit+0x138>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d153      	bne.n	8005386 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	4b45      	ldr	r3, [pc, #276]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	4a44      	ldr	r2, [pc, #272]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 80052e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
 80052ee:	4b42      	ldr	r3, [pc, #264]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	4b3e      	ldr	r3, [pc, #248]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	4a3d      	ldr	r2, [pc, #244]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 8005304:	f043 0304 	orr.w	r3, r3, #4
 8005308:	6313      	str	r3, [r2, #48]	; 0x30
 800530a:	4b3b      	ldr	r3, [pc, #236]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	4b37      	ldr	r3, [pc, #220]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	4a36      	ldr	r2, [pc, #216]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 8005320:	f043 0308 	orr.w	r3, r3, #8
 8005324:	6313      	str	r3, [r2, #48]	; 0x30
 8005326:	4b34      	ldr	r3, [pc, #208]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005338:	2302      	movs	r3, #2
 800533a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800533c:	2301      	movs	r3, #1
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005340:	2303      	movs	r3, #3
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005344:	2308      	movs	r3, #8
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005348:	f107 031c 	add.w	r3, r7, #28
 800534c:	4619      	mov	r1, r3
 800534e:	482b      	ldr	r0, [pc, #172]	; (80053fc <HAL_UART_MspInit+0x140>)
 8005350:	f002 f900 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005354:	2304      	movs	r3, #4
 8005356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005358:	2302      	movs	r3, #2
 800535a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800535c:	2301      	movs	r3, #1
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005360:	2303      	movs	r3, #3
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005364:	2308      	movs	r3, #8
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005368:	f107 031c 	add.w	r3, r7, #28
 800536c:	4619      	mov	r1, r3
 800536e:	4824      	ldr	r0, [pc, #144]	; (8005400 <HAL_UART_MspInit+0x144>)
 8005370:	f002 f8f0 	bl	8007554 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8005374:	2200      	movs	r2, #0
 8005376:	2105      	movs	r1, #5
 8005378:	2035      	movs	r0, #53	; 0x35
 800537a:	f001 fe27 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800537e:	2035      	movs	r0, #53	; 0x35
 8005380:	f001 fe40 	bl	8007004 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005384:	e031      	b.n	80053ea <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_UART_MspInit+0x148>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d12c      	bne.n	80053ea <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 800539a:	f043 0310 	orr.w	r3, r3, #16
 800539e:	6453      	str	r3, [r2, #68]	; 0x44
 80053a0:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 80053a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	4a10      	ldr	r2, [pc, #64]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6313      	str	r3, [r2, #48]	; 0x30
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <HAL_UART_MspInit+0x13c>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80053c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ce:	2302      	movs	r3, #2
 80053d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d6:	2303      	movs	r3, #3
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053da:	2307      	movs	r3, #7
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053de:	f107 031c 	add.w	r3, r7, #28
 80053e2:	4619      	mov	r1, r3
 80053e4:	4808      	ldr	r0, [pc, #32]	; (8005408 <HAL_UART_MspInit+0x14c>)
 80053e6:	f002 f8b5 	bl	8007554 <HAL_GPIO_Init>
}
 80053ea:	bf00      	nop
 80053ec:	3730      	adds	r7, #48	; 0x30
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40005000 	.word	0x40005000
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40020800 	.word	0x40020800
 8005400:	40020c00 	.word	0x40020c00
 8005404:	40011000 	.word	0x40011000
 8005408:	40020000 	.word	0x40020000

0800540c <_debugPrint>:
#include "util.h"

char debugBuff[MAX_DEBUG_BUFF] = {0,};

void _debugPrint(char *debugMsg, char *file, const char *func, int line)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
	int n;

	n = snprintf(debugBuff, MAX_DEBUG_BUFF,
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a12      	ldr	r2, [pc, #72]	; (8005468 <_debugPrint+0x5c>)
 800541e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005422:	4812      	ldr	r0, [pc, #72]	; (800546c <_debugPrint+0x60>)
 8005424:	f024 ff5c 	bl	802a2e0 <sniprintf>
 8005428:	6178      	str	r0, [r7, #20]
				//"File : %s \r\nFunction : %s \r\nLine : %d \r\nDebug : %s\r\n\r\n", file, func, line, debugMsg);
				"Debug : %s\r\n\r\n", debugMsg);
	if ( n < 0 || n >= MAX_DEBUG_BUFF )
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	db03      	blt.n	8005438 <_debugPrint+0x2c>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005436:	db06      	blt.n	8005446 <_debugPrint+0x3a>

	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)"debugPrint Error!!!\r\n", strlen("debugPrint Error!!!r\n"), 100);
 8005438:	2364      	movs	r3, #100	; 0x64
 800543a:	2215      	movs	r2, #21
 800543c:	490c      	ldr	r1, [pc, #48]	; (8005470 <_debugPrint+0x64>)
 800543e:	480d      	ldr	r0, [pc, #52]	; (8005474 <_debugPrint+0x68>)
 8005440:	f006 fd73 	bl	800bf2a <HAL_UART_Transmit>
 8005444:	e006      	b.n	8005454 <_debugPrint+0x48>
	}
	else
	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)debugBuff, n, 100);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	b29a      	uxth	r2, r3
 800544a:	2364      	movs	r3, #100	; 0x64
 800544c:	4907      	ldr	r1, [pc, #28]	; (800546c <_debugPrint+0x60>)
 800544e:	4809      	ldr	r0, [pc, #36]	; (8005474 <_debugPrint+0x68>)
 8005450:	f006 fd6b 	bl	800bf2a <HAL_UART_Transmit>
	}
	memset(debugBuff, 0x0, MAX_DEBUG_BUFF);
 8005454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005458:	2100      	movs	r1, #0
 800545a:	4804      	ldr	r0, [pc, #16]	; (800546c <_debugPrint+0x60>)
 800545c:	f024 f86e 	bl	802953c <memset>
}
 8005460:	bf00      	nop
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	0802d504 	.word	0x0802d504
 800546c:	2000030c 	.word	0x2000030c
 8005470:	0802d514 	.word	0x0802d514
 8005474:	2000c524 	.word	0x2000c524

08005478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800547c:	480d      	ldr	r0, [pc, #52]	; (80054b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800547e:	490e      	ldr	r1, [pc, #56]	; (80054b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005480:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005484:	e002      	b.n	800548c <LoopCopyDataInit>

08005486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800548a:	3304      	adds	r3, #4

0800548c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800548c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800548e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005490:	d3f9      	bcc.n	8005486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005492:	4a0b      	ldr	r2, [pc, #44]	; (80054c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005494:	4c0b      	ldr	r4, [pc, #44]	; (80054c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005498:	e001      	b.n	800549e <LoopFillZerobss>

0800549a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800549a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800549c:	3204      	adds	r2, #4

0800549e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800549e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054a0:	d3fb      	bcc.n	800549a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80054a2:	f7ff fd71 	bl	8004f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054a6:	f023 ffed 	bl	8029484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054aa:	f7ff fa09 	bl	80048c0 <main>
  bx  lr    
 80054ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80054b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80054b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054b8:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 80054bc:	0806a594 	.word	0x0806a594
  ldr r2, =_sbss
 80054c0:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 80054c4:	2000c654 	.word	0x2000c654

080054c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054c8:	e7fe      	b.n	80054c8 <ADC_IRQHandler>

080054ca <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80054ce:	f000 fe49 	bl	8006164 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80054d2:	20ca      	movs	r0, #202	; 0xca
 80054d4:	f000 f95d 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80054d8:	20c3      	movs	r0, #195	; 0xc3
 80054da:	f000 f967 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80054de:	2008      	movs	r0, #8
 80054e0:	f000 f964 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80054e4:	2050      	movs	r0, #80	; 0x50
 80054e6:	f000 f961 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80054ea:	20cf      	movs	r0, #207	; 0xcf
 80054ec:	f000 f951 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80054f0:	2000      	movs	r0, #0
 80054f2:	f000 f95b 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80054f6:	20c1      	movs	r0, #193	; 0xc1
 80054f8:	f000 f958 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80054fc:	2030      	movs	r0, #48	; 0x30
 80054fe:	f000 f955 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8005502:	20ed      	movs	r0, #237	; 0xed
 8005504:	f000 f945 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8005508:	2064      	movs	r0, #100	; 0x64
 800550a:	f000 f94f 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800550e:	2003      	movs	r0, #3
 8005510:	f000 f94c 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8005514:	2012      	movs	r0, #18
 8005516:	f000 f949 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800551a:	2081      	movs	r0, #129	; 0x81
 800551c:	f000 f946 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8005520:	20e8      	movs	r0, #232	; 0xe8
 8005522:	f000 f936 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8005526:	2085      	movs	r0, #133	; 0x85
 8005528:	f000 f940 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800552c:	2000      	movs	r0, #0
 800552e:	f000 f93d 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8005532:	2078      	movs	r0, #120	; 0x78
 8005534:	f000 f93a 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8005538:	20cb      	movs	r0, #203	; 0xcb
 800553a:	f000 f92a 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800553e:	2039      	movs	r0, #57	; 0x39
 8005540:	f000 f934 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8005544:	202c      	movs	r0, #44	; 0x2c
 8005546:	f000 f931 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800554a:	2000      	movs	r0, #0
 800554c:	f000 f92e 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8005550:	2034      	movs	r0, #52	; 0x34
 8005552:	f000 f92b 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8005556:	2002      	movs	r0, #2
 8005558:	f000 f928 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800555c:	20f7      	movs	r0, #247	; 0xf7
 800555e:	f000 f918 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8005562:	2020      	movs	r0, #32
 8005564:	f000 f922 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8005568:	20ea      	movs	r0, #234	; 0xea
 800556a:	f000 f912 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800556e:	2000      	movs	r0, #0
 8005570:	f000 f91c 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8005574:	2000      	movs	r0, #0
 8005576:	f000 f919 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800557a:	20b1      	movs	r0, #177	; 0xb1
 800557c:	f000 f909 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8005580:	2000      	movs	r0, #0
 8005582:	f000 f913 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8005586:	201b      	movs	r0, #27
 8005588:	f000 f910 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800558c:	20b6      	movs	r0, #182	; 0xb6
 800558e:	f000 f900 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8005592:	200a      	movs	r0, #10
 8005594:	f000 f90a 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8005598:	20a2      	movs	r0, #162	; 0xa2
 800559a:	f000 f907 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800559e:	20c0      	movs	r0, #192	; 0xc0
 80055a0:	f000 f8f7 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80055a4:	2010      	movs	r0, #16
 80055a6:	f000 f901 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80055aa:	20c1      	movs	r0, #193	; 0xc1
 80055ac:	f000 f8f1 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80055b0:	2010      	movs	r0, #16
 80055b2:	f000 f8fb 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80055b6:	20c5      	movs	r0, #197	; 0xc5
 80055b8:	f000 f8eb 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80055bc:	2045      	movs	r0, #69	; 0x45
 80055be:	f000 f8f5 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80055c2:	2015      	movs	r0, #21
 80055c4:	f000 f8f2 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80055c8:	20c7      	movs	r0, #199	; 0xc7
 80055ca:	f000 f8e2 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80055ce:	2090      	movs	r0, #144	; 0x90
 80055d0:	f000 f8ec 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80055d4:	2036      	movs	r0, #54	; 0x36
 80055d6:	f000 f8dc 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80055da:	20c8      	movs	r0, #200	; 0xc8
 80055dc:	f000 f8e6 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80055e0:	20f2      	movs	r0, #242	; 0xf2
 80055e2:	f000 f8d6 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80055e6:	2000      	movs	r0, #0
 80055e8:	f000 f8e0 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80055ec:	20b0      	movs	r0, #176	; 0xb0
 80055ee:	f000 f8d0 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80055f2:	20c2      	movs	r0, #194	; 0xc2
 80055f4:	f000 f8da 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80055f8:	20b6      	movs	r0, #182	; 0xb6
 80055fa:	f000 f8ca 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80055fe:	200a      	movs	r0, #10
 8005600:	f000 f8d4 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8005604:	20a7      	movs	r0, #167	; 0xa7
 8005606:	f000 f8d1 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800560a:	2027      	movs	r0, #39	; 0x27
 800560c:	f000 f8ce 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8005610:	2004      	movs	r0, #4
 8005612:	f000 f8cb 	bl	80057ac <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8005616:	202a      	movs	r0, #42	; 0x2a
 8005618:	f000 f8bb 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800561c:	2000      	movs	r0, #0
 800561e:	f000 f8c5 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8005622:	2000      	movs	r0, #0
 8005624:	f000 f8c2 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8005628:	2000      	movs	r0, #0
 800562a:	f000 f8bf 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800562e:	20ef      	movs	r0, #239	; 0xef
 8005630:	f000 f8bc 	bl	80057ac <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8005634:	202b      	movs	r0, #43	; 0x2b
 8005636:	f000 f8ac 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800563a:	2000      	movs	r0, #0
 800563c:	f000 f8b6 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8005640:	2000      	movs	r0, #0
 8005642:	f000 f8b3 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8005646:	2001      	movs	r0, #1
 8005648:	f000 f8b0 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800564c:	203f      	movs	r0, #63	; 0x3f
 800564e:	f000 f8ad 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8005652:	20f6      	movs	r0, #246	; 0xf6
 8005654:	f000 f89d 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8005658:	2001      	movs	r0, #1
 800565a:	f000 f8a7 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800565e:	2000      	movs	r0, #0
 8005660:	f000 f8a4 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8005664:	2006      	movs	r0, #6
 8005666:	f000 f8a1 	bl	80057ac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800566a:	202c      	movs	r0, #44	; 0x2c
 800566c:	f000 f891 	bl	8005792 <ili9341_WriteReg>
  LCD_Delay(200);
 8005670:	20c8      	movs	r0, #200	; 0xc8
 8005672:	f000 fe65 	bl	8006340 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8005676:	2026      	movs	r0, #38	; 0x26
 8005678:	f000 f88b 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800567c:	2001      	movs	r0, #1
 800567e:	f000 f895 	bl	80057ac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8005682:	20e0      	movs	r0, #224	; 0xe0
 8005684:	f000 f885 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8005688:	200f      	movs	r0, #15
 800568a:	f000 f88f 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800568e:	2029      	movs	r0, #41	; 0x29
 8005690:	f000 f88c 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8005694:	2024      	movs	r0, #36	; 0x24
 8005696:	f000 f889 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800569a:	200c      	movs	r0, #12
 800569c:	f000 f886 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80056a0:	200e      	movs	r0, #14
 80056a2:	f000 f883 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80056a6:	2009      	movs	r0, #9
 80056a8:	f000 f880 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80056ac:	204e      	movs	r0, #78	; 0x4e
 80056ae:	f000 f87d 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80056b2:	2078      	movs	r0, #120	; 0x78
 80056b4:	f000 f87a 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80056b8:	203c      	movs	r0, #60	; 0x3c
 80056ba:	f000 f877 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80056be:	2009      	movs	r0, #9
 80056c0:	f000 f874 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80056c4:	2013      	movs	r0, #19
 80056c6:	f000 f871 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80056ca:	2005      	movs	r0, #5
 80056cc:	f000 f86e 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80056d0:	2017      	movs	r0, #23
 80056d2:	f000 f86b 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80056d6:	2011      	movs	r0, #17
 80056d8:	f000 f868 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80056dc:	2000      	movs	r0, #0
 80056de:	f000 f865 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80056e2:	20e1      	movs	r0, #225	; 0xe1
 80056e4:	f000 f855 	bl	8005792 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80056e8:	2000      	movs	r0, #0
 80056ea:	f000 f85f 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80056ee:	2016      	movs	r0, #22
 80056f0:	f000 f85c 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80056f4:	201b      	movs	r0, #27
 80056f6:	f000 f859 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80056fa:	2004      	movs	r0, #4
 80056fc:	f000 f856 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8005700:	2011      	movs	r0, #17
 8005702:	f000 f853 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8005706:	2007      	movs	r0, #7
 8005708:	f000 f850 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800570c:	2031      	movs	r0, #49	; 0x31
 800570e:	f000 f84d 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8005712:	2033      	movs	r0, #51	; 0x33
 8005714:	f000 f84a 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8005718:	2042      	movs	r0, #66	; 0x42
 800571a:	f000 f847 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800571e:	2005      	movs	r0, #5
 8005720:	f000 f844 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8005724:	200c      	movs	r0, #12
 8005726:	f000 f841 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800572a:	200a      	movs	r0, #10
 800572c:	f000 f83e 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8005730:	2028      	movs	r0, #40	; 0x28
 8005732:	f000 f83b 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8005736:	202f      	movs	r0, #47	; 0x2f
 8005738:	f000 f838 	bl	80057ac <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800573c:	200f      	movs	r0, #15
 800573e:	f000 f835 	bl	80057ac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8005742:	2011      	movs	r0, #17
 8005744:	f000 f825 	bl	8005792 <ili9341_WriteReg>
  LCD_Delay(200);
 8005748:	20c8      	movs	r0, #200	; 0xc8
 800574a:	f000 fdf9 	bl	8006340 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800574e:	2029      	movs	r0, #41	; 0x29
 8005750:	f000 f81f 	bl	8005792 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8005754:	202c      	movs	r0, #44	; 0x2c
 8005756:	f000 f81c 	bl	8005792 <ili9341_WriteReg>
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}

0800575e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8005762:	f000 fcff 	bl	8006164 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8005766:	2103      	movs	r1, #3
 8005768:	20d3      	movs	r0, #211	; 0xd3
 800576a:	f000 f82c 	bl	80057c6 <ili9341_ReadData>
 800576e:	4603      	mov	r3, r0
 8005770:	b29b      	uxth	r3, r3
}
 8005772:	4618      	mov	r0, r3
 8005774:	bd80      	pop	{r7, pc}

08005776 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800577a:	2029      	movs	r0, #41	; 0x29
 800577c:	f000 f809 	bl	8005792 <ili9341_WriteReg>
}
 8005780:	bf00      	nop
 8005782:	bd80      	pop	{r7, pc}

08005784 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8005788:	2028      	movs	r0, #40	; 0x28
 800578a:	f000 f802 	bl	8005792 <ili9341_WriteReg>
}
 800578e:	bf00      	nop
 8005790:	bd80      	pop	{r7, pc}

08005792 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	4603      	mov	r3, r0
 800579a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fd7a 	bl	8006298 <LCD_IO_WriteReg>
}
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fd4b 	bl	8006254 <LCD_IO_WriteData>
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	4603      	mov	r3, r0
 80057ce:	460a      	mov	r2, r1
 80057d0:	80fb      	strh	r3, [r7, #6]
 80057d2:	4613      	mov	r3, r2
 80057d4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80057d6:	797a      	ldrb	r2, [r7, #5]
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	4611      	mov	r1, r2
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fd7d 	bl	80062dc <LCD_IO_ReadData>
 80057e2:	4603      	mov	r3, r0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80057f0:	23f0      	movs	r3, #240	; 0xf0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8005800:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8005804:	4618      	mov	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fa59 	bl	8005cd4 <stmpe811_GetInstance>
 8005822:	4603      	mov	r3, r0
 8005824:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2bff      	cmp	r3, #255	; 0xff
 800582a:	d112      	bne.n	8005852 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800582c:	2000      	movs	r0, #0
 800582e:	f000 fa51 	bl	8005cd4 <stmpe811_GetInstance>
 8005832:	4603      	mov	r3, r0
 8005834:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d80a      	bhi.n	8005852 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800583c:	7bbb      	ldrb	r3, [r7, #14]
 800583e:	88fa      	ldrh	r2, [r7, #6]
 8005840:	b2d1      	uxtb	r1, r2
 8005842:	4a06      	ldr	r2, [pc, #24]	; (800585c <stmpe811_Init+0x4c>)
 8005844:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8005846:	f000 fd86 	bl	8006356 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f807 	bl	8005860 <stmpe811_Reset>
    }
  }
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000b0c 	.word	0x20000b0c

08005860 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2202      	movs	r2, #2
 8005870:	2103      	movs	r1, #3
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fd7b 	bl	800636e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8005878:	200a      	movs	r0, #10
 800587a:	f000 fdb5 	bl	80063e8 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2200      	movs	r2, #0
 8005884:	2103      	movs	r1, #3
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fd71 	bl	800636e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800588c:	2002      	movs	r0, #2
 800588e:	f000 fdab 	bl	80063e8 <IOE_Delay>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800589a:	b590      	push	{r4, r7, lr}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	4603      	mov	r3, r0
 80058a2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80058a4:	f000 fd57 	bl	8006356 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fd70 	bl	8006394 <IOE_Read>
 80058b4:	4603      	mov	r3, r0
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2101      	movs	r1, #1
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fd67 	bl	8006394 <IOE_Read>
 80058c6:	4603      	mov	r3, r0
 80058c8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80058ca:	4323      	orrs	r3, r4
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	b29b      	uxth	r3, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd90      	pop	{r4, r7, pc}

080058d8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2109      	movs	r1, #9
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fd51 	bl	8006394 <IOE_Read>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	b2db      	uxtb	r3, r3
 8005902:	7bfa      	ldrb	r2, [r7, #15]
 8005904:	2109      	movs	r1, #9
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fd31 	bl	800636e <IOE_Write>
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2109      	movs	r1, #9
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fd33 	bl	8006394 <IOE_Read>
 800592e:	4603      	mov	r3, r0
 8005930:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	2109      	movs	r1, #9
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fd13 	bl	800636e <IOE_Write>
    
}
 8005948:	bf00      	nop
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	460a      	mov	r2, r1
 800595a:	80fb      	strh	r3, [r7, #6]
 800595c:	4613      	mov	r3, r2
 800595e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	210a      	movs	r1, #10
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fd12 	bl	8006394 <IOE_Read>
 8005970:	4603      	mov	r3, r0
 8005972:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	797b      	ldrb	r3, [r7, #5]
 8005978:	4313      	orrs	r3, r2
 800597a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	7bfa      	ldrb	r2, [r7, #15]
 8005982:	210a      	movs	r1, #10
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fcf2 	bl	800636e <IOE_Write>
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	4603      	mov	r3, r0
 800599a:	460a      	mov	r2, r1
 800599c:	80fb      	strh	r3, [r7, #6]
 800599e:	4613      	mov	r3, r2
 80059a0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	210a      	movs	r1, #10
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fcf1 	bl	8006394 <IOE_Read>
 80059b2:	4603      	mov	r3, r0
 80059b4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80059b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80059ba:	43db      	mvns	r3, r3
 80059bc:	b25a      	sxtb	r2, r3
 80059be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c2:	4013      	ands	r3, r2
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80059c8:	88fb      	ldrh	r3, [r7, #6]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	7bfa      	ldrb	r2, [r7, #15]
 80059ce:	210a      	movs	r1, #10
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fccc 	bl	800636e <IOE_Write>
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	4603      	mov	r3, r0
 80059e6:	460a      	mov	r2, r1
 80059e8:	80fb      	strh	r3, [r7, #6]
 80059ea:	4613      	mov	r3, r2
 80059ec:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	210b      	movs	r1, #11
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fccd 	bl	8006394 <IOE_Read>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	797b      	ldrb	r3, [r7, #5]
 8005a00:	4013      	ands	r3, r2
 8005a02:	b2db      	uxtb	r3, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	460a      	mov	r2, r1
 8005a16:	80fb      	strh	r3, [r7, #6]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	797a      	ldrb	r2, [r7, #5]
 8005a22:	210b      	movs	r1, #11
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fca2 	bl	800636e <IOE_Write>
}
 8005a2a:	bf00      	nop
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	4603      	mov	r3, r0
 8005a3a:	6039      	str	r1, [r7, #0]
 8005a3c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2117      	movs	r1, #23
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fca3 	bl	8006394 <IOE_Read>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	b25b      	sxtb	r3, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	b25a      	sxtb	r2, r3
 8005a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	b25b      	sxtb	r3, r3
 8005a62:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	7bfa      	ldrb	r2, [r7, #15]
 8005a6a:	2117      	movs	r1, #23
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fc7e 	bl	800636e <IOE_Write>
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	4603      	mov	r3, r0
 8005a82:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2104      	movs	r1, #4
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fc82 	bl	8006394 <IOE_Read>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	f023 0304 	bic.w	r3, r3, #4
 8005a9a:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	2104      	movs	r1, #4
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fc62 	bl	800636e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	21f0      	movs	r1, #240	; 0xf0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff ffbf 	bl	8005a32 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	7bfa      	ldrb	r2, [r7, #15]
 8005ac2:	2104      	movs	r1, #4
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fc52 	bl	800636e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2249      	movs	r2, #73	; 0x49
 8005ad0:	2120      	movs	r1, #32
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fc4b 	bl	800636e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8005ad8:	2002      	movs	r0, #2
 8005ada:	f000 fc85 	bl	80063e8 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	2121      	movs	r1, #33	; 0x21
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fc41 	bl	800636e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	229a      	movs	r2, #154	; 0x9a
 8005af2:	2141      	movs	r1, #65	; 0x41
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fc3a 	bl	800636e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2201      	movs	r2, #1
 8005b00:	214a      	movs	r1, #74	; 0x4a
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fc33 	bl	800636e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	214b      	movs	r1, #75	; 0x4b
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fc2c 	bl	800636e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	214b      	movs	r1, #75	; 0x4b
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fc25 	bl	800636e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2156      	movs	r1, #86	; 0x56
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fc1e 	bl	800636e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2201      	movs	r2, #1
 8005b38:	2158      	movs	r1, #88	; 0x58
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fc17 	bl	800636e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2201      	movs	r2, #1
 8005b46:	2140      	movs	r1, #64	; 0x40
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fc10 	bl	800636e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	22ff      	movs	r2, #255	; 0xff
 8005b54:	210b      	movs	r1, #11
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fc09 	bl	800636e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8005b5c:	2002      	movs	r0, #2
 8005b5e:	f000 fc43 	bl	80063e8 <IOE_Delay>
}
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	4603      	mov	r3, r0
 8005b72:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8005b78:	88fb      	ldrh	r3, [r7, #6]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2140      	movs	r1, #64	; 0x40
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fc08 	bl	8006394 <IOE_Read>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2301      	moveq	r3, #1
 8005b90:	2300      	movne	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00b      	beq.n	8005bb4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	214c      	movs	r1, #76	; 0x4c
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fbf6 	bl	8006394 <IOE_Read>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d010      	beq.n	8005bd0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
 8005bb2:	e00d      	b.n	8005bd0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8005bb4:	88fb      	ldrh	r3, [r7, #6]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2201      	movs	r2, #1
 8005bba:	214b      	movs	r1, #75	; 0x4b
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fbd6 	bl	800636e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	214b      	movs	r1, #75	; 0x4b
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fbcf 	bl	800636e <IOE_Write>
  }
  
  return ret;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	4603      	mov	r3, r0
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
 8005be6:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8005be8:	89fb      	ldrh	r3, [r7, #14]
 8005bea:	b2d8      	uxtb	r0, r3
 8005bec:	f107 0210 	add.w	r2, r7, #16
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	21d7      	movs	r1, #215	; 0xd7
 8005bf4:	f000 fbe1 	bl	80063ba <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8005bf8:	7c3b      	ldrb	r3, [r7, #16]
 8005bfa:	061a      	lsls	r2, r3, #24
 8005bfc:	7c7b      	ldrb	r3, [r7, #17]
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	431a      	orrs	r2, r3
 8005c02:	7cbb      	ldrb	r3, [r7, #18]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	4313      	orrs	r3, r2
 8005c08:	7cfa      	ldrb	r2, [r7, #19]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	0d1b      	lsrs	r3, r3, #20
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8005c28:	89fb      	ldrh	r3, [r7, #14]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	214b      	movs	r1, #75	; 0x4b
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fb9c 	bl	800636e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8005c36:	89fb      	ldrh	r3, [r7, #14]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	214b      	movs	r1, #75	; 0x4b
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fb95 	bl	800636e <IOE_Write>
}
 8005c44:	bf00      	nop
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8005c56:	f000 fb84 	bl	8006362 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	211f      	movs	r1, #31
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fe76 	bl	8005950 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fe36 	bl	80058d8 <stmpe811_EnableGlobalIT>
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fe47 	bl	8005914 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	211f      	movs	r1, #31
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fe81 	bl	8005992 <stmpe811_DisableITSource>
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	211f      	movs	r1, #31
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fe99 	bl	80059de <stmpe811_ReadGITStatus>
 8005cac:	4603      	mov	r3, r0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	211f      	movs	r1, #31
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff fea1 	bl	8005a0c <stmpe811_ClearGlobalIT>
}
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]
 8005ce6:	e00b      	b.n	8005d00 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <stmpe811_GetInstance+0x40>)
 8005cec:	5cd3      	ldrb	r3, [r2, r3]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d101      	bne.n	8005cfa <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	e006      	b.n	8005d08 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d9f0      	bls.n	8005ce8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8005d06:	23ff      	movs	r3, #255	; 0xff
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20000b0c 	.word	0x20000b0c

08005d18 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	; 0x28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a33      	ldr	r2, [pc, #204]	; (8005df4 <I2Cx_MspInit+0xdc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d15f      	bne.n	8005dea <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	4b32      	ldr	r3, [pc, #200]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	4a31      	ldr	r2, [pc, #196]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005d34:	f043 0304 	orr.w	r3, r3, #4
 8005d38:	6313      	str	r3, [r2, #48]	; 0x30
 8005d3a:	4b2f      	ldr	r3, [pc, #188]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4e:	4a2a      	ldr	r2, [pc, #168]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	6313      	str	r3, [r2, #48]	; 0x30
 8005d56:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8005d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8005d68:	2312      	movs	r3, #18
 8005d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8005d70:	2302      	movs	r3, #2
 8005d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8005d74:	2304      	movs	r3, #4
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005d78:	f107 0314 	add.w	r3, r7, #20
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	481f      	ldr	r0, [pc, #124]	; (8005dfc <I2Cx_MspInit+0xe4>)
 8005d80:	f001 fbe8 	bl	8007554 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8005d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d88:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005d8a:	f107 0314 	add.w	r3, r7, #20
 8005d8e:	4619      	mov	r1, r3
 8005d90:	481b      	ldr	r0, [pc, #108]	; (8005e00 <I2Cx_MspInit+0xe8>)
 8005d92:	f001 fbdf 	bl	8007554 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]
 8005d9a:	4b17      	ldr	r3, [pc, #92]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	4a16      	ldr	r2, [pc, #88]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005da0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005da4:	6413      	str	r3, [r2, #64]	; 0x40
 8005da6:	4b14      	ldr	r3, [pc, #80]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dae:	60bb      	str	r3, [r7, #8]
 8005db0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8005db2:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dbc:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8005dbe:	4b0e      	ldr	r3, [pc, #56]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	4a0d      	ldr	r2, [pc, #52]	; (8005df8 <I2Cx_MspInit+0xe0>)
 8005dc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005dc8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8005dca:	2200      	movs	r2, #0
 8005dcc:	210f      	movs	r1, #15
 8005dce:	2048      	movs	r0, #72	; 0x48
 8005dd0:	f001 f8fc 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8005dd4:	2048      	movs	r0, #72	; 0x48
 8005dd6:	f001 f915 	bl	8007004 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	210f      	movs	r1, #15
 8005dde:	2049      	movs	r0, #73	; 0x49
 8005de0:	f001 f8f4 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8005de4:	2049      	movs	r0, #73	; 0x49
 8005de6:	f001 f90d 	bl	8007004 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8005dea:	bf00      	nop
 8005dec:	3728      	adds	r7, #40	; 0x28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40005c00 	.word	0x40005c00
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	40020000 	.word	0x40020000
 8005e00:	40020800 	.word	0x40020800

08005e04 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8005e08:	4814      	ldr	r0, [pc, #80]	; (8005e5c <I2Cx_Init+0x58>)
 8005e0a:	f002 fb09 	bl	8008420 <HAL_I2C_GetState>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d121      	bne.n	8005e58 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8005e14:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <I2Cx_Init+0x58>)
 8005e16:	4a12      	ldr	r2, [pc, #72]	; (8005e60 <I2Cx_Init+0x5c>)
 8005e18:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8005e1a:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <I2Cx_Init+0x58>)
 8005e1c:	4a11      	ldr	r2, [pc, #68]	; (8005e64 <I2Cx_Init+0x60>)
 8005e1e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8005e20:	4b0e      	ldr	r3, [pc, #56]	; (8005e5c <I2Cx_Init+0x58>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <I2Cx_Init+0x58>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <I2Cx_Init+0x58>)
 8005e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e32:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <I2Cx_Init+0x58>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8005e3a:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <I2Cx_Init+0x58>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <I2Cx_Init+0x58>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8005e46:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <I2Cx_Init+0x58>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8005e4c:	4803      	ldr	r0, [pc, #12]	; (8005e5c <I2Cx_Init+0x58>)
 8005e4e:	f7ff ff63 	bl	8005d18 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8005e52:	4802      	ldr	r0, [pc, #8]	; (8005e5c <I2Cx_Init+0x58>)
 8005e54:	f001 fe50 	bl	8007af8 <HAL_I2C_Init>
  }
}
 8005e58:	bf00      	nop
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	2000c5ac 	.word	0x2000c5ac
 8005e60:	40005c00 	.word	0x40005c00
 8005e64:	000186a0 	.word	0x000186a0

08005e68 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	4b13      	ldr	r3, [pc, #76]	; (8005ec0 <I2Cx_ITConfig+0x58>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	4a12      	ldr	r2, [pc, #72]	; (8005ec0 <I2Cx_ITConfig+0x58>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e7e:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <I2Cx_ITConfig+0x58>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8005e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8005e90:	2301      	movs	r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8005e98:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005e9c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4808      	ldr	r0, [pc, #32]	; (8005ec4 <I2Cx_ITConfig+0x5c>)
 8005ea4:	f001 fb56 	bl	8007554 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	210f      	movs	r1, #15
 8005eac:	2028      	movs	r0, #40	; 0x28
 8005eae:	f001 f88d 	bl	8006fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8005eb2:	2028      	movs	r0, #40	; 0x28
 8005eb4:	f001 f8a6 	bl	8007004 <HAL_NVIC_EnableIRQ>
}
 8005eb8:	bf00      	nop
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40020000 	.word	0x40020000

08005ec8 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af04      	add	r7, sp, #16
 8005ece:	4603      	mov	r3, r0
 8005ed0:	71fb      	strb	r3, [r7, #7]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	71bb      	strb	r3, [r7, #6]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	b299      	uxth	r1, r3
 8005ee2:	79bb      	ldrb	r3, [r7, #6]
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <I2Cx_WriteData+0x4c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	9302      	str	r3, [sp, #8]
 8005eec:	2301      	movs	r3, #1
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	1d7b      	adds	r3, r7, #5
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4808      	ldr	r0, [pc, #32]	; (8005f18 <I2Cx_WriteData+0x50>)
 8005ef8:	f001 ff72 	bl	8007de0 <HAL_I2C_Mem_Write>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8005f06:	f000 f863 	bl	8005fd0 <I2Cx_Error>
  }        
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000078 	.word	0x20000078
 8005f18:	2000c5ac 	.word	0x2000c5ac

08005f1c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af04      	add	r7, sp, #16
 8005f22:	4603      	mov	r3, r0
 8005f24:	460a      	mov	r2, r1
 8005f26:	71fb      	strb	r3, [r7, #7]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	b299      	uxth	r1, r3
 8005f38:	79bb      	ldrb	r3, [r7, #6]
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <I2Cx_ReadData+0x50>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	9302      	str	r3, [sp, #8]
 8005f42:	2301      	movs	r3, #1
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	f107 030e 	add.w	r3, r7, #14
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4808      	ldr	r0, [pc, #32]	; (8005f70 <I2Cx_ReadData+0x54>)
 8005f50:	f002 f840 	bl	8007fd4 <HAL_I2C_Mem_Read>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8005f5e:	f000 f837 	bl	8005fd0 <I2Cx_Error>
  
  }
  return value;
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20000078 	.word	0x20000078
 8005f70:	2000c5ac 	.word	0x2000c5ac

08005f74 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af04      	add	r7, sp, #16
 8005f7a:	603a      	str	r2, [r7, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
 8005f82:	460b      	mov	r3, r1
 8005f84:	71bb      	strb	r3, [r7, #6]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	b299      	uxth	r1, r3
 8005f92:	79bb      	ldrb	r3, [r7, #6]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <I2Cx_ReadBuffer+0x54>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	9302      	str	r3, [sp, #8]
 8005f9c:	88bb      	ldrh	r3, [r7, #4]
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4809      	ldr	r0, [pc, #36]	; (8005fcc <I2Cx_ReadBuffer+0x58>)
 8005fa8:	f002 f814 	bl	8007fd4 <HAL_I2C_Mem_Read>
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e002      	b.n	8005fc0 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8005fba:	f000 f809 	bl	8005fd0 <I2Cx_Error>

    return 1;
 8005fbe:	2301      	movs	r3, #1
  }
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000078 	.word	0x20000078
 8005fcc:	2000c5ac 	.word	0x2000c5ac

08005fd0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8005fd4:	4803      	ldr	r0, [pc, #12]	; (8005fe4 <I2Cx_Error+0x14>)
 8005fd6:	f001 fed3 	bl	8007d80 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8005fda:	f7ff ff13 	bl	8005e04 <I2Cx_Init>
}
 8005fde:	bf00      	nop
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	2000c5ac 	.word	0x2000c5ac

08005fe8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8005fec:	4819      	ldr	r0, [pc, #100]	; (8006054 <SPIx_Init+0x6c>)
 8005fee:	f004 fd64 	bl	800aaba <HAL_SPI_GetState>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d12b      	bne.n	8006050 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8005ff8:	4b16      	ldr	r3, [pc, #88]	; (8006054 <SPIx_Init+0x6c>)
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <SPIx_Init+0x70>)
 8005ffc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <SPIx_Init+0x6c>)
 8006000:	2218      	movs	r2, #24
 8006002:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8006004:	4b13      	ldr	r3, [pc, #76]	; (8006054 <SPIx_Init+0x6c>)
 8006006:	2200      	movs	r2, #0
 8006008:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <SPIx_Init+0x6c>)
 800600c:	2200      	movs	r2, #0
 800600e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8006010:	4b10      	ldr	r3, [pc, #64]	; (8006054 <SPIx_Init+0x6c>)
 8006012:	2200      	movs	r2, #0
 8006014:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <SPIx_Init+0x6c>)
 8006018:	2200      	movs	r2, #0
 800601a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800601c:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <SPIx_Init+0x6c>)
 800601e:	2207      	movs	r2, #7
 8006020:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <SPIx_Init+0x6c>)
 8006024:	2200      	movs	r2, #0
 8006026:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <SPIx_Init+0x6c>)
 800602a:	2200      	movs	r2, #0
 800602c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800602e:	4b09      	ldr	r3, [pc, #36]	; (8006054 <SPIx_Init+0x6c>)
 8006030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006034:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <SPIx_Init+0x6c>)
 8006038:	2200      	movs	r2, #0
 800603a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <SPIx_Init+0x6c>)
 800603e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006042:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8006044:	4803      	ldr	r0, [pc, #12]	; (8006054 <SPIx_Init+0x6c>)
 8006046:	f000 f853 	bl	80060f0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800604a:	4802      	ldr	r0, [pc, #8]	; (8006054 <SPIx_Init+0x6c>)
 800604c:	f004 f895 	bl	800a17a <HAL_SPI_Init>
  } 
}
 8006050:	bf00      	nop
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000b10 	.word	0x20000b10
 8006058:	40015000 	.word	0x40015000

0800605c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	b29a      	uxth	r2, r3
 800606e:	4b09      	ldr	r3, [pc, #36]	; (8006094 <SPIx_Read+0x38>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f107 0108 	add.w	r1, r7, #8
 8006076:	4808      	ldr	r0, [pc, #32]	; (8006098 <SPIx_Read+0x3c>)
 8006078:	f004 fa6c 	bl	800a554 <HAL_SPI_Receive>
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8006086:	f000 f827 	bl	80060d8 <SPIx_Error>
  }
  
  return readvalue;
 800608a:	68bb      	ldr	r3, [r7, #8]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	2000007c 	.word	0x2000007c
 8006098:	20000b10 	.word	0x20000b10

0800609c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80060aa:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <SPIx_Write+0x34>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1db9      	adds	r1, r7, #6
 80060b0:	2201      	movs	r2, #1
 80060b2:	4808      	ldr	r0, [pc, #32]	; (80060d4 <SPIx_Write+0x38>)
 80060b4:	f004 f912 	bl	800a2dc <HAL_SPI_Transmit>
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80060c2:	f000 f809 	bl	80060d8 <SPIx_Error>
  }
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	2000007c 	.word	0x2000007c
 80060d4:	20000b10 	.word	0x20000b10

080060d8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80060dc:	4803      	ldr	r0, [pc, #12]	; (80060ec <SPIx_Error+0x14>)
 80060de:	f004 f8d5 	bl	800a28c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80060e2:	f7ff ff81 	bl	8005fe8 <SPIx_Init>
}
 80060e6:	bf00      	nop
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000b10 	.word	0x20000b10

080060f0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	4b17      	ldr	r3, [pc, #92]	; (800615c <SPIx_MspInit+0x6c>)
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	4a16      	ldr	r2, [pc, #88]	; (800615c <SPIx_MspInit+0x6c>)
 8006102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006106:	6453      	str	r3, [r2, #68]	; 0x44
 8006108:	4b14      	ldr	r3, [pc, #80]	; (800615c <SPIx_MspInit+0x6c>)
 800610a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	4b10      	ldr	r3, [pc, #64]	; (800615c <SPIx_MspInit+0x6c>)
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	4a0f      	ldr	r2, [pc, #60]	; (800615c <SPIx_MspInit+0x6c>)
 800611e:	f043 0320 	orr.w	r3, r3, #32
 8006122:	6313      	str	r3, [r2, #48]	; 0x30
 8006124:	4b0d      	ldr	r3, [pc, #52]	; (800615c <SPIx_MspInit+0x6c>)
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8006130:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006134:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8006136:	2302      	movs	r3, #2
 8006138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800613a:	2302      	movs	r3, #2
 800613c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800613e:	2301      	movs	r3, #1
 8006140:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8006142:	2305      	movs	r3, #5
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	4619      	mov	r1, r3
 800614c:	4804      	ldr	r0, [pc, #16]	; (8006160 <SPIx_MspInit+0x70>)
 800614e:	f001 fa01 	bl	8007554 <HAL_GPIO_Init>
}
 8006152:	bf00      	nop
 8006154:	3728      	adds	r7, #40	; 0x28
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40023800 	.word	0x40023800
 8006160:	40021400 	.word	0x40021400

08006164 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800616a:	4b36      	ldr	r3, [pc, #216]	; (8006244 <LCD_IO_Init+0xe0>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d164      	bne.n	800623c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8006172:	4b34      	ldr	r3, [pc, #208]	; (8006244 <LCD_IO_Init+0xe0>)
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	4b32      	ldr	r3, [pc, #200]	; (8006248 <LCD_IO_Init+0xe4>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	4a31      	ldr	r2, [pc, #196]	; (8006248 <LCD_IO_Init+0xe4>)
 8006182:	f043 0308 	orr.w	r3, r3, #8
 8006186:	6313      	str	r3, [r2, #48]	; 0x30
 8006188:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <LCD_IO_Init+0xe4>)
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	60bb      	str	r3, [r7, #8]
 8006192:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8006194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006198:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800619a:	2301      	movs	r3, #1
 800619c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80061a2:	2302      	movs	r3, #2
 80061a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80061a6:	f107 030c 	add.w	r3, r7, #12
 80061aa:	4619      	mov	r1, r3
 80061ac:	4827      	ldr	r0, [pc, #156]	; (800624c <LCD_IO_Init+0xe8>)
 80061ae:	f001 f9d1 	bl	8007554 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	4b24      	ldr	r3, [pc, #144]	; (8006248 <LCD_IO_Init+0xe4>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	4a23      	ldr	r2, [pc, #140]	; (8006248 <LCD_IO_Init+0xe4>)
 80061bc:	f043 0308 	orr.w	r3, r3, #8
 80061c0:	6313      	str	r3, [r2, #48]	; 0x30
 80061c2:	4b21      	ldr	r3, [pc, #132]	; (8006248 <LCD_IO_Init+0xe4>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80061ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80061d4:	2301      	movs	r3, #1
 80061d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80061dc:	2302      	movs	r3, #2
 80061de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4619      	mov	r1, r3
 80061e6:	4819      	ldr	r0, [pc, #100]	; (800624c <LCD_IO_Init+0xe8>)
 80061e8:	f001 f9b4 	bl	8007554 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80061ec:	2300      	movs	r3, #0
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	4b15      	ldr	r3, [pc, #84]	; (8006248 <LCD_IO_Init+0xe4>)
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	4a14      	ldr	r2, [pc, #80]	; (8006248 <LCD_IO_Init+0xe4>)
 80061f6:	f043 0304 	orr.w	r3, r3, #4
 80061fa:	6313      	str	r3, [r2, #48]	; 0x30
 80061fc:	4b12      	ldr	r3, [pc, #72]	; (8006248 <LCD_IO_Init+0xe4>)
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8006208:	2304      	movs	r3, #4
 800620a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800620c:	2301      	movs	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8006214:	2302      	movs	r3, #2
 8006216:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8006218:	f107 030c 	add.w	r3, r7, #12
 800621c:	4619      	mov	r1, r3
 800621e:	480c      	ldr	r0, [pc, #48]	; (8006250 <LCD_IO_Init+0xec>)
 8006220:	f001 f998 	bl	8007554 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8006224:	2200      	movs	r2, #0
 8006226:	2104      	movs	r1, #4
 8006228:	4809      	ldr	r0, [pc, #36]	; (8006250 <LCD_IO_Init+0xec>)
 800622a:	f001 fc4b 	bl	8007ac4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800622e:	2201      	movs	r2, #1
 8006230:	2104      	movs	r1, #4
 8006232:	4807      	ldr	r0, [pc, #28]	; (8006250 <LCD_IO_Init+0xec>)
 8006234:	f001 fc46 	bl	8007ac4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8006238:	f7ff fed6 	bl	8005fe8 <SPIx_Init>
  }
}
 800623c:	bf00      	nop
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000b68 	.word	0x20000b68
 8006248:	40023800 	.word	0x40023800
 800624c:	40020c00 	.word	0x40020c00
 8006250:	40020800 	.word	0x40020800

08006254 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800625e:	2201      	movs	r2, #1
 8006260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006264:	480a      	ldr	r0, [pc, #40]	; (8006290 <LCD_IO_WriteData+0x3c>)
 8006266:	f001 fc2d 	bl	8007ac4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800626a:	2200      	movs	r2, #0
 800626c:	2104      	movs	r1, #4
 800626e:	4809      	ldr	r0, [pc, #36]	; (8006294 <LCD_IO_WriteData+0x40>)
 8006270:	f001 fc28 	bl	8007ac4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff ff10 	bl	800609c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800627c:	2201      	movs	r2, #1
 800627e:	2104      	movs	r1, #4
 8006280:	4804      	ldr	r0, [pc, #16]	; (8006294 <LCD_IO_WriteData+0x40>)
 8006282:	f001 fc1f 	bl	8007ac4 <HAL_GPIO_WritePin>
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40020c00 	.word	0x40020c00
 8006294:	40020800 	.word	0x40020800

08006298 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80062a2:	2200      	movs	r2, #0
 80062a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062a8:	480a      	ldr	r0, [pc, #40]	; (80062d4 <LCD_IO_WriteReg+0x3c>)
 80062aa:	f001 fc0b 	bl	8007ac4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80062ae:	2200      	movs	r2, #0
 80062b0:	2104      	movs	r1, #4
 80062b2:	4809      	ldr	r0, [pc, #36]	; (80062d8 <LCD_IO_WriteReg+0x40>)
 80062b4:	f001 fc06 	bl	8007ac4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff feed 	bl	800609c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80062c2:	2201      	movs	r2, #1
 80062c4:	2104      	movs	r1, #4
 80062c6:	4804      	ldr	r0, [pc, #16]	; (80062d8 <LCD_IO_WriteReg+0x40>)
 80062c8:	f001 fbfc 	bl	8007ac4 <HAL_GPIO_WritePin>
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40020c00 	.word	0x40020c00
 80062d8:	40020800 	.word	0x40020800

080062dc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	460a      	mov	r2, r1
 80062e6:	80fb      	strh	r3, [r7, #6]
 80062e8:	4613      	mov	r3, r2
 80062ea:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80062f0:	2200      	movs	r2, #0
 80062f2:	2104      	movs	r1, #4
 80062f4:	4810      	ldr	r0, [pc, #64]	; (8006338 <LCD_IO_ReadData+0x5c>)
 80062f6:	f001 fbe5 	bl	8007ac4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80062fa:	2200      	movs	r2, #0
 80062fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006300:	480e      	ldr	r0, [pc, #56]	; (800633c <LCD_IO_ReadData+0x60>)
 8006302:	f001 fbdf 	bl	8007ac4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8006306:	88fb      	ldrh	r3, [r7, #6]
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fec7 	bl	800609c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800630e:	797b      	ldrb	r3, [r7, #5]
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff fea3 	bl	800605c <SPIx_Read>
 8006316:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8006318:	2201      	movs	r2, #1
 800631a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800631e:	4807      	ldr	r0, [pc, #28]	; (800633c <LCD_IO_ReadData+0x60>)
 8006320:	f001 fbd0 	bl	8007ac4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8006324:	2201      	movs	r2, #1
 8006326:	2104      	movs	r1, #4
 8006328:	4803      	ldr	r0, [pc, #12]	; (8006338 <LCD_IO_ReadData+0x5c>)
 800632a:	f001 fbcb 	bl	8007ac4 <HAL_GPIO_WritePin>
  
  return readvalue;
 800632e:	68fb      	ldr	r3, [r7, #12]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40020800 	.word	0x40020800
 800633c:	40020c00 	.word	0x40020c00

08006340 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f987 	bl	800665c <HAL_Delay>
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8006356:	b580      	push	{r7, lr}
 8006358:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800635a:	f7ff fd53 	bl	8005e04 <I2Cx_Init>
}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}

08006362 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8006366:	f7ff fd7f 	bl	8005e68 <I2Cx_ITConfig>
}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}

0800636e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	4603      	mov	r3, r0
 8006376:	71fb      	strb	r3, [r7, #7]
 8006378:	460b      	mov	r3, r1
 800637a:	71bb      	strb	r3, [r7, #6]
 800637c:	4613      	mov	r3, r2
 800637e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8006380:	797a      	ldrb	r2, [r7, #5]
 8006382:	79b9      	ldrb	r1, [r7, #6]
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff fd9e 	bl	8005ec8 <I2Cx_WriteData>
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	460a      	mov	r2, r1
 800639e:	71fb      	strb	r3, [r7, #7]
 80063a0:	4613      	mov	r3, r2
 80063a2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80063a4:	79ba      	ldrb	r2, [r7, #6]
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	4611      	mov	r1, r2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff fdb6 	bl	8005f1c <I2Cx_ReadData>
 80063b0:	4603      	mov	r3, r0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	603a      	str	r2, [r7, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	4603      	mov	r3, r0
 80063c6:	71fb      	strb	r3, [r7, #7]
 80063c8:	460b      	mov	r3, r1
 80063ca:	71bb      	strb	r3, [r7, #6]
 80063cc:	4613      	mov	r3, r2
 80063ce:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80063d0:	88bb      	ldrh	r3, [r7, #4]
 80063d2:	79b9      	ldrb	r1, [r7, #6]
 80063d4:	79f8      	ldrb	r0, [r7, #7]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	f7ff fdcc 	bl	8005f74 <I2Cx_ReadBuffer>
 80063dc:	4603      	mov	r3, r0
 80063de:	b29b      	uxth	r3, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f933 	bl	800665c <HAL_Delay>
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	460a      	mov	r2, r1
 800640a:	80fb      	strh	r3, [r7, #6]
 800640c:	4613      	mov	r3, r2
 800640e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8006414:	4a13      	ldr	r2, [pc, #76]	; (8006464 <BSP_TS_Init+0x64>)
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800641a:	4a13      	ldr	r2, [pc, #76]	; (8006468 <BSP_TS_Init+0x68>)
 800641c:	88bb      	ldrh	r3, [r7, #4]
 800641e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8006420:	4b12      	ldr	r3, [pc, #72]	; (800646c <BSP_TS_Init+0x6c>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2082      	movs	r0, #130	; 0x82
 8006426:	4798      	blx	r3
 8006428:	4603      	mov	r3, r0
 800642a:	461a      	mov	r2, r3
 800642c:	f640 0311 	movw	r3, #2065	; 0x811
 8006430:	429a      	cmp	r2, r3
 8006432:	d104      	bne.n	800643e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8006434:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <BSP_TS_Init+0x70>)
 8006436:	4a0d      	ldr	r2, [pc, #52]	; (800646c <BSP_TS_Init+0x6c>)
 8006438:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <BSP_TS_Init+0x70>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2082      	movs	r0, #130	; 0x82
 800644c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800644e:	4b08      	ldr	r3, [pc, #32]	; (8006470 <BSP_TS_Init+0x70>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2082      	movs	r0, #130	; 0x82
 8006456:	4798      	blx	r3
  }

  return ret;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000b70 	.word	0x20000b70
 8006468:	20000b72 	.word	0x20000b72
 800646c:	20000050 	.word	0x20000050
 8006470:	20000b6c 	.word	0x20000b6c

08006474 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800647c:	4b4f      	ldr	r3, [pc, #316]	; (80065bc <BSP_TS_GetState+0x148>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2082      	movs	r0, #130	; 0x82
 8006484:	4798      	blx	r3
 8006486:	4603      	mov	r3, r0
 8006488:	b29a      	uxth	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 808d 	beq.w	80065b2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8006498:	4b48      	ldr	r3, [pc, #288]	; (80065bc <BSP_TS_GetState+0x148>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f107 020c 	add.w	r2, r7, #12
 80064a2:	f107 010e 	add.w	r1, r7, #14
 80064a6:	2082      	movs	r0, #130	; 0x82
 80064a8:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;
 80064aa:	89bb      	ldrh	r3, [r7, #12]
 80064ac:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80064b4:	89bb      	ldrh	r3, [r7, #12]
 80064b6:	4a42      	ldr	r2, [pc, #264]	; (80065c0 <BSP_TS_GetState+0x14c>)
 80064b8:	fba2 2303 	umull	r2, r3, r2, r3
 80064bc:	08db      	lsrs	r3, r3, #3
 80064be:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80064c0:	8abb      	ldrh	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	82bb      	strh	r3, [r7, #20]
 80064ca:	e008      	b.n	80064de <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80064cc:	4b3d      	ldr	r3, [pc, #244]	; (80065c4 <BSP_TS_GetState+0x150>)
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	8aba      	ldrh	r2, [r7, #20]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d903      	bls.n	80064de <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80064d6:	4b3b      	ldr	r3, [pc, #236]	; (80065c4 <BSP_TS_GetState+0x150>)
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	3b01      	subs	r3, #1
 80064dc:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80064de:	8abb      	ldrh	r3, [r7, #20]
 80064e0:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80064e2:	89fb      	ldrh	r3, [r7, #14]
 80064e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d806      	bhi.n	80064fa <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80064ec:	89fb      	ldrh	r3, [r7, #14]
 80064ee:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80064f2:	330e      	adds	r3, #14
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	81fb      	strh	r3, [r7, #14]
 80064f8:	e005      	b.n	8006506 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80064fa:	89fb      	ldrh	r3, [r7, #14]
 80064fc:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8006500:	3308      	adds	r3, #8
 8006502:	b29b      	uxth	r3, r3
 8006504:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8006506:	89fb      	ldrh	r3, [r7, #14]
 8006508:	4a2f      	ldr	r2, [pc, #188]	; (80065c8 <BSP_TS_GetState+0x154>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	08db      	lsrs	r3, r3, #3
 8006510:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8006512:	8afb      	ldrh	r3, [r7, #22]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d102      	bne.n	800651e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	82fb      	strh	r3, [r7, #22]
 800651c:	e008      	b.n	8006530 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800651e:	4b2b      	ldr	r3, [pc, #172]	; (80065cc <BSP_TS_GetState+0x158>)
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	8afa      	ldrh	r2, [r7, #22]
 8006524:	429a      	cmp	r2, r3
 8006526:	d903      	bls.n	8006530 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8006528:	4b28      	ldr	r3, [pc, #160]	; (80065cc <BSP_TS_GetState+0x158>)
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	3b01      	subs	r3, #1
 800652e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8006530:	8afb      	ldrh	r3, [r7, #22]
 8006532:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8006534:	89fb      	ldrh	r3, [r7, #14]
 8006536:	461a      	mov	r2, r3
 8006538:	4b25      	ldr	r3, [pc, #148]	; (80065d0 <BSP_TS_GetState+0x15c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d906      	bls.n	800654e <BSP_TS_GetState+0xda>
 8006540:	89fa      	ldrh	r2, [r7, #14]
 8006542:	4b23      	ldr	r3, [pc, #140]	; (80065d0 <BSP_TS_GetState+0x15c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	b29b      	uxth	r3, r3
 800654c:	e005      	b.n	800655a <BSP_TS_GetState+0xe6>
 800654e:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <BSP_TS_GetState+0x15c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	b29a      	uxth	r2, r3
 8006554:	89fb      	ldrh	r3, [r7, #14]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	b29b      	uxth	r3, r3
 800655a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800655c:	89bb      	ldrh	r3, [r7, #12]
 800655e:	461a      	mov	r2, r3
 8006560:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <BSP_TS_GetState+0x160>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d906      	bls.n	8006576 <BSP_TS_GetState+0x102>
 8006568:	89ba      	ldrh	r2, [r7, #12]
 800656a:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <BSP_TS_GetState+0x160>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	b29b      	uxth	r3, r3
 8006574:	e005      	b.n	8006582 <BSP_TS_GetState+0x10e>
 8006576:	4b17      	ldr	r3, [pc, #92]	; (80065d4 <BSP_TS_GetState+0x160>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	b29a      	uxth	r2, r3
 800657c:	89bb      	ldrh	r3, [r7, #12]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	b29b      	uxth	r3, r3
 8006582:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8006584:	8a7a      	ldrh	r2, [r7, #18]
 8006586:	8a3b      	ldrh	r3, [r7, #16]
 8006588:	4413      	add	r3, r2
 800658a:	2b05      	cmp	r3, #5
 800658c:	dd07      	ble.n	800659e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800658e:	89fb      	ldrh	r3, [r7, #14]
 8006590:	461a      	mov	r2, r3
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <BSP_TS_GetState+0x15c>)
 8006594:	601a      	str	r2, [r3, #0]
      _y = y; 
 8006596:	89bb      	ldrh	r3, [r7, #12]
 8006598:	461a      	mov	r2, r3
 800659a:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <BSP_TS_GetState+0x160>)
 800659c:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <BSP_TS_GetState+0x15c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <BSP_TS_GetState+0x160>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	809a      	strh	r2, [r3, #4]
  }
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000b6c 	.word	0x20000b6c
 80065c0:	ba2e8ba3 	.word	0xba2e8ba3
 80065c4:	20000b72 	.word	0x20000b72
 80065c8:	88888889 	.word	0x88888889
 80065cc:	20000b70 	.word	0x20000b70
 80065d0:	20000b74 	.word	0x20000b74
 80065d4:	20000b78 	.word	0x20000b78

080065d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065dc:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <HAL_Init+0x40>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0d      	ldr	r2, [pc, #52]	; (8006618 <HAL_Init+0x40>)
 80065e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80065e8:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <HAL_Init+0x40>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <HAL_Init+0x40>)
 80065ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065f4:	4b08      	ldr	r3, [pc, #32]	; (8006618 <HAL_Init+0x40>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a07      	ldr	r2, [pc, #28]	; (8006618 <HAL_Init+0x40>)
 80065fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006600:	2003      	movs	r0, #3
 8006602:	f000 fcd8 	bl	8006fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006606:	2000      	movs	r0, #0
 8006608:	f7fe fb60 	bl	8004ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800660c:	f7fe fb32 	bl	8004c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40023c00 	.word	0x40023c00

0800661c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <HAL_IncTick+0x20>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <HAL_IncTick+0x24>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4413      	add	r3, r2
 800662c:	4a04      	ldr	r2, [pc, #16]	; (8006640 <HAL_IncTick+0x24>)
 800662e:	6013      	str	r3, [r2, #0]
}
 8006630:	bf00      	nop
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000084 	.word	0x20000084
 8006640:	2000c600 	.word	0x2000c600

08006644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  return uwTick;
 8006648:	4b03      	ldr	r3, [pc, #12]	; (8006658 <HAL_GetTick+0x14>)
 800664a:	681b      	ldr	r3, [r3, #0]
}
 800664c:	4618      	mov	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	2000c600 	.word	0x2000c600

0800665c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006664:	f7ff ffee 	bl	8006644 <HAL_GetTick>
 8006668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d005      	beq.n	8006682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <HAL_Delay+0x44>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006682:	bf00      	nop
 8006684:	f7ff ffde 	bl	8006644 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	429a      	cmp	r2, r3
 8006692:	d8f7      	bhi.n	8006684 <HAL_Delay+0x28>
  {
  }
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000084 	.word	0x20000084

080066a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e033      	b.n	8006722 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fd fa3c 	bl	8003b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d118      	bne.n	8006714 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80066ea:	f023 0302 	bic.w	r3, r3, #2
 80066ee:	f043 0202 	orr.w	r2, r3, #2
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fab4 	bl	8006c64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	f043 0201 	orr.w	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
 8006712:	e001      	b.n	8006718 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_ADC_Start+0x1a>
 8006742:	2302      	movs	r3, #2
 8006744:	e0b2      	b.n	80068ac <HAL_ADC_Start+0x180>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b01      	cmp	r3, #1
 800675a:	d018      	beq.n	800678e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800676c:	4b52      	ldr	r3, [pc, #328]	; (80068b8 <HAL_ADC_Start+0x18c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a52      	ldr	r2, [pc, #328]	; (80068bc <HAL_ADC_Start+0x190>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	0c9a      	lsrs	r2, r3, #18
 8006778:	4613      	mov	r3, r2
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	4413      	add	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006780:	e002      	b.n	8006788 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3b01      	subs	r3, #1
 8006786:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f9      	bne.n	8006782 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b01      	cmp	r3, #1
 800679a:	d17a      	bne.n	8006892 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80067c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067da:	d106      	bne.n	80067ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e0:	f023 0206 	bic.w	r2, r3, #6
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	645a      	str	r2, [r3, #68]	; 0x44
 80067e8:	e002      	b.n	80067f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067f8:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <HAL_ADC_Start+0x194>)
 80067fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006804:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f003 031f 	and.w	r3, r3, #31
 800680e:	2b00      	cmp	r3, #0
 8006810:	d12a      	bne.n	8006868 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a2b      	ldr	r2, [pc, #172]	; (80068c4 <HAL_ADC_Start+0x198>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d015      	beq.n	8006848 <HAL_ADC_Start+0x11c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a29      	ldr	r2, [pc, #164]	; (80068c8 <HAL_ADC_Start+0x19c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d105      	bne.n	8006832 <HAL_ADC_Start+0x106>
 8006826:	4b26      	ldr	r3, [pc, #152]	; (80068c0 <HAL_ADC_Start+0x194>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a25      	ldr	r2, [pc, #148]	; (80068cc <HAL_ADC_Start+0x1a0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d136      	bne.n	80068aa <HAL_ADC_Start+0x17e>
 800683c:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <HAL_ADC_Start+0x194>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b00      	cmp	r3, #0
 8006846:	d130      	bne.n	80068aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d129      	bne.n	80068aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006864:	609a      	str	r2, [r3, #8]
 8006866:	e020      	b.n	80068aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a15      	ldr	r2, [pc, #84]	; (80068c4 <HAL_ADC_Start+0x198>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d11b      	bne.n	80068aa <HAL_ADC_Start+0x17e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d114      	bne.n	80068aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800688e:	609a      	str	r2, [r3, #8]
 8006890:	e00b      	b.n	80068aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f043 0210 	orr.w	r2, r3, #16
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a2:	f043 0201 	orr.w	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	20000014 	.word	0x20000014
 80068bc:	431bde83 	.word	0x431bde83
 80068c0:	40012300 	.word	0x40012300
 80068c4:	40012000 	.word	0x40012000
 80068c8:	40012100 	.word	0x40012100
 80068cc:	40012200 	.word	0x40012200

080068d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ec:	d113      	bne.n	8006916 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80068f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fc:	d10b      	bne.n	8006916 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e063      	b.n	80069de <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006916:	f7ff fe95 	bl	8006644 <HAL_GetTick>
 800691a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800691c:	e021      	b.n	8006962 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d01d      	beq.n	8006962 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HAL_ADC_PollForConversion+0x6c>
 800692c:	f7ff fe8a 	bl	8006644 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d212      	bcs.n	8006962 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d00b      	beq.n	8006962 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f043 0204 	orr.w	r2, r3, #4
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e03d      	b.n	80069de <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b02      	cmp	r3, #2
 800696e:	d1d6      	bne.n	800691e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0212 	mvn.w	r2, #18
 8006978:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d123      	bne.n	80069dc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006998:	2b00      	cmp	r3, #0
 800699a:	d11f      	bne.n	80069dc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d006      	beq.n	80069b8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d111      	bne.n	80069dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	f043 0201 	orr.w	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_ADC_ConfigChannel+0x1c>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e113      	b.n	8006c44 <HAL_ADC_ConfigChannel+0x244>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b09      	cmp	r3, #9
 8006a2a:	d925      	bls.n	8006a78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68d9      	ldr	r1, [r3, #12]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	4413      	add	r3, r2
 8006a40:	3b1e      	subs	r3, #30
 8006a42:	2207      	movs	r2, #7
 8006a44:	fa02 f303 	lsl.w	r3, r2, r3
 8006a48:	43da      	mvns	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	400a      	ands	r2, r1
 8006a50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68d9      	ldr	r1, [r3, #12]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4618      	mov	r0, r3
 8006a64:	4603      	mov	r3, r0
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	4403      	add	r3, r0
 8006a6a:	3b1e      	subs	r3, #30
 8006a6c:	409a      	lsls	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	e022      	b.n	8006abe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6919      	ldr	r1, [r3, #16]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	4613      	mov	r3, r2
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a92:	43da      	mvns	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	400a      	ands	r2, r1
 8006a9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6919      	ldr	r1, [r3, #16]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	4618      	mov	r0, r3
 8006aae:	4603      	mov	r3, r0
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4403      	add	r3, r0
 8006ab4:	409a      	lsls	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2b06      	cmp	r3, #6
 8006ac4:	d824      	bhi.n	8006b10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	3b05      	subs	r3, #5
 8006ad8:	221f      	movs	r2, #31
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43da      	mvns	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	400a      	ands	r2, r1
 8006ae6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	4618      	mov	r0, r3
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	3b05      	subs	r3, #5
 8006b02:	fa00 f203 	lsl.w	r2, r0, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8006b0e:	e04c      	b.n	8006baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b0c      	cmp	r3, #12
 8006b16:	d824      	bhi.n	8006b62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	3b23      	subs	r3, #35	; 0x23
 8006b2a:	221f      	movs	r2, #31
 8006b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b30:	43da      	mvns	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	400a      	ands	r2, r1
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	4618      	mov	r0, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	3b23      	subs	r3, #35	; 0x23
 8006b54:	fa00 f203 	lsl.w	r2, r0, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b60:	e023      	b.n	8006baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	3b41      	subs	r3, #65	; 0x41
 8006b74:	221f      	movs	r2, #31
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43da      	mvns	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	400a      	ands	r2, r1
 8006b82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	4618      	mov	r0, r3
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3b41      	subs	r3, #65	; 0x41
 8006b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006baa:	4b29      	ldr	r3, [pc, #164]	; (8006c50 <HAL_ADC_ConfigChannel+0x250>)
 8006bac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a28      	ldr	r2, [pc, #160]	; (8006c54 <HAL_ADC_ConfigChannel+0x254>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d10f      	bne.n	8006bd8 <HAL_ADC_ConfigChannel+0x1d8>
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b12      	cmp	r3, #18
 8006bbe:	d10b      	bne.n	8006bd8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <HAL_ADC_ConfigChannel+0x254>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d12b      	bne.n	8006c3a <HAL_ADC_ConfigChannel+0x23a>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1c      	ldr	r2, [pc, #112]	; (8006c58 <HAL_ADC_ConfigChannel+0x258>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <HAL_ADC_ConfigChannel+0x1f4>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b11      	cmp	r3, #17
 8006bf2:	d122      	bne.n	8006c3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a11      	ldr	r2, [pc, #68]	; (8006c58 <HAL_ADC_ConfigChannel+0x258>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d111      	bne.n	8006c3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <HAL_ADC_ConfigChannel+0x25c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a11      	ldr	r2, [pc, #68]	; (8006c60 <HAL_ADC_ConfigChannel+0x260>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	0c9a      	lsrs	r2, r3, #18
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c2c:	e002      	b.n	8006c34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f9      	bne.n	8006c2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	40012300 	.word	0x40012300
 8006c54:	40012000 	.word	0x40012000
 8006c58:	10000012 	.word	0x10000012
 8006c5c:	20000014 	.word	0x20000014
 8006c60:	431bde83 	.word	0x431bde83

08006c64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c6c:	4b79      	ldr	r3, [pc, #484]	; (8006e54 <ADC_Init+0x1f0>)
 8006c6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6859      	ldr	r1, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	021a      	lsls	r2, r3, #8
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6899      	ldr	r1, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	4a58      	ldr	r2, [pc, #352]	; (8006e58 <ADC_Init+0x1f4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d022      	beq.n	8006d42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6899      	ldr	r1, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	609a      	str	r2, [r3, #8]
 8006d40:	e00f      	b.n	8006d62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0202 	bic.w	r2, r2, #2
 8006d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6899      	ldr	r1, [r3, #8]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7e1b      	ldrb	r3, [r3, #24]
 8006d7c:	005a      	lsls	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01b      	beq.n	8006dc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006dae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6859      	ldr	r1, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	035a      	lsls	r2, r3, #13
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
 8006dc6:	e007      	b.n	8006dd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	051a      	lsls	r2, r3, #20
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6899      	ldr	r1, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e1a:	025a      	lsls	r2, r3, #9
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6899      	ldr	r1, [r3, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	029a      	lsls	r2, r3, #10
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	609a      	str	r2, [r3, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	40012300 	.word	0x40012300
 8006e58:	0f000001 	.word	0x0f000001

08006e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e78:	4013      	ands	r3, r2
 8006e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e8e:	4a04      	ldr	r2, [pc, #16]	; (8006ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	60d3      	str	r3, [r2, #12]
}
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	e000ed00 	.word	0xe000ed00

08006ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ea8:	4b04      	ldr	r3, [pc, #16]	; (8006ebc <__NVIC_GetPriorityGrouping+0x18>)
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	0a1b      	lsrs	r3, r3, #8
 8006eae:	f003 0307 	and.w	r3, r3, #7
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	e000ed00 	.word	0xe000ed00

08006ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	db0b      	blt.n	8006eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	f003 021f 	and.w	r2, r3, #31
 8006ed8:	4907      	ldr	r1, [pc, #28]	; (8006ef8 <__NVIC_EnableIRQ+0x38>)
 8006eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	e000e100 	.word	0xe000e100

08006efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	6039      	str	r1, [r7, #0]
 8006f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	db0a      	blt.n	8006f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	490c      	ldr	r1, [pc, #48]	; (8006f48 <__NVIC_SetPriority+0x4c>)
 8006f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f1a:	0112      	lsls	r2, r2, #4
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	440b      	add	r3, r1
 8006f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f24:	e00a      	b.n	8006f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	4908      	ldr	r1, [pc, #32]	; (8006f4c <__NVIC_SetPriority+0x50>)
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	3b04      	subs	r3, #4
 8006f34:	0112      	lsls	r2, r2, #4
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	440b      	add	r3, r1
 8006f3a:	761a      	strb	r2, [r3, #24]
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	e000e100 	.word	0xe000e100
 8006f4c:	e000ed00 	.word	0xe000ed00

08006f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b089      	sub	sp, #36	; 0x24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f1c3 0307 	rsb	r3, r3, #7
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	bf28      	it	cs
 8006f6e:	2304      	movcs	r3, #4
 8006f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	3304      	adds	r3, #4
 8006f76:	2b06      	cmp	r3, #6
 8006f78:	d902      	bls.n	8006f80 <NVIC_EncodePriority+0x30>
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	3b03      	subs	r3, #3
 8006f7e:	e000      	b.n	8006f82 <NVIC_EncodePriority+0x32>
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	43da      	mvns	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	401a      	ands	r2, r3
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f98:	f04f 31ff 	mov.w	r1, #4294967295
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa2:	43d9      	mvns	r1, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fa8:	4313      	orrs	r3, r2
         );
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3724      	adds	r7, #36	; 0x24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ff4c 	bl	8006e5c <__NVIC_SetPriorityGrouping>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fde:	f7ff ff61 	bl	8006ea4 <__NVIC_GetPriorityGrouping>
 8006fe2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	6978      	ldr	r0, [r7, #20]
 8006fea:	f7ff ffb1 	bl	8006f50 <NVIC_EncodePriority>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff ff80 	bl	8006efc <__NVIC_SetPriority>
}
 8006ffc:	bf00      	nop
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800700e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff ff54 	bl	8006ec0 <__NVIC_EnableIRQ>
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e00e      	b.n	8007050 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	795b      	ldrb	r3, [r3, #5]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d105      	bne.n	8007048 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fc fdf0 	bl	8003c28 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007064:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007066:	f7ff faed 	bl	8006644 <HAL_GetTick>
 800706a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d008      	beq.n	800708a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2280      	movs	r2, #128	; 0x80
 800707c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e052      	b.n	8007130 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0216 	bic.w	r2, r2, #22
 8007098:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <HAL_DMA_Abort+0x62>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0208 	bic.w	r2, r2, #8
 80070c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0201 	bic.w	r2, r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070da:	e013      	b.n	8007104 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070dc:	f7ff fab2 	bl	8006644 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d90c      	bls.n	8007104 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2203      	movs	r2, #3
 80070f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e015      	b.n	8007130 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e4      	bne.n	80070dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007116:	223f      	movs	r2, #63	; 0x3f
 8007118:	409a      	lsls	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d004      	beq.n	8007156 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2280      	movs	r2, #128	; 0x80
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e00c      	b.n	8007170 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2205      	movs	r2, #5
 800715a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0201 	bic.w	r2, r2, #1
 800716c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e03b      	b.n	8007206 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d106      	bne.n	80071a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fc fd94 	bl	8003cd0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071cc:	f023 0107 	bic.w	r1, r3, #7
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80071e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	68d1      	ldr	r1, [r2, #12]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	430b      	orrs	r3, r1
 80071f4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d026      	beq.n	800727e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007236:	2b00      	cmp	r3, #0
 8007238:	d021      	beq.n	800727e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007248:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724e:	f043 0201 	orr.w	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2201      	movs	r2, #1
 800725c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2204      	movs	r2, #4
 8007262:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d026      	beq.n	80072d6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d021      	beq.n	80072d6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072a0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2220      	movs	r2, #32
 80072a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ae:	f043 0202 	orr.w	r2, r3, #2
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2204      	movs	r2, #4
 80072ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d026      	beq.n	800732e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d021      	beq.n	800732e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072f8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2208      	movs	r2, #8
 8007300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	f043 0204 	orr.w	r2, r3, #4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2204      	movs	r2, #4
 8007312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	d013      	beq.n	8007360 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00e      	beq.n	8007360 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007350:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2204      	movs	r2, #4
 8007358:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f853 	bl	8007406 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d024      	beq.n	80073b4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01f      	beq.n	80073b4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007382:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2202      	movs	r2, #2
 800738a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01f      	beq.n	80073fe <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01a      	beq.n	80073fe <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2210      	movs	r2, #16
 80073de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f80e 	bl	800741a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_DMA2D_ConfigLayer+0x20>
 800744c:	2302      	movs	r3, #2
 800744e:	e079      	b.n	8007544 <HAL_DMA2D_ConfigLayer+0x114>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	3318      	adds	r3, #24
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	041b      	lsls	r3, r3, #16
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800747a:	4b35      	ldr	r3, [pc, #212]	; (8007550 <HAL_DMA2D_ConfigLayer+0x120>)
 800747c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2b0a      	cmp	r3, #10
 8007484:	d003      	beq.n	800748e <HAL_DMA2D_ConfigLayer+0x5e>
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b09      	cmp	r3, #9
 800748c:	d107      	bne.n	800749e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	e005      	b.n	80074aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	061b      	lsls	r3, r3, #24
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d120      	bne.n	80074f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	43db      	mvns	r3, r3
 80074ba:	ea02 0103 	and.w	r1, r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b0a      	cmp	r3, #10
 80074d8:	d003      	beq.n	80074e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b09      	cmp	r3, #9
 80074e0:	d127      	bne.n	8007532 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80074ee:	629a      	str	r2, [r3, #40]	; 0x28
 80074f0:	e01f      	b.n	8007532 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69da      	ldr	r2, [r3, #28]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	43db      	mvns	r3, r3
 80074fc:	ea02 0103 	and.w	r1, r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	430a      	orrs	r2, r1
 8007508:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b0a      	cmp	r3, #10
 800751a:	d003      	beq.n	8007524 <HAL_DMA2D_ConfigLayer+0xf4>
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b09      	cmp	r3, #9
 8007522:	d106      	bne.n	8007532 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007530:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	ff03000f 	.word	0xff03000f

08007554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007554:	b480      	push	{r7}
 8007556:	b089      	sub	sp, #36	; 0x24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	e177      	b.n	8007860 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007570:	2201      	movs	r2, #1
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	fa02 f303 	lsl.w	r3, r2, r3
 8007578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4013      	ands	r3, r2
 8007582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	429a      	cmp	r2, r3
 800758a:	f040 8166 	bne.w	800785a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b01      	cmp	r3, #1
 8007598:	d005      	beq.n	80075a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d130      	bne.n	8007608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	2203      	movs	r2, #3
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	43db      	mvns	r3, r3
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	4013      	ands	r3, r2
 80075bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80075dc:	2201      	movs	r2, #1
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	43db      	mvns	r3, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4013      	ands	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	f003 0201 	and.w	r2, r3, #1
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	4313      	orrs	r3, r2
 8007600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f003 0303 	and.w	r3, r3, #3
 8007610:	2b03      	cmp	r3, #3
 8007612:	d017      	beq.n	8007644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	2203      	movs	r2, #3
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	43db      	mvns	r3, r3
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	4013      	ands	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	4313      	orrs	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f003 0303 	and.w	r3, r3, #3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d123      	bne.n	8007698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	08da      	lsrs	r2, r3, #3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3208      	adds	r2, #8
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	f003 0307 	and.w	r3, r3, #7
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	220f      	movs	r2, #15
 8007668:	fa02 f303 	lsl.w	r3, r2, r3
 800766c:	43db      	mvns	r3, r3
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	4013      	ands	r3, r2
 8007672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	4313      	orrs	r3, r2
 8007688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	08da      	lsrs	r2, r3, #3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3208      	adds	r2, #8
 8007692:	69b9      	ldr	r1, [r7, #24]
 8007694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	2203      	movs	r2, #3
 80076a4:	fa02 f303 	lsl.w	r3, r2, r3
 80076a8:	43db      	mvns	r3, r3
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	4013      	ands	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f003 0203 	and.w	r2, r3, #3
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 80c0 	beq.w	800785a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	4b66      	ldr	r3, [pc, #408]	; (8007878 <HAL_GPIO_Init+0x324>)
 80076e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e2:	4a65      	ldr	r2, [pc, #404]	; (8007878 <HAL_GPIO_Init+0x324>)
 80076e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076e8:	6453      	str	r3, [r2, #68]	; 0x44
 80076ea:	4b63      	ldr	r3, [pc, #396]	; (8007878 <HAL_GPIO_Init+0x324>)
 80076ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076f6:	4a61      	ldr	r2, [pc, #388]	; (800787c <HAL_GPIO_Init+0x328>)
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	089b      	lsrs	r3, r3, #2
 80076fc:	3302      	adds	r3, #2
 80076fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	220f      	movs	r2, #15
 800770e:	fa02 f303 	lsl.w	r3, r2, r3
 8007712:	43db      	mvns	r3, r3
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	4013      	ands	r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a58      	ldr	r2, [pc, #352]	; (8007880 <HAL_GPIO_Init+0x32c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d037      	beq.n	8007792 <HAL_GPIO_Init+0x23e>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a57      	ldr	r2, [pc, #348]	; (8007884 <HAL_GPIO_Init+0x330>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d031      	beq.n	800778e <HAL_GPIO_Init+0x23a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a56      	ldr	r2, [pc, #344]	; (8007888 <HAL_GPIO_Init+0x334>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d02b      	beq.n	800778a <HAL_GPIO_Init+0x236>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a55      	ldr	r2, [pc, #340]	; (800788c <HAL_GPIO_Init+0x338>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d025      	beq.n	8007786 <HAL_GPIO_Init+0x232>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a54      	ldr	r2, [pc, #336]	; (8007890 <HAL_GPIO_Init+0x33c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01f      	beq.n	8007782 <HAL_GPIO_Init+0x22e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a53      	ldr	r2, [pc, #332]	; (8007894 <HAL_GPIO_Init+0x340>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d019      	beq.n	800777e <HAL_GPIO_Init+0x22a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a52      	ldr	r2, [pc, #328]	; (8007898 <HAL_GPIO_Init+0x344>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <HAL_GPIO_Init+0x226>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a51      	ldr	r2, [pc, #324]	; (800789c <HAL_GPIO_Init+0x348>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00d      	beq.n	8007776 <HAL_GPIO_Init+0x222>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a50      	ldr	r2, [pc, #320]	; (80078a0 <HAL_GPIO_Init+0x34c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d007      	beq.n	8007772 <HAL_GPIO_Init+0x21e>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a4f      	ldr	r2, [pc, #316]	; (80078a4 <HAL_GPIO_Init+0x350>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d101      	bne.n	800776e <HAL_GPIO_Init+0x21a>
 800776a:	2309      	movs	r3, #9
 800776c:	e012      	b.n	8007794 <HAL_GPIO_Init+0x240>
 800776e:	230a      	movs	r3, #10
 8007770:	e010      	b.n	8007794 <HAL_GPIO_Init+0x240>
 8007772:	2308      	movs	r3, #8
 8007774:	e00e      	b.n	8007794 <HAL_GPIO_Init+0x240>
 8007776:	2307      	movs	r3, #7
 8007778:	e00c      	b.n	8007794 <HAL_GPIO_Init+0x240>
 800777a:	2306      	movs	r3, #6
 800777c:	e00a      	b.n	8007794 <HAL_GPIO_Init+0x240>
 800777e:	2305      	movs	r3, #5
 8007780:	e008      	b.n	8007794 <HAL_GPIO_Init+0x240>
 8007782:	2304      	movs	r3, #4
 8007784:	e006      	b.n	8007794 <HAL_GPIO_Init+0x240>
 8007786:	2303      	movs	r3, #3
 8007788:	e004      	b.n	8007794 <HAL_GPIO_Init+0x240>
 800778a:	2302      	movs	r3, #2
 800778c:	e002      	b.n	8007794 <HAL_GPIO_Init+0x240>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <HAL_GPIO_Init+0x240>
 8007792:	2300      	movs	r3, #0
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	f002 0203 	and.w	r2, r2, #3
 800779a:	0092      	lsls	r2, r2, #2
 800779c:	4093      	lsls	r3, r2
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077a4:	4935      	ldr	r1, [pc, #212]	; (800787c <HAL_GPIO_Init+0x328>)
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	089b      	lsrs	r3, r3, #2
 80077aa:	3302      	adds	r3, #2
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077b2:	4b3d      	ldr	r3, [pc, #244]	; (80078a8 <HAL_GPIO_Init+0x354>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	43db      	mvns	r3, r3
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	4013      	ands	r3, r2
 80077c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077d6:	4a34      	ldr	r2, [pc, #208]	; (80078a8 <HAL_GPIO_Init+0x354>)
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80077dc:	4b32      	ldr	r3, [pc, #200]	; (80078a8 <HAL_GPIO_Init+0x354>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	43db      	mvns	r3, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007800:	4a29      	ldr	r2, [pc, #164]	; (80078a8 <HAL_GPIO_Init+0x354>)
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007806:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <HAL_GPIO_Init+0x354>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	43db      	mvns	r3, r3
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	4013      	ands	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4313      	orrs	r3, r2
 8007828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800782a:	4a1f      	ldr	r2, [pc, #124]	; (80078a8 <HAL_GPIO_Init+0x354>)
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007830:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <HAL_GPIO_Init+0x354>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	43db      	mvns	r3, r3
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	4013      	ands	r3, r2
 800783e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007854:	4a14      	ldr	r2, [pc, #80]	; (80078a8 <HAL_GPIO_Init+0x354>)
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	3301      	adds	r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	2b0f      	cmp	r3, #15
 8007864:	f67f ae84 	bls.w	8007570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	3724      	adds	r7, #36	; 0x24
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40023800 	.word	0x40023800
 800787c:	40013800 	.word	0x40013800
 8007880:	40020000 	.word	0x40020000
 8007884:	40020400 	.word	0x40020400
 8007888:	40020800 	.word	0x40020800
 800788c:	40020c00 	.word	0x40020c00
 8007890:	40021000 	.word	0x40021000
 8007894:	40021400 	.word	0x40021400
 8007898:	40021800 	.word	0x40021800
 800789c:	40021c00 	.word	0x40021c00
 80078a0:	40022000 	.word	0x40022000
 80078a4:	40022400 	.word	0x40022400
 80078a8:	40013c00 	.word	0x40013c00

080078ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	e0d9      	b.n	8007a7c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078c8:	2201      	movs	r2, #1
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4013      	ands	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	429a      	cmp	r2, r3
 80078e0:	f040 80c9 	bne.w	8007a76 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80078e4:	4a6b      	ldr	r2, [pc, #428]	; (8007a94 <HAL_GPIO_DeInit+0x1e8>)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	089b      	lsrs	r3, r3, #2
 80078ea:	3302      	adds	r3, #2
 80078ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	220f      	movs	r2, #15
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	4013      	ands	r3, r2
 8007904:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a63      	ldr	r2, [pc, #396]	; (8007a98 <HAL_GPIO_DeInit+0x1ec>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d037      	beq.n	800797e <HAL_GPIO_DeInit+0xd2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a62      	ldr	r2, [pc, #392]	; (8007a9c <HAL_GPIO_DeInit+0x1f0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d031      	beq.n	800797a <HAL_GPIO_DeInit+0xce>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a61      	ldr	r2, [pc, #388]	; (8007aa0 <HAL_GPIO_DeInit+0x1f4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d02b      	beq.n	8007976 <HAL_GPIO_DeInit+0xca>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a60      	ldr	r2, [pc, #384]	; (8007aa4 <HAL_GPIO_DeInit+0x1f8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d025      	beq.n	8007972 <HAL_GPIO_DeInit+0xc6>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a5f      	ldr	r2, [pc, #380]	; (8007aa8 <HAL_GPIO_DeInit+0x1fc>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d01f      	beq.n	800796e <HAL_GPIO_DeInit+0xc2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a5e      	ldr	r2, [pc, #376]	; (8007aac <HAL_GPIO_DeInit+0x200>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d019      	beq.n	800796a <HAL_GPIO_DeInit+0xbe>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a5d      	ldr	r2, [pc, #372]	; (8007ab0 <HAL_GPIO_DeInit+0x204>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d013      	beq.n	8007966 <HAL_GPIO_DeInit+0xba>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a5c      	ldr	r2, [pc, #368]	; (8007ab4 <HAL_GPIO_DeInit+0x208>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00d      	beq.n	8007962 <HAL_GPIO_DeInit+0xb6>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a5b      	ldr	r2, [pc, #364]	; (8007ab8 <HAL_GPIO_DeInit+0x20c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d007      	beq.n	800795e <HAL_GPIO_DeInit+0xb2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a5a      	ldr	r2, [pc, #360]	; (8007abc <HAL_GPIO_DeInit+0x210>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d101      	bne.n	800795a <HAL_GPIO_DeInit+0xae>
 8007956:	2309      	movs	r3, #9
 8007958:	e012      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 800795a:	230a      	movs	r3, #10
 800795c:	e010      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 800795e:	2308      	movs	r3, #8
 8007960:	e00e      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 8007962:	2307      	movs	r3, #7
 8007964:	e00c      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 8007966:	2306      	movs	r3, #6
 8007968:	e00a      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 800796a:	2305      	movs	r3, #5
 800796c:	e008      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 800796e:	2304      	movs	r3, #4
 8007970:	e006      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 8007972:	2303      	movs	r3, #3
 8007974:	e004      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 8007976:	2302      	movs	r3, #2
 8007978:	e002      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <HAL_GPIO_DeInit+0xd4>
 800797e:	2300      	movs	r3, #0
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	f002 0203 	and.w	r2, r2, #3
 8007986:	0092      	lsls	r2, r2, #2
 8007988:	4093      	lsls	r3, r2
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	429a      	cmp	r2, r3
 800798e:	d132      	bne.n	80079f6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007990:	4b4b      	ldr	r3, [pc, #300]	; (8007ac0 <HAL_GPIO_DeInit+0x214>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	43db      	mvns	r3, r3
 8007998:	4949      	ldr	r1, [pc, #292]	; (8007ac0 <HAL_GPIO_DeInit+0x214>)
 800799a:	4013      	ands	r3, r2
 800799c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800799e:	4b48      	ldr	r3, [pc, #288]	; (8007ac0 <HAL_GPIO_DeInit+0x214>)
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	43db      	mvns	r3, r3
 80079a6:	4946      	ldr	r1, [pc, #280]	; (8007ac0 <HAL_GPIO_DeInit+0x214>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80079ac:	4b44      	ldr	r3, [pc, #272]	; (8007ac0 <HAL_GPIO_DeInit+0x214>)
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	43db      	mvns	r3, r3
 80079b4:	4942      	ldr	r1, [pc, #264]	; (8007ac0 <HAL_GPIO_DeInit+0x214>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80079ba:	4b41      	ldr	r3, [pc, #260]	; (8007ac0 <HAL_GPIO_DeInit+0x214>)
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	43db      	mvns	r3, r3
 80079c2:	493f      	ldr	r1, [pc, #252]	; (8007ac0 <HAL_GPIO_DeInit+0x214>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	220f      	movs	r2, #15
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80079d8:	4a2e      	ldr	r2, [pc, #184]	; (8007a94 <HAL_GPIO_DeInit+0x1e8>)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	089b      	lsrs	r3, r3, #2
 80079de:	3302      	adds	r3, #2
 80079e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	43da      	mvns	r2, r3
 80079e8:	482a      	ldr	r0, [pc, #168]	; (8007a94 <HAL_GPIO_DeInit+0x1e8>)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	089b      	lsrs	r3, r3, #2
 80079ee:	400a      	ands	r2, r1
 80079f0:	3302      	adds	r3, #2
 80079f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	2103      	movs	r1, #3
 8007a00:	fa01 f303 	lsl.w	r3, r1, r3
 8007a04:	43db      	mvns	r3, r3
 8007a06:	401a      	ands	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	08da      	lsrs	r2, r3, #3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3208      	adds	r2, #8
 8007a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	220f      	movs	r2, #15
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43db      	mvns	r3, r3
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	08d2      	lsrs	r2, r2, #3
 8007a2c:	4019      	ands	r1, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3208      	adds	r2, #8
 8007a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	2103      	movs	r1, #3
 8007a40:	fa01 f303 	lsl.w	r3, r1, r3
 8007a44:	43db      	mvns	r3, r3
 8007a46:	401a      	ands	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	2101      	movs	r1, #1
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	fa01 f303 	lsl.w	r3, r1, r3
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	401a      	ands	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	2103      	movs	r1, #3
 8007a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6e:	43db      	mvns	r3, r3
 8007a70:	401a      	ands	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b0f      	cmp	r3, #15
 8007a80:	f67f af22 	bls.w	80078c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	40013800 	.word	0x40013800
 8007a98:	40020000 	.word	0x40020000
 8007a9c:	40020400 	.word	0x40020400
 8007aa0:	40020800 	.word	0x40020800
 8007aa4:	40020c00 	.word	0x40020c00
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	40021400 	.word	0x40021400
 8007ab0:	40021800 	.word	0x40021800
 8007ab4:	40021c00 	.word	0x40021c00
 8007ab8:	40022000 	.word	0x40022000
 8007abc:	40022400 	.word	0x40022400
 8007ac0:	40013c00 	.word	0x40013c00

08007ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	807b      	strh	r3, [r7, #2]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ad4:	787b      	ldrb	r3, [r7, #1]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ada:	887a      	ldrh	r2, [r7, #2]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ae0:	e003      	b.n	8007aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	041a      	lsls	r2, r3, #16
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	619a      	str	r2, [r3, #24]
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
	...

08007af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e12b      	b.n	8007d62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fc fca8 	bl	8004474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2224      	movs	r2, #36	; 0x24
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0201 	bic.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b5c:	f002 f876 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 8007b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	4a81      	ldr	r2, [pc, #516]	; (8007d6c <HAL_I2C_Init+0x274>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d807      	bhi.n	8007b7c <HAL_I2C_Init+0x84>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a80      	ldr	r2, [pc, #512]	; (8007d70 <HAL_I2C_Init+0x278>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	bf94      	ite	ls
 8007b74:	2301      	movls	r3, #1
 8007b76:	2300      	movhi	r3, #0
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	e006      	b.n	8007b8a <HAL_I2C_Init+0x92>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4a7d      	ldr	r2, [pc, #500]	; (8007d74 <HAL_I2C_Init+0x27c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	bf94      	ite	ls
 8007b84:	2301      	movls	r3, #1
 8007b86:	2300      	movhi	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e0e7      	b.n	8007d62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4a78      	ldr	r2, [pc, #480]	; (8007d78 <HAL_I2C_Init+0x280>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	0c9b      	lsrs	r3, r3, #18
 8007b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	4a6a      	ldr	r2, [pc, #424]	; (8007d6c <HAL_I2C_Init+0x274>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d802      	bhi.n	8007bcc <HAL_I2C_Init+0xd4>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	e009      	b.n	8007be0 <HAL_I2C_Init+0xe8>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007bd2:	fb02 f303 	mul.w	r3, r2, r3
 8007bd6:	4a69      	ldr	r2, [pc, #420]	; (8007d7c <HAL_I2C_Init+0x284>)
 8007bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bdc:	099b      	lsrs	r3, r3, #6
 8007bde:	3301      	adds	r3, #1
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6812      	ldr	r2, [r2, #0]
 8007be4:	430b      	orrs	r3, r1
 8007be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007bf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	495c      	ldr	r1, [pc, #368]	; (8007d6c <HAL_I2C_Init+0x274>)
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	d819      	bhi.n	8007c34 <HAL_I2C_Init+0x13c>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	1e59      	subs	r1, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c0e:	1c59      	adds	r1, r3, #1
 8007c10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c14:	400b      	ands	r3, r1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <HAL_I2C_Init+0x138>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	1e59      	subs	r1, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c28:	3301      	adds	r3, #1
 8007c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c2e:	e051      	b.n	8007cd4 <HAL_I2C_Init+0x1dc>
 8007c30:	2304      	movs	r3, #4
 8007c32:	e04f      	b.n	8007cd4 <HAL_I2C_Init+0x1dc>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d111      	bne.n	8007c60 <HAL_I2C_Init+0x168>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	1e58      	subs	r0, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6859      	ldr	r1, [r3, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	440b      	add	r3, r1
 8007c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c4e:	3301      	adds	r3, #1
 8007c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bf0c      	ite	eq
 8007c58:	2301      	moveq	r3, #1
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	e012      	b.n	8007c86 <HAL_I2C_Init+0x18e>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	1e58      	subs	r0, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6859      	ldr	r1, [r3, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	0099      	lsls	r1, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c76:	3301      	adds	r3, #1
 8007c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bf0c      	ite	eq
 8007c80:	2301      	moveq	r3, #1
 8007c82:	2300      	movne	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <HAL_I2C_Init+0x196>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e022      	b.n	8007cd4 <HAL_I2C_Init+0x1dc>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10e      	bne.n	8007cb4 <HAL_I2C_Init+0x1bc>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1e58      	subs	r0, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6859      	ldr	r1, [r3, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	440b      	add	r3, r1
 8007ca4:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ca8:	3301      	adds	r3, #1
 8007caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb2:	e00f      	b.n	8007cd4 <HAL_I2C_Init+0x1dc>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	1e58      	subs	r0, r3, #1
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6859      	ldr	r1, [r3, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	0099      	lsls	r1, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cca:	3301      	adds	r3, #1
 8007ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	6809      	ldr	r1, [r1, #0]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6911      	ldr	r1, [r2, #16]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68d2      	ldr	r2, [r2, #12]
 8007d0e:	4311      	orrs	r1, r2
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	430b      	orrs	r3, r1
 8007d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695a      	ldr	r2, [r3, #20]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	000186a0 	.word	0x000186a0
 8007d70:	001e847f 	.word	0x001e847f
 8007d74:	003d08ff 	.word	0x003d08ff
 8007d78:	431bde83 	.word	0x431bde83
 8007d7c:	10624dd3 	.word	0x10624dd3

08007d80 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e021      	b.n	8007dd6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2224      	movs	r2, #36	; 0x24
 8007d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0201 	bic.w	r2, r2, #1
 8007da8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fc fbcc 	bl	8004548 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	817b      	strh	r3, [r7, #10]
 8007df2:	460b      	mov	r3, r1
 8007df4:	813b      	strh	r3, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007dfa:	f7fe fc23 	bl	8006644 <HAL_GetTick>
 8007dfe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	f040 80d9 	bne.w	8007fc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	2319      	movs	r3, #25
 8007e14:	2201      	movs	r2, #1
 8007e16:	496d      	ldr	r1, [pc, #436]	; (8007fcc <HAL_I2C_Mem_Write+0x1ec>)
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 fc8d 	bl	8008738 <I2C_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e24:	2302      	movs	r3, #2
 8007e26:	e0cc      	b.n	8007fc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_I2C_Mem_Write+0x56>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e0c5      	b.n	8007fc2 <HAL_I2C_Mem_Write+0x1e2>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d007      	beq.n	8007e5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2221      	movs	r2, #33	; 0x21
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2240      	movs	r2, #64	; 0x40
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a4d      	ldr	r2, [pc, #308]	; (8007fd0 <HAL_I2C_Mem_Write+0x1f0>)
 8007e9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e9e:	88f8      	ldrh	r0, [r7, #6]
 8007ea0:	893a      	ldrh	r2, [r7, #8]
 8007ea2:	8979      	ldrh	r1, [r7, #10]
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	4603      	mov	r3, r0
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fac4 	bl	800843c <I2C_RequestMemoryWrite>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d052      	beq.n	8007f60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e081      	b.n	8007fc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 fd0e 	bl	80088e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00d      	beq.n	8007eea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d107      	bne.n	8007ee6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ee4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e06b      	b.n	8007fc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	781a      	ldrb	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f04:	3b01      	subs	r3, #1
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d11b      	bne.n	8007f60 <HAL_I2C_Mem_Write+0x180>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d017      	beq.n	8007f60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	781a      	ldrb	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1aa      	bne.n	8007ebe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 fcfa 	bl	8008966 <I2C_WaitOnBTFFlagUntilTimeout>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00d      	beq.n	8007f94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d107      	bne.n	8007f90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e016      	b.n	8007fc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e000      	b.n	8007fc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007fc0:	2302      	movs	r3, #2
  }
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	00100002 	.word	0x00100002
 8007fd0:	ffff0000 	.word	0xffff0000

08007fd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08c      	sub	sp, #48	; 0x30
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	4608      	mov	r0, r1
 8007fde:	4611      	mov	r1, r2
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	817b      	strh	r3, [r7, #10]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	813b      	strh	r3, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fee:	f7fe fb29 	bl	8006644 <HAL_GetTick>
 8007ff2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	f040 8208 	bne.w	8008412 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	2319      	movs	r3, #25
 8008008:	2201      	movs	r2, #1
 800800a:	497b      	ldr	r1, [pc, #492]	; (80081f8 <HAL_I2C_Mem_Read+0x224>)
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fb93 	bl	8008738 <I2C_WaitOnFlagUntilTimeout>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008018:	2302      	movs	r3, #2
 800801a:	e1fb      	b.n	8008414 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008022:	2b01      	cmp	r3, #1
 8008024:	d101      	bne.n	800802a <HAL_I2C_Mem_Read+0x56>
 8008026:	2302      	movs	r3, #2
 8008028:	e1f4      	b.n	8008414 <HAL_I2C_Mem_Read+0x440>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b01      	cmp	r3, #1
 800803e:	d007      	beq.n	8008050 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0201 	orr.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800805e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2222      	movs	r2, #34	; 0x22
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2240      	movs	r2, #64	; 0x40
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008086:	b29a      	uxth	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a5b      	ldr	r2, [pc, #364]	; (80081fc <HAL_I2C_Mem_Read+0x228>)
 8008090:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008092:	88f8      	ldrh	r0, [r7, #6]
 8008094:	893a      	ldrh	r2, [r7, #8]
 8008096:	8979      	ldrh	r1, [r7, #10]
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	4603      	mov	r3, r0
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 fa60 	bl	8008568 <I2C_RequestMemoryRead>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e1b0      	b.n	8008414 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d113      	bne.n	80080e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ba:	2300      	movs	r3, #0
 80080bc:	623b      	str	r3, [r7, #32]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	623b      	str	r3, [r7, #32]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	623b      	str	r3, [r7, #32]
 80080ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	e184      	b.n	80083ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d11b      	bne.n	8008122 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080fa:	2300      	movs	r3, #0
 80080fc:	61fb      	str	r3, [r7, #28]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	61fb      	str	r3, [r7, #28]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	61fb      	str	r3, [r7, #28]
 800810e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e164      	b.n	80083ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008126:	2b02      	cmp	r3, #2
 8008128:	d11b      	bne.n	8008162 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008138:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008148:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800814a:	2300      	movs	r3, #0
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	e144      	b.n	80083ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008178:	e138      	b.n	80083ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800817e:	2b03      	cmp	r3, #3
 8008180:	f200 80f1 	bhi.w	8008366 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008188:	2b01      	cmp	r3, #1
 800818a:	d123      	bne.n	80081d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800818c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 fc29 	bl	80089e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e139      	b.n	8008414 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29a      	uxth	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	3b01      	subs	r3, #1
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081d2:	e10b      	b.n	80083ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d14e      	bne.n	800827a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	2200      	movs	r2, #0
 80081e4:	4906      	ldr	r1, [pc, #24]	; (8008200 <HAL_I2C_Mem_Read+0x22c>)
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 faa6 	bl	8008738 <I2C_WaitOnFlagUntilTimeout>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d008      	beq.n	8008204 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e10e      	b.n	8008414 <HAL_I2C_Mem_Read+0x440>
 80081f6:	bf00      	nop
 80081f8:	00100002 	.word	0x00100002
 80081fc:	ffff0000 	.word	0xffff0000
 8008200:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008212:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	691a      	ldr	r2, [r3, #16]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	b2d2      	uxtb	r2, r2
 8008220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823c:	b29b      	uxth	r3, r3
 800823e:	3b01      	subs	r3, #1
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	b2d2      	uxtb	r2, r2
 8008252:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800826e:	b29b      	uxth	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008278:	e0b8      	b.n	80083ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	2200      	movs	r2, #0
 8008282:	4966      	ldr	r1, [pc, #408]	; (800841c <HAL_I2C_Mem_Read+0x448>)
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 fa57 	bl	8008738 <I2C_WaitOnFlagUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e0bf      	b.n	8008414 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	b2d2      	uxtb	r2, r2
 80082b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	3b01      	subs	r3, #1
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	2200      	movs	r2, #0
 80082de:	494f      	ldr	r1, [pc, #316]	; (800841c <HAL_I2C_Mem_Read+0x448>)
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fa29 	bl	8008738 <I2C_WaitOnFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e091      	b.n	8008414 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800831c:	3b01      	subs	r3, #1
 800831e:	b29a      	uxth	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008328:	b29b      	uxth	r3, r3
 800832a:	3b01      	subs	r3, #1
 800832c:	b29a      	uxth	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	b2d2      	uxtb	r2, r2
 800833e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835a:	b29b      	uxth	r3, r3
 800835c:	3b01      	subs	r3, #1
 800835e:	b29a      	uxth	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008364:	e042      	b.n	80083ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008368:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fb3c 	bl	80089e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e04c      	b.n	8008414 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	691a      	ldr	r2, [r3, #16]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	b2d2      	uxtb	r2, r2
 8008386:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008396:	3b01      	subs	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f003 0304 	and.w	r3, r3, #4
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d118      	bne.n	80083ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	b2d2      	uxtb	r2, r2
 80083c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f47f aec2 	bne.w	800817a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	e000      	b.n	8008414 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008412:	2302      	movs	r3, #2
  }
}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	; 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	00010004 	.word	0x00010004

08008420 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842e:	b2db      	uxtb	r3, r3
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	4608      	mov	r0, r1
 8008446:	4611      	mov	r1, r2
 8008448:	461a      	mov	r2, r3
 800844a:	4603      	mov	r3, r0
 800844c:	817b      	strh	r3, [r7, #10]
 800844e:	460b      	mov	r3, r1
 8008450:	813b      	strh	r3, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008464:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	2200      	movs	r2, #0
 800846e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 f960 	bl	8008738 <I2C_WaitOnFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00d      	beq.n	800849a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848c:	d103      	bne.n	8008496 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008494:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e05f      	b.n	800855a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800849a:	897b      	ldrh	r3, [r7, #10]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	6a3a      	ldr	r2, [r7, #32]
 80084ae:	492d      	ldr	r1, [pc, #180]	; (8008564 <I2C_RequestMemoryWrite+0x128>)
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 f998 	bl	80087e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e04c      	b.n	800855a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	617b      	str	r3, [r7, #20]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d8:	6a39      	ldr	r1, [r7, #32]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fa02 	bl	80088e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00d      	beq.n	8008502 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d107      	bne.n	80084fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e02b      	b.n	800855a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d105      	bne.n	8008514 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008508:	893b      	ldrh	r3, [r7, #8]
 800850a:	b2da      	uxtb	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	611a      	str	r2, [r3, #16]
 8008512:	e021      	b.n	8008558 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008514:	893b      	ldrh	r3, [r7, #8]
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	b29b      	uxth	r3, r3
 800851a:	b2da      	uxtb	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008524:	6a39      	ldr	r1, [r7, #32]
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 f9dc 	bl	80088e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00d      	beq.n	800854e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	2b04      	cmp	r3, #4
 8008538:	d107      	bne.n	800854a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008548:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e005      	b.n	800855a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800854e:	893b      	ldrh	r3, [r7, #8]
 8008550:	b2da      	uxtb	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	00010002 	.word	0x00010002

08008568 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af02      	add	r7, sp, #8
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	4608      	mov	r0, r1
 8008572:	4611      	mov	r1, r2
 8008574:	461a      	mov	r2, r3
 8008576:	4603      	mov	r3, r0
 8008578:	817b      	strh	r3, [r7, #10]
 800857a:	460b      	mov	r3, r1
 800857c:	813b      	strh	r3, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008590:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 f8c2 	bl	8008738 <I2C_WaitOnFlagUntilTimeout>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00d      	beq.n	80085d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c8:	d103      	bne.n	80085d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e0aa      	b.n	800872c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085d6:	897b      	ldrh	r3, [r7, #10]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	461a      	mov	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	6a3a      	ldr	r2, [r7, #32]
 80085ea:	4952      	ldr	r1, [pc, #328]	; (8008734 <I2C_RequestMemoryRead+0x1cc>)
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 f8fa 	bl	80087e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e097      	b.n	800872c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085fc:	2300      	movs	r3, #0
 80085fe:	617b      	str	r3, [r7, #20]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008614:	6a39      	ldr	r1, [r7, #32]
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 f964 	bl	80088e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00d      	beq.n	800863e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008626:	2b04      	cmp	r3, #4
 8008628:	d107      	bne.n	800863a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008638:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e076      	b.n	800872c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800863e:	88fb      	ldrh	r3, [r7, #6]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d105      	bne.n	8008650 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008644:	893b      	ldrh	r3, [r7, #8]
 8008646:	b2da      	uxtb	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	611a      	str	r2, [r3, #16]
 800864e:	e021      	b.n	8008694 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008650:	893b      	ldrh	r3, [r7, #8]
 8008652:	0a1b      	lsrs	r3, r3, #8
 8008654:	b29b      	uxth	r3, r3
 8008656:	b2da      	uxtb	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800865e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008660:	6a39      	ldr	r1, [r7, #32]
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f93e 	bl	80088e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00d      	beq.n	800868a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	2b04      	cmp	r3, #4
 8008674:	d107      	bne.n	8008686 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008684:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e050      	b.n	800872c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800868a:	893b      	ldrh	r3, [r7, #8]
 800868c:	b2da      	uxtb	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008696:	6a39      	ldr	r1, [r7, #32]
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 f923 	bl	80088e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00d      	beq.n	80086c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	d107      	bne.n	80086bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e035      	b.n	800872c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f82b 	bl	8008738 <I2C_WaitOnFlagUntilTimeout>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00d      	beq.n	8008704 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086f6:	d103      	bne.n	8008700 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e013      	b.n	800872c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008704:	897b      	ldrh	r3, [r7, #10]
 8008706:	b2db      	uxtb	r3, r3
 8008708:	f043 0301 	orr.w	r3, r3, #1
 800870c:	b2da      	uxtb	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	6a3a      	ldr	r2, [r7, #32]
 8008718:	4906      	ldr	r1, [pc, #24]	; (8008734 <I2C_RequestMemoryRead+0x1cc>)
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 f863 	bl	80087e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	00010002 	.word	0x00010002

08008738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	4613      	mov	r3, r2
 8008746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008748:	e025      	b.n	8008796 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d021      	beq.n	8008796 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008752:	f7fd ff77 	bl	8006644 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	d302      	bcc.n	8008768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d116      	bne.n	8008796 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2220      	movs	r2, #32
 8008772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	f043 0220 	orr.w	r2, r3, #32
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e023      	b.n	80087de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	0c1b      	lsrs	r3, r3, #16
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	d10d      	bne.n	80087bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	43da      	mvns	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4013      	ands	r3, r2
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	bf0c      	ite	eq
 80087b2:	2301      	moveq	r3, #1
 80087b4:	2300      	movne	r3, #0
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	e00c      	b.n	80087d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	43da      	mvns	r2, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4013      	ands	r3, r2
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bf0c      	ite	eq
 80087ce:	2301      	moveq	r3, #1
 80087d0:	2300      	movne	r3, #0
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d0b6      	beq.n	800874a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b084      	sub	sp, #16
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	607a      	str	r2, [r7, #4]
 80087f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087f4:	e051      	b.n	800889a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008804:	d123      	bne.n	800884e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008814:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800881e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f043 0204 	orr.w	r2, r3, #4
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e046      	b.n	80088dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008854:	d021      	beq.n	800889a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008856:	f7fd fef5 	bl	8006644 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d302      	bcc.n	800886c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d116      	bne.n	800889a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2220      	movs	r2, #32
 8008876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	f043 0220 	orr.w	r2, r3, #32
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e020      	b.n	80088dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	0c1b      	lsrs	r3, r3, #16
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d10c      	bne.n	80088be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	43da      	mvns	r2, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4013      	ands	r3, r2
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bf14      	ite	ne
 80088b6:	2301      	movne	r3, #1
 80088b8:	2300      	moveq	r3, #0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	e00b      	b.n	80088d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	43da      	mvns	r2, r3
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	4013      	ands	r3, r2
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	bf14      	ite	ne
 80088d0:	2301      	movne	r3, #1
 80088d2:	2300      	moveq	r3, #0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d18d      	bne.n	80087f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088f0:	e02d      	b.n	800894e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 f8ce 	bl	8008a94 <I2C_IsAcknowledgeFailed>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e02d      	b.n	800895e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008908:	d021      	beq.n	800894e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800890a:	f7fd fe9b 	bl	8006644 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	429a      	cmp	r2, r3
 8008918:	d302      	bcc.n	8008920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d116      	bne.n	800894e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2220      	movs	r2, #32
 800892a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	f043 0220 	orr.w	r2, r3, #32
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e007      	b.n	800895e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008958:	2b80      	cmp	r3, #128	; 0x80
 800895a:	d1ca      	bne.n	80088f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008972:	e02d      	b.n	80089d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 f88d 	bl	8008a94 <I2C_IsAcknowledgeFailed>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e02d      	b.n	80089e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898a:	d021      	beq.n	80089d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800898c:	f7fd fe5a 	bl	8006644 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	429a      	cmp	r2, r3
 800899a:	d302      	bcc.n	80089a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d116      	bne.n	80089d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089bc:	f043 0220 	orr.w	r2, r3, #32
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e007      	b.n	80089e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d1ca      	bne.n	8008974 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089f4:	e042      	b.n	8008a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b10      	cmp	r3, #16
 8008a02:	d119      	bne.n	8008a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f06f 0210 	mvn.w	r2, #16
 8008a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e029      	b.n	8008a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a38:	f7fd fe04 	bl	8006644 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d302      	bcc.n	8008a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d116      	bne.n	8008a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a68:	f043 0220 	orr.w	r2, r3, #32
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e007      	b.n	8008a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a86:	2b40      	cmp	r3, #64	; 0x40
 8008a88:	d1b5      	bne.n	80089f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aaa:	d11b      	bne.n	8008ae4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ab4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad0:	f043 0204 	orr.w	r2, r3, #4
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b20      	cmp	r3, #32
 8008b06:	d129      	bne.n	8008b5c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2224      	movs	r2, #36	; 0x24
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0201 	bic.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0210 	bic.w	r2, r2, #16
 8008b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0201 	orr.w	r2, r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	e000      	b.n	8008b5e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008b5c:	2302      	movs	r3, #2
  }
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b085      	sub	sp, #20
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d12a      	bne.n	8008bda <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2224      	movs	r2, #36	; 0x24
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008ba4:	89fb      	ldrh	r3, [r7, #14]
 8008ba6:	f023 030f 	bic.w	r3, r3, #15
 8008baa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	89fb      	ldrh	r3, [r7, #14]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	89fa      	ldrh	r2, [r7, #14]
 8008bbc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0201 	orr.w	r2, r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e000      	b.n	8008bdc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008bda:	2302      	movs	r3, #2
  }
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e0bf      	b.n	8008d7a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d106      	bne.n	8008c14 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fb fd40 	bl	8004694 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008c2a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6999      	ldr	r1, [r3, #24]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008c40:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6899      	ldr	r1, [r3, #8]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	4b4a      	ldr	r3, [pc, #296]	; (8008d84 <HAL_LTDC_Init+0x19c>)
 8008c5c:	400b      	ands	r3, r1
 8008c5e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	041b      	lsls	r3, r3, #16
 8008c66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6899      	ldr	r1, [r3, #8]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	431a      	orrs	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68d9      	ldr	r1, [r3, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	4b3e      	ldr	r3, [pc, #248]	; (8008d84 <HAL_LTDC_Init+0x19c>)
 8008c8a:	400b      	ands	r3, r1
 8008c8c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	041b      	lsls	r3, r3, #16
 8008c94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68d9      	ldr	r1, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a1a      	ldr	r2, [r3, #32]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6919      	ldr	r1, [r3, #16]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4b33      	ldr	r3, [pc, #204]	; (8008d84 <HAL_LTDC_Init+0x19c>)
 8008cb8:	400b      	ands	r3, r1
 8008cba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	041b      	lsls	r3, r3, #16
 8008cc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6919      	ldr	r1, [r3, #16]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6959      	ldr	r1, [r3, #20]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	4b27      	ldr	r3, [pc, #156]	; (8008d84 <HAL_LTDC_Init+0x19c>)
 8008ce6:	400b      	ands	r3, r1
 8008ce8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	041b      	lsls	r3, r3, #16
 8008cf0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6959      	ldr	r1, [r3, #20]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d0e:	021b      	lsls	r3, r3, #8
 8008d10:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008d18:	041b      	lsls	r3, r3, #16
 8008d1a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0206 	orr.w	r2, r2, #6
 8008d56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699a      	ldr	r2, [r3, #24]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0201 	orr.w	r2, r2, #1
 8008d66:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	f000f800 	.word	0xf000f800

08008d88 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f003 0304 	and.w	r3, r3, #4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d023      	beq.n	8008df2 <HAL_LTDC_IRQHandler+0x6a>
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d01e      	beq.n	8008df2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f022 0204 	bic.w	r2, r2, #4
 8008dc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2204      	movs	r2, #4
 8008dca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008dd2:	f043 0201 	orr.w	r2, r3, #1
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2204      	movs	r2, #4
 8008de0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f86f 	bl	8008ed0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d023      	beq.n	8008e44 <HAL_LTDC_IRQHandler+0xbc>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d01e      	beq.n	8008e44 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0202 	bic.w	r2, r2, #2
 8008e14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e24:	f043 0202 	orr.w	r2, r3, #2
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2204      	movs	r2, #4
 8008e32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f846 	bl	8008ed0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d01b      	beq.n	8008e86 <HAL_LTDC_IRQHandler+0xfe>
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d016      	beq.n	8008e86 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0201 	bic.w	r2, r2, #1
 8008e66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f00d ff5d 	bl	8016d40 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f003 0308 	and.w	r3, r3, #8
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01b      	beq.n	8008ec8 <HAL_LTDC_IRQHandler+0x140>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d016      	beq.n	8008ec8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0208 	bic.w	r2, r2, #8
 8008ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2208      	movs	r2, #8
 8008eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f80e 	bl	8008ee4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008ec8:	bf00      	nop
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008ef8:	b5b0      	push	{r4, r5, r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <HAL_LTDC_ConfigLayer+0x1a>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e02c      	b.n	8008f6c <HAL_LTDC_ConfigLayer+0x74>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2134      	movs	r1, #52	; 0x34
 8008f28:	fb01 f303 	mul.w	r3, r1, r3
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	4614      	mov	r4, r2
 8008f36:	461d      	mov	r5, r3
 8008f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	68b9      	ldr	r1, [r7, #8]
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 f849 	bl	8008fe4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2201      	movs	r2, #1
 8008f58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bdb0      	pop	{r4, r5, r7, pc}

08008f74 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <HAL_LTDC_ProgramLineEvent+0x18>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e023      	b.n	8008fd4 <HAL_LTDC_ProgramLineEvent+0x60>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0201 	bic.w	r2, r2, #1
 8008faa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8008fac:	4a0c      	ldr	r2, [pc, #48]	; (8008fe0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f042 0201 	orr.w	r2, r2, #1
 8008fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	40016800 	.word	0x40016800

08008fe4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b089      	sub	sp, #36	; 0x24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	0c1b      	lsrs	r3, r3, #16
 8008ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009000:	4413      	add	r3, r2
 8009002:	041b      	lsls	r3, r3, #16
 8009004:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	01db      	lsls	r3, r3, #7
 8009010:	4413      	add	r3, r2
 8009012:	3384      	adds	r3, #132	; 0x84
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	6812      	ldr	r2, [r2, #0]
 800901a:	4611      	mov	r1, r2
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	01d2      	lsls	r2, r2, #7
 8009020:	440a      	add	r2, r1
 8009022:	3284      	adds	r2, #132	; 0x84
 8009024:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009028:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	0c1b      	lsrs	r3, r3, #16
 8009036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800903a:	4413      	add	r3, r2
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4619      	mov	r1, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	01db      	lsls	r3, r3, #7
 8009048:	440b      	add	r3, r1
 800904a:	3384      	adds	r3, #132	; 0x84
 800904c:	4619      	mov	r1, r3
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4313      	orrs	r3, r2
 8009052:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	68da      	ldr	r2, [r3, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009062:	4413      	add	r3, r2
 8009064:	041b      	lsls	r3, r3, #16
 8009066:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	461a      	mov	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	01db      	lsls	r3, r3, #7
 8009072:	4413      	add	r3, r2
 8009074:	3384      	adds	r3, #132	; 0x84
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	6812      	ldr	r2, [r2, #0]
 800907c:	4611      	mov	r1, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	01d2      	lsls	r2, r2, #7
 8009082:	440a      	add	r2, r1
 8009084:	3284      	adds	r2, #132	; 0x84
 8009086:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800908a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800909a:	4413      	add	r3, r2
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4619      	mov	r1, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	01db      	lsls	r3, r3, #7
 80090a8:	440b      	add	r3, r1
 80090aa:	3384      	adds	r3, #132	; 0x84
 80090ac:	4619      	mov	r1, r3
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	01db      	lsls	r3, r3, #7
 80090be:	4413      	add	r3, r2
 80090c0:	3384      	adds	r3, #132	; 0x84
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	6812      	ldr	r2, [r2, #0]
 80090c8:	4611      	mov	r1, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	01d2      	lsls	r2, r2, #7
 80090ce:	440a      	add	r2, r1
 80090d0:	3284      	adds	r2, #132	; 0x84
 80090d2:	f023 0307 	bic.w	r3, r3, #7
 80090d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	01db      	lsls	r3, r3, #7
 80090e2:	4413      	add	r3, r2
 80090e4:	3384      	adds	r3, #132	; 0x84
 80090e6:	461a      	mov	r2, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80090f4:	021b      	lsls	r3, r3, #8
 80090f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80090fe:	041b      	lsls	r3, r3, #16
 8009100:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	061b      	lsls	r3, r3, #24
 8009108:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	01db      	lsls	r3, r3, #7
 8009114:	4413      	add	r3, r2
 8009116:	3384      	adds	r3, #132	; 0x84
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	01db      	lsls	r3, r3, #7
 8009124:	4413      	add	r3, r2
 8009126:	3384      	adds	r3, #132	; 0x84
 8009128:	461a      	mov	r2, r3
 800912a:	2300      	movs	r3, #0
 800912c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009134:	461a      	mov	r2, r3
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	431a      	orrs	r2, r3
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	431a      	orrs	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4619      	mov	r1, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	01db      	lsls	r3, r3, #7
 8009148:	440b      	add	r3, r1
 800914a:	3384      	adds	r3, #132	; 0x84
 800914c:	4619      	mov	r1, r3
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	461a      	mov	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	01db      	lsls	r3, r3, #7
 800915e:	4413      	add	r3, r2
 8009160:	3384      	adds	r3, #132	; 0x84
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	4611      	mov	r1, r2
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	01d2      	lsls	r2, r2, #7
 800916e:	440a      	add	r2, r1
 8009170:	3284      	adds	r2, #132	; 0x84
 8009172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009176:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	01db      	lsls	r3, r3, #7
 8009182:	4413      	add	r3, r2
 8009184:	3384      	adds	r3, #132	; 0x84
 8009186:	461a      	mov	r2, r3
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	01db      	lsls	r3, r3, #7
 8009198:	4413      	add	r3, r2
 800919a:	3384      	adds	r3, #132	; 0x84
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	6812      	ldr	r2, [r2, #0]
 80091a2:	4611      	mov	r1, r2
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	01d2      	lsls	r2, r2, #7
 80091a8:	440a      	add	r2, r1
 80091aa:	3284      	adds	r2, #132	; 0x84
 80091ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80091b0:	f023 0307 	bic.w	r3, r3, #7
 80091b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	69da      	ldr	r2, [r3, #28]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	68f9      	ldr	r1, [r7, #12]
 80091c0:	6809      	ldr	r1, [r1, #0]
 80091c2:	4608      	mov	r0, r1
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	01c9      	lsls	r1, r1, #7
 80091c8:	4401      	add	r1, r0
 80091ca:	3184      	adds	r1, #132	; 0x84
 80091cc:	4313      	orrs	r3, r2
 80091ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	01db      	lsls	r3, r3, #7
 80091da:	4413      	add	r3, r2
 80091dc:	3384      	adds	r3, #132	; 0x84
 80091de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	01db      	lsls	r3, r3, #7
 80091ea:	4413      	add	r3, r2
 80091ec:	3384      	adds	r3, #132	; 0x84
 80091ee:	461a      	mov	r2, r3
 80091f0:	2300      	movs	r3, #0
 80091f2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	01db      	lsls	r3, r3, #7
 80091fe:	4413      	add	r3, r2
 8009200:	3384      	adds	r3, #132	; 0x84
 8009202:	461a      	mov	r2, r3
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d102      	bne.n	8009218 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8009212:	2304      	movs	r3, #4
 8009214:	61fb      	str	r3, [r7, #28]
 8009216:	e01b      	b.n	8009250 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d102      	bne.n	8009226 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009220:	2303      	movs	r3, #3
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	e014      	b.n	8009250 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	2b04      	cmp	r3, #4
 800922c:	d00b      	beq.n	8009246 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009232:	2b02      	cmp	r3, #2
 8009234:	d007      	beq.n	8009246 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800923a:	2b03      	cmp	r3, #3
 800923c:	d003      	beq.n	8009246 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009242:	2b07      	cmp	r3, #7
 8009244:	d102      	bne.n	800924c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8009246:	2302      	movs	r3, #2
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	e001      	b.n	8009250 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800924c:	2301      	movs	r3, #1
 800924e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	01db      	lsls	r3, r3, #7
 800925a:	4413      	add	r3, r2
 800925c:	3384      	adds	r3, #132	; 0x84
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	6812      	ldr	r2, [r2, #0]
 8009264:	4611      	mov	r1, r2
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	01d2      	lsls	r2, r2, #7
 800926a:	440a      	add	r2, r1
 800926c:	3284      	adds	r2, #132	; 0x84
 800926e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009272:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	fb02 f303 	mul.w	r3, r2, r3
 800927e:	041a      	lsls	r2, r3, #16
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	6859      	ldr	r1, [r3, #4]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	1acb      	subs	r3, r1, r3
 800928a:	69f9      	ldr	r1, [r7, #28]
 800928c:	fb01 f303 	mul.w	r3, r1, r3
 8009290:	3303      	adds	r3, #3
 8009292:	68f9      	ldr	r1, [r7, #12]
 8009294:	6809      	ldr	r1, [r1, #0]
 8009296:	4608      	mov	r0, r1
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	01c9      	lsls	r1, r1, #7
 800929c:	4401      	add	r1, r0
 800929e:	3184      	adds	r1, #132	; 0x84
 80092a0:	4313      	orrs	r3, r2
 80092a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	461a      	mov	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	01db      	lsls	r3, r3, #7
 80092ae:	4413      	add	r3, r2
 80092b0:	3384      	adds	r3, #132	; 0x84
 80092b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	6812      	ldr	r2, [r2, #0]
 80092b8:	4611      	mov	r1, r2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	01d2      	lsls	r2, r2, #7
 80092be:	440a      	add	r2, r1
 80092c0:	3284      	adds	r2, #132	; 0x84
 80092c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80092c6:	f023 0307 	bic.w	r3, r3, #7
 80092ca:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	01db      	lsls	r3, r3, #7
 80092d6:	4413      	add	r3, r2
 80092d8:	3384      	adds	r3, #132	; 0x84
 80092da:	461a      	mov	r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	01db      	lsls	r3, r3, #7
 80092ec:	4413      	add	r3, r2
 80092ee:	3384      	adds	r3, #132	; 0x84
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	6812      	ldr	r2, [r2, #0]
 80092f6:	4611      	mov	r1, r2
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	01d2      	lsls	r2, r2, #7
 80092fc:	440a      	add	r2, r1
 80092fe:	3284      	adds	r2, #132	; 0x84
 8009300:	f043 0301 	orr.w	r3, r3, #1
 8009304:	6013      	str	r3, [r2, #0]
}
 8009306:	bf00      	nop
 8009308:	3724      	adds	r7, #36	; 0x24
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
	...

08009314 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800931e:	2300      	movs	r3, #0
 8009320:	603b      	str	r3, [r7, #0]
 8009322:	4b20      	ldr	r3, [pc, #128]	; (80093a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	4a1f      	ldr	r2, [pc, #124]	; (80093a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8009328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800932c:	6413      	str	r3, [r2, #64]	; 0x40
 800932e:	4b1d      	ldr	r3, [pc, #116]	; (80093a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800933c:	2201      	movs	r2, #1
 800933e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009340:	f7fd f980 	bl	8006644 <HAL_GetTick>
 8009344:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009346:	e009      	b.n	800935c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009348:	f7fd f97c 	bl	8006644 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009356:	d901      	bls.n	800935c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e01f      	b.n	800939c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800935c:	4b13      	ldr	r3, [pc, #76]	; (80093ac <HAL_PWREx_EnableOverDrive+0x98>)
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009368:	d1ee      	bne.n	8009348 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800936a:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800936c:	2201      	movs	r2, #1
 800936e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009370:	f7fd f968 	bl	8006644 <HAL_GetTick>
 8009374:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009376:	e009      	b.n	800938c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009378:	f7fd f964 	bl	8006644 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009386:	d901      	bls.n	800938c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e007      	b.n	800939c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800938c:	4b07      	ldr	r3, [pc, #28]	; (80093ac <HAL_PWREx_EnableOverDrive+0x98>)
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009398:	d1ee      	bne.n	8009378 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	40023800 	.word	0x40023800
 80093a8:	420e0040 	.word	0x420e0040
 80093ac:	40007000 	.word	0x40007000
 80093b0:	420e0044 	.word	0x420e0044

080093b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e264      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d075      	beq.n	80094be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80093d2:	4ba3      	ldr	r3, [pc, #652]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 030c 	and.w	r3, r3, #12
 80093da:	2b04      	cmp	r3, #4
 80093dc:	d00c      	beq.n	80093f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093de:	4ba0      	ldr	r3, [pc, #640]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80093e6:	2b08      	cmp	r3, #8
 80093e8:	d112      	bne.n	8009410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093ea:	4b9d      	ldr	r3, [pc, #628]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093f6:	d10b      	bne.n	8009410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093f8:	4b99      	ldr	r3, [pc, #612]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d05b      	beq.n	80094bc <HAL_RCC_OscConfig+0x108>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d157      	bne.n	80094bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e23f      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009418:	d106      	bne.n	8009428 <HAL_RCC_OscConfig+0x74>
 800941a:	4b91      	ldr	r3, [pc, #580]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a90      	ldr	r2, [pc, #576]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	e01d      	b.n	8009464 <HAL_RCC_OscConfig+0xb0>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009430:	d10c      	bne.n	800944c <HAL_RCC_OscConfig+0x98>
 8009432:	4b8b      	ldr	r3, [pc, #556]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a8a      	ldr	r2, [pc, #552]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	4b88      	ldr	r3, [pc, #544]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a87      	ldr	r2, [pc, #540]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	e00b      	b.n	8009464 <HAL_RCC_OscConfig+0xb0>
 800944c:	4b84      	ldr	r3, [pc, #528]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a83      	ldr	r2, [pc, #524]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	4b81      	ldr	r3, [pc, #516]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a80      	ldr	r2, [pc, #512]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 800945e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d013      	beq.n	8009494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800946c:	f7fd f8ea 	bl	8006644 <HAL_GetTick>
 8009470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009472:	e008      	b.n	8009486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009474:	f7fd f8e6 	bl	8006644 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	2b64      	cmp	r3, #100	; 0x64
 8009480:	d901      	bls.n	8009486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e204      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009486:	4b76      	ldr	r3, [pc, #472]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0f0      	beq.n	8009474 <HAL_RCC_OscConfig+0xc0>
 8009492:	e014      	b.n	80094be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009494:	f7fd f8d6 	bl	8006644 <HAL_GetTick>
 8009498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800949a:	e008      	b.n	80094ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800949c:	f7fd f8d2 	bl	8006644 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	2b64      	cmp	r3, #100	; 0x64
 80094a8:	d901      	bls.n	80094ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e1f0      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094ae:	4b6c      	ldr	r3, [pc, #432]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1f0      	bne.n	800949c <HAL_RCC_OscConfig+0xe8>
 80094ba:	e000      	b.n	80094be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d063      	beq.n	8009592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094ca:	4b65      	ldr	r3, [pc, #404]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f003 030c 	and.w	r3, r3, #12
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00b      	beq.n	80094ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094d6:	4b62      	ldr	r3, [pc, #392]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094de:	2b08      	cmp	r3, #8
 80094e0:	d11c      	bne.n	800951c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094e2:	4b5f      	ldr	r3, [pc, #380]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d116      	bne.n	800951c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094ee:	4b5c      	ldr	r3, [pc, #368]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <HAL_RCC_OscConfig+0x152>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d001      	beq.n	8009506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e1c4      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009506:	4b56      	ldr	r3, [pc, #344]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	4952      	ldr	r1, [pc, #328]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009516:	4313      	orrs	r3, r2
 8009518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800951a:	e03a      	b.n	8009592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d020      	beq.n	8009566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009524:	4b4f      	ldr	r3, [pc, #316]	; (8009664 <HAL_RCC_OscConfig+0x2b0>)
 8009526:	2201      	movs	r2, #1
 8009528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800952a:	f7fd f88b 	bl	8006644 <HAL_GetTick>
 800952e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009530:	e008      	b.n	8009544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009532:	f7fd f887 	bl	8006644 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	2b02      	cmp	r3, #2
 800953e:	d901      	bls.n	8009544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	e1a5      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009544:	4b46      	ldr	r3, [pc, #280]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0302 	and.w	r3, r3, #2
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0f0      	beq.n	8009532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009550:	4b43      	ldr	r3, [pc, #268]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	00db      	lsls	r3, r3, #3
 800955e:	4940      	ldr	r1, [pc, #256]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009560:	4313      	orrs	r3, r2
 8009562:	600b      	str	r3, [r1, #0]
 8009564:	e015      	b.n	8009592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009566:	4b3f      	ldr	r3, [pc, #252]	; (8009664 <HAL_RCC_OscConfig+0x2b0>)
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956c:	f7fd f86a 	bl	8006644 <HAL_GetTick>
 8009570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009572:	e008      	b.n	8009586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009574:	f7fd f866 	bl	8006644 <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d901      	bls.n	8009586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e184      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009586:	4b36      	ldr	r3, [pc, #216]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f0      	bne.n	8009574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0308 	and.w	r3, r3, #8
 800959a:	2b00      	cmp	r3, #0
 800959c:	d030      	beq.n	8009600 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d016      	beq.n	80095d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095a6:	4b30      	ldr	r3, [pc, #192]	; (8009668 <HAL_RCC_OscConfig+0x2b4>)
 80095a8:	2201      	movs	r2, #1
 80095aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ac:	f7fd f84a 	bl	8006644 <HAL_GetTick>
 80095b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095b2:	e008      	b.n	80095c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095b4:	f7fd f846 	bl	8006644 <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d901      	bls.n	80095c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e164      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095c6:	4b26      	ldr	r3, [pc, #152]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80095c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0f0      	beq.n	80095b4 <HAL_RCC_OscConfig+0x200>
 80095d2:	e015      	b.n	8009600 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095d4:	4b24      	ldr	r3, [pc, #144]	; (8009668 <HAL_RCC_OscConfig+0x2b4>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095da:	f7fd f833 	bl	8006644 <HAL_GetTick>
 80095de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095e0:	e008      	b.n	80095f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095e2:	f7fd f82f 	bl	8006644 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e14d      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095f4:	4b1a      	ldr	r3, [pc, #104]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 80095f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1f0      	bne.n	80095e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 80a0 	beq.w	800974e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009612:	4b13      	ldr	r3, [pc, #76]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10f      	bne.n	800963e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800961e:	2300      	movs	r3, #0
 8009620:	60bb      	str	r3, [r7, #8]
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	4a0e      	ldr	r2, [pc, #56]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800962c:	6413      	str	r3, [r2, #64]	; 0x40
 800962e:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <HAL_RCC_OscConfig+0x2ac>)
 8009630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009636:	60bb      	str	r3, [r7, #8]
 8009638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800963a:	2301      	movs	r3, #1
 800963c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800963e:	4b0b      	ldr	r3, [pc, #44]	; (800966c <HAL_RCC_OscConfig+0x2b8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009646:	2b00      	cmp	r3, #0
 8009648:	d121      	bne.n	800968e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800964a:	4b08      	ldr	r3, [pc, #32]	; (800966c <HAL_RCC_OscConfig+0x2b8>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a07      	ldr	r2, [pc, #28]	; (800966c <HAL_RCC_OscConfig+0x2b8>)
 8009650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009656:	f7fc fff5 	bl	8006644 <HAL_GetTick>
 800965a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800965c:	e011      	b.n	8009682 <HAL_RCC_OscConfig+0x2ce>
 800965e:	bf00      	nop
 8009660:	40023800 	.word	0x40023800
 8009664:	42470000 	.word	0x42470000
 8009668:	42470e80 	.word	0x42470e80
 800966c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009670:	f7fc ffe8 	bl	8006644 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	2b02      	cmp	r3, #2
 800967c:	d901      	bls.n	8009682 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800967e:	2303      	movs	r3, #3
 8009680:	e106      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009682:	4b85      	ldr	r3, [pc, #532]	; (8009898 <HAL_RCC_OscConfig+0x4e4>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968a:	2b00      	cmp	r3, #0
 800968c:	d0f0      	beq.n	8009670 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d106      	bne.n	80096a4 <HAL_RCC_OscConfig+0x2f0>
 8009696:	4b81      	ldr	r3, [pc, #516]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 8009698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969a:	4a80      	ldr	r2, [pc, #512]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 800969c:	f043 0301 	orr.w	r3, r3, #1
 80096a0:	6713      	str	r3, [r2, #112]	; 0x70
 80096a2:	e01c      	b.n	80096de <HAL_RCC_OscConfig+0x32a>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	2b05      	cmp	r3, #5
 80096aa:	d10c      	bne.n	80096c6 <HAL_RCC_OscConfig+0x312>
 80096ac:	4b7b      	ldr	r3, [pc, #492]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80096ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b0:	4a7a      	ldr	r2, [pc, #488]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80096b2:	f043 0304 	orr.w	r3, r3, #4
 80096b6:	6713      	str	r3, [r2, #112]	; 0x70
 80096b8:	4b78      	ldr	r3, [pc, #480]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80096ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096bc:	4a77      	ldr	r2, [pc, #476]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80096be:	f043 0301 	orr.w	r3, r3, #1
 80096c2:	6713      	str	r3, [r2, #112]	; 0x70
 80096c4:	e00b      	b.n	80096de <HAL_RCC_OscConfig+0x32a>
 80096c6:	4b75      	ldr	r3, [pc, #468]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80096c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ca:	4a74      	ldr	r2, [pc, #464]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80096cc:	f023 0301 	bic.w	r3, r3, #1
 80096d0:	6713      	str	r3, [r2, #112]	; 0x70
 80096d2:	4b72      	ldr	r3, [pc, #456]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80096d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d6:	4a71      	ldr	r2, [pc, #452]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80096d8:	f023 0304 	bic.w	r3, r3, #4
 80096dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d015      	beq.n	8009712 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096e6:	f7fc ffad 	bl	8006644 <HAL_GetTick>
 80096ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096ec:	e00a      	b.n	8009704 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096ee:	f7fc ffa9 	bl	8006644 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d901      	bls.n	8009704 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e0c5      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009704:	4b65      	ldr	r3, [pc, #404]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 8009706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0ee      	beq.n	80096ee <HAL_RCC_OscConfig+0x33a>
 8009710:	e014      	b.n	800973c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009712:	f7fc ff97 	bl	8006644 <HAL_GetTick>
 8009716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009718:	e00a      	b.n	8009730 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800971a:	f7fc ff93 	bl	8006644 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	4293      	cmp	r3, r2
 800972a:	d901      	bls.n	8009730 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e0af      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009730:	4b5a      	ldr	r3, [pc, #360]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 8009732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1ee      	bne.n	800971a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800973c:	7dfb      	ldrb	r3, [r7, #23]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d105      	bne.n	800974e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009742:	4b56      	ldr	r3, [pc, #344]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	4a55      	ldr	r2, [pc, #340]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 8009748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800974c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 809b 	beq.w	800988e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009758:	4b50      	ldr	r3, [pc, #320]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f003 030c 	and.w	r3, r3, #12
 8009760:	2b08      	cmp	r3, #8
 8009762:	d05c      	beq.n	800981e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d141      	bne.n	80097f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800976c:	4b4c      	ldr	r3, [pc, #304]	; (80098a0 <HAL_RCC_OscConfig+0x4ec>)
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009772:	f7fc ff67 	bl	8006644 <HAL_GetTick>
 8009776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009778:	e008      	b.n	800978c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800977a:	f7fc ff63 	bl	8006644 <HAL_GetTick>
 800977e:	4602      	mov	r2, r0
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	2b02      	cmp	r3, #2
 8009786:	d901      	bls.n	800978c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009788:	2303      	movs	r3, #3
 800978a:	e081      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800978c:	4b43      	ldr	r3, [pc, #268]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1f0      	bne.n	800977a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	69da      	ldr	r2, [r3, #28]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	019b      	lsls	r3, r3, #6
 80097a8:	431a      	orrs	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ae:	085b      	lsrs	r3, r3, #1
 80097b0:	3b01      	subs	r3, #1
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	431a      	orrs	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ba:	061b      	lsls	r3, r3, #24
 80097bc:	4937      	ldr	r1, [pc, #220]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097c2:	4b37      	ldr	r3, [pc, #220]	; (80098a0 <HAL_RCC_OscConfig+0x4ec>)
 80097c4:	2201      	movs	r2, #1
 80097c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097c8:	f7fc ff3c 	bl	8006644 <HAL_GetTick>
 80097cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097ce:	e008      	b.n	80097e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097d0:	f7fc ff38 	bl	8006644 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d901      	bls.n	80097e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e056      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097e2:	4b2e      	ldr	r3, [pc, #184]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0f0      	beq.n	80097d0 <HAL_RCC_OscConfig+0x41c>
 80097ee:	e04e      	b.n	800988e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097f0:	4b2b      	ldr	r3, [pc, #172]	; (80098a0 <HAL_RCC_OscConfig+0x4ec>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097f6:	f7fc ff25 	bl	8006644 <HAL_GetTick>
 80097fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097fc:	e008      	b.n	8009810 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097fe:	f7fc ff21 	bl	8006644 <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	2b02      	cmp	r3, #2
 800980a:	d901      	bls.n	8009810 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e03f      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009810:	4b22      	ldr	r3, [pc, #136]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1f0      	bne.n	80097fe <HAL_RCC_OscConfig+0x44a>
 800981c:	e037      	b.n	800988e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e032      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800982a:	4b1c      	ldr	r3, [pc, #112]	; (800989c <HAL_RCC_OscConfig+0x4e8>)
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d028      	beq.n	800988a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009842:	429a      	cmp	r2, r3
 8009844:	d121      	bne.n	800988a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009850:	429a      	cmp	r2, r3
 8009852:	d11a      	bne.n	800988a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800985a:	4013      	ands	r3, r2
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009860:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009862:	4293      	cmp	r3, r2
 8009864:	d111      	bne.n	800988a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009870:	085b      	lsrs	r3, r3, #1
 8009872:	3b01      	subs	r3, #1
 8009874:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009876:	429a      	cmp	r2, r3
 8009878:	d107      	bne.n	800988a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009884:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009886:	429a      	cmp	r2, r3
 8009888:	d001      	beq.n	800988e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	40007000 	.word	0x40007000
 800989c:	40023800 	.word	0x40023800
 80098a0:	42470060 	.word	0x42470060

080098a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e0cc      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098b8:	4b68      	ldr	r3, [pc, #416]	; (8009a5c <HAL_RCC_ClockConfig+0x1b8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 030f 	and.w	r3, r3, #15
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d90c      	bls.n	80098e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098c6:	4b65      	ldr	r3, [pc, #404]	; (8009a5c <HAL_RCC_ClockConfig+0x1b8>)
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098ce:	4b63      	ldr	r3, [pc, #396]	; (8009a5c <HAL_RCC_ClockConfig+0x1b8>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 030f 	and.w	r3, r3, #15
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d001      	beq.n	80098e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e0b8      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d020      	beq.n	800992e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0304 	and.w	r3, r3, #4
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d005      	beq.n	8009904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098f8:	4b59      	ldr	r3, [pc, #356]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	4a58      	ldr	r2, [pc, #352]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 80098fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0308 	and.w	r3, r3, #8
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009910:	4b53      	ldr	r3, [pc, #332]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	4a52      	ldr	r2, [pc, #328]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800991a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800991c:	4b50      	ldr	r3, [pc, #320]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	494d      	ldr	r1, [pc, #308]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 800992a:	4313      	orrs	r3, r2
 800992c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d044      	beq.n	80099c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d107      	bne.n	8009952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009942:	4b47      	ldr	r3, [pc, #284]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d119      	bne.n	8009982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e07f      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2b02      	cmp	r3, #2
 8009958:	d003      	beq.n	8009962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800995e:	2b03      	cmp	r3, #3
 8009960:	d107      	bne.n	8009972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009962:	4b3f      	ldr	r3, [pc, #252]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d109      	bne.n	8009982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e06f      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009972:	4b3b      	ldr	r3, [pc, #236]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e067      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009982:	4b37      	ldr	r3, [pc, #220]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f023 0203 	bic.w	r2, r3, #3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	4934      	ldr	r1, [pc, #208]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009990:	4313      	orrs	r3, r2
 8009992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009994:	f7fc fe56 	bl	8006644 <HAL_GetTick>
 8009998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800999a:	e00a      	b.n	80099b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800999c:	f7fc fe52 	bl	8006644 <HAL_GetTick>
 80099a0:	4602      	mov	r2, r0
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d901      	bls.n	80099b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e04f      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099b2:	4b2b      	ldr	r3, [pc, #172]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f003 020c 	and.w	r2, r3, #12
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d1eb      	bne.n	800999c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80099c4:	4b25      	ldr	r3, [pc, #148]	; (8009a5c <HAL_RCC_ClockConfig+0x1b8>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 030f 	and.w	r3, r3, #15
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d20c      	bcs.n	80099ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099d2:	4b22      	ldr	r3, [pc, #136]	; (8009a5c <HAL_RCC_ClockConfig+0x1b8>)
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099da:	4b20      	ldr	r3, [pc, #128]	; (8009a5c <HAL_RCC_ClockConfig+0x1b8>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 030f 	and.w	r3, r3, #15
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d001      	beq.n	80099ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	e032      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0304 	and.w	r3, r3, #4
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d008      	beq.n	8009a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099f8:	4b19      	ldr	r3, [pc, #100]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4916      	ldr	r1, [pc, #88]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0308 	and.w	r3, r3, #8
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d009      	beq.n	8009a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a16:	4b12      	ldr	r3, [pc, #72]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	490e      	ldr	r1, [pc, #56]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a2a:	f000 f821 	bl	8009a70 <HAL_RCC_GetSysClockFreq>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <HAL_RCC_ClockConfig+0x1bc>)
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	091b      	lsrs	r3, r3, #4
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	490a      	ldr	r1, [pc, #40]	; (8009a64 <HAL_RCC_ClockConfig+0x1c0>)
 8009a3c:	5ccb      	ldrb	r3, [r1, r3]
 8009a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a42:	4a09      	ldr	r2, [pc, #36]	; (8009a68 <HAL_RCC_ClockConfig+0x1c4>)
 8009a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <HAL_RCC_ClockConfig+0x1c8>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fb f93e 	bl	8004ccc <HAL_InitTick>

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	40023c00 	.word	0x40023c00
 8009a60:	40023800 	.word	0x40023800
 8009a64:	0802e1e4 	.word	0x0802e1e4
 8009a68:	20000014 	.word	0x20000014
 8009a6c:	20000080 	.word	0x20000080

08009a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	607b      	str	r3, [r7, #4]
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	2300      	movs	r3, #0
 8009a82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a88:	4b67      	ldr	r3, [pc, #412]	; (8009c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f003 030c 	and.w	r3, r3, #12
 8009a90:	2b08      	cmp	r3, #8
 8009a92:	d00d      	beq.n	8009ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	f200 80bd 	bhi.w	8009c14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	d003      	beq.n	8009aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8009aa2:	e0b7      	b.n	8009c14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009aa4:	4b61      	ldr	r3, [pc, #388]	; (8009c2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009aa6:	60bb      	str	r3, [r7, #8]
       break;
 8009aa8:	e0b7      	b.n	8009c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009aaa:	4b61      	ldr	r3, [pc, #388]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009aac:	60bb      	str	r3, [r7, #8]
      break;
 8009aae:	e0b4      	b.n	8009c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ab0:	4b5d      	ldr	r3, [pc, #372]	; (8009c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ab8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009aba:	4b5b      	ldr	r3, [pc, #364]	; (8009c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d04d      	beq.n	8009b62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ac6:	4b58      	ldr	r3, [pc, #352]	; (8009c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	099b      	lsrs	r3, r3, #6
 8009acc:	461a      	mov	r2, r3
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009ad6:	f04f 0100 	mov.w	r1, #0
 8009ada:	ea02 0800 	and.w	r8, r2, r0
 8009ade:	ea03 0901 	and.w	r9, r3, r1
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	f04f 0200 	mov.w	r2, #0
 8009aea:	f04f 0300 	mov.w	r3, #0
 8009aee:	014b      	lsls	r3, r1, #5
 8009af0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009af4:	0142      	lsls	r2, r0, #5
 8009af6:	4610      	mov	r0, r2
 8009af8:	4619      	mov	r1, r3
 8009afa:	ebb0 0008 	subs.w	r0, r0, r8
 8009afe:	eb61 0109 	sbc.w	r1, r1, r9
 8009b02:	f04f 0200 	mov.w	r2, #0
 8009b06:	f04f 0300 	mov.w	r3, #0
 8009b0a:	018b      	lsls	r3, r1, #6
 8009b0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009b10:	0182      	lsls	r2, r0, #6
 8009b12:	1a12      	subs	r2, r2, r0
 8009b14:	eb63 0301 	sbc.w	r3, r3, r1
 8009b18:	f04f 0000 	mov.w	r0, #0
 8009b1c:	f04f 0100 	mov.w	r1, #0
 8009b20:	00d9      	lsls	r1, r3, #3
 8009b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b26:	00d0      	lsls	r0, r2, #3
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	eb12 0208 	adds.w	r2, r2, r8
 8009b30:	eb43 0309 	adc.w	r3, r3, r9
 8009b34:	f04f 0000 	mov.w	r0, #0
 8009b38:	f04f 0100 	mov.w	r1, #0
 8009b3c:	0259      	lsls	r1, r3, #9
 8009b3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009b42:	0250      	lsls	r0, r2, #9
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4610      	mov	r0, r2
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f04f 0300 	mov.w	r3, #0
 8009b54:	f7f7 f842 	bl	8000bdc <__aeabi_uldivmod>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	e04a      	b.n	8009bf8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b62:	4b31      	ldr	r3, [pc, #196]	; (8009c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	099b      	lsrs	r3, r3, #6
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f04f 0300 	mov.w	r3, #0
 8009b6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009b72:	f04f 0100 	mov.w	r1, #0
 8009b76:	ea02 0400 	and.w	r4, r2, r0
 8009b7a:	ea03 0501 	and.w	r5, r3, r1
 8009b7e:	4620      	mov	r0, r4
 8009b80:	4629      	mov	r1, r5
 8009b82:	f04f 0200 	mov.w	r2, #0
 8009b86:	f04f 0300 	mov.w	r3, #0
 8009b8a:	014b      	lsls	r3, r1, #5
 8009b8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009b90:	0142      	lsls	r2, r0, #5
 8009b92:	4610      	mov	r0, r2
 8009b94:	4619      	mov	r1, r3
 8009b96:	1b00      	subs	r0, r0, r4
 8009b98:	eb61 0105 	sbc.w	r1, r1, r5
 8009b9c:	f04f 0200 	mov.w	r2, #0
 8009ba0:	f04f 0300 	mov.w	r3, #0
 8009ba4:	018b      	lsls	r3, r1, #6
 8009ba6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009baa:	0182      	lsls	r2, r0, #6
 8009bac:	1a12      	subs	r2, r2, r0
 8009bae:	eb63 0301 	sbc.w	r3, r3, r1
 8009bb2:	f04f 0000 	mov.w	r0, #0
 8009bb6:	f04f 0100 	mov.w	r1, #0
 8009bba:	00d9      	lsls	r1, r3, #3
 8009bbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009bc0:	00d0      	lsls	r0, r2, #3
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	1912      	adds	r2, r2, r4
 8009bc8:	eb45 0303 	adc.w	r3, r5, r3
 8009bcc:	f04f 0000 	mov.w	r0, #0
 8009bd0:	f04f 0100 	mov.w	r1, #0
 8009bd4:	0299      	lsls	r1, r3, #10
 8009bd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009bda:	0290      	lsls	r0, r2, #10
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4610      	mov	r0, r2
 8009be2:	4619      	mov	r1, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	461a      	mov	r2, r3
 8009be8:	f04f 0300 	mov.w	r3, #0
 8009bec:	f7f6 fff6 	bl	8000bdc <__aeabi_uldivmod>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009bf8:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	0c1b      	lsrs	r3, r3, #16
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	3301      	adds	r3, #1
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c10:	60bb      	str	r3, [r7, #8]
      break;
 8009c12:	e002      	b.n	8009c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009c14:	4b05      	ldr	r3, [pc, #20]	; (8009c2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009c16:	60bb      	str	r3, [r7, #8]
      break;
 8009c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009c26:	bf00      	nop
 8009c28:	40023800 	.word	0x40023800
 8009c2c:	00f42400 	.word	0x00f42400
 8009c30:	007a1200 	.word	0x007a1200

08009c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c38:	4b03      	ldr	r3, [pc, #12]	; (8009c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20000014 	.word	0x20000014

08009c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009c50:	f7ff fff0 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8009c54:	4602      	mov	r2, r0
 8009c56:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	0a9b      	lsrs	r3, r3, #10
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	4903      	ldr	r1, [pc, #12]	; (8009c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c62:	5ccb      	ldrb	r3, [r1, r3]
 8009c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	40023800 	.word	0x40023800
 8009c70:	0802e1f4 	.word	0x0802e1f4

08009c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009c78:	f7ff ffdc 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	0b5b      	lsrs	r3, r3, #13
 8009c84:	f003 0307 	and.w	r3, r3, #7
 8009c88:	4903      	ldr	r1, [pc, #12]	; (8009c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c8a:	5ccb      	ldrb	r3, [r1, r3]
 8009c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	40023800 	.word	0x40023800
 8009c98:	0802e1f4 	.word	0x0802e1f4

08009c9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	220f      	movs	r2, #15
 8009caa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009cac:	4b12      	ldr	r3, [pc, #72]	; (8009cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f003 0203 	and.w	r2, r3, #3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009cb8:	4b0f      	ldr	r3, [pc, #60]	; (8009cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009cc4:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009cd0:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	08db      	lsrs	r3, r3, #3
 8009cd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009cde:	4b07      	ldr	r3, [pc, #28]	; (8009cfc <HAL_RCC_GetClockConfig+0x60>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 020f 	and.w	r2, r3, #15
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	601a      	str	r2, [r3, #0]
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40023800 	.word	0x40023800
 8009cfc:	40023c00 	.word	0x40023c00

08009d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10b      	bne.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d105      	bne.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d075      	beq.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009d34:	4bad      	ldr	r3, [pc, #692]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d3a:	f7fc fc83 	bl	8006644 <HAL_GetTick>
 8009d3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d40:	e008      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009d42:	f7fc fc7f 	bl	8006644 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d901      	bls.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e18b      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d54:	4ba6      	ldr	r3, [pc, #664]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1f0      	bne.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d009      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	019a      	lsls	r2, r3, #6
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	071b      	lsls	r3, r3, #28
 8009d78:	499d      	ldr	r1, [pc, #628]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01f      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009d8c:	4b98      	ldr	r3, [pc, #608]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d92:	0f1b      	lsrs	r3, r3, #28
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	019a      	lsls	r2, r3, #6
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	061b      	lsls	r3, r3, #24
 8009da6:	431a      	orrs	r2, r3
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	071b      	lsls	r3, r3, #28
 8009dac:	4990      	ldr	r1, [pc, #576]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009db4:	4b8e      	ldr	r3, [pc, #568]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dba:	f023 021f 	bic.w	r2, r3, #31
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	498a      	ldr	r1, [pc, #552]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00d      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	019a      	lsls	r2, r3, #6
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	061b      	lsls	r3, r3, #24
 8009de4:	431a      	orrs	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	071b      	lsls	r3, r3, #28
 8009dec:	4980      	ldr	r1, [pc, #512]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009df4:	4b7d      	ldr	r3, [pc, #500]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009df6:	2201      	movs	r2, #1
 8009df8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009dfa:	f7fc fc23 	bl	8006644 <HAL_GetTick>
 8009dfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e00:	e008      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009e02:	f7fc fc1f 	bl	8006644 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d901      	bls.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e12b      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e14:	4b76      	ldr	r3, [pc, #472]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0f0      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0304 	and.w	r3, r3, #4
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d105      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d079      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009e38:	4b6e      	ldr	r3, [pc, #440]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009e3e:	f7fc fc01 	bl	8006644 <HAL_GetTick>
 8009e42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e44:	e008      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009e46:	f7fc fbfd 	bl	8006644 <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d901      	bls.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	e109      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e58:	4b65      	ldr	r3, [pc, #404]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e64:	d0ef      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0304 	and.w	r3, r3, #4
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d020      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009e72:	4b5f      	ldr	r3, [pc, #380]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e78:	0f1b      	lsrs	r3, r3, #28
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	019a      	lsls	r2, r3, #6
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	061b      	lsls	r3, r3, #24
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	071b      	lsls	r3, r3, #28
 8009e92:	4957      	ldr	r1, [pc, #348]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009e9a:	4b55      	ldr	r3, [pc, #340]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ea0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a1b      	ldr	r3, [r3, #32]
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	021b      	lsls	r3, r3, #8
 8009eac:	4950      	ldr	r1, [pc, #320]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0308 	and.w	r3, r3, #8
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01e      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009ec0:	4b4b      	ldr	r3, [pc, #300]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec6:	0e1b      	lsrs	r3, r3, #24
 8009ec8:	f003 030f 	and.w	r3, r3, #15
 8009ecc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	019a      	lsls	r2, r3, #6
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	061b      	lsls	r3, r3, #24
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	071b      	lsls	r3, r3, #28
 8009ee0:	4943      	ldr	r1, [pc, #268]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009ee8:	4b41      	ldr	r3, [pc, #260]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef6:	493e      	ldr	r1, [pc, #248]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009efe:	4b3d      	ldr	r3, [pc, #244]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f00:	2201      	movs	r2, #1
 8009f02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f04:	f7fc fb9e 	bl	8006644 <HAL_GetTick>
 8009f08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f0a:	e008      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009f0c:	f7fc fb9a 	bl	8006644 <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d901      	bls.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e0a6      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f1e:	4b34      	ldr	r3, [pc, #208]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f2a:	d1ef      	bne.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 808d 	beq.w	800a054 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60fb      	str	r3, [r7, #12]
 8009f3e:	4b2c      	ldr	r3, [pc, #176]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f42:	4a2b      	ldr	r2, [pc, #172]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f48:	6413      	str	r3, [r2, #64]	; 0x40
 8009f4a:	4b29      	ldr	r3, [pc, #164]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009f56:	4b28      	ldr	r3, [pc, #160]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a27      	ldr	r2, [pc, #156]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f62:	f7fc fb6f 	bl	8006644 <HAL_GetTick>
 8009f66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f68:	e008      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f6a:	f7fc fb6b 	bl	8006644 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d901      	bls.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e077      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f7c:	4b1e      	ldr	r3, [pc, #120]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0f0      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009f88:	4b19      	ldr	r3, [pc, #100]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d039      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d032      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fa6:	4b12      	ldr	r3, [pc, #72]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009fb0:	4b12      	ldr	r3, [pc, #72]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009fb6:	4b11      	ldr	r3, [pc, #68]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009fbc:	4a0c      	ldr	r2, [pc, #48]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009fc2:	4b0b      	ldr	r3, [pc, #44]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d11e      	bne.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009fce:	f7fc fb39 	bl	8006644 <HAL_GetTick>
 8009fd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fd4:	e014      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fd6:	f7fc fb35 	bl	8006644 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d90b      	bls.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e03f      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8009fec:	42470068 	.word	0x42470068
 8009ff0:	40023800 	.word	0x40023800
 8009ff4:	42470070 	.word	0x42470070
 8009ff8:	40007000 	.word	0x40007000
 8009ffc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a000:	4b1c      	ldr	r3, [pc, #112]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a004:	f003 0302 	and.w	r3, r3, #2
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0e4      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a018:	d10d      	bne.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a01a:	4b16      	ldr	r3, [pc, #88]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a02e:	4911      	ldr	r1, [pc, #68]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a030:	4313      	orrs	r3, r2
 800a032:	608b      	str	r3, [r1, #8]
 800a034:	e005      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a036:	4b0f      	ldr	r3, [pc, #60]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	4a0e      	ldr	r2, [pc, #56]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a03c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a040:	6093      	str	r3, [r2, #8]
 800a042:	4b0c      	ldr	r3, [pc, #48]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a04e:	4909      	ldr	r1, [pc, #36]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a050:	4313      	orrs	r3, r2
 800a052:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a066:	4b04      	ldr	r3, [pc, #16]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a068:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	40023800 	.word	0x40023800
 800a078:	424711e0 	.word	0x424711e0

0800a07c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e025      	b.n	800a0dc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d106      	bne.n	800a0aa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7f9 ff99 	bl	8003fdc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4610      	mov	r0, r2
 800a0be:	f002 feaf 	bl	800ce20 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	f002 ff1a 	bl	800cf06 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d101      	bne.n	800a100 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	e018      	b.n	800a132 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2202      	movs	r2, #2
 800a104:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	4618      	mov	r0, r3
 800a112:	f002 ff77 	bl	800d004 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d104      	bne.n	800a128 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2205      	movs	r2, #5
 800a122:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a126:	e003      	b.n	800a130 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d101      	bne.n	800a154 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a150:	2302      	movs	r3, #2
 800a152:	e00e      	b.n	800a172 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	4618      	mov	r0, r3
 800a164:	f002 ff8a 	bl	800d07c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e07b      	b.n	800a284 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d108      	bne.n	800a1a6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a19c:	d009      	beq.n	800a1b2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	61da      	str	r2, [r3, #28]
 800a1a4:	e005      	b.n	800a1b2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d106      	bne.n	800a1d2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7fa fceb 	bl	8004ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a22c:	431a      	orrs	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a236:	ea42 0103 	orr.w	r1, r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	0c1b      	lsrs	r3, r3, #16
 800a250:	f003 0104 	and.w	r1, r3, #4
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	f003 0210 	and.w	r2, r3, #16
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	69da      	ldr	r2, [r3, #28]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a272:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e01a      	b.n	800a2d4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7fa fcbe 	bl	8004c38 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d101      	bne.n	800a2fe <HAL_SPI_Transmit+0x22>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	e126      	b.n	800a54c <HAL_SPI_Transmit+0x270>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a306:	f7fc f99d 	bl	8006644 <HAL_GetTick>
 800a30a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a30c:	88fb      	ldrh	r3, [r7, #6]
 800a30e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d002      	beq.n	800a322 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a31c:	2302      	movs	r3, #2
 800a31e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a320:	e10b      	b.n	800a53a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <HAL_SPI_Transmit+0x52>
 800a328:	88fb      	ldrh	r3, [r7, #6]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a332:	e102      	b.n	800a53a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2203      	movs	r2, #3
 800a338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	88fa      	ldrh	r2, [r7, #6]
 800a34c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	88fa      	ldrh	r2, [r7, #6]
 800a352:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a37a:	d10f      	bne.n	800a39c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a38a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a39a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a6:	2b40      	cmp	r3, #64	; 0x40
 800a3a8:	d007      	beq.n	800a3ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3c2:	d14b      	bne.n	800a45c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <HAL_SPI_Transmit+0xf6>
 800a3cc:	8afb      	ldrh	r3, [r7, #22]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d13e      	bne.n	800a450 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	881a      	ldrh	r2, [r3, #0]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	1c9a      	adds	r2, r3, #2
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a3f6:	e02b      	b.n	800a450 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b02      	cmp	r3, #2
 800a404:	d112      	bne.n	800a42c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40a:	881a      	ldrh	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a416:	1c9a      	adds	r2, r3, #2
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a420:	b29b      	uxth	r3, r3
 800a422:	3b01      	subs	r3, #1
 800a424:	b29a      	uxth	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	86da      	strh	r2, [r3, #54]	; 0x36
 800a42a:	e011      	b.n	800a450 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a42c:	f7fc f90a 	bl	8006644 <HAL_GetTick>
 800a430:	4602      	mov	r2, r0
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d803      	bhi.n	800a444 <HAL_SPI_Transmit+0x168>
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a442:	d102      	bne.n	800a44a <HAL_SPI_Transmit+0x16e>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d102      	bne.n	800a450 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a44e:	e074      	b.n	800a53a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1ce      	bne.n	800a3f8 <HAL_SPI_Transmit+0x11c>
 800a45a:	e04c      	b.n	800a4f6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <HAL_SPI_Transmit+0x18e>
 800a464:	8afb      	ldrh	r3, [r7, #22]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d140      	bne.n	800a4ec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	330c      	adds	r3, #12
 800a474:	7812      	ldrb	r2, [r2, #0]
 800a476:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a486:	b29b      	uxth	r3, r3
 800a488:	3b01      	subs	r3, #1
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a490:	e02c      	b.n	800a4ec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d113      	bne.n	800a4c8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	330c      	adds	r3, #12
 800a4aa:	7812      	ldrb	r2, [r2, #0]
 800a4ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b2:	1c5a      	adds	r2, r3, #1
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a4c6:	e011      	b.n	800a4ec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4c8:	f7fc f8bc 	bl	8006644 <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d803      	bhi.n	800a4e0 <HAL_SPI_Transmit+0x204>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4de:	d102      	bne.n	800a4e6 <HAL_SPI_Transmit+0x20a>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d102      	bne.n	800a4ec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4ea:	e026      	b.n	800a53a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1cd      	bne.n	800a492 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4f6:	69ba      	ldr	r2, [r7, #24]
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 fbda 	bl	800acb4 <SPI_EndRxTxTransaction>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2220      	movs	r2, #32
 800a50a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10a      	bne.n	800a52a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a514:	2300      	movs	r3, #0
 800a516:	613b      	str	r3, [r7, #16]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	613b      	str	r3, [r7, #16]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	77fb      	strb	r3, [r7, #31]
 800a536:	e000      	b.n	800a53a <HAL_SPI_Transmit+0x25e>
  }

error:
 800a538:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a54a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3720      	adds	r7, #32
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af02      	add	r7, sp, #8
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	4613      	mov	r3, r2
 800a562:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a570:	d112      	bne.n	800a598 <HAL_SPI_Receive+0x44>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10e      	bne.n	800a598 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2204      	movs	r2, #4
 800a57e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a582:	88fa      	ldrh	r2, [r7, #6]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	4613      	mov	r3, r2
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	68b9      	ldr	r1, [r7, #8]
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 f8f1 	bl	800a776 <HAL_SPI_TransmitReceive>
 800a594:	4603      	mov	r3, r0
 800a596:	e0ea      	b.n	800a76e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d101      	bne.n	800a5a6 <HAL_SPI_Receive+0x52>
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e0e3      	b.n	800a76e <HAL_SPI_Receive+0x21a>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5ae:	f7fc f849 	bl	8006644 <HAL_GetTick>
 800a5b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d002      	beq.n	800a5c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5c4:	e0ca      	b.n	800a75c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <HAL_SPI_Receive+0x7e>
 800a5cc:	88fb      	ldrh	r3, [r7, #6]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d102      	bne.n	800a5d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5d6:	e0c1      	b.n	800a75c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2204      	movs	r2, #4
 800a5dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	88fa      	ldrh	r2, [r7, #6]
 800a5f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	88fa      	ldrh	r2, [r7, #6]
 800a5f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a61e:	d10f      	bne.n	800a640 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a62e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a63e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a64a:	2b40      	cmp	r3, #64	; 0x40
 800a64c:	d007      	beq.n	800a65e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a65c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d162      	bne.n	800a72c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a666:	e02e      	b.n	800a6c6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b01      	cmp	r3, #1
 800a674:	d115      	bne.n	800a6a2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f103 020c 	add.w	r2, r3, #12
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	7812      	ldrb	r2, [r2, #0]
 800a684:	b2d2      	uxtb	r2, r2
 800a686:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68c:	1c5a      	adds	r2, r3, #1
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a696:	b29b      	uxth	r3, r3
 800a698:	3b01      	subs	r3, #1
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6a0:	e011      	b.n	800a6c6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6a2:	f7fb ffcf 	bl	8006644 <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d803      	bhi.n	800a6ba <HAL_SPI_Receive+0x166>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b8:	d102      	bne.n	800a6c0 <HAL_SPI_Receive+0x16c>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d102      	bne.n	800a6c6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a6c4:	e04a      	b.n	800a75c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1cb      	bne.n	800a668 <HAL_SPI_Receive+0x114>
 800a6d0:	e031      	b.n	800a736 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d113      	bne.n	800a708 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	b292      	uxth	r2, r2
 800a6ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f2:	1c9a      	adds	r2, r3, #2
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	3b01      	subs	r3, #1
 800a700:	b29a      	uxth	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a706:	e011      	b.n	800a72c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a708:	f7fb ff9c 	bl	8006644 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	429a      	cmp	r2, r3
 800a716:	d803      	bhi.n	800a720 <HAL_SPI_Receive+0x1cc>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71e:	d102      	bne.n	800a726 <HAL_SPI_Receive+0x1d2>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d102      	bne.n	800a72c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a72a:	e017      	b.n	800a75c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a730:	b29b      	uxth	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1cd      	bne.n	800a6d2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 fa54 	bl	800abe8 <SPI_EndRxTransaction>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2220      	movs	r2, #32
 800a74a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	75fb      	strb	r3, [r7, #23]
 800a758:	e000      	b.n	800a75c <HAL_SPI_Receive+0x208>
  }

error :
 800a75a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b08c      	sub	sp, #48	; 0x30
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
 800a782:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a784:	2301      	movs	r3, #1
 800a786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a794:	2b01      	cmp	r3, #1
 800a796:	d101      	bne.n	800a79c <HAL_SPI_TransmitReceive+0x26>
 800a798:	2302      	movs	r3, #2
 800a79a:	e18a      	b.n	800aab2 <HAL_SPI_TransmitReceive+0x33c>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7a4:	f7fb ff4e 	bl	8006644 <HAL_GetTick>
 800a7a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a7ba:	887b      	ldrh	r3, [r7, #2]
 800a7bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a7be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d00f      	beq.n	800a7e6 <HAL_SPI_TransmitReceive+0x70>
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7cc:	d107      	bne.n	800a7de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d103      	bne.n	800a7de <HAL_SPI_TransmitReceive+0x68>
 800a7d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7da:	2b04      	cmp	r3, #4
 800a7dc:	d003      	beq.n	800a7e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a7de:	2302      	movs	r3, #2
 800a7e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a7e4:	e15b      	b.n	800aa9e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d005      	beq.n	800a7f8 <HAL_SPI_TransmitReceive+0x82>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <HAL_SPI_TransmitReceive+0x82>
 800a7f2:	887b      	ldrh	r3, [r7, #2]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d103      	bne.n	800a800 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a7fe:	e14e      	b.n	800aa9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d003      	beq.n	800a814 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2205      	movs	r2, #5
 800a810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	887a      	ldrh	r2, [r7, #2]
 800a824:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	887a      	ldrh	r2, [r7, #2]
 800a82a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	887a      	ldrh	r2, [r7, #2]
 800a836:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	887a      	ldrh	r2, [r7, #2]
 800a83c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a854:	2b40      	cmp	r3, #64	; 0x40
 800a856:	d007      	beq.n	800a868 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a866:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a870:	d178      	bne.n	800a964 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <HAL_SPI_TransmitReceive+0x10a>
 800a87a:	8b7b      	ldrh	r3, [r7, #26]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d166      	bne.n	800a94e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a884:	881a      	ldrh	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a890:	1c9a      	adds	r2, r3, #2
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	3b01      	subs	r3, #1
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8a4:	e053      	b.n	800a94e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d11b      	bne.n	800a8ec <HAL_SPI_TransmitReceive+0x176>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d016      	beq.n	800a8ec <HAL_SPI_TransmitReceive+0x176>
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d113      	bne.n	800a8ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c8:	881a      	ldrh	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d4:	1c9a      	adds	r2, r3, #2
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d119      	bne.n	800a92e <HAL_SPI_TransmitReceive+0x1b8>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d014      	beq.n	800a92e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68da      	ldr	r2, [r3, #12]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90e:	b292      	uxth	r2, r2
 800a910:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a916:	1c9a      	adds	r2, r3, #2
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a920:	b29b      	uxth	r3, r3
 800a922:	3b01      	subs	r3, #1
 800a924:	b29a      	uxth	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a92a:	2301      	movs	r3, #1
 800a92c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a92e:	f7fb fe89 	bl	8006644 <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d807      	bhi.n	800a94e <HAL_SPI_TransmitReceive+0x1d8>
 800a93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a944:	d003      	beq.n	800a94e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a94c:	e0a7      	b.n	800aa9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a952:	b29b      	uxth	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1a6      	bne.n	800a8a6 <HAL_SPI_TransmitReceive+0x130>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1a1      	bne.n	800a8a6 <HAL_SPI_TransmitReceive+0x130>
 800a962:	e07c      	b.n	800aa5e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <HAL_SPI_TransmitReceive+0x1fc>
 800a96c:	8b7b      	ldrh	r3, [r7, #26]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d16b      	bne.n	800aa4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	330c      	adds	r3, #12
 800a97c:	7812      	ldrb	r2, [r2, #0]
 800a97e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a98e:	b29b      	uxth	r3, r3
 800a990:	3b01      	subs	r3, #1
 800a992:	b29a      	uxth	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a998:	e057      	b.n	800aa4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d11c      	bne.n	800a9e2 <HAL_SPI_TransmitReceive+0x26c>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d017      	beq.n	800a9e2 <HAL_SPI_TransmitReceive+0x26c>
 800a9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d114      	bne.n	800a9e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	330c      	adds	r3, #12
 800a9c2:	7812      	ldrb	r2, [r2, #0]
 800a9c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d119      	bne.n	800aa24 <HAL_SPI_TransmitReceive+0x2ae>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d014      	beq.n	800aa24 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68da      	ldr	r2, [r3, #12]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa04:	b2d2      	uxtb	r2, r2
 800aa06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa20:	2301      	movs	r3, #1
 800aa22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aa24:	f7fb fe0e 	bl	8006644 <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d803      	bhi.n	800aa3c <HAL_SPI_TransmitReceive+0x2c6>
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3a:	d102      	bne.n	800aa42 <HAL_SPI_TransmitReceive+0x2cc>
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d103      	bne.n	800aa4a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aa48:	e029      	b.n	800aa9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1a2      	bne.n	800a99a <HAL_SPI_TransmitReceive+0x224>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d19d      	bne.n	800a99a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f000 f926 	bl	800acb4 <SPI_EndRxTxTransaction>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d006      	beq.n	800aa7c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2220      	movs	r2, #32
 800aa78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800aa7a:	e010      	b.n	800aa9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10b      	bne.n	800aa9c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa84:	2300      	movs	r3, #0
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	617b      	str	r3, [r7, #20]
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	e000      	b.n	800aa9e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800aa9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aaae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3730      	adds	r7, #48	; 0x30
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aac8:	b2db      	uxtb	r3, r3
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
	...

0800aad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	4613      	mov	r3, r2
 800aae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800aae8:	f7fb fdac 	bl	8006644 <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	1a9b      	subs	r3, r3, r2
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aaf8:	f7fb fda4 	bl	8006644 <HAL_GetTick>
 800aafc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aafe:	4b39      	ldr	r3, [pc, #228]	; (800abe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	015b      	lsls	r3, r3, #5
 800ab04:	0d1b      	lsrs	r3, r3, #20
 800ab06:	69fa      	ldr	r2, [r7, #28]
 800ab08:	fb02 f303 	mul.w	r3, r2, r3
 800ab0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab0e:	e054      	b.n	800abba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab16:	d050      	beq.n	800abba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ab18:	f7fb fd94 	bl	8006644 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	69fa      	ldr	r2, [r7, #28]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d902      	bls.n	800ab2e <SPI_WaitFlagStateUntilTimeout+0x56>
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d13d      	bne.n	800abaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ab3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab46:	d111      	bne.n	800ab6c <SPI_WaitFlagStateUntilTimeout+0x94>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab50:	d004      	beq.n	800ab5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab5a:	d107      	bne.n	800ab6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab74:	d10f      	bne.n	800ab96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e017      	b.n	800abda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800abb0:	2300      	movs	r3, #0
 800abb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689a      	ldr	r2, [r3, #8]
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	4013      	ands	r3, r2
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	bf0c      	ite	eq
 800abca:	2301      	moveq	r3, #1
 800abcc:	2300      	movne	r3, #0
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	461a      	mov	r2, r3
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d19b      	bne.n	800ab10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3720      	adds	r7, #32
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20000014 	.word	0x20000014

0800abe8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af02      	add	r7, sp, #8
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abfc:	d111      	bne.n	800ac22 <SPI_EndRxTransaction+0x3a>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac06:	d004      	beq.n	800ac12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac10:	d107      	bne.n	800ac22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac2a:	d12a      	bne.n	800ac82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac34:	d012      	beq.n	800ac5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2180      	movs	r1, #128	; 0x80
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f7ff ff49 	bl	800aad8 <SPI_WaitFlagStateUntilTimeout>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d02d      	beq.n	800aca8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac50:	f043 0220 	orr.w	r2, r3, #32
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e026      	b.n	800acaa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2200      	movs	r2, #0
 800ac64:	2101      	movs	r1, #1
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7ff ff36 	bl	800aad8 <SPI_WaitFlagStateUntilTimeout>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d01a      	beq.n	800aca8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac76:	f043 0220 	orr.w	r2, r3, #32
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	e013      	b.n	800acaa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7ff ff23 	bl	800aad8 <SPI_WaitFlagStateUntilTimeout>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d007      	beq.n	800aca8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac9c:	f043 0220 	orr.w	r2, r3, #32
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e000      	b.n	800acaa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
	...

0800acb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af02      	add	r7, sp, #8
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800acc0:	4b1b      	ldr	r3, [pc, #108]	; (800ad30 <SPI_EndRxTxTransaction+0x7c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a1b      	ldr	r2, [pc, #108]	; (800ad34 <SPI_EndRxTxTransaction+0x80>)
 800acc6:	fba2 2303 	umull	r2, r3, r2, r3
 800acca:	0d5b      	lsrs	r3, r3, #21
 800accc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800acd0:	fb02 f303 	mul.w	r3, r2, r3
 800acd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800acde:	d112      	bne.n	800ad06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2200      	movs	r2, #0
 800ace8:	2180      	movs	r1, #128	; 0x80
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7ff fef4 	bl	800aad8 <SPI_WaitFlagStateUntilTimeout>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d016      	beq.n	800ad24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acfa:	f043 0220 	orr.w	r2, r3, #32
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ad02:	2303      	movs	r3, #3
 800ad04:	e00f      	b.n	800ad26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00a      	beq.n	800ad22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad1c:	2b80      	cmp	r3, #128	; 0x80
 800ad1e:	d0f2      	beq.n	800ad06 <SPI_EndRxTxTransaction+0x52>
 800ad20:	e000      	b.n	800ad24 <SPI_EndRxTxTransaction+0x70>
        break;
 800ad22:	bf00      	nop
  }

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000014 	.word	0x20000014
 800ad34:	165e9f81 	.word	0x165e9f81

0800ad38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d101      	bne.n	800ad4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e041      	b.n	800adce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7fa f9ea 	bl	8005138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2202      	movs	r2, #2
 800ad68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3304      	adds	r3, #4
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f000 fcea 	bl	800b750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d001      	beq.n	800adf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	e04e      	b.n	800ae8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68da      	ldr	r2, [r3, #12]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f042 0201 	orr.w	r2, r2, #1
 800ae06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a23      	ldr	r2, [pc, #140]	; (800ae9c <HAL_TIM_Base_Start_IT+0xc4>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d022      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x80>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae1a:	d01d      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x80>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a1f      	ldr	r2, [pc, #124]	; (800aea0 <HAL_TIM_Base_Start_IT+0xc8>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d018      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x80>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a1e      	ldr	r2, [pc, #120]	; (800aea4 <HAL_TIM_Base_Start_IT+0xcc>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d013      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x80>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a1c      	ldr	r2, [pc, #112]	; (800aea8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d00e      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x80>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a1b      	ldr	r2, [pc, #108]	; (800aeac <HAL_TIM_Base_Start_IT+0xd4>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d009      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x80>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a19      	ldr	r2, [pc, #100]	; (800aeb0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d004      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x80>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a18      	ldr	r2, [pc, #96]	; (800aeb4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d111      	bne.n	800ae7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b06      	cmp	r3, #6
 800ae68:	d010      	beq.n	800ae8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f042 0201 	orr.w	r2, r2, #1
 800ae78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae7a:	e007      	b.n	800ae8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f042 0201 	orr.w	r2, r2, #1
 800ae8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	40010000 	.word	0x40010000
 800aea0:	40000400 	.word	0x40000400
 800aea4:	40000800 	.word	0x40000800
 800aea8:	40000c00 	.word	0x40000c00
 800aeac:	40010400 	.word	0x40010400
 800aeb0:	40014000 	.word	0x40014000
 800aeb4:	40001800 	.word	0x40001800

0800aeb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e041      	b.n	800af4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d106      	bne.n	800aee4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f839 	bl	800af56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2202      	movs	r2, #2
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	3304      	adds	r3, #4
 800aef4:	4619      	mov	r1, r3
 800aef6:	4610      	mov	r0, r2
 800aef8:	f000 fc2a 	bl	800b750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800af56:	b480      	push	{r7}
 800af58:	b083      	sub	sp, #12
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800af5e:	bf00      	nop
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
	...

0800af6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d109      	bne.n	800af90 <HAL_TIM_PWM_Start+0x24>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b01      	cmp	r3, #1
 800af86:	bf14      	ite	ne
 800af88:	2301      	movne	r3, #1
 800af8a:	2300      	moveq	r3, #0
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	e022      	b.n	800afd6 <HAL_TIM_PWM_Start+0x6a>
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b04      	cmp	r3, #4
 800af94:	d109      	bne.n	800afaa <HAL_TIM_PWM_Start+0x3e>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	bf14      	ite	ne
 800afa2:	2301      	movne	r3, #1
 800afa4:	2300      	moveq	r3, #0
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	e015      	b.n	800afd6 <HAL_TIM_PWM_Start+0x6a>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b08      	cmp	r3, #8
 800afae:	d109      	bne.n	800afc4 <HAL_TIM_PWM_Start+0x58>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b01      	cmp	r3, #1
 800afba:	bf14      	ite	ne
 800afbc:	2301      	movne	r3, #1
 800afbe:	2300      	moveq	r3, #0
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	e008      	b.n	800afd6 <HAL_TIM_PWM_Start+0x6a>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b01      	cmp	r3, #1
 800afce:	bf14      	ite	ne
 800afd0:	2301      	movne	r3, #1
 800afd2:	2300      	moveq	r3, #0
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e07c      	b.n	800b0d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d104      	bne.n	800afee <HAL_TIM_PWM_Start+0x82>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afec:	e013      	b.n	800b016 <HAL_TIM_PWM_Start+0xaa>
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d104      	bne.n	800affe <HAL_TIM_PWM_Start+0x92>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800affc:	e00b      	b.n	800b016 <HAL_TIM_PWM_Start+0xaa>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b08      	cmp	r3, #8
 800b002:	d104      	bne.n	800b00e <HAL_TIM_PWM_Start+0xa2>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b00c:	e003      	b.n	800b016 <HAL_TIM_PWM_Start+0xaa>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2202      	movs	r2, #2
 800b012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2201      	movs	r2, #1
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 fe80 	bl	800bd24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a2d      	ldr	r2, [pc, #180]	; (800b0e0 <HAL_TIM_PWM_Start+0x174>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d004      	beq.n	800b038 <HAL_TIM_PWM_Start+0xcc>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a2c      	ldr	r2, [pc, #176]	; (800b0e4 <HAL_TIM_PWM_Start+0x178>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d101      	bne.n	800b03c <HAL_TIM_PWM_Start+0xd0>
 800b038:	2301      	movs	r3, #1
 800b03a:	e000      	b.n	800b03e <HAL_TIM_PWM_Start+0xd2>
 800b03c:	2300      	movs	r3, #0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d007      	beq.n	800b052 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a22      	ldr	r2, [pc, #136]	; (800b0e0 <HAL_TIM_PWM_Start+0x174>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d022      	beq.n	800b0a2 <HAL_TIM_PWM_Start+0x136>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b064:	d01d      	beq.n	800b0a2 <HAL_TIM_PWM_Start+0x136>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a1f      	ldr	r2, [pc, #124]	; (800b0e8 <HAL_TIM_PWM_Start+0x17c>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d018      	beq.n	800b0a2 <HAL_TIM_PWM_Start+0x136>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a1d      	ldr	r2, [pc, #116]	; (800b0ec <HAL_TIM_PWM_Start+0x180>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d013      	beq.n	800b0a2 <HAL_TIM_PWM_Start+0x136>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a1c      	ldr	r2, [pc, #112]	; (800b0f0 <HAL_TIM_PWM_Start+0x184>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d00e      	beq.n	800b0a2 <HAL_TIM_PWM_Start+0x136>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a16      	ldr	r2, [pc, #88]	; (800b0e4 <HAL_TIM_PWM_Start+0x178>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d009      	beq.n	800b0a2 <HAL_TIM_PWM_Start+0x136>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a18      	ldr	r2, [pc, #96]	; (800b0f4 <HAL_TIM_PWM_Start+0x188>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d004      	beq.n	800b0a2 <HAL_TIM_PWM_Start+0x136>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a16      	ldr	r2, [pc, #88]	; (800b0f8 <HAL_TIM_PWM_Start+0x18c>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d111      	bne.n	800b0c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f003 0307 	and.w	r3, r3, #7
 800b0ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b06      	cmp	r3, #6
 800b0b2:	d010      	beq.n	800b0d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f042 0201 	orr.w	r2, r2, #1
 800b0c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0c4:	e007      	b.n	800b0d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f042 0201 	orr.w	r2, r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	40010000 	.word	0x40010000
 800b0e4:	40010400 	.word	0x40010400
 800b0e8:	40000400 	.word	0x40000400
 800b0ec:	40000800 	.word	0x40000800
 800b0f0:	40000c00 	.word	0x40000c00
 800b0f4:	40014000 	.word	0x40014000
 800b0f8:	40001800 	.word	0x40001800

0800b0fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2200      	movs	r2, #0
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fe08 	bl	800bd24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a2e      	ldr	r2, [pc, #184]	; (800b1d4 <HAL_TIM_PWM_Stop+0xd8>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d004      	beq.n	800b128 <HAL_TIM_PWM_Stop+0x2c>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a2d      	ldr	r2, [pc, #180]	; (800b1d8 <HAL_TIM_PWM_Stop+0xdc>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d101      	bne.n	800b12c <HAL_TIM_PWM_Stop+0x30>
 800b128:	2301      	movs	r3, #1
 800b12a:	e000      	b.n	800b12e <HAL_TIM_PWM_Stop+0x32>
 800b12c:	2300      	movs	r3, #0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d017      	beq.n	800b162 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6a1a      	ldr	r2, [r3, #32]
 800b138:	f241 1311 	movw	r3, #4369	; 0x1111
 800b13c:	4013      	ands	r3, r2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10f      	bne.n	800b162 <HAL_TIM_PWM_Stop+0x66>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6a1a      	ldr	r2, [r3, #32]
 800b148:	f240 4344 	movw	r3, #1092	; 0x444
 800b14c:	4013      	ands	r3, r2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d107      	bne.n	800b162 <HAL_TIM_PWM_Stop+0x66>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b160:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6a1a      	ldr	r2, [r3, #32]
 800b168:	f241 1311 	movw	r3, #4369	; 0x1111
 800b16c:	4013      	ands	r3, r2
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10f      	bne.n	800b192 <HAL_TIM_PWM_Stop+0x96>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6a1a      	ldr	r2, [r3, #32]
 800b178:	f240 4344 	movw	r3, #1092	; 0x444
 800b17c:	4013      	ands	r3, r2
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d107      	bne.n	800b192 <HAL_TIM_PWM_Stop+0x96>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f022 0201 	bic.w	r2, r2, #1
 800b190:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d104      	bne.n	800b1a2 <HAL_TIM_PWM_Stop+0xa6>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1a0:	e013      	b.n	800b1ca <HAL_TIM_PWM_Stop+0xce>
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d104      	bne.n	800b1b2 <HAL_TIM_PWM_Stop+0xb6>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1b0:	e00b      	b.n	800b1ca <HAL_TIM_PWM_Stop+0xce>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	2b08      	cmp	r3, #8
 800b1b6:	d104      	bne.n	800b1c2 <HAL_TIM_PWM_Stop+0xc6>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1c0:	e003      	b.n	800b1ca <HAL_TIM_PWM_Stop+0xce>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	40010000 	.word	0x40010000
 800b1d8:	40010400 	.word	0x40010400

0800b1dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	f003 0302 	and.w	r3, r3, #2
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d122      	bne.n	800b238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f003 0302 	and.w	r3, r3, #2
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d11b      	bne.n	800b238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f06f 0202 	mvn.w	r2, #2
 800b208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	f003 0303 	and.w	r3, r3, #3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fa77 	bl	800b712 <HAL_TIM_IC_CaptureCallback>
 800b224:	e005      	b.n	800b232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fa69 	bl	800b6fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fa7a 	bl	800b726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 0304 	and.w	r3, r3, #4
 800b242:	2b04      	cmp	r3, #4
 800b244:	d122      	bne.n	800b28c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b04      	cmp	r3, #4
 800b252:	d11b      	bne.n	800b28c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f06f 0204 	mvn.w	r2, #4
 800b25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2202      	movs	r2, #2
 800b262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fa4d 	bl	800b712 <HAL_TIM_IC_CaptureCallback>
 800b278:	e005      	b.n	800b286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fa3f 	bl	800b6fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fa50 	bl	800b726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	f003 0308 	and.w	r3, r3, #8
 800b296:	2b08      	cmp	r3, #8
 800b298:	d122      	bne.n	800b2e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	f003 0308 	and.w	r3, r3, #8
 800b2a4:	2b08      	cmp	r3, #8
 800b2a6:	d11b      	bne.n	800b2e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f06f 0208 	mvn.w	r2, #8
 800b2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2204      	movs	r2, #4
 800b2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	f003 0303 	and.w	r3, r3, #3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fa23 	bl	800b712 <HAL_TIM_IC_CaptureCallback>
 800b2cc:	e005      	b.n	800b2da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fa15 	bl	800b6fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fa26 	bl	800b726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	f003 0310 	and.w	r3, r3, #16
 800b2ea:	2b10      	cmp	r3, #16
 800b2ec:	d122      	bne.n	800b334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	f003 0310 	and.w	r3, r3, #16
 800b2f8:	2b10      	cmp	r3, #16
 800b2fa:	d11b      	bne.n	800b334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f06f 0210 	mvn.w	r2, #16
 800b304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2208      	movs	r2, #8
 800b30a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f9f9 	bl	800b712 <HAL_TIM_IC_CaptureCallback>
 800b320:	e005      	b.n	800b32e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f9eb 	bl	800b6fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f9fc 	bl	800b726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	f003 0301 	and.w	r3, r3, #1
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d10e      	bne.n	800b360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	f003 0301 	and.w	r3, r3, #1
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d107      	bne.n	800b360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f06f 0201 	mvn.w	r2, #1
 800b358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7f9 fb64 	bl	8004a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b36a:	2b80      	cmp	r3, #128	; 0x80
 800b36c:	d10e      	bne.n	800b38c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b378:	2b80      	cmp	r3, #128	; 0x80
 800b37a:	d107      	bne.n	800b38c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fd78 	bl	800be7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b396:	2b40      	cmp	r3, #64	; 0x40
 800b398:	d10e      	bne.n	800b3b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a4:	2b40      	cmp	r3, #64	; 0x40
 800b3a6:	d107      	bne.n	800b3b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f9c1 	bl	800b73a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	f003 0320 	and.w	r3, r3, #32
 800b3c2:	2b20      	cmp	r3, #32
 800b3c4:	d10e      	bne.n	800b3e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	f003 0320 	and.w	r3, r3, #32
 800b3d0:	2b20      	cmp	r3, #32
 800b3d2:	d107      	bne.n	800b3e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f06f 0220 	mvn.w	r2, #32
 800b3dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fd42 	bl	800be68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b402:	2b01      	cmp	r3, #1
 800b404:	d101      	bne.n	800b40a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b406:	2302      	movs	r3, #2
 800b408:	e0ae      	b.n	800b568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b0c      	cmp	r3, #12
 800b416:	f200 809f 	bhi.w	800b558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b41a:	a201      	add	r2, pc, #4	; (adr r2, 800b420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b420:	0800b455 	.word	0x0800b455
 800b424:	0800b559 	.word	0x0800b559
 800b428:	0800b559 	.word	0x0800b559
 800b42c:	0800b559 	.word	0x0800b559
 800b430:	0800b495 	.word	0x0800b495
 800b434:	0800b559 	.word	0x0800b559
 800b438:	0800b559 	.word	0x0800b559
 800b43c:	0800b559 	.word	0x0800b559
 800b440:	0800b4d7 	.word	0x0800b4d7
 800b444:	0800b559 	.word	0x0800b559
 800b448:	0800b559 	.word	0x0800b559
 800b44c:	0800b559 	.word	0x0800b559
 800b450:	0800b517 	.word	0x0800b517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68b9      	ldr	r1, [r7, #8]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 fa18 	bl	800b890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699a      	ldr	r2, [r3, #24]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f042 0208 	orr.w	r2, r2, #8
 800b46e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	699a      	ldr	r2, [r3, #24]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f022 0204 	bic.w	r2, r2, #4
 800b47e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6999      	ldr	r1, [r3, #24]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	691a      	ldr	r2, [r3, #16]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	619a      	str	r2, [r3, #24]
      break;
 800b492:	e064      	b.n	800b55e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 fa68 	bl	800b970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	699a      	ldr	r2, [r3, #24]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699a      	ldr	r2, [r3, #24]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6999      	ldr	r1, [r3, #24]
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	021a      	lsls	r2, r3, #8
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	619a      	str	r2, [r3, #24]
      break;
 800b4d4:	e043      	b.n	800b55e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 fabd 	bl	800ba5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	69da      	ldr	r2, [r3, #28]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f042 0208 	orr.w	r2, r2, #8
 800b4f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	69da      	ldr	r2, [r3, #28]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f022 0204 	bic.w	r2, r2, #4
 800b500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	69d9      	ldr	r1, [r3, #28]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	691a      	ldr	r2, [r3, #16]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	430a      	orrs	r2, r1
 800b512:	61da      	str	r2, [r3, #28]
      break;
 800b514:	e023      	b.n	800b55e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68b9      	ldr	r1, [r7, #8]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 fb11 	bl	800bb44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	69da      	ldr	r2, [r3, #28]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	69da      	ldr	r2, [r3, #28]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	69d9      	ldr	r1, [r3, #28]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	021a      	lsls	r2, r3, #8
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	61da      	str	r2, [r3, #28]
      break;
 800b556:	e002      	b.n	800b55e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	75fb      	strb	r3, [r7, #23]
      break;
 800b55c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b566:	7dfb      	ldrb	r3, [r7, #23]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_TIM_ConfigClockSource+0x1c>
 800b588:	2302      	movs	r3, #2
 800b58a:	e0b4      	b.n	800b6f6 <HAL_TIM_ConfigClockSource+0x186>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b5aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5c4:	d03e      	beq.n	800b644 <HAL_TIM_ConfigClockSource+0xd4>
 800b5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ca:	f200 8087 	bhi.w	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d2:	f000 8086 	beq.w	800b6e2 <HAL_TIM_ConfigClockSource+0x172>
 800b5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5da:	d87f      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5dc:	2b70      	cmp	r3, #112	; 0x70
 800b5de:	d01a      	beq.n	800b616 <HAL_TIM_ConfigClockSource+0xa6>
 800b5e0:	2b70      	cmp	r3, #112	; 0x70
 800b5e2:	d87b      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5e4:	2b60      	cmp	r3, #96	; 0x60
 800b5e6:	d050      	beq.n	800b68a <HAL_TIM_ConfigClockSource+0x11a>
 800b5e8:	2b60      	cmp	r3, #96	; 0x60
 800b5ea:	d877      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5ec:	2b50      	cmp	r3, #80	; 0x50
 800b5ee:	d03c      	beq.n	800b66a <HAL_TIM_ConfigClockSource+0xfa>
 800b5f0:	2b50      	cmp	r3, #80	; 0x50
 800b5f2:	d873      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5f4:	2b40      	cmp	r3, #64	; 0x40
 800b5f6:	d058      	beq.n	800b6aa <HAL_TIM_ConfigClockSource+0x13a>
 800b5f8:	2b40      	cmp	r3, #64	; 0x40
 800b5fa:	d86f      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5fc:	2b30      	cmp	r3, #48	; 0x30
 800b5fe:	d064      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x15a>
 800b600:	2b30      	cmp	r3, #48	; 0x30
 800b602:	d86b      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b604:	2b20      	cmp	r3, #32
 800b606:	d060      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x15a>
 800b608:	2b20      	cmp	r3, #32
 800b60a:	d867      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d05c      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x15a>
 800b610:	2b10      	cmp	r3, #16
 800b612:	d05a      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x15a>
 800b614:	e062      	b.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6818      	ldr	r0, [r3, #0]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	6899      	ldr	r1, [r3, #8]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	f000 fb5d 	bl	800bce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	609a      	str	r2, [r3, #8]
      break;
 800b642:	e04f      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6818      	ldr	r0, [r3, #0]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	6899      	ldr	r1, [r3, #8]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f000 fb46 	bl	800bce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	689a      	ldr	r2, [r3, #8]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b666:	609a      	str	r2, [r3, #8]
      break;
 800b668:	e03c      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	6859      	ldr	r1, [r3, #4]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	461a      	mov	r2, r3
 800b678:	f000 faba 	bl	800bbf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2150      	movs	r1, #80	; 0x50
 800b682:	4618      	mov	r0, r3
 800b684:	f000 fb13 	bl	800bcae <TIM_ITRx_SetConfig>
      break;
 800b688:	e02c      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6818      	ldr	r0, [r3, #0]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	6859      	ldr	r1, [r3, #4]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	461a      	mov	r2, r3
 800b698:	f000 fad9 	bl	800bc4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2160      	movs	r1, #96	; 0x60
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 fb03 	bl	800bcae <TIM_ITRx_SetConfig>
      break;
 800b6a8:	e01c      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	6859      	ldr	r1, [r3, #4]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f000 fa9a 	bl	800bbf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2140      	movs	r1, #64	; 0x40
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 faf3 	bl	800bcae <TIM_ITRx_SetConfig>
      break;
 800b6c8:	e00c      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	f000 faea 	bl	800bcae <TIM_ITRx_SetConfig>
      break;
 800b6da:	e003      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e0:	e000      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b6e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b712:	b480      	push	{r7}
 800b714:	b083      	sub	sp, #12
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b71a:	bf00      	nop
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b726:	b480      	push	{r7}
 800b728:	b083      	sub	sp, #12
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b72e:	bf00      	nop
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
	...

0800b750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a40      	ldr	r2, [pc, #256]	; (800b864 <TIM_Base_SetConfig+0x114>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d013      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b76e:	d00f      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a3d      	ldr	r2, [pc, #244]	; (800b868 <TIM_Base_SetConfig+0x118>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d00b      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a3c      	ldr	r2, [pc, #240]	; (800b86c <TIM_Base_SetConfig+0x11c>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d007      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a3b      	ldr	r2, [pc, #236]	; (800b870 <TIM_Base_SetConfig+0x120>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d003      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a3a      	ldr	r2, [pc, #232]	; (800b874 <TIM_Base_SetConfig+0x124>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d108      	bne.n	800b7a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a2f      	ldr	r2, [pc, #188]	; (800b864 <TIM_Base_SetConfig+0x114>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d02b      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7b0:	d027      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a2c      	ldr	r2, [pc, #176]	; (800b868 <TIM_Base_SetConfig+0x118>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d023      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a2b      	ldr	r2, [pc, #172]	; (800b86c <TIM_Base_SetConfig+0x11c>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d01f      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a2a      	ldr	r2, [pc, #168]	; (800b870 <TIM_Base_SetConfig+0x120>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d01b      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a29      	ldr	r2, [pc, #164]	; (800b874 <TIM_Base_SetConfig+0x124>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d017      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a28      	ldr	r2, [pc, #160]	; (800b878 <TIM_Base_SetConfig+0x128>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d013      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a27      	ldr	r2, [pc, #156]	; (800b87c <TIM_Base_SetConfig+0x12c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00f      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a26      	ldr	r2, [pc, #152]	; (800b880 <TIM_Base_SetConfig+0x130>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d00b      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a25      	ldr	r2, [pc, #148]	; (800b884 <TIM_Base_SetConfig+0x134>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d007      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a24      	ldr	r2, [pc, #144]	; (800b888 <TIM_Base_SetConfig+0x138>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d003      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a23      	ldr	r2, [pc, #140]	; (800b88c <TIM_Base_SetConfig+0x13c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d108      	bne.n	800b814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	4313      	orrs	r3, r2
 800b812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	695b      	ldr	r3, [r3, #20]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a0a      	ldr	r2, [pc, #40]	; (800b864 <TIM_Base_SetConfig+0x114>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d003      	beq.n	800b848 <TIM_Base_SetConfig+0xf8>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a0c      	ldr	r2, [pc, #48]	; (800b874 <TIM_Base_SetConfig+0x124>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d103      	bne.n	800b850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	691a      	ldr	r2, [r3, #16]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	615a      	str	r2, [r3, #20]
}
 800b856:	bf00      	nop
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	40010000 	.word	0x40010000
 800b868:	40000400 	.word	0x40000400
 800b86c:	40000800 	.word	0x40000800
 800b870:	40000c00 	.word	0x40000c00
 800b874:	40010400 	.word	0x40010400
 800b878:	40014000 	.word	0x40014000
 800b87c:	40014400 	.word	0x40014400
 800b880:	40014800 	.word	0x40014800
 800b884:	40001800 	.word	0x40001800
 800b888:	40001c00 	.word	0x40001c00
 800b88c:	40002000 	.word	0x40002000

0800b890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b890:	b480      	push	{r7}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	f023 0201 	bic.w	r2, r3, #1
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f023 0303 	bic.w	r3, r3, #3
 800b8c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f023 0302 	bic.w	r3, r3, #2
 800b8d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a20      	ldr	r2, [pc, #128]	; (800b968 <TIM_OC1_SetConfig+0xd8>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d003      	beq.n	800b8f4 <TIM_OC1_SetConfig+0x64>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a1f      	ldr	r2, [pc, #124]	; (800b96c <TIM_OC1_SetConfig+0xdc>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d10c      	bne.n	800b90e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f023 0308 	bic.w	r3, r3, #8
 800b8fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	4313      	orrs	r3, r2
 800b904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f023 0304 	bic.w	r3, r3, #4
 800b90c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a15      	ldr	r2, [pc, #84]	; (800b968 <TIM_OC1_SetConfig+0xd8>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d003      	beq.n	800b91e <TIM_OC1_SetConfig+0x8e>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a14      	ldr	r2, [pc, #80]	; (800b96c <TIM_OC1_SetConfig+0xdc>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d111      	bne.n	800b942 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b92c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4313      	orrs	r3, r2
 800b936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	693a      	ldr	r2, [r7, #16]
 800b93e:	4313      	orrs	r3, r2
 800b940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	697a      	ldr	r2, [r7, #20]
 800b95a:	621a      	str	r2, [r3, #32]
}
 800b95c:	bf00      	nop
 800b95e:	371c      	adds	r7, #28
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	40010000 	.word	0x40010000
 800b96c:	40010400 	.word	0x40010400

0800b970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b970:	b480      	push	{r7}
 800b972:	b087      	sub	sp, #28
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	f023 0210 	bic.w	r2, r3, #16
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b99e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	021b      	lsls	r3, r3, #8
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f023 0320 	bic.w	r3, r3, #32
 800b9ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	011b      	lsls	r3, r3, #4
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a22      	ldr	r2, [pc, #136]	; (800ba54 <TIM_OC2_SetConfig+0xe4>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d003      	beq.n	800b9d8 <TIM_OC2_SetConfig+0x68>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a21      	ldr	r2, [pc, #132]	; (800ba58 <TIM_OC2_SetConfig+0xe8>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d10d      	bne.n	800b9f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a17      	ldr	r2, [pc, #92]	; (800ba54 <TIM_OC2_SetConfig+0xe4>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d003      	beq.n	800ba04 <TIM_OC2_SetConfig+0x94>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a16      	ldr	r2, [pc, #88]	; (800ba58 <TIM_OC2_SetConfig+0xe8>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d113      	bne.n	800ba2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	621a      	str	r2, [r3, #32]
}
 800ba46:	bf00      	nop
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	40010000 	.word	0x40010000
 800ba58:	40010400 	.word	0x40010400

0800ba5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	69db      	ldr	r3, [r3, #28]
 800ba82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f023 0303 	bic.w	r3, r3, #3
 800ba92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800baa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	021b      	lsls	r3, r3, #8
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	4313      	orrs	r3, r2
 800bab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a21      	ldr	r2, [pc, #132]	; (800bb3c <TIM_OC3_SetConfig+0xe0>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d003      	beq.n	800bac2 <TIM_OC3_SetConfig+0x66>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a20      	ldr	r2, [pc, #128]	; (800bb40 <TIM_OC3_SetConfig+0xe4>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d10d      	bne.n	800bade <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	021b      	lsls	r3, r3, #8
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800badc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a16      	ldr	r2, [pc, #88]	; (800bb3c <TIM_OC3_SetConfig+0xe0>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d003      	beq.n	800baee <TIM_OC3_SetConfig+0x92>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a15      	ldr	r2, [pc, #84]	; (800bb40 <TIM_OC3_SetConfig+0xe4>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d113      	bne.n	800bb16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bafc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	011b      	lsls	r3, r3, #4
 800bb04:	693a      	ldr	r2, [r7, #16]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	011b      	lsls	r3, r3, #4
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	621a      	str	r2, [r3, #32]
}
 800bb30:	bf00      	nop
 800bb32:	371c      	adds	r7, #28
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	40010000 	.word	0x40010000
 800bb40:	40010400 	.word	0x40010400

0800bb44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b087      	sub	sp, #28
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a1b      	ldr	r3, [r3, #32]
 800bb52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	031b      	lsls	r3, r3, #12
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a12      	ldr	r2, [pc, #72]	; (800bbe8 <TIM_OC4_SetConfig+0xa4>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d003      	beq.n	800bbac <TIM_OC4_SetConfig+0x68>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a11      	ldr	r2, [pc, #68]	; (800bbec <TIM_OC4_SetConfig+0xa8>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d109      	bne.n	800bbc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	019b      	lsls	r3, r3, #6
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	621a      	str	r2, [r3, #32]
}
 800bbda:	bf00      	nop
 800bbdc:	371c      	adds	r7, #28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	40010000 	.word	0x40010000
 800bbec:	40010400 	.word	0x40010400

0800bbf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6a1b      	ldr	r3, [r3, #32]
 800bc00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	f023 0201 	bic.w	r2, r3, #1
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	011b      	lsls	r3, r3, #4
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f023 030a 	bic.w	r3, r3, #10
 800bc2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	621a      	str	r2, [r3, #32]
}
 800bc42:	bf00      	nop
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b087      	sub	sp, #28
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	60f8      	str	r0, [r7, #12]
 800bc56:	60b9      	str	r1, [r7, #8]
 800bc58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	f023 0210 	bic.w	r2, r3, #16
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	699b      	ldr	r3, [r3, #24]
 800bc6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	031b      	lsls	r3, r3, #12
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	011b      	lsls	r3, r3, #4
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	697a      	ldr	r2, [r7, #20]
 800bc9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	621a      	str	r2, [r3, #32]
}
 800bca2:	bf00      	nop
 800bca4:	371c      	adds	r7, #28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b085      	sub	sp, #20
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	4313      	orrs	r3, r2
 800bccc:	f043 0307 	orr.w	r3, r3, #7
 800bcd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	609a      	str	r2, [r3, #8]
}
 800bcd8:	bf00      	nop
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b087      	sub	sp, #28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	021a      	lsls	r2, r3, #8
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	431a      	orrs	r2, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	609a      	str	r2, [r3, #8]
}
 800bd18:	bf00      	nop
 800bd1a:	371c      	adds	r7, #28
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	f003 031f 	and.w	r3, r3, #31
 800bd36:	2201      	movs	r2, #1
 800bd38:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6a1a      	ldr	r2, [r3, #32]
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	43db      	mvns	r3, r3
 800bd46:	401a      	ands	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6a1a      	ldr	r2, [r3, #32]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	f003 031f 	and.w	r3, r3, #31
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	fa01 f303 	lsl.w	r3, r1, r3
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	621a      	str	r2, [r3, #32]
}
 800bd62:	bf00      	nop
 800bd64:	371c      	adds	r7, #28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
	...

0800bd70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d101      	bne.n	800bd88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd84:	2302      	movs	r3, #2
 800bd86:	e05a      	b.n	800be3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a21      	ldr	r2, [pc, #132]	; (800be4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d022      	beq.n	800be12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdd4:	d01d      	beq.n	800be12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a1d      	ldr	r2, [pc, #116]	; (800be50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d018      	beq.n	800be12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a1b      	ldr	r2, [pc, #108]	; (800be54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d013      	beq.n	800be12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a1a      	ldr	r2, [pc, #104]	; (800be58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d00e      	beq.n	800be12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a18      	ldr	r2, [pc, #96]	; (800be5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d009      	beq.n	800be12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a17      	ldr	r2, [pc, #92]	; (800be60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d004      	beq.n	800be12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a15      	ldr	r2, [pc, #84]	; (800be64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d10c      	bne.n	800be2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	4313      	orrs	r3, r2
 800be22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3714      	adds	r7, #20
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	40010000 	.word	0x40010000
 800be50:	40000400 	.word	0x40000400
 800be54:	40000800 	.word	0x40000800
 800be58:	40000c00 	.word	0x40000c00
 800be5c:	40010400 	.word	0x40010400
 800be60:	40014000 	.word	0x40014000
 800be64:	40001800 	.word	0x40001800

0800be68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d101      	bne.n	800bea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	e03f      	b.n	800bf22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d106      	bne.n	800bebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7f9 fa00 	bl	80052bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2224      	movs	r2, #36	; 0x24
 800bec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68da      	ldr	r2, [r3, #12]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fddb 	bl	800ca90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	691a      	ldr	r2, [r3, #16]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	695a      	ldr	r2, [r3, #20]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68da      	ldr	r2, [r3, #12]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2220      	movs	r2, #32
 800bf14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2220      	movs	r2, #32
 800bf1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b08a      	sub	sp, #40	; 0x28
 800bf2e:	af02      	add	r7, sp, #8
 800bf30:	60f8      	str	r0, [r7, #12]
 800bf32:	60b9      	str	r1, [r7, #8]
 800bf34:	603b      	str	r3, [r7, #0]
 800bf36:	4613      	mov	r3, r2
 800bf38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b20      	cmp	r3, #32
 800bf48:	d17c      	bne.n	800c044 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <HAL_UART_Transmit+0x2c>
 800bf50:	88fb      	ldrh	r3, [r7, #6]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d101      	bne.n	800bf5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	e075      	b.n	800c046 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d101      	bne.n	800bf68 <HAL_UART_Transmit+0x3e>
 800bf64:	2302      	movs	r3, #2
 800bf66:	e06e      	b.n	800c046 <HAL_UART_Transmit+0x11c>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2221      	movs	r2, #33	; 0x21
 800bf7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf7e:	f7fa fb61 	bl	8006644 <HAL_GetTick>
 800bf82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	88fa      	ldrh	r2, [r7, #6]
 800bf88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	88fa      	ldrh	r2, [r7, #6]
 800bf8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf98:	d108      	bne.n	800bfac <HAL_UART_Transmit+0x82>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d104      	bne.n	800bfac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	61bb      	str	r3, [r7, #24]
 800bfaa:	e003      	b.n	800bfb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bfbc:	e02a      	b.n	800c014 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2180      	movs	r1, #128	; 0x80
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 fb1f 	bl	800c60c <UART_WaitOnFlagUntilTimeout>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d001      	beq.n	800bfd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e036      	b.n	800c046 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10b      	bne.n	800bff6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	3302      	adds	r3, #2
 800bff2:	61bb      	str	r3, [r7, #24]
 800bff4:	e007      	b.n	800c006 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	781a      	ldrb	r2, [r3, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	3301      	adds	r3, #1
 800c004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	3b01      	subs	r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c018:	b29b      	uxth	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1cf      	bne.n	800bfbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	2200      	movs	r2, #0
 800c026:	2140      	movs	r1, #64	; 0x40
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 faef 	bl	800c60c <UART_WaitOnFlagUntilTimeout>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c034:	2303      	movs	r3, #3
 800c036:	e006      	b.n	800c046 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2220      	movs	r2, #32
 800c03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	e000      	b.n	800c046 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c044:	2302      	movs	r3, #2
  }
}
 800c046:	4618      	mov	r0, r3
 800c048:	3720      	adds	r7, #32
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	60f8      	str	r0, [r7, #12]
 800c056:	60b9      	str	r1, [r7, #8]
 800c058:	4613      	mov	r3, r2
 800c05a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c062:	b2db      	uxtb	r3, r3
 800c064:	2b20      	cmp	r3, #32
 800c066:	d11d      	bne.n	800c0a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d002      	beq.n	800c074 <HAL_UART_Receive_IT+0x26>
 800c06e:	88fb      	ldrh	r3, [r7, #6]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e016      	b.n	800c0a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d101      	bne.n	800c086 <HAL_UART_Receive_IT+0x38>
 800c082:	2302      	movs	r3, #2
 800c084:	e00f      	b.n	800c0a6 <HAL_UART_Receive_IT+0x58>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c094:	88fb      	ldrh	r3, [r7, #6]
 800c096:	461a      	mov	r2, r3
 800c098:	68b9      	ldr	r1, [r7, #8]
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f000 fb24 	bl	800c6e8 <UART_Start_Receive_IT>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	e000      	b.n	800c0a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c0a4:	2302      	movs	r3, #2
  }
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
	...

0800c0b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b0ba      	sub	sp, #232	; 0xe8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e6:	f003 030f 	and.w	r3, r3, #15
 800c0ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c0ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d10f      	bne.n	800c116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0fa:	f003 0320 	and.w	r3, r3, #32
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d009      	beq.n	800c116 <HAL_UART_IRQHandler+0x66>
 800c102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c106:	f003 0320 	and.w	r3, r3, #32
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d003      	beq.n	800c116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fc03 	bl	800c91a <UART_Receive_IT>
      return;
 800c114:	e256      	b.n	800c5c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 80de 	beq.w	800c2dc <HAL_UART_IRQHandler+0x22c>
 800c120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d106      	bne.n	800c13a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c134:	2b00      	cmp	r3, #0
 800c136:	f000 80d1 	beq.w	800c2dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c13e:	f003 0301 	and.w	r3, r3, #1
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00b      	beq.n	800c15e <HAL_UART_IRQHandler+0xae>
 800c146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d005      	beq.n	800c15e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c156:	f043 0201 	orr.w	r2, r3, #1
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c162:	f003 0304 	and.w	r3, r3, #4
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00b      	beq.n	800c182 <HAL_UART_IRQHandler+0xd2>
 800c16a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c16e:	f003 0301 	and.w	r3, r3, #1
 800c172:	2b00      	cmp	r3, #0
 800c174:	d005      	beq.n	800c182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	f043 0202 	orr.w	r2, r3, #2
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c186:	f003 0302 	and.w	r3, r3, #2
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00b      	beq.n	800c1a6 <HAL_UART_IRQHandler+0xf6>
 800c18e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	d005      	beq.n	800c1a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19e:	f043 0204 	orr.w	r2, r3, #4
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1aa:	f003 0308 	and.w	r3, r3, #8
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d011      	beq.n	800c1d6 <HAL_UART_IRQHandler+0x126>
 800c1b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1b6:	f003 0320 	and.w	r3, r3, #32
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d105      	bne.n	800c1ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c1be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1c2:	f003 0301 	and.w	r3, r3, #1
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d005      	beq.n	800c1d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ce:	f043 0208 	orr.w	r2, r3, #8
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f000 81ed 	beq.w	800c5ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1e4:	f003 0320 	and.w	r3, r3, #32
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d008      	beq.n	800c1fe <HAL_UART_IRQHandler+0x14e>
 800c1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1f0:	f003 0320 	and.w	r3, r3, #32
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 fb8e 	bl	800c91a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	695b      	ldr	r3, [r3, #20]
 800c204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c208:	2b40      	cmp	r3, #64	; 0x40
 800c20a:	bf0c      	ite	eq
 800c20c:	2301      	moveq	r3, #1
 800c20e:	2300      	movne	r3, #0
 800c210:	b2db      	uxtb	r3, r3
 800c212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21a:	f003 0308 	and.w	r3, r3, #8
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d103      	bne.n	800c22a <HAL_UART_IRQHandler+0x17a>
 800c222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c226:	2b00      	cmp	r3, #0
 800c228:	d04f      	beq.n	800c2ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 fa96 	bl	800c75c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c23a:	2b40      	cmp	r3, #64	; 0x40
 800c23c:	d141      	bne.n	800c2c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3314      	adds	r3, #20
 800c244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c24c:	e853 3f00 	ldrex	r3, [r3]
 800c250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c25c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	3314      	adds	r3, #20
 800c266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c26a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c26e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c27a:	e841 2300 	strex	r3, r2, [r1]
 800c27e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1d9      	bne.n	800c23e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d013      	beq.n	800c2ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c296:	4a7d      	ldr	r2, [pc, #500]	; (800c48c <HAL_UART_IRQHandler+0x3dc>)
 800c298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fa ff4a 	bl	8007138 <HAL_DMA_Abort_IT>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d016      	beq.n	800c2d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2b8:	e00e      	b.n	800c2d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f990 	bl	800c5e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2c0:	e00a      	b.n	800c2d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f98c 	bl	800c5e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2c8:	e006      	b.n	800c2d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f988 	bl	800c5e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c2d6:	e170      	b.n	800c5ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2d8:	bf00      	nop
    return;
 800c2da:	e16e      	b.n	800c5ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	f040 814a 	bne.w	800c57a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ea:	f003 0310 	and.w	r3, r3, #16
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f000 8143 	beq.w	800c57a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2f8:	f003 0310 	and.w	r3, r3, #16
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 813c 	beq.w	800c57a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c302:	2300      	movs	r3, #0
 800c304:	60bb      	str	r3, [r7, #8]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	60bb      	str	r3, [r7, #8]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	60bb      	str	r3, [r7, #8]
 800c316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c322:	2b40      	cmp	r3, #64	; 0x40
 800c324:	f040 80b4 	bne.w	800c490 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f000 8140 	beq.w	800c5be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c346:	429a      	cmp	r2, r3
 800c348:	f080 8139 	bcs.w	800c5be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c358:	69db      	ldr	r3, [r3, #28]
 800c35a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c35e:	f000 8088 	beq.w	800c472 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	330c      	adds	r3, #12
 800c368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c370:	e853 3f00 	ldrex	r3, [r3]
 800c374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c37c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	330c      	adds	r3, #12
 800c38a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c38e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c39a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c39e:	e841 2300 	strex	r3, r2, [r1]
 800c3a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c3a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1d9      	bne.n	800c362 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3314      	adds	r3, #20
 800c3b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3b8:	e853 3f00 	ldrex	r3, [r3]
 800c3bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c3be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3c0:	f023 0301 	bic.w	r3, r3, #1
 800c3c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3314      	adds	r3, #20
 800c3ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c3d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c3d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c3da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c3de:	e841 2300 	strex	r3, r2, [r1]
 800c3e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c3e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d1e1      	bne.n	800c3ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	3314      	adds	r3, #20
 800c3f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c3fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	3314      	adds	r3, #20
 800c40a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c40e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c416:	e841 2300 	strex	r3, r2, [r1]
 800c41a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c41c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1e3      	bne.n	800c3ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2220      	movs	r2, #32
 800c426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	330c      	adds	r3, #12
 800c436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c43a:	e853 3f00 	ldrex	r3, [r3]
 800c43e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c442:	f023 0310 	bic.w	r3, r3, #16
 800c446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	330c      	adds	r3, #12
 800c450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c454:	65ba      	str	r2, [r7, #88]	; 0x58
 800c456:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c45a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c45c:	e841 2300 	strex	r3, r2, [r1]
 800c460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1e3      	bne.n	800c430 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fa fdf3 	bl	8007058 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	b29b      	uxth	r3, r3
 800c480:	4619      	mov	r1, r3
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f8b6 	bl	800c5f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c488:	e099      	b.n	800c5be <HAL_UART_IRQHandler+0x50e>
 800c48a:	bf00      	nop
 800c48c:	0800c823 	.word	0x0800c823
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c498:	b29b      	uxth	r3, r3
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f000 808b 	beq.w	800c5c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c4ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 8086 	beq.w	800c5c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	330c      	adds	r3, #12
 800c4bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c0:	e853 3f00 	ldrex	r3, [r3]
 800c4c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	330c      	adds	r3, #12
 800c4d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c4da:	647a      	str	r2, [r7, #68]	; 0x44
 800c4dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4e2:	e841 2300 	strex	r3, r2, [r1]
 800c4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1e3      	bne.n	800c4b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3314      	adds	r3, #20
 800c4f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f8:	e853 3f00 	ldrex	r3, [r3]
 800c4fc:	623b      	str	r3, [r7, #32]
   return(result);
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	f023 0301 	bic.w	r3, r3, #1
 800c504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	3314      	adds	r3, #20
 800c50e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c512:	633a      	str	r2, [r7, #48]	; 0x30
 800c514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c51a:	e841 2300 	strex	r3, r2, [r1]
 800c51e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e3      	bne.n	800c4ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2220      	movs	r2, #32
 800c52a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	330c      	adds	r3, #12
 800c53a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	e853 3f00 	ldrex	r3, [r3]
 800c542:	60fb      	str	r3, [r7, #12]
   return(result);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f023 0310 	bic.w	r3, r3, #16
 800c54a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	330c      	adds	r3, #12
 800c554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c558:	61fa      	str	r2, [r7, #28]
 800c55a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55c:	69b9      	ldr	r1, [r7, #24]
 800c55e:	69fa      	ldr	r2, [r7, #28]
 800c560:	e841 2300 	strex	r3, r2, [r1]
 800c564:	617b      	str	r3, [r7, #20]
   return(result);
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1e3      	bne.n	800c534 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c56c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f83e 	bl	800c5f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c578:	e023      	b.n	800c5c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c582:	2b00      	cmp	r3, #0
 800c584:	d009      	beq.n	800c59a <HAL_UART_IRQHandler+0x4ea>
 800c586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d003      	beq.n	800c59a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f959 	bl	800c84a <UART_Transmit_IT>
    return;
 800c598:	e014      	b.n	800c5c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00e      	beq.n	800c5c4 <HAL_UART_IRQHandler+0x514>
 800c5a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d008      	beq.n	800c5c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 f999 	bl	800c8ea <UART_EndTransmit_IT>
    return;
 800c5b8:	e004      	b.n	800c5c4 <HAL_UART_IRQHandler+0x514>
    return;
 800c5ba:	bf00      	nop
 800c5bc:	e002      	b.n	800c5c4 <HAL_UART_IRQHandler+0x514>
      return;
 800c5be:	bf00      	nop
 800c5c0:	e000      	b.n	800c5c4 <HAL_UART_IRQHandler+0x514>
      return;
 800c5c2:	bf00      	nop
  }
}
 800c5c4:	37e8      	adds	r7, #232	; 0xe8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop

0800c5cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b090      	sub	sp, #64	; 0x40
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	603b      	str	r3, [r7, #0]
 800c618:	4613      	mov	r3, r2
 800c61a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c61c:	e050      	b.n	800c6c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c61e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c624:	d04c      	beq.n	800c6c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d007      	beq.n	800c63c <UART_WaitOnFlagUntilTimeout+0x30>
 800c62c:	f7fa f80a 	bl	8006644 <HAL_GetTick>
 800c630:	4602      	mov	r2, r0
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c638:	429a      	cmp	r2, r3
 800c63a:	d241      	bcs.n	800c6c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	330c      	adds	r3, #12
 800c642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	e853 3f00 	ldrex	r3, [r3]
 800c64a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c652:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	330c      	adds	r3, #12
 800c65a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c65c:	637a      	str	r2, [r7, #52]	; 0x34
 800c65e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c664:	e841 2300 	strex	r3, r2, [r1]
 800c668:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e5      	bne.n	800c63c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3314      	adds	r3, #20
 800c676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	e853 3f00 	ldrex	r3, [r3]
 800c67e:	613b      	str	r3, [r7, #16]
   return(result);
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f023 0301 	bic.w	r3, r3, #1
 800c686:	63bb      	str	r3, [r7, #56]	; 0x38
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	3314      	adds	r3, #20
 800c68e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c690:	623a      	str	r2, [r7, #32]
 800c692:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c694:	69f9      	ldr	r1, [r7, #28]
 800c696:	6a3a      	ldr	r2, [r7, #32]
 800c698:	e841 2300 	strex	r3, r2, [r1]
 800c69c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1e5      	bne.n	800c670 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e00f      	b.n	800c6e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	bf0c      	ite	eq
 800c6d0:	2301      	moveq	r3, #1
 800c6d2:	2300      	movne	r3, #0
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d09f      	beq.n	800c61e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3740      	adds	r7, #64	; 0x40
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	88fa      	ldrh	r2, [r7, #6]
 800c700:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	88fa      	ldrh	r2, [r7, #6]
 800c706:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2222      	movs	r2, #34	; 0x22
 800c712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c72c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	695a      	ldr	r2, [r3, #20]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f042 0201 	orr.w	r2, r2, #1
 800c73c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68da      	ldr	r2, [r3, #12]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f042 0220 	orr.w	r2, r2, #32
 800c74c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b095      	sub	sp, #84	; 0x54
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	330c      	adds	r3, #12
 800c76a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76e:	e853 3f00 	ldrex	r3, [r3]
 800c772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c77a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	330c      	adds	r3, #12
 800c782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c784:	643a      	str	r2, [r7, #64]	; 0x40
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c78a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c78c:	e841 2300 	strex	r3, r2, [r1]
 800c790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1e5      	bne.n	800c764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	3314      	adds	r3, #20
 800c79e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	e853 3f00 	ldrex	r3, [r3]
 800c7a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	f023 0301 	bic.w	r3, r3, #1
 800c7ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3314      	adds	r3, #20
 800c7b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7c0:	e841 2300 	strex	r3, r2, [r1]
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1e5      	bne.n	800c798 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d119      	bne.n	800c808 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	330c      	adds	r3, #12
 800c7da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	e853 3f00 	ldrex	r3, [r3]
 800c7e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	f023 0310 	bic.w	r3, r3, #16
 800c7ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	330c      	adds	r3, #12
 800c7f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7f4:	61ba      	str	r2, [r7, #24]
 800c7f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f8:	6979      	ldr	r1, [r7, #20]
 800c7fa:	69ba      	ldr	r2, [r7, #24]
 800c7fc:	e841 2300 	strex	r3, r2, [r1]
 800c800:	613b      	str	r3, [r7, #16]
   return(result);
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1e5      	bne.n	800c7d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2220      	movs	r2, #32
 800c80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c816:	bf00      	nop
 800c818:	3754      	adds	r7, #84	; 0x54
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2200      	movs	r2, #0
 800c834:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f7ff fecf 	bl	800c5e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c842:	bf00      	nop
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c84a:	b480      	push	{r7}
 800c84c:	b085      	sub	sp, #20
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	2b21      	cmp	r3, #33	; 0x21
 800c85c:	d13e      	bne.n	800c8dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c866:	d114      	bne.n	800c892 <UART_Transmit_IT+0x48>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d110      	bne.n	800c892 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a1b      	ldr	r3, [r3, #32]
 800c874:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c884:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	1c9a      	adds	r2, r3, #2
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	621a      	str	r2, [r3, #32]
 800c890:	e008      	b.n	800c8a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	1c59      	adds	r1, r3, #1
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	6211      	str	r1, [r2, #32]
 800c89c:	781a      	ldrb	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10f      	bne.n	800c8d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68da      	ldr	r2, [r3, #12]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c8c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68da      	ldr	r2, [r3, #12]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	e000      	b.n	800c8de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c8dc:	2302      	movs	r3, #2
  }
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68da      	ldr	r2, [r3, #12]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c900:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2220      	movs	r2, #32
 800c906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f7ff fe5e 	bl	800c5cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b08c      	sub	sp, #48	; 0x30
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b22      	cmp	r3, #34	; 0x22
 800c92c:	f040 80ab 	bne.w	800ca86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c938:	d117      	bne.n	800c96a <UART_Receive_IT+0x50>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d113      	bne.n	800c96a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c942:	2300      	movs	r3, #0
 800c944:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	b29b      	uxth	r3, r3
 800c954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c958:	b29a      	uxth	r2, r3
 800c95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c962:	1c9a      	adds	r2, r3, #2
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	629a      	str	r2, [r3, #40]	; 0x28
 800c968:	e026      	b.n	800c9b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c96e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c970:	2300      	movs	r3, #0
 800c972:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c97c:	d007      	beq.n	800c98e <UART_Receive_IT+0x74>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10a      	bne.n	800c99c <UART_Receive_IT+0x82>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d106      	bne.n	800c99c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	b2da      	uxtb	r2, r3
 800c996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c998:	701a      	strb	r2, [r3, #0]
 800c99a:	e008      	b.n	800c9ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d15a      	bne.n	800ca82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68da      	ldr	r2, [r3, #12]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f022 0220 	bic.w	r2, r2, #32
 800c9da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68da      	ldr	r2, [r3, #12]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c9ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	695a      	ldr	r2, [r3, #20]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f022 0201 	bic.w	r2, r2, #1
 800c9fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2220      	movs	r2, #32
 800ca00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d135      	bne.n	800ca78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	330c      	adds	r3, #12
 800ca18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	e853 3f00 	ldrex	r3, [r3]
 800ca20:	613b      	str	r3, [r7, #16]
   return(result);
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	f023 0310 	bic.w	r3, r3, #16
 800ca28:	627b      	str	r3, [r7, #36]	; 0x24
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	330c      	adds	r3, #12
 800ca30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca32:	623a      	str	r2, [r7, #32]
 800ca34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca36:	69f9      	ldr	r1, [r7, #28]
 800ca38:	6a3a      	ldr	r2, [r7, #32]
 800ca3a:	e841 2300 	strex	r3, r2, [r1]
 800ca3e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1e5      	bne.n	800ca12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 0310 	and.w	r3, r3, #16
 800ca50:	2b10      	cmp	r3, #16
 800ca52:	d10a      	bne.n	800ca6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ca54:	2300      	movs	r3, #0
 800ca56:	60fb      	str	r3, [r7, #12]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff fdbf 	bl	800c5f4 <HAL_UARTEx_RxEventCallback>
 800ca76:	e002      	b.n	800ca7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7f6 ffe3 	bl	8003a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	e002      	b.n	800ca88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	e000      	b.n	800ca88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ca86:	2302      	movs	r3, #2
  }
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3730      	adds	r7, #48	; 0x30
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	b09f      	sub	sp, #124	; 0x7c
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800caa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caa6:	68d9      	ldr	r1, [r3, #12]
 800caa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	ea40 0301 	orr.w	r3, r0, r1
 800cab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cab4:	689a      	ldr	r2, [r3, #8]
 800cab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	431a      	orrs	r2, r3
 800cabc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cabe:	695b      	ldr	r3, [r3, #20]
 800cac0:	431a      	orrs	r2, r3
 800cac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cac4:	69db      	ldr	r3, [r3, #28]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800caca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cad4:	f021 010c 	bic.w	r1, r1, #12
 800cad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cade:	430b      	orrs	r3, r1
 800cae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	695b      	ldr	r3, [r3, #20]
 800cae8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800caec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caee:	6999      	ldr	r1, [r3, #24]
 800caf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	ea40 0301 	orr.w	r3, r0, r1
 800caf8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	4bc5      	ldr	r3, [pc, #788]	; (800ce14 <UART_SetConfig+0x384>)
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d004      	beq.n	800cb0e <UART_SetConfig+0x7e>
 800cb04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	4bc3      	ldr	r3, [pc, #780]	; (800ce18 <UART_SetConfig+0x388>)
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d103      	bne.n	800cb16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cb0e:	f7fd f8b1 	bl	8009c74 <HAL_RCC_GetPCLK2Freq>
 800cb12:	6778      	str	r0, [r7, #116]	; 0x74
 800cb14:	e002      	b.n	800cb1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb16:	f7fd f899 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800cb1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb1e:	69db      	ldr	r3, [r3, #28]
 800cb20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb24:	f040 80b6 	bne.w	800cc94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cb28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb2a:	461c      	mov	r4, r3
 800cb2c:	f04f 0500 	mov.w	r5, #0
 800cb30:	4622      	mov	r2, r4
 800cb32:	462b      	mov	r3, r5
 800cb34:	1891      	adds	r1, r2, r2
 800cb36:	6439      	str	r1, [r7, #64]	; 0x40
 800cb38:	415b      	adcs	r3, r3
 800cb3a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cb40:	1912      	adds	r2, r2, r4
 800cb42:	eb45 0303 	adc.w	r3, r5, r3
 800cb46:	f04f 0000 	mov.w	r0, #0
 800cb4a:	f04f 0100 	mov.w	r1, #0
 800cb4e:	00d9      	lsls	r1, r3, #3
 800cb50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cb54:	00d0      	lsls	r0, r2, #3
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	1911      	adds	r1, r2, r4
 800cb5c:	6639      	str	r1, [r7, #96]	; 0x60
 800cb5e:	416b      	adcs	r3, r5
 800cb60:	667b      	str	r3, [r7, #100]	; 0x64
 800cb62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	461a      	mov	r2, r3
 800cb68:	f04f 0300 	mov.w	r3, #0
 800cb6c:	1891      	adds	r1, r2, r2
 800cb6e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cb70:	415b      	adcs	r3, r3
 800cb72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cb78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cb7c:	f7f4 f82e 	bl	8000bdc <__aeabi_uldivmod>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	4ba5      	ldr	r3, [pc, #660]	; (800ce1c <UART_SetConfig+0x38c>)
 800cb86:	fba3 2302 	umull	r2, r3, r3, r2
 800cb8a:	095b      	lsrs	r3, r3, #5
 800cb8c:	011e      	lsls	r6, r3, #4
 800cb8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb90:	461c      	mov	r4, r3
 800cb92:	f04f 0500 	mov.w	r5, #0
 800cb96:	4622      	mov	r2, r4
 800cb98:	462b      	mov	r3, r5
 800cb9a:	1891      	adds	r1, r2, r2
 800cb9c:	6339      	str	r1, [r7, #48]	; 0x30
 800cb9e:	415b      	adcs	r3, r3
 800cba0:	637b      	str	r3, [r7, #52]	; 0x34
 800cba2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cba6:	1912      	adds	r2, r2, r4
 800cba8:	eb45 0303 	adc.w	r3, r5, r3
 800cbac:	f04f 0000 	mov.w	r0, #0
 800cbb0:	f04f 0100 	mov.w	r1, #0
 800cbb4:	00d9      	lsls	r1, r3, #3
 800cbb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cbba:	00d0      	lsls	r0, r2, #3
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	1911      	adds	r1, r2, r4
 800cbc2:	65b9      	str	r1, [r7, #88]	; 0x58
 800cbc4:	416b      	adcs	r3, r5
 800cbc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	461a      	mov	r2, r3
 800cbce:	f04f 0300 	mov.w	r3, #0
 800cbd2:	1891      	adds	r1, r2, r2
 800cbd4:	62b9      	str	r1, [r7, #40]	; 0x28
 800cbd6:	415b      	adcs	r3, r3
 800cbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cbde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cbe2:	f7f3 fffb 	bl	8000bdc <__aeabi_uldivmod>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4b8c      	ldr	r3, [pc, #560]	; (800ce1c <UART_SetConfig+0x38c>)
 800cbec:	fba3 1302 	umull	r1, r3, r3, r2
 800cbf0:	095b      	lsrs	r3, r3, #5
 800cbf2:	2164      	movs	r1, #100	; 0x64
 800cbf4:	fb01 f303 	mul.w	r3, r1, r3
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	3332      	adds	r3, #50	; 0x32
 800cbfe:	4a87      	ldr	r2, [pc, #540]	; (800ce1c <UART_SetConfig+0x38c>)
 800cc00:	fba2 2303 	umull	r2, r3, r2, r3
 800cc04:	095b      	lsrs	r3, r3, #5
 800cc06:	005b      	lsls	r3, r3, #1
 800cc08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cc0c:	441e      	add	r6, r3
 800cc0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc10:	4618      	mov	r0, r3
 800cc12:	f04f 0100 	mov.w	r1, #0
 800cc16:	4602      	mov	r2, r0
 800cc18:	460b      	mov	r3, r1
 800cc1a:	1894      	adds	r4, r2, r2
 800cc1c:	623c      	str	r4, [r7, #32]
 800cc1e:	415b      	adcs	r3, r3
 800cc20:	627b      	str	r3, [r7, #36]	; 0x24
 800cc22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc26:	1812      	adds	r2, r2, r0
 800cc28:	eb41 0303 	adc.w	r3, r1, r3
 800cc2c:	f04f 0400 	mov.w	r4, #0
 800cc30:	f04f 0500 	mov.w	r5, #0
 800cc34:	00dd      	lsls	r5, r3, #3
 800cc36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cc3a:	00d4      	lsls	r4, r2, #3
 800cc3c:	4622      	mov	r2, r4
 800cc3e:	462b      	mov	r3, r5
 800cc40:	1814      	adds	r4, r2, r0
 800cc42:	653c      	str	r4, [r7, #80]	; 0x50
 800cc44:	414b      	adcs	r3, r1
 800cc46:	657b      	str	r3, [r7, #84]	; 0x54
 800cc48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	f04f 0300 	mov.w	r3, #0
 800cc52:	1891      	adds	r1, r2, r2
 800cc54:	61b9      	str	r1, [r7, #24]
 800cc56:	415b      	adcs	r3, r3
 800cc58:	61fb      	str	r3, [r7, #28]
 800cc5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800cc62:	f7f3 ffbb 	bl	8000bdc <__aeabi_uldivmod>
 800cc66:	4602      	mov	r2, r0
 800cc68:	460b      	mov	r3, r1
 800cc6a:	4b6c      	ldr	r3, [pc, #432]	; (800ce1c <UART_SetConfig+0x38c>)
 800cc6c:	fba3 1302 	umull	r1, r3, r3, r2
 800cc70:	095b      	lsrs	r3, r3, #5
 800cc72:	2164      	movs	r1, #100	; 0x64
 800cc74:	fb01 f303 	mul.w	r3, r1, r3
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	3332      	adds	r3, #50	; 0x32
 800cc7e:	4a67      	ldr	r2, [pc, #412]	; (800ce1c <UART_SetConfig+0x38c>)
 800cc80:	fba2 2303 	umull	r2, r3, r2, r3
 800cc84:	095b      	lsrs	r3, r3, #5
 800cc86:	f003 0207 	and.w	r2, r3, #7
 800cc8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4432      	add	r2, r6
 800cc90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cc92:	e0b9      	b.n	800ce08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc96:	461c      	mov	r4, r3
 800cc98:	f04f 0500 	mov.w	r5, #0
 800cc9c:	4622      	mov	r2, r4
 800cc9e:	462b      	mov	r3, r5
 800cca0:	1891      	adds	r1, r2, r2
 800cca2:	6139      	str	r1, [r7, #16]
 800cca4:	415b      	adcs	r3, r3
 800cca6:	617b      	str	r3, [r7, #20]
 800cca8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ccac:	1912      	adds	r2, r2, r4
 800ccae:	eb45 0303 	adc.w	r3, r5, r3
 800ccb2:	f04f 0000 	mov.w	r0, #0
 800ccb6:	f04f 0100 	mov.w	r1, #0
 800ccba:	00d9      	lsls	r1, r3, #3
 800ccbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ccc0:	00d0      	lsls	r0, r2, #3
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	eb12 0804 	adds.w	r8, r2, r4
 800ccca:	eb43 0905 	adc.w	r9, r3, r5
 800ccce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f04f 0100 	mov.w	r1, #0
 800ccd8:	f04f 0200 	mov.w	r2, #0
 800ccdc:	f04f 0300 	mov.w	r3, #0
 800cce0:	008b      	lsls	r3, r1, #2
 800cce2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cce6:	0082      	lsls	r2, r0, #2
 800cce8:	4640      	mov	r0, r8
 800ccea:	4649      	mov	r1, r9
 800ccec:	f7f3 ff76 	bl	8000bdc <__aeabi_uldivmod>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4b49      	ldr	r3, [pc, #292]	; (800ce1c <UART_SetConfig+0x38c>)
 800ccf6:	fba3 2302 	umull	r2, r3, r3, r2
 800ccfa:	095b      	lsrs	r3, r3, #5
 800ccfc:	011e      	lsls	r6, r3, #4
 800ccfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd00:	4618      	mov	r0, r3
 800cd02:	f04f 0100 	mov.w	r1, #0
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	1894      	adds	r4, r2, r2
 800cd0c:	60bc      	str	r4, [r7, #8]
 800cd0e:	415b      	adcs	r3, r3
 800cd10:	60fb      	str	r3, [r7, #12]
 800cd12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd16:	1812      	adds	r2, r2, r0
 800cd18:	eb41 0303 	adc.w	r3, r1, r3
 800cd1c:	f04f 0400 	mov.w	r4, #0
 800cd20:	f04f 0500 	mov.w	r5, #0
 800cd24:	00dd      	lsls	r5, r3, #3
 800cd26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cd2a:	00d4      	lsls	r4, r2, #3
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	462b      	mov	r3, r5
 800cd30:	1814      	adds	r4, r2, r0
 800cd32:	64bc      	str	r4, [r7, #72]	; 0x48
 800cd34:	414b      	adcs	r3, r1
 800cd36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f04f 0100 	mov.w	r1, #0
 800cd42:	f04f 0200 	mov.w	r2, #0
 800cd46:	f04f 0300 	mov.w	r3, #0
 800cd4a:	008b      	lsls	r3, r1, #2
 800cd4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cd50:	0082      	lsls	r2, r0, #2
 800cd52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cd56:	f7f3 ff41 	bl	8000bdc <__aeabi_uldivmod>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	4b2f      	ldr	r3, [pc, #188]	; (800ce1c <UART_SetConfig+0x38c>)
 800cd60:	fba3 1302 	umull	r1, r3, r3, r2
 800cd64:	095b      	lsrs	r3, r3, #5
 800cd66:	2164      	movs	r1, #100	; 0x64
 800cd68:	fb01 f303 	mul.w	r3, r1, r3
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	011b      	lsls	r3, r3, #4
 800cd70:	3332      	adds	r3, #50	; 0x32
 800cd72:	4a2a      	ldr	r2, [pc, #168]	; (800ce1c <UART_SetConfig+0x38c>)
 800cd74:	fba2 2303 	umull	r2, r3, r2, r3
 800cd78:	095b      	lsrs	r3, r3, #5
 800cd7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd7e:	441e      	add	r6, r3
 800cd80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd82:	4618      	mov	r0, r3
 800cd84:	f04f 0100 	mov.w	r1, #0
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	1894      	adds	r4, r2, r2
 800cd8e:	603c      	str	r4, [r7, #0]
 800cd90:	415b      	adcs	r3, r3
 800cd92:	607b      	str	r3, [r7, #4]
 800cd94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd98:	1812      	adds	r2, r2, r0
 800cd9a:	eb41 0303 	adc.w	r3, r1, r3
 800cd9e:	f04f 0400 	mov.w	r4, #0
 800cda2:	f04f 0500 	mov.w	r5, #0
 800cda6:	00dd      	lsls	r5, r3, #3
 800cda8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cdac:	00d4      	lsls	r4, r2, #3
 800cdae:	4622      	mov	r2, r4
 800cdb0:	462b      	mov	r3, r5
 800cdb2:	eb12 0a00 	adds.w	sl, r2, r0
 800cdb6:	eb43 0b01 	adc.w	fp, r3, r1
 800cdba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f04f 0100 	mov.w	r1, #0
 800cdc4:	f04f 0200 	mov.w	r2, #0
 800cdc8:	f04f 0300 	mov.w	r3, #0
 800cdcc:	008b      	lsls	r3, r1, #2
 800cdce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cdd2:	0082      	lsls	r2, r0, #2
 800cdd4:	4650      	mov	r0, sl
 800cdd6:	4659      	mov	r1, fp
 800cdd8:	f7f3 ff00 	bl	8000bdc <__aeabi_uldivmod>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	4b0e      	ldr	r3, [pc, #56]	; (800ce1c <UART_SetConfig+0x38c>)
 800cde2:	fba3 1302 	umull	r1, r3, r3, r2
 800cde6:	095b      	lsrs	r3, r3, #5
 800cde8:	2164      	movs	r1, #100	; 0x64
 800cdea:	fb01 f303 	mul.w	r3, r1, r3
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	011b      	lsls	r3, r3, #4
 800cdf2:	3332      	adds	r3, #50	; 0x32
 800cdf4:	4a09      	ldr	r2, [pc, #36]	; (800ce1c <UART_SetConfig+0x38c>)
 800cdf6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdfa:	095b      	lsrs	r3, r3, #5
 800cdfc:	f003 020f 	and.w	r2, r3, #15
 800ce00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4432      	add	r2, r6
 800ce06:	609a      	str	r2, [r3, #8]
}
 800ce08:	bf00      	nop
 800ce0a:	377c      	adds	r7, #124	; 0x7c
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce12:	bf00      	nop
 800ce14:	40011000 	.word	0x40011000
 800ce18:	40011400 	.word	0x40011400
 800ce1c:	51eb851f 	.word	0x51eb851f

0800ce20 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d029      	beq.n	800ce8e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ce46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ce4a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce54:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800ce5a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800ce60:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800ce66:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800ce6c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800ce72:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800ce78:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800ce7e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	601a      	str	r2, [r3, #0]
 800ce8c:	e034      	b.n	800cef8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ce9a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800cea4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ceaa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cebe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cec2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cecc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800ced2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800ced8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800cede:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800cee4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	4313      	orrs	r3, r2
 800ceea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b087      	sub	sp, #28
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	60f8      	str	r0, [r7, #12]
 800cf0e:	60b9      	str	r1, [r7, #8]
 800cf10:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800cf12:	2300      	movs	r3, #0
 800cf14:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800cf16:	2300      	movs	r3, #0
 800cf18:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d02e      	beq.n	800cf7e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf2c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800cf3c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800cf46:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800cf50:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800cf5a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	695b      	ldr	r3, [r3, #20]
 800cf60:	3b01      	subs	r3, #1
 800cf62:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800cf64:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	699b      	ldr	r3, [r3, #24]
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	697a      	ldr	r2, [r7, #20]
 800cf72:	4313      	orrs	r3, r2
 800cf74:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	609a      	str	r2, [r3, #8]
 800cf7c:	e03b      	b.n	800cff6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf8e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	695b      	ldr	r3, [r3, #20]
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	697a      	ldr	r2, [r7, #20]
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cfb4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800cfc4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800cfce:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800cfd8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	699b      	ldr	r3, [r3, #24]
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	693a      	ldr	r2, [r7, #16]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	697a      	ldr	r2, [r7, #20]
 800cfee:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	693a      	ldr	r2, [r7, #16]
 800cff4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	371c      	adds	r7, #28
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800d010:	2300      	movs	r3, #0
 800d012:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800d014:	2300      	movs	r3, #0
 800d016:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800d020:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	3b01      	subs	r3, #1
 800d028:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800d02a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800d032:	4313      	orrs	r3, r2
 800d034:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800d03c:	f7f9 fb02 	bl	8006644 <HAL_GetTick>
 800d040:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800d042:	e010      	b.n	800d066 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04a:	d00c      	beq.n	800d066 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d007      	beq.n	800d062 <FMC_SDRAM_SendCommand+0x5e>
 800d052:	f7f9 faf7 	bl	8006644 <HAL_GetTick>
 800d056:	4602      	mov	r2, r0
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d201      	bcs.n	800d066 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e006      	b.n	800d074 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	f003 0320 	and.w	r3, r3, #32
 800d06e:	2b20      	cmp	r3, #32
 800d070:	d0e8      	beq.n	800d044 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	695a      	ldr	r2, [r3, #20]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	431a      	orrs	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	370c      	adds	r7, #12
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr

0800d0a2 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800d0a2:	b590      	push	{r4, r7, lr}
 800d0a4:	b085      	sub	sp, #20
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
	int len = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	7a1b      	ldrb	r3, [r3, #8]
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d102      	bne.n	800d0bc <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800d0b6:	230c      	movs	r3, #12
 800d0b8:	60fb      	str	r3, [r7, #12]
 800d0ba:	e005      	b.n	800d0c8 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	7a1b      	ldrb	r3, [r3, #8]
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d101      	bne.n	800d0c8 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800d0c4:	230a      	movs	r3, #10
 800d0c6:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	330c      	adds	r3, #12
 800d0cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0d0:	f000 fbb1 	bl	800d836 <MQTTstrlen>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	3302      	adds	r3, #2
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	4413      	add	r3, r2
 800d0dc:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	7edb      	ldrb	r3, [r3, #27]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d013      	beq.n	800d10e <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	3324      	adds	r3, #36	; 0x24
 800d0ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0ee:	f000 fba2 	bl	800d836 <MQTTstrlen>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	1c9c      	adds	r4, r3, #2
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	3330      	adds	r3, #48	; 0x30
 800d0fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0fe:	f000 fb9a 	bl	800d836 <MQTTstrlen>
 800d102:	4603      	mov	r3, r0
 800d104:	4423      	add	r3, r4
 800d106:	3302      	adds	r3, #2
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	4413      	add	r3, r2
 800d10c:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d112:	2b00      	cmp	r3, #0
 800d114:	d103      	bne.n	800d11e <MQTTSerialize_connectLength+0x7c>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00a      	beq.n	800d134 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3340      	adds	r3, #64	; 0x40
 800d122:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d126:	f000 fb86 	bl	800d836 <MQTTstrlen>
 800d12a:	4603      	mov	r3, r0
 800d12c:	3302      	adds	r3, #2
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	4413      	add	r3, r2
 800d132:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d103      	bne.n	800d144 <MQTTSerialize_connectLength+0xa2>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00a      	beq.n	800d15a <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	334c      	adds	r3, #76	; 0x4c
 800d148:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d14c:	f000 fb73 	bl	800d836 <MQTTstrlen>
 800d150:	4603      	mov	r3, r0
 800d152:	3302      	adds	r3, #2
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	4413      	add	r3, r2
 800d158:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800d15a:	68fb      	ldr	r3, [r7, #12]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3714      	adds	r7, #20
 800d160:	46bd      	mov	sp, r7
 800d162:	bd90      	pop	{r4, r7, pc}

0800d164 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08a      	sub	sp, #40	; 0x28
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800d174:	2300      	movs	r3, #0
 800d176:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800d178:	2300      	movs	r3, #0
 800d17a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800d180:	f04f 33ff 	mov.w	r3, #4294967295
 800d184:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f7ff ff8b 	bl	800d0a2 <MQTTSerialize_connectLength>
 800d18c:	6238      	str	r0, [r7, #32]
 800d18e:	6a38      	ldr	r0, [r7, #32]
 800d190:	f000 fa06 	bl	800d5a0 <MQTTPacket_len>
 800d194:	4602      	mov	r2, r0
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	4293      	cmp	r3, r2
 800d19a:	da03      	bge.n	800d1a4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d19c:	f06f 0301 	mvn.w	r3, #1
 800d1a0:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800d1a2:	e0c2      	b.n	800d32a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800d1a8:	7e3b      	ldrb	r3, [r7, #24]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f362 1307 	bfi	r3, r2, #4, #4
 800d1b0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800d1b2:	7e3a      	ldrb	r2, [r7, #24]
 800d1b4:	f107 031c 	add.w	r3, r7, #28
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 fa7f 	bl	800d6be <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	6a39      	ldr	r1, [r7, #32]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 f980 	bl	800d4ca <MQTTPacket_encode>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	7a1b      	ldrb	r3, [r3, #8]
 800d1d6:	2b04      	cmp	r3, #4
 800d1d8:	d10c      	bne.n	800d1f4 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800d1da:	f107 031c 	add.w	r3, r7, #28
 800d1de:	4955      	ldr	r1, [pc, #340]	; (800d334 <MQTTSerialize_connect+0x1d0>)
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 faaa 	bl	800d73a <writeCString>
		writeChar(&ptr, (char) 4);
 800d1e6:	f107 031c 	add.w	r3, r7, #28
 800d1ea:	2104      	movs	r1, #4
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f000 fa66 	bl	800d6be <writeChar>
 800d1f2:	e00b      	b.n	800d20c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800d1f4:	f107 031c 	add.w	r3, r7, #28
 800d1f8:	494f      	ldr	r1, [pc, #316]	; (800d338 <MQTTSerialize_connect+0x1d4>)
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f000 fa9d 	bl	800d73a <writeCString>
		writeChar(&ptr, (char) 3);
 800d200:	f107 031c 	add.w	r3, r7, #28
 800d204:	2103      	movs	r1, #3
 800d206:	4618      	mov	r0, r3
 800d208:	f000 fa59 	bl	800d6be <writeChar>
	}

	flags.all = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	7e9b      	ldrb	r3, [r3, #26]
 800d214:	f003 0301 	and.w	r3, r3, #1
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	7d3b      	ldrb	r3, [r7, #20]
 800d21c:	f362 0341 	bfi	r3, r2, #1, #1
 800d220:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	7edb      	ldrb	r3, [r3, #27]
 800d226:	2b00      	cmp	r3, #0
 800d228:	bf14      	ite	ne
 800d22a:	2301      	movne	r3, #1
 800d22c:	2300      	moveq	r3, #0
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	7d3b      	ldrb	r3, [r7, #20]
 800d232:	f362 0382 	bfi	r3, r2, #2, #1
 800d236:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800d238:	7d3b      	ldrb	r3, [r7, #20]
 800d23a:	f003 0304 	and.w	r3, r3, #4
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	2b00      	cmp	r3, #0
 800d242:	d013      	beq.n	800d26c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d24a:	f003 0303 	and.w	r3, r3, #3
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	7d3b      	ldrb	r3, [r7, #20]
 800d252:	f362 03c4 	bfi	r3, r2, #3, #2
 800d256:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d25e:	f003 0301 	and.w	r3, r3, #1
 800d262:	b2da      	uxtb	r2, r3
 800d264:	7d3b      	ldrb	r3, [r7, #20]
 800d266:	f362 1345 	bfi	r3, r2, #5, #1
 800d26a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <MQTTSerialize_connect+0x118>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d003      	beq.n	800d284 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800d27c:	7d3b      	ldrb	r3, [r7, #20]
 800d27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d282:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d103      	bne.n	800d294 <MQTTSerialize_connect+0x130>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d290:	2b00      	cmp	r3, #0
 800d292:	d003      	beq.n	800d29c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800d294:	7d3b      	ldrb	r3, [r7, #20]
 800d296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d29a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800d29c:	7d3a      	ldrb	r2, [r7, #20]
 800d29e:	f107 031c 	add.w	r3, r7, #28
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 fa0a 	bl	800d6be <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	8b1b      	ldrh	r3, [r3, #24]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	f107 031c 	add.w	r3, r7, #28
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 fa16 	bl	800d6e8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f107 001c 	add.w	r0, r7, #28
 800d2c2:	330c      	adds	r3, #12
 800d2c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d2c6:	f000 fa57 	bl	800d778 <writeMQTTString>
	if (options->willFlag)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	7edb      	ldrb	r3, [r3, #27]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00d      	beq.n	800d2ee <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f107 001c 	add.w	r0, r7, #28
 800d2d8:	3324      	adds	r3, #36	; 0x24
 800d2da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d2dc:	f000 fa4c 	bl	800d778 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f107 001c 	add.w	r0, r7, #28
 800d2e6:	3330      	adds	r3, #48	; 0x30
 800d2e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d2ea:	f000 fa45 	bl	800d778 <writeMQTTString>
	}
	if (flags.bits.username)
 800d2ee:	7d3b      	ldrb	r3, [r7, #20]
 800d2f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d006      	beq.n	800d308 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f107 001c 	add.w	r0, r7, #28
 800d300:	3340      	adds	r3, #64	; 0x40
 800d302:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d304:	f000 fa38 	bl	800d778 <writeMQTTString>
	if (flags.bits.password)
 800d308:	7d3b      	ldrb	r3, [r7, #20]
 800d30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b00      	cmp	r3, #0
 800d312:	d006      	beq.n	800d322 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f107 001c 	add.w	r0, r7, #28
 800d31a:	334c      	adds	r3, #76	; 0x4c
 800d31c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d31e:	f000 fa2b 	bl	800d778 <writeMQTTString>

	rc = ptr - buf;
 800d322:	69fa      	ldr	r2, [r7, #28]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3728      	adds	r7, #40	; 0x28
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	0802d52c 	.word	0x0802d52c
 800d338:	0802d534 	.word	0x0802d534

0800d33c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08a      	sub	sp, #40	; 0x28
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
 800d348:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800d34a:	2300      	movs	r3, #0
 800d34c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800d352:	2300      	movs	r3, #0
 800d354:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800d35a:	2300      	movs	r3, #0
 800d35c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d35e:	f107 0318 	add.w	r3, r7, #24
 800d362:	4618      	mov	r0, r3
 800d364:	f000 f997 	bl	800d696 <readChar>
 800d368:	4603      	mov	r3, r0
 800d36a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800d36c:	7f3b      	ldrb	r3, [r7, #28]
 800d36e:	f023 030f 	bic.w	r3, r3, #15
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b20      	cmp	r3, #32
 800d376:	d12e      	bne.n	800d3d6 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	f107 0214 	add.w	r2, r7, #20
 800d37e:	4611      	mov	r1, r2
 800d380:	4618      	mov	r0, r3
 800d382:	f000 f957 	bl	800d634 <MQTTPacket_decodeBuf>
 800d386:	6278      	str	r0, [r7, #36]	; 0x24
 800d388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	4413      	add	r3, r2
 800d38e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	697a      	ldr	r2, [r7, #20]
 800d394:	4413      	add	r3, r2
 800d396:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	6a3a      	ldr	r2, [r7, #32]
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	dd1b      	ble.n	800d3da <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800d3a2:	f107 0318 	add.w	r3, r7, #24
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f000 f975 	bl	800d696 <readChar>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800d3b0:	7c3b      	ldrb	r3, [r7, #16]
 800d3b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800d3be:	f107 0318 	add.w	r3, r7, #24
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f000 f967 	bl	800d696 <readChar>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d3d4:	e002      	b.n	800d3dc <MQTTDeserialize_connack+0xa0>
		goto exit;
 800d3d6:	bf00      	nop
 800d3d8:	e000      	b.n	800d3dc <MQTTDeserialize_connack+0xa0>
		goto exit;
 800d3da:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3728      	adds	r7, #40	; 0x28
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b08a      	sub	sp, #40	; 0x28
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	60f8      	str	r0, [r7, #12]
 800d3ee:	60b9      	str	r1, [r7, #8]
 800d3f0:	607a      	str	r2, [r7, #4]
 800d3f2:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800d3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fa:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800d404:	2300      	movs	r3, #0
 800d406:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d408:	f107 0318 	add.w	r3, r7, #24
 800d40c:	4618      	mov	r0, r3
 800d40e:	f000 f942 	bl	800d696 <readChar>
 800d412:	4603      	mov	r3, r0
 800d414:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800d416:	7f3b      	ldrb	r3, [r7, #28]
 800d418:	f023 030f 	bic.w	r3, r3, #15
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	2b30      	cmp	r3, #48	; 0x30
 800d420:	d14b      	bne.n	800d4ba <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800d422:	7f3b      	ldrb	r3, [r7, #28]
 800d424:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	461a      	mov	r2, r3
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800d430:	7f3b      	ldrb	r3, [r7, #28]
 800d432:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800d436:	b2db      	uxtb	r3, r3
 800d438:	461a      	mov	r2, r3
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800d43e:	7f3b      	ldrb	r3, [r7, #28]
 800d440:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d444:	b2db      	uxtb	r3, r3
 800d446:	461a      	mov	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	f107 0214 	add.w	r2, r7, #20
 800d452:	4611      	mov	r1, r2
 800d454:	4618      	mov	r0, r3
 800d456:	f000 f8ed 	bl	800d634 <MQTTPacket_decodeBuf>
 800d45a:	6278      	str	r0, [r7, #36]	; 0x24
 800d45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	4413      	add	r3, r2
 800d462:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	4413      	add	r3, r2
 800d46a:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800d46c:	f107 0318 	add.w	r3, r7, #24
 800d470:	6a3a      	ldr	r2, [r7, #32]
 800d472:	4619      	mov	r1, r3
 800d474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d476:	f000 f9ad 	bl	800d7d4 <readMQTTLenString>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d01e      	beq.n	800d4be <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	6a3a      	ldr	r2, [r7, #32]
 800d484:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800d486:	2b00      	cmp	r3, #0
 800d488:	db19      	blt.n	800d4be <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	dd08      	ble.n	800d4a4 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800d492:	f107 0318 	add.w	r3, r7, #24
 800d496:	4618      	mov	r0, r3
 800d498:	f000 f8e2 	bl	800d660 <readInt>
 800d49c:	4603      	mov	r3, r0
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	6a3a      	ldr	r2, [r7, #32]
 800d4a8:	1ad2      	subs	r2, r2, r3
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ac:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800d4ae:	69ba      	ldr	r2, [r7, #24]
 800d4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b2:	601a      	str	r2, [r3, #0]
	rc = 1;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4b8:	e002      	b.n	800d4c0 <MQTTDeserialize_publish+0xda>
		goto exit;
 800d4ba:	bf00      	nop
 800d4bc:	e000      	b.n	800d4c0 <MQTTDeserialize_publish+0xda>
		goto exit;
 800d4be:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3728      	adds	r7, #40	; 0x28
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b085      	sub	sp, #20
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
 800d4d2:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	425a      	negs	r2, r3
 800d4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d4e4:	bf58      	it	pl
 800d4e6:	4253      	negpl	r3, r2
 800d4e8:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	da00      	bge.n	800d4f2 <MQTTPacket_encode+0x28>
 800d4f0:	337f      	adds	r3, #127	; 0x7f
 800d4f2:	11db      	asrs	r3, r3, #7
 800d4f4:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	dd03      	ble.n	800d504 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800d4fc:	7afb      	ldrb	r3, [r7, #11]
 800d4fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d502:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	1c5a      	adds	r2, r3, #1
 800d508:	60fa      	str	r2, [r7, #12]
 800d50a:	461a      	mov	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4413      	add	r3, r2
 800d510:	7afa      	ldrb	r2, [r7, #11]
 800d512:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	dcde      	bgt.n	800d4d8 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800d51a:	68fb      	ldr	r3, [r7, #12]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3714      	adds	r7, #20
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800d532:	2301      	movs	r3, #1
 800d534:	617b      	str	r3, [r7, #20]
	int len = 0;
 800d536:	2300      	movs	r3, #0
 800d538:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2200      	movs	r2, #0
 800d53e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800d540:	f04f 33ff 	mov.w	r3, #4294967295
 800d544:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	3301      	adds	r3, #1
 800d54a:	613b      	str	r3, [r7, #16]
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	2b04      	cmp	r3, #4
 800d550:	dd03      	ble.n	800d55a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800d552:	f04f 33ff 	mov.w	r3, #4294967295
 800d556:	60fb      	str	r3, [r7, #12]
			goto exit;
 800d558:	e01d      	b.n	800d596 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800d55a:	f107 020b 	add.w	r2, r7, #11
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2101      	movs	r1, #1
 800d562:	4610      	mov	r0, r2
 800d564:	4798      	blx	r3
 800d566:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d112      	bne.n	800d594 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	7afb      	ldrb	r3, [r7, #11]
 800d574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d578:	6979      	ldr	r1, [r7, #20]
 800d57a:	fb01 f303 	mul.w	r3, r1, r3
 800d57e:	441a      	add	r2, r3
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	01db      	lsls	r3, r3, #7
 800d588:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800d58a:	7afb      	ldrb	r3, [r7, #11]
 800d58c:	b25b      	sxtb	r3, r3
 800d58e:	2b00      	cmp	r3, #0
 800d590:	dbd6      	blt.n	800d540 <MQTTPacket_decode+0x18>
exit:
 800d592:	e000      	b.n	800d596 <MQTTPacket_decode+0x6e>
			goto exit;
 800d594:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800d596:	693b      	ldr	r3, [r7, #16]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3718      	adds	r7, #24
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b7f      	cmp	r3, #127	; 0x7f
 800d5b2:	dc03      	bgt.n	800d5bc <MQTTPacket_len+0x1c>
		rem_len += 1;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	607b      	str	r3, [r7, #4]
 800d5ba:	e012      	b.n	800d5e2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5c2:	da03      	bge.n	800d5cc <MQTTPacket_len+0x2c>
		rem_len += 2;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3302      	adds	r3, #2
 800d5c8:	607b      	str	r3, [r7, #4]
 800d5ca:	e00a      	b.n	800d5e2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4a08      	ldr	r2, [pc, #32]	; (800d5f0 <MQTTPacket_len+0x50>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	dc03      	bgt.n	800d5dc <MQTTPacket_len+0x3c>
		rem_len += 3;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3303      	adds	r3, #3
 800d5d8:	607b      	str	r3, [r7, #4]
 800d5da:	e002      	b.n	800d5e2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	3304      	adds	r3, #4
 800d5e0:	607b      	str	r3, [r7, #4]
	return rem_len;
 800d5e2:	687b      	ldr	r3, [r7, #4]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	001ffffe 	.word	0x001ffffe

0800d5f4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b085      	sub	sp, #20
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800d5fe:	2300      	movs	r3, #0
 800d600:	60fb      	str	r3, [r7, #12]
 800d602:	e00a      	b.n	800d61a <bufchar+0x26>
		*c = *bufptr++;
 800d604:	4b0a      	ldr	r3, [pc, #40]	; (800d630 <bufchar+0x3c>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	1c5a      	adds	r2, r3, #1
 800d60a:	4909      	ldr	r1, [pc, #36]	; (800d630 <bufchar+0x3c>)
 800d60c:	600a      	str	r2, [r1, #0]
 800d60e:	781a      	ldrb	r2, [r3, #0]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	3301      	adds	r3, #1
 800d618:	60fb      	str	r3, [r7, #12]
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	429a      	cmp	r2, r3
 800d620:	dbf0      	blt.n	800d604 <bufchar+0x10>
	return count;
 800d622:	683b      	ldr	r3, [r7, #0]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3714      	adds	r7, #20
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr
 800d630:	20000b7c 	.word	0x20000b7c

0800d634 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800d63e:	4a06      	ldr	r2, [pc, #24]	; (800d658 <MQTTPacket_decodeBuf+0x24>)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800d644:	6839      	ldr	r1, [r7, #0]
 800d646:	4805      	ldr	r0, [pc, #20]	; (800d65c <MQTTPacket_decodeBuf+0x28>)
 800d648:	f7ff ff6e 	bl	800d528 <MQTTPacket_decode>
 800d64c:	4603      	mov	r3, r0
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3708      	adds	r7, #8
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	20000b7c 	.word	0x20000b7c
 800d65c:	0800d5f5 	.word	0x0800d5f5

0800d660 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	021b      	lsls	r3, r3, #8
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	3201      	adds	r2, #1
 800d678:	7812      	ldrb	r2, [r2, #0]
 800d67a:	4413      	add	r3, r2
 800d67c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	1c9a      	adds	r2, r3, #2
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	601a      	str	r2, [r3, #0]
	return len;
 800d688:	68bb      	ldr	r3, [r7, #8]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800d696:	b480      	push	{r7}
 800d698:	b085      	sub	sp, #20
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	601a      	str	r2, [r3, #0]
	return c;
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3714      	adds	r7, #20
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr

0800d6be <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800d6be:	b480      	push	{r7}
 800d6c0:	b083      	sub	sp, #12
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	78fa      	ldrb	r2, [r7, #3]
 800d6d0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	601a      	str	r2, [r3, #0]
}
 800d6dc:	bf00      	nop
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	da00      	bge.n	800d6fa <writeInt+0x12>
 800d6f8:	33ff      	adds	r3, #255	; 0xff
 800d6fa:	121b      	asrs	r3, r3, #8
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	b2d2      	uxtb	r2, r2
 800d704:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	1c5a      	adds	r2, r3, #1
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	425a      	negs	r2, r3
 800d714:	b2db      	uxtb	r3, r3
 800d716:	b2d2      	uxtb	r2, r2
 800d718:	bf58      	it	pl
 800d71a:	4253      	negpl	r3, r2
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	6812      	ldr	r2, [r2, #0]
 800d720:	b2db      	uxtb	r3, r3
 800d722:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	601a      	str	r2, [r3, #0]
}
 800d72e:	bf00      	nop
 800d730:	370c      	adds	r7, #12
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr

0800d73a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b084      	sub	sp, #16
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800d744:	6838      	ldr	r0, [r7, #0]
 800d746:	f7f2 fdad 	bl	80002a4 <strlen>
 800d74a:	4603      	mov	r3, r0
 800d74c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800d74e:	68f9      	ldr	r1, [r7, #12]
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7ff ffc9 	bl	800d6e8 <writeInt>
	memcpy(*pptr, string, len);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	4618      	mov	r0, r3
 800d760:	f01b fec4 	bl	80294ec <memcpy>
	*pptr += len;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	441a      	add	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	601a      	str	r2, [r3, #0]
}
 800d770:	bf00      	nop
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	4638      	mov	r0, r7
 800d782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	dd12      	ble.n	800d7b2 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4619      	mov	r1, r3
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f7ff ffa9 	bl	800d6e8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	68b9      	ldr	r1, [r7, #8]
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f01b fea4 	bl	80294ec <memcpy>
		*pptr += mqttstring.lenstring.len;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	441a      	add	r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800d7b0:	e00c      	b.n	800d7cc <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d005      	beq.n	800d7c4 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f7ff ffbc 	bl	800d73a <writeCString>
}
 800d7c2:	e003      	b.n	800d7cc <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f7ff ff8e 	bl	800d6e8 <writeInt>
}
 800d7cc:	bf00      	nop
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	1ad3      	subs	r3, r2, r3
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	dd1a      	ble.n	800d826 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800d7f0:	68b8      	ldr	r0, [r7, #8]
 800d7f2:	f7ff ff35 	bl	800d660 <readInt>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	6852      	ldr	r2, [r2, #4]
 800d804:	4413      	add	r3, r2
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d30c      	bcc.n	800d826 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	6852      	ldr	r2, [r2, #4]
 800d81c:	441a      	add	r2, r3
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	601a      	str	r2, [r3, #0]
			rc = 1;
 800d822:	2301      	movs	r3, #1
 800d824:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2200      	movs	r2, #0
 800d82a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800d82c:	697b      	ldr	r3, [r7, #20]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b086      	sub	sp, #24
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	1d3b      	adds	r3, r7, #4
 800d83e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d006      	beq.n	800d85a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7f2 fd28 	bl	80002a4 <strlen>
 800d854:	4603      	mov	r3, r0
 800d856:	617b      	str	r3, [r7, #20]
 800d858:	e001      	b.n	800d85e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	617b      	str	r3, [r7, #20]
	return rc;
 800d85e:	697b      	ldr	r3, [r7, #20]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <MQTTPacket_read>:
 * @param getfn pointer to a function which will read any number of bytes from the needed source
 * @return integer MQTT packet type, or -1 on error
 * @note  the whole message must fit into the caller's buffer
 */
int MQTTPacket_read(unsigned char* buf, int buflen, int (*getfn)(unsigned char*, int))
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b088      	sub	sp, #32
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	607a      	str	r2, [r7, #4]
	int rc = -1;
 800d874:	f04f 33ff 	mov.w	r3, #4294967295
 800d878:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800d87a:	2300      	movs	r3, #0
 800d87c:	617b      	str	r3, [r7, #20]
	int len = 0;
 800d87e:	2300      	movs	r3, #0
 800d880:	61bb      	str	r3, [r7, #24]
	int rem_len = 0;
 800d882:	2300      	movs	r3, #0
 800d884:	613b      	str	r3, [r7, #16]

	/* 1. read the header byte.  This has the packet type in it */
	if ((*getfn)(buf, 1) != 1)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2101      	movs	r1, #1
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	4798      	blx	r3
 800d88e:	4603      	mov	r3, r0
 800d890:	2b01      	cmp	r3, #1
 800d892:	d12f      	bne.n	800d8f4 <MQTTPacket_read+0x8c>
		goto exit;

	len = 1;
 800d894:	2301      	movs	r3, #1
 800d896:	61bb      	str	r3, [r7, #24]
	/* 2. read the remaining length.  This is variable in itself */
	MQTTPacket_decode(getfn, &rem_len);
 800d898:	f107 0310 	add.w	r3, r7, #16
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff fe42 	bl	800d528 <MQTTPacket_decode>
	len += MQTTPacket_encode(buf + 1, rem_len); /* put the original remaining length back into the buffer */
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	693a      	ldr	r2, [r7, #16]
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff fe0c 	bl	800d4ca <MQTTPacket_encode>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	61bb      	str	r3, [r7, #24]

	/* 3. read the rest of the buffer using a callback to supply the rest of the data */
	if((rem_len + len) > buflen)
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	4413      	add	r3, r2
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	db18      	blt.n	800d8f8 <MQTTPacket_read+0x90>
		goto exit;
	if (rem_len && ((*getfn)(buf + len, rem_len) != rem_len))
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00a      	beq.n	800d8e2 <MQTTPacket_read+0x7a>
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	441a      	add	r2, r3
 800d8d2:	6939      	ldr	r1, [r7, #16]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4610      	mov	r0, r2
 800d8d8:	4798      	blx	r3
 800d8da:	4602      	mov	r2, r0
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d10c      	bne.n	800d8fc <MQTTPacket_read+0x94>
		goto exit;

	header.byte = buf[0];
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	753b      	strb	r3, [r7, #20]
	rc = header.bits.type;
 800d8e8:	7d3b      	ldrb	r3, [r7, #20]
 800d8ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	61fb      	str	r3, [r7, #28]
 800d8f2:	e004      	b.n	800d8fe <MQTTPacket_read+0x96>
		goto exit;
 800d8f4:	bf00      	nop
 800d8f6:	e002      	b.n	800d8fe <MQTTPacket_read+0x96>
		goto exit;
 800d8f8:	bf00      	nop
 800d8fa:	e000      	b.n	800d8fe <MQTTPacket_read+0x96>
		goto exit;
 800d8fc:	bf00      	nop
exit:
	return rc;
 800d8fe:	69fb      	ldr	r3, [r7, #28]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3720      	adds	r7, #32
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	4638      	mov	r0, r7
 800d912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800d91a:	463b      	mov	r3, r7
 800d91c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d920:	f7ff ff89 	bl	800d836 <MQTTstrlen>
 800d924:	4603      	mov	r3, r0
 800d926:	1c9a      	adds	r2, r3, #2
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	4413      	add	r3, r2
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	4413      	add	r3, r2
 800d930:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2b00      	cmp	r3, #0
 800d936:	dd02      	ble.n	800d93e <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	3302      	adds	r3, #2
 800d93c:	617b      	str	r3, [r7, #20]
	return len;
 800d93e:	697b      	ldr	r3, [r7, #20]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3718      	adds	r7, #24
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b08a      	sub	sp, #40	; 0x28
 800d94c:	af02      	add	r7, sp, #8
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	603b      	str	r3, [r7, #0]
 800d954:	4613      	mov	r3, r2
 800d956:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800d95c:	2300      	movs	r3, #0
 800d95e:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800d964:	2300      	movs	r3, #0
 800d966:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800d968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d970:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d972:	6838      	ldr	r0, [r7, #0]
 800d974:	f7ff ffc8 	bl	800d908 <MQTTSerialize_publishLength>
 800d978:	61b8      	str	r0, [r7, #24]
 800d97a:	69b8      	ldr	r0, [r7, #24]
 800d97c:	f7ff fe10 	bl	800d5a0 <MQTTPacket_len>
 800d980:	4602      	mov	r2, r0
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	4293      	cmp	r3, r2
 800d986:	da03      	bge.n	800d990 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d988:	f06f 0301 	mvn.w	r3, #1
 800d98c:	61fb      	str	r3, [r7, #28]
		goto exit;
 800d98e:	e04c      	b.n	800da2a <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800d990:	7c3b      	ldrb	r3, [r7, #16]
 800d992:	2203      	movs	r2, #3
 800d994:	f362 1307 	bfi	r3, r2, #4, #4
 800d998:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	f003 0301 	and.w	r3, r3, #1
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	7c3b      	ldrb	r3, [r7, #16]
 800d9a4:	f362 03c3 	bfi	r3, r2, #3, #1
 800d9a8:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	f003 0303 	and.w	r3, r3, #3
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	7c3b      	ldrb	r3, [r7, #16]
 800d9b4:	f362 0342 	bfi	r3, r2, #1, #2
 800d9b8:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800d9ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	7c3b      	ldrb	r3, [r7, #16]
 800d9c6:	f362 0300 	bfi	r3, r2, #0, #1
 800d9ca:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800d9cc:	7c3a      	ldrb	r2, [r7, #16]
 800d9ce:	f107 0314 	add.w	r3, r7, #20
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7ff fe72 	bl	800d6be <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	69b9      	ldr	r1, [r7, #24]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff fd73 	bl	800d4ca <MQTTPacket_encode>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800d9ec:	f107 0014 	add.w	r0, r7, #20
 800d9f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d9f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d9f6:	f7ff febf 	bl	800d778 <writeMQTTString>

	if (qos > 0)
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	dd06      	ble.n	800da0e <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800da00:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800da02:	f107 0314 	add.w	r3, r7, #20
 800da06:	4611      	mov	r1, r2
 800da08:	4618      	mov	r0, r3
 800da0a:	f7ff fe6d 	bl	800d6e8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da14:	4618      	mov	r0, r3
 800da16:	f01b fd69 	bl	80294ec <memcpy>
	ptr += payloadlen;
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da1e:	4413      	add	r3, r2
 800da20:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800da22:	697a      	ldr	r2, [r7, #20]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800da2a:	69fb      	ldr	r3, [r7, #28]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3720      	adds	r7, #32
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b088      	sub	sp, #32
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	4611      	mov	r1, r2
 800da40:	461a      	mov	r2, r3
 800da42:	460b      	mov	r3, r1
 800da44:	71fb      	strb	r3, [r7, #7]
 800da46:	4613      	mov	r3, r2
 800da48:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800da4a:	2300      	movs	r3, #0
 800da4c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	2b03      	cmp	r3, #3
 800da5a:	dc03      	bgt.n	800da64 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800da5c:	f06f 0301 	mvn.w	r3, #1
 800da60:	61fb      	str	r3, [r7, #28]
		goto exit;
 800da62:	e037      	b.n	800dad4 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800da64:	79fb      	ldrb	r3, [r7, #7]
 800da66:	f003 030f 	and.w	r3, r3, #15
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	7e3b      	ldrb	r3, [r7, #24]
 800da6e:	f362 1307 	bfi	r3, r2, #4, #4
 800da72:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800da74:	79bb      	ldrb	r3, [r7, #6]
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	7e3b      	ldrb	r3, [r7, #24]
 800da7e:	f362 03c3 	bfi	r3, r2, #3, #1
 800da82:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800da84:	79fb      	ldrb	r3, [r7, #7]
 800da86:	2b06      	cmp	r3, #6
 800da88:	bf0c      	ite	eq
 800da8a:	2301      	moveq	r3, #1
 800da8c:	2300      	movne	r3, #0
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	f003 0303 	and.w	r3, r3, #3
 800da94:	b2da      	uxtb	r2, r3
 800da96:	7e3b      	ldrb	r3, [r7, #24]
 800da98:	f362 0342 	bfi	r3, r2, #1, #2
 800da9c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800da9e:	7e3a      	ldrb	r2, [r7, #24]
 800daa0:	f107 0314 	add.w	r3, r7, #20
 800daa4:	4611      	mov	r1, r2
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff fe09 	bl	800d6be <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	2102      	movs	r1, #2
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff fd0a 	bl	800d4ca <MQTTPacket_encode>
 800dab6:	4602      	mov	r2, r0
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	4413      	add	r3, r2
 800dabc:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800dabe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dac0:	f107 0314 	add.w	r3, r7, #20
 800dac4:	4611      	mov	r1, r2
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7ff fe0e 	bl	800d6e8 <writeInt>
	rc = ptr - buf;
 800dacc:	697a      	ldr	r2, [r7, #20]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800dad4:	69fb      	ldr	r3, [r7, #28]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3720      	adds	r7, #32
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b084      	sub	sp, #16
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800dae8:	2302      	movs	r3, #2
 800daea:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800daec:	2300      	movs	r3, #0
 800daee:	60fb      	str	r3, [r7, #12]
 800daf0:	e013      	b.n	800db1a <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	4613      	mov	r3, r2
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	4413      	add	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	461a      	mov	r2, r3
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	4413      	add	r3, r2
 800db02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db06:	f7ff fe96 	bl	800d836 <MQTTstrlen>
 800db0a:	4603      	mov	r3, r0
 800db0c:	3303      	adds	r3, #3
 800db0e:	68ba      	ldr	r2, [r7, #8]
 800db10:	4413      	add	r3, r2
 800db12:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	3301      	adds	r3, #1
 800db18:	60fb      	str	r3, [r7, #12]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	429a      	cmp	r2, r3
 800db20:	dbe7      	blt.n	800daf2 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800db22:	68bb      	ldr	r3, [r7, #8]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08a      	sub	sp, #40	; 0x28
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	4611      	mov	r1, r2
 800db38:	461a      	mov	r2, r3
 800db3a:	460b      	mov	r3, r1
 800db3c:	71fb      	strb	r3, [r7, #7]
 800db3e:	4613      	mov	r3, r2
 800db40:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800db46:	2300      	movs	r3, #0
 800db48:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800db4e:	2300      	movs	r3, #0
 800db50:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800db52:	2300      	movs	r3, #0
 800db54:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800db56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800db58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db5a:	f7ff ffc0 	bl	800dade <MQTTSerialize_subscribeLength>
 800db5e:	61f8      	str	r0, [r7, #28]
 800db60:	69f8      	ldr	r0, [r7, #28]
 800db62:	f7ff fd1d 	bl	800d5a0 <MQTTPacket_len>
 800db66:	4602      	mov	r2, r0
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	4293      	cmp	r3, r2
 800db6c:	da03      	bge.n	800db76 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800db6e:	f06f 0301 	mvn.w	r3, #1
 800db72:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800db74:	e051      	b.n	800dc1a <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800db7a:	7d3b      	ldrb	r3, [r7, #20]
 800db7c:	2208      	movs	r2, #8
 800db7e:	f362 1307 	bfi	r3, r2, #4, #4
 800db82:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	7d3b      	ldrb	r3, [r7, #20]
 800db8e:	f362 03c3 	bfi	r3, r2, #3, #1
 800db92:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800db94:	7d3b      	ldrb	r3, [r7, #20]
 800db96:	2201      	movs	r2, #1
 800db98:	f362 0342 	bfi	r3, r2, #1, #2
 800db9c:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800db9e:	7d3a      	ldrb	r2, [r7, #20]
 800dba0:	f107 0318 	add.w	r3, r7, #24
 800dba4:	4611      	mov	r1, r2
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff fd89 	bl	800d6be <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	69f9      	ldr	r1, [r7, #28]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff fc8a 	bl	800d4ca <MQTTPacket_encode>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	4413      	add	r3, r2
 800dbbc:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800dbbe:	88ba      	ldrh	r2, [r7, #4]
 800dbc0:	f107 0318 	add.w	r3, r7, #24
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7ff fd8e 	bl	800d6e8 <writeInt>

	for (i = 0; i < count; ++i)
 800dbcc:	2300      	movs	r3, #0
 800dbce:	623b      	str	r3, [r7, #32]
 800dbd0:	e01b      	b.n	800dc0a <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800dbd2:	6a3a      	ldr	r2, [r7, #32]
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	4413      	add	r3, r2
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	461a      	mov	r2, r3
 800dbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f107 0018 	add.w	r0, r7, #24
 800dbe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbe8:	f7ff fdc6 	bl	800d778 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800dbec:	6a3b      	ldr	r3, [r7, #32]
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbf2:	4413      	add	r3, r2
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	f107 0318 	add.w	r3, r7, #24
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fd5d 	bl	800d6be <writeChar>
	for (i = 0; i < count; ++i)
 800dc04:	6a3b      	ldr	r3, [r7, #32]
 800dc06:	3301      	adds	r3, #1
 800dc08:	623b      	str	r3, [r7, #32]
 800dc0a:	6a3a      	ldr	r2, [r7, #32]
 800dc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	dbdf      	blt.n	800dbd2 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800dc12:	69ba      	ldr	r2, [r7, #24]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800dc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3728      	adds	r7, #40	; 0x28
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b08a      	sub	sp, #40	; 0x28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800dc32:	2300      	movs	r3, #0
 800dc34:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc38:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800dc42:	f107 0318 	add.w	r3, r7, #24
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7ff fd25 	bl	800d696 <readChar>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800dc50:	7f3b      	ldrb	r3, [r7, #28]
 800dc52:	f023 030f 	bic.w	r3, r3, #15
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b90      	cmp	r3, #144	; 0x90
 800dc5a:	d142      	bne.n	800dce2 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	f107 0214 	add.w	r2, r7, #20
 800dc62:	4611      	mov	r1, r2
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7ff fce5 	bl	800d634 <MQTTPacket_decodeBuf>
 800dc6a:	6278      	str	r0, [r7, #36]	; 0x24
 800dc6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	4413      	add	r3, r2
 800dc72:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	4413      	add	r3, r2
 800dc7a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	6a3a      	ldr	r2, [r7, #32]
 800dc80:	1ad3      	subs	r3, r2, r3
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	dd2f      	ble.n	800dce6 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800dc86:	f107 0318 	add.w	r3, r7, #24
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7ff fce8 	bl	800d660 <readInt>
 800dc90:	4603      	mov	r3, r0
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800dc9e:	e019      	b.n	800dcd4 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	da03      	bge.n	800dcb2 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 800dcaa:	f04f 33ff 	mov.w	r3, #4294967295
 800dcae:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800dcb0:	e01a      	b.n	800dce8 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 800dcb2:	f107 0318 	add.w	r3, r7, #24
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7ff fced 	bl	800d696 <readChar>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	1c59      	adds	r1, r3, #1
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	6011      	str	r1, [r2, #0]
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	4413      	add	r3, r2
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	6a3a      	ldr	r2, [r7, #32]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d8e1      	bhi.n	800dca0 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	627b      	str	r3, [r7, #36]	; 0x24
 800dce0:	e002      	b.n	800dce8 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800dce2:	bf00      	nop
 800dce4:	e000      	b.n	800dce8 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800dce6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800dce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3728      	adds	r7, #40	; 0x28
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
	...

0800dcf4 <__NVIC_SetPriority>:
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	6039      	str	r1, [r7, #0]
 800dcfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	db0a      	blt.n	800dd1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	490c      	ldr	r1, [pc, #48]	; (800dd40 <__NVIC_SetPriority+0x4c>)
 800dd0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd12:	0112      	lsls	r2, r2, #4
 800dd14:	b2d2      	uxtb	r2, r2
 800dd16:	440b      	add	r3, r1
 800dd18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dd1c:	e00a      	b.n	800dd34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	4908      	ldr	r1, [pc, #32]	; (800dd44 <__NVIC_SetPriority+0x50>)
 800dd24:	79fb      	ldrb	r3, [r7, #7]
 800dd26:	f003 030f 	and.w	r3, r3, #15
 800dd2a:	3b04      	subs	r3, #4
 800dd2c:	0112      	lsls	r2, r2, #4
 800dd2e:	b2d2      	uxtb	r2, r2
 800dd30:	440b      	add	r3, r1
 800dd32:	761a      	strb	r2, [r3, #24]
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	e000e100 	.word	0xe000e100
 800dd44:	e000ed00 	.word	0xe000ed00

0800dd48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dd4c:	4b05      	ldr	r3, [pc, #20]	; (800dd64 <SysTick_Handler+0x1c>)
 800dd4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dd50:	f002 fece 	bl	8010af0 <xTaskGetSchedulerState>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d001      	beq.n	800dd5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dd5a:	f003 fea5 	bl	8011aa8 <xPortSysTickHandler>
  }
}
 800dd5e:	bf00      	nop
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	e000e010 	.word	0xe000e010

0800dd68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	f06f 0004 	mvn.w	r0, #4
 800dd72:	f7ff ffbf 	bl	800dcf4 <__NVIC_SetPriority>
#endif
}
 800dd76:	bf00      	nop
 800dd78:	bd80      	pop	{r7, pc}
	...

0800dd7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd82:	f3ef 8305 	mrs	r3, IPSR
 800dd86:	603b      	str	r3, [r7, #0]
  return(result);
 800dd88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d003      	beq.n	800dd96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dd8e:	f06f 0305 	mvn.w	r3, #5
 800dd92:	607b      	str	r3, [r7, #4]
 800dd94:	e00c      	b.n	800ddb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dd96:	4b0a      	ldr	r3, [pc, #40]	; (800ddc0 <osKernelInitialize+0x44>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d105      	bne.n	800ddaa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dd9e:	4b08      	ldr	r3, [pc, #32]	; (800ddc0 <osKernelInitialize+0x44>)
 800dda0:	2201      	movs	r2, #1
 800dda2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	607b      	str	r3, [r7, #4]
 800dda8:	e002      	b.n	800ddb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ddaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ddae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ddb0:	687b      	ldr	r3, [r7, #4]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	370c      	adds	r7, #12
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	20000b80 	.word	0x20000b80

0800ddc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddca:	f3ef 8305 	mrs	r3, IPSR
 800ddce:	603b      	str	r3, [r7, #0]
  return(result);
 800ddd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d003      	beq.n	800ddde <osKernelStart+0x1a>
    stat = osErrorISR;
 800ddd6:	f06f 0305 	mvn.w	r3, #5
 800ddda:	607b      	str	r3, [r7, #4]
 800dddc:	e010      	b.n	800de00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ddde:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <osKernelStart+0x48>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d109      	bne.n	800ddfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dde6:	f7ff ffbf 	bl	800dd68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ddea:	4b08      	ldr	r3, [pc, #32]	; (800de0c <osKernelStart+0x48>)
 800ddec:	2202      	movs	r2, #2
 800ddee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ddf0:	f002 f972 	bl	80100d8 <vTaskStartScheduler>
      stat = osOK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	607b      	str	r3, [r7, #4]
 800ddf8:	e002      	b.n	800de00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ddfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ddfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800de00:	687b      	ldr	r3, [r7, #4]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	20000b80 	.word	0x20000b80

0800de10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800de10:	b580      	push	{r7, lr}
 800de12:	b08e      	sub	sp, #56	; 0x38
 800de14:	af04      	add	r7, sp, #16
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800de1c:	2300      	movs	r3, #0
 800de1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de20:	f3ef 8305 	mrs	r3, IPSR
 800de24:	617b      	str	r3, [r7, #20]
  return(result);
 800de26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d17e      	bne.n	800df2a <osThreadNew+0x11a>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d07b      	beq.n	800df2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800de32:	2380      	movs	r3, #128	; 0x80
 800de34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800de36:	2318      	movs	r3, #24
 800de38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800de3a:	2300      	movs	r3, #0
 800de3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800de3e:	f04f 33ff 	mov.w	r3, #4294967295
 800de42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d045      	beq.n	800ded6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d002      	beq.n	800de58 <osThreadNew+0x48>
        name = attr->name;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	699b      	ldr	r3, [r3, #24]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	699b      	ldr	r3, [r3, #24]
 800de64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d008      	beq.n	800de7e <osThreadNew+0x6e>
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	2b38      	cmp	r3, #56	; 0x38
 800de70:	d805      	bhi.n	800de7e <osThreadNew+0x6e>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	f003 0301 	and.w	r3, r3, #1
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d001      	beq.n	800de82 <osThreadNew+0x72>
        return (NULL);
 800de7e:	2300      	movs	r3, #0
 800de80:	e054      	b.n	800df2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	695b      	ldr	r3, [r3, #20]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d003      	beq.n	800de92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	695b      	ldr	r3, [r3, #20]
 800de8e:	089b      	lsrs	r3, r3, #2
 800de90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00e      	beq.n	800deb8 <osThreadNew+0xa8>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	2b5f      	cmp	r3, #95	; 0x5f
 800dea0:	d90a      	bls.n	800deb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d006      	beq.n	800deb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d002      	beq.n	800deb8 <osThreadNew+0xa8>
        mem = 1;
 800deb2:	2301      	movs	r3, #1
 800deb4:	61bb      	str	r3, [r7, #24]
 800deb6:	e010      	b.n	800deda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10c      	bne.n	800deda <osThreadNew+0xca>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d108      	bne.n	800deda <osThreadNew+0xca>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	691b      	ldr	r3, [r3, #16]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d104      	bne.n	800deda <osThreadNew+0xca>
          mem = 0;
 800ded0:	2300      	movs	r3, #0
 800ded2:	61bb      	str	r3, [r7, #24]
 800ded4:	e001      	b.n	800deda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ded6:	2300      	movs	r3, #0
 800ded8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d110      	bne.n	800df02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dee8:	9202      	str	r2, [sp, #8]
 800deea:	9301      	str	r3, [sp, #4]
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	6a3a      	ldr	r2, [r7, #32]
 800def4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800def6:	68f8      	ldr	r0, [r7, #12]
 800def8:	f001 ff16 	bl	800fd28 <xTaskCreateStatic>
 800defc:	4603      	mov	r3, r0
 800defe:	613b      	str	r3, [r7, #16]
 800df00:	e013      	b.n	800df2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d110      	bne.n	800df2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	f107 0310 	add.w	r3, r7, #16
 800df10:	9301      	str	r3, [sp, #4]
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f001 ff61 	bl	800fde2 <xTaskCreate>
 800df20:	4603      	mov	r3, r0
 800df22:	2b01      	cmp	r3, #1
 800df24:	d001      	beq.n	800df2a <osThreadNew+0x11a>
            hTask = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800df2a:	693b      	ldr	r3, [r7, #16]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3728      	adds	r7, #40	; 0x28
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df3c:	f3ef 8305 	mrs	r3, IPSR
 800df40:	60bb      	str	r3, [r7, #8]
  return(result);
 800df42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df44:	2b00      	cmp	r3, #0
 800df46:	d003      	beq.n	800df50 <osDelay+0x1c>
    stat = osErrorISR;
 800df48:	f06f 0305 	mvn.w	r3, #5
 800df4c:	60fb      	str	r3, [r7, #12]
 800df4e:	e007      	b.n	800df60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800df50:	2300      	movs	r3, #0
 800df52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d002      	beq.n	800df60 <osDelay+0x2c>
      vTaskDelay(ticks);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f002 f888 	bl	8010070 <vTaskDelay>
    }
  }

  return (stat);
 800df60:	68fb      	ldr	r3, [r7, #12]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b084      	sub	sp, #16
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f003 fb9a 	bl	80116ac <pvTimerGetTimerID>
 800df78:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d005      	beq.n	800df8c <TimerCallback+0x22>
    callb->func (callb->arg);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68fa      	ldr	r2, [r7, #12]
 800df86:	6852      	ldr	r2, [r2, #4]
 800df88:	4610      	mov	r0, r2
 800df8a:	4798      	blx	r3
  }
}
 800df8c:	bf00      	nop
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800df94:	b580      	push	{r7, lr}
 800df96:	b08c      	sub	sp, #48	; 0x30
 800df98:	af02      	add	r7, sp, #8
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	607a      	str	r2, [r7, #4]
 800df9e:	603b      	str	r3, [r7, #0]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfa8:	f3ef 8305 	mrs	r3, IPSR
 800dfac:	613b      	str	r3, [r7, #16]
  return(result);
 800dfae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d163      	bne.n	800e07c <osTimerNew+0xe8>
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d060      	beq.n	800e07c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800dfba:	2008      	movs	r0, #8
 800dfbc:	f003 fe04 	bl	8011bc8 <pvPortMalloc>
 800dfc0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d059      	beq.n	800e07c <osTimerNew+0xe8>
      callb->func = func;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800dfd4:	7afb      	ldrb	r3, [r7, #11]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d102      	bne.n	800dfe0 <osTimerNew+0x4c>
        reload = pdFALSE;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	61fb      	str	r3, [r7, #28]
 800dfde:	e001      	b.n	800dfe4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800dfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800dfea:	2300      	movs	r3, #0
 800dfec:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d01c      	beq.n	800e02e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <osTimerNew+0x6e>
          name = attr->name;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d006      	beq.n	800e018 <osTimerNew+0x84>
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	68db      	ldr	r3, [r3, #12]
 800e00e:	2b2b      	cmp	r3, #43	; 0x2b
 800e010:	d902      	bls.n	800e018 <osTimerNew+0x84>
          mem = 1;
 800e012:	2301      	movs	r3, #1
 800e014:	61bb      	str	r3, [r7, #24]
 800e016:	e00c      	b.n	800e032 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d108      	bne.n	800e032 <osTimerNew+0x9e>
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d104      	bne.n	800e032 <osTimerNew+0x9e>
            mem = 0;
 800e028:	2300      	movs	r3, #0
 800e02a:	61bb      	str	r3, [r7, #24]
 800e02c:	e001      	b.n	800e032 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	2b01      	cmp	r3, #1
 800e036:	d10c      	bne.n	800e052 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	4b12      	ldr	r3, [pc, #72]	; (800e088 <osTimerNew+0xf4>)
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	2101      	movs	r1, #1
 800e048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e04a:	f002 ffb0 	bl	8010fae <xTimerCreateStatic>
 800e04e:	6238      	str	r0, [r7, #32]
 800e050:	e00b      	b.n	800e06a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d108      	bne.n	800e06a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e058:	4b0b      	ldr	r3, [pc, #44]	; (800e088 <osTimerNew+0xf4>)
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	69fa      	ldr	r2, [r7, #28]
 800e060:	2101      	movs	r1, #1
 800e062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e064:	f002 ff82 	bl	8010f6c <xTimerCreate>
 800e068:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d105      	bne.n	800e07c <osTimerNew+0xe8>
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <osTimerNew+0xe8>
        vPortFree (callb);
 800e076:	6978      	ldr	r0, [r7, #20]
 800e078:	f003 fe76 	bl	8011d68 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e07c:	6a3b      	ldr	r3, [r7, #32]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3728      	adds	r7, #40	; 0x28
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	0800df6b 	.word	0x0800df6b

0800e08c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af02      	add	r7, sp, #8
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e09a:	f3ef 8305 	mrs	r3, IPSR
 800e09e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d003      	beq.n	800e0ae <osTimerStart+0x22>
    stat = osErrorISR;
 800e0a6:	f06f 0305 	mvn.w	r3, #5
 800e0aa:	617b      	str	r3, [r7, #20]
 800e0ac:	e017      	b.n	800e0de <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d103      	bne.n	800e0bc <osTimerStart+0x30>
    stat = osErrorParameter;
 800e0b4:	f06f 0303 	mvn.w	r3, #3
 800e0b8:	617b      	str	r3, [r7, #20]
 800e0ba:	e010      	b.n	800e0de <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e0bc:	2300      	movs	r3, #0
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	2104      	movs	r1, #4
 800e0c6:	6938      	ldr	r0, [r7, #16]
 800e0c8:	f002 ffea 	bl	80110a0 <xTimerGenericCommand>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d102      	bne.n	800e0d8 <osTimerStart+0x4c>
      stat = osOK;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	617b      	str	r3, [r7, #20]
 800e0d6:	e002      	b.n	800e0de <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800e0d8:	f06f 0302 	mvn.w	r3, #2
 800e0dc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e0de:	697b      	ldr	r3, [r7, #20]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3718      	adds	r7, #24
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b086      	sub	sp, #24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0f4:	f3ef 8305 	mrs	r3, IPSR
 800e0f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0fa:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d12d      	bne.n	800e15c <osEventFlagsNew+0x74>
    mem = -1;
 800e100:	f04f 33ff 	mov.w	r3, #4294967295
 800e104:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d015      	beq.n	800e138 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d006      	beq.n	800e122 <osEventFlagsNew+0x3a>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	2b1f      	cmp	r3, #31
 800e11a:	d902      	bls.n	800e122 <osEventFlagsNew+0x3a>
        mem = 1;
 800e11c:	2301      	movs	r3, #1
 800e11e:	613b      	str	r3, [r7, #16]
 800e120:	e00c      	b.n	800e13c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	689b      	ldr	r3, [r3, #8]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d108      	bne.n	800e13c <osEventFlagsNew+0x54>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d104      	bne.n	800e13c <osEventFlagsNew+0x54>
          mem = 0;
 800e132:	2300      	movs	r3, #0
 800e134:	613b      	str	r3, [r7, #16]
 800e136:	e001      	b.n	800e13c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d106      	bne.n	800e150 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	4618      	mov	r0, r3
 800e148:	f000 fb3e 	bl	800e7c8 <xEventGroupCreateStatic>
 800e14c:	6178      	str	r0, [r7, #20]
 800e14e:	e005      	b.n	800e15c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d102      	bne.n	800e15c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800e156:	f000 fb6e 	bl	800e836 <xEventGroupCreate>
 800e15a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800e15c:	697b      	ldr	r3, [r7, #20]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
	...

0800e168 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d004      	beq.n	800e186 <osEventFlagsSet+0x1e>
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e182:	2b00      	cmp	r3, #0
 800e184:	d003      	beq.n	800e18e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800e186:	f06f 0303 	mvn.w	r3, #3
 800e18a:	617b      	str	r3, [r7, #20]
 800e18c:	e028      	b.n	800e1e0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e18e:	f3ef 8305 	mrs	r3, IPSR
 800e192:	60fb      	str	r3, [r7, #12]
  return(result);
 800e194:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e196:	2b00      	cmp	r3, #0
 800e198:	d01d      	beq.n	800e1d6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800e19a:	2300      	movs	r3, #0
 800e19c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800e19e:	f107 0308 	add.w	r3, r7, #8
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6938      	ldr	r0, [r7, #16]
 800e1a8:	f000 fce8 	bl	800eb7c <xEventGroupSetBitsFromISR>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d103      	bne.n	800e1ba <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800e1b2:	f06f 0302 	mvn.w	r3, #2
 800e1b6:	617b      	str	r3, [r7, #20]
 800e1b8:	e012      	b.n	800e1e0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00d      	beq.n	800e1e0 <osEventFlagsSet+0x78>
 800e1c4:	4b09      	ldr	r3, [pc, #36]	; (800e1ec <osEventFlagsSet+0x84>)
 800e1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	e004      	b.n	800e1e0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800e1d6:	6839      	ldr	r1, [r7, #0]
 800e1d8:	6938      	ldr	r0, [r7, #16]
 800e1da:	f000 fc15 	bl	800ea08 <xEventGroupSetBits>
 800e1de:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800e1e0:	697b      	ldr	r3, [r7, #20]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	e000ed04 	.word	0xe000ed04

0800e1f0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b08c      	sub	sp, #48	; 0x30
 800e1f4:	af02      	add	r7, sp, #8
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
 800e1fc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d004      	beq.n	800e212 <osEventFlagsWait+0x22>
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d003      	beq.n	800e21a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800e212:	f06f 0303 	mvn.w	r3, #3
 800e216:	61fb      	str	r3, [r7, #28]
 800e218:	e04b      	b.n	800e2b2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e21a:	f3ef 8305 	mrs	r3, IPSR
 800e21e:	617b      	str	r3, [r7, #20]
  return(result);
 800e220:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800e226:	f06f 0305 	mvn.w	r3, #5
 800e22a:	61fb      	str	r3, [r7, #28]
 800e22c:	e041      	b.n	800e2b2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f003 0301 	and.w	r3, r3, #1
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800e238:	2301      	movs	r3, #1
 800e23a:	627b      	str	r3, [r7, #36]	; 0x24
 800e23c:	e001      	b.n	800e242 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800e23e:	2300      	movs	r3, #0
 800e240:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f003 0302 	and.w	r3, r3, #2
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d002      	beq.n	800e252 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800e24c:	2300      	movs	r3, #0
 800e24e:	623b      	str	r3, [r7, #32]
 800e250:	e001      	b.n	800e256 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800e252:	2301      	movs	r3, #1
 800e254:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	6a3a      	ldr	r2, [r7, #32]
 800e25e:	68b9      	ldr	r1, [r7, #8]
 800e260:	69b8      	ldr	r0, [r7, #24]
 800e262:	f000 fb03 	bl	800e86c <xEventGroupWaitBits>
 800e266:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f003 0301 	and.w	r3, r3, #1
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d010      	beq.n	800e294 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	4013      	ands	r3, r2
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d019      	beq.n	800e2b2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d003      	beq.n	800e28c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800e284:	f06f 0301 	mvn.w	r3, #1
 800e288:	61fb      	str	r3, [r7, #28]
 800e28a:	e012      	b.n	800e2b2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e28c:	f06f 0302 	mvn.w	r3, #2
 800e290:	61fb      	str	r3, [r7, #28]
 800e292:	e00e      	b.n	800e2b2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	4013      	ands	r3, r2
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d109      	bne.n	800e2b2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d003      	beq.n	800e2ac <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800e2a4:	f06f 0301 	mvn.w	r3, #1
 800e2a8:	61fb      	str	r3, [r7, #28]
 800e2aa:	e002      	b.n	800e2b2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e2ac:	f06f 0302 	mvn.w	r3, #2
 800e2b0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800e2b2:	69fb      	ldr	r3, [r7, #28]
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3728      	adds	r7, #40	; 0x28
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b08a      	sub	sp, #40	; 0x28
 800e2c0:	af02      	add	r7, sp, #8
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2cc:	f3ef 8305 	mrs	r3, IPSR
 800e2d0:	613b      	str	r3, [r7, #16]
  return(result);
 800e2d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d175      	bne.n	800e3c4 <osSemaphoreNew+0x108>
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d072      	beq.n	800e3c4 <osSemaphoreNew+0x108>
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d86e      	bhi.n	800e3c4 <osSemaphoreNew+0x108>
    mem = -1;
 800e2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d015      	beq.n	800e31e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d006      	beq.n	800e308 <osSemaphoreNew+0x4c>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	2b4f      	cmp	r3, #79	; 0x4f
 800e300:	d902      	bls.n	800e308 <osSemaphoreNew+0x4c>
        mem = 1;
 800e302:	2301      	movs	r3, #1
 800e304:	61bb      	str	r3, [r7, #24]
 800e306:	e00c      	b.n	800e322 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d108      	bne.n	800e322 <osSemaphoreNew+0x66>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d104      	bne.n	800e322 <osSemaphoreNew+0x66>
          mem = 0;
 800e318:	2300      	movs	r3, #0
 800e31a:	61bb      	str	r3, [r7, #24]
 800e31c:	e001      	b.n	800e322 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e328:	d04c      	beq.n	800e3c4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d128      	bne.n	800e382 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	2b01      	cmp	r3, #1
 800e334:	d10a      	bne.n	800e34c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	2203      	movs	r2, #3
 800e33c:	9200      	str	r2, [sp, #0]
 800e33e:	2200      	movs	r2, #0
 800e340:	2100      	movs	r1, #0
 800e342:	2001      	movs	r0, #1
 800e344:	f000 fd4a 	bl	800eddc <xQueueGenericCreateStatic>
 800e348:	61f8      	str	r0, [r7, #28]
 800e34a:	e005      	b.n	800e358 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e34c:	2203      	movs	r2, #3
 800e34e:	2100      	movs	r1, #0
 800e350:	2001      	movs	r0, #1
 800e352:	f000 fdbb 	bl	800eecc <xQueueGenericCreate>
 800e356:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d022      	beq.n	800e3a4 <osSemaphoreNew+0xe8>
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d01f      	beq.n	800e3a4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e364:	2300      	movs	r3, #0
 800e366:	2200      	movs	r2, #0
 800e368:	2100      	movs	r1, #0
 800e36a:	69f8      	ldr	r0, [r7, #28]
 800e36c:	f000 fe76 	bl	800f05c <xQueueGenericSend>
 800e370:	4603      	mov	r3, r0
 800e372:	2b01      	cmp	r3, #1
 800e374:	d016      	beq.n	800e3a4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e376:	69f8      	ldr	r0, [r7, #28]
 800e378:	f001 fb02 	bl	800f980 <vQueueDelete>
            hSemaphore = NULL;
 800e37c:	2300      	movs	r3, #0
 800e37e:	61fb      	str	r3, [r7, #28]
 800e380:	e010      	b.n	800e3a4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d108      	bne.n	800e39a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	461a      	mov	r2, r3
 800e38e:	68b9      	ldr	r1, [r7, #8]
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	f000 fdf8 	bl	800ef86 <xQueueCreateCountingSemaphoreStatic>
 800e396:	61f8      	str	r0, [r7, #28]
 800e398:	e004      	b.n	800e3a4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e39a:	68b9      	ldr	r1, [r7, #8]
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 fe29 	bl	800eff4 <xQueueCreateCountingSemaphore>
 800e3a2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00c      	beq.n	800e3c4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d003      	beq.n	800e3b8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	617b      	str	r3, [r7, #20]
 800e3b6:	e001      	b.n	800e3bc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e3bc:	6979      	ldr	r1, [r7, #20]
 800e3be:	69f8      	ldr	r0, [r7, #28]
 800e3c0:	f001 fc2a 	bl	800fc18 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e3c4:	69fb      	ldr	r3, [r7, #28]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3720      	adds	r7, #32
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
	...

0800e3d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d103      	bne.n	800e3f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e3e8:	f06f 0303 	mvn.w	r3, #3
 800e3ec:	617b      	str	r3, [r7, #20]
 800e3ee:	e039      	b.n	800e464 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3f0:	f3ef 8305 	mrs	r3, IPSR
 800e3f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d022      	beq.n	800e442 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d003      	beq.n	800e40a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e402:	f06f 0303 	mvn.w	r3, #3
 800e406:	617b      	str	r3, [r7, #20]
 800e408:	e02c      	b.n	800e464 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e40a:	2300      	movs	r3, #0
 800e40c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e40e:	f107 0308 	add.w	r3, r7, #8
 800e412:	461a      	mov	r2, r3
 800e414:	2100      	movs	r1, #0
 800e416:	6938      	ldr	r0, [r7, #16]
 800e418:	f001 fa32 	bl	800f880 <xQueueReceiveFromISR>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d003      	beq.n	800e42a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e422:	f06f 0302 	mvn.w	r3, #2
 800e426:	617b      	str	r3, [r7, #20]
 800e428:	e01c      	b.n	800e464 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d019      	beq.n	800e464 <osSemaphoreAcquire+0x94>
 800e430:	4b0f      	ldr	r3, [pc, #60]	; (800e470 <osSemaphoreAcquire+0xa0>)
 800e432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e436:	601a      	str	r2, [r3, #0]
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	e010      	b.n	800e464 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e442:	6839      	ldr	r1, [r7, #0]
 800e444:	6938      	ldr	r0, [r7, #16]
 800e446:	f001 f90f 	bl	800f668 <xQueueSemaphoreTake>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d009      	beq.n	800e464 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d003      	beq.n	800e45e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e456:	f06f 0301 	mvn.w	r3, #1
 800e45a:	617b      	str	r3, [r7, #20]
 800e45c:	e002      	b.n	800e464 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e45e:	f06f 0302 	mvn.w	r3, #2
 800e462:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e464:	697b      	ldr	r3, [r7, #20]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3718      	adds	r7, #24
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	e000ed04 	.word	0xe000ed04

0800e474 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e480:	2300      	movs	r3, #0
 800e482:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d103      	bne.n	800e492 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e48a:	f06f 0303 	mvn.w	r3, #3
 800e48e:	617b      	str	r3, [r7, #20]
 800e490:	e02c      	b.n	800e4ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e492:	f3ef 8305 	mrs	r3, IPSR
 800e496:	60fb      	str	r3, [r7, #12]
  return(result);
 800e498:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d01a      	beq.n	800e4d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e4a2:	f107 0308 	add.w	r3, r7, #8
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	6938      	ldr	r0, [r7, #16]
 800e4aa:	f000 ff70 	bl	800f38e <xQueueGiveFromISR>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d003      	beq.n	800e4bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e4b4:	f06f 0302 	mvn.w	r3, #2
 800e4b8:	617b      	str	r3, [r7, #20]
 800e4ba:	e017      	b.n	800e4ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d014      	beq.n	800e4ec <osSemaphoreRelease+0x78>
 800e4c2:	4b0d      	ldr	r3, [pc, #52]	; (800e4f8 <osSemaphoreRelease+0x84>)
 800e4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4c8:	601a      	str	r2, [r3, #0]
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	e00b      	b.n	800e4ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	2100      	movs	r1, #0
 800e4da:	6938      	ldr	r0, [r7, #16]
 800e4dc:	f000 fdbe 	bl	800f05c <xQueueGenericSend>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d002      	beq.n	800e4ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e4e6:	f06f 0302 	mvn.w	r3, #2
 800e4ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e4ec:	697b      	ldr	r3, [r7, #20]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3718      	adds	r7, #24
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	e000ed04 	.word	0xe000ed04

0800e4fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b08a      	sub	sp, #40	; 0x28
 800e500:	af02      	add	r7, sp, #8
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e508:	2300      	movs	r3, #0
 800e50a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e50c:	f3ef 8305 	mrs	r3, IPSR
 800e510:	613b      	str	r3, [r7, #16]
  return(result);
 800e512:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e514:	2b00      	cmp	r3, #0
 800e516:	d15f      	bne.n	800e5d8 <osMessageQueueNew+0xdc>
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d05c      	beq.n	800e5d8 <osMessageQueueNew+0xdc>
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d059      	beq.n	800e5d8 <osMessageQueueNew+0xdc>
    mem = -1;
 800e524:	f04f 33ff 	mov.w	r3, #4294967295
 800e528:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d029      	beq.n	800e584 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d012      	beq.n	800e55e <osMessageQueueNew+0x62>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	2b4f      	cmp	r3, #79	; 0x4f
 800e53e:	d90e      	bls.n	800e55e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00a      	beq.n	800e55e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	695a      	ldr	r2, [r3, #20]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	68b9      	ldr	r1, [r7, #8]
 800e550:	fb01 f303 	mul.w	r3, r1, r3
 800e554:	429a      	cmp	r2, r3
 800e556:	d302      	bcc.n	800e55e <osMessageQueueNew+0x62>
        mem = 1;
 800e558:	2301      	movs	r3, #1
 800e55a:	61bb      	str	r3, [r7, #24]
 800e55c:	e014      	b.n	800e588 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d110      	bne.n	800e588 <osMessageQueueNew+0x8c>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d10c      	bne.n	800e588 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e572:	2b00      	cmp	r3, #0
 800e574:	d108      	bne.n	800e588 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d104      	bne.n	800e588 <osMessageQueueNew+0x8c>
          mem = 0;
 800e57e:	2300      	movs	r3, #0
 800e580:	61bb      	str	r3, [r7, #24]
 800e582:	e001      	b.n	800e588 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e588:	69bb      	ldr	r3, [r7, #24]
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d10b      	bne.n	800e5a6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	691a      	ldr	r2, [r3, #16]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	689b      	ldr	r3, [r3, #8]
 800e596:	2100      	movs	r1, #0
 800e598:	9100      	str	r1, [sp, #0]
 800e59a:	68b9      	ldr	r1, [r7, #8]
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f000 fc1d 	bl	800eddc <xQueueGenericCreateStatic>
 800e5a2:	61f8      	str	r0, [r7, #28]
 800e5a4:	e008      	b.n	800e5b8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d105      	bne.n	800e5b8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	68b9      	ldr	r1, [r7, #8]
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f000 fc8b 	bl	800eecc <xQueueGenericCreate>
 800e5b6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00c      	beq.n	800e5d8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d003      	beq.n	800e5cc <osMessageQueueNew+0xd0>
        name = attr->name;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	617b      	str	r3, [r7, #20]
 800e5ca:	e001      	b.n	800e5d0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e5d0:	6979      	ldr	r1, [r7, #20]
 800e5d2:	69f8      	ldr	r0, [r7, #28]
 800e5d4:	f001 fb20 	bl	800fc18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e5d8:	69fb      	ldr	r3, [r7, #28]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3720      	adds	r7, #32
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
	...

0800e5e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	603b      	str	r3, [r7, #0]
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5fc:	f3ef 8305 	mrs	r3, IPSR
 800e600:	617b      	str	r3, [r7, #20]
  return(result);
 800e602:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e604:	2b00      	cmp	r3, #0
 800e606:	d028      	beq.n	800e65a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e608:	69bb      	ldr	r3, [r7, #24]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d005      	beq.n	800e61a <osMessageQueuePut+0x36>
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d002      	beq.n	800e61a <osMessageQueuePut+0x36>
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d003      	beq.n	800e622 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e61a:	f06f 0303 	mvn.w	r3, #3
 800e61e:	61fb      	str	r3, [r7, #28]
 800e620:	e038      	b.n	800e694 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e622:	2300      	movs	r3, #0
 800e624:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e626:	f107 0210 	add.w	r2, r7, #16
 800e62a:	2300      	movs	r3, #0
 800e62c:	68b9      	ldr	r1, [r7, #8]
 800e62e:	69b8      	ldr	r0, [r7, #24]
 800e630:	f000 fe12 	bl	800f258 <xQueueGenericSendFromISR>
 800e634:	4603      	mov	r3, r0
 800e636:	2b01      	cmp	r3, #1
 800e638:	d003      	beq.n	800e642 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e63a:	f06f 0302 	mvn.w	r3, #2
 800e63e:	61fb      	str	r3, [r7, #28]
 800e640:	e028      	b.n	800e694 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d025      	beq.n	800e694 <osMessageQueuePut+0xb0>
 800e648:	4b15      	ldr	r3, [pc, #84]	; (800e6a0 <osMessageQueuePut+0xbc>)
 800e64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e64e:	601a      	str	r2, [r3, #0]
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	e01c      	b.n	800e694 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d002      	beq.n	800e666 <osMessageQueuePut+0x82>
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d103      	bne.n	800e66e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e666:	f06f 0303 	mvn.w	r3, #3
 800e66a:	61fb      	str	r3, [r7, #28]
 800e66c:	e012      	b.n	800e694 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e66e:	2300      	movs	r3, #0
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	68b9      	ldr	r1, [r7, #8]
 800e674:	69b8      	ldr	r0, [r7, #24]
 800e676:	f000 fcf1 	bl	800f05c <xQueueGenericSend>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d009      	beq.n	800e694 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d003      	beq.n	800e68e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e686:	f06f 0301 	mvn.w	r3, #1
 800e68a:	61fb      	str	r3, [r7, #28]
 800e68c:	e002      	b.n	800e694 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e68e:	f06f 0302 	mvn.w	r3, #2
 800e692:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e694:	69fb      	ldr	r3, [r7, #28]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3720      	adds	r7, #32
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	e000ed04 	.word	0xe000ed04

0800e6a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b088      	sub	sp, #32
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	607a      	str	r2, [r7, #4]
 800e6b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6ba:	f3ef 8305 	mrs	r3, IPSR
 800e6be:	617b      	str	r3, [r7, #20]
  return(result);
 800e6c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d028      	beq.n	800e718 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d005      	beq.n	800e6d8 <osMessageQueueGet+0x34>
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d002      	beq.n	800e6d8 <osMessageQueueGet+0x34>
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d003      	beq.n	800e6e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e6d8:	f06f 0303 	mvn.w	r3, #3
 800e6dc:	61fb      	str	r3, [r7, #28]
 800e6de:	e037      	b.n	800e750 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e6e4:	f107 0310 	add.w	r3, r7, #16
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	68b9      	ldr	r1, [r7, #8]
 800e6ec:	69b8      	ldr	r0, [r7, #24]
 800e6ee:	f001 f8c7 	bl	800f880 <xQueueReceiveFromISR>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d003      	beq.n	800e700 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e6f8:	f06f 0302 	mvn.w	r3, #2
 800e6fc:	61fb      	str	r3, [r7, #28]
 800e6fe:	e027      	b.n	800e750 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d024      	beq.n	800e750 <osMessageQueueGet+0xac>
 800e706:	4b15      	ldr	r3, [pc, #84]	; (800e75c <osMessageQueueGet+0xb8>)
 800e708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	f3bf 8f6f 	isb	sy
 800e716:	e01b      	b.n	800e750 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d002      	beq.n	800e724 <osMessageQueueGet+0x80>
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d103      	bne.n	800e72c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e724:	f06f 0303 	mvn.w	r3, #3
 800e728:	61fb      	str	r3, [r7, #28]
 800e72a:	e011      	b.n	800e750 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e72c:	683a      	ldr	r2, [r7, #0]
 800e72e:	68b9      	ldr	r1, [r7, #8]
 800e730:	69b8      	ldr	r0, [r7, #24]
 800e732:	f000 feb9 	bl	800f4a8 <xQueueReceive>
 800e736:	4603      	mov	r3, r0
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d009      	beq.n	800e750 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d003      	beq.n	800e74a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e742:	f06f 0301 	mvn.w	r3, #1
 800e746:	61fb      	str	r3, [r7, #28]
 800e748:	e002      	b.n	800e750 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e74a:	f06f 0302 	mvn.w	r3, #2
 800e74e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e750:	69fb      	ldr	r3, [r7, #28]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3720      	adds	r7, #32
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	e000ed04 	.word	0xe000ed04

0800e760 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e760:	b480      	push	{r7}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	4a07      	ldr	r2, [pc, #28]	; (800e78c <vApplicationGetIdleTaskMemory+0x2c>)
 800e770:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	4a06      	ldr	r2, [pc, #24]	; (800e790 <vApplicationGetIdleTaskMemory+0x30>)
 800e776:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2280      	movs	r2, #128	; 0x80
 800e77c:	601a      	str	r2, [r3, #0]
}
 800e77e:	bf00      	nop
 800e780:	3714      	adds	r7, #20
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr
 800e78a:	bf00      	nop
 800e78c:	20000b84 	.word	0x20000b84
 800e790:	20000be4 	.word	0x20000be4

0800e794 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	60b9      	str	r1, [r7, #8]
 800e79e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	4a07      	ldr	r2, [pc, #28]	; (800e7c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800e7a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	4a06      	ldr	r2, [pc, #24]	; (800e7c4 <vApplicationGetTimerTaskMemory+0x30>)
 800e7aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e7b2:	601a      	str	r2, [r3, #0]
}
 800e7b4:	bf00      	nop
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	20000de4 	.word	0x20000de4
 800e7c4:	20000e44 	.word	0x20000e44

0800e7c8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10a      	bne.n	800e7ec <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800e7ec:	2320      	movs	r3, #32
 800e7ee:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	2b20      	cmp	r3, #32
 800e7f4:	d00a      	beq.n	800e80c <xEventGroupCreateStatic+0x44>
	__asm volatile
 800e7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	60fb      	str	r3, [r7, #12]
}
 800e808:	bf00      	nop
 800e80a:	e7fe      	b.n	800e80a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00a      	beq.n	800e82c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	2200      	movs	r2, #0
 800e81a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	3304      	adds	r3, #4
 800e820:	4618      	mov	r0, r3
 800e822:	f000 f9bf 	bl	800eba4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	2201      	movs	r2, #1
 800e82a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800e82c:	697b      	ldr	r3, [r7, #20]
	}
 800e82e:	4618      	mov	r0, r3
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800e836:	b580      	push	{r7, lr}
 800e838:	b082      	sub	sp, #8
 800e83a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800e83c:	2020      	movs	r0, #32
 800e83e:	f003 f9c3 	bl	8011bc8 <pvPortMalloc>
 800e842:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00a      	beq.n	800e860 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2200      	movs	r2, #0
 800e84e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	3304      	adds	r3, #4
 800e854:	4618      	mov	r0, r3
 800e856:	f000 f9a5 	bl	800eba4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800e860:	687b      	ldr	r3, [r7, #4]
	}
 800e862:	4618      	mov	r0, r3
 800e864:	3708      	adds	r7, #8
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
	...

0800e86c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b090      	sub	sp, #64	; 0x40
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800e882:	2300      	movs	r3, #0
 800e884:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10a      	bne.n	800e8a2 <xEventGroupWaitBits+0x36>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	623b      	str	r3, [r7, #32]
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00a      	beq.n	800e8c2 <xEventGroupWaitBits+0x56>
	__asm volatile
 800e8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b0:	f383 8811 	msr	BASEPRI, r3
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	61fb      	str	r3, [r7, #28]
}
 800e8be:	bf00      	nop
 800e8c0:	e7fe      	b.n	800e8c0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10a      	bne.n	800e8de <xEventGroupWaitBits+0x72>
	__asm volatile
 800e8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8cc:	f383 8811 	msr	BASEPRI, r3
 800e8d0:	f3bf 8f6f 	isb	sy
 800e8d4:	f3bf 8f4f 	dsb	sy
 800e8d8:	61bb      	str	r3, [r7, #24]
}
 800e8da:	bf00      	nop
 800e8dc:	e7fe      	b.n	800e8dc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8de:	f002 f907 	bl	8010af0 <xTaskGetSchedulerState>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d102      	bne.n	800e8ee <xEventGroupWaitBits+0x82>
 800e8e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d101      	bne.n	800e8f2 <xEventGroupWaitBits+0x86>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	e000      	b.n	800e8f4 <xEventGroupWaitBits+0x88>
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d10a      	bne.n	800e90e <xEventGroupWaitBits+0xa2>
	__asm volatile
 800e8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fc:	f383 8811 	msr	BASEPRI, r3
 800e900:	f3bf 8f6f 	isb	sy
 800e904:	f3bf 8f4f 	dsb	sy
 800e908:	617b      	str	r3, [r7, #20]
}
 800e90a:	bf00      	nop
 800e90c:	e7fe      	b.n	800e90c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800e90e:	f001 fc49 	bl	80101a4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e918:	683a      	ldr	r2, [r7, #0]
 800e91a:	68b9      	ldr	r1, [r7, #8]
 800e91c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e91e:	f000 f90b 	bl	800eb38 <prvTestWaitCondition>
 800e922:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800e924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00e      	beq.n	800e948 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e92e:	2300      	movs	r3, #0
 800e930:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d028      	beq.n	800e98a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	43db      	mvns	r3, r3
 800e940:	401a      	ands	r2, r3
 800e942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e944:	601a      	str	r2, [r3, #0]
 800e946:	e020      	b.n	800e98a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d104      	bne.n	800e958 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800e952:	2301      	movs	r3, #1
 800e954:	633b      	str	r3, [r7, #48]	; 0x30
 800e956:	e018      	b.n	800e98a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e964:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d003      	beq.n	800e974 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e972:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e976:	1d18      	adds	r0, r3, #4
 800e978:	68ba      	ldr	r2, [r7, #8]
 800e97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97c:	4313      	orrs	r3, r2
 800e97e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e980:	4619      	mov	r1, r3
 800e982:	f001 fe2b 	bl	80105dc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e986:	2300      	movs	r3, #0
 800e988:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e98a:	f001 fc19 	bl	80101c0 <xTaskResumeAll>
 800e98e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e992:	2b00      	cmp	r3, #0
 800e994:	d031      	beq.n	800e9fa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d107      	bne.n	800e9ac <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800e99c:	4b19      	ldr	r3, [pc, #100]	; (800ea04 <xEventGroupWaitBits+0x198>)
 800e99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e9ac:	f002 fa16 	bl	8010ddc <uxTaskResetEventItemValue>
 800e9b0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d11a      	bne.n	800e9f2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800e9bc:	f002 ffe2 	bl	8011984 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e9c6:	683a      	ldr	r2, [r7, #0]
 800e9c8:	68b9      	ldr	r1, [r7, #8]
 800e9ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e9cc:	f000 f8b4 	bl	800eb38 <prvTestWaitCondition>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d009      	beq.n	800e9ea <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d006      	beq.n	800e9ea <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	43db      	mvns	r3, r3
 800e9e4:	401a      	ands	r2, r3
 800e9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800e9ee:	f002 fff9 	bl	80119e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3740      	adds	r7, #64	; 0x40
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	e000ed04 	.word	0xe000ed04

0800ea08 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b08e      	sub	sp, #56	; 0x38
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800ea12:	2300      	movs	r3, #0
 800ea14:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10a      	bne.n	800ea3a <xEventGroupSetBits+0x32>
	__asm volatile
 800ea24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea28:	f383 8811 	msr	BASEPRI, r3
 800ea2c:	f3bf 8f6f 	isb	sy
 800ea30:	f3bf 8f4f 	dsb	sy
 800ea34:	613b      	str	r3, [r7, #16]
}
 800ea36:	bf00      	nop
 800ea38:	e7fe      	b.n	800ea38 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00a      	beq.n	800ea5a <xEventGroupSetBits+0x52>
	__asm volatile
 800ea44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	60fb      	str	r3, [r7, #12]
}
 800ea56:	bf00      	nop
 800ea58:	e7fe      	b.n	800ea58 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800ea5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5c:	3304      	adds	r3, #4
 800ea5e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea62:	3308      	adds	r3, #8
 800ea64:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800ea66:	f001 fb9d 	bl	80101a4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	431a      	orrs	r2, r3
 800ea78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800ea7c:	e03c      	b.n	800eaf8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800ea7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800ea84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ea94:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ea9c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d108      	bne.n	800eaba <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800eaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	4013      	ands	r3, r2
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00b      	beq.n	800eacc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800eab4:	2301      	movs	r3, #1
 800eab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eab8:	e008      	b.n	800eacc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800eaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	4013      	ands	r3, r2
 800eac2:	69ba      	ldr	r2, [r7, #24]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d101      	bne.n	800eacc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800eac8:	2301      	movs	r3, #1
 800eaca:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d010      	beq.n	800eaf4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d003      	beq.n	800eae4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800eadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eade:	69bb      	ldr	r3, [r7, #24]
 800eae0:	4313      	orrs	r3, r2
 800eae2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800eae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800eaec:	4619      	mov	r1, r3
 800eaee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eaf0:	f001 fe40 	bl	8010774 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800eaf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eafa:	6a3b      	ldr	r3, [r7, #32]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d1be      	bne.n	800ea7e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800eb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb06:	43db      	mvns	r3, r3
 800eb08:	401a      	ands	r2, r3
 800eb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800eb0e:	f001 fb57 	bl	80101c0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800eb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb14:	681b      	ldr	r3, [r3, #0]
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3738      	adds	r7, #56	; 0x38
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b082      	sub	sp, #8
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
 800eb26:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800eb28:	6839      	ldr	r1, [r7, #0]
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7ff ff6c 	bl	800ea08 <xEventGroupSetBits>
}
 800eb30:	bf00      	nop
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800eb44:	2300      	movs	r3, #0
 800eb46:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d107      	bne.n	800eb5e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	4013      	ands	r3, r2
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00a      	beq.n	800eb6e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	617b      	str	r3, [r7, #20]
 800eb5c:	e007      	b.n	800eb6e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800eb5e:	68fa      	ldr	r2, [r7, #12]
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	4013      	ands	r3, r2
 800eb64:	68ba      	ldr	r2, [r7, #8]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d101      	bne.n	800eb6e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800eb6e:	697b      	ldr	r3, [r7, #20]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	371c      	adds	r7, #28
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b086      	sub	sp, #24
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	68ba      	ldr	r2, [r7, #8]
 800eb8c:	68f9      	ldr	r1, [r7, #12]
 800eb8e:	4804      	ldr	r0, [pc, #16]	; (800eba0 <xEventGroupSetBitsFromISR+0x24>)
 800eb90:	f002 fdac 	bl	80116ec <xTimerPendFunctionCallFromISR>
 800eb94:	6178      	str	r0, [r7, #20]

		return xReturn;
 800eb96:	697b      	ldr	r3, [r7, #20]
	}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3718      	adds	r7, #24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	0800eb1f 	.word	0x0800eb1f

0800eba4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f103 0208 	add.w	r2, r3, #8
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f103 0208 	add.w	r2, r3, #8
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f103 0208 	add.w	r2, r3, #8
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ebd8:	bf00      	nop
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ebf2:	bf00      	nop
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebfe:	b480      	push	{r7}
 800ec00:	b085      	sub	sp, #20
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
 800ec06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	683a      	ldr	r2, [r7, #0]
 800ec22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	683a      	ldr	r2, [r7, #0]
 800ec28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	1c5a      	adds	r2, r3, #1
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	601a      	str	r2, [r3, #0]
}
 800ec3a:	bf00      	nop
 800ec3c:	3714      	adds	r7, #20
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec46:	b480      	push	{r7}
 800ec48:	b085      	sub	sp, #20
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
 800ec4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec5c:	d103      	bne.n	800ec66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	691b      	ldr	r3, [r3, #16]
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	e00c      	b.n	800ec80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	3308      	adds	r3, #8
 800ec6a:	60fb      	str	r3, [r7, #12]
 800ec6c:	e002      	b.n	800ec74 <vListInsert+0x2e>
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	60fb      	str	r3, [r7, #12]
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	68ba      	ldr	r2, [r7, #8]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d2f6      	bcs.n	800ec6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	685a      	ldr	r2, [r3, #4]
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	683a      	ldr	r2, [r7, #0]
 800ec8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	683a      	ldr	r2, [r7, #0]
 800ec9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	1c5a      	adds	r2, r3, #1
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	601a      	str	r2, [r3, #0]
}
 800ecac:	bf00      	nop
 800ecae:	3714      	adds	r7, #20
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	6892      	ldr	r2, [r2, #8]
 800ecce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	689b      	ldr	r3, [r3, #8]
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	6852      	ldr	r2, [r2, #4]
 800ecd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d103      	bne.n	800ecec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	689a      	ldr	r2, [r3, #8]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	1e5a      	subs	r2, r3, #1
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3714      	adds	r7, #20
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10a      	bne.n	800ed36 <xQueueGenericReset+0x2a>
	__asm volatile
 800ed20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	60bb      	str	r3, [r7, #8]
}
 800ed32:	bf00      	nop
 800ed34:	e7fe      	b.n	800ed34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ed36:	f002 fe25 	bl	8011984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed42:	68f9      	ldr	r1, [r7, #12]
 800ed44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed46:	fb01 f303 	mul.w	r3, r1, r3
 800ed4a:	441a      	add	r2, r3
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2200      	movs	r2, #0
 800ed54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed66:	3b01      	subs	r3, #1
 800ed68:	68f9      	ldr	r1, [r7, #12]
 800ed6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed6c:	fb01 f303 	mul.w	r3, r1, r3
 800ed70:	441a      	add	r2, r3
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	22ff      	movs	r2, #255	; 0xff
 800ed7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	22ff      	movs	r2, #255	; 0xff
 800ed82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d114      	bne.n	800edb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d01a      	beq.n	800edca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	3310      	adds	r3, #16
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f001 fc87 	bl	80106ac <xTaskRemoveFromEventList>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d012      	beq.n	800edca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eda4:	4b0c      	ldr	r3, [pc, #48]	; (800edd8 <xQueueGenericReset+0xcc>)
 800eda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	f3bf 8f4f 	dsb	sy
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	e009      	b.n	800edca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3310      	adds	r3, #16
 800edba:	4618      	mov	r0, r3
 800edbc:	f7ff fef2 	bl	800eba4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	3324      	adds	r3, #36	; 0x24
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7ff feed 	bl	800eba4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800edca:	f002 fe0b 	bl	80119e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800edce:	2301      	movs	r3, #1
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	e000ed04 	.word	0xe000ed04

0800eddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b08e      	sub	sp, #56	; 0x38
 800ede0:	af02      	add	r7, sp, #8
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
 800ede8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d10a      	bne.n	800ee06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee02:	bf00      	nop
 800ee04:	e7fe      	b.n	800ee04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d10a      	bne.n	800ee22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ee0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee10:	f383 8811 	msr	BASEPRI, r3
 800ee14:	f3bf 8f6f 	isb	sy
 800ee18:	f3bf 8f4f 	dsb	sy
 800ee1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee1e:	bf00      	nop
 800ee20:	e7fe      	b.n	800ee20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d002      	beq.n	800ee2e <xQueueGenericCreateStatic+0x52>
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <xQueueGenericCreateStatic+0x56>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e000      	b.n	800ee34 <xQueueGenericCreateStatic+0x58>
 800ee32:	2300      	movs	r3, #0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10a      	bne.n	800ee4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ee38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	623b      	str	r3, [r7, #32]
}
 800ee4a:	bf00      	nop
 800ee4c:	e7fe      	b.n	800ee4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d102      	bne.n	800ee5a <xQueueGenericCreateStatic+0x7e>
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d101      	bne.n	800ee5e <xQueueGenericCreateStatic+0x82>
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	e000      	b.n	800ee60 <xQueueGenericCreateStatic+0x84>
 800ee5e:	2300      	movs	r3, #0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d10a      	bne.n	800ee7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ee64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee68:	f383 8811 	msr	BASEPRI, r3
 800ee6c:	f3bf 8f6f 	isb	sy
 800ee70:	f3bf 8f4f 	dsb	sy
 800ee74:	61fb      	str	r3, [r7, #28]
}
 800ee76:	bf00      	nop
 800ee78:	e7fe      	b.n	800ee78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ee7a:	2350      	movs	r3, #80	; 0x50
 800ee7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	2b50      	cmp	r3, #80	; 0x50
 800ee82:	d00a      	beq.n	800ee9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ee84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	61bb      	str	r3, [r7, #24]
}
 800ee96:	bf00      	nop
 800ee98:	e7fe      	b.n	800ee98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ee9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800eea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00d      	beq.n	800eec2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eeae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800eeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	68b9      	ldr	r1, [r7, #8]
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 f83f 	bl	800ef40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3730      	adds	r7, #48	; 0x30
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b08a      	sub	sp, #40	; 0x28
 800eed0:	af02      	add	r7, sp, #8
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	4613      	mov	r3, r2
 800eed8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800eee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	613b      	str	r3, [r7, #16]
}
 800eef2:	bf00      	nop
 800eef4:	e7fe      	b.n	800eef4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	68ba      	ldr	r2, [r7, #8]
 800eefa:	fb02 f303 	mul.w	r3, r2, r3
 800eefe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	3350      	adds	r3, #80	; 0x50
 800ef04:	4618      	mov	r0, r3
 800ef06:	f002 fe5f 	bl	8011bc8 <pvPortMalloc>
 800ef0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d011      	beq.n	800ef36 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ef12:	69bb      	ldr	r3, [r7, #24]
 800ef14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	3350      	adds	r3, #80	; 0x50
 800ef1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef24:	79fa      	ldrb	r2, [r7, #7]
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	68b9      	ldr	r1, [r7, #8]
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	f000 f805 	bl	800ef40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef36:	69bb      	ldr	r3, [r7, #24]
	}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3720      	adds	r7, #32
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
 800ef4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d103      	bne.n	800ef5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	69ba      	ldr	r2, [r7, #24]
 800ef58:	601a      	str	r2, [r3, #0]
 800ef5a:	e002      	b.n	800ef62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ef6e:	2101      	movs	r1, #1
 800ef70:	69b8      	ldr	r0, [r7, #24]
 800ef72:	f7ff fecb 	bl	800ed0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	78fa      	ldrb	r2, [r7, #3]
 800ef7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ef7e:	bf00      	nop
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b08a      	sub	sp, #40	; 0x28
 800ef8a:	af02      	add	r7, sp, #8
 800ef8c:	60f8      	str	r0, [r7, #12]
 800ef8e:	60b9      	str	r1, [r7, #8]
 800ef90:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d10a      	bne.n	800efae <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ef98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef9c:	f383 8811 	msr	BASEPRI, r3
 800efa0:	f3bf 8f6f 	isb	sy
 800efa4:	f3bf 8f4f 	dsb	sy
 800efa8:	61bb      	str	r3, [r7, #24]
}
 800efaa:	bf00      	nop
 800efac:	e7fe      	b.n	800efac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d90a      	bls.n	800efcc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800efb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efba:	f383 8811 	msr	BASEPRI, r3
 800efbe:	f3bf 8f6f 	isb	sy
 800efc2:	f3bf 8f4f 	dsb	sy
 800efc6:	617b      	str	r3, [r7, #20]
}
 800efc8:	bf00      	nop
 800efca:	e7fe      	b.n	800efca <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800efcc:	2302      	movs	r3, #2
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	2100      	movs	r1, #0
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f7ff ff00 	bl	800eddc <xQueueGenericCreateStatic>
 800efdc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	68ba      	ldr	r2, [r7, #8]
 800efe8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800efea:	69fb      	ldr	r3, [r7, #28]
	}
 800efec:	4618      	mov	r0, r3
 800efee:	3720      	adds	r7, #32
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b086      	sub	sp, #24
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d10a      	bne.n	800f01a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800f004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	613b      	str	r3, [r7, #16]
}
 800f016:	bf00      	nop
 800f018:	e7fe      	b.n	800f018 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d90a      	bls.n	800f038 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800f022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f026:	f383 8811 	msr	BASEPRI, r3
 800f02a:	f3bf 8f6f 	isb	sy
 800f02e:	f3bf 8f4f 	dsb	sy
 800f032:	60fb      	str	r3, [r7, #12]
}
 800f034:	bf00      	nop
 800f036:	e7fe      	b.n	800f036 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f038:	2202      	movs	r2, #2
 800f03a:	2100      	movs	r1, #0
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7ff ff45 	bl	800eecc <xQueueGenericCreate>
 800f042:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d002      	beq.n	800f050 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	683a      	ldr	r2, [r7, #0]
 800f04e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f050:	697b      	ldr	r3, [r7, #20]
	}
 800f052:	4618      	mov	r0, r3
 800f054:	3718      	adds	r7, #24
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
	...

0800f05c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b08e      	sub	sp, #56	; 0x38
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
 800f068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f06a:	2300      	movs	r3, #0
 800f06c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10a      	bne.n	800f08e <xQueueGenericSend+0x32>
	__asm volatile
 800f078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07c:	f383 8811 	msr	BASEPRI, r3
 800f080:	f3bf 8f6f 	isb	sy
 800f084:	f3bf 8f4f 	dsb	sy
 800f088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f08a:	bf00      	nop
 800f08c:	e7fe      	b.n	800f08c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d103      	bne.n	800f09c <xQueueGenericSend+0x40>
 800f094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d101      	bne.n	800f0a0 <xQueueGenericSend+0x44>
 800f09c:	2301      	movs	r3, #1
 800f09e:	e000      	b.n	800f0a2 <xQueueGenericSend+0x46>
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10a      	bne.n	800f0bc <xQueueGenericSend+0x60>
	__asm volatile
 800f0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0aa:	f383 8811 	msr	BASEPRI, r3
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f3bf 8f4f 	dsb	sy
 800f0b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f0b8:	bf00      	nop
 800f0ba:	e7fe      	b.n	800f0ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d103      	bne.n	800f0ca <xQueueGenericSend+0x6e>
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d101      	bne.n	800f0ce <xQueueGenericSend+0x72>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e000      	b.n	800f0d0 <xQueueGenericSend+0x74>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d10a      	bne.n	800f0ea <xQueueGenericSend+0x8e>
	__asm volatile
 800f0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d8:	f383 8811 	msr	BASEPRI, r3
 800f0dc:	f3bf 8f6f 	isb	sy
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	623b      	str	r3, [r7, #32]
}
 800f0e6:	bf00      	nop
 800f0e8:	e7fe      	b.n	800f0e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0ea:	f001 fd01 	bl	8010af0 <xTaskGetSchedulerState>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d102      	bne.n	800f0fa <xQueueGenericSend+0x9e>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d101      	bne.n	800f0fe <xQueueGenericSend+0xa2>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e000      	b.n	800f100 <xQueueGenericSend+0xa4>
 800f0fe:	2300      	movs	r3, #0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d10a      	bne.n	800f11a <xQueueGenericSend+0xbe>
	__asm volatile
 800f104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f108:	f383 8811 	msr	BASEPRI, r3
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	61fb      	str	r3, [r7, #28]
}
 800f116:	bf00      	nop
 800f118:	e7fe      	b.n	800f118 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f11a:	f002 fc33 	bl	8011984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f126:	429a      	cmp	r2, r3
 800f128:	d302      	bcc.n	800f130 <xQueueGenericSend+0xd4>
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	d129      	bne.n	800f184 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f130:	683a      	ldr	r2, [r7, #0]
 800f132:	68b9      	ldr	r1, [r7, #8]
 800f134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f136:	f000 fc5e 	bl	800f9f6 <prvCopyDataToQueue>
 800f13a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f140:	2b00      	cmp	r3, #0
 800f142:	d010      	beq.n	800f166 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f146:	3324      	adds	r3, #36	; 0x24
 800f148:	4618      	mov	r0, r3
 800f14a:	f001 faaf 	bl	80106ac <xTaskRemoveFromEventList>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d013      	beq.n	800f17c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f154:	4b3f      	ldr	r3, [pc, #252]	; (800f254 <xQueueGenericSend+0x1f8>)
 800f156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	e00a      	b.n	800f17c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d007      	beq.n	800f17c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f16c:	4b39      	ldr	r3, [pc, #228]	; (800f254 <xQueueGenericSend+0x1f8>)
 800f16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f172:	601a      	str	r2, [r3, #0]
 800f174:	f3bf 8f4f 	dsb	sy
 800f178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f17c:	f002 fc32 	bl	80119e4 <vPortExitCritical>
				return pdPASS;
 800f180:	2301      	movs	r3, #1
 800f182:	e063      	b.n	800f24c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d103      	bne.n	800f192 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f18a:	f002 fc2b 	bl	80119e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f18e:	2300      	movs	r3, #0
 800f190:	e05c      	b.n	800f24c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f194:	2b00      	cmp	r3, #0
 800f196:	d106      	bne.n	800f1a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f198:	f107 0314 	add.w	r3, r7, #20
 800f19c:	4618      	mov	r0, r3
 800f19e:	f001 fb4b 	bl	8010838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1a6:	f002 fc1d 	bl	80119e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1aa:	f000 fffb 	bl	80101a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1ae:	f002 fbe9 	bl	8011984 <vPortEnterCritical>
 800f1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1b8:	b25b      	sxtb	r3, r3
 800f1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1be:	d103      	bne.n	800f1c8 <xQueueGenericSend+0x16c>
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1ce:	b25b      	sxtb	r3, r3
 800f1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d4:	d103      	bne.n	800f1de <xQueueGenericSend+0x182>
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1de:	f002 fc01 	bl	80119e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1e2:	1d3a      	adds	r2, r7, #4
 800f1e4:	f107 0314 	add.w	r3, r7, #20
 800f1e8:	4611      	mov	r1, r2
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f001 fb3a 	bl	8010864 <xTaskCheckForTimeOut>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d124      	bne.n	800f240 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f1f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1f8:	f000 fcf5 	bl	800fbe6 <prvIsQueueFull>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d018      	beq.n	800f234 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f204:	3310      	adds	r3, #16
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	4611      	mov	r1, r2
 800f20a:	4618      	mov	r0, r3
 800f20c:	f001 f9c2 	bl	8010594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f212:	f000 fc80 	bl	800fb16 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f216:	f000 ffd3 	bl	80101c0 <xTaskResumeAll>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f47f af7c 	bne.w	800f11a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f222:	4b0c      	ldr	r3, [pc, #48]	; (800f254 <xQueueGenericSend+0x1f8>)
 800f224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f228:	601a      	str	r2, [r3, #0]
 800f22a:	f3bf 8f4f 	dsb	sy
 800f22e:	f3bf 8f6f 	isb	sy
 800f232:	e772      	b.n	800f11a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f236:	f000 fc6e 	bl	800fb16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f23a:	f000 ffc1 	bl	80101c0 <xTaskResumeAll>
 800f23e:	e76c      	b.n	800f11a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f242:	f000 fc68 	bl	800fb16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f246:	f000 ffbb 	bl	80101c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f24a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3738      	adds	r7, #56	; 0x38
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	e000ed04 	.word	0xe000ed04

0800f258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b090      	sub	sp, #64	; 0x40
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	60f8      	str	r0, [r7, #12]
 800f260:	60b9      	str	r1, [r7, #8]
 800f262:	607a      	str	r2, [r7, #4]
 800f264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10a      	bne.n	800f286 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f274:	f383 8811 	msr	BASEPRI, r3
 800f278:	f3bf 8f6f 	isb	sy
 800f27c:	f3bf 8f4f 	dsb	sy
 800f280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f282:	bf00      	nop
 800f284:	e7fe      	b.n	800f284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d103      	bne.n	800f294 <xQueueGenericSendFromISR+0x3c>
 800f28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f290:	2b00      	cmp	r3, #0
 800f292:	d101      	bne.n	800f298 <xQueueGenericSendFromISR+0x40>
 800f294:	2301      	movs	r3, #1
 800f296:	e000      	b.n	800f29a <xQueueGenericSendFromISR+0x42>
 800f298:	2300      	movs	r3, #0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d10a      	bne.n	800f2b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f2b0:	bf00      	nop
 800f2b2:	e7fe      	b.n	800f2b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	d103      	bne.n	800f2c2 <xQueueGenericSendFromISR+0x6a>
 800f2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d101      	bne.n	800f2c6 <xQueueGenericSendFromISR+0x6e>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e000      	b.n	800f2c8 <xQueueGenericSendFromISR+0x70>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d10a      	bne.n	800f2e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d0:	f383 8811 	msr	BASEPRI, r3
 800f2d4:	f3bf 8f6f 	isb	sy
 800f2d8:	f3bf 8f4f 	dsb	sy
 800f2dc:	623b      	str	r3, [r7, #32]
}
 800f2de:	bf00      	nop
 800f2e0:	e7fe      	b.n	800f2e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2e2:	f002 fc31 	bl	8011b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f2e6:	f3ef 8211 	mrs	r2, BASEPRI
 800f2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ee:	f383 8811 	msr	BASEPRI, r3
 800f2f2:	f3bf 8f6f 	isb	sy
 800f2f6:	f3bf 8f4f 	dsb	sy
 800f2fa:	61fa      	str	r2, [r7, #28]
 800f2fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f2fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f300:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d302      	bcc.n	800f314 <xQueueGenericSendFromISR+0xbc>
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	2b02      	cmp	r3, #2
 800f312:	d12f      	bne.n	800f374 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f322:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f324:	683a      	ldr	r2, [r7, #0]
 800f326:	68b9      	ldr	r1, [r7, #8]
 800f328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f32a:	f000 fb64 	bl	800f9f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f32e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f336:	d112      	bne.n	800f35e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d016      	beq.n	800f36e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f342:	3324      	adds	r3, #36	; 0x24
 800f344:	4618      	mov	r0, r3
 800f346:	f001 f9b1 	bl	80106ac <xTaskRemoveFromEventList>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00e      	beq.n	800f36e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00b      	beq.n	800f36e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2201      	movs	r2, #1
 800f35a:	601a      	str	r2, [r3, #0]
 800f35c:	e007      	b.n	800f36e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f35e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f362:	3301      	adds	r3, #1
 800f364:	b2db      	uxtb	r3, r3
 800f366:	b25a      	sxtb	r2, r3
 800f368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f36e:	2301      	movs	r3, #1
 800f370:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f372:	e001      	b.n	800f378 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f374:	2300      	movs	r3, #0
 800f376:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f37a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f382:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f386:	4618      	mov	r0, r3
 800f388:	3740      	adds	r7, #64	; 0x40
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}

0800f38e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f38e:	b580      	push	{r7, lr}
 800f390:	b08e      	sub	sp, #56	; 0x38
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
 800f396:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d10a      	bne.n	800f3b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a6:	f383 8811 	msr	BASEPRI, r3
 800f3aa:	f3bf 8f6f 	isb	sy
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	623b      	str	r3, [r7, #32]
}
 800f3b4:	bf00      	nop
 800f3b6:	e7fe      	b.n	800f3b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00a      	beq.n	800f3d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c4:	f383 8811 	msr	BASEPRI, r3
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	61fb      	str	r3, [r7, #28]
}
 800f3d2:	bf00      	nop
 800f3d4:	e7fe      	b.n	800f3d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d103      	bne.n	800f3e6 <xQueueGiveFromISR+0x58>
 800f3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d101      	bne.n	800f3ea <xQueueGiveFromISR+0x5c>
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e000      	b.n	800f3ec <xQueueGiveFromISR+0x5e>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d10a      	bne.n	800f406 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f4:	f383 8811 	msr	BASEPRI, r3
 800f3f8:	f3bf 8f6f 	isb	sy
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	61bb      	str	r3, [r7, #24]
}
 800f402:	bf00      	nop
 800f404:	e7fe      	b.n	800f404 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f406:	f002 fb9f 	bl	8011b48 <vPortValidateInterruptPriority>
	__asm volatile
 800f40a:	f3ef 8211 	mrs	r2, BASEPRI
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	617a      	str	r2, [r7, #20]
 800f420:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f422:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f424:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f42a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f432:	429a      	cmp	r2, r3
 800f434:	d22b      	bcs.n	800f48e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f442:	1c5a      	adds	r2, r3, #1
 800f444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f446:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f448:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f450:	d112      	bne.n	800f478 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f456:	2b00      	cmp	r3, #0
 800f458:	d016      	beq.n	800f488 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45c:	3324      	adds	r3, #36	; 0x24
 800f45e:	4618      	mov	r0, r3
 800f460:	f001 f924 	bl	80106ac <xTaskRemoveFromEventList>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00e      	beq.n	800f488 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d00b      	beq.n	800f488 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	2201      	movs	r2, #1
 800f474:	601a      	str	r2, [r3, #0]
 800f476:	e007      	b.n	800f488 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f47c:	3301      	adds	r3, #1
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	b25a      	sxtb	r2, r3
 800f482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f488:	2301      	movs	r3, #1
 800f48a:	637b      	str	r3, [r7, #52]	; 0x34
 800f48c:	e001      	b.n	800f492 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f48e:	2300      	movs	r3, #0
 800f490:	637b      	str	r3, [r7, #52]	; 0x34
 800f492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f494:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	f383 8811 	msr	BASEPRI, r3
}
 800f49c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3738      	adds	r7, #56	; 0x38
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b08c      	sub	sp, #48	; 0x30
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d10a      	bne.n	800f4d8 <xQueueReceive+0x30>
	__asm volatile
 800f4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c6:	f383 8811 	msr	BASEPRI, r3
 800f4ca:	f3bf 8f6f 	isb	sy
 800f4ce:	f3bf 8f4f 	dsb	sy
 800f4d2:	623b      	str	r3, [r7, #32]
}
 800f4d4:	bf00      	nop
 800f4d6:	e7fe      	b.n	800f4d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d103      	bne.n	800f4e6 <xQueueReceive+0x3e>
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d101      	bne.n	800f4ea <xQueueReceive+0x42>
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e000      	b.n	800f4ec <xQueueReceive+0x44>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d10a      	bne.n	800f506 <xQueueReceive+0x5e>
	__asm volatile
 800f4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f4:	f383 8811 	msr	BASEPRI, r3
 800f4f8:	f3bf 8f6f 	isb	sy
 800f4fc:	f3bf 8f4f 	dsb	sy
 800f500:	61fb      	str	r3, [r7, #28]
}
 800f502:	bf00      	nop
 800f504:	e7fe      	b.n	800f504 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f506:	f001 faf3 	bl	8010af0 <xTaskGetSchedulerState>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d102      	bne.n	800f516 <xQueueReceive+0x6e>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d101      	bne.n	800f51a <xQueueReceive+0x72>
 800f516:	2301      	movs	r3, #1
 800f518:	e000      	b.n	800f51c <xQueueReceive+0x74>
 800f51a:	2300      	movs	r3, #0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d10a      	bne.n	800f536 <xQueueReceive+0x8e>
	__asm volatile
 800f520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f524:	f383 8811 	msr	BASEPRI, r3
 800f528:	f3bf 8f6f 	isb	sy
 800f52c:	f3bf 8f4f 	dsb	sy
 800f530:	61bb      	str	r3, [r7, #24]
}
 800f532:	bf00      	nop
 800f534:	e7fe      	b.n	800f534 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f536:	f002 fa25 	bl	8011984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f53e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f542:	2b00      	cmp	r3, #0
 800f544:	d01f      	beq.n	800f586 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f546:	68b9      	ldr	r1, [r7, #8]
 800f548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f54a:	f000 fabe 	bl	800faca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f550:	1e5a      	subs	r2, r3, #1
 800f552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f554:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f558:	691b      	ldr	r3, [r3, #16]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00f      	beq.n	800f57e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f560:	3310      	adds	r3, #16
 800f562:	4618      	mov	r0, r3
 800f564:	f001 f8a2 	bl	80106ac <xTaskRemoveFromEventList>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d007      	beq.n	800f57e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f56e:	4b3d      	ldr	r3, [pc, #244]	; (800f664 <xQueueReceive+0x1bc>)
 800f570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f574:	601a      	str	r2, [r3, #0]
 800f576:	f3bf 8f4f 	dsb	sy
 800f57a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f57e:	f002 fa31 	bl	80119e4 <vPortExitCritical>
				return pdPASS;
 800f582:	2301      	movs	r3, #1
 800f584:	e069      	b.n	800f65a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d103      	bne.n	800f594 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f58c:	f002 fa2a 	bl	80119e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f590:	2300      	movs	r3, #0
 800f592:	e062      	b.n	800f65a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f596:	2b00      	cmp	r3, #0
 800f598:	d106      	bne.n	800f5a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f59a:	f107 0310 	add.w	r3, r7, #16
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f001 f94a 	bl	8010838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f5a8:	f002 fa1c 	bl	80119e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f5ac:	f000 fdfa 	bl	80101a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f5b0:	f002 f9e8 	bl	8011984 <vPortEnterCritical>
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5ba:	b25b      	sxtb	r3, r3
 800f5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c0:	d103      	bne.n	800f5ca <xQueueReceive+0x122>
 800f5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5d0:	b25b      	sxtb	r3, r3
 800f5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5d6:	d103      	bne.n	800f5e0 <xQueueReceive+0x138>
 800f5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5e0:	f002 fa00 	bl	80119e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f5e4:	1d3a      	adds	r2, r7, #4
 800f5e6:	f107 0310 	add.w	r3, r7, #16
 800f5ea:	4611      	mov	r1, r2
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f001 f939 	bl	8010864 <xTaskCheckForTimeOut>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d123      	bne.n	800f640 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f5f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5fa:	f000 fade 	bl	800fbba <prvIsQueueEmpty>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d017      	beq.n	800f634 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f606:	3324      	adds	r3, #36	; 0x24
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	4611      	mov	r1, r2
 800f60c:	4618      	mov	r0, r3
 800f60e:	f000 ffc1 	bl	8010594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f614:	f000 fa7f 	bl	800fb16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f618:	f000 fdd2 	bl	80101c0 <xTaskResumeAll>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d189      	bne.n	800f536 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f622:	4b10      	ldr	r3, [pc, #64]	; (800f664 <xQueueReceive+0x1bc>)
 800f624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f628:	601a      	str	r2, [r3, #0]
 800f62a:	f3bf 8f4f 	dsb	sy
 800f62e:	f3bf 8f6f 	isb	sy
 800f632:	e780      	b.n	800f536 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f636:	f000 fa6e 	bl	800fb16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f63a:	f000 fdc1 	bl	80101c0 <xTaskResumeAll>
 800f63e:	e77a      	b.n	800f536 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f642:	f000 fa68 	bl	800fb16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f646:	f000 fdbb 	bl	80101c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f64a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f64c:	f000 fab5 	bl	800fbba <prvIsQueueEmpty>
 800f650:	4603      	mov	r3, r0
 800f652:	2b00      	cmp	r3, #0
 800f654:	f43f af6f 	beq.w	800f536 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f658:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3730      	adds	r7, #48	; 0x30
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	e000ed04 	.word	0xe000ed04

0800f668 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08e      	sub	sp, #56	; 0x38
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f672:	2300      	movs	r3, #0
 800f674:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f67a:	2300      	movs	r3, #0
 800f67c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f680:	2b00      	cmp	r3, #0
 800f682:	d10a      	bne.n	800f69a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f688:	f383 8811 	msr	BASEPRI, r3
 800f68c:	f3bf 8f6f 	isb	sy
 800f690:	f3bf 8f4f 	dsb	sy
 800f694:	623b      	str	r3, [r7, #32]
}
 800f696:	bf00      	nop
 800f698:	e7fe      	b.n	800f698 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00a      	beq.n	800f6b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	61fb      	str	r3, [r7, #28]
}
 800f6b4:	bf00      	nop
 800f6b6:	e7fe      	b.n	800f6b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6b8:	f001 fa1a 	bl	8010af0 <xTaskGetSchedulerState>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d102      	bne.n	800f6c8 <xQueueSemaphoreTake+0x60>
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <xQueueSemaphoreTake+0x64>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e000      	b.n	800f6ce <xQueueSemaphoreTake+0x66>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10a      	bne.n	800f6e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d6:	f383 8811 	msr	BASEPRI, r3
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	61bb      	str	r3, [r7, #24]
}
 800f6e4:	bf00      	nop
 800f6e6:	e7fe      	b.n	800f6e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6e8:	f002 f94c 	bl	8011984 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d024      	beq.n	800f742 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	1e5a      	subs	r2, r3, #1
 800f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d104      	bne.n	800f712 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f708:	f001 fb80 	bl	8010e0c <pvTaskIncrementMutexHeldCount>
 800f70c:	4602      	mov	r2, r0
 800f70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f710:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f714:	691b      	ldr	r3, [r3, #16]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00f      	beq.n	800f73a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71c:	3310      	adds	r3, #16
 800f71e:	4618      	mov	r0, r3
 800f720:	f000 ffc4 	bl	80106ac <xTaskRemoveFromEventList>
 800f724:	4603      	mov	r3, r0
 800f726:	2b00      	cmp	r3, #0
 800f728:	d007      	beq.n	800f73a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f72a:	4b54      	ldr	r3, [pc, #336]	; (800f87c <xQueueSemaphoreTake+0x214>)
 800f72c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f730:	601a      	str	r2, [r3, #0]
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f73a:	f002 f953 	bl	80119e4 <vPortExitCritical>
				return pdPASS;
 800f73e:	2301      	movs	r3, #1
 800f740:	e097      	b.n	800f872 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d111      	bne.n	800f76c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00a      	beq.n	800f764 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	617b      	str	r3, [r7, #20]
}
 800f760:	bf00      	nop
 800f762:	e7fe      	b.n	800f762 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f764:	f002 f93e 	bl	80119e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f768:	2300      	movs	r3, #0
 800f76a:	e082      	b.n	800f872 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d106      	bne.n	800f780 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f772:	f107 030c 	add.w	r3, r7, #12
 800f776:	4618      	mov	r0, r3
 800f778:	f001 f85e 	bl	8010838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f77c:	2301      	movs	r3, #1
 800f77e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f780:	f002 f930 	bl	80119e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f784:	f000 fd0e 	bl	80101a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f788:	f002 f8fc 	bl	8011984 <vPortEnterCritical>
 800f78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f792:	b25b      	sxtb	r3, r3
 800f794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f798:	d103      	bne.n	800f7a2 <xQueueSemaphoreTake+0x13a>
 800f79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79c:	2200      	movs	r2, #0
 800f79e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7a8:	b25b      	sxtb	r3, r3
 800f7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ae:	d103      	bne.n	800f7b8 <xQueueSemaphoreTake+0x150>
 800f7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7b8:	f002 f914 	bl	80119e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7bc:	463a      	mov	r2, r7
 800f7be:	f107 030c 	add.w	r3, r7, #12
 800f7c2:	4611      	mov	r1, r2
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f001 f84d 	bl	8010864 <xTaskCheckForTimeOut>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d132      	bne.n	800f836 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7d2:	f000 f9f2 	bl	800fbba <prvIsQueueEmpty>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d026      	beq.n	800f82a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d109      	bne.n	800f7f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f7e4:	f002 f8ce 	bl	8011984 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f001 f99d 	bl	8010b2c <xTaskPriorityInherit>
 800f7f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f7f4:	f002 f8f6 	bl	80119e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fa:	3324      	adds	r3, #36	; 0x24
 800f7fc:	683a      	ldr	r2, [r7, #0]
 800f7fe:	4611      	mov	r1, r2
 800f800:	4618      	mov	r0, r3
 800f802:	f000 fec7 	bl	8010594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f808:	f000 f985 	bl	800fb16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f80c:	f000 fcd8 	bl	80101c0 <xTaskResumeAll>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	f47f af68 	bne.w	800f6e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f818:	4b18      	ldr	r3, [pc, #96]	; (800f87c <xQueueSemaphoreTake+0x214>)
 800f81a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f81e:	601a      	str	r2, [r3, #0]
 800f820:	f3bf 8f4f 	dsb	sy
 800f824:	f3bf 8f6f 	isb	sy
 800f828:	e75e      	b.n	800f6e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f82a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f82c:	f000 f973 	bl	800fb16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f830:	f000 fcc6 	bl	80101c0 <xTaskResumeAll>
 800f834:	e758      	b.n	800f6e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f838:	f000 f96d 	bl	800fb16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f83c:	f000 fcc0 	bl	80101c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f842:	f000 f9ba 	bl	800fbba <prvIsQueueEmpty>
 800f846:	4603      	mov	r3, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f43f af4d 	beq.w	800f6e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00d      	beq.n	800f870 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f854:	f002 f896 	bl	8011984 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f85a:	f000 f8b4 	bl	800f9c6 <prvGetDisinheritPriorityAfterTimeout>
 800f85e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f866:	4618      	mov	r0, r3
 800f868:	f001 fa36 	bl	8010cd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f86c:	f002 f8ba 	bl	80119e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f870:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f872:	4618      	mov	r0, r3
 800f874:	3738      	adds	r7, #56	; 0x38
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	e000ed04 	.word	0xe000ed04

0800f880 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b08e      	sub	sp, #56	; 0x38
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f892:	2b00      	cmp	r3, #0
 800f894:	d10a      	bne.n	800f8ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89a:	f383 8811 	msr	BASEPRI, r3
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	623b      	str	r3, [r7, #32]
}
 800f8a8:	bf00      	nop
 800f8aa:	e7fe      	b.n	800f8aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d103      	bne.n	800f8ba <xQueueReceiveFromISR+0x3a>
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d101      	bne.n	800f8be <xQueueReceiveFromISR+0x3e>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e000      	b.n	800f8c0 <xQueueReceiveFromISR+0x40>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d10a      	bne.n	800f8da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	61fb      	str	r3, [r7, #28]
}
 800f8d6:	bf00      	nop
 800f8d8:	e7fe      	b.n	800f8d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8da:	f002 f935 	bl	8011b48 <vPortValidateInterruptPriority>
	__asm volatile
 800f8de:	f3ef 8211 	mrs	r2, BASEPRI
 800f8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e6:	f383 8811 	msr	BASEPRI, r3
 800f8ea:	f3bf 8f6f 	isb	sy
 800f8ee:	f3bf 8f4f 	dsb	sy
 800f8f2:	61ba      	str	r2, [r7, #24]
 800f8f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f8f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f902:	2b00      	cmp	r3, #0
 800f904:	d02f      	beq.n	800f966 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f910:	68b9      	ldr	r1, [r7, #8]
 800f912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f914:	f000 f8d9 	bl	800faca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91a:	1e5a      	subs	r2, r3, #1
 800f91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f928:	d112      	bne.n	800f950 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92c:	691b      	ldr	r3, [r3, #16]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d016      	beq.n	800f960 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f934:	3310      	adds	r3, #16
 800f936:	4618      	mov	r0, r3
 800f938:	f000 feb8 	bl	80106ac <xTaskRemoveFromEventList>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00e      	beq.n	800f960 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d00b      	beq.n	800f960 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2201      	movs	r2, #1
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	e007      	b.n	800f960 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f954:	3301      	adds	r3, #1
 800f956:	b2db      	uxtb	r3, r3
 800f958:	b25a      	sxtb	r2, r3
 800f95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f960:	2301      	movs	r3, #1
 800f962:	637b      	str	r3, [r7, #52]	; 0x34
 800f964:	e001      	b.n	800f96a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f966:	2300      	movs	r3, #0
 800f968:	637b      	str	r3, [r7, #52]	; 0x34
 800f96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	f383 8811 	msr	BASEPRI, r3
}
 800f974:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3738      	adds	r7, #56	; 0x38
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d10a      	bne.n	800f9a8 <vQueueDelete+0x28>
	__asm volatile
 800f992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	60bb      	str	r3, [r7, #8]
}
 800f9a4:	bf00      	nop
 800f9a6:	e7fe      	b.n	800f9a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f000 f95f 	bl	800fc6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d102      	bne.n	800f9be <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f002 f9d5 	bl	8011d68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f9be:	bf00      	nop
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f9c6:	b480      	push	{r7}
 800f9c8:	b085      	sub	sp, #20
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d006      	beq.n	800f9e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f9e0:	60fb      	str	r3, [r7, #12]
 800f9e2:	e001      	b.n	800f9e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
	}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3714      	adds	r7, #20
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b086      	sub	sp, #24
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	60f8      	str	r0, [r7, #12]
 800f9fe:	60b9      	str	r1, [r7, #8]
 800fa00:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fa02:	2300      	movs	r3, #0
 800fa04:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d10d      	bne.n	800fa30 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d14d      	bne.n	800fab8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f001 f8eb 	bl	8010bfc <xTaskPriorityDisinherit>
 800fa26:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	609a      	str	r2, [r3, #8]
 800fa2e:	e043      	b.n	800fab8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d119      	bne.n	800fa6a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	6858      	ldr	r0, [r3, #4]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa3e:	461a      	mov	r2, r3
 800fa40:	68b9      	ldr	r1, [r7, #8]
 800fa42:	f019 fd53 	bl	80294ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa4e:	441a      	add	r2, r3
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	685a      	ldr	r2, [r3, #4]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	689b      	ldr	r3, [r3, #8]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d32b      	bcc.n	800fab8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	605a      	str	r2, [r3, #4]
 800fa68:	e026      	b.n	800fab8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	68d8      	ldr	r0, [r3, #12]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa72:	461a      	mov	r2, r3
 800fa74:	68b9      	ldr	r1, [r7, #8]
 800fa76:	f019 fd39 	bl	80294ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	68da      	ldr	r2, [r3, #12]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa82:	425b      	negs	r3, r3
 800fa84:	441a      	add	r2, r3
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	68da      	ldr	r2, [r3, #12]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d207      	bcs.n	800faa6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	689a      	ldr	r2, [r3, #8]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa9e:	425b      	negs	r3, r3
 800faa0:	441a      	add	r2, r3
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2b02      	cmp	r3, #2
 800faaa:	d105      	bne.n	800fab8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d002      	beq.n	800fab8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	3b01      	subs	r3, #1
 800fab6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	1c5a      	adds	r2, r3, #1
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fac0:	697b      	ldr	r3, [r7, #20]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3718      	adds	r7, #24
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b082      	sub	sp, #8
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
 800fad2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d018      	beq.n	800fb0e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	68da      	ldr	r2, [r3, #12]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fae4:	441a      	add	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	68da      	ldr	r2, [r3, #12]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	689b      	ldr	r3, [r3, #8]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d303      	bcc.n	800fafe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	68d9      	ldr	r1, [r3, #12]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb06:	461a      	mov	r2, r3
 800fb08:	6838      	ldr	r0, [r7, #0]
 800fb0a:	f019 fcef 	bl	80294ec <memcpy>
	}
}
 800fb0e:	bf00      	nop
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b084      	sub	sp, #16
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fb1e:	f001 ff31 	bl	8011984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb28:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb2a:	e011      	b.n	800fb50 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d012      	beq.n	800fb5a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3324      	adds	r3, #36	; 0x24
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f000 fdb7 	bl	80106ac <xTaskRemoveFromEventList>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d001      	beq.n	800fb48 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fb44:	f000 fef0 	bl	8010928 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fb48:	7bfb      	ldrb	r3, [r7, #15]
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	dce9      	bgt.n	800fb2c <prvUnlockQueue+0x16>
 800fb58:	e000      	b.n	800fb5c <prvUnlockQueue+0x46>
					break;
 800fb5a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	22ff      	movs	r2, #255	; 0xff
 800fb60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fb64:	f001 ff3e 	bl	80119e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fb68:	f001 ff0c 	bl	8011984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb72:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb74:	e011      	b.n	800fb9a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d012      	beq.n	800fba4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	3310      	adds	r3, #16
 800fb82:	4618      	mov	r0, r3
 800fb84:	f000 fd92 	bl	80106ac <xTaskRemoveFromEventList>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d001      	beq.n	800fb92 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fb8e:	f000 fecb 	bl	8010928 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fb92:	7bbb      	ldrb	r3, [r7, #14]
 800fb94:	3b01      	subs	r3, #1
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	dce9      	bgt.n	800fb76 <prvUnlockQueue+0x60>
 800fba2:	e000      	b.n	800fba6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fba4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	22ff      	movs	r2, #255	; 0xff
 800fbaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fbae:	f001 ff19 	bl	80119e4 <vPortExitCritical>
}
 800fbb2:	bf00      	nop
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b084      	sub	sp, #16
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbc2:	f001 fedf 	bl	8011984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d102      	bne.n	800fbd4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	60fb      	str	r3, [r7, #12]
 800fbd2:	e001      	b.n	800fbd8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbd8:	f001 ff04 	bl	80119e4 <vPortExitCritical>

	return xReturn;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b084      	sub	sp, #16
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbee:	f001 fec9 	bl	8011984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d102      	bne.n	800fc04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	60fb      	str	r3, [r7, #12]
 800fc02:	e001      	b.n	800fc08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fc04:	2300      	movs	r3, #0
 800fc06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc08:	f001 feec 	bl	80119e4 <vPortExitCritical>

	return xReturn;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
	...

0800fc18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc22:	2300      	movs	r3, #0
 800fc24:	60fb      	str	r3, [r7, #12]
 800fc26:	e014      	b.n	800fc52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fc28:	4a0f      	ldr	r2, [pc, #60]	; (800fc68 <vQueueAddToRegistry+0x50>)
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d10b      	bne.n	800fc4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fc34:	490c      	ldr	r1, [pc, #48]	; (800fc68 <vQueueAddToRegistry+0x50>)
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fc3e:	4a0a      	ldr	r2, [pc, #40]	; (800fc68 <vQueueAddToRegistry+0x50>)
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	00db      	lsls	r3, r3, #3
 800fc44:	4413      	add	r3, r2
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fc4a:	e006      	b.n	800fc5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	3301      	adds	r3, #1
 800fc50:	60fb      	str	r3, [r7, #12]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2b07      	cmp	r3, #7
 800fc56:	d9e7      	bls.n	800fc28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fc58:	bf00      	nop
 800fc5a:	bf00      	nop
 800fc5c:	3714      	adds	r7, #20
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop
 800fc68:	2000c604 	.word	0x2000c604

0800fc6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc74:	2300      	movs	r3, #0
 800fc76:	60fb      	str	r3, [r7, #12]
 800fc78:	e016      	b.n	800fca8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fc7a:	4a10      	ldr	r2, [pc, #64]	; (800fcbc <vQueueUnregisterQueue+0x50>)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	00db      	lsls	r3, r3, #3
 800fc80:	4413      	add	r3, r2
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d10b      	bne.n	800fca2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fc8a:	4a0c      	ldr	r2, [pc, #48]	; (800fcbc <vQueueUnregisterQueue+0x50>)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2100      	movs	r1, #0
 800fc90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fc94:	4a09      	ldr	r2, [pc, #36]	; (800fcbc <vQueueUnregisterQueue+0x50>)
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	00db      	lsls	r3, r3, #3
 800fc9a:	4413      	add	r3, r2
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	605a      	str	r2, [r3, #4]
				break;
 800fca0:	e006      	b.n	800fcb0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	3301      	adds	r3, #1
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b07      	cmp	r3, #7
 800fcac:	d9e5      	bls.n	800fc7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fcae:	bf00      	nop
 800fcb0:	bf00      	nop
 800fcb2:	3714      	adds	r7, #20
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr
 800fcbc:	2000c604 	.word	0x2000c604

0800fcc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b086      	sub	sp, #24
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fcd0:	f001 fe58 	bl	8011984 <vPortEnterCritical>
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fcda:	b25b      	sxtb	r3, r3
 800fcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fce0:	d103      	bne.n	800fcea <vQueueWaitForMessageRestricted+0x2a>
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	2200      	movs	r2, #0
 800fce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcf0:	b25b      	sxtb	r3, r3
 800fcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf6:	d103      	bne.n	800fd00 <vQueueWaitForMessageRestricted+0x40>
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd00:	f001 fe70 	bl	80119e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d106      	bne.n	800fd1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	3324      	adds	r3, #36	; 0x24
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	68b9      	ldr	r1, [r7, #8]
 800fd14:	4618      	mov	r0, r3
 800fd16:	f000 fc9d 	bl	8010654 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fd1a:	6978      	ldr	r0, [r7, #20]
 800fd1c:	f7ff fefb 	bl	800fb16 <prvUnlockQueue>
	}
 800fd20:	bf00      	nop
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b08e      	sub	sp, #56	; 0x38
 800fd2c:	af04      	add	r7, sp, #16
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d10a      	bne.n	800fd52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd40:	f383 8811 	msr	BASEPRI, r3
 800fd44:	f3bf 8f6f 	isb	sy
 800fd48:	f3bf 8f4f 	dsb	sy
 800fd4c:	623b      	str	r3, [r7, #32]
}
 800fd4e:	bf00      	nop
 800fd50:	e7fe      	b.n	800fd50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d10a      	bne.n	800fd6e <xTaskCreateStatic+0x46>
	__asm volatile
 800fd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd5c:	f383 8811 	msr	BASEPRI, r3
 800fd60:	f3bf 8f6f 	isb	sy
 800fd64:	f3bf 8f4f 	dsb	sy
 800fd68:	61fb      	str	r3, [r7, #28]
}
 800fd6a:	bf00      	nop
 800fd6c:	e7fe      	b.n	800fd6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fd6e:	2360      	movs	r3, #96	; 0x60
 800fd70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	2b60      	cmp	r3, #96	; 0x60
 800fd76:	d00a      	beq.n	800fd8e <xTaskCreateStatic+0x66>
	__asm volatile
 800fd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7c:	f383 8811 	msr	BASEPRI, r3
 800fd80:	f3bf 8f6f 	isb	sy
 800fd84:	f3bf 8f4f 	dsb	sy
 800fd88:	61bb      	str	r3, [r7, #24]
}
 800fd8a:	bf00      	nop
 800fd8c:	e7fe      	b.n	800fd8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fd8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d01e      	beq.n	800fdd4 <xTaskCreateStatic+0xac>
 800fd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d01b      	beq.n	800fdd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fda4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda8:	2202      	movs	r2, #2
 800fdaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fdae:	2300      	movs	r3, #0
 800fdb0:	9303      	str	r3, [sp, #12]
 800fdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb4:	9302      	str	r3, [sp, #8]
 800fdb6:	f107 0314 	add.w	r3, r7, #20
 800fdba:	9301      	str	r3, [sp, #4]
 800fdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	68b9      	ldr	r1, [r7, #8]
 800fdc6:	68f8      	ldr	r0, [r7, #12]
 800fdc8:	f000 f850 	bl	800fe6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fdcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdce:	f000 f8df 	bl	800ff90 <prvAddNewTaskToReadyList>
 800fdd2:	e001      	b.n	800fdd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fdd8:	697b      	ldr	r3, [r7, #20]
	}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3728      	adds	r7, #40	; 0x28
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b08c      	sub	sp, #48	; 0x30
 800fde6:	af04      	add	r7, sp, #16
 800fde8:	60f8      	str	r0, [r7, #12]
 800fdea:	60b9      	str	r1, [r7, #8]
 800fdec:	603b      	str	r3, [r7, #0]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fdf2:	88fb      	ldrh	r3, [r7, #6]
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f001 fee6 	bl	8011bc8 <pvPortMalloc>
 800fdfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d00e      	beq.n	800fe22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fe04:	2060      	movs	r0, #96	; 0x60
 800fe06:	f001 fedf 	bl	8011bc8 <pvPortMalloc>
 800fe0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d003      	beq.n	800fe1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	697a      	ldr	r2, [r7, #20]
 800fe16:	631a      	str	r2, [r3, #48]	; 0x30
 800fe18:	e005      	b.n	800fe26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fe1a:	6978      	ldr	r0, [r7, #20]
 800fe1c:	f001 ffa4 	bl	8011d68 <vPortFree>
 800fe20:	e001      	b.n	800fe26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fe22:	2300      	movs	r3, #0
 800fe24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d017      	beq.n	800fe5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fe34:	88fa      	ldrh	r2, [r7, #6]
 800fe36:	2300      	movs	r3, #0
 800fe38:	9303      	str	r3, [sp, #12]
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	9302      	str	r3, [sp, #8]
 800fe3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe40:	9301      	str	r3, [sp, #4]
 800fe42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	68b9      	ldr	r1, [r7, #8]
 800fe4a:	68f8      	ldr	r0, [r7, #12]
 800fe4c:	f000 f80e 	bl	800fe6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe50:	69f8      	ldr	r0, [r7, #28]
 800fe52:	f000 f89d 	bl	800ff90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fe56:	2301      	movs	r3, #1
 800fe58:	61bb      	str	r3, [r7, #24]
 800fe5a:	e002      	b.n	800fe62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fe5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fe62:	69bb      	ldr	r3, [r7, #24]
	}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3720      	adds	r7, #32
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b088      	sub	sp, #32
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	607a      	str	r2, [r7, #4]
 800fe78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	461a      	mov	r2, r3
 800fe84:	21a5      	movs	r1, #165	; 0xa5
 800fe86:	f019 fb59 	bl	802953c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fe8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fe94:	3b01      	subs	r3, #1
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	4413      	add	r3, r2
 800fe9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	f023 0307 	bic.w	r3, r3, #7
 800fea2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	f003 0307 	and.w	r3, r3, #7
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00a      	beq.n	800fec4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	617b      	str	r3, [r7, #20]
}
 800fec0:	bf00      	nop
 800fec2:	e7fe      	b.n	800fec2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d01f      	beq.n	800ff0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800feca:	2300      	movs	r3, #0
 800fecc:	61fb      	str	r3, [r7, #28]
 800fece:	e012      	b.n	800fef6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	4413      	add	r3, r2
 800fed6:	7819      	ldrb	r1, [r3, #0]
 800fed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	4413      	add	r3, r2
 800fede:	3334      	adds	r3, #52	; 0x34
 800fee0:	460a      	mov	r2, r1
 800fee2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fee4:	68ba      	ldr	r2, [r7, #8]
 800fee6:	69fb      	ldr	r3, [r7, #28]
 800fee8:	4413      	add	r3, r2
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d006      	beq.n	800fefe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	3301      	adds	r3, #1
 800fef4:	61fb      	str	r3, [r7, #28]
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	2b0f      	cmp	r3, #15
 800fefa:	d9e9      	bls.n	800fed0 <prvInitialiseNewTask+0x64>
 800fefc:	e000      	b.n	800ff00 <prvInitialiseNewTask+0x94>
			{
				break;
 800fefe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ff00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff02:	2200      	movs	r2, #0
 800ff04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ff08:	e003      	b.n	800ff12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ff12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff14:	2b37      	cmp	r3, #55	; 0x37
 800ff16:	d901      	bls.n	800ff1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ff18:	2337      	movs	r3, #55	; 0x37
 800ff1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ff1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ff22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ff28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff30:	3304      	adds	r3, #4
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fe fe56 	bl	800ebe4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ff38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff3a:	3318      	adds	r3, #24
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fe fe51 	bl	800ebe4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ff52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ff58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff60:	2200      	movs	r2, #0
 800ff62:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff66:	2200      	movs	r2, #0
 800ff68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ff6c:	683a      	ldr	r2, [r7, #0]
 800ff6e:	68f9      	ldr	r1, [r7, #12]
 800ff70:	69b8      	ldr	r0, [r7, #24]
 800ff72:	f001 fbdb 	bl	801172c <pxPortInitialiseStack>
 800ff76:	4602      	mov	r2, r0
 800ff78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ff7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d002      	beq.n	800ff88 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ff82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff88:	bf00      	nop
 800ff8a:	3720      	adds	r7, #32
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ff98:	f001 fcf4 	bl	8011984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ff9c:	4b2d      	ldr	r3, [pc, #180]	; (8010054 <prvAddNewTaskToReadyList+0xc4>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	4a2c      	ldr	r2, [pc, #176]	; (8010054 <prvAddNewTaskToReadyList+0xc4>)
 800ffa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ffa6:	4b2c      	ldr	r3, [pc, #176]	; (8010058 <prvAddNewTaskToReadyList+0xc8>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d109      	bne.n	800ffc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ffae:	4a2a      	ldr	r2, [pc, #168]	; (8010058 <prvAddNewTaskToReadyList+0xc8>)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ffb4:	4b27      	ldr	r3, [pc, #156]	; (8010054 <prvAddNewTaskToReadyList+0xc4>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d110      	bne.n	800ffde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ffbc:	f000 fcda 	bl	8010974 <prvInitialiseTaskLists>
 800ffc0:	e00d      	b.n	800ffde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ffc2:	4b26      	ldr	r3, [pc, #152]	; (801005c <prvAddNewTaskToReadyList+0xcc>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d109      	bne.n	800ffde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ffca:	4b23      	ldr	r3, [pc, #140]	; (8010058 <prvAddNewTaskToReadyList+0xc8>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d802      	bhi.n	800ffde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ffd8:	4a1f      	ldr	r2, [pc, #124]	; (8010058 <prvAddNewTaskToReadyList+0xc8>)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ffde:	4b20      	ldr	r3, [pc, #128]	; (8010060 <prvAddNewTaskToReadyList+0xd0>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	4a1e      	ldr	r2, [pc, #120]	; (8010060 <prvAddNewTaskToReadyList+0xd0>)
 800ffe6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ffe8:	4b1d      	ldr	r3, [pc, #116]	; (8010060 <prvAddNewTaskToReadyList+0xd0>)
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fff4:	4b1b      	ldr	r3, [pc, #108]	; (8010064 <prvAddNewTaskToReadyList+0xd4>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d903      	bls.n	8010004 <prvAddNewTaskToReadyList+0x74>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010000:	4a18      	ldr	r2, [pc, #96]	; (8010064 <prvAddNewTaskToReadyList+0xd4>)
 8010002:	6013      	str	r3, [r2, #0]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010008:	4613      	mov	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4413      	add	r3, r2
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	4a15      	ldr	r2, [pc, #84]	; (8010068 <prvAddNewTaskToReadyList+0xd8>)
 8010012:	441a      	add	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	3304      	adds	r3, #4
 8010018:	4619      	mov	r1, r3
 801001a:	4610      	mov	r0, r2
 801001c:	f7fe fdef 	bl	800ebfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010020:	f001 fce0 	bl	80119e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010024:	4b0d      	ldr	r3, [pc, #52]	; (801005c <prvAddNewTaskToReadyList+0xcc>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00e      	beq.n	801004a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801002c:	4b0a      	ldr	r3, [pc, #40]	; (8010058 <prvAddNewTaskToReadyList+0xc8>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010036:	429a      	cmp	r2, r3
 8010038:	d207      	bcs.n	801004a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801003a:	4b0c      	ldr	r3, [pc, #48]	; (801006c <prvAddNewTaskToReadyList+0xdc>)
 801003c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010040:	601a      	str	r2, [r3, #0]
 8010042:	f3bf 8f4f 	dsb	sy
 8010046:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801004a:	bf00      	nop
 801004c:	3708      	adds	r7, #8
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	20002318 	.word	0x20002318
 8010058:	20001e44 	.word	0x20001e44
 801005c:	20002324 	.word	0x20002324
 8010060:	20002334 	.word	0x20002334
 8010064:	20002320 	.word	0x20002320
 8010068:	20001e48 	.word	0x20001e48
 801006c:	e000ed04 	.word	0xe000ed04

08010070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010078:	2300      	movs	r3, #0
 801007a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d017      	beq.n	80100b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010082:	4b13      	ldr	r3, [pc, #76]	; (80100d0 <vTaskDelay+0x60>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d00a      	beq.n	80100a0 <vTaskDelay+0x30>
	__asm volatile
 801008a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008e:	f383 8811 	msr	BASEPRI, r3
 8010092:	f3bf 8f6f 	isb	sy
 8010096:	f3bf 8f4f 	dsb	sy
 801009a:	60bb      	str	r3, [r7, #8]
}
 801009c:	bf00      	nop
 801009e:	e7fe      	b.n	801009e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80100a0:	f000 f880 	bl	80101a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80100a4:	2100      	movs	r1, #0
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 fec4 	bl	8010e34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80100ac:	f000 f888 	bl	80101c0 <xTaskResumeAll>
 80100b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d107      	bne.n	80100c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80100b8:	4b06      	ldr	r3, [pc, #24]	; (80100d4 <vTaskDelay+0x64>)
 80100ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100be:	601a      	str	r2, [r3, #0]
 80100c0:	f3bf 8f4f 	dsb	sy
 80100c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100c8:	bf00      	nop
 80100ca:	3710      	adds	r7, #16
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	20002340 	.word	0x20002340
 80100d4:	e000ed04 	.word	0xe000ed04

080100d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b08a      	sub	sp, #40	; 0x28
 80100dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80100de:	2300      	movs	r3, #0
 80100e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80100e2:	2300      	movs	r3, #0
 80100e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80100e6:	463a      	mov	r2, r7
 80100e8:	1d39      	adds	r1, r7, #4
 80100ea:	f107 0308 	add.w	r3, r7, #8
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fe fb36 	bl	800e760 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80100f4:	6839      	ldr	r1, [r7, #0]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	9202      	str	r2, [sp, #8]
 80100fc:	9301      	str	r3, [sp, #4]
 80100fe:	2300      	movs	r3, #0
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	2300      	movs	r3, #0
 8010104:	460a      	mov	r2, r1
 8010106:	4921      	ldr	r1, [pc, #132]	; (801018c <vTaskStartScheduler+0xb4>)
 8010108:	4821      	ldr	r0, [pc, #132]	; (8010190 <vTaskStartScheduler+0xb8>)
 801010a:	f7ff fe0d 	bl	800fd28 <xTaskCreateStatic>
 801010e:	4603      	mov	r3, r0
 8010110:	4a20      	ldr	r2, [pc, #128]	; (8010194 <vTaskStartScheduler+0xbc>)
 8010112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010114:	4b1f      	ldr	r3, [pc, #124]	; (8010194 <vTaskStartScheduler+0xbc>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d002      	beq.n	8010122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801011c:	2301      	movs	r3, #1
 801011e:	617b      	str	r3, [r7, #20]
 8010120:	e001      	b.n	8010126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010122:	2300      	movs	r3, #0
 8010124:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	2b01      	cmp	r3, #1
 801012a:	d102      	bne.n	8010132 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801012c:	f000 fed6 	bl	8010edc <xTimerCreateTimerTask>
 8010130:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	2b01      	cmp	r3, #1
 8010136:	d116      	bne.n	8010166 <vTaskStartScheduler+0x8e>
	__asm volatile
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	f383 8811 	msr	BASEPRI, r3
 8010140:	f3bf 8f6f 	isb	sy
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	613b      	str	r3, [r7, #16]
}
 801014a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801014c:	4b12      	ldr	r3, [pc, #72]	; (8010198 <vTaskStartScheduler+0xc0>)
 801014e:	f04f 32ff 	mov.w	r2, #4294967295
 8010152:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010154:	4b11      	ldr	r3, [pc, #68]	; (801019c <vTaskStartScheduler+0xc4>)
 8010156:	2201      	movs	r2, #1
 8010158:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801015a:	4b11      	ldr	r3, [pc, #68]	; (80101a0 <vTaskStartScheduler+0xc8>)
 801015c:	2200      	movs	r2, #0
 801015e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010160:	f001 fb6e 	bl	8011840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010164:	e00e      	b.n	8010184 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016c:	d10a      	bne.n	8010184 <vTaskStartScheduler+0xac>
	__asm volatile
 801016e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010172:	f383 8811 	msr	BASEPRI, r3
 8010176:	f3bf 8f6f 	isb	sy
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	60fb      	str	r3, [r7, #12]
}
 8010180:	bf00      	nop
 8010182:	e7fe      	b.n	8010182 <vTaskStartScheduler+0xaa>
}
 8010184:	bf00      	nop
 8010186:	3718      	adds	r7, #24
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	0802d53c 	.word	0x0802d53c
 8010190:	08010941 	.word	0x08010941
 8010194:	2000233c 	.word	0x2000233c
 8010198:	20002338 	.word	0x20002338
 801019c:	20002324 	.word	0x20002324
 80101a0:	2000231c 	.word	0x2000231c

080101a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80101a4:	b480      	push	{r7}
 80101a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <vTaskSuspendAll+0x18>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	3301      	adds	r3, #1
 80101ae:	4a03      	ldr	r2, [pc, #12]	; (80101bc <vTaskSuspendAll+0x18>)
 80101b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80101b2:	bf00      	nop
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr
 80101bc:	20002340 	.word	0x20002340

080101c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b084      	sub	sp, #16
 80101c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80101c6:	2300      	movs	r3, #0
 80101c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80101ca:	2300      	movs	r3, #0
 80101cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80101ce:	4b42      	ldr	r3, [pc, #264]	; (80102d8 <xTaskResumeAll+0x118>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d10a      	bne.n	80101ec <xTaskResumeAll+0x2c>
	__asm volatile
 80101d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101da:	f383 8811 	msr	BASEPRI, r3
 80101de:	f3bf 8f6f 	isb	sy
 80101e2:	f3bf 8f4f 	dsb	sy
 80101e6:	603b      	str	r3, [r7, #0]
}
 80101e8:	bf00      	nop
 80101ea:	e7fe      	b.n	80101ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80101ec:	f001 fbca 	bl	8011984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80101f0:	4b39      	ldr	r3, [pc, #228]	; (80102d8 <xTaskResumeAll+0x118>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	3b01      	subs	r3, #1
 80101f6:	4a38      	ldr	r2, [pc, #224]	; (80102d8 <xTaskResumeAll+0x118>)
 80101f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101fa:	4b37      	ldr	r3, [pc, #220]	; (80102d8 <xTaskResumeAll+0x118>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d162      	bne.n	80102c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010202:	4b36      	ldr	r3, [pc, #216]	; (80102dc <xTaskResumeAll+0x11c>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d05e      	beq.n	80102c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801020a:	e02f      	b.n	801026c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801020c:	4b34      	ldr	r3, [pc, #208]	; (80102e0 <xTaskResumeAll+0x120>)
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	68db      	ldr	r3, [r3, #12]
 8010212:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	3318      	adds	r3, #24
 8010218:	4618      	mov	r0, r3
 801021a:	f7fe fd4d 	bl	800ecb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	3304      	adds	r3, #4
 8010222:	4618      	mov	r0, r3
 8010224:	f7fe fd48 	bl	800ecb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801022c:	4b2d      	ldr	r3, [pc, #180]	; (80102e4 <xTaskResumeAll+0x124>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	429a      	cmp	r2, r3
 8010232:	d903      	bls.n	801023c <xTaskResumeAll+0x7c>
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010238:	4a2a      	ldr	r2, [pc, #168]	; (80102e4 <xTaskResumeAll+0x124>)
 801023a:	6013      	str	r3, [r2, #0]
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010240:	4613      	mov	r3, r2
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4413      	add	r3, r2
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	4a27      	ldr	r2, [pc, #156]	; (80102e8 <xTaskResumeAll+0x128>)
 801024a:	441a      	add	r2, r3
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	3304      	adds	r3, #4
 8010250:	4619      	mov	r1, r3
 8010252:	4610      	mov	r0, r2
 8010254:	f7fe fcd3 	bl	800ebfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801025c:	4b23      	ldr	r3, [pc, #140]	; (80102ec <xTaskResumeAll+0x12c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010262:	429a      	cmp	r2, r3
 8010264:	d302      	bcc.n	801026c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010266:	4b22      	ldr	r3, [pc, #136]	; (80102f0 <xTaskResumeAll+0x130>)
 8010268:	2201      	movs	r2, #1
 801026a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801026c:	4b1c      	ldr	r3, [pc, #112]	; (80102e0 <xTaskResumeAll+0x120>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d1cb      	bne.n	801020c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d001      	beq.n	801027e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801027a:	f000 fc19 	bl	8010ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801027e:	4b1d      	ldr	r3, [pc, #116]	; (80102f4 <xTaskResumeAll+0x134>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d010      	beq.n	80102ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801028a:	f000 f847 	bl	801031c <xTaskIncrementTick>
 801028e:	4603      	mov	r3, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	d002      	beq.n	801029a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010294:	4b16      	ldr	r3, [pc, #88]	; (80102f0 <xTaskResumeAll+0x130>)
 8010296:	2201      	movs	r2, #1
 8010298:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	3b01      	subs	r3, #1
 801029e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d1f1      	bne.n	801028a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80102a6:	4b13      	ldr	r3, [pc, #76]	; (80102f4 <xTaskResumeAll+0x134>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80102ac:	4b10      	ldr	r3, [pc, #64]	; (80102f0 <xTaskResumeAll+0x130>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d009      	beq.n	80102c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80102b4:	2301      	movs	r3, #1
 80102b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80102b8:	4b0f      	ldr	r3, [pc, #60]	; (80102f8 <xTaskResumeAll+0x138>)
 80102ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102be:	601a      	str	r2, [r3, #0]
 80102c0:	f3bf 8f4f 	dsb	sy
 80102c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80102c8:	f001 fb8c 	bl	80119e4 <vPortExitCritical>

	return xAlreadyYielded;
 80102cc:	68bb      	ldr	r3, [r7, #8]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	20002340 	.word	0x20002340
 80102dc:	20002318 	.word	0x20002318
 80102e0:	200022d8 	.word	0x200022d8
 80102e4:	20002320 	.word	0x20002320
 80102e8:	20001e48 	.word	0x20001e48
 80102ec:	20001e44 	.word	0x20001e44
 80102f0:	2000232c 	.word	0x2000232c
 80102f4:	20002328 	.word	0x20002328
 80102f8:	e000ed04 	.word	0xe000ed04

080102fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010302:	4b05      	ldr	r3, [pc, #20]	; (8010318 <xTaskGetTickCount+0x1c>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010308:	687b      	ldr	r3, [r7, #4]
}
 801030a:	4618      	mov	r0, r3
 801030c:	370c      	adds	r7, #12
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop
 8010318:	2000231c 	.word	0x2000231c

0801031c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b086      	sub	sp, #24
 8010320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010322:	2300      	movs	r3, #0
 8010324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010326:	4b4f      	ldr	r3, [pc, #316]	; (8010464 <xTaskIncrementTick+0x148>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	f040 808f 	bne.w	801044e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010330:	4b4d      	ldr	r3, [pc, #308]	; (8010468 <xTaskIncrementTick+0x14c>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	3301      	adds	r3, #1
 8010336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010338:	4a4b      	ldr	r2, [pc, #300]	; (8010468 <xTaskIncrementTick+0x14c>)
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d120      	bne.n	8010386 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010344:	4b49      	ldr	r3, [pc, #292]	; (801046c <xTaskIncrementTick+0x150>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00a      	beq.n	8010364 <xTaskIncrementTick+0x48>
	__asm volatile
 801034e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	603b      	str	r3, [r7, #0]
}
 8010360:	bf00      	nop
 8010362:	e7fe      	b.n	8010362 <xTaskIncrementTick+0x46>
 8010364:	4b41      	ldr	r3, [pc, #260]	; (801046c <xTaskIncrementTick+0x150>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	60fb      	str	r3, [r7, #12]
 801036a:	4b41      	ldr	r3, [pc, #260]	; (8010470 <xTaskIncrementTick+0x154>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	4a3f      	ldr	r2, [pc, #252]	; (801046c <xTaskIncrementTick+0x150>)
 8010370:	6013      	str	r3, [r2, #0]
 8010372:	4a3f      	ldr	r2, [pc, #252]	; (8010470 <xTaskIncrementTick+0x154>)
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	6013      	str	r3, [r2, #0]
 8010378:	4b3e      	ldr	r3, [pc, #248]	; (8010474 <xTaskIncrementTick+0x158>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	3301      	adds	r3, #1
 801037e:	4a3d      	ldr	r2, [pc, #244]	; (8010474 <xTaskIncrementTick+0x158>)
 8010380:	6013      	str	r3, [r2, #0]
 8010382:	f000 fb95 	bl	8010ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010386:	4b3c      	ldr	r3, [pc, #240]	; (8010478 <xTaskIncrementTick+0x15c>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	693a      	ldr	r2, [r7, #16]
 801038c:	429a      	cmp	r2, r3
 801038e:	d349      	bcc.n	8010424 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010390:	4b36      	ldr	r3, [pc, #216]	; (801046c <xTaskIncrementTick+0x150>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d104      	bne.n	80103a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801039a:	4b37      	ldr	r3, [pc, #220]	; (8010478 <xTaskIncrementTick+0x15c>)
 801039c:	f04f 32ff 	mov.w	r2, #4294967295
 80103a0:	601a      	str	r2, [r3, #0]
					break;
 80103a2:	e03f      	b.n	8010424 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103a4:	4b31      	ldr	r3, [pc, #196]	; (801046c <xTaskIncrementTick+0x150>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	68db      	ldr	r3, [r3, #12]
 80103aa:	68db      	ldr	r3, [r3, #12]
 80103ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80103b4:	693a      	ldr	r2, [r7, #16]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d203      	bcs.n	80103c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80103bc:	4a2e      	ldr	r2, [pc, #184]	; (8010478 <xTaskIncrementTick+0x15c>)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80103c2:	e02f      	b.n	8010424 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	3304      	adds	r3, #4
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fe fc75 	bl	800ecb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d004      	beq.n	80103e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	3318      	adds	r3, #24
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fe fc6c 	bl	800ecb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e4:	4b25      	ldr	r3, [pc, #148]	; (801047c <xTaskIncrementTick+0x160>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d903      	bls.n	80103f4 <xTaskIncrementTick+0xd8>
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f0:	4a22      	ldr	r2, [pc, #136]	; (801047c <xTaskIncrementTick+0x160>)
 80103f2:	6013      	str	r3, [r2, #0]
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103f8:	4613      	mov	r3, r2
 80103fa:	009b      	lsls	r3, r3, #2
 80103fc:	4413      	add	r3, r2
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	4a1f      	ldr	r2, [pc, #124]	; (8010480 <xTaskIncrementTick+0x164>)
 8010402:	441a      	add	r2, r3
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	3304      	adds	r3, #4
 8010408:	4619      	mov	r1, r3
 801040a:	4610      	mov	r0, r2
 801040c:	f7fe fbf7 	bl	800ebfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010414:	4b1b      	ldr	r3, [pc, #108]	; (8010484 <xTaskIncrementTick+0x168>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801041a:	429a      	cmp	r2, r3
 801041c:	d3b8      	bcc.n	8010390 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801041e:	2301      	movs	r3, #1
 8010420:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010422:	e7b5      	b.n	8010390 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010424:	4b17      	ldr	r3, [pc, #92]	; (8010484 <xTaskIncrementTick+0x168>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801042a:	4915      	ldr	r1, [pc, #84]	; (8010480 <xTaskIncrementTick+0x164>)
 801042c:	4613      	mov	r3, r2
 801042e:	009b      	lsls	r3, r3, #2
 8010430:	4413      	add	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	440b      	add	r3, r1
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d901      	bls.n	8010440 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801043c:	2301      	movs	r3, #1
 801043e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010440:	4b11      	ldr	r3, [pc, #68]	; (8010488 <xTaskIncrementTick+0x16c>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d007      	beq.n	8010458 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010448:	2301      	movs	r3, #1
 801044a:	617b      	str	r3, [r7, #20]
 801044c:	e004      	b.n	8010458 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801044e:	4b0f      	ldr	r3, [pc, #60]	; (801048c <xTaskIncrementTick+0x170>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	3301      	adds	r3, #1
 8010454:	4a0d      	ldr	r2, [pc, #52]	; (801048c <xTaskIncrementTick+0x170>)
 8010456:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010458:	697b      	ldr	r3, [r7, #20]
}
 801045a:	4618      	mov	r0, r3
 801045c:	3718      	adds	r7, #24
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	20002340 	.word	0x20002340
 8010468:	2000231c 	.word	0x2000231c
 801046c:	200022d0 	.word	0x200022d0
 8010470:	200022d4 	.word	0x200022d4
 8010474:	20002330 	.word	0x20002330
 8010478:	20002338 	.word	0x20002338
 801047c:	20002320 	.word	0x20002320
 8010480:	20001e48 	.word	0x20001e48
 8010484:	20001e44 	.word	0x20001e44
 8010488:	2000232c 	.word	0x2000232c
 801048c:	20002328 	.word	0x20002328

08010490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010496:	4b3a      	ldr	r3, [pc, #232]	; (8010580 <vTaskSwitchContext+0xf0>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d003      	beq.n	80104a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801049e:	4b39      	ldr	r3, [pc, #228]	; (8010584 <vTaskSwitchContext+0xf4>)
 80104a0:	2201      	movs	r2, #1
 80104a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80104a4:	e068      	b.n	8010578 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80104a6:	4b37      	ldr	r3, [pc, #220]	; (8010584 <vTaskSwitchContext+0xf4>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80104ac:	4b36      	ldr	r3, [pc, #216]	; (8010588 <vTaskSwitchContext+0xf8>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104b2:	613b      	str	r3, [r7, #16]
 80104b4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80104b8:	60fb      	str	r3, [r7, #12]
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d111      	bne.n	80104e8 <vTaskSwitchContext+0x58>
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	3304      	adds	r3, #4
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	68fa      	ldr	r2, [r7, #12]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d10b      	bne.n	80104e8 <vTaskSwitchContext+0x58>
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	3308      	adds	r3, #8
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	68fa      	ldr	r2, [r7, #12]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d105      	bne.n	80104e8 <vTaskSwitchContext+0x58>
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	330c      	adds	r3, #12
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	68fa      	ldr	r2, [r7, #12]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d008      	beq.n	80104fa <vTaskSwitchContext+0x6a>
 80104e8:	4b27      	ldr	r3, [pc, #156]	; (8010588 <vTaskSwitchContext+0xf8>)
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	4b26      	ldr	r3, [pc, #152]	; (8010588 <vTaskSwitchContext+0xf8>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	3334      	adds	r3, #52	; 0x34
 80104f2:	4619      	mov	r1, r3
 80104f4:	4610      	mov	r0, r2
 80104f6:	f7f3 fd82 	bl	8003ffe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104fa:	4b24      	ldr	r3, [pc, #144]	; (801058c <vTaskSwitchContext+0xfc>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	617b      	str	r3, [r7, #20]
 8010500:	e010      	b.n	8010524 <vTaskSwitchContext+0x94>
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10a      	bne.n	801051e <vTaskSwitchContext+0x8e>
	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	607b      	str	r3, [r7, #4]
}
 801051a:	bf00      	nop
 801051c:	e7fe      	b.n	801051c <vTaskSwitchContext+0x8c>
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	3b01      	subs	r3, #1
 8010522:	617b      	str	r3, [r7, #20]
 8010524:	491a      	ldr	r1, [pc, #104]	; (8010590 <vTaskSwitchContext+0x100>)
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	4613      	mov	r3, r2
 801052a:	009b      	lsls	r3, r3, #2
 801052c:	4413      	add	r3, r2
 801052e:	009b      	lsls	r3, r3, #2
 8010530:	440b      	add	r3, r1
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d0e4      	beq.n	8010502 <vTaskSwitchContext+0x72>
 8010538:	697a      	ldr	r2, [r7, #20]
 801053a:	4613      	mov	r3, r2
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	4413      	add	r3, r2
 8010540:	009b      	lsls	r3, r3, #2
 8010542:	4a13      	ldr	r2, [pc, #76]	; (8010590 <vTaskSwitchContext+0x100>)
 8010544:	4413      	add	r3, r2
 8010546:	60bb      	str	r3, [r7, #8]
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	685a      	ldr	r2, [r3, #4]
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	605a      	str	r2, [r3, #4]
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	685a      	ldr	r2, [r3, #4]
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	3308      	adds	r3, #8
 801055a:	429a      	cmp	r2, r3
 801055c:	d104      	bne.n	8010568 <vTaskSwitchContext+0xd8>
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	685a      	ldr	r2, [r3, #4]
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	605a      	str	r2, [r3, #4]
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	4a06      	ldr	r2, [pc, #24]	; (8010588 <vTaskSwitchContext+0xf8>)
 8010570:	6013      	str	r3, [r2, #0]
 8010572:	4a06      	ldr	r2, [pc, #24]	; (801058c <vTaskSwitchContext+0xfc>)
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	6013      	str	r3, [r2, #0]
}
 8010578:	bf00      	nop
 801057a:	3718      	adds	r7, #24
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}
 8010580:	20002340 	.word	0x20002340
 8010584:	2000232c 	.word	0x2000232c
 8010588:	20001e44 	.word	0x20001e44
 801058c:	20002320 	.word	0x20002320
 8010590:	20001e48 	.word	0x20001e48

08010594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d10a      	bne.n	80105ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80105a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	60fb      	str	r3, [r7, #12]
}
 80105b6:	bf00      	nop
 80105b8:	e7fe      	b.n	80105b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80105ba:	4b07      	ldr	r3, [pc, #28]	; (80105d8 <vTaskPlaceOnEventList+0x44>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	3318      	adds	r3, #24
 80105c0:	4619      	mov	r1, r3
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7fe fb3f 	bl	800ec46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80105c8:	2101      	movs	r1, #1
 80105ca:	6838      	ldr	r0, [r7, #0]
 80105cc:	f000 fc32 	bl	8010e34 <prvAddCurrentTaskToDelayedList>
}
 80105d0:	bf00      	nop
 80105d2:	3710      	adds	r7, #16
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	20001e44 	.word	0x20001e44

080105dc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b086      	sub	sp, #24
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d10a      	bne.n	8010604 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80105ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f2:	f383 8811 	msr	BASEPRI, r3
 80105f6:	f3bf 8f6f 	isb	sy
 80105fa:	f3bf 8f4f 	dsb	sy
 80105fe:	617b      	str	r3, [r7, #20]
}
 8010600:	bf00      	nop
 8010602:	e7fe      	b.n	8010602 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8010604:	4b11      	ldr	r3, [pc, #68]	; (801064c <vTaskPlaceOnUnorderedEventList+0x70>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10a      	bne.n	8010622 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010610:	f383 8811 	msr	BASEPRI, r3
 8010614:	f3bf 8f6f 	isb	sy
 8010618:	f3bf 8f4f 	dsb	sy
 801061c:	613b      	str	r3, [r7, #16]
}
 801061e:	bf00      	nop
 8010620:	e7fe      	b.n	8010620 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010622:	4b0b      	ldr	r3, [pc, #44]	; (8010650 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	68ba      	ldr	r2, [r7, #8]
 8010628:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801062c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801062e:	4b08      	ldr	r3, [pc, #32]	; (8010650 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	3318      	adds	r3, #24
 8010634:	4619      	mov	r1, r3
 8010636:	68f8      	ldr	r0, [r7, #12]
 8010638:	f7fe fae1 	bl	800ebfe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801063c:	2101      	movs	r1, #1
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 fbf8 	bl	8010e34 <prvAddCurrentTaskToDelayedList>
}
 8010644:	bf00      	nop
 8010646:	3718      	adds	r7, #24
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	20002340 	.word	0x20002340
 8010650:	20001e44 	.word	0x20001e44

08010654 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010654:	b580      	push	{r7, lr}
 8010656:	b086      	sub	sp, #24
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d10a      	bne.n	801067c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066a:	f383 8811 	msr	BASEPRI, r3
 801066e:	f3bf 8f6f 	isb	sy
 8010672:	f3bf 8f4f 	dsb	sy
 8010676:	617b      	str	r3, [r7, #20]
}
 8010678:	bf00      	nop
 801067a:	e7fe      	b.n	801067a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801067c:	4b0a      	ldr	r3, [pc, #40]	; (80106a8 <vTaskPlaceOnEventListRestricted+0x54>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	3318      	adds	r3, #24
 8010682:	4619      	mov	r1, r3
 8010684:	68f8      	ldr	r0, [r7, #12]
 8010686:	f7fe faba 	bl	800ebfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d002      	beq.n	8010696 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010690:	f04f 33ff 	mov.w	r3, #4294967295
 8010694:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010696:	6879      	ldr	r1, [r7, #4]
 8010698:	68b8      	ldr	r0, [r7, #8]
 801069a:	f000 fbcb 	bl	8010e34 <prvAddCurrentTaskToDelayedList>
	}
 801069e:	bf00      	nop
 80106a0:	3718      	adds	r7, #24
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	20001e44 	.word	0x20001e44

080106ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d10a      	bne.n	80106d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c6:	f383 8811 	msr	BASEPRI, r3
 80106ca:	f3bf 8f6f 	isb	sy
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	60fb      	str	r3, [r7, #12]
}
 80106d4:	bf00      	nop
 80106d6:	e7fe      	b.n	80106d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	3318      	adds	r3, #24
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fe faeb 	bl	800ecb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106e2:	4b1e      	ldr	r3, [pc, #120]	; (801075c <xTaskRemoveFromEventList+0xb0>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d11d      	bne.n	8010726 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	3304      	adds	r3, #4
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fe fae2 	bl	800ecb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106f8:	4b19      	ldr	r3, [pc, #100]	; (8010760 <xTaskRemoveFromEventList+0xb4>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d903      	bls.n	8010708 <xTaskRemoveFromEventList+0x5c>
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010704:	4a16      	ldr	r2, [pc, #88]	; (8010760 <xTaskRemoveFromEventList+0xb4>)
 8010706:	6013      	str	r3, [r2, #0]
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801070c:	4613      	mov	r3, r2
 801070e:	009b      	lsls	r3, r3, #2
 8010710:	4413      	add	r3, r2
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	4a13      	ldr	r2, [pc, #76]	; (8010764 <xTaskRemoveFromEventList+0xb8>)
 8010716:	441a      	add	r2, r3
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	3304      	adds	r3, #4
 801071c:	4619      	mov	r1, r3
 801071e:	4610      	mov	r0, r2
 8010720:	f7fe fa6d 	bl	800ebfe <vListInsertEnd>
 8010724:	e005      	b.n	8010732 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	3318      	adds	r3, #24
 801072a:	4619      	mov	r1, r3
 801072c:	480e      	ldr	r0, [pc, #56]	; (8010768 <xTaskRemoveFromEventList+0xbc>)
 801072e:	f7fe fa66 	bl	800ebfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010736:	4b0d      	ldr	r3, [pc, #52]	; (801076c <xTaskRemoveFromEventList+0xc0>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801073c:	429a      	cmp	r2, r3
 801073e:	d905      	bls.n	801074c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010740:	2301      	movs	r3, #1
 8010742:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010744:	4b0a      	ldr	r3, [pc, #40]	; (8010770 <xTaskRemoveFromEventList+0xc4>)
 8010746:	2201      	movs	r2, #1
 8010748:	601a      	str	r2, [r3, #0]
 801074a:	e001      	b.n	8010750 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801074c:	2300      	movs	r3, #0
 801074e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010750:	697b      	ldr	r3, [r7, #20]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3718      	adds	r7, #24
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	20002340 	.word	0x20002340
 8010760:	20002320 	.word	0x20002320
 8010764:	20001e48 	.word	0x20001e48
 8010768:	200022d8 	.word	0x200022d8
 801076c:	20001e44 	.word	0x20001e44
 8010770:	2000232c 	.word	0x2000232c

08010774 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801077e:	4b29      	ldr	r3, [pc, #164]	; (8010824 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d10a      	bne.n	801079c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8010786:	f04f 0350 	mov.w	r3, #80	; 0x50
 801078a:	f383 8811 	msr	BASEPRI, r3
 801078e:	f3bf 8f6f 	isb	sy
 8010792:	f3bf 8f4f 	dsb	sy
 8010796:	613b      	str	r3, [r7, #16]
}
 8010798:	bf00      	nop
 801079a:	e7fe      	b.n	801079a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d10a      	bne.n	80107c8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80107b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b6:	f383 8811 	msr	BASEPRI, r3
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	f3bf 8f4f 	dsb	sy
 80107c2:	60fb      	str	r3, [r7, #12]
}
 80107c4:	bf00      	nop
 80107c6:	e7fe      	b.n	80107c6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f7fe fa75 	bl	800ecb8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	3304      	adds	r3, #4
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fe fa70 	bl	800ecb8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107dc:	4b12      	ldr	r3, [pc, #72]	; (8010828 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d903      	bls.n	80107ec <vTaskRemoveFromUnorderedEventList+0x78>
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107e8:	4a0f      	ldr	r2, [pc, #60]	; (8010828 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80107ea:	6013      	str	r3, [r2, #0]
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f0:	4613      	mov	r3, r2
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	4413      	add	r3, r2
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	4a0c      	ldr	r2, [pc, #48]	; (801082c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80107fa:	441a      	add	r2, r3
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	3304      	adds	r3, #4
 8010800:	4619      	mov	r1, r3
 8010802:	4610      	mov	r0, r2
 8010804:	f7fe f9fb 	bl	800ebfe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801080c:	4b08      	ldr	r3, [pc, #32]	; (8010830 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010812:	429a      	cmp	r2, r3
 8010814:	d902      	bls.n	801081c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8010816:	4b07      	ldr	r3, [pc, #28]	; (8010834 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8010818:	2201      	movs	r2, #1
 801081a:	601a      	str	r2, [r3, #0]
	}
}
 801081c:	bf00      	nop
 801081e:	3718      	adds	r7, #24
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	20002340 	.word	0x20002340
 8010828:	20002320 	.word	0x20002320
 801082c:	20001e48 	.word	0x20001e48
 8010830:	20001e44 	.word	0x20001e44
 8010834:	2000232c 	.word	0x2000232c

08010838 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010840:	4b06      	ldr	r3, [pc, #24]	; (801085c <vTaskInternalSetTimeOutState+0x24>)
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010848:	4b05      	ldr	r3, [pc, #20]	; (8010860 <vTaskInternalSetTimeOutState+0x28>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	605a      	str	r2, [r3, #4]
}
 8010850:	bf00      	nop
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr
 801085c:	20002330 	.word	0x20002330
 8010860:	2000231c 	.word	0x2000231c

08010864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b088      	sub	sp, #32
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d10a      	bne.n	801088a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010878:	f383 8811 	msr	BASEPRI, r3
 801087c:	f3bf 8f6f 	isb	sy
 8010880:	f3bf 8f4f 	dsb	sy
 8010884:	613b      	str	r3, [r7, #16]
}
 8010886:	bf00      	nop
 8010888:	e7fe      	b.n	8010888 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d10a      	bne.n	80108a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010894:	f383 8811 	msr	BASEPRI, r3
 8010898:	f3bf 8f6f 	isb	sy
 801089c:	f3bf 8f4f 	dsb	sy
 80108a0:	60fb      	str	r3, [r7, #12]
}
 80108a2:	bf00      	nop
 80108a4:	e7fe      	b.n	80108a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80108a6:	f001 f86d 	bl	8011984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80108aa:	4b1d      	ldr	r3, [pc, #116]	; (8010920 <xTaskCheckForTimeOut+0xbc>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	69ba      	ldr	r2, [r7, #24]
 80108b6:	1ad3      	subs	r3, r2, r3
 80108b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c2:	d102      	bne.n	80108ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80108c4:	2300      	movs	r3, #0
 80108c6:	61fb      	str	r3, [r7, #28]
 80108c8:	e023      	b.n	8010912 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	4b15      	ldr	r3, [pc, #84]	; (8010924 <xTaskCheckForTimeOut+0xc0>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d007      	beq.n	80108e6 <xTaskCheckForTimeOut+0x82>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	69ba      	ldr	r2, [r7, #24]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d302      	bcc.n	80108e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80108e0:	2301      	movs	r3, #1
 80108e2:	61fb      	str	r3, [r7, #28]
 80108e4:	e015      	b.n	8010912 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	697a      	ldr	r2, [r7, #20]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d20b      	bcs.n	8010908 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	1ad2      	subs	r2, r2, r3
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f7ff ff9b 	bl	8010838 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010902:	2300      	movs	r3, #0
 8010904:	61fb      	str	r3, [r7, #28]
 8010906:	e004      	b.n	8010912 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	2200      	movs	r2, #0
 801090c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801090e:	2301      	movs	r3, #1
 8010910:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010912:	f001 f867 	bl	80119e4 <vPortExitCritical>

	return xReturn;
 8010916:	69fb      	ldr	r3, [r7, #28]
}
 8010918:	4618      	mov	r0, r3
 801091a:	3720      	adds	r7, #32
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	2000231c 	.word	0x2000231c
 8010924:	20002330 	.word	0x20002330

08010928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010928:	b480      	push	{r7}
 801092a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801092c:	4b03      	ldr	r3, [pc, #12]	; (801093c <vTaskMissedYield+0x14>)
 801092e:	2201      	movs	r2, #1
 8010930:	601a      	str	r2, [r3, #0]
}
 8010932:	bf00      	nop
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	2000232c 	.word	0x2000232c

08010940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010948:	f000 f854 	bl	80109f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801094c:	4b07      	ldr	r3, [pc, #28]	; (801096c <prvIdleTask+0x2c>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d907      	bls.n	8010964 <prvIdleTask+0x24>
			{
				taskYIELD();
 8010954:	4b06      	ldr	r3, [pc, #24]	; (8010970 <prvIdleTask+0x30>)
 8010956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801095a:	601a      	str	r2, [r3, #0]
 801095c:	f3bf 8f4f 	dsb	sy
 8010960:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010964:	f7f3 fb44 	bl	8003ff0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010968:	e7ee      	b.n	8010948 <prvIdleTask+0x8>
 801096a:	bf00      	nop
 801096c:	20001e48 	.word	0x20001e48
 8010970:	e000ed04 	.word	0xe000ed04

08010974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801097a:	2300      	movs	r3, #0
 801097c:	607b      	str	r3, [r7, #4]
 801097e:	e00c      	b.n	801099a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	4613      	mov	r3, r2
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	4413      	add	r3, r2
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	4a12      	ldr	r2, [pc, #72]	; (80109d4 <prvInitialiseTaskLists+0x60>)
 801098c:	4413      	add	r3, r2
 801098e:	4618      	mov	r0, r3
 8010990:	f7fe f908 	bl	800eba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	3301      	adds	r3, #1
 8010998:	607b      	str	r3, [r7, #4]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2b37      	cmp	r3, #55	; 0x37
 801099e:	d9ef      	bls.n	8010980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80109a0:	480d      	ldr	r0, [pc, #52]	; (80109d8 <prvInitialiseTaskLists+0x64>)
 80109a2:	f7fe f8ff 	bl	800eba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80109a6:	480d      	ldr	r0, [pc, #52]	; (80109dc <prvInitialiseTaskLists+0x68>)
 80109a8:	f7fe f8fc 	bl	800eba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80109ac:	480c      	ldr	r0, [pc, #48]	; (80109e0 <prvInitialiseTaskLists+0x6c>)
 80109ae:	f7fe f8f9 	bl	800eba4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80109b2:	480c      	ldr	r0, [pc, #48]	; (80109e4 <prvInitialiseTaskLists+0x70>)
 80109b4:	f7fe f8f6 	bl	800eba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80109b8:	480b      	ldr	r0, [pc, #44]	; (80109e8 <prvInitialiseTaskLists+0x74>)
 80109ba:	f7fe f8f3 	bl	800eba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80109be:	4b0b      	ldr	r3, [pc, #44]	; (80109ec <prvInitialiseTaskLists+0x78>)
 80109c0:	4a05      	ldr	r2, [pc, #20]	; (80109d8 <prvInitialiseTaskLists+0x64>)
 80109c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80109c4:	4b0a      	ldr	r3, [pc, #40]	; (80109f0 <prvInitialiseTaskLists+0x7c>)
 80109c6:	4a05      	ldr	r2, [pc, #20]	; (80109dc <prvInitialiseTaskLists+0x68>)
 80109c8:	601a      	str	r2, [r3, #0]
}
 80109ca:	bf00      	nop
 80109cc:	3708      	adds	r7, #8
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	20001e48 	.word	0x20001e48
 80109d8:	200022a8 	.word	0x200022a8
 80109dc:	200022bc 	.word	0x200022bc
 80109e0:	200022d8 	.word	0x200022d8
 80109e4:	200022ec 	.word	0x200022ec
 80109e8:	20002304 	.word	0x20002304
 80109ec:	200022d0 	.word	0x200022d0
 80109f0:	200022d4 	.word	0x200022d4

080109f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80109fa:	e019      	b.n	8010a30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80109fc:	f000 ffc2 	bl	8011984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a00:	4b10      	ldr	r3, [pc, #64]	; (8010a44 <prvCheckTasksWaitingTermination+0x50>)
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fe f953 	bl	800ecb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a12:	4b0d      	ldr	r3, [pc, #52]	; (8010a48 <prvCheckTasksWaitingTermination+0x54>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	3b01      	subs	r3, #1
 8010a18:	4a0b      	ldr	r2, [pc, #44]	; (8010a48 <prvCheckTasksWaitingTermination+0x54>)
 8010a1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010a1c:	4b0b      	ldr	r3, [pc, #44]	; (8010a4c <prvCheckTasksWaitingTermination+0x58>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	3b01      	subs	r3, #1
 8010a22:	4a0a      	ldr	r2, [pc, #40]	; (8010a4c <prvCheckTasksWaitingTermination+0x58>)
 8010a24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010a26:	f000 ffdd 	bl	80119e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 f810 	bl	8010a50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a30:	4b06      	ldr	r3, [pc, #24]	; (8010a4c <prvCheckTasksWaitingTermination+0x58>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1e1      	bne.n	80109fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010a38:	bf00      	nop
 8010a3a:	bf00      	nop
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	200022ec 	.word	0x200022ec
 8010a48:	20002318 	.word	0x20002318
 8010a4c:	20002300 	.word	0x20002300

08010a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d108      	bne.n	8010a74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a66:	4618      	mov	r0, r3
 8010a68:	f001 f97e 	bl	8011d68 <vPortFree>
				vPortFree( pxTCB );
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f001 f97b 	bl	8011d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010a72:	e018      	b.n	8010aa6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d103      	bne.n	8010a86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f001 f972 	bl	8011d68 <vPortFree>
	}
 8010a84:	e00f      	b.n	8010aa6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	d00a      	beq.n	8010aa6 <prvDeleteTCB+0x56>
	__asm volatile
 8010a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	60fb      	str	r3, [r7, #12]
}
 8010aa2:	bf00      	nop
 8010aa4:	e7fe      	b.n	8010aa4 <prvDeleteTCB+0x54>
	}
 8010aa6:	bf00      	nop
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
	...

08010ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ab6:	4b0c      	ldr	r3, [pc, #48]	; (8010ae8 <prvResetNextTaskUnblockTime+0x38>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d104      	bne.n	8010aca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010ac0:	4b0a      	ldr	r3, [pc, #40]	; (8010aec <prvResetNextTaskUnblockTime+0x3c>)
 8010ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010ac8:	e008      	b.n	8010adc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010aca:	4b07      	ldr	r3, [pc, #28]	; (8010ae8 <prvResetNextTaskUnblockTime+0x38>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	4a04      	ldr	r2, [pc, #16]	; (8010aec <prvResetNextTaskUnblockTime+0x3c>)
 8010ada:	6013      	str	r3, [r2, #0]
}
 8010adc:	bf00      	nop
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr
 8010ae8:	200022d0 	.word	0x200022d0
 8010aec:	20002338 	.word	0x20002338

08010af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010af6:	4b0b      	ldr	r3, [pc, #44]	; (8010b24 <xTaskGetSchedulerState+0x34>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d102      	bne.n	8010b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010afe:	2301      	movs	r3, #1
 8010b00:	607b      	str	r3, [r7, #4]
 8010b02:	e008      	b.n	8010b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b04:	4b08      	ldr	r3, [pc, #32]	; (8010b28 <xTaskGetSchedulerState+0x38>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d102      	bne.n	8010b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	607b      	str	r3, [r7, #4]
 8010b10:	e001      	b.n	8010b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010b12:	2300      	movs	r3, #0
 8010b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010b16:	687b      	ldr	r3, [r7, #4]
	}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr
 8010b24:	20002324 	.word	0x20002324
 8010b28:	20002340 	.word	0x20002340

08010b2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d051      	beq.n	8010be6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b46:	4b2a      	ldr	r3, [pc, #168]	; (8010bf0 <xTaskPriorityInherit+0xc4>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d241      	bcs.n	8010bd4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	699b      	ldr	r3, [r3, #24]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	db06      	blt.n	8010b66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b58:	4b25      	ldr	r3, [pc, #148]	; (8010bf0 <xTaskPriorityInherit+0xc4>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	6959      	ldr	r1, [r3, #20]
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b6e:	4613      	mov	r3, r2
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	4413      	add	r3, r2
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	4a1f      	ldr	r2, [pc, #124]	; (8010bf4 <xTaskPriorityInherit+0xc8>)
 8010b78:	4413      	add	r3, r2
 8010b7a:	4299      	cmp	r1, r3
 8010b7c:	d122      	bne.n	8010bc4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	3304      	adds	r3, #4
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fe f898 	bl	800ecb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010b88:	4b19      	ldr	r3, [pc, #100]	; (8010bf0 <xTaskPriorityInherit+0xc4>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b96:	4b18      	ldr	r3, [pc, #96]	; (8010bf8 <xTaskPriorityInherit+0xcc>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d903      	bls.n	8010ba6 <xTaskPriorityInherit+0x7a>
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba2:	4a15      	ldr	r2, [pc, #84]	; (8010bf8 <xTaskPriorityInherit+0xcc>)
 8010ba4:	6013      	str	r3, [r2, #0]
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010baa:	4613      	mov	r3, r2
 8010bac:	009b      	lsls	r3, r3, #2
 8010bae:	4413      	add	r3, r2
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	4a10      	ldr	r2, [pc, #64]	; (8010bf4 <xTaskPriorityInherit+0xc8>)
 8010bb4:	441a      	add	r2, r3
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	3304      	adds	r3, #4
 8010bba:	4619      	mov	r1, r3
 8010bbc:	4610      	mov	r0, r2
 8010bbe:	f7fe f81e 	bl	800ebfe <vListInsertEnd>
 8010bc2:	e004      	b.n	8010bce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010bc4:	4b0a      	ldr	r3, [pc, #40]	; (8010bf0 <xTaskPriorityInherit+0xc4>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	60fb      	str	r3, [r7, #12]
 8010bd2:	e008      	b.n	8010be6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010bd8:	4b05      	ldr	r3, [pc, #20]	; (8010bf0 <xTaskPriorityInherit+0xc4>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d201      	bcs.n	8010be6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010be2:	2301      	movs	r3, #1
 8010be4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010be6:	68fb      	ldr	r3, [r7, #12]
	}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3710      	adds	r7, #16
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	20001e44 	.word	0x20001e44
 8010bf4:	20001e48 	.word	0x20001e48
 8010bf8:	20002320 	.word	0x20002320

08010bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b086      	sub	sp, #24
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d056      	beq.n	8010cc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010c12:	4b2e      	ldr	r3, [pc, #184]	; (8010ccc <xTaskPriorityDisinherit+0xd0>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	693a      	ldr	r2, [r7, #16]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d00a      	beq.n	8010c32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c20:	f383 8811 	msr	BASEPRI, r3
 8010c24:	f3bf 8f6f 	isb	sy
 8010c28:	f3bf 8f4f 	dsb	sy
 8010c2c:	60fb      	str	r3, [r7, #12]
}
 8010c2e:	bf00      	nop
 8010c30:	e7fe      	b.n	8010c30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d10a      	bne.n	8010c50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3e:	f383 8811 	msr	BASEPRI, r3
 8010c42:	f3bf 8f6f 	isb	sy
 8010c46:	f3bf 8f4f 	dsb	sy
 8010c4a:	60bb      	str	r3, [r7, #8]
}
 8010c4c:	bf00      	nop
 8010c4e:	e7fe      	b.n	8010c4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c54:	1e5a      	subs	r2, r3, #1
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d02c      	beq.n	8010cc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d128      	bne.n	8010cc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	3304      	adds	r3, #4
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7fe f820 	bl	800ecb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c90:	4b0f      	ldr	r3, [pc, #60]	; (8010cd0 <xTaskPriorityDisinherit+0xd4>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d903      	bls.n	8010ca0 <xTaskPriorityDisinherit+0xa4>
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c9c:	4a0c      	ldr	r2, [pc, #48]	; (8010cd0 <xTaskPriorityDisinherit+0xd4>)
 8010c9e:	6013      	str	r3, [r2, #0]
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	4413      	add	r3, r2
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	4a09      	ldr	r2, [pc, #36]	; (8010cd4 <xTaskPriorityDisinherit+0xd8>)
 8010cae:	441a      	add	r2, r3
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	4610      	mov	r0, r2
 8010cb8:	f7fd ffa1 	bl	800ebfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010cc0:	697b      	ldr	r3, [r7, #20]
	}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3718      	adds	r7, #24
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	20001e44 	.word	0x20001e44
 8010cd0:	20002320 	.word	0x20002320
 8010cd4:	20001e48 	.word	0x20001e48

08010cd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b088      	sub	sp, #32
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d06a      	beq.n	8010dc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010cf0:	69bb      	ldr	r3, [r7, #24]
 8010cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d10a      	bne.n	8010d0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfc:	f383 8811 	msr	BASEPRI, r3
 8010d00:	f3bf 8f6f 	isb	sy
 8010d04:	f3bf 8f4f 	dsb	sy
 8010d08:	60fb      	str	r3, [r7, #12]
}
 8010d0a:	bf00      	nop
 8010d0c:	e7fe      	b.n	8010d0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d12:	683a      	ldr	r2, [r7, #0]
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d902      	bls.n	8010d1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	61fb      	str	r3, [r7, #28]
 8010d1c:	e002      	b.n	8010d24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010d1e:	69bb      	ldr	r3, [r7, #24]
 8010d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d28:	69fa      	ldr	r2, [r7, #28]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d04b      	beq.n	8010dc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d32:	697a      	ldr	r2, [r7, #20]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d146      	bne.n	8010dc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010d38:	4b25      	ldr	r3, [pc, #148]	; (8010dd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	69ba      	ldr	r2, [r7, #24]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d10a      	bne.n	8010d58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d46:	f383 8811 	msr	BASEPRI, r3
 8010d4a:	f3bf 8f6f 	isb	sy
 8010d4e:	f3bf 8f4f 	dsb	sy
 8010d52:	60bb      	str	r3, [r7, #8]
}
 8010d54:	bf00      	nop
 8010d56:	e7fe      	b.n	8010d56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	69fa      	ldr	r2, [r7, #28]
 8010d62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	699b      	ldr	r3, [r3, #24]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	db04      	blt.n	8010d76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010d72:	69bb      	ldr	r3, [r7, #24]
 8010d74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010d76:	69bb      	ldr	r3, [r7, #24]
 8010d78:	6959      	ldr	r1, [r3, #20]
 8010d7a:	693a      	ldr	r2, [r7, #16]
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	009b      	lsls	r3, r3, #2
 8010d80:	4413      	add	r3, r2
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	4a13      	ldr	r2, [pc, #76]	; (8010dd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010d86:	4413      	add	r3, r2
 8010d88:	4299      	cmp	r1, r3
 8010d8a:	d11c      	bne.n	8010dc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	3304      	adds	r3, #4
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7fd ff91 	bl	800ecb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d9a:	4b0f      	ldr	r3, [pc, #60]	; (8010dd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d903      	bls.n	8010daa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da6:	4a0c      	ldr	r2, [pc, #48]	; (8010dd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010da8:	6013      	str	r3, [r2, #0]
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dae:	4613      	mov	r3, r2
 8010db0:	009b      	lsls	r3, r3, #2
 8010db2:	4413      	add	r3, r2
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	4a07      	ldr	r2, [pc, #28]	; (8010dd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010db8:	441a      	add	r2, r3
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	3304      	adds	r3, #4
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	4610      	mov	r0, r2
 8010dc2:	f7fd ff1c 	bl	800ebfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010dc6:	bf00      	nop
 8010dc8:	3720      	adds	r7, #32
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop
 8010dd0:	20001e44 	.word	0x20001e44
 8010dd4:	20001e48 	.word	0x20001e48
 8010dd8:	20002320 	.word	0x20002320

08010ddc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b083      	sub	sp, #12
 8010de0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8010de2:	4b09      	ldr	r3, [pc, #36]	; (8010e08 <uxTaskResetEventItemValue+0x2c>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	699b      	ldr	r3, [r3, #24]
 8010de8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dea:	4b07      	ldr	r3, [pc, #28]	; (8010e08 <uxTaskResetEventItemValue+0x2c>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010df0:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <uxTaskResetEventItemValue+0x2c>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010df8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8010dfa:	687b      	ldr	r3, [r7, #4]
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	370c      	adds	r7, #12
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr
 8010e08:	20001e44 	.word	0x20001e44

08010e0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010e0c:	b480      	push	{r7}
 8010e0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010e10:	4b07      	ldr	r3, [pc, #28]	; (8010e30 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d004      	beq.n	8010e22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010e18:	4b05      	ldr	r3, [pc, #20]	; (8010e30 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e1e:	3201      	adds	r2, #1
 8010e20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010e22:	4b03      	ldr	r3, [pc, #12]	; (8010e30 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e24:	681b      	ldr	r3, [r3, #0]
	}
 8010e26:	4618      	mov	r0, r3
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr
 8010e30:	20001e44 	.word	0x20001e44

08010e34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010e3e:	4b21      	ldr	r3, [pc, #132]	; (8010ec4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e44:	4b20      	ldr	r3, [pc, #128]	; (8010ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	3304      	adds	r3, #4
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7fd ff34 	bl	800ecb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e56:	d10a      	bne.n	8010e6e <prvAddCurrentTaskToDelayedList+0x3a>
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d007      	beq.n	8010e6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e5e:	4b1a      	ldr	r3, [pc, #104]	; (8010ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	3304      	adds	r3, #4
 8010e64:	4619      	mov	r1, r3
 8010e66:	4819      	ldr	r0, [pc, #100]	; (8010ecc <prvAddCurrentTaskToDelayedList+0x98>)
 8010e68:	f7fd fec9 	bl	800ebfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010e6c:	e026      	b.n	8010ebc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	4413      	add	r3, r2
 8010e74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010e76:	4b14      	ldr	r3, [pc, #80]	; (8010ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68ba      	ldr	r2, [r7, #8]
 8010e7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010e7e:	68ba      	ldr	r2, [r7, #8]
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d209      	bcs.n	8010e9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e86:	4b12      	ldr	r3, [pc, #72]	; (8010ed0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	4b0f      	ldr	r3, [pc, #60]	; (8010ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	3304      	adds	r3, #4
 8010e90:	4619      	mov	r1, r3
 8010e92:	4610      	mov	r0, r2
 8010e94:	f7fd fed7 	bl	800ec46 <vListInsert>
}
 8010e98:	e010      	b.n	8010ebc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e9a:	4b0e      	ldr	r3, [pc, #56]	; (8010ed4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	4b0a      	ldr	r3, [pc, #40]	; (8010ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	3304      	adds	r3, #4
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	4610      	mov	r0, r2
 8010ea8:	f7fd fecd 	bl	800ec46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010eac:	4b0a      	ldr	r3, [pc, #40]	; (8010ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d202      	bcs.n	8010ebc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010eb6:	4a08      	ldr	r2, [pc, #32]	; (8010ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	6013      	str	r3, [r2, #0]
}
 8010ebc:	bf00      	nop
 8010ebe:	3710      	adds	r7, #16
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	2000231c 	.word	0x2000231c
 8010ec8:	20001e44 	.word	0x20001e44
 8010ecc:	20002304 	.word	0x20002304
 8010ed0:	200022d4 	.word	0x200022d4
 8010ed4:	200022d0 	.word	0x200022d0
 8010ed8:	20002338 	.word	0x20002338

08010edc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b08a      	sub	sp, #40	; 0x28
 8010ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010ee6:	f000 fba1 	bl	801162c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010eea:	4b1c      	ldr	r3, [pc, #112]	; (8010f5c <xTimerCreateTimerTask+0x80>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d021      	beq.n	8010f36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010efa:	1d3a      	adds	r2, r7, #4
 8010efc:	f107 0108 	add.w	r1, r7, #8
 8010f00:	f107 030c 	add.w	r3, r7, #12
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fd fc45 	bl	800e794 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010f0a:	6879      	ldr	r1, [r7, #4]
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	68fa      	ldr	r2, [r7, #12]
 8010f10:	9202      	str	r2, [sp, #8]
 8010f12:	9301      	str	r3, [sp, #4]
 8010f14:	2302      	movs	r3, #2
 8010f16:	9300      	str	r3, [sp, #0]
 8010f18:	2300      	movs	r3, #0
 8010f1a:	460a      	mov	r2, r1
 8010f1c:	4910      	ldr	r1, [pc, #64]	; (8010f60 <xTimerCreateTimerTask+0x84>)
 8010f1e:	4811      	ldr	r0, [pc, #68]	; (8010f64 <xTimerCreateTimerTask+0x88>)
 8010f20:	f7fe ff02 	bl	800fd28 <xTaskCreateStatic>
 8010f24:	4603      	mov	r3, r0
 8010f26:	4a10      	ldr	r2, [pc, #64]	; (8010f68 <xTimerCreateTimerTask+0x8c>)
 8010f28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010f2a:	4b0f      	ldr	r3, [pc, #60]	; (8010f68 <xTimerCreateTimerTask+0x8c>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d001      	beq.n	8010f36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010f32:	2301      	movs	r3, #1
 8010f34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d10a      	bne.n	8010f52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
 8010f4c:	613b      	str	r3, [r7, #16]
}
 8010f4e:	bf00      	nop
 8010f50:	e7fe      	b.n	8010f50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010f52:	697b      	ldr	r3, [r7, #20]
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3718      	adds	r7, #24
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	20002374 	.word	0x20002374
 8010f60:	0802d544 	.word	0x0802d544
 8010f64:	080111d5 	.word	0x080111d5
 8010f68:	20002378 	.word	0x20002378

08010f6c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b088      	sub	sp, #32
 8010f70:	af02      	add	r7, sp, #8
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	607a      	str	r2, [r7, #4]
 8010f78:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010f7a:	202c      	movs	r0, #44	; 0x2c
 8010f7c:	f000 fe24 	bl	8011bc8 <pvPortMalloc>
 8010f80:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d00d      	beq.n	8010fa4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	9301      	str	r3, [sp, #4]
 8010f94:	6a3b      	ldr	r3, [r7, #32]
 8010f96:	9300      	str	r3, [sp, #0]
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	687a      	ldr	r2, [r7, #4]
 8010f9c:	68b9      	ldr	r1, [r7, #8]
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	f000 f843 	bl	801102a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010fa4:	697b      	ldr	r3, [r7, #20]
	}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b08a      	sub	sp, #40	; 0x28
 8010fb2:	af02      	add	r7, sp, #8
 8010fb4:	60f8      	str	r0, [r7, #12]
 8010fb6:	60b9      	str	r1, [r7, #8]
 8010fb8:	607a      	str	r2, [r7, #4]
 8010fba:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010fbc:	232c      	movs	r3, #44	; 0x2c
 8010fbe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	2b2c      	cmp	r3, #44	; 0x2c
 8010fc4:	d00a      	beq.n	8010fdc <xTimerCreateStatic+0x2e>
	__asm volatile
 8010fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fca:	f383 8811 	msr	BASEPRI, r3
 8010fce:	f3bf 8f6f 	isb	sy
 8010fd2:	f3bf 8f4f 	dsb	sy
 8010fd6:	61bb      	str	r3, [r7, #24]
}
 8010fd8:	bf00      	nop
 8010fda:	e7fe      	b.n	8010fda <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010fdc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8010fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d10a      	bne.n	8010ffa <xTimerCreateStatic+0x4c>
	__asm volatile
 8010fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe8:	f383 8811 	msr	BASEPRI, r3
 8010fec:	f3bf 8f6f 	isb	sy
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	617b      	str	r3, [r7, #20]
}
 8010ff6:	bf00      	nop
 8010ff8:	e7fe      	b.n	8010ff8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8010ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d00d      	beq.n	8011020 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011004:	69fb      	ldr	r3, [r7, #28]
 8011006:	2202      	movs	r2, #2
 8011008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	9301      	str	r3, [sp, #4]
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	68b9      	ldr	r1, [r7, #8]
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	f000 f805 	bl	801102a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011020:	69fb      	ldr	r3, [r7, #28]
	}
 8011022:	4618      	mov	r0, r3
 8011024:	3720      	adds	r7, #32
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b086      	sub	sp, #24
 801102e:	af00      	add	r7, sp, #0
 8011030:	60f8      	str	r0, [r7, #12]
 8011032:	60b9      	str	r1, [r7, #8]
 8011034:	607a      	str	r2, [r7, #4]
 8011036:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d10a      	bne.n	8011054 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011042:	f383 8811 	msr	BASEPRI, r3
 8011046:	f3bf 8f6f 	isb	sy
 801104a:	f3bf 8f4f 	dsb	sy
 801104e:	617b      	str	r3, [r7, #20]
}
 8011050:	bf00      	nop
 8011052:	e7fe      	b.n	8011052 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	2b00      	cmp	r3, #0
 8011058:	d01e      	beq.n	8011098 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801105a:	f000 fae7 	bl	801162c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011060:	68fa      	ldr	r2, [r7, #12]
 8011062:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011066:	68ba      	ldr	r2, [r7, #8]
 8011068:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106c:	683a      	ldr	r2, [r7, #0]
 801106e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011072:	6a3a      	ldr	r2, [r7, #32]
 8011074:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011078:	3304      	adds	r3, #4
 801107a:	4618      	mov	r0, r3
 801107c:	f7fd fdb2 	bl	800ebe4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d008      	beq.n	8011098 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801108c:	f043 0304 	orr.w	r3, r3, #4
 8011090:	b2da      	uxtb	r2, r3
 8011092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011098:	bf00      	nop
 801109a:	3718      	adds	r7, #24
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b08a      	sub	sp, #40	; 0x28
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	607a      	str	r2, [r7, #4]
 80110ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80110ae:	2300      	movs	r3, #0
 80110b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d10a      	bne.n	80110ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80110b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110bc:	f383 8811 	msr	BASEPRI, r3
 80110c0:	f3bf 8f6f 	isb	sy
 80110c4:	f3bf 8f4f 	dsb	sy
 80110c8:	623b      	str	r3, [r7, #32]
}
 80110ca:	bf00      	nop
 80110cc:	e7fe      	b.n	80110cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80110ce:	4b1a      	ldr	r3, [pc, #104]	; (8011138 <xTimerGenericCommand+0x98>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d02a      	beq.n	801112c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	2b05      	cmp	r3, #5
 80110e6:	dc18      	bgt.n	801111a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80110e8:	f7ff fd02 	bl	8010af0 <xTaskGetSchedulerState>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b02      	cmp	r3, #2
 80110f0:	d109      	bne.n	8011106 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80110f2:	4b11      	ldr	r3, [pc, #68]	; (8011138 <xTimerGenericCommand+0x98>)
 80110f4:	6818      	ldr	r0, [r3, #0]
 80110f6:	f107 0110 	add.w	r1, r7, #16
 80110fa:	2300      	movs	r3, #0
 80110fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110fe:	f7fd ffad 	bl	800f05c <xQueueGenericSend>
 8011102:	6278      	str	r0, [r7, #36]	; 0x24
 8011104:	e012      	b.n	801112c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011106:	4b0c      	ldr	r3, [pc, #48]	; (8011138 <xTimerGenericCommand+0x98>)
 8011108:	6818      	ldr	r0, [r3, #0]
 801110a:	f107 0110 	add.w	r1, r7, #16
 801110e:	2300      	movs	r3, #0
 8011110:	2200      	movs	r2, #0
 8011112:	f7fd ffa3 	bl	800f05c <xQueueGenericSend>
 8011116:	6278      	str	r0, [r7, #36]	; 0x24
 8011118:	e008      	b.n	801112c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801111a:	4b07      	ldr	r3, [pc, #28]	; (8011138 <xTimerGenericCommand+0x98>)
 801111c:	6818      	ldr	r0, [r3, #0]
 801111e:	f107 0110 	add.w	r1, r7, #16
 8011122:	2300      	movs	r3, #0
 8011124:	683a      	ldr	r2, [r7, #0]
 8011126:	f7fe f897 	bl	800f258 <xQueueGenericSendFromISR>
 801112a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801112e:	4618      	mov	r0, r3
 8011130:	3728      	adds	r7, #40	; 0x28
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	20002374 	.word	0x20002374

0801113c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b088      	sub	sp, #32
 8011140:	af02      	add	r7, sp, #8
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011146:	4b22      	ldr	r3, [pc, #136]	; (80111d0 <prvProcessExpiredTimer+0x94>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	3304      	adds	r3, #4
 8011154:	4618      	mov	r0, r3
 8011156:	f7fd fdaf 	bl	800ecb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011160:	f003 0304 	and.w	r3, r3, #4
 8011164:	2b00      	cmp	r3, #0
 8011166:	d022      	beq.n	80111ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	699a      	ldr	r2, [r3, #24]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	18d1      	adds	r1, r2, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	683a      	ldr	r2, [r7, #0]
 8011174:	6978      	ldr	r0, [r7, #20]
 8011176:	f000 f8d1 	bl	801131c <prvInsertTimerInActiveList>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d01f      	beq.n	80111c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011180:	2300      	movs	r3, #0
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	2300      	movs	r3, #0
 8011186:	687a      	ldr	r2, [r7, #4]
 8011188:	2100      	movs	r1, #0
 801118a:	6978      	ldr	r0, [r7, #20]
 801118c:	f7ff ff88 	bl	80110a0 <xTimerGenericCommand>
 8011190:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d113      	bne.n	80111c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119c:	f383 8811 	msr	BASEPRI, r3
 80111a0:	f3bf 8f6f 	isb	sy
 80111a4:	f3bf 8f4f 	dsb	sy
 80111a8:	60fb      	str	r3, [r7, #12]
}
 80111aa:	bf00      	nop
 80111ac:	e7fe      	b.n	80111ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111b4:	f023 0301 	bic.w	r3, r3, #1
 80111b8:	b2da      	uxtb	r2, r3
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	6a1b      	ldr	r3, [r3, #32]
 80111c4:	6978      	ldr	r0, [r7, #20]
 80111c6:	4798      	blx	r3
}
 80111c8:	bf00      	nop
 80111ca:	3718      	adds	r7, #24
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	2000236c 	.word	0x2000236c

080111d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b084      	sub	sp, #16
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80111dc:	f107 0308 	add.w	r3, r7, #8
 80111e0:	4618      	mov	r0, r3
 80111e2:	f000 f857 	bl	8011294 <prvGetNextExpireTime>
 80111e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	4619      	mov	r1, r3
 80111ec:	68f8      	ldr	r0, [r7, #12]
 80111ee:	f000 f803 	bl	80111f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80111f2:	f000 f8d5 	bl	80113a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80111f6:	e7f1      	b.n	80111dc <prvTimerTask+0x8>

080111f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011202:	f7fe ffcf 	bl	80101a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011206:	f107 0308 	add.w	r3, r7, #8
 801120a:	4618      	mov	r0, r3
 801120c:	f000 f866 	bl	80112dc <prvSampleTimeNow>
 8011210:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d130      	bne.n	801127a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d10a      	bne.n	8011234 <prvProcessTimerOrBlockTask+0x3c>
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	429a      	cmp	r2, r3
 8011224:	d806      	bhi.n	8011234 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011226:	f7fe ffcb 	bl	80101c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801122a:	68f9      	ldr	r1, [r7, #12]
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f7ff ff85 	bl	801113c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011232:	e024      	b.n	801127e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d008      	beq.n	801124c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801123a:	4b13      	ldr	r3, [pc, #76]	; (8011288 <prvProcessTimerOrBlockTask+0x90>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d101      	bne.n	8011248 <prvProcessTimerOrBlockTask+0x50>
 8011244:	2301      	movs	r3, #1
 8011246:	e000      	b.n	801124a <prvProcessTimerOrBlockTask+0x52>
 8011248:	2300      	movs	r3, #0
 801124a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801124c:	4b0f      	ldr	r3, [pc, #60]	; (801128c <prvProcessTimerOrBlockTask+0x94>)
 801124e:	6818      	ldr	r0, [r3, #0]
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	1ad3      	subs	r3, r2, r3
 8011256:	683a      	ldr	r2, [r7, #0]
 8011258:	4619      	mov	r1, r3
 801125a:	f7fe fd31 	bl	800fcc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801125e:	f7fe ffaf 	bl	80101c0 <xTaskResumeAll>
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d10a      	bne.n	801127e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011268:	4b09      	ldr	r3, [pc, #36]	; (8011290 <prvProcessTimerOrBlockTask+0x98>)
 801126a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801126e:	601a      	str	r2, [r3, #0]
 8011270:	f3bf 8f4f 	dsb	sy
 8011274:	f3bf 8f6f 	isb	sy
}
 8011278:	e001      	b.n	801127e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801127a:	f7fe ffa1 	bl	80101c0 <xTaskResumeAll>
}
 801127e:	bf00      	nop
 8011280:	3710      	adds	r7, #16
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	20002370 	.word	0x20002370
 801128c:	20002374 	.word	0x20002374
 8011290:	e000ed04 	.word	0xe000ed04

08011294 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801129c:	4b0e      	ldr	r3, [pc, #56]	; (80112d8 <prvGetNextExpireTime+0x44>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d101      	bne.n	80112aa <prvGetNextExpireTime+0x16>
 80112a6:	2201      	movs	r2, #1
 80112a8:	e000      	b.n	80112ac <prvGetNextExpireTime+0x18>
 80112aa:	2200      	movs	r2, #0
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d105      	bne.n	80112c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80112b8:	4b07      	ldr	r3, [pc, #28]	; (80112d8 <prvGetNextExpireTime+0x44>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	60fb      	str	r3, [r7, #12]
 80112c2:	e001      	b.n	80112c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80112c4:	2300      	movs	r3, #0
 80112c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80112c8:	68fb      	ldr	r3, [r7, #12]
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3714      	adds	r7, #20
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop
 80112d8:	2000236c 	.word	0x2000236c

080112dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b084      	sub	sp, #16
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80112e4:	f7ff f80a 	bl	80102fc <xTaskGetTickCount>
 80112e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80112ea:	4b0b      	ldr	r3, [pc, #44]	; (8011318 <prvSampleTimeNow+0x3c>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	68fa      	ldr	r2, [r7, #12]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d205      	bcs.n	8011300 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80112f4:	f000 f936 	bl	8011564 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2201      	movs	r2, #1
 80112fc:	601a      	str	r2, [r3, #0]
 80112fe:	e002      	b.n	8011306 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011306:	4a04      	ldr	r2, [pc, #16]	; (8011318 <prvSampleTimeNow+0x3c>)
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801130c:	68fb      	ldr	r3, [r7, #12]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	2000237c 	.word	0x2000237c

0801131c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b086      	sub	sp, #24
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
 8011328:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801132a:	2300      	movs	r3, #0
 801132c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	68ba      	ldr	r2, [r7, #8]
 8011332:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	68fa      	ldr	r2, [r7, #12]
 8011338:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801133a:	68ba      	ldr	r2, [r7, #8]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	429a      	cmp	r2, r3
 8011340:	d812      	bhi.n	8011368 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	1ad2      	subs	r2, r2, r3
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	699b      	ldr	r3, [r3, #24]
 801134c:	429a      	cmp	r2, r3
 801134e:	d302      	bcc.n	8011356 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011350:	2301      	movs	r3, #1
 8011352:	617b      	str	r3, [r7, #20]
 8011354:	e01b      	b.n	801138e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011356:	4b10      	ldr	r3, [pc, #64]	; (8011398 <prvInsertTimerInActiveList+0x7c>)
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	3304      	adds	r3, #4
 801135e:	4619      	mov	r1, r3
 8011360:	4610      	mov	r0, r2
 8011362:	f7fd fc70 	bl	800ec46 <vListInsert>
 8011366:	e012      	b.n	801138e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	429a      	cmp	r2, r3
 801136e:	d206      	bcs.n	801137e <prvInsertTimerInActiveList+0x62>
 8011370:	68ba      	ldr	r2, [r7, #8]
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	429a      	cmp	r2, r3
 8011376:	d302      	bcc.n	801137e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011378:	2301      	movs	r3, #1
 801137a:	617b      	str	r3, [r7, #20]
 801137c:	e007      	b.n	801138e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801137e:	4b07      	ldr	r3, [pc, #28]	; (801139c <prvInsertTimerInActiveList+0x80>)
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	3304      	adds	r3, #4
 8011386:	4619      	mov	r1, r3
 8011388:	4610      	mov	r0, r2
 801138a:	f7fd fc5c 	bl	800ec46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801138e:	697b      	ldr	r3, [r7, #20]
}
 8011390:	4618      	mov	r0, r3
 8011392:	3718      	adds	r7, #24
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	20002370 	.word	0x20002370
 801139c:	2000236c 	.word	0x2000236c

080113a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b08e      	sub	sp, #56	; 0x38
 80113a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80113a6:	e0ca      	b.n	801153e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	da18      	bge.n	80113e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80113ae:	1d3b      	adds	r3, r7, #4
 80113b0:	3304      	adds	r3, #4
 80113b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80113b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d10a      	bne.n	80113d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80113ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113be:	f383 8811 	msr	BASEPRI, r3
 80113c2:	f3bf 8f6f 	isb	sy
 80113c6:	f3bf 8f4f 	dsb	sy
 80113ca:	61fb      	str	r3, [r7, #28]
}
 80113cc:	bf00      	nop
 80113ce:	e7fe      	b.n	80113ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80113d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113d6:	6850      	ldr	r0, [r2, #4]
 80113d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113da:	6892      	ldr	r2, [r2, #8]
 80113dc:	4611      	mov	r1, r2
 80113de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	f2c0 80aa 	blt.w	801153c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80113ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ee:	695b      	ldr	r3, [r3, #20]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d004      	beq.n	80113fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80113f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f6:	3304      	adds	r3, #4
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fd fc5d 	bl	800ecb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80113fe:	463b      	mov	r3, r7
 8011400:	4618      	mov	r0, r3
 8011402:	f7ff ff6b 	bl	80112dc <prvSampleTimeNow>
 8011406:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2b09      	cmp	r3, #9
 801140c:	f200 8097 	bhi.w	801153e <prvProcessReceivedCommands+0x19e>
 8011410:	a201      	add	r2, pc, #4	; (adr r2, 8011418 <prvProcessReceivedCommands+0x78>)
 8011412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011416:	bf00      	nop
 8011418:	08011441 	.word	0x08011441
 801141c:	08011441 	.word	0x08011441
 8011420:	08011441 	.word	0x08011441
 8011424:	080114b5 	.word	0x080114b5
 8011428:	080114c9 	.word	0x080114c9
 801142c:	08011513 	.word	0x08011513
 8011430:	08011441 	.word	0x08011441
 8011434:	08011441 	.word	0x08011441
 8011438:	080114b5 	.word	0x080114b5
 801143c:	080114c9 	.word	0x080114c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011446:	f043 0301 	orr.w	r3, r3, #1
 801144a:	b2da      	uxtb	r2, r3
 801144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011452:	68ba      	ldr	r2, [r7, #8]
 8011454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011456:	699b      	ldr	r3, [r3, #24]
 8011458:	18d1      	adds	r1, r2, r3
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801145e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011460:	f7ff ff5c 	bl	801131c <prvInsertTimerInActiveList>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d069      	beq.n	801153e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146c:	6a1b      	ldr	r3, [r3, #32]
 801146e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011470:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011478:	f003 0304 	and.w	r3, r3, #4
 801147c:	2b00      	cmp	r3, #0
 801147e:	d05e      	beq.n	801153e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011480:	68ba      	ldr	r2, [r7, #8]
 8011482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011484:	699b      	ldr	r3, [r3, #24]
 8011486:	441a      	add	r2, r3
 8011488:	2300      	movs	r3, #0
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	2300      	movs	r3, #0
 801148e:	2100      	movs	r1, #0
 8011490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011492:	f7ff fe05 	bl	80110a0 <xTimerGenericCommand>
 8011496:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011498:	6a3b      	ldr	r3, [r7, #32]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d14f      	bne.n	801153e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a2:	f383 8811 	msr	BASEPRI, r3
 80114a6:	f3bf 8f6f 	isb	sy
 80114aa:	f3bf 8f4f 	dsb	sy
 80114ae:	61bb      	str	r3, [r7, #24]
}
 80114b0:	bf00      	nop
 80114b2:	e7fe      	b.n	80114b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80114b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114ba:	f023 0301 	bic.w	r3, r3, #1
 80114be:	b2da      	uxtb	r2, r3
 80114c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80114c6:	e03a      	b.n	801153e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80114c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114ce:	f043 0301 	orr.w	r3, r3, #1
 80114d2:	b2da      	uxtb	r2, r3
 80114d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80114da:	68ba      	ldr	r2, [r7, #8]
 80114dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80114e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e2:	699b      	ldr	r3, [r3, #24]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d10a      	bne.n	80114fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80114e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ec:	f383 8811 	msr	BASEPRI, r3
 80114f0:	f3bf 8f6f 	isb	sy
 80114f4:	f3bf 8f4f 	dsb	sy
 80114f8:	617b      	str	r3, [r7, #20]
}
 80114fa:	bf00      	nop
 80114fc:	e7fe      	b.n	80114fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80114fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011500:	699a      	ldr	r2, [r3, #24]
 8011502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011504:	18d1      	adds	r1, r2, r3
 8011506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801150a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801150c:	f7ff ff06 	bl	801131c <prvInsertTimerInActiveList>
					break;
 8011510:	e015      	b.n	801153e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011518:	f003 0302 	and.w	r3, r3, #2
 801151c:	2b00      	cmp	r3, #0
 801151e:	d103      	bne.n	8011528 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011522:	f000 fc21 	bl	8011d68 <vPortFree>
 8011526:	e00a      	b.n	801153e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801152e:	f023 0301 	bic.w	r3, r3, #1
 8011532:	b2da      	uxtb	r2, r3
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801153a:	e000      	b.n	801153e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801153c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801153e:	4b08      	ldr	r3, [pc, #32]	; (8011560 <prvProcessReceivedCommands+0x1c0>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	1d39      	adds	r1, r7, #4
 8011544:	2200      	movs	r2, #0
 8011546:	4618      	mov	r0, r3
 8011548:	f7fd ffae 	bl	800f4a8 <xQueueReceive>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	f47f af2a 	bne.w	80113a8 <prvProcessReceivedCommands+0x8>
	}
}
 8011554:	bf00      	nop
 8011556:	bf00      	nop
 8011558:	3730      	adds	r7, #48	; 0x30
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	20002374 	.word	0x20002374

08011564 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b088      	sub	sp, #32
 8011568:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801156a:	e048      	b.n	80115fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801156c:	4b2d      	ldr	r3, [pc, #180]	; (8011624 <prvSwitchTimerLists+0xc0>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011576:	4b2b      	ldr	r3, [pc, #172]	; (8011624 <prvSwitchTimerLists+0xc0>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	68db      	ldr	r3, [r3, #12]
 801157e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	3304      	adds	r3, #4
 8011584:	4618      	mov	r0, r3
 8011586:	f7fd fb97 	bl	800ecb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6a1b      	ldr	r3, [r3, #32]
 801158e:	68f8      	ldr	r0, [r7, #12]
 8011590:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011598:	f003 0304 	and.w	r3, r3, #4
 801159c:	2b00      	cmp	r3, #0
 801159e:	d02e      	beq.n	80115fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	699b      	ldr	r3, [r3, #24]
 80115a4:	693a      	ldr	r2, [r7, #16]
 80115a6:	4413      	add	r3, r2
 80115a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80115aa:	68ba      	ldr	r2, [r7, #8]
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d90e      	bls.n	80115d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	68ba      	ldr	r2, [r7, #8]
 80115b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	68fa      	ldr	r2, [r7, #12]
 80115bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115be:	4b19      	ldr	r3, [pc, #100]	; (8011624 <prvSwitchTimerLists+0xc0>)
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	3304      	adds	r3, #4
 80115c6:	4619      	mov	r1, r3
 80115c8:	4610      	mov	r0, r2
 80115ca:	f7fd fb3c 	bl	800ec46 <vListInsert>
 80115ce:	e016      	b.n	80115fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115d0:	2300      	movs	r3, #0
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	2300      	movs	r3, #0
 80115d6:	693a      	ldr	r2, [r7, #16]
 80115d8:	2100      	movs	r1, #0
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	f7ff fd60 	bl	80110a0 <xTimerGenericCommand>
 80115e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d10a      	bne.n	80115fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80115e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ec:	f383 8811 	msr	BASEPRI, r3
 80115f0:	f3bf 8f6f 	isb	sy
 80115f4:	f3bf 8f4f 	dsb	sy
 80115f8:	603b      	str	r3, [r7, #0]
}
 80115fa:	bf00      	nop
 80115fc:	e7fe      	b.n	80115fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80115fe:	4b09      	ldr	r3, [pc, #36]	; (8011624 <prvSwitchTimerLists+0xc0>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d1b1      	bne.n	801156c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011608:	4b06      	ldr	r3, [pc, #24]	; (8011624 <prvSwitchTimerLists+0xc0>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801160e:	4b06      	ldr	r3, [pc, #24]	; (8011628 <prvSwitchTimerLists+0xc4>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4a04      	ldr	r2, [pc, #16]	; (8011624 <prvSwitchTimerLists+0xc0>)
 8011614:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011616:	4a04      	ldr	r2, [pc, #16]	; (8011628 <prvSwitchTimerLists+0xc4>)
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	6013      	str	r3, [r2, #0]
}
 801161c:	bf00      	nop
 801161e:	3718      	adds	r7, #24
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	2000236c 	.word	0x2000236c
 8011628:	20002370 	.word	0x20002370

0801162c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011632:	f000 f9a7 	bl	8011984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011636:	4b15      	ldr	r3, [pc, #84]	; (801168c <prvCheckForValidListAndQueue+0x60>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d120      	bne.n	8011680 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801163e:	4814      	ldr	r0, [pc, #80]	; (8011690 <prvCheckForValidListAndQueue+0x64>)
 8011640:	f7fd fab0 	bl	800eba4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011644:	4813      	ldr	r0, [pc, #76]	; (8011694 <prvCheckForValidListAndQueue+0x68>)
 8011646:	f7fd faad 	bl	800eba4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801164a:	4b13      	ldr	r3, [pc, #76]	; (8011698 <prvCheckForValidListAndQueue+0x6c>)
 801164c:	4a10      	ldr	r2, [pc, #64]	; (8011690 <prvCheckForValidListAndQueue+0x64>)
 801164e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011650:	4b12      	ldr	r3, [pc, #72]	; (801169c <prvCheckForValidListAndQueue+0x70>)
 8011652:	4a10      	ldr	r2, [pc, #64]	; (8011694 <prvCheckForValidListAndQueue+0x68>)
 8011654:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011656:	2300      	movs	r3, #0
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	4b11      	ldr	r3, [pc, #68]	; (80116a0 <prvCheckForValidListAndQueue+0x74>)
 801165c:	4a11      	ldr	r2, [pc, #68]	; (80116a4 <prvCheckForValidListAndQueue+0x78>)
 801165e:	2110      	movs	r1, #16
 8011660:	200a      	movs	r0, #10
 8011662:	f7fd fbbb 	bl	800eddc <xQueueGenericCreateStatic>
 8011666:	4603      	mov	r3, r0
 8011668:	4a08      	ldr	r2, [pc, #32]	; (801168c <prvCheckForValidListAndQueue+0x60>)
 801166a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801166c:	4b07      	ldr	r3, [pc, #28]	; (801168c <prvCheckForValidListAndQueue+0x60>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d005      	beq.n	8011680 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011674:	4b05      	ldr	r3, [pc, #20]	; (801168c <prvCheckForValidListAndQueue+0x60>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	490b      	ldr	r1, [pc, #44]	; (80116a8 <prvCheckForValidListAndQueue+0x7c>)
 801167a:	4618      	mov	r0, r3
 801167c:	f7fe facc 	bl	800fc18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011680:	f000 f9b0 	bl	80119e4 <vPortExitCritical>
}
 8011684:	bf00      	nop
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	20002374 	.word	0x20002374
 8011690:	20002344 	.word	0x20002344
 8011694:	20002358 	.word	0x20002358
 8011698:	2000236c 	.word	0x2000236c
 801169c:	20002370 	.word	0x20002370
 80116a0:	20002420 	.word	0x20002420
 80116a4:	20002380 	.word	0x20002380
 80116a8:	0802d54c 	.word	0x0802d54c

080116ac <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b086      	sub	sp, #24
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d10a      	bne.n	80116d4 <pvTimerGetTimerID+0x28>
	__asm volatile
 80116be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	60fb      	str	r3, [r7, #12]
}
 80116d0:	bf00      	nop
 80116d2:	e7fe      	b.n	80116d2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80116d4:	f000 f956 	bl	8011984 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	69db      	ldr	r3, [r3, #28]
 80116dc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80116de:	f000 f981 	bl	80119e4 <vPortExitCritical>

	return pvReturn;
 80116e2:	693b      	ldr	r3, [r7, #16]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3718      	adds	r7, #24
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b08a      	sub	sp, #40	; 0x28
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	60f8      	str	r0, [r7, #12]
 80116f4:	60b9      	str	r1, [r7, #8]
 80116f6:	607a      	str	r2, [r7, #4]
 80116f8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80116fa:	f06f 0301 	mvn.w	r3, #1
 80116fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801170c:	4b06      	ldr	r3, [pc, #24]	; (8011728 <xTimerPendFunctionCallFromISR+0x3c>)
 801170e:	6818      	ldr	r0, [r3, #0]
 8011710:	f107 0114 	add.w	r1, r7, #20
 8011714:	2300      	movs	r3, #0
 8011716:	683a      	ldr	r2, [r7, #0]
 8011718:	f7fd fd9e 	bl	800f258 <xQueueGenericSendFromISR>
 801171c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011720:	4618      	mov	r0, r3
 8011722:	3728      	adds	r7, #40	; 0x28
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	20002374 	.word	0x20002374

0801172c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801172c:	b480      	push	{r7}
 801172e:	b085      	sub	sp, #20
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	3b04      	subs	r3, #4
 801173c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	3b04      	subs	r3, #4
 801174a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	f023 0201 	bic.w	r2, r3, #1
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	3b04      	subs	r3, #4
 801175a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801175c:	4a0c      	ldr	r2, [pc, #48]	; (8011790 <pxPortInitialiseStack+0x64>)
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	3b14      	subs	r3, #20
 8011766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011768:	687a      	ldr	r2, [r7, #4]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	3b04      	subs	r3, #4
 8011772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f06f 0202 	mvn.w	r2, #2
 801177a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	3b20      	subs	r3, #32
 8011780:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011782:	68fb      	ldr	r3, [r7, #12]
}
 8011784:	4618      	mov	r0, r3
 8011786:	3714      	adds	r7, #20
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	08011795 	.word	0x08011795

08011794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011794:	b480      	push	{r7}
 8011796:	b085      	sub	sp, #20
 8011798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801179a:	2300      	movs	r3, #0
 801179c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801179e:	4b12      	ldr	r3, [pc, #72]	; (80117e8 <prvTaskExitError+0x54>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a6:	d00a      	beq.n	80117be <prvTaskExitError+0x2a>
	__asm volatile
 80117a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ac:	f383 8811 	msr	BASEPRI, r3
 80117b0:	f3bf 8f6f 	isb	sy
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	60fb      	str	r3, [r7, #12]
}
 80117ba:	bf00      	nop
 80117bc:	e7fe      	b.n	80117bc <prvTaskExitError+0x28>
	__asm volatile
 80117be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c2:	f383 8811 	msr	BASEPRI, r3
 80117c6:	f3bf 8f6f 	isb	sy
 80117ca:	f3bf 8f4f 	dsb	sy
 80117ce:	60bb      	str	r3, [r7, #8]
}
 80117d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80117d2:	bf00      	nop
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d0fc      	beq.n	80117d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80117da:	bf00      	nop
 80117dc:	bf00      	nop
 80117de:	3714      	adds	r7, #20
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr
 80117e8:	20000088 	.word	0x20000088
 80117ec:	00000000 	.word	0x00000000

080117f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80117f0:	4b07      	ldr	r3, [pc, #28]	; (8011810 <pxCurrentTCBConst2>)
 80117f2:	6819      	ldr	r1, [r3, #0]
 80117f4:	6808      	ldr	r0, [r1, #0]
 80117f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117fa:	f380 8809 	msr	PSP, r0
 80117fe:	f3bf 8f6f 	isb	sy
 8011802:	f04f 0000 	mov.w	r0, #0
 8011806:	f380 8811 	msr	BASEPRI, r0
 801180a:	4770      	bx	lr
 801180c:	f3af 8000 	nop.w

08011810 <pxCurrentTCBConst2>:
 8011810:	20001e44 	.word	0x20001e44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011814:	bf00      	nop
 8011816:	bf00      	nop

08011818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011818:	4808      	ldr	r0, [pc, #32]	; (801183c <prvPortStartFirstTask+0x24>)
 801181a:	6800      	ldr	r0, [r0, #0]
 801181c:	6800      	ldr	r0, [r0, #0]
 801181e:	f380 8808 	msr	MSP, r0
 8011822:	f04f 0000 	mov.w	r0, #0
 8011826:	f380 8814 	msr	CONTROL, r0
 801182a:	b662      	cpsie	i
 801182c:	b661      	cpsie	f
 801182e:	f3bf 8f4f 	dsb	sy
 8011832:	f3bf 8f6f 	isb	sy
 8011836:	df00      	svc	0
 8011838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801183a:	bf00      	nop
 801183c:	e000ed08 	.word	0xe000ed08

08011840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b086      	sub	sp, #24
 8011844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011846:	4b46      	ldr	r3, [pc, #280]	; (8011960 <xPortStartScheduler+0x120>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	4a46      	ldr	r2, [pc, #280]	; (8011964 <xPortStartScheduler+0x124>)
 801184c:	4293      	cmp	r3, r2
 801184e:	d10a      	bne.n	8011866 <xPortStartScheduler+0x26>
	__asm volatile
 8011850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011854:	f383 8811 	msr	BASEPRI, r3
 8011858:	f3bf 8f6f 	isb	sy
 801185c:	f3bf 8f4f 	dsb	sy
 8011860:	613b      	str	r3, [r7, #16]
}
 8011862:	bf00      	nop
 8011864:	e7fe      	b.n	8011864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011866:	4b3e      	ldr	r3, [pc, #248]	; (8011960 <xPortStartScheduler+0x120>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	4a3f      	ldr	r2, [pc, #252]	; (8011968 <xPortStartScheduler+0x128>)
 801186c:	4293      	cmp	r3, r2
 801186e:	d10a      	bne.n	8011886 <xPortStartScheduler+0x46>
	__asm volatile
 8011870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011874:	f383 8811 	msr	BASEPRI, r3
 8011878:	f3bf 8f6f 	isb	sy
 801187c:	f3bf 8f4f 	dsb	sy
 8011880:	60fb      	str	r3, [r7, #12]
}
 8011882:	bf00      	nop
 8011884:	e7fe      	b.n	8011884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011886:	4b39      	ldr	r3, [pc, #228]	; (801196c <xPortStartScheduler+0x12c>)
 8011888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	b2db      	uxtb	r3, r3
 8011890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	22ff      	movs	r2, #255	; 0xff
 8011896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	b2db      	uxtb	r3, r3
 801189e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80118a0:	78fb      	ldrb	r3, [r7, #3]
 80118a2:	b2db      	uxtb	r3, r3
 80118a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80118a8:	b2da      	uxtb	r2, r3
 80118aa:	4b31      	ldr	r3, [pc, #196]	; (8011970 <xPortStartScheduler+0x130>)
 80118ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80118ae:	4b31      	ldr	r3, [pc, #196]	; (8011974 <xPortStartScheduler+0x134>)
 80118b0:	2207      	movs	r2, #7
 80118b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80118b4:	e009      	b.n	80118ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80118b6:	4b2f      	ldr	r3, [pc, #188]	; (8011974 <xPortStartScheduler+0x134>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	3b01      	subs	r3, #1
 80118bc:	4a2d      	ldr	r2, [pc, #180]	; (8011974 <xPortStartScheduler+0x134>)
 80118be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80118c0:	78fb      	ldrb	r3, [r7, #3]
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	005b      	lsls	r3, r3, #1
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80118ca:	78fb      	ldrb	r3, [r7, #3]
 80118cc:	b2db      	uxtb	r3, r3
 80118ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118d2:	2b80      	cmp	r3, #128	; 0x80
 80118d4:	d0ef      	beq.n	80118b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80118d6:	4b27      	ldr	r3, [pc, #156]	; (8011974 <xPortStartScheduler+0x134>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f1c3 0307 	rsb	r3, r3, #7
 80118de:	2b04      	cmp	r3, #4
 80118e0:	d00a      	beq.n	80118f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80118e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e6:	f383 8811 	msr	BASEPRI, r3
 80118ea:	f3bf 8f6f 	isb	sy
 80118ee:	f3bf 8f4f 	dsb	sy
 80118f2:	60bb      	str	r3, [r7, #8]
}
 80118f4:	bf00      	nop
 80118f6:	e7fe      	b.n	80118f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80118f8:	4b1e      	ldr	r3, [pc, #120]	; (8011974 <xPortStartScheduler+0x134>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	021b      	lsls	r3, r3, #8
 80118fe:	4a1d      	ldr	r2, [pc, #116]	; (8011974 <xPortStartScheduler+0x134>)
 8011900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011902:	4b1c      	ldr	r3, [pc, #112]	; (8011974 <xPortStartScheduler+0x134>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801190a:	4a1a      	ldr	r2, [pc, #104]	; (8011974 <xPortStartScheduler+0x134>)
 801190c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	b2da      	uxtb	r2, r3
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011916:	4b18      	ldr	r3, [pc, #96]	; (8011978 <xPortStartScheduler+0x138>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	4a17      	ldr	r2, [pc, #92]	; (8011978 <xPortStartScheduler+0x138>)
 801191c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011922:	4b15      	ldr	r3, [pc, #84]	; (8011978 <xPortStartScheduler+0x138>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4a14      	ldr	r2, [pc, #80]	; (8011978 <xPortStartScheduler+0x138>)
 8011928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801192c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801192e:	f000 f8dd 	bl	8011aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011932:	4b12      	ldr	r3, [pc, #72]	; (801197c <xPortStartScheduler+0x13c>)
 8011934:	2200      	movs	r2, #0
 8011936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011938:	f000 f8fc 	bl	8011b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801193c:	4b10      	ldr	r3, [pc, #64]	; (8011980 <xPortStartScheduler+0x140>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	4a0f      	ldr	r2, [pc, #60]	; (8011980 <xPortStartScheduler+0x140>)
 8011942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011948:	f7ff ff66 	bl	8011818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801194c:	f7fe fda0 	bl	8010490 <vTaskSwitchContext>
	prvTaskExitError();
 8011950:	f7ff ff20 	bl	8011794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011954:	2300      	movs	r3, #0
}
 8011956:	4618      	mov	r0, r3
 8011958:	3718      	adds	r7, #24
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	e000ed00 	.word	0xe000ed00
 8011964:	410fc271 	.word	0x410fc271
 8011968:	410fc270 	.word	0x410fc270
 801196c:	e000e400 	.word	0xe000e400
 8011970:	20002470 	.word	0x20002470
 8011974:	20002474 	.word	0x20002474
 8011978:	e000ed20 	.word	0xe000ed20
 801197c:	20000088 	.word	0x20000088
 8011980:	e000ef34 	.word	0xe000ef34

08011984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
	__asm volatile
 801198a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198e:	f383 8811 	msr	BASEPRI, r3
 8011992:	f3bf 8f6f 	isb	sy
 8011996:	f3bf 8f4f 	dsb	sy
 801199a:	607b      	str	r3, [r7, #4]
}
 801199c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801199e:	4b0f      	ldr	r3, [pc, #60]	; (80119dc <vPortEnterCritical+0x58>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	3301      	adds	r3, #1
 80119a4:	4a0d      	ldr	r2, [pc, #52]	; (80119dc <vPortEnterCritical+0x58>)
 80119a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80119a8:	4b0c      	ldr	r3, [pc, #48]	; (80119dc <vPortEnterCritical+0x58>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d10f      	bne.n	80119d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80119b0:	4b0b      	ldr	r3, [pc, #44]	; (80119e0 <vPortEnterCritical+0x5c>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d00a      	beq.n	80119d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80119ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119be:	f383 8811 	msr	BASEPRI, r3
 80119c2:	f3bf 8f6f 	isb	sy
 80119c6:	f3bf 8f4f 	dsb	sy
 80119ca:	603b      	str	r3, [r7, #0]
}
 80119cc:	bf00      	nop
 80119ce:	e7fe      	b.n	80119ce <vPortEnterCritical+0x4a>
	}
}
 80119d0:	bf00      	nop
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr
 80119dc:	20000088 	.word	0x20000088
 80119e0:	e000ed04 	.word	0xe000ed04

080119e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80119e4:	b480      	push	{r7}
 80119e6:	b083      	sub	sp, #12
 80119e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80119ea:	4b12      	ldr	r3, [pc, #72]	; (8011a34 <vPortExitCritical+0x50>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d10a      	bne.n	8011a08 <vPortExitCritical+0x24>
	__asm volatile
 80119f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f6:	f383 8811 	msr	BASEPRI, r3
 80119fa:	f3bf 8f6f 	isb	sy
 80119fe:	f3bf 8f4f 	dsb	sy
 8011a02:	607b      	str	r3, [r7, #4]
}
 8011a04:	bf00      	nop
 8011a06:	e7fe      	b.n	8011a06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011a08:	4b0a      	ldr	r3, [pc, #40]	; (8011a34 <vPortExitCritical+0x50>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	3b01      	subs	r3, #1
 8011a0e:	4a09      	ldr	r2, [pc, #36]	; (8011a34 <vPortExitCritical+0x50>)
 8011a10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a12:	4b08      	ldr	r3, [pc, #32]	; (8011a34 <vPortExitCritical+0x50>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d105      	bne.n	8011a26 <vPortExitCritical+0x42>
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	f383 8811 	msr	BASEPRI, r3
}
 8011a24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011a26:	bf00      	nop
 8011a28:	370c      	adds	r7, #12
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop
 8011a34:	20000088 	.word	0x20000088
	...

08011a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011a40:	f3ef 8009 	mrs	r0, PSP
 8011a44:	f3bf 8f6f 	isb	sy
 8011a48:	4b15      	ldr	r3, [pc, #84]	; (8011aa0 <pxCurrentTCBConst>)
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	f01e 0f10 	tst.w	lr, #16
 8011a50:	bf08      	it	eq
 8011a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a5a:	6010      	str	r0, [r2, #0]
 8011a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011a64:	f380 8811 	msr	BASEPRI, r0
 8011a68:	f3bf 8f4f 	dsb	sy
 8011a6c:	f3bf 8f6f 	isb	sy
 8011a70:	f7fe fd0e 	bl	8010490 <vTaskSwitchContext>
 8011a74:	f04f 0000 	mov.w	r0, #0
 8011a78:	f380 8811 	msr	BASEPRI, r0
 8011a7c:	bc09      	pop	{r0, r3}
 8011a7e:	6819      	ldr	r1, [r3, #0]
 8011a80:	6808      	ldr	r0, [r1, #0]
 8011a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a86:	f01e 0f10 	tst.w	lr, #16
 8011a8a:	bf08      	it	eq
 8011a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011a90:	f380 8809 	msr	PSP, r0
 8011a94:	f3bf 8f6f 	isb	sy
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop
 8011a9c:	f3af 8000 	nop.w

08011aa0 <pxCurrentTCBConst>:
 8011aa0:	20001e44 	.word	0x20001e44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011aa4:	bf00      	nop
 8011aa6:	bf00      	nop

08011aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
	__asm volatile
 8011aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab2:	f383 8811 	msr	BASEPRI, r3
 8011ab6:	f3bf 8f6f 	isb	sy
 8011aba:	f3bf 8f4f 	dsb	sy
 8011abe:	607b      	str	r3, [r7, #4]
}
 8011ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011ac2:	f7fe fc2b 	bl	801031c <xTaskIncrementTick>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d003      	beq.n	8011ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011acc:	4b06      	ldr	r3, [pc, #24]	; (8011ae8 <xPortSysTickHandler+0x40>)
 8011ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ad2:	601a      	str	r2, [r3, #0]
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	f383 8811 	msr	BASEPRI, r3
}
 8011ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011ae0:	bf00      	nop
 8011ae2:	3708      	adds	r7, #8
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	e000ed04 	.word	0xe000ed04

08011aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011aec:	b480      	push	{r7}
 8011aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011af0:	4b0b      	ldr	r3, [pc, #44]	; (8011b20 <vPortSetupTimerInterrupt+0x34>)
 8011af2:	2200      	movs	r2, #0
 8011af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011af6:	4b0b      	ldr	r3, [pc, #44]	; (8011b24 <vPortSetupTimerInterrupt+0x38>)
 8011af8:	2200      	movs	r2, #0
 8011afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011afc:	4b0a      	ldr	r3, [pc, #40]	; (8011b28 <vPortSetupTimerInterrupt+0x3c>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	4a0a      	ldr	r2, [pc, #40]	; (8011b2c <vPortSetupTimerInterrupt+0x40>)
 8011b02:	fba2 2303 	umull	r2, r3, r2, r3
 8011b06:	099b      	lsrs	r3, r3, #6
 8011b08:	4a09      	ldr	r2, [pc, #36]	; (8011b30 <vPortSetupTimerInterrupt+0x44>)
 8011b0a:	3b01      	subs	r3, #1
 8011b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b0e:	4b04      	ldr	r3, [pc, #16]	; (8011b20 <vPortSetupTimerInterrupt+0x34>)
 8011b10:	2207      	movs	r2, #7
 8011b12:	601a      	str	r2, [r3, #0]
}
 8011b14:	bf00      	nop
 8011b16:	46bd      	mov	sp, r7
 8011b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop
 8011b20:	e000e010 	.word	0xe000e010
 8011b24:	e000e018 	.word	0xe000e018
 8011b28:	20000014 	.word	0x20000014
 8011b2c:	10624dd3 	.word	0x10624dd3
 8011b30:	e000e014 	.word	0xe000e014

08011b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011b44 <vPortEnableVFP+0x10>
 8011b38:	6801      	ldr	r1, [r0, #0]
 8011b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011b3e:	6001      	str	r1, [r0, #0]
 8011b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011b42:	bf00      	nop
 8011b44:	e000ed88 	.word	0xe000ed88

08011b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011b48:	b480      	push	{r7}
 8011b4a:	b085      	sub	sp, #20
 8011b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011b4e:	f3ef 8305 	mrs	r3, IPSR
 8011b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2b0f      	cmp	r3, #15
 8011b58:	d914      	bls.n	8011b84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011b5a:	4a17      	ldr	r2, [pc, #92]	; (8011bb8 <vPortValidateInterruptPriority+0x70>)
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	4413      	add	r3, r2
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011b64:	4b15      	ldr	r3, [pc, #84]	; (8011bbc <vPortValidateInterruptPriority+0x74>)
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	7afa      	ldrb	r2, [r7, #11]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d20a      	bcs.n	8011b84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b72:	f383 8811 	msr	BASEPRI, r3
 8011b76:	f3bf 8f6f 	isb	sy
 8011b7a:	f3bf 8f4f 	dsb	sy
 8011b7e:	607b      	str	r3, [r7, #4]
}
 8011b80:	bf00      	nop
 8011b82:	e7fe      	b.n	8011b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011b84:	4b0e      	ldr	r3, [pc, #56]	; (8011bc0 <vPortValidateInterruptPriority+0x78>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011b8c:	4b0d      	ldr	r3, [pc, #52]	; (8011bc4 <vPortValidateInterruptPriority+0x7c>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d90a      	bls.n	8011baa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b98:	f383 8811 	msr	BASEPRI, r3
 8011b9c:	f3bf 8f6f 	isb	sy
 8011ba0:	f3bf 8f4f 	dsb	sy
 8011ba4:	603b      	str	r3, [r7, #0]
}
 8011ba6:	bf00      	nop
 8011ba8:	e7fe      	b.n	8011ba8 <vPortValidateInterruptPriority+0x60>
	}
 8011baa:	bf00      	nop
 8011bac:	3714      	adds	r7, #20
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop
 8011bb8:	e000e3f0 	.word	0xe000e3f0
 8011bbc:	20002470 	.word	0x20002470
 8011bc0:	e000ed0c 	.word	0xe000ed0c
 8011bc4:	20002474 	.word	0x20002474

08011bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b08a      	sub	sp, #40	; 0x28
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011bd4:	f7fe fae6 	bl	80101a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011bd8:	4b5d      	ldr	r3, [pc, #372]	; (8011d50 <pvPortMalloc+0x188>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d101      	bne.n	8011be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011be0:	f000 f924 	bl	8011e2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011be4:	4b5b      	ldr	r3, [pc, #364]	; (8011d54 <pvPortMalloc+0x18c>)
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	4013      	ands	r3, r2
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	f040 8093 	bne.w	8011d18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d01d      	beq.n	8011c34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011bf8:	2208      	movs	r2, #8
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f003 0307 	and.w	r3, r3, #7
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d014      	beq.n	8011c34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f023 0307 	bic.w	r3, r3, #7
 8011c10:	3308      	adds	r3, #8
 8011c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f003 0307 	and.w	r3, r3, #7
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d00a      	beq.n	8011c34 <pvPortMalloc+0x6c>
	__asm volatile
 8011c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c22:	f383 8811 	msr	BASEPRI, r3
 8011c26:	f3bf 8f6f 	isb	sy
 8011c2a:	f3bf 8f4f 	dsb	sy
 8011c2e:	617b      	str	r3, [r7, #20]
}
 8011c30:	bf00      	nop
 8011c32:	e7fe      	b.n	8011c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d06e      	beq.n	8011d18 <pvPortMalloc+0x150>
 8011c3a:	4b47      	ldr	r3, [pc, #284]	; (8011d58 <pvPortMalloc+0x190>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d869      	bhi.n	8011d18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011c44:	4b45      	ldr	r3, [pc, #276]	; (8011d5c <pvPortMalloc+0x194>)
 8011c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011c48:	4b44      	ldr	r3, [pc, #272]	; (8011d5c <pvPortMalloc+0x194>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c4e:	e004      	b.n	8011c5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	687a      	ldr	r2, [r7, #4]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d903      	bls.n	8011c6c <pvPortMalloc+0xa4>
 8011c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d1f1      	bne.n	8011c50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011c6c:	4b38      	ldr	r3, [pc, #224]	; (8011d50 <pvPortMalloc+0x188>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d050      	beq.n	8011d18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	2208      	movs	r2, #8
 8011c7c:	4413      	add	r3, r2
 8011c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	6a3b      	ldr	r3, [r7, #32]
 8011c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8a:	685a      	ldr	r2, [r3, #4]
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	1ad2      	subs	r2, r2, r3
 8011c90:	2308      	movs	r3, #8
 8011c92:	005b      	lsls	r3, r3, #1
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d91f      	bls.n	8011cd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ca0:	69bb      	ldr	r3, [r7, #24]
 8011ca2:	f003 0307 	and.w	r3, r3, #7
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d00a      	beq.n	8011cc0 <pvPortMalloc+0xf8>
	__asm volatile
 8011caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cae:	f383 8811 	msr	BASEPRI, r3
 8011cb2:	f3bf 8f6f 	isb	sy
 8011cb6:	f3bf 8f4f 	dsb	sy
 8011cba:	613b      	str	r3, [r7, #16]
}
 8011cbc:	bf00      	nop
 8011cbe:	e7fe      	b.n	8011cbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc2:	685a      	ldr	r2, [r3, #4]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	1ad2      	subs	r2, r2, r3
 8011cc8:	69bb      	ldr	r3, [r7, #24]
 8011cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011cd2:	69b8      	ldr	r0, [r7, #24]
 8011cd4:	f000 f90c 	bl	8011ef0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011cd8:	4b1f      	ldr	r3, [pc, #124]	; (8011d58 <pvPortMalloc+0x190>)
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cde:	685b      	ldr	r3, [r3, #4]
 8011ce0:	1ad3      	subs	r3, r2, r3
 8011ce2:	4a1d      	ldr	r2, [pc, #116]	; (8011d58 <pvPortMalloc+0x190>)
 8011ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011ce6:	4b1c      	ldr	r3, [pc, #112]	; (8011d58 <pvPortMalloc+0x190>)
 8011ce8:	681a      	ldr	r2, [r3, #0]
 8011cea:	4b1d      	ldr	r3, [pc, #116]	; (8011d60 <pvPortMalloc+0x198>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d203      	bcs.n	8011cfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011cf2:	4b19      	ldr	r3, [pc, #100]	; (8011d58 <pvPortMalloc+0x190>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	4a1a      	ldr	r2, [pc, #104]	; (8011d60 <pvPortMalloc+0x198>)
 8011cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfc:	685a      	ldr	r2, [r3, #4]
 8011cfe:	4b15      	ldr	r3, [pc, #84]	; (8011d54 <pvPortMalloc+0x18c>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	431a      	orrs	r2, r3
 8011d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011d0e:	4b15      	ldr	r3, [pc, #84]	; (8011d64 <pvPortMalloc+0x19c>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	3301      	adds	r3, #1
 8011d14:	4a13      	ldr	r2, [pc, #76]	; (8011d64 <pvPortMalloc+0x19c>)
 8011d16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d18:	f7fe fa52 	bl	80101c0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d101      	bne.n	8011d26 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011d22:	f7f2 f977 	bl	8004014 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	f003 0307 	and.w	r3, r3, #7
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00a      	beq.n	8011d46 <pvPortMalloc+0x17e>
	__asm volatile
 8011d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d34:	f383 8811 	msr	BASEPRI, r3
 8011d38:	f3bf 8f6f 	isb	sy
 8011d3c:	f3bf 8f4f 	dsb	sy
 8011d40:	60fb      	str	r3, [r7, #12]
}
 8011d42:	bf00      	nop
 8011d44:	e7fe      	b.n	8011d44 <pvPortMalloc+0x17c>
	return pvReturn;
 8011d46:	69fb      	ldr	r3, [r7, #28]
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	3728      	adds	r7, #40	; 0x28
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}
 8011d50:	2000a480 	.word	0x2000a480
 8011d54:	2000a494 	.word	0x2000a494
 8011d58:	2000a484 	.word	0x2000a484
 8011d5c:	2000a478 	.word	0x2000a478
 8011d60:	2000a488 	.word	0x2000a488
 8011d64:	2000a48c 	.word	0x2000a48c

08011d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b086      	sub	sp, #24
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d04d      	beq.n	8011e16 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011d7a:	2308      	movs	r3, #8
 8011d7c:	425b      	negs	r3, r3
 8011d7e:	697a      	ldr	r2, [r7, #20]
 8011d80:	4413      	add	r3, r2
 8011d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	685a      	ldr	r2, [r3, #4]
 8011d8c:	4b24      	ldr	r3, [pc, #144]	; (8011e20 <vPortFree+0xb8>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	4013      	ands	r3, r2
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d10a      	bne.n	8011dac <vPortFree+0x44>
	__asm volatile
 8011d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d9a:	f383 8811 	msr	BASEPRI, r3
 8011d9e:	f3bf 8f6f 	isb	sy
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	60fb      	str	r3, [r7, #12]
}
 8011da8:	bf00      	nop
 8011daa:	e7fe      	b.n	8011daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00a      	beq.n	8011dca <vPortFree+0x62>
	__asm volatile
 8011db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db8:	f383 8811 	msr	BASEPRI, r3
 8011dbc:	f3bf 8f6f 	isb	sy
 8011dc0:	f3bf 8f4f 	dsb	sy
 8011dc4:	60bb      	str	r3, [r7, #8]
}
 8011dc6:	bf00      	nop
 8011dc8:	e7fe      	b.n	8011dc8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	685a      	ldr	r2, [r3, #4]
 8011dce:	4b14      	ldr	r3, [pc, #80]	; (8011e20 <vPortFree+0xb8>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4013      	ands	r3, r2
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d01e      	beq.n	8011e16 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d11a      	bne.n	8011e16 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	685a      	ldr	r2, [r3, #4]
 8011de4:	4b0e      	ldr	r3, [pc, #56]	; (8011e20 <vPortFree+0xb8>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	43db      	mvns	r3, r3
 8011dea:	401a      	ands	r2, r3
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011df0:	f7fe f9d8 	bl	80101a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	685a      	ldr	r2, [r3, #4]
 8011df8:	4b0a      	ldr	r3, [pc, #40]	; (8011e24 <vPortFree+0xbc>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	4a09      	ldr	r2, [pc, #36]	; (8011e24 <vPortFree+0xbc>)
 8011e00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e02:	6938      	ldr	r0, [r7, #16]
 8011e04:	f000 f874 	bl	8011ef0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011e08:	4b07      	ldr	r3, [pc, #28]	; (8011e28 <vPortFree+0xc0>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	4a06      	ldr	r2, [pc, #24]	; (8011e28 <vPortFree+0xc0>)
 8011e10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011e12:	f7fe f9d5 	bl	80101c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011e16:	bf00      	nop
 8011e18:	3718      	adds	r7, #24
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
 8011e1e:	bf00      	nop
 8011e20:	2000a494 	.word	0x2000a494
 8011e24:	2000a484 	.word	0x2000a484
 8011e28:	2000a490 	.word	0x2000a490

08011e2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b085      	sub	sp, #20
 8011e30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011e38:	4b27      	ldr	r3, [pc, #156]	; (8011ed8 <prvHeapInit+0xac>)
 8011e3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	f003 0307 	and.w	r3, r3, #7
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00c      	beq.n	8011e60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	3307      	adds	r3, #7
 8011e4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f023 0307 	bic.w	r3, r3, #7
 8011e52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011e54:	68ba      	ldr	r2, [r7, #8]
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	4a1f      	ldr	r2, [pc, #124]	; (8011ed8 <prvHeapInit+0xac>)
 8011e5c:	4413      	add	r3, r2
 8011e5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011e64:	4a1d      	ldr	r2, [pc, #116]	; (8011edc <prvHeapInit+0xb0>)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011e6a:	4b1c      	ldr	r3, [pc, #112]	; (8011edc <prvHeapInit+0xb0>)
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	68ba      	ldr	r2, [r7, #8]
 8011e74:	4413      	add	r3, r2
 8011e76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011e78:	2208      	movs	r2, #8
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	1a9b      	subs	r3, r3, r2
 8011e7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f023 0307 	bic.w	r3, r3, #7
 8011e86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	4a15      	ldr	r2, [pc, #84]	; (8011ee0 <prvHeapInit+0xb4>)
 8011e8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011e8e:	4b14      	ldr	r3, [pc, #80]	; (8011ee0 <prvHeapInit+0xb4>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2200      	movs	r2, #0
 8011e94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011e96:	4b12      	ldr	r3, [pc, #72]	; (8011ee0 <prvHeapInit+0xb4>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	1ad2      	subs	r2, r2, r3
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011eac:	4b0c      	ldr	r3, [pc, #48]	; (8011ee0 <prvHeapInit+0xb4>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	4a0a      	ldr	r2, [pc, #40]	; (8011ee4 <prvHeapInit+0xb8>)
 8011eba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	4a09      	ldr	r2, [pc, #36]	; (8011ee8 <prvHeapInit+0xbc>)
 8011ec2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ec4:	4b09      	ldr	r3, [pc, #36]	; (8011eec <prvHeapInit+0xc0>)
 8011ec6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011eca:	601a      	str	r2, [r3, #0]
}
 8011ecc:	bf00      	nop
 8011ece:	3714      	adds	r7, #20
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr
 8011ed8:	20002478 	.word	0x20002478
 8011edc:	2000a478 	.word	0x2000a478
 8011ee0:	2000a480 	.word	0x2000a480
 8011ee4:	2000a488 	.word	0x2000a488
 8011ee8:	2000a484 	.word	0x2000a484
 8011eec:	2000a494 	.word	0x2000a494

08011ef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ef8:	4b28      	ldr	r3, [pc, #160]	; (8011f9c <prvInsertBlockIntoFreeList+0xac>)
 8011efa:	60fb      	str	r3, [r7, #12]
 8011efc:	e002      	b.n	8011f04 <prvInsertBlockIntoFreeList+0x14>
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	60fb      	str	r3, [r7, #12]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	687a      	ldr	r2, [r7, #4]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d8f7      	bhi.n	8011efe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	68ba      	ldr	r2, [r7, #8]
 8011f18:	4413      	add	r3, r2
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d108      	bne.n	8011f32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	685a      	ldr	r2, [r3, #4]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	441a      	add	r2, r3
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	68ba      	ldr	r2, [r7, #8]
 8011f3c:	441a      	add	r2, r3
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d118      	bne.n	8011f78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681a      	ldr	r2, [r3, #0]
 8011f4a:	4b15      	ldr	r3, [pc, #84]	; (8011fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d00d      	beq.n	8011f6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	685a      	ldr	r2, [r3, #4]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	441a      	add	r2, r3
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	601a      	str	r2, [r3, #0]
 8011f6c:	e008      	b.n	8011f80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011f6e:	4b0c      	ldr	r3, [pc, #48]	; (8011fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8011f70:	681a      	ldr	r2, [r3, #0]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	601a      	str	r2, [r3, #0]
 8011f76:	e003      	b.n	8011f80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011f80:	68fa      	ldr	r2, [r7, #12]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d002      	beq.n	8011f8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f8e:	bf00      	nop
 8011f90:	3714      	adds	r7, #20
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr
 8011f9a:	bf00      	nop
 8011f9c:	2000a478 	.word	0x2000a478
 8011fa0:	2000a480 	.word	0x2000a480

08011fa4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8011fa8:	f004 faea 	bl	8016580 <touchgfx_init>
}
 8011fac:	bf00      	nop
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8011fb8:	f004 fb0c 	bl	80165d4 <touchgfx_taskEntry>
}
 8011fbc:	bf00      	nop
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8011fc4:	b480      	push	{r7}
 8011fc6:	b083      	sub	sp, #12
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
    {
 8011fcc:	4a04      	ldr	r2, [pc, #16]	; (8011fe0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	601a      	str	r2, [r3, #0]
    }
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr
 8011fe0:	0802e218 	.word	0x0802e218

08011fe4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
    }
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f7ff ffe9 	bl	8011fc4 <_ZN8touchgfx12FontProviderD1Ev>
 8011ff2:	2104      	movs	r1, #4
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f017 f8cc 	bl	8029192 <_ZdlPvj>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3708      	adds	r7, #8
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	460b      	mov	r3, r1
 801200e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8012010:	887b      	ldrh	r3, [r7, #2]
 8012012:	2b02      	cmp	r3, #2
 8012014:	d010      	beq.n	8012038 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8012016:	2b02      	cmp	r3, #2
 8012018:	dc13      	bgt.n	8012042 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 801201a:	2b00      	cmp	r3, #0
 801201c:	d002      	beq.n	8012024 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 801201e:	2b01      	cmp	r3, #1
 8012020:	d005      	beq.n	801202e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8012022:	e00e      	b.n	8012042 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8012024:	f002 fb1a 	bl	801465c <_ZN17TypedTextDatabase8getFontsEv>
 8012028:	4603      	mov	r3, r0
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	e00a      	b.n	8012044 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 801202e:	f002 fb15 	bl	801465c <_ZN17TypedTextDatabase8getFontsEv>
 8012032:	4603      	mov	r3, r0
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	e005      	b.n	8012044 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8012038:	f002 fb10 	bl	801465c <_ZN17TypedTextDatabase8getFontsEv>
 801203c:	4603      	mov	r3, r0
 801203e:	689b      	ldr	r3, [r3, #8]
 8012040:	e000      	b.n	8012044 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8012042:	2300      	movs	r3, #0
    }
}
 8012044:	4618      	mov	r0, r3
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	4a05      	ldr	r2, [pc, #20]	; (801206c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	601a      	str	r2, [r3, #0]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	4618      	mov	r0, r3
 801205e:	f7ff ffb1 	bl	8011fc4 <_ZN8touchgfx12FontProviderD1Ev>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4618      	mov	r0, r3
 8012066:	3708      	adds	r7, #8
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	0802e204 	.word	0x0802e204

08012070 <_ZN23ApplicationFontProviderD0Ev>:
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f7ff ffe7 	bl	801204c <_ZN23ApplicationFontProviderD1Ev>
 801207e:	2104      	movs	r1, #4
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f017 f886 	bl	8029192 <_ZdlPvj>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	4618      	mov	r0, r3
 801208a:	3708      	adds	r7, #8
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
    {
 8012098:	4a04      	ldr	r2, [pc, #16]	; (80120ac <_ZN8touchgfx4FontD1Ev+0x1c>)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	601a      	str	r2, [r3, #0]
    }
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	4618      	mov	r0, r3
 80120a2:	370c      	adds	r7, #12
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr
 80120ac:	0802e5b8 	.word	0x0802e5b8

080120b0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
    }
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f7ff ffe9 	bl	8012090 <_ZN8touchgfx4FontD1Ev>
 80120be:	2110      	movs	r1, #16
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f017 f866 	bl	8029192 <_ZdlPvj>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	4618      	mov	r0, r3
 80120ca:	3708      	adds	r7, #8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80120d0:	b590      	push	{r4, r7, lr}
 80120d2:	b087      	sub	sp, #28
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	460b      	mov	r3, r1
 80120da:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80120dc:	887b      	ldrh	r3, [r7, #2]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d101      	bne.n	80120e6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80120e2:	2300      	movs	r3, #0
 80120e4:	e010      	b.n	8012108 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80120e6:	2300      	movs	r3, #0
 80120e8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80120ea:	2300      	movs	r3, #0
 80120ec:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	3308      	adds	r3, #8
 80120f4:	681c      	ldr	r4, [r3, #0]
 80120f6:	f107 030f 	add.w	r3, r7, #15
 80120fa:	f107 0210 	add.w	r2, r7, #16
 80120fe:	8879      	ldrh	r1, [r7, #2]
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	47a0      	blx	r4
 8012104:	6178      	str	r0, [r7, #20]
        return glyph;
 8012106:	697b      	ldr	r3, [r7, #20]
    }
 8012108:	4618      	mov	r0, r3
 801210a:	371c      	adds	r7, #28
 801210c:	46bd      	mov	sp, r7
 801210e:	bd90      	pop	{r4, r7, pc}

08012110 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	895b      	ldrh	r3, [r3, #10]
    }
 801211c:	4618      	mov	r0, r3
 801211e:	370c      	adds	r7, #12
 8012120:	46bd      	mov	sp, r7
 8012122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012126:	4770      	bx	lr

08012128 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	899b      	ldrh	r3, [r3, #12]
    }
 8012134:	4618      	mov	r0, r3
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr

08012140 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8012140:	b480      	push	{r7}
 8012142:	b083      	sub	sp, #12
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	889b      	ldrh	r3, [r3, #4]
    }
 801214c:	4618      	mov	r0, r3
 801214e:	370c      	adds	r7, #12
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr

08012158 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	889a      	ldrh	r2, [r3, #4]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	799b      	ldrb	r3, [r3, #6]
 8012168:	b29b      	uxth	r3, r3
 801216a:	4413      	add	r3, r2
 801216c:	b29b      	uxth	r3, r3
    }
 801216e:	4618      	mov	r0, r3
 8012170:	370c      	adds	r7, #12
 8012172:	46bd      	mov	sp, r7
 8012174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012178:	4770      	bx	lr

0801217a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 801217a:	b480      	push	{r7}
 801217c:	b083      	sub	sp, #12
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	79db      	ldrb	r3, [r3, #7]
 8012186:	f3c3 0306 	ubfx	r3, r3, #0, #7
 801218a:	b2db      	uxtb	r3, r3
    }
 801218c:	4618      	mov	r0, r3
 801218e:	370c      	adds	r7, #12
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr

08012198 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	79db      	ldrb	r3, [r3, #7]
 80121a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80121a8:	b2db      	uxtb	r3, r3
    }
 80121aa:	4618      	mov	r0, r3
 80121ac:	370c      	adds	r7, #12
 80121ae:	46bd      	mov	sp, r7
 80121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b4:	4770      	bx	lr
	...

080121b8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	4a05      	ldr	r2, [pc, #20]	; (80121d8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	601a      	str	r2, [r3, #0]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7ff ff61 	bl	8012090 <_ZN8touchgfx4FontD1Ev>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	4618      	mov	r0, r3
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	0802fd90 	.word	0x0802fd90

080121dc <_ZN8touchgfx9ConstFontD0Ev>:
 80121dc:	b580      	push	{r7, lr}
 80121de:	b082      	sub	sp, #8
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7ff ffe7 	bl	80121b8 <_ZN8touchgfx9ConstFontD1Ev>
 80121ea:	2118      	movs	r1, #24
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f016 ffd0 	bl	8029192 <_ZdlPvj>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4618      	mov	r0, r3
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	4a05      	ldr	r2, [pc, #20]	; (801221c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	601a      	str	r2, [r3, #0]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	4618      	mov	r0, r3
 801220e:	f7ff ffd3 	bl	80121b8 <_ZN8touchgfx9ConstFontD1Ev>
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4618      	mov	r0, r3
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}
 801221c:	0802e23c 	.word	0x0802e23c

08012220 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f7ff ffe7 	bl	80121fc <_ZN8touchgfx13GeneratedFontD1Ev>
 801222e:	2124      	movs	r1, #36	; 0x24
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f016 ffae 	bl	8029192 <_ZdlPvj>
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	4618      	mov	r0, r3
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
    {
 8012248:	4a04      	ldr	r2, [pc, #16]	; (801225c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	601a      	str	r2, [r3, #0]
    }
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	4618      	mov	r0, r3
 8012252:	370c      	adds	r7, #12
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr
 801225c:	0802e22c 	.word	0x0802e22c

08012260 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
    }
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f7ff ffe9 	bl	8012240 <_ZN8touchgfx9TypedTextD1Ev>
 801226e:	2108      	movs	r1, #8
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f016 ff8e 	bl	8029192 <_ZdlPvj>
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	4618      	mov	r0, r3
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8012280:	b480      	push	{r7}
 8012282:	b083      	sub	sp, #12
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6a1b      	ldr	r3, [r3, #32]
    }
 801228c:	4618      	mov	r0, r3
 801228e:	370c      	adds	r7, #12
 8012290:	46bd      	mov	sp, r7
 8012292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012296:	4770      	bx	lr

08012298 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8012298:	b580      	push	{r7, lr}
 801229a:	b08c      	sub	sp, #48	; 0x30
 801229c:	af08      	add	r7, sp, #32
 801229e:	60f8      	str	r0, [r7, #12]
 80122a0:	60b9      	str	r1, [r7, #8]
 80122a2:	4611      	mov	r1, r2
 80122a4:	461a      	mov	r2, r3
 80122a6:	460b      	mov	r3, r1
 80122a8:	80fb      	strh	r3, [r7, #6]
 80122aa:	4613      	mov	r3, r2
 80122ac:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	88b9      	ldrh	r1, [r7, #4]
 80122b2:	88fa      	ldrh	r2, [r7, #6]
 80122b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80122b6:	9306      	str	r3, [sp, #24]
 80122b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80122ba:	9305      	str	r3, [sp, #20]
 80122bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80122c0:	9304      	str	r3, [sp, #16]
 80122c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80122c6:	9303      	str	r3, [sp, #12]
 80122c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80122cc:	9302      	str	r3, [sp, #8]
 80122ce:	7f3b      	ldrb	r3, [r7, #28]
 80122d0:	9301      	str	r3, [sp, #4]
 80122d2:	7e3b      	ldrb	r3, [r7, #24]
 80122d4:	9300      	str	r3, [sp, #0]
 80122d6:	460b      	mov	r3, r1
 80122d8:	68b9      	ldr	r1, [r7, #8]
 80122da:	f009 f985 	bl	801b5e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80122de:	4a08      	ldr	r2, [pc, #32]	; (8012300 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	601a      	str	r2, [r3, #0]
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122e8:	619a      	str	r2, [r3, #24]
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122ee:	61da      	str	r2, [r3, #28]
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122f4:	621a      	str	r2, [r3, #32]
{
}
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	0802e23c 	.word	0x0802e23c

08012304 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8012304:	b480      	push	{r7}
 8012306:	b085      	sub	sp, #20
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
 801230c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	699b      	ldr	r3, [r3, #24]
 8012312:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	889b      	ldrh	r3, [r3, #4]
 8012318:	0adb      	lsrs	r3, r3, #11
 801231a:	b29b      	uxth	r3, r3
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	68fa      	ldr	r2, [r7, #12]
 8012320:	4413      	add	r3, r2
 8012322:	681a      	ldr	r2, [r3, #0]
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	4413      	add	r3, r2
}
 801232a:	4618      	mov	r0, r3
 801232c:	3714      	adds	r7, #20
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr

08012336 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8012336:	b480      	push	{r7}
 8012338:	b089      	sub	sp, #36	; 0x24
 801233a:	af00      	add	r7, sp, #0
 801233c:	60f8      	str	r0, [r7, #12]
 801233e:	460b      	mov	r3, r1
 8012340:	607a      	str	r2, [r7, #4]
 8012342:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d003      	beq.n	8012352 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	7b1b      	ldrb	r3, [r3, #12]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d101      	bne.n	8012356 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8012352:	2300      	movs	r3, #0
 8012354:	e030      	b.n	80123b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	69da      	ldr	r2, [r3, #28]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	7b5b      	ldrb	r3, [r3, #13]
 8012362:	021b      	lsls	r3, r3, #8
 8012364:	b21b      	sxth	r3, r3
 8012366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801236a:	b219      	sxth	r1, r3
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	7adb      	ldrb	r3, [r3, #11]
 8012370:	b21b      	sxth	r3, r3
 8012372:	430b      	orrs	r3, r1
 8012374:	b21b      	sxth	r3, r3
 8012376:	b29b      	uxth	r3, r3
 8012378:	009b      	lsls	r3, r3, #2
 801237a:	4413      	add	r3, r2
 801237c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	7b1b      	ldrb	r3, [r3, #12]
 8012382:	837b      	strh	r3, [r7, #26]
 8012384:	8b7b      	ldrh	r3, [r7, #26]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d015      	beq.n	80123b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	881b      	ldrh	r3, [r3, #0]
 801238e:	897a      	ldrh	r2, [r7, #10]
 8012390:	429a      	cmp	r2, r3
 8012392:	d103      	bne.n	801239c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801239a:	e00d      	b.n	80123b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	881b      	ldrh	r3, [r3, #0]
 80123a0:	897a      	ldrh	r2, [r7, #10]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d306      	bcc.n	80123b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80123a6:	8b7b      	ldrh	r3, [r7, #26]
 80123a8:	3b01      	subs	r3, #1
 80123aa:	837b      	strh	r3, [r7, #26]
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	3304      	adds	r3, #4
 80123b0:	61fb      	str	r3, [r7, #28]
 80123b2:	e7e7      	b.n	8012384 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80123b4:	bf00      	nop
        }
    }
    return 0;
 80123b6:	2300      	movs	r3, #0
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3724      	adds	r7, #36	; 0x24
 80123bc:	46bd      	mov	sp, r7
 80123be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c2:	4770      	bx	lr

080123c4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 13, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80123c4:	b580      	push	{r7, lr}
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	4801      	ldr	r0, [pc, #4]	; (80123d0 <__tcf_0+0xc>)
 80123ca:	f7ff ff17 	bl	80121fc <_ZN8touchgfx13GeneratedFontD1Ev>
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	2000a498 	.word	0x2000a498

080123d4 <_Z23getFont_verdana_10_4bppv>:
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b08a      	sub	sp, #40	; 0x28
 80123d8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 13, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80123da:	4b1e      	ldr	r3, [pc, #120]	; (8012454 <_Z23getFont_verdana_10_4bppv+0x80>)
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	f3bf 8f5b 	dmb	ish
 80123e2:	b2db      	uxtb	r3, r3
 80123e4:	f003 0301 	and.w	r3, r3, #1
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	bf0c      	ite	eq
 80123ec:	2301      	moveq	r3, #1
 80123ee:	2300      	movne	r3, #0
 80123f0:	b2db      	uxtb	r3, r3
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d02a      	beq.n	801244c <_Z23getFont_verdana_10_4bppv+0x78>
 80123f6:	4817      	ldr	r0, [pc, #92]	; (8012454 <_Z23getFont_verdana_10_4bppv+0x80>)
 80123f8:	f016 fecd 	bl	8029196 <__cxa_guard_acquire>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	bf14      	ite	ne
 8012402:	2301      	movne	r3, #1
 8012404:	2300      	moveq	r3, #0
 8012406:	b2db      	uxtb	r3, r3
 8012408:	2b00      	cmp	r3, #0
 801240a:	d01f      	beq.n	801244c <_Z23getFont_verdana_10_4bppv+0x78>
 801240c:	2300      	movs	r3, #0
 801240e:	9309      	str	r3, [sp, #36]	; 0x24
 8012410:	2300      	movs	r3, #0
 8012412:	9308      	str	r3, [sp, #32]
 8012414:	233f      	movs	r3, #63	; 0x3f
 8012416:	9307      	str	r3, [sp, #28]
 8012418:	4b0f      	ldr	r3, [pc, #60]	; (8012458 <_Z23getFont_verdana_10_4bppv+0x84>)
 801241a:	9306      	str	r3, [sp, #24]
 801241c:	4b0f      	ldr	r3, [pc, #60]	; (801245c <_Z23getFont_verdana_10_4bppv+0x88>)
 801241e:	9305      	str	r3, [sp, #20]
 8012420:	2300      	movs	r3, #0
 8012422:	9304      	str	r3, [sp, #16]
 8012424:	2300      	movs	r3, #0
 8012426:	9303      	str	r3, [sp, #12]
 8012428:	2301      	movs	r3, #1
 801242a:	9302      	str	r3, [sp, #8]
 801242c:	2304      	movs	r3, #4
 801242e:	9301      	str	r3, [sp, #4]
 8012430:	2300      	movs	r3, #0
 8012432:	9300      	str	r3, [sp, #0]
 8012434:	230a      	movs	r3, #10
 8012436:	220d      	movs	r2, #13
 8012438:	4909      	ldr	r1, [pc, #36]	; (8012460 <_Z23getFont_verdana_10_4bppv+0x8c>)
 801243a:	480a      	ldr	r0, [pc, #40]	; (8012464 <_Z23getFont_verdana_10_4bppv+0x90>)
 801243c:	f7ff ff2c 	bl	8012298 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8012440:	4804      	ldr	r0, [pc, #16]	; (8012454 <_Z23getFont_verdana_10_4bppv+0x80>)
 8012442:	f016 feb4 	bl	80291ae <__cxa_guard_release>
 8012446:	4808      	ldr	r0, [pc, #32]	; (8012468 <_Z23getFont_verdana_10_4bppv+0x94>)
 8012448:	f016 ffec 	bl	8029424 <atexit>
    return verdana_10_4bpp;
 801244c:	4b05      	ldr	r3, [pc, #20]	; (8012464 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 801244e:	4618      	mov	r0, r3
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	2000a4bc 	.word	0x2000a4bc
 8012458:	08032fc8 	.word	0x08032fc8
 801245c:	0802e288 	.word	0x0802e288
 8012460:	08032d5c 	.word	0x08032d5c
 8012464:	2000a498 	.word	0x2000a498
 8012468:	080123c5 	.word	0x080123c5

0801246c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 801246c:	b580      	push	{r7, lr}
 801246e:	af00      	add	r7, sp, #0
 8012470:	4801      	ldr	r0, [pc, #4]	; (8012478 <__tcf_0+0xc>)
 8012472:	f7ff fec3 	bl	80121fc <_ZN8touchgfx13GeneratedFontD1Ev>
 8012476:	bd80      	pop	{r7, pc}
 8012478:	2000a4c0 	.word	0x2000a4c0

0801247c <_Z23getFont_verdana_20_4bppv>:
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b08a      	sub	sp, #40	; 0x28
 8012480:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8012482:	4b1e      	ldr	r3, [pc, #120]	; (80124fc <_Z23getFont_verdana_20_4bppv+0x80>)
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	f3bf 8f5b 	dmb	ish
 801248a:	b2db      	uxtb	r3, r3
 801248c:	f003 0301 	and.w	r3, r3, #1
 8012490:	2b00      	cmp	r3, #0
 8012492:	bf0c      	ite	eq
 8012494:	2301      	moveq	r3, #1
 8012496:	2300      	movne	r3, #0
 8012498:	b2db      	uxtb	r3, r3
 801249a:	2b00      	cmp	r3, #0
 801249c:	d02a      	beq.n	80124f4 <_Z23getFont_verdana_20_4bppv+0x78>
 801249e:	4817      	ldr	r0, [pc, #92]	; (80124fc <_Z23getFont_verdana_20_4bppv+0x80>)
 80124a0:	f016 fe79 	bl	8029196 <__cxa_guard_acquire>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	bf14      	ite	ne
 80124aa:	2301      	movne	r3, #1
 80124ac:	2300      	moveq	r3, #0
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d01f      	beq.n	80124f4 <_Z23getFont_verdana_20_4bppv+0x78>
 80124b4:	2300      	movs	r3, #0
 80124b6:	9309      	str	r3, [sp, #36]	; 0x24
 80124b8:	2300      	movs	r3, #0
 80124ba:	9308      	str	r3, [sp, #32]
 80124bc:	233f      	movs	r3, #63	; 0x3f
 80124be:	9307      	str	r3, [sp, #28]
 80124c0:	4b0f      	ldr	r3, [pc, #60]	; (8012500 <_Z23getFont_verdana_20_4bppv+0x84>)
 80124c2:	9306      	str	r3, [sp, #24]
 80124c4:	4b0f      	ldr	r3, [pc, #60]	; (8012504 <_Z23getFont_verdana_20_4bppv+0x88>)
 80124c6:	9305      	str	r3, [sp, #20]
 80124c8:	2300      	movs	r3, #0
 80124ca:	9304      	str	r3, [sp, #16]
 80124cc:	2300      	movs	r3, #0
 80124ce:	9303      	str	r3, [sp, #12]
 80124d0:	2301      	movs	r3, #1
 80124d2:	9302      	str	r3, [sp, #8]
 80124d4:	2304      	movs	r3, #4
 80124d6:	9301      	str	r3, [sp, #4]
 80124d8:	2300      	movs	r3, #0
 80124da:	9300      	str	r3, [sp, #0]
 80124dc:	2314      	movs	r3, #20
 80124de:	2212      	movs	r2, #18
 80124e0:	4909      	ldr	r1, [pc, #36]	; (8012508 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80124e2:	480a      	ldr	r0, [pc, #40]	; (801250c <_Z23getFont_verdana_20_4bppv+0x90>)
 80124e4:	f7ff fed8 	bl	8012298 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80124e8:	4804      	ldr	r0, [pc, #16]	; (80124fc <_Z23getFont_verdana_20_4bppv+0x80>)
 80124ea:	f016 fe60 	bl	80291ae <__cxa_guard_release>
 80124ee:	4808      	ldr	r0, [pc, #32]	; (8012510 <_Z23getFont_verdana_20_4bppv+0x94>)
 80124f0:	f016 ff98 	bl	8029424 <atexit>
    return verdana_20_4bpp;
 80124f4:	4b05      	ldr	r3, [pc, #20]	; (801250c <_Z23getFont_verdana_20_4bppv+0x90>)
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	2000a4e4 	.word	0x2000a4e4
 8012500:	08032fcc 	.word	0x08032fcc
 8012504:	0802e28c 	.word	0x0802e28c
 8012508:	08032e14 	.word	0x08032e14
 801250c:	2000a4c0 	.word	0x2000a4c0
 8012510:	0801246d 	.word	0x0801246d

08012514 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8012514:	b580      	push	{r7, lr}
 8012516:	af00      	add	r7, sp, #0
 8012518:	4801      	ldr	r0, [pc, #4]	; (8012520 <__tcf_0+0xc>)
 801251a:	f7ff fe6f 	bl	80121fc <_ZN8touchgfx13GeneratedFontD1Ev>
 801251e:	bd80      	pop	{r7, pc}
 8012520:	2000a4e8 	.word	0x2000a4e8

08012524 <_Z23getFont_verdana_40_4bppv>:
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b08a      	sub	sp, #40	; 0x28
 8012528:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 801252a:	4b1e      	ldr	r3, [pc, #120]	; (80125a4 <_Z23getFont_verdana_40_4bppv+0x80>)
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	f3bf 8f5b 	dmb	ish
 8012532:	b2db      	uxtb	r3, r3
 8012534:	f003 0301 	and.w	r3, r3, #1
 8012538:	2b00      	cmp	r3, #0
 801253a:	bf0c      	ite	eq
 801253c:	2301      	moveq	r3, #1
 801253e:	2300      	movne	r3, #0
 8012540:	b2db      	uxtb	r3, r3
 8012542:	2b00      	cmp	r3, #0
 8012544:	d02a      	beq.n	801259c <_Z23getFont_verdana_40_4bppv+0x78>
 8012546:	4817      	ldr	r0, [pc, #92]	; (80125a4 <_Z23getFont_verdana_40_4bppv+0x80>)
 8012548:	f016 fe25 	bl	8029196 <__cxa_guard_acquire>
 801254c:	4603      	mov	r3, r0
 801254e:	2b00      	cmp	r3, #0
 8012550:	bf14      	ite	ne
 8012552:	2301      	movne	r3, #1
 8012554:	2300      	moveq	r3, #0
 8012556:	b2db      	uxtb	r3, r3
 8012558:	2b00      	cmp	r3, #0
 801255a:	d01f      	beq.n	801259c <_Z23getFont_verdana_40_4bppv+0x78>
 801255c:	2300      	movs	r3, #0
 801255e:	9309      	str	r3, [sp, #36]	; 0x24
 8012560:	2300      	movs	r3, #0
 8012562:	9308      	str	r3, [sp, #32]
 8012564:	233f      	movs	r3, #63	; 0x3f
 8012566:	9307      	str	r3, [sp, #28]
 8012568:	4b0f      	ldr	r3, [pc, #60]	; (80125a8 <_Z23getFont_verdana_40_4bppv+0x84>)
 801256a:	9306      	str	r3, [sp, #24]
 801256c:	4b0f      	ldr	r3, [pc, #60]	; (80125ac <_Z23getFont_verdana_40_4bppv+0x88>)
 801256e:	9305      	str	r3, [sp, #20]
 8012570:	2300      	movs	r3, #0
 8012572:	9304      	str	r3, [sp, #16]
 8012574:	2300      	movs	r3, #0
 8012576:	9303      	str	r3, [sp, #12]
 8012578:	2301      	movs	r3, #1
 801257a:	9302      	str	r3, [sp, #8]
 801257c:	2304      	movs	r3, #4
 801257e:	9301      	str	r3, [sp, #4]
 8012580:	2301      	movs	r3, #1
 8012582:	9300      	str	r3, [sp, #0]
 8012584:	2328      	movs	r3, #40	; 0x28
 8012586:	220d      	movs	r2, #13
 8012588:	4909      	ldr	r1, [pc, #36]	; (80125b0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 801258a:	480a      	ldr	r0, [pc, #40]	; (80125b4 <_Z23getFont_verdana_40_4bppv+0x90>)
 801258c:	f7ff fe84 	bl	8012298 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8012590:	4804      	ldr	r0, [pc, #16]	; (80125a4 <_Z23getFont_verdana_40_4bppv+0x80>)
 8012592:	f016 fe0c 	bl	80291ae <__cxa_guard_release>
 8012596:	4808      	ldr	r0, [pc, #32]	; (80125b8 <_Z23getFont_verdana_40_4bppv+0x94>)
 8012598:	f016 ff44 	bl	8029424 <atexit>
    return verdana_40_4bpp;
 801259c:	4b05      	ldr	r3, [pc, #20]	; (80125b4 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 801259e:	4618      	mov	r0, r3
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}
 80125a4:	2000a50c 	.word	0x2000a50c
 80125a8:	08032fd0 	.word	0x08032fd0
 80125ac:	0802e290 	.word	0x0802e290
 80125b0:	08032f10 	.word	0x08032f10
 80125b4:	2000a4e8 	.word	0x2000a4e8
 80125b8:	08012515 	.word	0x08012515

080125bc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	4618      	mov	r0, r3
 80125ca:	370c      	adds	r7, #12
 80125cc:	46bd      	mov	sp, r7
 80125ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d2:	4770      	bx	lr

080125d4 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80125d4:	b480      	push	{r7}
 80125d6:	b083      	sub	sp, #12
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
    {
    }
 80125de:	bf00      	nop
 80125e0:	370c      	adds	r7, #12
 80125e2:	46bd      	mov	sp, r7
 80125e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e8:	4770      	bx	lr

080125ea <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80125ea:	b480      	push	{r7}
 80125ec:	b083      	sub	sp, #12
 80125ee:	af00      	add	r7, sp, #0
 80125f0:	6078      	str	r0, [r7, #4]
 80125f2:	6039      	str	r1, [r7, #0]
    {
    }
 80125f4:	bf00      	nop
 80125f6:	370c      	adds	r7, #12
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr

08012600 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8012600:	b480      	push	{r7}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6039      	str	r1, [r7, #0]
    {
    }
 801260a:	bf00      	nop
 801260c:	370c      	adds	r7, #12
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr

08012616 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8012616:	b480      	push	{r7}
 8012618:	b083      	sub	sp, #12
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
 801261e:	460b      	mov	r3, r1
 8012620:	70fb      	strb	r3, [r7, #3]
    {
    }
 8012622:	bf00      	nop
 8012624:	370c      	adds	r7, #12
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr

0801262e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 801262e:	b480      	push	{r7}
 8012630:	b083      	sub	sp, #12
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
    {
    }
 8012636:	bf00      	nop
 8012638:	370c      	adds	r7, #12
 801263a:	46bd      	mov	sp, r7
 801263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012640:	4770      	bx	lr

08012642 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8012642:	b480      	push	{r7}
 8012644:	b083      	sub	sp, #12
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
    {
    }
 801264a:	bf00      	nop
 801264c:	370c      	adds	r7, #12
 801264e:	46bd      	mov	sp, r7
 8012650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012654:	4770      	bx	lr
	...

08012658 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8012658:	b480      	push	{r7}
 801265a:	b083      	sub	sp, #12
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
    {
 8012660:	4a04      	ldr	r2, [pc, #16]	; (8012674 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	601a      	str	r2, [r3, #0]
    }
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	4618      	mov	r0, r3
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr
 8012674:	0802e39c 	.word	0x0802e39c

08012678 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
    }
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f7ff ffe9 	bl	8012658 <_ZN8touchgfx15UIEventListenerD1Ev>
 8012686:	2104      	movs	r1, #4
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f016 fd82 	bl	8029192 <_ZdlPvj>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4618      	mov	r0, r3
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8012698:	b480      	push	{r7}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	460b      	mov	r3, r1
 80126a2:	70fb      	strb	r3, [r7, #3]
    {
    }
 80126a4:	bf00      	nop
 80126a6:	370c      	adds	r7, #12
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80126b0:	b480      	push	{r7}
 80126b2:	b083      	sub	sp, #12
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	683a      	ldr	r2, [r7, #0]
 80126be:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80126c2:	6810      	ldr	r0, [r2, #0]
 80126c4:	6851      	ldr	r1, [r2, #4]
 80126c6:	c303      	stmia	r3!, {r0, r1}
    };
 80126c8:	bf00      	nop
 80126ca:	370c      	adds	r7, #12
 80126cc:	46bd      	mov	sp, r7
 80126ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d2:	4770      	bx	lr

080126d4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80126d4:	b480      	push	{r7}
 80126d6:	b083      	sub	sp, #12
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
    {
 80126dc:	4a04      	ldr	r2, [pc, #16]	; (80126f0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	601a      	str	r2, [r3, #0]
    }
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4618      	mov	r0, r3
 80126e6:	370c      	adds	r7, #12
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr
 80126f0:	0802e384 	.word	0x0802e384

080126f4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
    }
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f7ff ffe9 	bl	80126d4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8012702:	2104      	movs	r1, #4
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f016 fd44 	bl	8029192 <_ZdlPvj>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4618      	mov	r0, r3
 801270e:	3708      	adds	r7, #8
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8012714:	b480      	push	{r7}
 8012716:	af00      	add	r7, sp, #0
    {
        return instance;
 8012718:	4b03      	ldr	r3, [pc, #12]	; (8012728 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 801271a:	681b      	ldr	r3, [r3, #0]
    }
 801271c:	4618      	mov	r0, r3
 801271e:	46bd      	mov	sp, r7
 8012720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012724:	4770      	bx	lr
 8012726:	bf00      	nop
 8012728:	2000b734 	.word	0x2000b734

0801272c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 801272c:	b480      	push	{r7}
 801272e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8012730:	4b0b      	ldr	r3, [pc, #44]	; (8012760 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8012738:	2b00      	cmp	r3, #0
 801273a:	d008      	beq.n	801274e <_ZN8touchgfx3HAL3lcdEv+0x22>
 801273c:	4b08      	ldr	r3, [pc, #32]	; (8012760 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012742:	2b00      	cmp	r3, #0
 8012744:	d003      	beq.n	801274e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8012746:	4b06      	ldr	r3, [pc, #24]	; (8012760 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801274c:	e002      	b.n	8012754 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 801274e:	4b04      	ldr	r3, [pc, #16]	; (8012760 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	689b      	ldr	r3, [r3, #8]
        }
    }
 8012754:	4618      	mov	r0, r3
 8012756:	46bd      	mov	sp, r7
 8012758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275c:	4770      	bx	lr
 801275e:	bf00      	nop
 8012760:	2000b734 	.word	0x2000b734

08012764 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8012764:	b480      	push	{r7}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 801276c:	4a07      	ldr	r2, [pc, #28]	; (801278c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	601a      	str	r2, [r3, #0]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2200      	movs	r2, #0
 8012776:	605a      	str	r2, [r3, #4]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2200      	movs	r2, #0
 801277c:	721a      	strb	r2, [r3, #8]
    {
    }
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4618      	mov	r0, r3
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr
 801278c:	0802e360 	.word	0x0802e360

08012790 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
    {
 8012798:	4a04      	ldr	r2, [pc, #16]	; (80127ac <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	601a      	str	r2, [r3, #0]
    }
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	370c      	adds	r7, #12
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr
 80127ac:	0802e360 	.word	0x0802e360

080127b0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
    }
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f7ff ffe9 	bl	8012790 <_ZN8touchgfx10TransitionD1Ev>
 80127be:	210c      	movs	r1, #12
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f016 fce6 	bl	8029192 <_ZdlPvj>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	4618      	mov	r0, r3
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
    {
    }
 80127d8:	bf00      	nop
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
    {
    }
 80127ec:	bf00      	nop
 80127ee:	370c      	adds	r7, #12
 80127f0:	46bd      	mov	sp, r7
 80127f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f6:	4770      	bx	lr

080127f8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80127f8:	b480      	push	{r7}
 80127fa:	b083      	sub	sp, #12
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
    {
    }
 8012800:	bf00      	nop
 8012802:	370c      	adds	r7, #12
 8012804:	46bd      	mov	sp, r7
 8012806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280a:	4770      	bx	lr

0801280c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 801280c:	b580      	push	{r7, lr}
 801280e:	b082      	sub	sp, #8
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8012814:	f007 fecc 	bl	801a5b0 <_ZN8touchgfx11Application11getInstanceEv>
 8012818:	4603      	mov	r3, r0
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	3230      	adds	r2, #48	; 0x30
 801281e:	6812      	ldr	r2, [r2, #0]
 8012820:	4618      	mov	r0, r3
 8012822:	4790      	blx	r2
    }
 8012824:	bf00      	nop
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	683a      	ldr	r2, [r7, #0]
 801283a:	605a      	str	r2, [r3, #4]
    }
 801283c:	bf00      	nop
 801283e:	370c      	adds	r7, #12
 8012840:	46bd      	mov	sp, r7
 8012842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012846:	4770      	bx	lr

08012848 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	4a05      	ldr	r2, [pc, #20]	; (8012868 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	601a      	str	r2, [r3, #0]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4618      	mov	r0, r3
 801285a:	f7ff fefd 	bl	8012658 <_ZN8touchgfx15UIEventListenerD1Ev>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}
 8012868:	0802fc3c 	.word	0x0802fc3c

0801286c <_ZN8touchgfx11ApplicationD0Ev>:
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f7ff ffe7 	bl	8012848 <_ZN8touchgfx11ApplicationD1Ev>
 801287a:	f44f 719c 	mov.w	r1, #312	; 0x138
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f016 fc87 	bl	8029192 <_ZdlPvj>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	4618      	mov	r0, r3
 8012888:	3708      	adds	r7, #8
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
	...

08012890 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	4618      	mov	r0, r3
 801289c:	f007 fea8 	bl	801a5f0 <_ZN8touchgfx11ApplicationC1Ev>
 80128a0:	4a09      	ldr	r2, [pc, #36]	; (80128c8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	601a      	str	r2, [r3, #0]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2200      	movs	r2, #0
 80128aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2200      	movs	r2, #0
 80128b2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4a04      	ldr	r2, [pc, #16]	; (80128cc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80128ba:	6013      	str	r3, [r2, #0]
    }
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	4618      	mov	r0, r3
 80128c0:	3708      	adds	r7, #8
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	0802e31c 	.word	0x0802e31c
 80128cc:	2000b780 	.word	0x2000b780

080128d0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 f804 	bl	80128e6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80128de:	bf00      	nop
 80128e0:	3708      	adds	r7, #8
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}

080128e6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b082      	sub	sp, #8
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d00f      	beq.n	8012918 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	330c      	adds	r3, #12
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	4610      	mov	r0, r2
 801290c:	4798      	blx	r3
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	d001      	beq.n	8012918 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8012914:	2301      	movs	r3, #1
 8012916:	e000      	b.n	801291a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8012918:	2300      	movs	r3, #0
 801291a:	2b00      	cmp	r3, #0
 801291c:	d00e      	beq.n	801293c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	3308      	adds	r3, #8
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	4610      	mov	r0, r2
 8012932:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2200      	movs	r2, #0
 8012938:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 801293c:	bf00      	nop
 801293e:	3708      	adds	r7, #8
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8012944:	b480      	push	{r7}
 8012946:	b083      	sub	sp, #12
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	683a      	ldr	r2, [r7, #0]
 8012952:	601a      	str	r2, [r3, #0]
    }
 8012954:	bf00      	nop
 8012956:	370c      	adds	r7, #12
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr

08012960 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	4a05      	ldr	r2, [pc, #20]	; (8012980 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	601a      	str	r2, [r3, #0]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	f7ff ff69 	bl	8012848 <_ZN8touchgfx11ApplicationD1Ev>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4618      	mov	r0, r3
 801297a:	3708      	adds	r7, #8
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}
 8012980:	0802e31c 	.word	0x0802e31c

08012984 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f7ff ffe7 	bl	8012960 <_ZN8touchgfx14MVPApplicationD1Ev>
 8012992:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f016 fbfb 	bl	8029192 <_ZdlPvj>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	4618      	mov	r0, r3
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
	...

080129a8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	4a08      	ldr	r2, [pc, #32]	; (80129d4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	601a      	str	r2, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80129bc:	4618      	mov	r0, r3
 80129be:	f000 fabd 	bl	8012f3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7ff ffcb 	bl	8012960 <_ZN8touchgfx14MVPApplicationD1Ev>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4618      	mov	r0, r3
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	0802e2c0 	.word	0x0802e2c0

080129d8 <_ZN23FrontendApplicationBaseD0Ev>:
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f7ff ffe1 	bl	80129a8 <_ZN23FrontendApplicationBaseD1Ev>
 80129e6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f016 fbd1 	bl	8029192 <_ZdlPvj>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	4618      	mov	r0, r3
 80129f4:	3708      	adds	r7, #8
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}

080129fa <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80129fa:	b480      	push	{r7}
 80129fc:	b083      	sub	sp, #12
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2201      	movs	r2, #1
 8012a06:	721a      	strb	r2, [r3, #8]
    }
 8012a08:	bf00      	nop
 8012a0a:	370c      	adds	r7, #12
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr

08012a14 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	683a      	ldr	r2, [r7, #0]
 8012a22:	605a      	str	r2, [r3, #4]
    }
 8012a24:	bf00      	nop
 8012a26:	370c      	adds	r7, #12
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2e:	4770      	bx	lr

08012a30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7ff ff26 	bl	8012890 <_ZN8touchgfx14MVPApplicationC1Ev>
 8012a44:	4a13      	ldr	r2, [pc, #76]	; (8012a94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	601a      	str	r2, [r3, #0]
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012a50:	4618      	mov	r0, r3
 8012a52:	f000 f89f 	bl	8012b94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	68ba      	ldr	r2, [r7, #8]
 8012a62:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8012a66:	f7ff fe55 	bl	8012714 <_ZN8touchgfx3HAL11getInstanceEv>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	3208      	adds	r2, #8
 8012a70:	6812      	ldr	r2, [r2, #0]
 8012a72:	2101      	movs	r1, #1
 8012a74:	4618      	mov	r0, r3
 8012a76:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8012a78:	2000      	movs	r0, #0
 8012a7a:	f001 fd77 	bl	801456c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8012a7e:	f7ff fe55 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 8012a82:	4603      	mov	r3, r0
 8012a84:	4618      	mov	r0, r3
 8012a86:	f00f fa6c 	bl	8021f62 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3710      	adds	r7, #16
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	0802e2c0 	.word	0x0802e2c0

08012a98 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8012a98:	b480      	push	{r7}
 8012a9a:	b083      	sub	sp, #12
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	6039      	str	r1, [r7, #0]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	370c      	adds	r7, #12
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr

08012ab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	683a      	ldr	r2, [r7, #0]
 8012abe:	4611      	mov	r1, r2
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7ff ffe9 	bl	8012a98 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	685a      	ldr	r2, [r3, #4]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	605a      	str	r2, [r3, #4]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	683a      	ldr	r2, [r7, #0]
 8012ad2:	3308      	adds	r3, #8
 8012ad4:	3208      	adds	r2, #8
 8012ad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ada:	e883 0003 	stmia.w	r3, {r0, r1}
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3708      	adds	r7, #8
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8012ae8:	b590      	push	{r4, r7, lr}
 8012aea:	b089      	sub	sp, #36	; 0x24
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8012af6:	4b10      	ldr	r3, [pc, #64]	; (8012b38 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8012af8:	61bb      	str	r3, [r7, #24]
 8012afa:	2300      	movs	r3, #0
 8012afc:	61fb      	str	r3, [r7, #28]
 8012afe:	f107 0008 	add.w	r0, r7, #8
 8012b02:	f107 0318 	add.w	r3, r7, #24
 8012b06:	cb0c      	ldmia	r3, {r2, r3}
 8012b08:	6879      	ldr	r1, [r7, #4]
 8012b0a:	f000 f85f 	bl	8012bcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012b0e:	f107 0308 	add.w	r3, r7, #8
 8012b12:	4619      	mov	r1, r3
 8012b14:	4620      	mov	r0, r4
 8012b16:	f7ff ffcb 	bl	8012ab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012b1a:	f107 0308 	add.w	r3, r7, #8
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f000 fa0c 	bl	8012f3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8012b30:	bf00      	nop
 8012b32:	3724      	adds	r7, #36	; 0x24
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd90      	pop	{r4, r7, pc}
 8012b38:	08012b3d 	.word	0x08012b3d

08012b3c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af02      	add	r7, sp, #8
 8012b42:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8012b50:	461a      	mov	r2, r3
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012b58:	9300      	str	r3, [sp, #0]
 8012b5a:	4b04      	ldr	r3, [pc, #16]	; (8012b6c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 8012b5c:	4804      	ldr	r0, [pc, #16]	; (8012b70 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 8012b5e:	f000 f867 	bl	8012c30 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8012b62:	bf00      	nop
 8012b64:	3708      	adds	r7, #8
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	2000b774 	.word	0x2000b774
 8012b70:	2000b770 	.word	0x2000b770

08012b74 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8012b74:	b480      	push	{r7}
 8012b76:	b083      	sub	sp, #12
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	4a04      	ldr	r2, [pc, #16]	; (8012b90 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	601a      	str	r2, [r3, #0]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	4618      	mov	r0, r3
 8012b86:	370c      	adds	r7, #12
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr
 8012b90:	0802e384 	.word	0x0802e384

08012b94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7ff ffe8 	bl	8012b74 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8012ba4:	4a08      	ldr	r2, [pc, #32]	; (8012bc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	601a      	str	r2, [r3, #0]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2200      	movs	r2, #0
 8012bae:	605a      	str	r2, [r3, #4]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	609a      	str	r2, [r3, #8]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	60da      	str	r2, [r3, #12]
    {
    }
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	3708      	adds	r7, #8
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	bd80      	pop	{r7, pc}
 8012bc6:	bf00      	nop
 8012bc8:	0802e304 	.word	0x0802e304

08012bcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b084      	sub	sp, #16
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	60b9      	str	r1, [r7, #8]
 8012bd6:	4639      	mov	r1, r7
 8012bd8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ff ffc8 	bl	8012b74 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8012be4:	4a08      	ldr	r2, [pc, #32]	; (8012c08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	68ba      	ldr	r2, [r7, #8]
 8012bee:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	3308      	adds	r3, #8
 8012bf4:	463a      	mov	r2, r7
 8012bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012bfa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	4618      	mov	r0, r3
 8012c02:	3710      	adds	r7, #16
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	0802e304 	.word	0x0802e304

08012c0c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7ff fda4 	bl	8012764 <_ZN8touchgfx10TransitionC1Ev>
 8012c1c:	4a03      	ldr	r2, [pc, #12]	; (8012c2c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	601a      	str	r2, [r3, #0]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	4618      	mov	r0, r3
 8012c26:	3708      	adds	r7, #8
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	0802e29c 	.word	0x0802e29c

08012c30 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8012c30:	b590      	push	{r4, r7, lr}
 8012c32:	b08f      	sub	sp, #60	; 0x3c
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
 8012c3c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	689a      	ldr	r2, [r3, #8]
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	689b      	ldr	r3, [r3, #8]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	3320      	adds	r3, #32
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4610      	mov	r0, r2
 8012c4e:	4798      	blx	r3
 8012c50:	4603      	mov	r3, r0
 8012c52:	f5b3 7f49 	cmp.w	r3, #804	; 0x324
 8012c56:	d205      	bcs.n	8012c64 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8012c58:	4b7e      	ldr	r3, [pc, #504]	; (8012e54 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012c5a:	4a7f      	ldr	r2, [pc, #508]	; (8012e58 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012c5c:	21a7      	movs	r1, #167	; 0xa7
 8012c5e:	487f      	ldr	r0, [pc, #508]	; (8012e5c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012c60:	f016 fbc2 	bl	80293e8 <__assert_func>
 8012c64:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	685a      	ldr	r2, [r3, #4]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	3320      	adds	r3, #32
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4610      	mov	r0, r2
 8012c76:	4798      	blx	r3
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b0f      	cmp	r3, #15
 8012c7c:	d805      	bhi.n	8012c8a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8012c7e:	4b78      	ldr	r3, [pc, #480]	; (8012e60 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8012c80:	4a75      	ldr	r2, [pc, #468]	; (8012e58 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012c82:	21a8      	movs	r1, #168	; 0xa8
 8012c84:	4875      	ldr	r0, [pc, #468]	; (8012e5c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012c86:	f016 fbaf 	bl	80293e8 <__assert_func>
 8012c8a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	68da      	ldr	r2, [r3, #12]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	3320      	adds	r3, #32
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	4610      	mov	r0, r2
 8012c9c:	4798      	blx	r3
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	2b0b      	cmp	r3, #11
 8012ca2:	d805      	bhi.n	8012cb0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8012ca4:	4b6f      	ldr	r3, [pc, #444]	; (8012e64 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8012ca6:	4a6c      	ldr	r2, [pc, #432]	; (8012e58 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012ca8:	21a9      	movs	r1, #169	; 0xa9
 8012caa:	486c      	ldr	r0, [pc, #432]	; (8012e5c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012cac:	f016 fb9c 	bl	80293e8 <__assert_func>
 8012cb0:	bf00      	nop
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8012cb6:	68bb      	ldr	r3, [r7, #8]
 8012cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8012cbe:	f007 fc77 	bl	801a5b0 <_ZN8touchgfx11Application11getInstanceEv>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f007 fc79 	bl	801a5bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8012cca:	6a3b      	ldr	r3, [r7, #32]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d008      	beq.n	8012ce4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8012cd2:	6a3b      	ldr	r3, [r7, #32]
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	6a3b      	ldr	r3, [r7, #32]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	330c      	adds	r3, #12
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	4610      	mov	r0, r2
 8012ce2:	4798      	blx	r3
    if (*currentTrans)
 8012ce4:	6a3b      	ldr	r3, [r7, #32]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d007      	beq.n	8012cfc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8012cec:	6a3b      	ldr	r3, [r7, #32]
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	6a3b      	ldr	r3, [r7, #32]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	4610      	mov	r0, r2
 8012cfa:	4798      	blx	r3
    if (*currentScreen)
 8012cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d008      	beq.n	8012d16 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8012d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	3314      	adds	r3, #20
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4610      	mov	r0, r2
 8012d14:	4798      	blx	r3
    if (*currentPresenter)
 8012d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d008      	beq.n	8012d30 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8012d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d20:	681a      	ldr	r2, [r3, #0]
 8012d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	3304      	adds	r3, #4
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	4610      	mov	r0, r2
 8012d2e:	4798      	blx	r3
    if (*currentScreen)
 8012d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d007      	beq.n	8012d48 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8012d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3a:	681a      	ldr	r2, [r3, #0]
 8012d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4610      	mov	r0, r2
 8012d46:	4798      	blx	r3
    if (*currentPresenter)
 8012d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d008      	beq.n	8012d62 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8012d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	3308      	adds	r3, #8
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4610      	mov	r0, r2
 8012d60:	4798      	blx	r3
}
 8012d62:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	2100      	movs	r1, #0
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f000 f87c 	bl	8012e68 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8012d70:	4603      	mov	r3, r0
 8012d72:	4619      	mov	r1, r3
 8012d74:	200c      	movs	r0, #12
 8012d76:	f7ff fc21 	bl	80125bc <_ZnwjPv>
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	4620      	mov	r0, r4
 8012d7e:	f7ff ff45 	bl	8012c0c <_ZN8touchgfx12NoTransitionC1Ev>
 8012d82:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	2100      	movs	r1, #0
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f000 f87f 	bl	8012e8e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8012d90:	4603      	mov	r3, r0
 8012d92:	4619      	mov	r1, r3
 8012d94:	f44f 7049 	mov.w	r0, #804	; 0x324
 8012d98:	f7ff fc10 	bl	80125bc <_ZnwjPv>
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f001 ff50 	bl	8014c44 <_ZN10screenViewC1Ev>
 8012da4:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	685b      	ldr	r3, [r3, #4]
 8012daa:	2100      	movs	r1, #0
 8012dac:	4618      	mov	r0, r3
 8012dae:	f000 f881 	bl	8012eb4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8012db2:	4603      	mov	r3, r0
 8012db4:	4619      	mov	r1, r3
 8012db6:	2010      	movs	r0, #16
 8012db8:	f7ff fc00 	bl	80125bc <_ZnwjPv>
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f001 fe0f 	bl	80149e4 <_ZN15screenPresenterC1ER10screenView>
 8012dc6:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dcc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dd2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dd8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8012dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d002      	beq.n	8012de6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8012de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de2:	3304      	adds	r3, #4
 8012de4:	e000      	b.n	8012de8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8012de6:	2300      	movs	r3, #0
 8012de8:	4619      	mov	r1, r3
 8012dea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012dec:	f7ff fdaa 	bl	8012944 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8012df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df2:	3304      	adds	r3, #4
 8012df4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7ff fe0c 	bl	8012a14 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8012dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e00:	4618      	mov	r0, r3
 8012e02:	f000 f86a 	bl	8012eda <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8012e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e08:	61fb      	str	r3, [r7, #28]
 8012e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0c:	61bb      	str	r3, [r7, #24]
 8012e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e10:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8012e12:	69fb      	ldr	r3, [r7, #28]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	330c      	adds	r3, #12
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	69f8      	ldr	r0, [r7, #28]
 8012e1c:	4798      	blx	r3
    newPresenter->activate();
 8012e1e:	69bb      	ldr	r3, [r7, #24]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	69b8      	ldr	r0, [r7, #24]
 8012e26:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8012e28:	6979      	ldr	r1, [r7, #20]
 8012e2a:	69f8      	ldr	r0, [r7, #28]
 8012e2c:	f008 ffd7 	bl	801bdde <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	3310      	adds	r3, #16
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	6978      	ldr	r0, [r7, #20]
 8012e3a:	4798      	blx	r3
    newTransition->invalidate();
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	3314      	adds	r3, #20
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	6978      	ldr	r0, [r7, #20]
 8012e46:	4798      	blx	r3
}
 8012e48:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8012e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	373c      	adds	r7, #60	; 0x3c
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd90      	pop	{r4, r7, pc}
 8012e54:	0802d554 	.word	0x0802d554
 8012e58:	0802d5e4 	.word	0x0802d5e4
 8012e5c:	0802d6e8 	.word	0x0802d6e8
 8012e60:	0802d72c 	.word	0x0802d72c
 8012e64:	0802d7d0 	.word	0x0802d7d0

08012e68 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	460b      	mov	r3, r1
 8012e72:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	3324      	adds	r3, #36	; 0x24
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	887a      	ldrh	r2, [r7, #2]
 8012e7e:	4611      	mov	r1, r2
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	4798      	blx	r3
 8012e84:	4603      	mov	r3, r0
    }
 8012e86:	4618      	mov	r0, r3
 8012e88:	3708      	adds	r7, #8
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}

08012e8e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8012e8e:	b580      	push	{r7, lr}
 8012e90:	b082      	sub	sp, #8
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
 8012e96:	460b      	mov	r3, r1
 8012e98:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	3324      	adds	r3, #36	; 0x24
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	887a      	ldrh	r2, [r7, #2]
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	4798      	blx	r3
 8012eaa:	4603      	mov	r3, r0
    }
 8012eac:	4618      	mov	r0, r3
 8012eae:	3708      	adds	r7, #8
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	3324      	adds	r3, #36	; 0x24
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	887a      	ldrh	r2, [r7, #2]
 8012eca:	4611      	mov	r1, r2
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	4798      	blx	r3
 8012ed0:	4603      	mov	r3, r0
    }
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	3708      	adds	r7, #8
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}

08012eda <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8012eda:	b480      	push	{r7}
 8012edc:	b083      	sub	sp, #12
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
 8012ee2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	683a      	ldr	r2, [r7, #0]
 8012ee8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012eea:	bf00      	nop
 8012eec:	370c      	adds	r7, #12
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef4:	4770      	bx	lr
	...

08012ef8 <_ZN8touchgfx12NoTransitionD1Ev>:
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	4a05      	ldr	r2, [pc, #20]	; (8012f18 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	601a      	str	r2, [r3, #0]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7ff fc41 	bl	8012790 <_ZN8touchgfx10TransitionD1Ev>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	4618      	mov	r0, r3
 8012f12:	3708      	adds	r7, #8
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	0802e29c 	.word	0x0802e29c

08012f1c <_ZN8touchgfx12NoTransitionD0Ev>:
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f7ff ffe7 	bl	8012ef8 <_ZN8touchgfx12NoTransitionD1Ev>
 8012f2a:	210c      	movs	r1, #12
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f016 f930 	bl	8029192 <_ZdlPvj>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	4618      	mov	r0, r3
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	4a05      	ldr	r2, [pc, #20]	; (8012f5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	601a      	str	r2, [r3, #0]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7ff fbc1 	bl	80126d4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	4618      	mov	r0, r3
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	0802e304 	.word	0x0802e304

08012f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7ff ffe7 	bl	8012f3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8012f6e:	2110      	movs	r1, #16
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f016 f90e 	bl	8029192 <_ZdlPvj>
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	3708      	adds	r7, #8
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}

08012f80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	68d2      	ldr	r2, [r2, #12]
 8012f90:	1052      	asrs	r2, r2, #1
 8012f92:	1899      	adds	r1, r3, r2
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	68db      	ldr	r3, [r3, #12]
 8012f98:	f003 0301 	and.w	r3, r3, #1
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d102      	bne.n	8012fa6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	689b      	ldr	r3, [r3, #8]
 8012fa4:	e00a      	b.n	8012fbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	68d2      	ldr	r2, [r2, #12]
 8012fae:	1052      	asrs	r2, r2, #1
 8012fb0:	4413      	add	r3, r2
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	687a      	ldr	r2, [r7, #4]
 8012fb6:	6892      	ldr	r2, [r2, #8]
 8012fb8:	4413      	add	r3, r2
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4608      	mov	r0, r1
 8012fbe:	4798      	blx	r3
    }
 8012fc0:	bf00      	nop
 8012fc2:	3708      	adds	r7, #8
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}

08012fc8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8012fc8:	b480      	push	{r7}
 8012fca:	b083      	sub	sp, #12
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d010      	beq.n	8012ffa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d107      	bne.n	8012ff0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	f003 0301 	and.w	r3, r3, #1
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d101      	bne.n	8012ff0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8012fec:	2301      	movs	r3, #1
 8012fee:	e000      	b.n	8012ff2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d001      	beq.n	8012ffa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	e000      	b.n	8012ffc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8012ffa:	2300      	movs	r3, #0
    }
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	370c      	adds	r7, #12
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr

08013008 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 8013008:	b480      	push	{r7}
 801300a:	b083      	sub	sp, #12
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	683a      	ldr	r2, [r7, #0]
 8013016:	601a      	str	r2, [r3, #0]
    }
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	4618      	mov	r0, r3
 801301c:	370c      	adds	r7, #12
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr

08013026 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8013026:	b480      	push	{r7}
 8013028:	b083      	sub	sp, #12
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2200      	movs	r2, #0
 8013032:	801a      	strh	r2, [r3, #0]
        y = 0;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2200      	movs	r2, #0
 8013038:	805a      	strh	r2, [r3, #2]
        width = 0;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	2200      	movs	r2, #0
 801303e:	809a      	strh	r2, [r3, #4]
        height = 0;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2200      	movs	r2, #0
 8013044:	80da      	strh	r2, [r3, #6]
    }
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	4618      	mov	r0, r3
 801304a:	370c      	adds	r7, #12
 801304c:	46bd      	mov	sp, r7
 801304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013052:	4770      	bx	lr

08013054 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8013054:	b480      	push	{r7}
 8013056:	b085      	sub	sp, #20
 8013058:	af00      	add	r7, sp, #0
 801305a:	60f8      	str	r0, [r7, #12]
 801305c:	4608      	mov	r0, r1
 801305e:	4611      	mov	r1, r2
 8013060:	461a      	mov	r2, r3
 8013062:	4603      	mov	r3, r0
 8013064:	817b      	strh	r3, [r7, #10]
 8013066:	460b      	mov	r3, r1
 8013068:	813b      	strh	r3, [r7, #8]
 801306a:	4613      	mov	r3, r2
 801306c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	897a      	ldrh	r2, [r7, #10]
 8013072:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	893a      	ldrh	r2, [r7, #8]
 8013078:	805a      	strh	r2, [r3, #2]
        this->width = width;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	88fa      	ldrh	r2, [r7, #6]
 801307e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	8b3a      	ldrh	r2, [r7, #24]
 8013084:	80da      	strh	r2, [r3, #6]
    }
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	4618      	mov	r0, r3
 801308a:	3714      	adds	r7, #20
 801308c:	46bd      	mov	sp, r7
 801308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013092:	4770      	bx	lr

08013094 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	460b      	mov	r3, r1
 801309e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	887a      	ldrh	r2, [r7, #2]
 80130a4:	801a      	strh	r2, [r3, #0]
    {
    }
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	4618      	mov	r0, r3
 80130aa:	370c      	adds	r7, #12
 80130ac:	46bd      	mov	sp, r7
 80130ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b2:	4770      	bx	lr

080130b4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af02      	add	r7, sp, #8
 80130ba:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 80130bc:	4a13      	ldr	r2, [pc, #76]	; (801310c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	601a      	str	r2, [r3, #0]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	1d18      	adds	r0, r3, #4
 80130c6:	2300      	movs	r3, #0
 80130c8:	9300      	str	r3, [sp, #0]
 80130ca:	2300      	movs	r3, #0
 80130cc:	2200      	movs	r2, #0
 80130ce:	2100      	movs	r1, #0
 80130d0:	f7ff ffc0 	bl	8013054 <_ZN8touchgfx4RectC1Essss>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	330c      	adds	r3, #12
 80130d8:	4618      	mov	r0, r3
 80130da:	f7ff ffa4 	bl	8013026 <_ZN8touchgfx4RectC1Ev>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2200      	movs	r2, #0
 80130e2:	615a      	str	r2, [r3, #20]
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2200      	movs	r2, #0
 80130e8:	619a      	str	r2, [r3, #24]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2200      	movs	r2, #0
 80130ee:	61da      	str	r2, [r3, #28]
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2200      	movs	r2, #0
 80130f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2201      	movs	r2, #1
 80130fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	4618      	mov	r0, r3
 8013104:	3708      	adds	r7, #8
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop
 801310c:	0802fd2c 	.word	0x0802fd2c

08013110 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
    {
 8013118:	4a04      	ldr	r2, [pc, #16]	; (801312c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	601a      	str	r2, [r3, #0]
    }
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr
 801312c:	0802fd2c 	.word	0x0802fd2c

08013130 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
    }
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7ff ffe9 	bl	8013110 <_ZN8touchgfx8DrawableD1Ev>
 801313e:	2128      	movs	r1, #40	; 0x28
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f016 f826 	bl	8029192 <_ZdlPvj>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013158:	2300      	movs	r3, #0
    }
 801315a:	4618      	mov	r0, r3
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr

08013166 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	60f8      	str	r0, [r7, #12]
 801316e:	4608      	mov	r0, r1
 8013170:	4611      	mov	r1, r2
 8013172:	461a      	mov	r2, r3
 8013174:	4603      	mov	r3, r0
 8013176:	817b      	strh	r3, [r7, #10]
 8013178:	460b      	mov	r3, r1
 801317a:	813b      	strh	r3, [r7, #8]
 801317c:	4613      	mov	r3, r2
 801317e:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8013180:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013184:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013188:	4619      	mov	r1, r3
 801318a:	68f8      	ldr	r0, [r7, #12]
 801318c:	f000 f82a 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8013190:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013198:	4619      	mov	r1, r3
 801319a:	68f8      	ldr	r0, [r7, #12]
 801319c:	f000 f87e 	bl	801329c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80131a0:	bf00      	nop
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80131a8:	b480      	push	{r7}
 80131aa:	b083      	sub	sp, #12
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	460b      	mov	r3, r1
 80131b2:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	887a      	ldrh	r2, [r7, #2]
 80131b8:	809a      	strh	r2, [r3, #4]
    }
 80131ba:	bf00      	nop
 80131bc:	370c      	adds	r7, #12
 80131be:	46bd      	mov	sp, r7
 80131c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c4:	4770      	bx	lr

080131c6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 80131c6:	b480      	push	{r7}
 80131c8:	b083      	sub	sp, #12
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	6078      	str	r0, [r7, #4]
 80131ce:	460b      	mov	r3, r1
 80131d0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	887a      	ldrh	r2, [r7, #2]
 80131d6:	80da      	strh	r2, [r3, #6]
    }
 80131d8:	bf00      	nop
 80131da:	370c      	adds	r7, #12
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr

080131e4 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	460b      	mov	r3, r1
 80131ee:	807b      	strh	r3, [r7, #2]
 80131f0:	4613      	mov	r3, r2
 80131f2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	332c      	adds	r3, #44	; 0x2c
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013200:	4611      	mov	r1, r2
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	4798      	blx	r3
        setY(y);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	3330      	adds	r3, #48	; 0x30
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013212:	4611      	mov	r1, r2
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	4798      	blx	r3
    }
 8013218:	bf00      	nop
 801321a:	3708      	adds	r7, #8
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}

08013220 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8013220:	b480      	push	{r7}
 8013222:	b083      	sub	sp, #12
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	460b      	mov	r3, r1
 801322a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	887a      	ldrh	r2, [r7, #2]
 8013230:	811a      	strh	r2, [r3, #8]
    }
 8013232:	bf00      	nop
 8013234:	370c      	adds	r7, #12
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr

0801323e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 801323e:	b480      	push	{r7}
 8013240:	b083      	sub	sp, #12
 8013242:	af00      	add	r7, sp, #0
 8013244:	6078      	str	r0, [r7, #4]
 8013246:	460b      	mov	r3, r1
 8013248:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	887a      	ldrh	r2, [r7, #2]
 801324e:	815a      	strh	r2, [r3, #10]
    }
 8013250:	bf00      	nop
 8013252:	370c      	adds	r7, #12
 8013254:	46bd      	mov	sp, r7
 8013256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325a:	4770      	bx	lr

0801325c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 801325c:	b480      	push	{r7}
 801325e:	b083      	sub	sp, #12
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
    {
    }
 8013264:	bf00      	nop
 8013266:	370c      	adds	r7, #12
 8013268:	46bd      	mov	sp, r7
 801326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326e:	4770      	bx	lr

08013270 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 8013270:	b480      	push	{r7}
 8013272:	b083      	sub	sp, #12
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
    {
    }
 801327a:	bf00      	nop
 801327c:	370c      	adds	r7, #12
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr

08013286 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 8013286:	b480      	push	{r7}
 8013288:	b083      	sub	sp, #12
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
 801328e:	6039      	str	r1, [r7, #0]
    {
    }
 8013290:	bf00      	nop
 8013292:	370c      	adds	r7, #12
 8013294:	46bd      	mov	sp, r7
 8013296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329a:	4770      	bx	lr

0801329c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	460b      	mov	r3, r1
 80132a6:	807b      	strh	r3, [r7, #2]
 80132a8:	4613      	mov	r3, r2
 80132aa:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	3334      	adds	r3, #52	; 0x34
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80132b8:	4611      	mov	r1, r2
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	4798      	blx	r3
        setHeight(height);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	3338      	adds	r3, #56	; 0x38
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80132ca:	4611      	mov	r1, r2
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	4798      	blx	r3
    }
 80132d0:	bf00      	nop
 80132d2:	3708      	adds	r7, #8
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 80132d8:	b480      	push	{r7}
 80132da:	b083      	sub	sp, #12
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
    {
    }
 80132e2:	bf00      	nop
 80132e4:	370c      	adds	r7, #12
 80132e6:	46bd      	mov	sp, r7
 80132e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ec:	4770      	bx	lr

080132ee <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80132ee:	b480      	push	{r7}
 80132f0:	b083      	sub	sp, #12
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	6078      	str	r0, [r7, #4]
    {
    }
 80132f6:	bf00      	nop
 80132f8:	370c      	adds	r7, #12
 80132fa:	46bd      	mov	sp, r7
 80132fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013300:	4770      	bx	lr

08013302 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8013302:	b480      	push	{r7}
 8013304:	b083      	sub	sp, #12
 8013306:	af00      	add	r7, sp, #0
 8013308:	6078      	str	r0, [r7, #4]
 801330a:	460b      	mov	r3, r1
 801330c:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	78fa      	ldrb	r2, [r7, #3]
 8013312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8013316:	bf00      	nop
 8013318:	370c      	adds	r7, #12
 801331a:	46bd      	mov	sp, r7
 801331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013320:	4770      	bx	lr

08013322 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8013322:	b480      	push	{r7}
 8013324:	b083      	sub	sp, #12
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
    {
        return visible;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8013330:	4618      	mov	r0, r3
 8013332:	370c      	adds	r7, #12
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 801333c:	b480      	push	{r7}
 801333e:	b083      	sub	sp, #12
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 801334a:	4618      	mov	r0, r3
 801334c:	370c      	adds	r7, #12
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr

08013356 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8013356:	b580      	push	{r7, lr}
 8013358:	b082      	sub	sp, #8
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
 801335e:	460b      	mov	r3, r1
 8013360:	807b      	strh	r3, [r7, #2]
 8013362:	4613      	mov	r3, r2
 8013364:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	3350      	adds	r3, #80	; 0x50
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	8879      	ldrh	r1, [r7, #2]
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8013376:	b292      	uxth	r2, r2
 8013378:	1a8a      	subs	r2, r1, r2
 801337a:	b292      	uxth	r2, r2
 801337c:	b210      	sxth	r0, r2
 801337e:	8839      	ldrh	r1, [r7, #0]
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8013386:	b292      	uxth	r2, r2
 8013388:	1a8a      	subs	r2, r1, r2
 801338a:	b292      	uxth	r2, r2
 801338c:	b212      	sxth	r2, r2
 801338e:	4601      	mov	r1, r0
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	4798      	blx	r3
    }
 8013394:	bf00      	nop
 8013396:	3708      	adds	r7, #8
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133aa:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133b2:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133ba:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80133bc:	bf00      	nop
 80133be:	370c      	adds	r7, #12
 80133c0:	46bd      	mov	sp, r7
 80133c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c6:	4770      	bx	lr

080133c8 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	60b9      	str	r1, [r7, #8]
 80133d2:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80133d4:	68f8      	ldr	r0, [r7, #12]
 80133d6:	f7ff ffe1 	bl	801339c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681a      	ldr	r2, [r3, #0]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	68fa      	ldr	r2, [r7, #12]
 80133e6:	601a      	str	r2, [r3, #0]
    }
 80133e8:	bf00      	nop
 80133ea:	3710      	adds	r7, #16
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}

080133f0 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
    {
 80133f8:	4a06      	ldr	r2, [pc, #24]	; (8013414 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	601a      	str	r2, [r3, #0]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	3304      	adds	r3, #4
 8013402:	4618      	mov	r0, r3
 8013404:	f000 fe34 	bl	8014070 <_ZN8touchgfx9ContainerD1Ev>
    }
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	4618      	mov	r0, r3
 801340c:	3708      	adds	r7, #8
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	0802fe20 	.word	0x0802fe20

08013418 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
    }
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7ff ffe5 	bl	80133f0 <_ZN8touchgfx6ScreenD1Ev>
 8013426:	213c      	movs	r1, #60	; 0x3c
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	f015 feb2 	bl	8029192 <_ZdlPvj>
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	4618      	mov	r0, r3
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}

08013438 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8013438:	b480      	push	{r7}
 801343a:	b083      	sub	sp, #12
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
    {
    }
 8013440:	bf00      	nop
 8013442:	370c      	adds	r7, #12
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr

0801344c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
    {
    }
 8013454:	bf00      	nop
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
    {
    }
 8013468:	bf00      	nop
 801346a:	370c      	adds	r7, #12
 801346c:	46bd      	mov	sp, r7
 801346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013472:	4770      	bx	lr

08013474 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8013474:	b480      	push	{r7}
 8013476:	b083      	sub	sp, #12
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
    {
    }
 801347c:	bf00      	nop
 801347e:	370c      	adds	r7, #12
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr

08013488 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	460b      	mov	r3, r1
 8013492:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013494:	bf00      	nop
 8013496:	370c      	adds	r7, #12
 8013498:	46bd      	mov	sp, r7
 801349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349e:	4770      	bx	lr

080134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	3304      	adds	r3, #4
 80134ae:	6839      	ldr	r1, [r7, #0]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f003 ffa3 	bl	80173fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80134b6:	bf00      	nop
 80134b8:	3708      	adds	r7, #8
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}

080134be <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80134be:	b580      	push	{r7, lr}
 80134c0:	b084      	sub	sp, #16
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	60f8      	str	r0, [r7, #12]
 80134c6:	607b      	str	r3, [r7, #4]
 80134c8:	460b      	mov	r3, r1
 80134ca:	817b      	strh	r3, [r7, #10]
 80134cc:	4613      	mov	r3, r2
 80134ce:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7ff ff25 	bl	8013322 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80134d8:	4603      	mov	r3, r0
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d008      	beq.n	80134f0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7ff ff2b 	bl	801333c <_ZNK8touchgfx8Drawable11isTouchableEv>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80134ec:	2301      	movs	r3, #1
 80134ee:	e000      	b.n	80134f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80134f0:	2300      	movs	r3, #0
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d002      	beq.n	80134fc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80134f6:	68fa      	ldr	r2, [r7, #12]
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	601a      	str	r2, [r3, #0]
        }
    }
 80134fc:	bf00      	nop
 80134fe:	3710      	adds	r7, #16
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}

08013504 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff fdd0 	bl	80130b4 <_ZN8touchgfx8DrawableC1Ev>
 8013514:	4a03      	ldr	r2, [pc, #12]	; (8013524 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	601a      	str	r2, [r3, #0]
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4618      	mov	r0, r3
 801351e:	3708      	adds	r7, #8
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	0802e464 	.word	0x0802e464

08013528 <_ZN8touchgfx6WidgetD1Ev>:
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	4a05      	ldr	r2, [pc, #20]	; (8013548 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	601a      	str	r2, [r3, #0]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	4618      	mov	r0, r3
 801353a:	f7ff fde9 	bl	8013110 <_ZN8touchgfx8DrawableD1Ev>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	4618      	mov	r0, r3
 8013542:	3708      	adds	r7, #8
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	0802e464 	.word	0x0802e464

0801354c <_ZN8touchgfx6WidgetD0Ev>:
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f7ff ffe7 	bl	8013528 <_ZN8touchgfx6WidgetD1Ev>
 801355a:	2128      	movs	r1, #40	; 0x28
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f015 fe18 	bl	8029192 <_ZdlPvj>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	4618      	mov	r0, r3
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4618      	mov	r0, r3
 8013578:	2326      	movs	r3, #38	; 0x26
 801357a:	461a      	mov	r2, r3
 801357c:	2100      	movs	r1, #0
 801357e:	f015 ffdd 	bl	802953c <memset>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	4618      	mov	r0, r3
 8013586:	f7ff ffbd 	bl	8013504 <_ZN8touchgfx6WidgetC1Ev>
 801358a:	4a0a      	ldr	r2, [pc, #40]	; (80135b4 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	601a      	str	r2, [r3, #0]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	629a      	str	r2, [r3, #40]	; 0x28
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2101      	movs	r1, #1
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7ff fead 	bl	8013302 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	4618      	mov	r0, r3
 80135ac:	3708      	adds	r7, #8
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	0802f75c 	.word	0x0802f75c

080135b8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	683a      	ldr	r2, [r7, #0]
 80135c6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80135c8:	bf00      	nop
 80135ca:	370c      	adds	r7, #12
 80135cc:	46bd      	mov	sp, r7
 80135ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d2:	4770      	bx	lr

080135d4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b082      	sub	sp, #8
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	4a05      	ldr	r2, [pc, #20]	; (80135f4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	601a      	str	r2, [r3, #0]
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7ff ff9f 	bl	8013528 <_ZN8touchgfx6WidgetD1Ev>
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	4618      	mov	r0, r3
 80135ee:	3708      	adds	r7, #8
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}
 80135f4:	0802f75c 	.word	0x0802f75c

080135f8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f7ff ffe7 	bl	80135d4 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013606:	2130      	movs	r1, #48	; 0x30
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f015 fdc2 	bl	8029192 <_ZdlPvj>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	4618      	mov	r0, r3
 8013612:	3708      	adds	r7, #8
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}

08013618 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	4618      	mov	r0, r3
 8013624:	f7ff ffa2 	bl	801356c <_ZN8touchgfx14AbstractButtonC1Ev>
 8013628:	4a0c      	ldr	r2, [pc, #48]	; (801365c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	601a      	str	r2, [r3, #0]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	332e      	adds	r3, #46	; 0x2e
 8013632:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013636:	4618      	mov	r0, r3
 8013638:	f7ff fd2c 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	3330      	adds	r3, #48	; 0x30
 8013640:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013644:	4618      	mov	r0, r3
 8013646:	f7ff fd25 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	22ff      	movs	r2, #255	; 0xff
 801364e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	4618      	mov	r0, r3
 8013656:	3708      	adds	r7, #8
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}
 801365c:	0802f9a8 	.word	0x0802f9a8

08013660 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8013660:	b580      	push	{r7, lr}
 8013662:	b082      	sub	sp, #8
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	4618      	mov	r0, r3
 801366c:	2326      	movs	r3, #38	; 0x26
 801366e:	461a      	mov	r2, r3
 8013670:	2100      	movs	r1, #0
 8013672:	f015 ff63 	bl	802953c <memset>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	4618      	mov	r0, r3
 801367a:	f7ff ff43 	bl	8013504 <_ZN8touchgfx6WidgetC1Ev>
 801367e:	4a09      	ldr	r2, [pc, #36]	; (80136a4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	601a      	str	r2, [r3, #0]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	22ff      	movs	r2, #255	; 0xff
 8013688:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	3328      	adds	r3, #40	; 0x28
 8013690:	2100      	movs	r1, #0
 8013692:	4618      	mov	r0, r3
 8013694:	f7ff fcb8 	bl	8013008 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	4618      	mov	r0, r3
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	0802f8e0 	.word	0x0802f8e0

080136a8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80136a8:	b480      	push	{r7}
 80136aa:	b083      	sub	sp, #12
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	683a      	ldr	r2, [r7, #0]
 80136b6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80136b8:	bf00      	nop
 80136ba:	370c      	adds	r7, #12
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr

080136c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80136c4:	b590      	push	{r4, r7, lr}
 80136c6:	b083      	sub	sp, #12
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	4603      	mov	r3, r0
 80136cc:	71fb      	strb	r3, [r7, #7]
 80136ce:	460b      	mov	r3, r1
 80136d0:	71bb      	strb	r3, [r7, #6]
 80136d2:	4613      	mov	r3, r2
 80136d4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80136d6:	f7ff f81d 	bl	8012714 <_ZN8touchgfx3HAL11getInstanceEv>
 80136da:	4603      	mov	r3, r0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d105      	bne.n	80136ec <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80136e0:	4b0a      	ldr	r3, [pc, #40]	; (801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80136e2:	4a0b      	ldr	r2, [pc, #44]	; (8013710 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 80136e4:	2135      	movs	r1, #53	; 0x35
 80136e6:	480b      	ldr	r0, [pc, #44]	; (8013714 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 80136e8:	f015 fe7e 	bl	80293e8 <__assert_func>
 80136ec:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80136ee:	f7ff f81d 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 80136f2:	6803      	ldr	r3, [r0, #0]
 80136f4:	3328      	adds	r3, #40	; 0x28
 80136f6:	681c      	ldr	r4, [r3, #0]
 80136f8:	797b      	ldrb	r3, [r7, #5]
 80136fa:	79ba      	ldrb	r2, [r7, #6]
 80136fc:	79f9      	ldrb	r1, [r7, #7]
 80136fe:	47a0      	blx	r4
 8013700:	4603      	mov	r3, r0
    }
 8013702:	4618      	mov	r0, r3
 8013704:	370c      	adds	r7, #12
 8013706:	46bd      	mov	sp, r7
 8013708:	bd90      	pop	{r4, r7, pc}
 801370a:	bf00      	nop
 801370c:	0802d874 	.word	0x0802d874
 8013710:	0802d8b8 	.word	0x0802d8b8
 8013714:	0802d914 	.word	0x0802d914

08013718 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	4618      	mov	r0, r3
 8013726:	2326      	movs	r3, #38	; 0x26
 8013728:	461a      	mov	r2, r3
 801372a:	2100      	movs	r1, #0
 801372c:	f015 ff06 	bl	802953c <memset>
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	4618      	mov	r0, r3
 8013734:	f7ff fee6 	bl	8013504 <_ZN8touchgfx6WidgetC1Ev>
 8013738:	4a0b      	ldr	r2, [pc, #44]	; (8013768 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	601a      	str	r2, [r3, #0]
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	3326      	adds	r3, #38	; 0x26
 8013742:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013746:	4618      	mov	r0, r3
 8013748:	f7ff fca4 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	22ff      	movs	r2, #255	; 0xff
 8013750:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bitmap);
 8013754:	6839      	ldr	r1, [r7, #0]
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f005 fa44 	bl	8018be4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	4618      	mov	r0, r3
 8013760:	3708      	adds	r7, #8
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop
 8013768:	0802faf4 	.word	0x0802faf4

0801376c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 801376c:	b480      	push	{r7}
 801376e:	b083      	sub	sp, #12
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	460b      	mov	r3, r1
 8013776:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8013778:	4a06      	ldr	r2, [pc, #24]	; (8013794 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	601a      	str	r2, [r3, #0]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	887a      	ldrh	r2, [r7, #2]
 8013782:	809a      	strh	r2, [r3, #4]
    }
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	4618      	mov	r0, r3
 8013788:	370c      	adds	r7, #12
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr
 8013792:	bf00      	nop
 8013794:	0802e22c 	.word	0x0802e22c

08013798 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	4618      	mov	r0, r3
 80137a4:	2326      	movs	r3, #38	; 0x26
 80137a6:	461a      	mov	r2, r3
 80137a8:	2100      	movs	r1, #0
 80137aa:	f015 fec7 	bl	802953c <memset>
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7ff fea7 	bl	8013504 <_ZN8touchgfx6WidgetC1Ev>
 80137b6:	4a14      	ldr	r2, [pc, #80]	; (8013808 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	601a      	str	r2, [r3, #0]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	3328      	adds	r3, #40	; 0x28
 80137c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7ff ffd1 	bl	801376c <_ZN8touchgfx9TypedTextC1Et>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	3330      	adds	r3, #48	; 0x30
 80137ce:	2100      	movs	r1, #0
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7ff fc19 	bl	8013008 <_ZN8touchgfx9colortypeC1Em>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2200      	movs	r2, #0
 80137da:	869a      	strh	r2, [r3, #52]	; 0x34
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	22ff      	movs	r2, #255	; 0xff
 80137e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2200      	movs	r2, #0
 80137e8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2200      	movs	r2, #0
 80137f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2200      	movs	r2, #0
 80137f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	4618      	mov	r0, r3
 8013800:	3708      	adds	r7, #8
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	0802f838 	.word	0x0802f838

0801380c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	4a08      	ldr	r2, [pc, #32]	; (8013838 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	601a      	str	r2, [r3, #0]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	3328      	adds	r3, #40	; 0x28
 801381e:	4618      	mov	r0, r3
 8013820:	f7fe fd0e 	bl	8012240 <_ZN8touchgfx9TypedTextD1Ev>
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	4618      	mov	r0, r3
 8013828:	f7ff fe7e 	bl	8013528 <_ZN8touchgfx6WidgetD1Ev>
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	4618      	mov	r0, r3
 8013830:	3708      	adds	r7, #8
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}
 8013836:	bf00      	nop
 8013838:	0802f838 	.word	0x0802f838

0801383c <_ZN8touchgfx8TextAreaD0Ev>:
 801383c:	b580      	push	{r7, lr}
 801383e:	b082      	sub	sp, #8
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f7ff ffe1 	bl	801380c <_ZN8touchgfx8TextAreaD1Ev>
 801384a:	213c      	movs	r1, #60	; 0x3c
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f015 fca0 	bl	8029192 <_ZdlPvj>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4618      	mov	r0, r3
 8013856:	3708      	adds	r7, #8
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}

0801385c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 801385c:	b580      	push	{r7, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	4618      	mov	r0, r3
 8013868:	f7ff ff96 	bl	8013798 <_ZN8touchgfx8TextAreaC1Ev>
 801386c:	4a05      	ldr	r2, [pc, #20]	; (8013884 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	601a      	str	r2, [r3, #0]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	2200      	movs	r2, #0
 8013876:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	4618      	mov	r0, r3
 801387c:	3708      	adds	r7, #8
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	0802fa4c 	.word	0x0802fa4c

08013888 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 8013888:	b480      	push	{r7}
 801388a:	b083      	sub	sp, #12
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	460b      	mov	r3, r1
 8013892:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	78fa      	ldrb	r2, [r7, #3]
 8013898:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    }
 801389c:	bf00      	nop
 801389e:	370c      	adds	r7, #12
 80138a0:	46bd      	mov	sp, r7
 80138a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a6:	4770      	bx	lr

080138a8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b084      	sub	sp, #16
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	60b9      	str	r1, [r7, #8]
 80138b2:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	8812      	ldrh	r2, [r2, #0]
 80138ba:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	687a      	ldr	r2, [r7, #4]
 80138c0:	68b9      	ldr	r1, [r7, #8]
 80138c2:	4618      	mov	r0, r3
 80138c4:	f005 f81c 	bl	8018900 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 80138c8:	bf00      	nop
 80138ca:	3710      	adds	r7, #16
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}

080138d0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b082      	sub	sp, #8
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	4a05      	ldr	r2, [pc, #20]	; (80138f0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	601a      	str	r2, [r3, #0]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7ff fd85 	bl	80133f0 <_ZN8touchgfx6ScreenD1Ev>
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	4618      	mov	r0, r3
 80138ea:	3708      	adds	r7, #8
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}
 80138f0:	0802e418 	.word	0x0802e418

080138f4 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f7ff ffe7 	bl	80138d0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8013902:	2140      	movs	r1, #64	; 0x40
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f015 fc44 	bl	8029192 <_ZdlPvj>
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	4618      	mov	r0, r3
 801390e:	3708      	adds	r7, #8
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}

08013914 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8013914:	b580      	push	{r7, lr}
 8013916:	b082      	sub	sp, #8
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	4a25      	ldr	r2, [pc, #148]	; (80139b4 <_ZN14screenViewBaseD1Ev+0xa0>)
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	601a      	str	r2, [r3, #0]
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8013928:	4618      	mov	r0, r3
 801392a:	f000 fb7f 	bl	801402c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8013934:	4618      	mov	r0, r3
 8013936:	f000 fc6d 	bl	8014214 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013940:	4618      	mov	r0, r3
 8013942:	f000 fc67 	bl	8014214 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801394c:	4618      	mov	r0, r3
 801394e:	f000 f859 	bl	8013a04 <_ZN8touchgfx6ButtonD1Ev>
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013958:	4618      	mov	r0, r3
 801395a:	f000 fc39 	bl	80141d0 <_ZN8touchgfx12ToggleButtonD1Ev>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013964:	4618      	mov	r0, r3
 8013966:	f000 fc11 	bl	801418c <_ZN8touchgfx5ImageD1Ev>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013970:	4618      	mov	r0, r3
 8013972:	f000 fc0b 	bl	801418c <_ZN8touchgfx5ImageD1Ev>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f503 7392 	add.w	r3, r3, #292	; 0x124
 801397c:	4618      	mov	r0, r3
 801397e:	f000 fc05 	bl	801418c <_ZN8touchgfx5ImageD1Ev>
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	33f8      	adds	r3, #248	; 0xf8
 8013986:	4618      	mov	r0, r3
 8013988:	f000 fc00 	bl	801418c <_ZN8touchgfx5ImageD1Ev>
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	336c      	adds	r3, #108	; 0x6c
 8013990:	4618      	mov	r0, r3
 8013992:	f000 fbd3 	bl	801413c <_ZN8touchgfx12DigitalClockD1Ev>
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	3340      	adds	r3, #64	; 0x40
 801399a:	4618      	mov	r0, r3
 801399c:	f000 fb8a 	bl	80140b4 <_ZN8touchgfx3BoxD1Ev>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7ff ff94 	bl	80138d0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	4618      	mov	r0, r3
 80139ac:	3708      	adds	r7, #8
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	0802e3c4 	.word	0x0802e3c4

080139b8 <_ZN14screenViewBaseD0Ev>:
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f7ff ffa7 	bl	8013914 <_ZN14screenViewBaseD1Ev>
 80139c6:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f015 fbe1 	bl	8029192 <_ZdlPvj>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	3708      	adds	r7, #8
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}

080139da <_ZN14screenViewBase22updateOnOffButtonStateEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void updateOnOffButtonState()
 80139da:	b480      	push	{r7}
 80139dc:	b083      	sub	sp, #12
 80139de:	af00      	add	r7, sp, #0
 80139e0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 80139e2:	bf00      	nop
 80139e4:	370c      	adds	r7, #12
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr

080139ee <_ZN14screenViewBase22updateSetUpButtonStateEv>:

    virtual void updateSetUpButtonState()
 80139ee:	b480      	push	{r7}
 80139f0:	b083      	sub	sp, #12
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 80139f6:	bf00      	nop
 80139f8:	370c      	adds	r7, #12
 80139fa:	46bd      	mov	sp, r7
 80139fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a00:	4770      	bx	lr
	...

08013a04 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	4a05      	ldr	r2, [pc, #20]	; (8013a24 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	601a      	str	r2, [r3, #0]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7ff fddd 	bl	80135d4 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3708      	adds	r7, #8
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	0802f9a8 	.word	0x0802f9a8

08013a28 <_ZN8touchgfx6ButtonD0Ev>:
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f7ff ffe7 	bl	8013a04 <_ZN8touchgfx6ButtonD1Ev>
 8013a36:	2134      	movs	r1, #52	; 0x34
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f015 fbaa 	bl	8029192 <_ZdlPvj>
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	4618      	mov	r0, r3
 8013a42:	3708      	adds	r7, #8
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7ff fde0 	bl	8013618 <_ZN8touchgfx6ButtonC1Ev>
 8013a58:	4a07      	ldr	r2, [pc, #28]	; (8013a78 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	601a      	str	r2, [r3, #0]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	3334      	adds	r3, #52	; 0x34
 8013a62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff fb14 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3708      	adds	r7, #8
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	0802f7c8 	.word	0x0802f7c8

08013a7c <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

screenViewBase::screenViewBase() :
 8013a7c:	b590      	push	{r4, r7, lr}
 8013a7e:	b0a1      	sub	sp, #132	; 0x84
 8013a80:	af02      	add	r7, sp, #8
 8013a82:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	4618      	mov	r0, r3
 8013a88:	f000 fa6a 	bl	8013f60 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8013a8c:	4ae0      	ldr	r2, [pc, #896]	; (8013e10 <_ZN14screenViewBaseC1Ev+0x394>)
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	601a      	str	r2, [r3, #0]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	3340      	adds	r3, #64	; 0x40
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7ff fde2 	bl	8013660 <_ZN8touchgfx3BoxC1Ev>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	336c      	adds	r3, #108	; 0x6c
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f003 fb69 	bl	8017178 <_ZN8touchgfx12DigitalClockC1Ev>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 8013aac:	f107 0310 	add.w	r3, r7, #16
 8013ab0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7ff faed 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013aba:	f107 0310 	add.w	r3, r7, #16
 8013abe:	4619      	mov	r1, r3
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f7ff fe29 	bl	8013718 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8013acc:	f107 0314 	add.w	r3, r7, #20
 8013ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7ff fadd 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013ada:	f107 0314 	add.w	r3, r7, #20
 8013ade:	4619      	mov	r1, r3
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	f7ff fe19 	bl	8013718 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8013aec:	f107 0318 	add.w	r3, r7, #24
 8013af0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7ff facd 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013afa:	f107 0318 	add.w	r3, r7, #24
 8013afe:	4619      	mov	r1, r3
 8013b00:	4620      	mov	r0, r4
 8013b02:	f7ff fe09 	bl	8013718 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 8013b0c:	f107 031c 	add.w	r3, r7, #28
 8013b10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7ff fabd 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013b1a:	f107 031c 	add.w	r3, r7, #28
 8013b1e:	4619      	mov	r1, r3
 8013b20:	4620      	mov	r0, r4
 8013b22:	f7ff fdf9 	bl	8013718 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7ff ff8b 	bl	8013a48 <_ZN8touchgfx12ToggleButtonC1Ev>
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7ff fd6d 	bl	8013618 <_ZN8touchgfx6ButtonC1Ev>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7ff fe89 	bl	801385c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7ff fe83 	bl	801385c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8013b5c:	4bad      	ldr	r3, [pc, #692]	; (8013e14 <_ZN14screenViewBaseC1Ev+0x398>)
 8013b5e:	623b      	str	r3, [r7, #32]
 8013b60:	2300      	movs	r3, #0
 8013b62:	627b      	str	r3, [r7, #36]	; 0x24
 8013b64:	f107 0320 	add.w	r3, r7, #32
 8013b68:	cb0c      	ldmia	r3, {r2, r3}
 8013b6a:	6879      	ldr	r1, [r7, #4]
 8013b6c:	f000 fa1e 	bl	8013fac <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 240, 320);
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013b76:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8013b7a:	9300      	str	r3, [sp, #0]
 8013b7c:	23f0      	movs	r3, #240	; 0xf0
 8013b7e:	2200      	movs	r2, #0
 8013b80:	2100      	movs	r1, #0
 8013b82:	f7ff faf0 	bl	8013166 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	2100      	movs	r1, #0
 8013b90:	2000      	movs	r0, #0
 8013b92:	f7ff fd97 	bl	80136c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b96:	4603      	mov	r3, r0
 8013b98:	4619      	mov	r1, r3
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	f7ff fd84 	bl	80136a8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    digitalClock1.setPosition(7, 16, 66, 31);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8013ba6:	231f      	movs	r3, #31
 8013ba8:	9300      	str	r3, [sp, #0]
 8013baa:	2342      	movs	r3, #66	; 0x42
 8013bac:	2210      	movs	r2, #16
 8013bae:	2107      	movs	r1, #7
 8013bb0:	f7ff fad9 	bl	8013166 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013bba:	2200      	movs	r2, #0
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	2000      	movs	r0, #0
 8013bc0:	f7ff fd80 	bl	80136c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	4620      	mov	r0, r4
 8013bca:	f003 f99a 	bl	8016f02 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bd8:	2100      	movs	r1, #0
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7ff fdc6 	bl	801376c <_ZN8touchgfx9TypedTextC1Et>
 8013be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013be4:	4619      	mov	r1, r3
 8013be6:	4620      	mov	r0, r4
 8013be8:	f003 f9d0 	bl	8016f8c <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 8013bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7fe fb25 	bl	8012240 <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	336c      	adds	r3, #108	; 0x6c
 8013bfa:	2101      	movs	r1, #1
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f003 fafd 	bl	80171fc <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	336c      	adds	r3, #108	; 0x6c
 8013c06:	2101      	movs	r1, #1
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7ff fe3d 	bl	8013888 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock1.setTime24Hour(9, 10, 0);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8013c14:	2300      	movs	r3, #0
 8013c16:	220a      	movs	r2, #10
 8013c18:	2109      	movs	r1, #9
 8013c1a:	f003 faf2 	bl	8017202 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>

    humImage.setXY(9, 160);
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	33f8      	adds	r3, #248	; 0xf8
 8013c22:	22a0      	movs	r2, #160	; 0xa0
 8013c24:	2109      	movs	r1, #9
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7ff fadc 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
    humImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_HUMIDITY_64_ID));
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 8013c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013c36:	2103      	movs	r1, #3
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7ff fa2b 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013c3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013c42:	4619      	mov	r1, r3
 8013c44:	4620      	mov	r0, r4
 8013c46:	f004 ffcd 	bl	8018be4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    tempImage.setXY(-7, 47);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8013c50:	222f      	movs	r2, #47	; 0x2f
 8013c52:	f06f 0106 	mvn.w	r1, #6
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7ff fac4 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
    tempImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_TEMPERATURE_96_ID));
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8013c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013c66:	2106      	movs	r1, #6
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7ff fa13 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013c6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013c72:	4619      	mov	r1, r3
 8013c74:	4620      	mov	r0, r4
 8013c76:	f004 ffb5 	bl	8018be4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    wifiImage.setXY(185, 7);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013c80:	2207      	movs	r2, #7
 8013c82:	21b9      	movs	r1, #185	; 0xb9
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7ff faad 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
    wifiImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_WI_FI_48_ID));
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8013c90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013c94:	2107      	movs	r1, #7
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7ff f9fc 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013c9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	f004 ff9e 	bl	8018be4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    celsiusImage.setXY(177, 79);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013cae:	224f      	movs	r2, #79	; 0x4f
 8013cb0:	21b1      	movs	r1, #177	; 0xb1
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7ff fa96 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
    celsiusImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_CELSIUS_32_ID));
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 8013cbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013cc2:	2102      	movs	r1, #2
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7ff f9e5 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013cca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013cce:	4619      	mov	r1, r3
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	f004 ff87 	bl	8018be4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    humOnOffButton.setXY(92, 251);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013cdc:	22fb      	movs	r2, #251	; 0xfb
 8013cde:	215c      	movs	r1, #92	; 0x5c
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7ff fa7f 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
    humOnOffButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8013cec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013cf0:	2100      	movs	r1, #0
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7ff f9ce 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013cf8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013cfc:	2101      	movs	r1, #1
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7ff f9c8 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013d04:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013d08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	4620      	mov	r0, r4
 8013d10:	f7ff fdca 	bl	80138a8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    humOnOffButton.setAction(buttonCallback);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8013d20:	4619      	mov	r1, r3
 8013d22:	4610      	mov	r0, r2
 8013d24:	f7ff fc48 	bl	80135b8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    setUpButton.setXY(17, 246);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8013d2e:	22f6      	movs	r2, #246	; 0xf6
 8013d30:	2111      	movs	r1, #17
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7ff fa56 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
    setUpButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_SETTINGS_48_ID), touchgfx::Bitmap(BITMAP_ICONS8_SETTINGS_48_ID));
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8013d3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d42:	2104      	movs	r1, #4
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7ff f9a5 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013d4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013d4e:	2104      	movs	r1, #4
 8013d50:	4618      	mov	r0, r3
 8013d52:	f7ff f99f 	bl	8013094 <_ZN8touchgfx6BitmapC1Et>
 8013d56:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013d5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d5e:	4619      	mov	r1, r3
 8013d60:	4620      	mov	r0, r4
 8013d62:	f004 fdcd 	bl	8018900 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    setUpButton.setAction(buttonCallback);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8013d72:	4619      	mov	r1, r3
 8013d74:	4610      	mov	r0, r2
 8013d76:	f7ff fc1f 	bl	80135b8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    humText.setXY(164, 180);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013d80:	22b4      	movs	r2, #180	; 0xb4
 8013d82:	21a4      	movs	r1, #164	; 0xa4
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7ff fa2d 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
    humText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013d90:	22ff      	movs	r2, #255	; 0xff
 8013d92:	21ff      	movs	r1, #255	; 0xff
 8013d94:	20ff      	movs	r0, #255	; 0xff
 8013d96:	f7ff fc95 	bl	80136c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	663c      	str	r4, [r7, #96]	; 0x60
 8013d9e:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8013da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013da2:	68fa      	ldr	r2, [r7, #12]
 8013da4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013da6:	bf00      	nop
    humText.setLinespacing(0);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8013db0:	2300      	movs	r3, #0
 8013db2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8013db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013db8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8013dbc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013dbe:	bf00      	nop
    humText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013dc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013dca:	2101      	movs	r1, #1
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7ff fccd 	bl	801376c <_ZN8touchgfx9TypedTextC1Et>
 8013dd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	4620      	mov	r0, r4
 8013dda:	f004 fd5a 	bl	8018892 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8013dde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7fe fa2c 	bl	8012240 <_ZN8touchgfx9TypedTextD1Ev>

    tempText.setXY(156, 71);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8013dee:	2247      	movs	r2, #71	; 0x47
 8013df0:	219c      	movs	r1, #156	; 0x9c
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7ff f9f6 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
    tempText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8013dfe:	22ff      	movs	r2, #255	; 0xff
 8013e00:	21ff      	movs	r1, #255	; 0xff
 8013e02:	20ff      	movs	r0, #255	; 0xff
 8013e04:	f7ff fc5e 	bl	80136c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	66fc      	str	r4, [r7, #108]	; 0x6c
 8013e0c:	e004      	b.n	8013e18 <_ZN14screenViewBaseC1Ev+0x39c>
 8013e0e:	bf00      	nop
 8013e10:	0802e3c4 	.word	0x0802e3c4
 8013e14:	08013f1d 	.word	0x08013f1d
 8013e18:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8013e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e1c:	68ba      	ldr	r2, [r7, #8]
 8013e1e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013e20:	bf00      	nop
    tempText.setLinespacing(0);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8013e28:	677b      	str	r3, [r7, #116]	; 0x74
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        linespace = space;
 8013e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e32:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8013e36:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013e38:	bf00      	nop
    tempText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8013e40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e44:	2102      	movs	r1, #2
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7ff fc90 	bl	801376c <_ZN8touchgfx9TypedTextC1Et>
 8013e4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e50:	4619      	mov	r1, r3
 8013e52:	4620      	mov	r0, r4
 8013e54:	f004 fd1d 	bl	8018892 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8013e58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7fe f9ef 	bl	8012240 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	3340      	adds	r3, #64	; 0x40
 8013e68:	4619      	mov	r1, r3
 8013e6a:	4610      	mov	r0, r2
 8013e6c:	f7ff fb18 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(digitalClock1);
 8013e70:	687a      	ldr	r2, [r7, #4]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	336c      	adds	r3, #108	; 0x6c
 8013e76:	4619      	mov	r1, r3
 8013e78:	4610      	mov	r0, r2
 8013e7a:	f7ff fb11 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humImage);
 8013e7e:	687a      	ldr	r2, [r7, #4]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	33f8      	adds	r3, #248	; 0xf8
 8013e84:	4619      	mov	r1, r3
 8013e86:	4610      	mov	r0, r2
 8013e88:	f7ff fb0a 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempImage);
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8013e94:	4619      	mov	r1, r3
 8013e96:	4610      	mov	r0, r2
 8013e98:	f7ff fb02 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(wifiImage);
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	4610      	mov	r0, r2
 8013ea8:	f7ff fafa 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(celsiusImage);
 8013eac:	687a      	ldr	r2, [r7, #4]
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013eb4:	4619      	mov	r1, r3
 8013eb6:	4610      	mov	r0, r2
 8013eb8:	f7ff faf2 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humOnOffButton);
 8013ebc:	687a      	ldr	r2, [r7, #4]
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	4610      	mov	r0, r2
 8013ec8:	f7ff faea 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(setUpButton);
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	4610      	mov	r0, r2
 8013ed8:	f7ff fae2 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humText);
 8013edc:	687a      	ldr	r2, [r7, #4]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	4610      	mov	r0, r2
 8013ee8:	f7ff fada 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempText);
 8013eec:	687a      	ldr	r2, [r7, #4]
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8013ef4:	4619      	mov	r1, r3
 8013ef6:	4610      	mov	r0, r2
 8013ef8:	f7ff fad2 	bl	80134a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	4618      	mov	r0, r3
 8013f00:	377c      	adds	r7, #124	; 0x7c
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd90      	pop	{r4, r7, pc}
 8013f06:	bf00      	nop

08013f08 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]

}
 8013f10:	bf00      	nop
 8013f12:	370c      	adds	r7, #12
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr

08013f1c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	6039      	str	r1, [r7, #0]
    if (&src == &humOnOffButton)
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013f2c:	683a      	ldr	r2, [r7, #0]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d106      	bne.n	8013f40 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When humOnOffButton clicked call virtual function
        //Call updateOnOffButtonState
        updateOnOffButtonState();
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	332c      	adds	r3, #44	; 0x2c
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	4798      	blx	r3
        //Interaction2
        //When setUpButton clicked call virtual function
        //Call updateSetUpButtonState
        updateSetUpButtonState();
    }
}
 8013f3e:	e00b      	b.n	8013f58 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &setUpButton)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8013f46:	683a      	ldr	r2, [r7, #0]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d105      	bne.n	8013f58 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        updateSetUpButtonState();
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	3330      	adds	r3, #48	; 0x30
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	4798      	blx	r3
}
 8013f58:	bf00      	nop
 8013f5a:	3708      	adds	r7, #8
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}

08013f60 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f007 fdbc 	bl	801bae8 <_ZN8touchgfx6ScreenC1Ev>
 8013f70:	4a05      	ldr	r2, [pc, #20]	; (8013f88 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	601a      	str	r2, [r3, #0]
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3708      	adds	r7, #8
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
 8013f86:	bf00      	nop
 8013f88:	0802e418 	.word	0x0802e418

08013f8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8013f8c:	b480      	push	{r7}
 8013f8e:	b083      	sub	sp, #12
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	4a04      	ldr	r2, [pc, #16]	; (8013fa8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	601a      	str	r2, [r3, #0]
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	370c      	adds	r7, #12
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa6:	4770      	bx	lr
 8013fa8:	0802e44c 	.word	0x0802e44c

08013fac <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b084      	sub	sp, #16
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	4639      	mov	r1, r7
 8013fb8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7ff ffe4 	bl	8013f8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013fc4:	4a08      	ldr	r2, [pc, #32]	; (8013fe8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	68ba      	ldr	r2, [r7, #8]
 8013fce:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	3308      	adds	r3, #8
 8013fd4:	463a      	mov	r2, r7
 8013fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013fda:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}
 8013fe8:	0802e400 	.word	0x0802e400

08013fec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8013fec:	b480      	push	{r7}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
    }
 8013ff4:	4a04      	ldr	r2, [pc, #16]	; (8014008 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	601a      	str	r2, [r3, #0]
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	370c      	adds	r7, #12
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr
 8014008:	0802e44c 	.word	0x0802e44c

0801400c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
    }
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f7ff ffe9 	bl	8013fec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801401a:	2104      	movs	r1, #4
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f015 f8b8 	bl	8029192 <_ZdlPvj>
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	4618      	mov	r0, r3
 8014026:	3708      	adds	r7, #8
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}

0801402c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801402c:	b580      	push	{r7, lr}
 801402e:	b082      	sub	sp, #8
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	4a05      	ldr	r2, [pc, #20]	; (801404c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	601a      	str	r2, [r3, #0]
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	4618      	mov	r0, r3
 801403e:	f7ff ffd5 	bl	8013fec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	4618      	mov	r0, r3
 8014046:	3708      	adds	r7, #8
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	0802e400 	.word	0x0802e400

08014050 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7ff ffe7 	bl	801402c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801405e:	2110      	movs	r1, #16
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f015 f896 	bl	8029192 <_ZdlPvj>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	4618      	mov	r0, r3
 801406a:	3708      	adds	r7, #8
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	4a05      	ldr	r2, [pc, #20]	; (8014090 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	4618      	mov	r0, r3
 8014082:	f7ff f845 	bl	8013110 <_ZN8touchgfx8DrawableD1Ev>
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	4618      	mov	r0, r3
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	0802ef48 	.word	0x0802ef48

08014094 <_ZN8touchgfx9ContainerD0Ev>:
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f7ff ffe7 	bl	8014070 <_ZN8touchgfx9ContainerD1Ev>
 80140a2:	212c      	movs	r1, #44	; 0x2c
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f015 f874 	bl	8029192 <_ZdlPvj>
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	4618      	mov	r0, r3
 80140ae:	3708      	adds	r7, #8
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	4a05      	ldr	r2, [pc, #20]	; (80140d4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	601a      	str	r2, [r3, #0]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7ff fa2f 	bl	8013528 <_ZN8touchgfx6WidgetD1Ev>
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	4618      	mov	r0, r3
 80140ce:	3708      	adds	r7, #8
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}
 80140d4:	0802f8e0 	.word	0x0802f8e0

080140d8 <_ZN8touchgfx3BoxD0Ev>:
 80140d8:	b580      	push	{r7, lr}
 80140da:	b082      	sub	sp, #8
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f7ff ffe7 	bl	80140b4 <_ZN8touchgfx3BoxD1Ev>
 80140e6:	212c      	movs	r1, #44	; 0x2c
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f015 f852 	bl	8029192 <_ZdlPvj>
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	4618      	mov	r0, r3
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
 8014100:	4a05      	ldr	r2, [pc, #20]	; (8014118 <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	601a      	str	r2, [r3, #0]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	4618      	mov	r0, r3
 801410a:	f7ff ffb1 	bl	8014070 <_ZN8touchgfx9ContainerD1Ev>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	4618      	mov	r0, r3
 8014112:	3708      	adds	r7, #8
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}
 8014118:	0802edec 	.word	0x0802edec

0801411c <_ZN8touchgfx13AbstractClockD0Ev>:
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f7ff ffe7 	bl	80140f8 <_ZN8touchgfx13AbstractClockD1Ev>
 801412a:	2130      	movs	r1, #48	; 0x30
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f015 f830 	bl	8029192 <_ZdlPvj>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	4618      	mov	r0, r3
 8014136:	3708      	adds	r7, #8
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}

0801413c <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	4a08      	ldr	r2, [pc, #32]	; (8014168 <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	601a      	str	r2, [r3, #0]
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	3334      	adds	r3, #52	; 0x34
 801414e:	4618      	mov	r0, r3
 8014150:	f000 f860 	bl	8014214 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	4618      	mov	r0, r3
 8014158:	f7ff ffce 	bl	80140f8 <_ZN8touchgfx13AbstractClockD1Ev>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	4618      	mov	r0, r3
 8014160:	3708      	adds	r7, #8
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	0802ed04 	.word	0x0802ed04

0801416c <_ZN8touchgfx12DigitalClockD0Ev>:
 801416c:	b580      	push	{r7, lr}
 801416e:	b082      	sub	sp, #8
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f7ff ffe1 	bl	801413c <_ZN8touchgfx12DigitalClockD1Ev>
 801417a:	218c      	movs	r1, #140	; 0x8c
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f015 f808 	bl	8029192 <_ZdlPvj>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	4618      	mov	r0, r3
 8014186:	3708      	adds	r7, #8
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}

0801418c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	4a05      	ldr	r2, [pc, #20]	; (80141ac <_ZN8touchgfx5ImageD1Ev+0x20>)
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	601a      	str	r2, [r3, #0]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	4618      	mov	r0, r3
 801419e:	f7ff f9c3 	bl	8013528 <_ZN8touchgfx6WidgetD1Ev>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	4618      	mov	r0, r3
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	0802faf4 	.word	0x0802faf4

080141b0 <_ZN8touchgfx5ImageD0Ev>:
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f7ff ffe7 	bl	801418c <_ZN8touchgfx5ImageD1Ev>
 80141be:	212c      	movs	r1, #44	; 0x2c
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f014 ffe6 	bl	8029192 <_ZdlPvj>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	4618      	mov	r0, r3
 80141ca:	3708      	adds	r7, #8
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <_ZN8touchgfx12ToggleButtonD1Ev>:
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	4a05      	ldr	r2, [pc, #20]	; (80141f0 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	601a      	str	r2, [r3, #0]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7ff fc0f 	bl	8013a04 <_ZN8touchgfx6ButtonD1Ev>
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	4618      	mov	r0, r3
 80141ea:	3708      	adds	r7, #8
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}
 80141f0:	0802f7c8 	.word	0x0802f7c8

080141f4 <_ZN8touchgfx12ToggleButtonD0Ev>:
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f7ff ffe7 	bl	80141d0 <_ZN8touchgfx12ToggleButtonD1Ev>
 8014202:	2138      	movs	r1, #56	; 0x38
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f014 ffc4 	bl	8029192 <_ZdlPvj>
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	4618      	mov	r0, r3
 801420e:	3708      	adds	r7, #8
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	4a05      	ldr	r2, [pc, #20]	; (8014234 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	601a      	str	r2, [r3, #0]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	4618      	mov	r0, r3
 8014226:	f7ff faf1 	bl	801380c <_ZN8touchgfx8TextAreaD1Ev>
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	4618      	mov	r0, r3
 801422e:	3708      	adds	r7, #8
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}
 8014234:	0802fa4c 	.word	0x0802fa4c

08014238 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f7ff ffe7 	bl	8014214 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014246:	2140      	movs	r1, #64	; 0x40
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f014 ffa2 	bl	8029192 <_ZdlPvj>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4618      	mov	r0, r3
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	68d2      	ldr	r2, [r2, #12]
 801426a:	1052      	asrs	r2, r2, #1
 801426c:	1898      	adds	r0, r3, r2
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	68db      	ldr	r3, [r3, #12]
 8014272:	f003 0301 	and.w	r3, r3, #1
 8014276:	2b00      	cmp	r3, #0
 8014278:	d102      	bne.n	8014280 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	689b      	ldr	r3, [r3, #8]
 801427e:	e00a      	b.n	8014296 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	687a      	ldr	r2, [r7, #4]
 8014286:	68d2      	ldr	r2, [r2, #12]
 8014288:	1052      	asrs	r2, r2, #1
 801428a:	4413      	add	r3, r2
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	687a      	ldr	r2, [r7, #4]
 8014290:	6892      	ldr	r2, [r2, #8]
 8014292:	4413      	add	r3, r2
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	6839      	ldr	r1, [r7, #0]
 8014298:	4798      	blx	r3
    }
 801429a:	bf00      	nop
 801429c:	3708      	adds	r7, #8
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}

080142a2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80142a2:	b480      	push	{r7}
 80142a4:	b083      	sub	sp, #12
 80142a6:	af00      	add	r7, sp, #0
 80142a8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d010      	beq.n	80142d4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	689b      	ldr	r3, [r3, #8]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d107      	bne.n	80142ca <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	68db      	ldr	r3, [r3, #12]
 80142be:	f003 0301 	and.w	r3, r3, #1
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d101      	bne.n	80142ca <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80142c6:	2301      	movs	r3, #1
 80142c8:	e000      	b.n	80142cc <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80142ca:	2300      	movs	r3, #0
 80142cc:	2b01      	cmp	r3, #1
 80142ce:	d001      	beq.n	80142d4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80142d0:	2301      	movs	r3, #1
 80142d2:	e000      	b.n	80142d6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80142d4:	2300      	movs	r3, #0
    }
 80142d6:	4618      	mov	r0, r3
 80142d8:	370c      	adds	r7, #12
 80142da:	46bd      	mov	sp, r7
 80142dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e0:	4770      	bx	lr
	...

080142e4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80142e4:	b480      	push	{r7}
 80142e6:	af00      	add	r7, sp, #0
    return bitmap_database;
 80142e8:	4b02      	ldr	r3, [pc, #8]	; (80142f4 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	46bd      	mov	sp, r7
 80142ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f2:	4770      	bx	lr
 80142f4:	0802e4c0 	.word	0x0802e4c0

080142f8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80142f8:	b480      	push	{r7}
 80142fa:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80142fc:	230c      	movs	r3, #12
}
 80142fe:	4618      	mov	r0, r3
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8014308:	b480      	push	{r7}
 801430a:	b085      	sub	sp, #20
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	460b      	mov	r3, r1
 8014312:	607a      	str	r2, [r7, #4]
 8014314:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8014316:	2300      	movs	r3, #0
    }
 8014318:	4618      	mov	r0, r3
 801431a:	3714      	adds	r7, #20
 801431c:	46bd      	mov	sp, r7
 801431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014322:	4770      	bx	lr

08014324 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8014324:	b480      	push	{r7}
 8014326:	b083      	sub	sp, #12
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801432c:	2300      	movs	r3, #0
    }
 801432e:	4618      	mov	r0, r3
 8014330:	370c      	adds	r7, #12
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr
	...

0801433c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801433c:	b480      	push	{r7}
 801433e:	b085      	sub	sp, #20
 8014340:	af00      	add	r7, sp, #0
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	60b9      	str	r1, [r7, #8]
 8014346:	4613      	mov	r3, r2
 8014348:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 801434a:	4a07      	ldr	r2, [pc, #28]	; (8014368 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8014350:	4a06      	ldr	r2, [pc, #24]	; (801436c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8014356:	4a06      	ldr	r2, [pc, #24]	; (8014370 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8014358:	88fb      	ldrh	r3, [r7, #6]
 801435a:	8013      	strh	r3, [r2, #0]
    }
 801435c:	bf00      	nop
 801435e:	3714      	adds	r7, #20
 8014360:	46bd      	mov	sp, r7
 8014362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014366:	4770      	bx	lr
 8014368:	2000b784 	.word	0x2000b784
 801436c:	2000b78c 	.word	0x2000b78c
 8014370:	2000b788 	.word	0x2000b788

08014374 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8014374:	b40e      	push	{r1, r2, r3}
 8014376:	b580      	push	{r7, lr}
 8014378:	b085      	sub	sp, #20
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 801437e:	f107 0320 	add.w	r3, r7, #32
 8014382:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	69fa      	ldr	r2, [r7, #28]
 8014388:	2100      	movs	r1, #0
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f006 ff62 	bl	801b254 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8014390:	4603      	mov	r3, r0
 8014392:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8014394:	89fb      	ldrh	r3, [r7, #14]
}
 8014396:	4618      	mov	r0, r3
 8014398:	3714      	adds	r7, #20
 801439a:	46bd      	mov	sp, r7
 801439c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80143a0:	b003      	add	sp, #12
 80143a2:	4770      	bx	lr

080143a4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80143a4:	b40c      	push	{r2, r3}
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b084      	sub	sp, #16
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	460b      	mov	r3, r1
 80143b0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80143b2:	f107 031c 	add.w	r3, r7, #28
 80143b6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80143b8:	78f9      	ldrb	r1, [r7, #3]
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	69ba      	ldr	r2, [r7, #24]
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f006 ff48 	bl	801b254 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80143c4:	4603      	mov	r3, r0
 80143c6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80143c8:	89fb      	ldrh	r3, [r7, #14]
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3710      	adds	r7, #16
 80143ce:	46bd      	mov	sp, r7
 80143d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80143d4:	b002      	add	sp, #8
 80143d6:	4770      	bx	lr

080143d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b08a      	sub	sp, #40	; 0x28
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	460b      	mov	r3, r1
 80143e2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d016      	beq.n	801441a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	331a      	adds	r3, #26
 80143f0:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80143f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f4:	8adb      	ldrh	r3, [r3, #22]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d105      	bne.n	8014406 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80143fa:	4b43      	ldr	r3, [pc, #268]	; (8014508 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80143fc:	4a43      	ldr	r2, [pc, #268]	; (801450c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80143fe:	21c0      	movs	r1, #192	; 0xc0
 8014400:	4843      	ldr	r0, [pc, #268]	; (8014510 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014402:	f014 fff1 	bl	80293e8 <__assert_func>
            return buffer[pos];
 8014406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014408:	8a9b      	ldrh	r3, [r3, #20]
 801440a:	461a      	mov	r2, r3
 801440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801440e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d001      	beq.n	801441a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014416:	2301      	movs	r3, #1
 8014418:	e000      	b.n	801441c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801441a:	2300      	movs	r3, #0
 801441c:	2b00      	cmp	r3, #0
 801441e:	d06a      	beq.n	80144f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f008 fa35 	bl	801c890 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	331a      	adds	r3, #26
 801442a:	623b      	str	r3, [r7, #32]
 801442c:	2301      	movs	r3, #1
 801442e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014430:	6a3b      	ldr	r3, [r7, #32]
 8014432:	8adb      	ldrh	r3, [r3, #22]
 8014434:	8bfa      	ldrh	r2, [r7, #30]
 8014436:	429a      	cmp	r2, r3
 8014438:	d305      	bcc.n	8014446 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801443a:	4b36      	ldr	r3, [pc, #216]	; (8014514 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801443c:	4a36      	ldr	r2, [pc, #216]	; (8014518 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801443e:	21c5      	movs	r1, #197	; 0xc5
 8014440:	4833      	ldr	r0, [pc, #204]	; (8014510 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014442:	f014 ffd1 	bl	80293e8 <__assert_func>
            const uint16_t index = pos + offset;
 8014446:	6a3b      	ldr	r3, [r7, #32]
 8014448:	8a9a      	ldrh	r2, [r3, #20]
 801444a:	8bfb      	ldrh	r3, [r7, #30]
 801444c:	4413      	add	r3, r2
 801444e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8014450:	8bbb      	ldrh	r3, [r7, #28]
 8014452:	2b09      	cmp	r3, #9
 8014454:	d801      	bhi.n	801445a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8014456:	8bbb      	ldrh	r3, [r7, #28]
 8014458:	e001      	b.n	801445e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801445a:	8bbb      	ldrh	r3, [r7, #28]
 801445c:	3b0a      	subs	r3, #10
 801445e:	6a3a      	ldr	r2, [r7, #32]
 8014460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014464:	f640 123f 	movw	r2, #2367	; 0x93f
 8014468:	4293      	cmp	r3, r2
 801446a:	bf0c      	ite	eq
 801446c:	2301      	moveq	r3, #1
 801446e:	2300      	movne	r3, #0
 8014470:	b2db      	uxtb	r3, r3
 8014472:	2b00      	cmp	r3, #0
 8014474:	d03f      	beq.n	80144f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	331a      	adds	r3, #26
 801447a:	687a      	ldr	r2, [r7, #4]
 801447c:	321a      	adds	r2, #26
 801447e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8014480:	68ba      	ldr	r2, [r7, #8]
 8014482:	8ad2      	ldrh	r2, [r2, #22]
 8014484:	2a00      	cmp	r2, #0
 8014486:	d105      	bne.n	8014494 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8014488:	4b1f      	ldr	r3, [pc, #124]	; (8014508 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801448a:	4a20      	ldr	r2, [pc, #128]	; (801450c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801448c:	21c0      	movs	r1, #192	; 0xc0
 801448e:	4820      	ldr	r0, [pc, #128]	; (8014510 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014490:	f014 ffaa 	bl	80293e8 <__assert_func>
            return buffer[pos];
 8014494:	68ba      	ldr	r2, [r7, #8]
 8014496:	8a92      	ldrh	r2, [r2, #20]
 8014498:	4611      	mov	r1, r2
 801449a:	68ba      	ldr	r2, [r7, #8]
 801449c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80144a0:	613b      	str	r3, [r7, #16]
 80144a2:	4613      	mov	r3, r2
 80144a4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	8adb      	ldrh	r3, [r3, #22]
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d806      	bhi.n	80144bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80144ae:	4b1b      	ldr	r3, [pc, #108]	; (801451c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80144b0:	4a1b      	ldr	r2, [pc, #108]	; (8014520 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80144b2:	f240 110d 	movw	r1, #269	; 0x10d
 80144b6:	4816      	ldr	r0, [pc, #88]	; (8014510 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80144b8:	f014 ff96 	bl	80293e8 <__assert_func>
            const uint16_t index = pos + 1;
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	8a9b      	ldrh	r3, [r3, #20]
 80144c0:	3301      	adds	r3, #1
 80144c2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80144c4:	89bb      	ldrh	r3, [r7, #12]
 80144c6:	2b09      	cmp	r3, #9
 80144c8:	d801      	bhi.n	80144ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80144ca:	89bb      	ldrh	r3, [r7, #12]
 80144cc:	e000      	b.n	80144d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80144ce:	2300      	movs	r3, #0
 80144d0:	693a      	ldr	r2, [r7, #16]
 80144d2:	89f9      	ldrh	r1, [r7, #14]
 80144d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80144d8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	331a      	adds	r3, #26
 80144de:	61bb      	str	r3, [r7, #24]
 80144e0:	f640 133f 	movw	r3, #2367	; 0x93f
 80144e4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	8a9b      	ldrh	r3, [r3, #20]
 80144ea:	4619      	mov	r1, r3
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	8afa      	ldrh	r2, [r7, #22]
 80144f0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80144f4:	bf00      	nop
        }
    }
    return getNextChar();
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f008 f8ae 	bl	801c658 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80144fc:	4603      	mov	r3, r0
}
 80144fe:	4618      	mov	r0, r3
 8014500:	3728      	adds	r7, #40	; 0x28
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}
 8014506:	bf00      	nop
 8014508:	0802d954 	.word	0x0802d954
 801450c:	0802d960 	.word	0x0802d960
 8014510:	0802da0c 	.word	0x0802da0c
 8014514:	0802da54 	.word	0x0802da54
 8014518:	0802da64 	.word	0x0802da64
 801451c:	0802db38 	.word	0x0802db38
 8014520:	0802db44 	.word	0x0802db44

08014524 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f008 f84d 	bl	801c5cc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8014532:	bf00      	nop
 8014534:	3708      	adds	r7, #8
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}

0801453a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801453a:	b580      	push	{r7, lr}
 801453c:	b088      	sub	sp, #32
 801453e:	af02      	add	r7, sp, #8
 8014540:	60f8      	str	r0, [r7, #12]
 8014542:	1d38      	adds	r0, r7, #4
 8014544:	e880 0006 	stmia.w	r0, {r1, r2}
 8014548:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 801454a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801454e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8014550:	1d39      	adds	r1, r7, #4
 8014552:	697b      	ldr	r3, [r7, #20]
 8014554:	9301      	str	r3, [sp, #4]
 8014556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014558:	9300      	str	r3, [sp, #0]
 801455a:	6a3b      	ldr	r3, [r7, #32]
 801455c:	683a      	ldr	r2, [r7, #0]
 801455e:	68f8      	ldr	r0, [r7, #12]
 8014560:	f005 fbbf 	bl	8019ce2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8014564:	bf00      	nop
 8014566:	3718      	adds	r7, #24
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801456c:	b590      	push	{r4, r7, lr}
 801456e:	b085      	sub	sp, #20
 8014570:	af00      	add	r7, sp, #0
 8014572:	4603      	mov	r3, r0
 8014574:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8014576:	2300      	movs	r3, #0
 8014578:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801457a:	88fb      	ldrh	r3, [r7, #6]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d127      	bne.n	80145d0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014580:	88fb      	ldrh	r3, [r7, #6]
 8014582:	4a1e      	ldr	r2, [pc, #120]	; (80145fc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d016      	beq.n	80145ba <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 801458c:	88fb      	ldrh	r3, [r7, #6]
 801458e:	4a1b      	ldr	r2, [pc, #108]	; (80145fc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014594:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	68ba      	ldr	r2, [r7, #8]
 801459c:	4413      	add	r3, r2
 801459e:	4a18      	ldr	r2, [pc, #96]	; (8014600 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80145a0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	68ba      	ldr	r2, [r7, #8]
 80145a8:	4413      	add	r3, r2
 80145aa:	4a16      	ldr	r2, [pc, #88]	; (8014604 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80145ac:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	689b      	ldr	r3, [r3, #8]
 80145b2:	68ba      	ldr	r2, [r7, #8]
 80145b4:	4413      	add	r3, r2
 80145b6:	60fb      	str	r3, [r7, #12]
 80145b8:	e00a      	b.n	80145d0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80145ba:	4b11      	ldr	r3, [pc, #68]	; (8014600 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80145bc:	4a12      	ldr	r2, [pc, #72]	; (8014608 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80145be:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80145c0:	4a12      	ldr	r2, [pc, #72]	; (801460c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80145c2:	4b10      	ldr	r3, [pc, #64]	; (8014604 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80145c4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80145c6:	88fb      	ldrh	r3, [r7, #6]
 80145c8:	4a11      	ldr	r2, [pc, #68]	; (8014610 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80145ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145ce:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d00d      	beq.n	80145f2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80145d6:	4a0f      	ldr	r2, [pc, #60]	; (8014614 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80145d8:	88fb      	ldrh	r3, [r7, #6]
 80145da:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80145dc:	f000 f83e 	bl	801465c <_ZN17TypedTextDatabase8getFontsEv>
 80145e0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80145e2:	f000 f833 	bl	801464c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80145e6:	4603      	mov	r3, r0
 80145e8:	461a      	mov	r2, r3
 80145ea:	4621      	mov	r1, r4
 80145ec:	68f8      	ldr	r0, [r7, #12]
 80145ee:	f7ff fea5 	bl	801433c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80145f2:	bf00      	nop
 80145f4:	3714      	adds	r7, #20
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd90      	pop	{r4, r7, pc}
 80145fa:	bf00      	nop
 80145fc:	2000a510 	.word	0x2000a510
 8014600:	2000a518 	.word	0x2000a518
 8014604:	2000a51c 	.word	0x2000a51c
 8014608:	0806a560 	.word	0x0806a560
 801460c:	0806a554 	.word	0x0806a554
 8014610:	0806a56c 	.word	0x0806a56c
 8014614:	2000a514 	.word	0x2000a514

08014618 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014618:	b480      	push	{r7}
 801461a:	b083      	sub	sp, #12
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	460b      	mov	r3, r1
 8014622:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8014624:	4b07      	ldr	r3, [pc, #28]	; (8014644 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8014626:	681a      	ldr	r2, [r3, #0]
 8014628:	4b07      	ldr	r3, [pc, #28]	; (8014648 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801462a:	6819      	ldr	r1, [r3, #0]
 801462c:	887b      	ldrh	r3, [r7, #2]
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	440b      	add	r3, r1
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	005b      	lsls	r3, r3, #1
 8014636:	4413      	add	r3, r2
}
 8014638:	4618      	mov	r0, r3
 801463a:	370c      	adds	r7, #12
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr
 8014644:	2000a518 	.word	0x2000a518
 8014648:	2000a51c 	.word	0x2000a51c

0801464c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801464c:	b480      	push	{r7}
 801464e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014650:	2303      	movs	r3, #3
}
 8014652:	4618      	mov	r0, r3
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr

0801465c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 801465c:	b480      	push	{r7}
 801465e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8014660:	4b02      	ldr	r3, [pc, #8]	; (801466c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8014662:	4618      	mov	r0, r3
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr
 801466c:	2000a520 	.word	0x2000a520

08014670 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014670:	b580      	push	{r7, lr}
 8014672:	b082      	sub	sp, #8
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	6039      	str	r1, [r7, #0]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2b01      	cmp	r3, #1
 801467e:	d113      	bne.n	80146a8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014686:	4293      	cmp	r3, r2
 8014688:	d10e      	bne.n	80146a8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801468a:	f7fd fef7 	bl	801247c <_Z23getFont_verdana_20_4bppv>
 801468e:	4603      	mov	r3, r0
};
 8014690:	4a07      	ldr	r2, [pc, #28]	; (80146b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014692:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8014694:	f7fd ff46 	bl	8012524 <_Z23getFont_verdana_40_4bppv>
 8014698:	4603      	mov	r3, r0
};
 801469a:	4a05      	ldr	r2, [pc, #20]	; (80146b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801469c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 801469e:	f7fd fe99 	bl	80123d4 <_Z23getFont_verdana_10_4bppv>
 80146a2:	4603      	mov	r3, r0
};
 80146a4:	4a02      	ldr	r2, [pc, #8]	; (80146b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80146a6:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 80146a8:	bf00      	nop
 80146aa:	3708      	adds	r7, #8
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	2000a520 	.word	0x2000a520

080146b4 <_GLOBAL__sub_I_touchgfx_fonts>:
 80146b4:	b580      	push	{r7, lr}
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80146bc:	2001      	movs	r0, #1
 80146be:	f7ff ffd7 	bl	8014670 <_Z41__static_initialization_and_destruction_0ii>
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	4a05      	ldr	r2, [pc, #20]	; (80146e4 <_ZN19FrontendApplicationD1Ev+0x20>)
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	601a      	str	r2, [r3, #0]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7fe f967 	bl	80129a8 <_ZN23FrontendApplicationBaseD1Ev>
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	4618      	mov	r0, r3
 80146de:	3708      	adds	r7, #8
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	0802e608 	.word	0x0802e608

080146e8 <_ZN19FrontendApplicationD0Ev>:
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f7ff ffe7 	bl	80146c4 <_ZN19FrontendApplicationD1Ev>
 80146f6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f014 fd49 	bl	8029192 <_ZdlPvj>
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	4618      	mov	r0, r3
 8014704:	3708      	adds	r7, #8
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}

0801470a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801470a:	b580      	push	{r7, lr}
 801470c:	b082      	sub	sp, #8
 801470e:	af00      	add	r7, sp, #0
 8014710:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8014718:	4618      	mov	r0, r3
 801471a:	f000 f82d 	bl	8014778 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	4618      	mov	r0, r3
 8014722:	f005 fe27 	bl	801a374 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014726:	bf00      	nop
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
	...

08014730 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	687a      	ldr	r2, [r7, #4]
 8014740:	68b9      	ldr	r1, [r7, #8]
 8014742:	4618      	mov	r0, r3
 8014744:	f7fe f974 	bl	8012a30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8014748:	4a03      	ldr	r2, [pc, #12]	; (8014758 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	601a      	str	r2, [r3, #0]
{

}
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	4618      	mov	r0, r3
 8014752:	3710      	adds	r7, #16
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}
 8014758:	0802e608 	.word	0x0802e608

0801475c <_ZN5ModelC1Ev>:

extern osMessageQId      envQueueHandle;
extern osEventFlagsId_t  eventFlagHandle;
extern PRODUCT_STATUS    productStatus;

Model::Model() : modelListener(0)
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2200      	movs	r2, #0
 8014768:	601a      	str	r2, [r3, #0]
{

}
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	4618      	mov	r0, r3
 801476e:	370c      	adds	r7, #12
 8014770:	46bd      	mov	sp, r7
 8014772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014776:	4770      	bx	lr

08014778 <_ZN5Model4tickEv>:

void Model::tick()
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
	if (sensorUpdatePeriod >= 10)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	685b      	ldr	r3, [r3, #4]
 8014784:	2b09      	cmp	r3, #9
 8014786:	dd36      	ble.n	80147f6 <_ZN5Model4tickEv+0x7e>
	{
		ENV_MSG envData;

		if ( (osMessageQueueGet(envQueueHandle, &envData, NULL, 1)) == osOK)
 8014788:	4b1f      	ldr	r3, [pc, #124]	; (8014808 <_ZN5Model4tickEv+0x90>)
 801478a:	6818      	ldr	r0, [r3, #0]
 801478c:	f107 0108 	add.w	r1, r7, #8
 8014790:	2301      	movs	r3, #1
 8014792:	2200      	movs	r2, #0
 8014794:	f7f9 ff86 	bl	800e6a4 <osMessageQueueGet>
 8014798:	4603      	mov	r3, r0
 801479a:	2b00      	cmp	r3, #0
 801479c:	bf0c      	ite	eq
 801479e:	2301      	moveq	r3, #1
 80147a0:	2300      	movne	r3, #0
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d013      	beq.n	80147d0 <_ZN5Model4tickEv+0x58>
		{
			modelListener->UpdateTemp((envData.temp));
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681a      	ldr	r2, [r3, #0]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	3308      	adds	r3, #8
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	68b9      	ldr	r1, [r7, #8]
 80147b8:	4610      	mov	r0, r2
 80147ba:	4798      	blx	r3
			modelListener->UpdateHum((envData.humid));
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	681a      	ldr	r2, [r3, #0]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	330c      	adds	r3, #12
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	68f9      	ldr	r1, [r7, #12]
 80147cc:	4610      	mov	r0, r2
 80147ce:	4798      	blx	r3
		}
		modelListener->ChkUpdateOnOffButton(productStatus == ON ? true : false);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6818      	ldr	r0, [r3, #0]
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	3310      	adds	r3, #16
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	4a0b      	ldr	r2, [pc, #44]	; (801480c <_ZN5Model4tickEv+0x94>)
 80147e0:	7812      	ldrb	r2, [r2, #0]
 80147e2:	2a01      	cmp	r2, #1
 80147e4:	bf0c      	ite	eq
 80147e6:	2201      	moveq	r2, #1
 80147e8:	2200      	movne	r2, #0
 80147ea:	b2d2      	uxtb	r2, r2
 80147ec:	4611      	mov	r1, r2
 80147ee:	4798      	blx	r3
		sensorUpdatePeriod = 0;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2200      	movs	r2, #0
 80147f4:	605a      	str	r2, [r3, #4]
	}
	sensorUpdatePeriod++;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	685b      	ldr	r3, [r3, #4]
 80147fa:	1c5a      	adds	r2, r3, #1
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	605a      	str	r2, [r3, #4]
}
 8014800:	bf00      	nop
 8014802:	3710      	adds	r7, #16
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}
 8014808:	2000c2ec 	.word	0x2000c2ec
 801480c:	2000a52c 	.word	0x2000a52c

08014810 <_ZN5Model28updateHumidifierControlStateEb>:

void Model::updateHumidifierControlState(bool state)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	460b      	mov	r3, r1
 801481a:	70fb      	strb	r3, [r7, #3]
	if (state == true)
 801481c:	78fb      	ldrb	r3, [r7, #3]
 801481e:	2b01      	cmp	r3, #1
 8014820:	d106      	bne.n	8014830 <_ZN5Model28updateHumidifierControlStateEb+0x20>
	{
		osEventFlagsSet(eventFlagHandle, HUM_ON);
 8014822:	4b08      	ldr	r3, [pc, #32]	; (8014844 <_ZN5Model28updateHumidifierControlStateEb+0x34>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	2103      	movs	r1, #3
 8014828:	4618      	mov	r0, r3
 801482a:	f7f9 fc9d 	bl	800e168 <osEventFlagsSet>
	}
	else
	{
		osEventFlagsSet(eventFlagHandle, HUM_OFF);
	}
}
 801482e:	e005      	b.n	801483c <_ZN5Model28updateHumidifierControlStateEb+0x2c>
		osEventFlagsSet(eventFlagHandle, HUM_OFF);
 8014830:	4b04      	ldr	r3, [pc, #16]	; (8014844 <_ZN5Model28updateHumidifierControlStateEb+0x34>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2104      	movs	r1, #4
 8014836:	4618      	mov	r0, r3
 8014838:	f7f9 fc96 	bl	800e168 <osEventFlagsSet>
}
 801483c:	bf00      	nop
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	2000c2d8 	.word	0x2000c2d8

08014848 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014848:	b480      	push	{r7}
 801484a:	b083      	sub	sp, #12
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
    {
    }
 8014850:	bf00      	nop
 8014852:	370c      	adds	r7, #12
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr

0801485c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801485c:	b480      	push	{r7}
 801485e:	b083      	sub	sp, #12
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
    {
    }
 8014864:	bf00      	nop
 8014866:	370c      	adds	r7, #12
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr

08014870 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8014870:	b480      	push	{r7}
 8014872:	b083      	sub	sp, #12
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
    {
 8014878:	4a04      	ldr	r2, [pc, #16]	; (801488c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	601a      	str	r2, [r3, #0]
    }
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	4618      	mov	r0, r3
 8014882:	370c      	adds	r7, #12
 8014884:	46bd      	mov	sp, r7
 8014886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488a:	4770      	bx	lr
 801488c:	0802e6ac 	.word	0x0802e6ac

08014890 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
    }
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f7ff ffe9 	bl	8014870 <_ZN8touchgfx9PresenterD1Ev>
 801489e:	2104      	movs	r1, #4
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f014 fc76 	bl	8029192 <_ZdlPvj>
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	4618      	mov	r0, r3
 80148aa:	3708      	adds	r7, #8
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80148b0:	b480      	push	{r7}
 80148b2:	b083      	sub	sp, #12
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
    {
 80148b8:	4a04      	ldr	r2, [pc, #16]	; (80148cc <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	601a      	str	r2, [r3, #0]
    }
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	4618      	mov	r0, r3
 80148c2:	370c      	adds	r7, #12
 80148c4:	46bd      	mov	sp, r7
 80148c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ca:	4770      	bx	lr
 80148cc:	0802e6ac 	.word	0x0802e6ac

080148d0 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	4a06      	ldr	r2, [pc, #24]	; (80148f4 <_ZN13ModelListenerC1Ev+0x24>)
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	601a      	str	r2, [r3, #0]
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2200      	movs	r2, #0
 80148e2:	605a      	str	r2, [r3, #4]
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	4618      	mov	r0, r3
 80148e8:	370c      	adds	r7, #12
 80148ea:	46bd      	mov	sp, r7
 80148ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f0:	4770      	bx	lr
 80148f2:	bf00      	nop
 80148f4:	0802e690 	.word	0x0802e690

080148f8 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80148f8:	b480      	push	{r7}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	4a04      	ldr	r2, [pc, #16]	; (8014914 <_ZN13ModelListenerD1Ev+0x1c>)
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	601a      	str	r2, [r3, #0]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	4618      	mov	r0, r3
 801490a:	370c      	adds	r7, #12
 801490c:	46bd      	mov	sp, r7
 801490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014912:	4770      	bx	lr
 8014914:	0802e690 	.word	0x0802e690

08014918 <_ZN13ModelListenerD0Ev>:
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f7ff ffe9 	bl	80148f8 <_ZN13ModelListenerD1Ev>
 8014926:	2108      	movs	r1, #8
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f014 fc32 	bl	8029192 <_ZdlPvj>
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	4618      	mov	r0, r3
 8014932:	3708      	adds	r7, #8
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}

08014938 <_ZN13ModelListener10UpdateTempEi>:
    //virtual void UpdateTemp(char *val)
    virtual void UpdateTemp(int) {};
 8014938:	b480      	push	{r7}
 801493a:	b083      	sub	sp, #12
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	6039      	str	r1, [r7, #0]
 8014942:	bf00      	nop
 8014944:	370c      	adds	r7, #12
 8014946:	46bd      	mov	sp, r7
 8014948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494c:	4770      	bx	lr

0801494e <_ZN13ModelListener9UpdateHumEi>:
    virtual void UpdateHum(int) {};
 801494e:	b480      	push	{r7}
 8014950:	b083      	sub	sp, #12
 8014952:	af00      	add	r7, sp, #0
 8014954:	6078      	str	r0, [r7, #4]
 8014956:	6039      	str	r1, [r7, #0]
 8014958:	bf00      	nop
 801495a:	370c      	adds	r7, #12
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr

08014964 <_ZN13ModelListener20ChkUpdateOnOffButtonEb>:
    virtual void ChkUpdateOnOffButton(bool) {};
 8014964:	b480      	push	{r7}
 8014966:	b083      	sub	sp, #12
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	460b      	mov	r3, r1
 801496e:	70fb      	strb	r3, [r7, #3]
 8014970:	bf00      	nop
 8014972:	370c      	adds	r7, #12
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr

0801497c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	4a09      	ldr	r2, [pc, #36]	; (80149ac <_ZN15screenPresenterD1Ev+0x30>)
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	601a      	str	r2, [r3, #0]
 801498a:	4a09      	ldr	r2, [pc, #36]	; (80149b0 <_ZN15screenPresenterD1Ev+0x34>)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	605a      	str	r2, [r3, #4]
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	3304      	adds	r3, #4
 8014994:	4618      	mov	r0, r3
 8014996:	f7ff ffaf 	bl	80148f8 <_ZN13ModelListenerD1Ev>
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	4618      	mov	r0, r3
 801499e:	f7ff ff67 	bl	8014870 <_ZN8touchgfx9PresenterD1Ev>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	4618      	mov	r0, r3
 80149a6:	3708      	adds	r7, #8
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}
 80149ac:	0802e64c 	.word	0x0802e64c
 80149b0:	0802e674 	.word	0x0802e674

080149b4 <_ZThn4_N15screenPresenterD1Ev>:
 80149b4:	f1a0 0004 	sub.w	r0, r0, #4
 80149b8:	e7e0      	b.n	801497c <_ZN15screenPresenterD1Ev>
 80149ba:	bf00      	nop

080149bc <_ZN15screenPresenterD0Ev>:
 80149bc:	b580      	push	{r7, lr}
 80149be:	b082      	sub	sp, #8
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f7ff ffd9 	bl	801497c <_ZN15screenPresenterD1Ev>
 80149ca:	2110      	movs	r1, #16
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f014 fbe0 	bl	8029192 <_ZdlPvj>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	4618      	mov	r0, r3
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <_ZThn4_N15screenPresenterD0Ev>:
 80149dc:	f1a0 0004 	sub.w	r0, r0, #4
 80149e0:	e7ec      	b.n	80149bc <_ZN15screenPresenterD0Ev>
	...

080149e4 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
    : view(v)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7ff ff5d 	bl	80148b0 <_ZN8touchgfx9PresenterC1Ev>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	3304      	adds	r3, #4
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7ff ff68 	bl	80148d0 <_ZN13ModelListenerC1Ev>
 8014a00:	4a06      	ldr	r2, [pc, #24]	; (8014a1c <_ZN15screenPresenterC1ER10screenView+0x38>)
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	601a      	str	r2, [r3, #0]
 8014a06:	4a06      	ldr	r2, [pc, #24]	; (8014a20 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	605a      	str	r2, [r3, #4]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	683a      	ldr	r2, [r7, #0]
 8014a10:	60da      	str	r2, [r3, #12]
{

}
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	4618      	mov	r0, r3
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}
 8014a1c:	0802e64c 	.word	0x0802e64c
 8014a20:	0802e674 	.word	0x0802e674

08014a24 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8014a24:	b480      	push	{r7}
 8014a26:	b083      	sub	sp, #12
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]

}
 8014a2c:	bf00      	nop
 8014a2e:	370c      	adds	r7, #12
 8014a30:	46bd      	mov	sp, r7
 8014a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a36:	4770      	bx	lr

08014a38 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8014a38:	b480      	push	{r7}
 8014a3a:	b083      	sub	sp, #12
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]

}
 8014a40:	bf00      	nop
 8014a42:	370c      	adds	r7, #12
 8014a44:	46bd      	mov	sp, r7
 8014a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4a:	4770      	bx	lr

08014a4c <_ZN15screenPresenter28updateHumidifierControlStateEb>:

void screenPresenter::updateHumidifierControlState(bool state)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	460b      	mov	r3, r1
 8014a56:	70fb      	strb	r3, [r7, #3]
	model->updateHumidifierControlState(state);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	689b      	ldr	r3, [r3, #8]
 8014a5c:	78fa      	ldrb	r2, [r7, #3]
 8014a5e:	4611      	mov	r1, r2
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7ff fed5 	bl	8014810 <_ZN5Model28updateHumidifierControlStateEb>
}
 8014a66:	bf00      	nop
 8014a68:	3708      	adds	r7, #8
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <_ZN15screenPresenter10UpdateTempEi>:

void screenPresenter::UpdateTemp(int val)
{
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b082      	sub	sp, #8
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
 8014a76:	6039      	str	r1, [r7, #0]
	if (val >= -50 && val <= 50)
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8014a7e:	db0c      	blt.n	8014a9a <_ZN15screenPresenter10UpdateTempEi+0x2c>
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	2b32      	cmp	r3, #50	; 0x32
 8014a84:	dc09      	bgt.n	8014a9a <_ZN15screenPresenter10UpdateTempEi+0x2c>
	{
		view.UpdateTempView(val);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	68da      	ldr	r2, [r3, #12]
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	68db      	ldr	r3, [r3, #12]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	3340      	adds	r3, #64	; 0x40
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	6839      	ldr	r1, [r7, #0]
 8014a96:	4610      	mov	r0, r2
 8014a98:	4798      	blx	r3
	}
}
 8014a9a:	bf00      	nop
 8014a9c:	3708      	adds	r7, #8
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}

08014aa2 <_ZThn4_N15screenPresenter10UpdateTempEi>:

    virtual void updateHumidifierControlState(bool state);

    virtual void UpdateTemp(int);
 8014aa2:	f1a0 0004 	sub.w	r0, r0, #4
 8014aa6:	f7ff bfe2 	b.w	8014a6e <_ZN15screenPresenter10UpdateTempEi>

08014aaa <_ZN15screenPresenter9UpdateHumEi>:

void screenPresenter::UpdateHum(int val)
{
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b082      	sub	sp, #8
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
 8014ab2:	6039      	str	r1, [r7, #0]
	if (val >= -50 && val <= 100)
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8014aba:	db0c      	blt.n	8014ad6 <_ZN15screenPresenter9UpdateHumEi+0x2c>
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	2b64      	cmp	r3, #100	; 0x64
 8014ac0:	dc09      	bgt.n	8014ad6 <_ZN15screenPresenter9UpdateHumEi+0x2c>
	{
		view.UpdateHumView(val);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	68da      	ldr	r2, [r3, #12]
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	68db      	ldr	r3, [r3, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	3344      	adds	r3, #68	; 0x44
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	6839      	ldr	r1, [r7, #0]
 8014ad2:	4610      	mov	r0, r2
 8014ad4:	4798      	blx	r3
	}
}
 8014ad6:	bf00      	nop
 8014ad8:	3708      	adds	r7, #8
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}

08014ade <_ZThn4_N15screenPresenter9UpdateHumEi>:
    virtual void UpdateHum(int);
 8014ade:	f1a0 0004 	sub.w	r0, r0, #4
 8014ae2:	f7ff bfe2 	b.w	8014aaa <_ZN15screenPresenter9UpdateHumEi>
	...

08014ae8 <_ZN15screenPresenter20ChkUpdateOnOffButtonEb>:

bool prvStatus = false;

void screenPresenter::ChkUpdateOnOffButton(bool status)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b082      	sub	sp, #8
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	460b      	mov	r3, r1
 8014af2:	70fb      	strb	r3, [r7, #3]
	if (prvStatus == status)
 8014af4:	4b11      	ldr	r3, [pc, #68]	; (8014b3c <_ZN15screenPresenter20ChkUpdateOnOffButtonEb+0x54>)
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	78fa      	ldrb	r2, [r7, #3]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d019      	beq.n	8014b32 <_ZN15screenPresenter20ChkUpdateOnOffButtonEb+0x4a>
	{
		return;
	}

	if (status == true)
 8014afe:	78fb      	ldrb	r3, [r7, #3]
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	d109      	bne.n	8014b18 <_ZN15screenPresenter20ChkUpdateOnOffButtonEb+0x30>
	{
		view.updateOnButton();
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	68da      	ldr	r2, [r3, #12]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	68db      	ldr	r3, [r3, #12]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	3338      	adds	r3, #56	; 0x38
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	4610      	mov	r0, r2
 8014b14:	4798      	blx	r3
 8014b16:	e008      	b.n	8014b2a <_ZN15screenPresenter20ChkUpdateOnOffButtonEb+0x42>
	}
	else
	{
		view.updateOffButton();
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	68da      	ldr	r2, [r3, #12]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	68db      	ldr	r3, [r3, #12]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	333c      	adds	r3, #60	; 0x3c
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	4610      	mov	r0, r2
 8014b28:	4798      	blx	r3
	}
	prvStatus = status;
 8014b2a:	4a04      	ldr	r2, [pc, #16]	; (8014b3c <_ZN15screenPresenter20ChkUpdateOnOffButtonEb+0x54>)
 8014b2c:	78fb      	ldrb	r3, [r7, #3]
 8014b2e:	7013      	strb	r3, [r2, #0]
 8014b30:	e000      	b.n	8014b34 <_ZN15screenPresenter20ChkUpdateOnOffButtonEb+0x4c>
		return;
 8014b32:	bf00      	nop
}
 8014b34:	3708      	adds	r7, #8
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	2000a52d 	.word	0x2000a52d

08014b40 <_ZThn4_N15screenPresenter20ChkUpdateOnOffButtonEb>:
    virtual void ChkUpdateOnOffButton(bool);
 8014b40:	f1a0 0004 	sub.w	r0, r0, #4
 8014b44:	f7ff bfd0 	b.w	8014ae8 <_ZN15screenPresenter20ChkUpdateOnOffButtonEb>

08014b48 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8014b50:	4b07      	ldr	r3, [pc, #28]	; (8014b70 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d105      	bne.n	8014b64 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 8014b58:	4b06      	ldr	r3, [pc, #24]	; (8014b74 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 8014b5a:	4a07      	ldr	r2, [pc, #28]	; (8014b78 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 8014b5c:	218b      	movs	r1, #139	; 0x8b
 8014b5e:	4807      	ldr	r0, [pc, #28]	; (8014b7c <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 8014b60:	f014 fc42 	bl	80293e8 <__assert_func>
        return bitmapId;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	881b      	ldrh	r3, [r3, #0]
    }
 8014b68:	4618      	mov	r0, r3
 8014b6a:	3708      	adds	r7, #8
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bd80      	pop	{r7, pc}
 8014b70:	2000b7bc 	.word	0x2000b7bc
 8014b74:	0802dbf8 	.word	0x0802dbf8
 8014b78:	0802dc34 	.word	0x0802dc34
 8014b7c:	0802dc68 	.word	0x0802dc68

08014b80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8014b80:	b480      	push	{r7}
 8014b82:	b083      	sub	sp, #12
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	683a      	ldr	r2, [r7, #0]
 8014b8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014b90:	bf00      	nop
 8014b92:	370c      	adds	r7, #12
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr

08014b9c <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 8014b9c:	b590      	push	{r4, r7, lr}
 8014b9e:	b083      	sub	sp, #12
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	332e      	adds	r3, #46	; 0x2e
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7ff ffcd 	bl	8014b48 <_ZNK8touchgfx6Bitmap5getIdEv>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	461c      	mov	r4, r3
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	3334      	adds	r3, #52	; 0x34
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f7ff ffc6 	bl	8014b48 <_ZNK8touchgfx6Bitmap5getIdEv>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	429c      	cmp	r4, r3
 8014bc0:	bf0c      	ite	eq
 8014bc2:	2301      	moveq	r3, #1
 8014bc4:	2300      	movne	r3, #0
 8014bc6:	b2db      	uxtb	r3, r3
    }
 8014bc8:	4618      	mov	r0, r3
 8014bca:	370c      	adds	r7, #12
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd90      	pop	{r4, r7, pc}

08014bd0 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	4a05      	ldr	r2, [pc, #20]	; (8014bf0 <_ZN10screenViewD1Ev+0x20>)
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	601a      	str	r2, [r3, #0]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7fe fe97 	bl	8013914 <_ZN14screenViewBaseD1Ev>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	4618      	mov	r0, r3
 8014bea:	3708      	adds	r7, #8
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}
 8014bf0:	0802e6c4 	.word	0x0802e6c4

08014bf4 <_ZN10screenViewD0Ev>:
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	6878      	ldr	r0, [r7, #4]
 8014bfe:	f7ff ffe7 	bl	8014bd0 <_ZN10screenViewD1Ev>
 8014c02:	f44f 7149 	mov.w	r1, #804	; 0x324
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f014 fac3 	bl	8029192 <_ZdlPvj>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3708      	adds	r7, #8
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
	...

08014c18 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af02      	add	r7, sp, #8
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	9300      	str	r3, [sp, #0]
 8014c28:	4b04      	ldr	r3, [pc, #16]	; (8014c3c <_ZNSt7__cxx119to_stringEi+0x24>)
 8014c2a:	2210      	movs	r2, #16
 8014c2c:	4904      	ldr	r1, [pc, #16]	; (8014c40 <_ZNSt7__cxx119to_stringEi+0x28>)
 8014c2e:	f000 f909 	bl	8014e44 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	3708      	adds	r7, #8
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	0802dcac 	.word	0x0802dcac
 8014c40:	0802a6d9 	.word	0x0802a6d9

08014c44 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>
#include <string.h>
#include <string>

screenView::screenView()
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b082      	sub	sp, #8
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7fe ff14 	bl	8013a7c <_ZN14screenViewBaseC1Ev>
 8014c54:	4a03      	ldr	r2, [pc, #12]	; (8014c64 <_ZN10screenViewC1Ev+0x20>)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	601a      	str	r2, [r3, #0]
{

}
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3708      	adds	r7, #8
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	0802e6c4 	.word	0x0802e6c4

08014c68 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b084      	sub	sp, #16
 8014c6c:	af02      	add	r7, sp, #8
 8014c6e:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7ff f948 	bl	8013f08 <_ZN14screenViewBase11setupScreenEv>

	tempTextViewBuffer[0] = 0;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	humTextViewBuffer[0] = 0;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2200      	movs	r2, #0
 8014c84:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	//screenViewBase::tempText.setPosition(156, 71, 240, 320);

	screenViewBase::tempText.setPosition(100, 71, 240, 320);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f503 7015 	add.w	r0, r3, #596	; 0x254
 8014c8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8014c92:	9300      	str	r3, [sp, #0]
 8014c94:	23f0      	movs	r3, #240	; 0xf0
 8014c96:	2247      	movs	r2, #71	; 0x47
 8014c98:	2164      	movs	r1, #100	; 0x64
 8014c9a:	f7fe fa64 	bl	8013166 <_ZN8touchgfx8Drawable11setPositionEssss>
	screenViewBase::tempText.setWildcard(tempTextViewBuffer);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	f503 7215 	add.w	r2, r3, #596	; 0x254
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8014caa:	4619      	mov	r1, r3
 8014cac:	4610      	mov	r0, r2
 8014cae:	f7ff ff67 	bl	8014b80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

    screenViewBase::humText.setPosition(100, 180, 240, 320);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8014cb8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8014cbc:	9300      	str	r3, [sp, #0]
 8014cbe:	23f0      	movs	r3, #240	; 0xf0
 8014cc0:	22b4      	movs	r2, #180	; 0xb4
 8014cc2:	2164      	movs	r1, #100	; 0x64
 8014cc4:	f7fe fa4f 	bl	8013166 <_ZN8touchgfx8Drawable11setPositionEssss>
    screenViewBase::humText.setWildcard(humTextViewBuffer);
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8014cd4:	4619      	mov	r1, r3
 8014cd6:	4610      	mov	r0, r2
 8014cd8:	f7ff ff52 	bl	8014b80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

}
 8014cdc:	bf00      	nop
 8014cde:	3708      	adds	r7, #8
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7fe fbb6 	bl	8013460 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014cf4:	bf00      	nop
 8014cf6:	3708      	adds	r7, #8
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <_ZN10screenView28HumidifierControlButtonStateEv>:

void screenView::HumidifierControlButtonState()
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
	//presenter->updateHumidifierControlState(buttonOnOff.getState());
}
 8014d04:	bf00      	nop
 8014d06:	370c      	adds	r7, #12
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0e:	4770      	bx	lr

08014d10 <_ZN10screenView22updateOnOffButtonStateEv>:

void screenView::updateOnOffButtonState()
{
 8014d10:	b5b0      	push	{r4, r5, r7, lr}
 8014d12:	b082      	sub	sp, #8
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
	presenter->updateHumidifierControlState(humOnOffButton.getState());
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	3310      	adds	r3, #16
 8014d24:	681c      	ldr	r4, [r3, #0]
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7ff ff35 	bl	8014b9c <_ZNK8touchgfx12ToggleButton8getStateEv>
 8014d32:	4603      	mov	r3, r0
 8014d34:	4619      	mov	r1, r3
 8014d36:	4628      	mov	r0, r5
 8014d38:	47a0      	blx	r4
}
 8014d3a:	bf00      	nop
 8014d3c:	3708      	adds	r7, #8
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bdb0      	pop	{r4, r5, r7, pc}

08014d42 <_ZN10screenView14updateOnButtonEv>:

void screenView::updateOnButton()
{
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b082      	sub	sp, #8
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
	 screenViewBase::humOnOffButton.forceState(true);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014d50:	2101      	movs	r1, #1
 8014d52:	4618      	mov	r0, r3
 8014d54:	f003 fba2 	bl	801849c <_ZN8touchgfx12ToggleButton10forceStateEb>
}
 8014d58:	bf00      	nop
 8014d5a:	3708      	adds	r7, #8
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <_ZN10screenView15updateOffButtonEv>:

void screenView::updateOffButton()
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b082      	sub	sp, #8
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
	screenViewBase::humOnOffButton.forceState(false);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014d6e:	2100      	movs	r1, #0
 8014d70:	4618      	mov	r0, r3
 8014d72:	f003 fb93 	bl	801849c <_ZN8touchgfx12ToggleButton10forceStateEb>
}
 8014d76:	bf00      	nop
 8014d78:	3708      	adds	r7, #8
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}

08014d7e <_ZN10screenView14UpdateTempViewEi>:

void screenView::UpdateTempView(int val)
{
 8014d7e:	b590      	push	{r4, r7, lr}
 8014d80:	b08b      	sub	sp, #44	; 0x2c
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
 8014d86:	6039      	str	r1, [r7, #0]
	std::string s = std::to_string(val);
 8014d88:	f107 030c 	add.w	r3, r7, #12
 8014d8c:	6839      	ldr	r1, [r7, #0]
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7ff ff42 	bl	8014c18 <_ZNSt7__cxx119to_stringEi>
	char const *pchar = s.c_str();  //use char const* as target type
 8014d94:	f107 030c 	add.w	r3, r7, #12
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f014 faed 	bl	8029378 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8014d9e:	6278      	str	r0, [r7, #36]	; 0x24

	//memset(tempTextViewBuffer, 0x0, sizeof(tempTextViewBuffer));

	Unicode::strncpy(tempTextViewBuffer, pchar, strlen(pchar));
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f503 7429 	add.w	r4, r3, #676	; 0x2a4
 8014da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014da8:	f7eb fa7c 	bl	80002a4 <strlen>
 8014dac:	4603      	mov	r3, r0
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	461a      	mov	r2, r3
 8014db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014db4:	4620      	mov	r0, r4
 8014db6:	f007 ffbe 	bl	801cd36 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	screenViewBase::tempText.invalidate();
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f006 fb50 	bl	801b466 <_ZNK8touchgfx8Drawable10invalidateEv>
	std::string s = std::to_string(val);
 8014dc6:	f107 030c 	add.w	r3, r7, #12
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f014 fa92 	bl	80292f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8014dd0:	bf00      	nop
 8014dd2:	372c      	adds	r7, #44	; 0x2c
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd90      	pop	{r4, r7, pc}

08014dd8 <_ZN10screenView13UpdateHumViewEi>:

void screenView::UpdateHumView(int val)
{
 8014dd8:	b590      	push	{r4, r7, lr}
 8014dda:	b08b      	sub	sp, #44	; 0x2c
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6039      	str	r1, [r7, #0]
	std::string s = std::to_string(val);
 8014de2:	f107 030c 	add.w	r3, r7, #12
 8014de6:	6839      	ldr	r1, [r7, #0]
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7ff ff15 	bl	8014c18 <_ZNSt7__cxx119to_stringEi>

	s += "%";
 8014dee:	f107 030c 	add.w	r3, r7, #12
 8014df2:	4913      	ldr	r1, [pc, #76]	; (8014e40 <_ZN10screenView13UpdateHumViewEi+0x68>)
 8014df4:	4618      	mov	r0, r3
 8014df6:	f014 fabb 	bl	8029370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	char const *pchar = s.c_str();  //use char const* as target type
 8014dfa:	f107 030c 	add.w	r3, r7, #12
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f014 faba 	bl	8029378 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8014e04:	6278      	str	r0, [r7, #36]	; 0x24
	Unicode::strncpy(humTextViewBuffer, pchar, strlen(pchar));
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 8014e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e0e:	f7eb fa49 	bl	80002a4 <strlen>
 8014e12:	4603      	mov	r3, r0
 8014e14:	b29b      	uxth	r3, r3
 8014e16:	461a      	mov	r2, r3
 8014e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	f007 ff8b 	bl	801cd36 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	screenViewBase::humText.invalidate();
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8014e26:	4618      	mov	r0, r3
 8014e28:	f006 fb1d 	bl	801b466 <_ZNK8touchgfx8Drawable10invalidateEv>
	std::string s = std::to_string(val);
 8014e2c:	f107 030c 	add.w	r3, r7, #12
 8014e30:	4618      	mov	r0, r3
 8014e32:	f014 fa5f 	bl	80292f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8014e36:	bf00      	nop
 8014e38:	372c      	adds	r7, #44	; 0x2c
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd90      	pop	{r4, r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	0802dcb0 	.word	0x0802dcb0

08014e44 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8014e44:	b408      	push	{r3}
 8014e46:	b590      	push	{r4, r7, lr}
 8014e48:	b088      	sub	sp, #32
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	60f8      	str	r0, [r7, #12]
 8014e4e:	60b9      	str	r1, [r7, #8]
 8014e50:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	3307      	adds	r3, #7
 8014e56:	08db      	lsrs	r3, r3, #3
 8014e58:	00db      	lsls	r3, r3, #3
 8014e5a:	ebad 0d03 	sub.w	sp, sp, r3
 8014e5e:	466b      	mov	r3, sp
 8014e60:	3307      	adds	r3, #7
 8014e62:	08db      	lsrs	r3, r3, #3
 8014e64:	00db      	lsls	r3, r3, #3
 8014e66:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8014e68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014e6c:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8014e6e:	68bc      	ldr	r4, [r7, #8]
 8014e70:	693b      	ldr	r3, [r7, #16]
 8014e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e74:	6879      	ldr	r1, [r7, #4]
 8014e76:	69f8      	ldr	r0, [r7, #28]
 8014e78:	47a0      	blx	r4
 8014e7a:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	69fa      	ldr	r2, [r7, #28]
 8014e80:	18d4      	adds	r4, r2, r3
 8014e82:	f107 0314 	add.w	r3, r7, #20
 8014e86:	4618      	mov	r0, r3
 8014e88:	f014 f997 	bl	80291ba <_ZNSaIcEC1Ev>
 8014e8c:	f107 0314 	add.w	r3, r7, #20
 8014e90:	4622      	mov	r2, r4
 8014e92:	69f9      	ldr	r1, [r7, #28]
 8014e94:	68f8      	ldr	r0, [r7, #12]
 8014e96:	f000 f80d 	bl	8014eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8014e9a:	f107 0314 	add.w	r3, r7, #20
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f014 f98c 	bl	80291bc <_ZNSaIcED1Ev>
 8014ea4:	bf00      	nop
    }
 8014ea6:	68f8      	ldr	r0, [r7, #12]
 8014ea8:	3720      	adds	r7, #32
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014eb0:	b001      	add	sp, #4
 8014eb2:	4770      	bx	lr

08014eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8014eb4:	b590      	push	{r4, r7, lr}
 8014eb6:	b085      	sub	sp, #20
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	60f8      	str	r0, [r7, #12]
 8014ebc:	60b9      	str	r1, [r7, #8]
 8014ebe:	607a      	str	r2, [r7, #4]
 8014ec0:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8014ec2:	68fc      	ldr	r4, [r7, #12]
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f014 f98b 	bl	80291e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	683a      	ldr	r2, [r7, #0]
 8014ece:	4619      	mov	r1, r3
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f014 fa53 	bl	802937c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8014ed6:	687a      	ldr	r2, [r7, #4]
 8014ed8:	68b9      	ldr	r1, [r7, #8]
 8014eda:	68f8      	ldr	r0, [r7, #12]
 8014edc:	f000 f805 	bl	8014eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3714      	adds	r7, #20
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd90      	pop	{r4, r7, pc}

08014eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8014eea:	b580      	push	{r7, lr}
 8014eec:	b086      	sub	sp, #24
 8014eee:	af00      	add	r7, sp, #0
 8014ef0:	60f8      	str	r0, [r7, #12]
 8014ef2:	60b9      	str	r1, [r7, #8]
 8014ef4:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8014ef6:	687a      	ldr	r2, [r7, #4]
 8014ef8:	68b9      	ldr	r1, [r7, #8]
 8014efa:	68f8      	ldr	r0, [r7, #12]
 8014efc:	f000 f804 	bl	8014f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8014f00:	bf00      	nop
 8014f02:	3718      	adds	r7, #24
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}

08014f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8014f08:	b590      	push	{r4, r7, lr}
 8014f0a:	b087      	sub	sp, #28
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	60b9      	str	r1, [r7, #8]
 8014f12:	607a      	str	r2, [r7, #4]
 8014f14:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8014f16:	4623      	mov	r3, r4
 8014f18:	687a      	ldr	r2, [r7, #4]
 8014f1a:	68b9      	ldr	r1, [r7, #8]
 8014f1c:	68f8      	ldr	r0, [r7, #12]
 8014f1e:	f000 f805 	bl	8014f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8014f22:	bf00      	nop
 8014f24:	371c      	adds	r7, #28
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd90      	pop	{r4, r7, pc}
	...

08014f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b086      	sub	sp, #24
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	607a      	str	r2, [r7, #4]
 8014f38:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8014f3a:	68b8      	ldr	r0, [r7, #8]
 8014f3c:	f000 f83e 	bl	8014fbc <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d005      	beq.n	8014f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8014f46:	68ba      	ldr	r2, [r7, #8]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d001      	beq.n	8014f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8014f4e:	2301      	movs	r3, #1
 8014f50:	e000      	b.n	8014f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8014f52:	2300      	movs	r3, #0
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d002      	beq.n	8014f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8014f58:	4817      	ldr	r0, [pc, #92]	; (8014fb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8014f5a:	f014 f933 	bl	80291c4 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8014f5e:	6879      	ldr	r1, [r7, #4]
 8014f60:	68b8      	ldr	r0, [r7, #8]
 8014f62:	f000 f83b 	bl	8014fdc <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8014f66:	4603      	mov	r3, r0
 8014f68:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	2b0f      	cmp	r3, #15
 8014f6e:	d910      	bls.n	8014f92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8014f70:	f107 0314 	add.w	r3, r7, #20
 8014f74:	2200      	movs	r2, #0
 8014f76:	4619      	mov	r1, r3
 8014f78:	68f8      	ldr	r0, [r7, #12]
 8014f7a:	f014 f93b 	bl	80291f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	4619      	mov	r1, r3
 8014f82:	68f8      	ldr	r0, [r7, #12]
 8014f84:	f014 f928 	bl	80291d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	68f8      	ldr	r0, [r7, #12]
 8014f8e:	f014 f929 	bl	80291e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8014f92:	68f8      	ldr	r0, [r7, #12]
 8014f94:	f014 f922 	bl	80291dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	687a      	ldr	r2, [r7, #4]
 8014f9c:	68b9      	ldr	r1, [r7, #8]
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f014 f967 	bl	8029272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	68f8      	ldr	r0, [r7, #12]
 8014faa:	f014 f91d 	bl	80291e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8014fae:	bf00      	nop
 8014fb0:	3718      	adds	r7, #24
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	0802dcb4 	.word	0x0802dcb4

08014fbc <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8014fbc:	b480      	push	{r7}
 8014fbe:	b083      	sub	sp, #12
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	bf0c      	ite	eq
 8014fca:	2301      	moveq	r3, #1
 8014fcc:	2300      	movne	r3, #0
 8014fce:	b2db      	uxtb	r3, r3
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	370c      	adds	r7, #12
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr

08014fdc <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8014fdc:	b5b0      	push	{r4, r5, r7, lr}
 8014fde:	b084      	sub	sp, #16
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
 8014fe4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8014fe6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8014fe8:	1d3b      	adds	r3, r7, #4
 8014fea:	4618      	mov	r0, r3
 8014fec:	f000 f80a 	bl	8015004 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8014ff0:	462a      	mov	r2, r5
 8014ff2:	6839      	ldr	r1, [r7, #0]
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	f000 f80f 	bl	8015018 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8014ffa:	4603      	mov	r3, r0
    }
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3710      	adds	r7, #16
 8015000:	46bd      	mov	sp, r7
 8015002:	bdb0      	pop	{r4, r5, r7, pc}

08015004 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8015004:	b480      	push	{r7}
 8015006:	b083      	sub	sp, #12
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 801500c:	4618      	mov	r0, r3
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr

08015018 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8015018:	b480      	push	{r7}
 801501a:	b085      	sub	sp, #20
 801501c:	af00      	add	r7, sp, #0
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8015024:	68ba      	ldr	r2, [r7, #8]
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	1ad3      	subs	r3, r2, r3
    }
 801502a:	4618      	mov	r0, r3
 801502c:	3714      	adds	r7, #20
 801502e:	46bd      	mov	sp, r7
 8015030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015034:	4770      	bx	lr
	...

08015038 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8015038:	b480      	push	{r7}
 801503a:	b083      	sub	sp, #12
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
    {
 8015040:	4a04      	ldr	r2, [pc, #16]	; (8015054 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	601a      	str	r2, [r3, #0]
    }
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	4618      	mov	r0, r3
 801504a:	370c      	adds	r7, #12
 801504c:	46bd      	mov	sp, r7
 801504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015052:	4770      	bx	lr
 8015054:	0802e72c 	.word	0x0802e72c

08015058 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
    }
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f7ff ffe9 	bl	8015038 <_ZN8touchgfx15TouchControllerD1Ev>
 8015066:	2104      	movs	r1, #4
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f014 f892 	bl	8029192 <_ZdlPvj>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	4618      	mov	r0, r3
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <_ZN20STM32TouchController4initEv>:
//#include <cstring.h>

extern UART_HandleTypeDef huart1;

void STM32TouchController::init()
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b082      	sub	sp, #8
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	BSP_TS_Init(240, 320);
 8015080:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015084:	20f0      	movs	r0, #240	; 0xf0
 8015086:	f7f1 f9bb 	bl	8006400 <BSP_TS_Init>
}
 801508a:	bf00      	nop
 801508c:	3708      	adds	r7, #8
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}

08015092 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8015092:	b580      	push	{r7, lr}
 8015094:	b086      	sub	sp, #24
 8015096:	af00      	add	r7, sp, #0
 8015098:	60f8      	str	r0, [r7, #12]
 801509a:	60b9      	str	r1, [r7, #8]
 801509c:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 801509e:	f107 0310 	add.w	r3, r7, #16
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7f1 f9e6 	bl	8006474 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 80150a8:	8a3b      	ldrh	r3, [r7, #16]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d00f      	beq.n	80150ce <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>
    {
    	//char buf[128] = {0,};

        x = TS_State.X;
 80150ae:	8a7b      	ldrh	r3, [r7, #18]
 80150b0:	461a      	mov	r2, r3
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	601a      	str	r2, [r3, #0]
        y = TS_State.Y;
 80150b6:	8abb      	ldrh	r3, [r7, #20]
 80150b8:	461a      	mov	r2, r3
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	601a      	str	r2, [r3, #0]

        //x = 240 - x;
        y = 320 - y;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	601a      	str	r2, [r3, #0]

        //snprintf(buf, sizeof(buf), "x=%lu y=%lu\r\n", x, y);
        //HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 100);
        //DEBUG_PRINT(buf);

        return true;
 80150ca:	2301      	movs	r3, #1
 80150cc:	e000      	b.n	80150d0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>
    }

    //DEBUG_PRINT("return false");
    return false;
 80150ce:	2300      	movs	r3, #0
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3718      	adds	r7, #24
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}

080150d8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	4a05      	ldr	r2, [pc, #20]	; (80150f8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	601a      	str	r2, [r3, #0]
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7ff ffa5 	bl	8015038 <_ZN8touchgfx15TouchControllerD1Ev>
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	4618      	mov	r0, r3
 80150f2:	3708      	adds	r7, #8
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}
 80150f8:	0802e714 	.word	0x0802e714

080150fc <_ZN20STM32TouchControllerD0Ev>:
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b082      	sub	sp, #8
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f7ff ffe7 	bl	80150d8 <_ZN20STM32TouchControllerD1Ev>
 801510a:	2104      	movs	r1, #4
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f014 f840 	bl	8029192 <_ZdlPvj>
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	4618      	mov	r0, r3
 8015116:	3708      	adds	r7, #8
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}

0801511c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801511c:	b480      	push	{r7}
 801511e:	b083      	sub	sp, #12
 8015120:	af00      	add	r7, sp, #0
 8015122:	4603      	mov	r3, r0
 8015124:	71fb      	strb	r3, [r7, #7]

}
 8015126:	bf00      	nop
 8015128:	370c      	adds	r7, #12
 801512a:	46bd      	mov	sp, r7
 801512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015130:	4770      	bx	lr

08015132 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8015132:	b480      	push	{r7}
 8015134:	b083      	sub	sp, #12
 8015136:	af00      	add	r7, sp, #0
 8015138:	4603      	mov	r3, r0
 801513a:	71fb      	strb	r3, [r7, #7]

}
 801513c:	bf00      	nop
 801513e:	370c      	adds	r7, #12
 8015140:	46bd      	mov	sp, r7
 8015142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015146:	4770      	bx	lr

08015148 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8015148:	b480      	push	{r7}
 801514a:	b083      	sub	sp, #12
 801514c:	af00      	add	r7, sp, #0
 801514e:	4603      	mov	r3, r0
 8015150:	71fb      	strb	r3, [r7, #7]

}
 8015152:	bf00      	nop
 8015154:	370c      	adds	r7, #12
 8015156:	46bd      	mov	sp, r7
 8015158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515c:	4770      	bx	lr
	...

08015160 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8015160:	b480      	push	{r7}
 8015162:	b083      	sub	sp, #12
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
    {
 8015168:	4a04      	ldr	r2, [pc, #16]	; (801517c <_ZN8touchgfx3HALD1Ev+0x1c>)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	601a      	str	r2, [r3, #0]
    }
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	4618      	mov	r0, r3
 8015172:	370c      	adds	r7, #12
 8015174:	46bd      	mov	sp, r7
 8015176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517a:	4770      	bx	lr
 801517c:	0802f1ec 	.word	0x0802f1ec

08015180 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
    }
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f7ff ffe9 	bl	8015160 <_ZN8touchgfx3HALD1Ev>
 801518e:	217c      	movs	r1, #124	; 0x7c
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f013 fffe 	bl	8029192 <_ZdlPvj>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	4618      	mov	r0, r3
 801519a:	3708      	adds	r7, #8
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}

080151a0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80151a0:	b480      	push	{r7}
 80151a2:	b083      	sub	sp, #12
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	460b      	mov	r3, r1
 80151aa:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	78fa      	ldrb	r2, [r7, #3]
 80151b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	2201      	movs	r2, #1
 80151b8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80151bc:	bf00      	nop
 80151be:	370c      	adds	r7, #12
 80151c0:	46bd      	mov	sp, r7
 80151c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c6:	4770      	bx	lr

080151c8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b082      	sub	sp, #8
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d009      	beq.n	80151ee <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	685a      	ldr	r2, [r3, #4]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	4610      	mov	r0, r2
 80151e8:	4798      	blx	r3
 80151ea:	4603      	mov	r3, r0
 80151ec:	e000      	b.n	80151f0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 80151ee:	2300      	movs	r3, #0
        }
    }
 80151f0:	4618      	mov	r0, r3
 80151f2:	3708      	adds	r7, #8
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f002 ffd1 	bl	80181a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	3390      	adds	r3, #144	; 0x90
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	4798      	blx	r3
    }
 8015212:	bf00      	nop
 8015214:	3708      	adds	r7, #8
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}

0801521a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801521a:	b480      	push	{r7}
 801521c:	b083      	sub	sp, #12
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
 8015222:	6039      	str	r1, [r7, #0]
    {
        return false;
 8015224:	2300      	movs	r3, #0
    }
 8015226:	4618      	mov	r0, r3
 8015228:	370c      	adds	r7, #12
 801522a:	46bd      	mov	sp, r7
 801522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015230:	4770      	bx	lr
	...

08015234 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8015234:	b580      	push	{r7, lr}
 8015236:	b084      	sub	sp, #16
 8015238:	af00      	add	r7, sp, #0
 801523a:	60f8      	str	r0, [r7, #12]
 801523c:	60b9      	str	r1, [r7, #8]
 801523e:	607a      	str	r2, [r7, #4]
 8015240:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d106      	bne.n	8015256 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015248:	4b11      	ldr	r3, [pc, #68]	; (8015290 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801524a:	4a12      	ldr	r2, [pc, #72]	; (8015294 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801524c:	f240 216b 	movw	r1, #619	; 0x26b
 8015250:	4811      	ldr	r0, [pc, #68]	; (8015298 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8015252:	f014 f8c9 	bl	80293e8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	68ba      	ldr	r2, [r7, #8]
 801525a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	687a      	ldr	r2, [r7, #4]
 8015260:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	683a      	ldr	r2, [r7, #0]
 8015266:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2b00      	cmp	r3, #0
 801526c:	bf14      	ite	ne
 801526e:	2301      	movne	r3, #1
 8015270:	2300      	moveq	r3, #0
 8015272:	b2da      	uxtb	r2, r3
 8015274:	4b09      	ldr	r3, [pc, #36]	; (801529c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8015276:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	2b00      	cmp	r3, #0
 801527c:	bf14      	ite	ne
 801527e:	2301      	movne	r3, #1
 8015280:	2300      	moveq	r3, #0
 8015282:	b2da      	uxtb	r2, r3
 8015284:	4b06      	ldr	r3, [pc, #24]	; (80152a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8015286:	701a      	strb	r2, [r3, #0]
    }
 8015288:	bf00      	nop
 801528a:	3710      	adds	r7, #16
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}
 8015290:	0802dce0 	.word	0x0802dce0
 8015294:	0802dd18 	.word	0x0802dd18
 8015298:	0802dd68 	.word	0x0802dd68
 801529c:	2000b732 	.word	0x2000b732
 80152a0:	2000b733 	.word	0x2000b733

080152a4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80152a4:	b480      	push	{r7}
 80152a6:	b083      	sub	sp, #12
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80152ac:	2300      	movs	r3, #0
    }
 80152ae:	4618      	mov	r0, r3
 80152b0:	370c      	adds	r7, #12
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr

080152ba <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80152ba:	b580      	push	{r7, lr}
 80152bc:	b082      	sub	sp, #8
 80152be:	af00      	add	r7, sp, #0
 80152c0:	6078      	str	r0, [r7, #4]
 80152c2:	460b      	mov	r3, r1
 80152c4:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d004      	beq.n	80152d8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152d2:	887a      	ldrh	r2, [r7, #2]
 80152d4:	4610      	mov	r0, r2
 80152d6:	4798      	blx	r3
        }
    }
 80152d8:	bf00      	nop
 80152da:	3708      	adds	r7, #8
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}

080152e0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	685a      	ldr	r2, [r3, #4]
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	685b      	ldr	r3, [r3, #4]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	3318      	adds	r3, #24
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	4610      	mov	r0, r2
 80152f8:	4798      	blx	r3
 80152fa:	4603      	mov	r3, r0
    }
 80152fc:	4618      	mov	r0, r3
 80152fe:	3708      	adds	r7, #8
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}

08015304 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8015304:	b480      	push	{r7}
 8015306:	b083      	sub	sp, #12
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015318:	429a      	cmp	r2, r3
 801531a:	d017      	beq.n	801534c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 801531c:	4b1a      	ldr	r3, [pc, #104]	; (8015388 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d12a      	bne.n	801537a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8015324:	4b19      	ldr	r3, [pc, #100]	; (801538c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015326:	881a      	ldrh	r2, [r3, #0]
 8015328:	4b19      	ldr	r3, [pc, #100]	; (8015390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801532a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801532c:	4b19      	ldr	r3, [pc, #100]	; (8015394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801532e:	881a      	ldrh	r2, [r3, #0]
 8015330:	4b19      	ldr	r3, [pc, #100]	; (8015398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015332:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8015334:	4b16      	ldr	r3, [pc, #88]	; (8015390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015336:	881a      	ldrh	r2, [r3, #0]
 8015338:	4b16      	ldr	r3, [pc, #88]	; (8015394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801533a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 801533c:	4b16      	ldr	r3, [pc, #88]	; (8015398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801533e:	881a      	ldrh	r2, [r3, #0]
 8015340:	4b12      	ldr	r3, [pc, #72]	; (801538c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015342:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8015344:	4b10      	ldr	r3, [pc, #64]	; (8015388 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015346:	2201      	movs	r2, #1
 8015348:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801534a:	e016      	b.n	801537a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 801534c:	4b0e      	ldr	r3, [pc, #56]	; (8015388 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801534e:	781b      	ldrb	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d012      	beq.n	801537a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8015354:	4b0f      	ldr	r3, [pc, #60]	; (8015394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015356:	881a      	ldrh	r2, [r3, #0]
 8015358:	4b0d      	ldr	r3, [pc, #52]	; (8015390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801535a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 801535c:	4b0b      	ldr	r3, [pc, #44]	; (801538c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801535e:	881a      	ldrh	r2, [r3, #0]
 8015360:	4b0d      	ldr	r3, [pc, #52]	; (8015398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015362:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8015364:	4b0c      	ldr	r3, [pc, #48]	; (8015398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015366:	881a      	ldrh	r2, [r3, #0]
 8015368:	4b0a      	ldr	r3, [pc, #40]	; (8015394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801536a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 801536c:	4b08      	ldr	r3, [pc, #32]	; (8015390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801536e:	881a      	ldrh	r2, [r3, #0]
 8015370:	4b06      	ldr	r3, [pc, #24]	; (801538c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015372:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8015374:	4b04      	ldr	r3, [pc, #16]	; (8015388 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015376:	2200      	movs	r2, #0
 8015378:	701a      	strb	r2, [r3, #0]
    }
 801537a:	bf00      	nop
 801537c:	370c      	adds	r7, #12
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr
 8015386:	bf00      	nop
 8015388:	2000b72c 	.word	0x2000b72c
 801538c:	2000b728 	.word	0x2000b728
 8015390:	2000b72e 	.word	0x2000b72e
 8015394:	2000b72a 	.word	0x2000b72a
 8015398:	2000b730 	.word	0x2000b730

0801539c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingVariant when chaning rendering variant
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 801539c:	b480      	push	{r7}
 801539e:	b083      	sub	sp, #12
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
    {

    }
 80153a4:	bf00      	nop
 80153a6:	370c      	adds	r7, #12
 80153a8:	46bd      	mov	sp, r7
 80153aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ae:	4770      	bx	lr

080153b0 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingVariant when chaning rendering variant
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 80153b0:	b480      	push	{r7}
 80153b2:	b083      	sub	sp, #12
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
    {

    }
 80153b8:	bf00      	nop
 80153ba:	370c      	adds	r7, #12
 80153bc:	46bd      	mov	sp, r7
 80153be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c2:	4770      	bx	lr

080153c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f002 f957 	bl	8017682 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80153d4:	bf00      	nop
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}

080153dc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	4a05      	ldr	r2, [pc, #20]	; (80153fc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	601a      	str	r2, [r3, #0]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7ff feb7 	bl	8015160 <_ZN8touchgfx3HALD1Ev>
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	4618      	mov	r0, r3
 80153f6:	3708      	adds	r7, #8
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	0802e948 	.word	0x0802e948

08015400 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f7ff ffe7 	bl	80153dc <_ZN20TouchGFXGeneratedHALD1Ev>
 801540e:	217c      	movs	r1, #124	; 0x7c
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f013 febe 	bl	8029192 <_ZdlPvj>
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	4618      	mov	r0, r3
 801541a:	3708      	adds	r7, #8
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}

08015420 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	4618      	mov	r0, r3
 801542c:	f7ff ffca 	bl	80153c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8015430:	bf00      	nop
 8015432:	3708      	adds	r7, #8
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <_ZN11TouchGFXHAL10initializeEv>:
using namespace touchgfx;

extern UART_HandleTypeDef huart1;

void TouchGFXHAL::initialize()
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	4618      	mov	r0, r3
 8015444:	f001 fb8a 	bl	8016b5c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8015448:	bf00      	nop
 801544a:	3708      	adds	r7, #8
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}

08015450 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
	enableLCDControllerInterrupt();
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	3368      	adds	r3, #104	; 0x68
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	4798      	blx	r3
	enableInterrupts();
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	3360      	adds	r3, #96	; 0x60
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	4798      	blx	r3

	OSWrappers::waitForVSync();
 8015470:	f000 f92a 	bl	80156c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
	backPorchExited();
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	3358      	adds	r3, #88	; 0x58
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	4610      	mov	r0, r2
 8015480:	4798      	blx	r3

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8015482:	2201      	movs	r2, #1
 8015484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015488:	480a      	ldr	r0, [pc, #40]	; (80154b4 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 801548a:	f7f2 fb1b 	bl	8007ac4 <HAL_GPIO_WritePin>

	LCD_IO_WriteReg(0x29);
 801548e:	2029      	movs	r0, #41	; 0x29
 8015490:	f7f0 ff02 	bl	8006298 <LCD_IO_WriteReg>

	HAL_UART_Transmit(&huart1,
 8015494:	2364      	movs	r3, #100	; 0x64
 8015496:	2218      	movs	r2, #24
 8015498:	4907      	ldr	r1, [pc, #28]	; (80154b8 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 801549a:	4808      	ldr	r0, [pc, #32]	; (80154bc <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
 801549c:	f7f6 fd45 	bl	800bf2a <HAL_UART_Transmit>
					(uint8_t *)"taskEntry... init !!!!\r\n",
					strlen("taskEntry... init !!!!\r\n"), 100);
	for(;;)
	{
		OSWrappers::waitForVSync();
 80154a0:	f000 f912 	bl	80156c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
		backPorchExited();
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	3358      	adds	r3, #88	; 0x58
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	4610      	mov	r0, r2
 80154b0:	4798      	blx	r3
		OSWrappers::waitForVSync();
 80154b2:	e7f5      	b.n	80154a0 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 80154b4:	40021800 	.word	0x40021800
 80154b8:	0802ddac 	.word	0x0802ddac
 80154bc:	2000c524 	.word	0x2000c524

080154c0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	4618      	mov	r0, r3
 80154cc:	f001 fbd2 	bl	8016c74 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80154d0:	4603      	mov	r3, r0
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3708      	adds	r7, #8
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}

080154da <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80154da:	b580      	push	{r7, lr}
 80154dc:	b082      	sub	sp, #8
 80154de:	af00      	add	r7, sp, #0
 80154e0:	6078      	str	r0, [r7, #4]
 80154e2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	6839      	ldr	r1, [r7, #0]
 80154e8:	4618      	mov	r0, r3
 80154ea:	f001 fbd1 	bl	8016c90 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80154ee:	bf00      	nop
 80154f0:	3708      	adds	r7, #8
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}

080154f6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80154f6:	b580      	push	{r7, lr}
 80154f8:	b082      	sub	sp, #8
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
 80154fe:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	6839      	ldr	r1, [r7, #0]
 8015504:	4618      	mov	r0, r3
 8015506:	f001 fbd9 	bl	8016cbc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801550a:	bf00      	nop
 801550c:	3708      	adds	r7, #8
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}

08015512 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015512:	b580      	push	{r7, lr}
 8015514:	b084      	sub	sp, #16
 8015516:	af00      	add	r7, sp, #0
 8015518:	60f8      	str	r0, [r7, #12]
 801551a:	60b9      	str	r1, [r7, #8]
 801551c:	607a      	str	r2, [r7, #4]
 801551e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8015520:	68f8      	ldr	r0, [r7, #12]
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	68b9      	ldr	r1, [r7, #8]
 8015528:	f001 fbd6 	bl	8016cd8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 801552c:	4603      	mov	r3, r0
}
 801552e:	4618      	mov	r0, r3
 8015530:	3710      	adds	r7, #16
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}

08015536 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8015536:	b580      	push	{r7, lr}
 8015538:	b082      	sub	sp, #8
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	4618      	mov	r0, r3
 8015542:	f001 fb3d 	bl	8016bc0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8015546:	bf00      	nop
 8015548:	3708      	adds	r7, #8
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}

0801554e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801554e:	b580      	push	{r7, lr}
 8015550:	b082      	sub	sp, #8
 8015552:	af00      	add	r7, sp, #0
 8015554:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	4618      	mov	r0, r3
 801555a:	f001 fb41 	bl	8016be0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801555e:	bf00      	nop
 8015560:	3708      	adds	r7, #8
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}

08015566 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8015566:	b580      	push	{r7, lr}
 8015568:	b082      	sub	sp, #8
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	4618      	mov	r0, r3
 8015572:	f001 fb43 	bl	8016bfc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8015576:	bf00      	nop
 8015578:	3708      	adds	r7, #8
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}

0801557e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801557e:	b580      	push	{r7, lr}
 8015580:	b082      	sub	sp, #8
 8015582:	af00      	add	r7, sp, #0
 8015584:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	4618      	mov	r0, r3
 801558a:	f001 fb45 	bl	8016c18 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801558e:	bf00      	nop
 8015590:	3708      	adds	r7, #8
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
	...

08015598 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	4a05      	ldr	r2, [pc, #20]	; (80155b8 <_ZN11TouchGFXHALD1Ev+0x20>)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	601a      	str	r2, [r3, #0]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7ff ff17 	bl	80153dc <_ZN20TouchGFXGeneratedHALD1Ev>
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	4618      	mov	r0, r3
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}
 80155b8:	0802e744 	.word	0x0802e744

080155bc <_ZN11TouchGFXHALD0Ev>:
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f7ff ffe7 	bl	8015598 <_ZN11TouchGFXHALD1Ev>
 80155ca:	217c      	movs	r1, #124	; 0x7c
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f013 fde0 	bl	8029192 <_ZdlPvj>
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	4618      	mov	r0, r3
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}

080155dc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80155e0:	2200      	movs	r2, #0
 80155e2:	2101      	movs	r1, #1
 80155e4:	2001      	movs	r0, #1
 80155e6:	f7f8 fe69 	bl	800e2bc <osSemaphoreNew>
 80155ea:	4603      	mov	r3, r0
 80155ec:	4a0f      	ldr	r2, [pc, #60]	; (801562c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80155ee:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80155f0:	4b0e      	ldr	r3, [pc, #56]	; (801562c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d105      	bne.n	8015604 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80155f8:	4b0d      	ldr	r3, [pc, #52]	; (8015630 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80155fa:	4a0e      	ldr	r2, [pc, #56]	; (8015634 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80155fc:	2125      	movs	r1, #37	; 0x25
 80155fe:	480e      	ldr	r0, [pc, #56]	; (8015638 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015600:	f013 fef2 	bl	80293e8 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8015604:	2200      	movs	r2, #0
 8015606:	2104      	movs	r1, #4
 8015608:	2001      	movs	r0, #1
 801560a:	f7f8 ff77 	bl	800e4fc <osMessageQueueNew>
 801560e:	4603      	mov	r3, r0
 8015610:	4a0a      	ldr	r2, [pc, #40]	; (801563c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8015612:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8015614:	4b09      	ldr	r3, [pc, #36]	; (801563c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d105      	bne.n	8015628 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 801561c:	4b08      	ldr	r3, [pc, #32]	; (8015640 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801561e:	4a05      	ldr	r2, [pc, #20]	; (8015634 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015620:	2129      	movs	r1, #41	; 0x29
 8015622:	4805      	ldr	r0, [pc, #20]	; (8015638 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015624:	f013 fee0 	bl	80293e8 <__assert_func>
}
 8015628:	bf00      	nop
 801562a:	bd80      	pop	{r7, pc}
 801562c:	2000a530 	.word	0x2000a530
 8015630:	0802ddc8 	.word	0x0802ddc8
 8015634:	0802de14 	.word	0x0802de14
 8015638:	0802de44 	.word	0x0802de44
 801563c:	2000a534 	.word	0x2000a534
 8015640:	0802de70 	.word	0x0802de70

08015644 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8015644:	b580      	push	{r7, lr}
 8015646:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8015648:	4b04      	ldr	r3, [pc, #16]	; (801565c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	f04f 31ff 	mov.w	r1, #4294967295
 8015650:	4618      	mov	r0, r3
 8015652:	f7f8 febd 	bl	800e3d0 <osSemaphoreAcquire>
}
 8015656:	bf00      	nop
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	2000a530 	.word	0x2000a530

08015660 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8015660:	b580      	push	{r7, lr}
 8015662:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8015664:	4b03      	ldr	r3, [pc, #12]	; (8015674 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	4618      	mov	r0, r3
 801566a:	f7f8 ff03 	bl	800e474 <osSemaphoreRelease>
}
 801566e:	bf00      	nop
 8015670:	bd80      	pop	{r7, pc}
 8015672:	bf00      	nop
 8015674:	2000a530 	.word	0x2000a530

08015678 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8015678:	b580      	push	{r7, lr}
 801567a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 801567c:	4b03      	ldr	r3, [pc, #12]	; (801568c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	2100      	movs	r1, #0
 8015682:	4618      	mov	r0, r3
 8015684:	f7f8 fea4 	bl	800e3d0 <osSemaphoreAcquire>
}
 8015688:	bf00      	nop
 801568a:	bd80      	pop	{r7, pc}
 801568c:	2000a530 	.word	0x2000a530

08015690 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8015690:	b580      	push	{r7, lr}
 8015692:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8015694:	4b03      	ldr	r3, [pc, #12]	; (80156a4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	4618      	mov	r0, r3
 801569a:	f7f8 feeb 	bl	800e474 <osSemaphoreRelease>
}
 801569e:	bf00      	nop
 80156a0:	bd80      	pop	{r7, pc}
 80156a2:	bf00      	nop
 80156a4:	2000a530 	.word	0x2000a530

080156a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80156ac:	4b04      	ldr	r3, [pc, #16]	; (80156c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80156ae:	6818      	ldr	r0, [r3, #0]
 80156b0:	2300      	movs	r3, #0
 80156b2:	2200      	movs	r2, #0
 80156b4:	4903      	ldr	r1, [pc, #12]	; (80156c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80156b6:	f7f8 ff95 	bl	800e5e4 <osMessageQueuePut>
}
 80156ba:	bf00      	nop
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	2000a534 	.word	0x2000a534
 80156c4:	2000008c 	.word	0x2000008c

080156c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80156ce:	4b09      	ldr	r3, [pc, #36]	; (80156f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80156d0:	6818      	ldr	r0, [r3, #0]
 80156d2:	1d39      	adds	r1, r7, #4
 80156d4:	2300      	movs	r3, #0
 80156d6:	2200      	movs	r2, #0
 80156d8:	f7f8 ffe4 	bl	800e6a4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80156dc:	4b05      	ldr	r3, [pc, #20]	; (80156f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80156de:	6818      	ldr	r0, [r3, #0]
 80156e0:	1d39      	adds	r1, r7, #4
 80156e2:	f04f 33ff 	mov.w	r3, #4294967295
 80156e6:	2200      	movs	r2, #0
 80156e8:	f7f8 ffdc 	bl	800e6a4 <osMessageQueueGet>
}
 80156ec:	bf00      	nop
 80156ee:	3708      	adds	r7, #8
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	2000a534 	.word	0x2000a534

080156f8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b082      	sub	sp, #8
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	4603      	mov	r3, r0
 8015700:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8015702:	88fb      	ldrh	r3, [r7, #6]
 8015704:	4618      	mov	r0, r3
 8015706:	f7f8 fc15 	bl	800df34 <osDelay>
}
 801570a:	bf00      	nop
 801570c:	3708      	adds	r7, #8
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}
	...

08015714 <__NVIC_EnableIRQ>:
{
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
 801571a:	4603      	mov	r3, r0
 801571c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801571e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015722:	2b00      	cmp	r3, #0
 8015724:	db0b      	blt.n	801573e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015726:	79fb      	ldrb	r3, [r7, #7]
 8015728:	f003 021f 	and.w	r2, r3, #31
 801572c:	4907      	ldr	r1, [pc, #28]	; (801574c <__NVIC_EnableIRQ+0x38>)
 801572e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015732:	095b      	lsrs	r3, r3, #5
 8015734:	2001      	movs	r0, #1
 8015736:	fa00 f202 	lsl.w	r2, r0, r2
 801573a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801573e:	bf00      	nop
 8015740:	370c      	adds	r7, #12
 8015742:	46bd      	mov	sp, r7
 8015744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015748:	4770      	bx	lr
 801574a:	bf00      	nop
 801574c:	e000e100 	.word	0xe000e100

08015750 <__NVIC_DisableIRQ>:
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	4603      	mov	r3, r0
 8015758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801575a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801575e:	2b00      	cmp	r3, #0
 8015760:	db12      	blt.n	8015788 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015762:	79fb      	ldrb	r3, [r7, #7]
 8015764:	f003 021f 	and.w	r2, r3, #31
 8015768:	490a      	ldr	r1, [pc, #40]	; (8015794 <__NVIC_DisableIRQ+0x44>)
 801576a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801576e:	095b      	lsrs	r3, r3, #5
 8015770:	2001      	movs	r0, #1
 8015772:	fa00 f202 	lsl.w	r2, r0, r2
 8015776:	3320      	adds	r3, #32
 8015778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801577c:	f3bf 8f4f 	dsb	sy
}
 8015780:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015782:	f3bf 8f6f 	isb	sy
}
 8015786:	bf00      	nop
}
 8015788:	bf00      	nop
 801578a:	370c      	adds	r7, #12
 801578c:	46bd      	mov	sp, r7
 801578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015792:	4770      	bx	lr
 8015794:	e000e100 	.word	0xe000e100

08015798 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8015798:	b480      	push	{r7}
 801579a:	b083      	sub	sp, #12
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
        : color(0)
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2200      	movs	r2, #0
 80157a4:	601a      	str	r2, [r3, #0]
    }
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	4618      	mov	r0, r3
 80157aa:	370c      	adds	r7, #12
 80157ac:	46bd      	mov	sp, r7
 80157ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b2:	4770      	bx	lr

080157b4 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
        return color;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
    }
 80157c0:	4618      	mov	r0, r3
 80157c2:	370c      	adds	r7, #12
 80157c4:	46bd      	mov	sp, r7
 80157c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ca:	4770      	bx	lr

080157cc <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80157cc:	b480      	push	{r7}
 80157ce:	b083      	sub	sp, #12
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
    {
 80157d4:	4a04      	ldr	r2, [pc, #16]	; (80157e8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	601a      	str	r2, [r3, #0]
    }
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	4618      	mov	r0, r3
 80157de:	370c      	adds	r7, #12
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr
 80157e8:	0802e850 	.word	0x0802e850

080157ec <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
    }
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f7ff ffe9 	bl	80157cc <_ZN8touchgfx9DMA_QueueD1Ev>
 80157fa:	2104      	movs	r1, #4
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f013 fcc8 	bl	8029192 <_ZdlPvj>
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	4618      	mov	r0, r3
 8015806:	3708      	adds	r7, #8
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}

0801580c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 801580c:	b580      	push	{r7, lr}
 801580e:	b082      	sub	sp, #8
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	3344      	adds	r3, #68	; 0x44
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	4798      	blx	r3
    }
 8015820:	bf00      	nop
 8015822:	3708      	adds	r7, #8
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}

08015828 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8015828:	b480      	push	{r7}
 801582a:	b083      	sub	sp, #12
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
    {
 8015830:	4a04      	ldr	r2, [pc, #16]	; (8015844 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	601a      	str	r2, [r3, #0]
    }
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	4618      	mov	r0, r3
 801583a:	370c      	adds	r7, #12
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr
 8015844:	0802f638 	.word	0x0802f638

08015848 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
    }
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f7ff ffe9 	bl	8015828 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8015856:	210c      	movs	r1, #12
 8015858:	6878      	ldr	r0, [r7, #4]
 801585a:	f013 fc9a 	bl	8029192 <_ZdlPvj>
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	4618      	mov	r0, r3
 8015862:	3708      	adds	r7, #8
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8015872:	4a09      	ldr	r2, [pc, #36]	; (8015898 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	601a      	str	r2, [r3, #0]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	683a      	ldr	r2, [r7, #0]
 801587c:	605a      	str	r2, [r3, #4]
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2200      	movs	r2, #0
 8015882:	721a      	strb	r2, [r3, #8]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	2200      	movs	r2, #0
 8015888:	725a      	strb	r2, [r3, #9]
    {
    }
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	4618      	mov	r0, r3
 801588e:	370c      	adds	r7, #12
 8015890:	46bd      	mov	sp, r7
 8015892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015896:	4770      	bx	lr
 8015898:	0802f638 	.word	0x0802f638

0801589c <_ZN10STM32F4DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 801589c:	b480      	push	{r7}
 801589e:	b083      	sub	sp, #12
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80158a4:	2301      	movs	r3, #1
    }
 80158a6:	4618      	mov	r0, r3
 80158a8:	370c      	adds	r7, #12
 80158aa:	46bd      	mov	sp, r7
 80158ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b0:	4770      	bx	lr

080158b2 <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80158b2:	b580      	push	{r7, lr}
 80158b4:	b082      	sub	sp, #8
 80158b6:	af00      	add	r7, sp, #0
 80158b8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	3328      	adds	r3, #40	; 0x28
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	4610      	mov	r0, r2
 80158c6:	4798      	blx	r3
    }
 80158c8:	bf00      	nop
 80158ca:	3708      	adds	r7, #8
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}

080158d0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b082      	sub	sp, #8
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	685a      	ldr	r2, [r3, #4]
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	685b      	ldr	r3, [r3, #4]
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	3314      	adds	r3, #20
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	4610      	mov	r0, r2
 80158e8:	4798      	blx	r3
    }
 80158ea:	bf00      	nop
 80158ec:	3708      	adds	r7, #8
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}

080158f2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80158f2:	b580      	push	{r7, lr}
 80158f4:	b082      	sub	sp, #8
 80158f6:	af00      	add	r7, sp, #0
 80158f8:	6078      	str	r0, [r7, #4]
    (void)handle; // Unused argument
    HAL::getInstance()->signalDMAInterrupt();
 80158fa:	f7fc ff0b 	bl	8012714 <_ZN8touchgfx3HAL11getInstanceEv>
 80158fe:	4603      	mov	r3, r0
 8015900:	4618      	mov	r0, r3
 8015902:	f7ff ffe5 	bl	80158d0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8015906:	bf00      	nop
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801590e:	b580      	push	{r7, lr}
 8015910:	b082      	sub	sp, #8
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	3318      	adds	r3, #24
 801591a:	4618      	mov	r0, r3
 801591c:	f7ff ff3c 	bl	8015798 <_ZN8touchgfx9colortypeC1Ev>
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	4618      	mov	r0, r3
 8015924:	3708      	adds	r7, #8
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
	...

0801592c <_ZN10STM32F4DMAC1Ev>:
}

STM32F4DMA::STM32F4DMA()
 801592c:	b5b0      	push	{r4, r5, r7, lr}
 801592e:	b082      	sub	sp, #8
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8015934:	687a      	ldr	r2, [r7, #4]
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	330c      	adds	r3, #12
 801593a:	4619      	mov	r1, r3
 801593c:	4610      	mov	r0, r2
 801593e:	f7ff ff93 	bl	8015868 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8015942:	4a0e      	ldr	r2, [pc, #56]	; (801597c <_ZN10STM32F4DMAC1Ev+0x50>)
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	601a      	str	r2, [r3, #0]
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f103 000c 	add.w	r0, r3, #12
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	3320      	adds	r3, #32
 8015952:	2260      	movs	r2, #96	; 0x60
 8015954:	4619      	mov	r1, r3
 8015956:	f002 fd53 	bl	8018400 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	3320      	adds	r3, #32
 801595e:	245f      	movs	r4, #95	; 0x5f
 8015960:	461d      	mov	r5, r3
 8015962:	2c00      	cmp	r4, #0
 8015964:	db05      	blt.n	8015972 <_ZN10STM32F4DMAC1Ev+0x46>
 8015966:	4628      	mov	r0, r5
 8015968:	f7ff ffd1 	bl	801590e <_ZN8touchgfx6BlitOpC1Ev>
 801596c:	3520      	adds	r5, #32
 801596e:	3c01      	subs	r4, #1
 8015970:	e7f7      	b.n	8015962 <_ZN10STM32F4DMAC1Ev+0x36>
{
}
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	4618      	mov	r0, r3
 8015976:	3708      	adds	r7, #8
 8015978:	46bd      	mov	sp, r7
 801597a:	bdb0      	pop	{r4, r5, r7, pc}
 801597c:	0802e800 	.word	0x0802e800

08015980 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
 8015988:	4a09      	ldr	r2, [pc, #36]	; (80159b0 <_ZN10STM32F4DMAD1Ev+0x30>)
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 801598e:	205a      	movs	r0, #90	; 0x5a
 8015990:	f7ff fede 	bl	8015750 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	330c      	adds	r3, #12
 8015998:	4618      	mov	r0, r3
 801599a:	f000 fb27 	bl	8015fec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7ff ff41 	bl	8015828 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	4618      	mov	r0, r3
 80159aa:	3708      	adds	r7, #8
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}
 80159b0:	0802e800 	.word	0x0802e800

080159b4 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
}
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f7ff ffdf 	bl	8015980 <_ZN10STM32F4DMAD1Ev>
 80159c2:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f013 fbe3 	bl	8029192 <_ZdlPvj>
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	4618      	mov	r0, r3
 80159d0:	3708      	adds	r7, #8
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
	...

080159d8 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b084      	sub	sp, #16
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80159e0:	2300      	movs	r3, #0
 80159e2:	60fb      	str	r3, [r7, #12]
 80159e4:	4b10      	ldr	r3, [pc, #64]	; (8015a28 <_ZN10STM32F4DMA10initializeEv+0x50>)
 80159e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159e8:	4a0f      	ldr	r2, [pc, #60]	; (8015a28 <_ZN10STM32F4DMA10initializeEv+0x50>)
 80159ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80159ee:	6313      	str	r3, [r2, #48]	; 0x30
 80159f0:	4b0d      	ldr	r3, [pc, #52]	; (8015a28 <_ZN10STM32F4DMA10initializeEv+0x50>)
 80159f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80159f8:	60fb      	str	r3, [r7, #12]
 80159fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80159fc:	4b0a      	ldr	r3, [pc, #40]	; (8015a28 <_ZN10STM32F4DMA10initializeEv+0x50>)
 80159fe:	691b      	ldr	r3, [r3, #16]
 8015a00:	4a09      	ldr	r2, [pc, #36]	; (8015a28 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8015a02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015a06:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8015a08:	4b07      	ldr	r3, [pc, #28]	; (8015a28 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8015a0a:	691b      	ldr	r3, [r3, #16]
 8015a0c:	4a06      	ldr	r2, [pc, #24]	; (8015a28 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8015a0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8015a12:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8015a14:	4b05      	ldr	r3, [pc, #20]	; (8015a2c <_ZN10STM32F4DMA10initializeEv+0x54>)
 8015a16:	4a06      	ldr	r2, [pc, #24]	; (8015a30 <_ZN10STM32F4DMA10initializeEv+0x58>)
 8015a18:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015a1a:	205a      	movs	r0, #90	; 0x5a
 8015a1c:	f7ff fe7a 	bl	8015714 <__NVIC_EnableIRQ>
}
 8015a20:	bf00      	nop
 8015a22:	3710      	adds	r7, #16
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}
 8015a28:	40023800 	.word	0x40023800
 8015a2c:	2000c25c 	.word	0x2000c25c
 8015a30:	080158f3 	.word	0x080158f3

08015a34 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b084      	sub	sp, #16
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
 8015a3c:	460b      	mov	r3, r1
 8015a3e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015a40:	2300      	movs	r3, #0
 8015a42:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015a44:	78fb      	ldrb	r3, [r7, #3]
 8015a46:	2b0b      	cmp	r3, #11
 8015a48:	d826      	bhi.n	8015a98 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8015a4a:	a201      	add	r2, pc, #4	; (adr r2, 8015a50 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a50:	08015a8d 	.word	0x08015a8d
 8015a54:	08015a87 	.word	0x08015a87
 8015a58:	08015a81 	.word	0x08015a81
 8015a5c:	08015a99 	.word	0x08015a99
 8015a60:	08015a99 	.word	0x08015a99
 8015a64:	08015a99 	.word	0x08015a99
 8015a68:	08015a99 	.word	0x08015a99
 8015a6c:	08015a93 	.word	0x08015a93
 8015a70:	08015a93 	.word	0x08015a93
 8015a74:	08015a93 	.word	0x08015a93
 8015a78:	08015a93 	.word	0x08015a93
 8015a7c:	08015a93 	.word	0x08015a93
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015a80:	2300      	movs	r3, #0
 8015a82:	60fb      	str	r3, [r7, #12]
        break;
 8015a84:	e00e      	b.n	8015aa4 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8015a86:	2301      	movs	r3, #1
 8015a88:	60fb      	str	r3, [r7, #12]
        break;
 8015a8a:	e00b      	b.n	8015aa4 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8015a8c:	2302      	movs	r3, #2
 8015a8e:	60fb      	str	r3, [r7, #12]
        break;
 8015a90:	e008      	b.n	8015aa4 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8015a92:	2305      	movs	r3, #5
 8015a94:	60fb      	str	r3, [r7, #12]
        break;
 8015a96:	e005      	b.n	8015aa4 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015a98:	4b05      	ldr	r3, [pc, #20]	; (8015ab0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8015a9a:	4a06      	ldr	r2, [pc, #24]	; (8015ab4 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8015a9c:	2165      	movs	r1, #101	; 0x65
 8015a9e:	4806      	ldr	r0, [pc, #24]	; (8015ab8 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8015aa0:	f013 fca2 	bl	80293e8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015aa4:	68fb      	ldr	r3, [r7, #12]
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	3710      	adds	r7, #16
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}
 8015aae:	bf00      	nop
 8015ab0:	0802deb4 	.word	0x0802deb4
 8015ab4:	0802ded0 	.word	0x0802ded0
 8015ab8:	0802df1c 	.word	0x0802df1c

08015abc <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b084      	sub	sp, #16
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
 8015ac4:	460b      	mov	r3, r1
 8015ac6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015acc:	78fb      	ldrb	r3, [r7, #3]
 8015ace:	2b0a      	cmp	r3, #10
 8015ad0:	d821      	bhi.n	8015b16 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8015ad2:	a201      	add	r2, pc, #4	; (adr r2, 8015ad8 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ad8:	08015b11 	.word	0x08015b11
 8015adc:	08015b0b 	.word	0x08015b0b
 8015ae0:	08015b05 	.word	0x08015b05
 8015ae4:	08015b17 	.word	0x08015b17
 8015ae8:	08015b17 	.word	0x08015b17
 8015aec:	08015b17 	.word	0x08015b17
 8015af0:	08015b17 	.word	0x08015b17
 8015af4:	08015b0b 	.word	0x08015b0b
 8015af8:	08015b0b 	.word	0x08015b0b
 8015afc:	08015b0b 	.word	0x08015b0b
 8015b00:	08015b0b 	.word	0x08015b0b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015b04:	2300      	movs	r3, #0
 8015b06:	60fb      	str	r3, [r7, #12]
        break;
 8015b08:	e00b      	b.n	8015b22 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	60fb      	str	r3, [r7, #12]
        break;
 8015b0e:	e008      	b.n	8015b22 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8015b10:	2302      	movs	r3, #2
 8015b12:	60fb      	str	r3, [r7, #12]
        break;
 8015b14:	e005      	b.n	8015b22 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015b16:	4b05      	ldr	r3, [pc, #20]	; (8015b2c <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8015b18:	4a05      	ldr	r2, [pc, #20]	; (8015b30 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8015b1a:	2186      	movs	r1, #134	; 0x86
 8015b1c:	4805      	ldr	r0, [pc, #20]	; (8015b34 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8015b1e:	f013 fc63 	bl	80293e8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015b22:	68fb      	ldr	r3, [r7, #12]
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	3710      	adds	r7, #16
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}
 8015b2c:	0802deb4 	.word	0x0802deb4
 8015b30:	0802df48 	.word	0x0802df48
 8015b34:	0802df1c 	.word	0x0802df1c

08015b38 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8015b40:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	370c      	adds	r7, #12
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4e:	4770      	bx	lr

08015b50 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 8015b50:	b590      	push	{r4, r7, lr}
 8015b52:	b089      	sub	sp, #36	; 0x24
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	7f5b      	ldrb	r3, [r3, #29]
 8015b5e:	4619      	mov	r1, r3
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	f7ff ff67 	bl	8015a34 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015b66:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	7f9b      	ldrb	r3, [r3, #30]
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f7ff ff60 	bl	8015a34 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015b74:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	7f9b      	ldrb	r3, [r3, #30]
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f7ff ff9d 	bl	8015abc <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015b82:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	8adb      	ldrh	r3, [r3, #22]
 8015b88:	461a      	mov	r2, r3
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	8a1b      	ldrh	r3, [r3, #16]
 8015b8e:	1ad2      	subs	r2, r2, r3
 8015b90:	4b8e      	ldr	r3, [pc, #568]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	8adb      	ldrh	r3, [r3, #22]
 8015b98:	461a      	mov	r2, r3
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	8a1b      	ldrh	r3, [r3, #16]
 8015b9e:	1ad2      	subs	r2, r2, r3
 8015ba0:	4b8a      	ldr	r3, [pc, #552]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015ba2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	8a9b      	ldrh	r3, [r3, #20]
 8015ba8:	461a      	mov	r2, r3
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	8a1b      	ldrh	r3, [r3, #16]
 8015bae:	1ad2      	subs	r2, r2, r3
 8015bb0:	4b86      	ldr	r3, [pc, #536]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015bb2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8015bb4:	4a85      	ldr	r2, [pc, #532]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	8a5b      	ldrh	r3, [r3, #18]
 8015bbe:	461a      	mov	r2, r3
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	8a1b      	ldrh	r3, [r3, #16]
 8015bc4:	041b      	lsls	r3, r3, #16
 8015bc6:	431a      	orrs	r2, r3
 8015bc8:	4b80      	ldr	r3, [pc, #512]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015bca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	68da      	ldr	r2, [r3, #12]
 8015bd0:	4b7e      	ldr	r3, [pc, #504]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015bd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	685a      	ldr	r2, [r3, #4]
 8015bd8:	4b7c      	ldr	r3, [pc, #496]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015bda:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015be4:	d047      	beq.n	8015c76 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
 8015be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015bea:	f200 80f9 	bhi.w	8015de0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 8015bee:	2b80      	cmp	r3, #128	; 0x80
 8015bf0:	d00e      	beq.n	8015c10 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 8015bf2:	2b80      	cmp	r3, #128	; 0x80
 8015bf4:	f200 80f4 	bhi.w	8015de0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 8015bf8:	2b40      	cmp	r3, #64	; 0x40
 8015bfa:	f000 80d2 	beq.w	8015da2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 8015bfe:	2b40      	cmp	r3, #64	; 0x40
 8015c00:	f200 80ee 	bhi.w	8015de0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 8015c04:	2b04      	cmp	r3, #4
 8015c06:	d069      	beq.n	8015cdc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>
 8015c08:	2b20      	cmp	r3, #32
 8015c0a:	f000 80ca 	beq.w	8015da2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 8015c0e:	e0e7      	b.n	8015de0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	7f1b      	ldrb	r3, [r3, #28]
 8015c14:	061b      	lsls	r3, r3, #24
 8015c16:	4a6d      	ldr	r2, [pc, #436]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015c1c:	f043 030a 	orr.w	r3, r3, #10
 8015c20:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	3318      	adds	r3, #24
 8015c26:	4618      	mov	r0, r3
 8015c28:	f7ff fdc4 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	021b      	lsls	r3, r3, #8
 8015c30:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	3318      	adds	r3, #24
 8015c38:	4618      	mov	r0, r3
 8015c3a:	f7ff fdbb 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	015b      	lsls	r3, r3, #5
 8015c42:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8015c46:	431c      	orrs	r4, r3
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	3318      	adds	r3, #24
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7ff fdb1 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015c52:	4603      	mov	r3, r0
 8015c54:	00db      	lsls	r3, r3, #3
 8015c56:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015c5a:	4a5c      	ldr	r2, [pc, #368]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015c5c:	4323      	orrs	r3, r4
 8015c5e:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015c60:	4a5a      	ldr	r2, [pc, #360]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015c62:	69bb      	ldr	r3, [r7, #24]
 8015c64:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	68da      	ldr	r2, [r3, #12]
 8015c6a:	4b58      	ldr	r3, [pc, #352]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015c6c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015c6e:	4b57      	ldr	r3, [pc, #348]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015c70:	4a57      	ldr	r2, [pc, #348]	; (8015dd0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8015c72:	601a      	str	r2, [r3, #0]
        break;
 8015c74:	e0f7      	b.n	8015e66 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	7f1b      	ldrb	r3, [r3, #28]
 8015c7a:	061b      	lsls	r3, r3, #24
 8015c7c:	4a53      	ldr	r2, [pc, #332]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015c82:	f043 0309 	orr.w	r3, r3, #9
 8015c86:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	3318      	adds	r3, #24
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7ff fd91 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015c92:	4603      	mov	r3, r0
 8015c94:	021b      	lsls	r3, r3, #8
 8015c96:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 8015c9a:	683b      	ldr	r3, [r7, #0]
 8015c9c:	3318      	adds	r3, #24
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7ff fd88 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	015b      	lsls	r3, r3, #5
 8015ca8:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8015cac:	431c      	orrs	r4, r3
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	3318      	adds	r3, #24
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7ff fd7e 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	00db      	lsls	r3, r3, #3
 8015cbc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015cc0:	4a42      	ldr	r2, [pc, #264]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015cc2:	4323      	orrs	r3, r4
 8015cc4:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015cc6:	4a41      	ldr	r2, [pc, #260]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015cc8:	69bb      	ldr	r3, [r7, #24]
 8015cca:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	68da      	ldr	r2, [r3, #12]
 8015cd0:	4b3e      	ldr	r3, [pc, #248]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015cd2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015cd4:	4b3d      	ldr	r3, [pc, #244]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015cd6:	4a3e      	ldr	r2, [pc, #248]	; (8015dd0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8015cd8:	601a      	str	r2, [r3, #0]
        break;
 8015cda:	e0c4      	b.n	8015e66 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	7f1b      	ldrb	r3, [r3, #28]
 8015ce0:	061b      	lsls	r3, r3, #24
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	69fb      	ldr	r3, [r7, #28]
 8015ce6:	4313      	orrs	r3, r2
 8015ce8:	4a38      	ldr	r2, [pc, #224]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015cee:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015cf0:	4a36      	ldr	r2, [pc, #216]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015cf2:	69bb      	ldr	r3, [r7, #24]
 8015cf4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	68da      	ldr	r2, [r3, #12]
 8015cfa:	4b34      	ldr	r3, [pc, #208]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015cfc:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	7f5b      	ldrb	r3, [r3, #29]
 8015d02:	2b0b      	cmp	r3, #11
 8015d04:	d149      	bne.n	8015d9a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24a>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	689b      	ldr	r3, [r3, #8]
 8015d0a:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	1d1a      	adds	r2, r3, #4
 8015d10:	4b2e      	ldr	r3, [pc, #184]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d12:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8015d14:	693b      	ldr	r3, [r7, #16]
 8015d16:	881b      	ldrh	r3, [r3, #0]
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d002      	beq.n	8015d24 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>
 8015d1e:	2b01      	cmp	r3, #1
 8015d20:	d00f      	beq.n	8015d42 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f2>
 8015d22:	e01e      	b.n	8015d62 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8015d24:	4b29      	ldr	r3, [pc, #164]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d26:	69db      	ldr	r3, [r3, #28]
 8015d28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015d2c:	f023 0310 	bic.w	r3, r3, #16
 8015d30:	693a      	ldr	r2, [r7, #16]
 8015d32:	8852      	ldrh	r2, [r2, #2]
 8015d34:	3a01      	subs	r2, #1
 8015d36:	0212      	lsls	r2, r2, #8
 8015d38:	4611      	mov	r1, r2
 8015d3a:	4a24      	ldr	r2, [pc, #144]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d3c:	430b      	orrs	r3, r1
 8015d3e:	61d3      	str	r3, [r2, #28]
                break;
 8015d40:	e015      	b.n	8015d6e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8015d42:	4b22      	ldr	r3, [pc, #136]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d44:	69db      	ldr	r3, [r3, #28]
 8015d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015d4a:	f023 0310 	bic.w	r3, r3, #16
 8015d4e:	693a      	ldr	r2, [r7, #16]
 8015d50:	8852      	ldrh	r2, [r2, #2]
 8015d52:	3a01      	subs	r2, #1
 8015d54:	0212      	lsls	r2, r2, #8
 8015d56:	4313      	orrs	r3, r2
 8015d58:	4a1c      	ldr	r2, [pc, #112]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d5a:	f043 0310 	orr.w	r3, r3, #16
 8015d5e:	61d3      	str	r3, [r2, #28]
                break;
 8015d60:	e005      	b.n	8015d6e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8015d62:	4b1c      	ldr	r3, [pc, #112]	; (8015dd4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 8015d64:	4a1c      	ldr	r2, [pc, #112]	; (8015dd8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8015d66:	21fc      	movs	r1, #252	; 0xfc
 8015d68:	481c      	ldr	r0, [pc, #112]	; (8015ddc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8015d6a:	f013 fb3d 	bl	80293e8 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8015d6e:	4b17      	ldr	r3, [pc, #92]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d70:	69db      	ldr	r3, [r3, #28]
 8015d72:	4a16      	ldr	r2, [pc, #88]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d74:	f043 0320 	orr.w	r3, r3, #32
 8015d78:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8015d7a:	4b14      	ldr	r3, [pc, #80]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d7c:	69db      	ldr	r3, [r3, #28]
 8015d7e:	f003 0320 	and.w	r3, r3, #32
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	bf14      	ite	ne
 8015d86:	2301      	movne	r3, #1
 8015d88:	2300      	moveq	r3, #0
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d001      	beq.n	8015d94 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
            {
                __NOP();
 8015d90:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8015d92:	e7f2      	b.n	8015d7a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22a>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8015d94:	4b0d      	ldr	r3, [pc, #52]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d96:	2210      	movs	r2, #16
 8015d98:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015d9a:	4b0c      	ldr	r3, [pc, #48]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015d9c:	4a0c      	ldr	r2, [pc, #48]	; (8015dd0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8015d9e:	601a      	str	r2, [r3, #0]
        break;
 8015da0:	e061      	b.n	8015e66 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	7f1b      	ldrb	r3, [r3, #28]
 8015da6:	061b      	lsls	r3, r3, #24
 8015da8:	461a      	mov	r2, r3
 8015daa:	69fb      	ldr	r3, [r7, #28]
 8015dac:	4313      	orrs	r3, r2
 8015dae:	4a07      	ldr	r2, [pc, #28]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015db4:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015db6:	4a05      	ldr	r2, [pc, #20]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015db8:	69bb      	ldr	r3, [r7, #24]
 8015dba:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	68da      	ldr	r2, [r3, #12]
 8015dc0:	4b02      	ldr	r3, [pc, #8]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015dc2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015dc4:	4b01      	ldr	r3, [pc, #4]	; (8015dcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8015dc6:	4a02      	ldr	r2, [pc, #8]	; (8015dd0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8015dc8:	601a      	str	r2, [r3, #0]
        break;
 8015dca:	e04c      	b.n	8015e66 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
 8015dcc:	4002b000 	.word	0x4002b000
 8015dd0:	00020201 	.word	0x00020201
 8015dd4:	0802df98 	.word	0x0802df98
 8015dd8:	0802dfb4 	.word	0x0802dfb4
 8015ddc:	0802df1c 	.word	0x0802df1c
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	7f1b      	ldrb	r3, [r3, #28]
 8015de4:	061b      	lsls	r3, r3, #24
 8015de6:	461a      	mov	r2, r3
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	4313      	orrs	r3, r2
 8015dec:	4a20      	ldr	r2, [pc, #128]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015df2:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	7f5b      	ldrb	r3, [r3, #29]
 8015df8:	2b0b      	cmp	r3, #11
 8015dfa:	d12f      	bne.n	8015e5c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30c>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	689b      	ldr	r3, [r3, #8]
 8015e00:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	1d1a      	adds	r2, r3, #4
 8015e06:	4b1a      	ldr	r3, [pc, #104]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015e08:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8015e0a:	4b19      	ldr	r3, [pc, #100]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015e0c:	69db      	ldr	r3, [r3, #28]
 8015e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015e12:	f023 0310 	bic.w	r3, r3, #16
 8015e16:	68fa      	ldr	r2, [r7, #12]
 8015e18:	8852      	ldrh	r2, [r2, #2]
 8015e1a:	3a01      	subs	r2, #1
 8015e1c:	0212      	lsls	r2, r2, #8
 8015e1e:	4313      	orrs	r3, r2
 8015e20:	4a13      	ldr	r2, [pc, #76]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015e22:	f043 0310 	orr.w	r3, r3, #16
 8015e26:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8015e28:	4b11      	ldr	r3, [pc, #68]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015e2a:	69db      	ldr	r3, [r3, #28]
 8015e2c:	4a10      	ldr	r2, [pc, #64]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015e2e:	f043 0320 	orr.w	r3, r3, #32
 8015e32:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8015e34:	4b0e      	ldr	r3, [pc, #56]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015e36:	69db      	ldr	r3, [r3, #28]
 8015e38:	f003 0320 	and.w	r3, r3, #32
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	bf14      	ite	ne
 8015e40:	2301      	movne	r3, #1
 8015e42:	2300      	moveq	r3, #0
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d001      	beq.n	8015e4e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fe>
            {
                __NOP();
 8015e4a:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8015e4c:	e7f2      	b.n	8015e34 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e4>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8015e4e:	4b08      	ldr	r3, [pc, #32]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015e50:	2210      	movs	r2, #16
 8015e52:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8015e54:	4b06      	ldr	r3, [pc, #24]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015e56:	4a07      	ldr	r2, [pc, #28]	; (8015e74 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 8015e58:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8015e5a:	e003      	b.n	8015e64 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x314>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8015e5c:	4b04      	ldr	r3, [pc, #16]	; (8015e70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8015e5e:	f240 2201 	movw	r2, #513	; 0x201
 8015e62:	601a      	str	r2, [r3, #0]
        break;
 8015e64:	bf00      	nop
    }
}
 8015e66:	bf00      	nop
 8015e68:	3724      	adds	r7, #36	; 0x24
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd90      	pop	{r4, r7, pc}
 8015e6e:	bf00      	nop
 8015e70:	4002b000 	.word	0x4002b000
 8015e74:	00010201 	.word	0x00010201

08015e78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F4DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8015e78:	b590      	push	{r4, r7, lr}
 8015e7a:	b085      	sub	sp, #20
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	7f9b      	ldrb	r3, [r3, #30]
 8015e86:	4619      	mov	r1, r3
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f7ff fe17 	bl	8015abc <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015e8e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8015e90:	4a53      	ldr	r2, [pc, #332]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	8a5b      	ldrh	r3, [r3, #18]
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	8a1b      	ldrh	r3, [r3, #16]
 8015ea0:	041b      	lsls	r3, r3, #16
 8015ea2:	431a      	orrs	r2, r3
 8015ea4:	4b4e      	ldr	r3, [pc, #312]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015ea6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015ea8:	683b      	ldr	r3, [r7, #0]
 8015eaa:	68da      	ldr	r2, [r3, #12]
 8015eac:	4b4c      	ldr	r3, [pc, #304]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015eae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	8adb      	ldrh	r3, [r3, #22]
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	8a1b      	ldrh	r3, [r3, #16]
 8015eba:	1ad2      	subs	r2, r2, r3
 8015ebc:	4b48      	ldr	r3, [pc, #288]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015ebe:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	2b08      	cmp	r3, #8
 8015ec6:	d14d      	bne.n	8015f64 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	8adb      	ldrh	r3, [r3, #22]
 8015ecc:	461a      	mov	r2, r3
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	8a1b      	ldrh	r3, [r3, #16]
 8015ed2:	1ad2      	subs	r2, r2, r3
 8015ed4:	4b42      	ldr	r3, [pc, #264]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015ed6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	8adb      	ldrh	r3, [r3, #22]
 8015edc:	461a      	mov	r2, r3
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	8a1b      	ldrh	r3, [r3, #16]
 8015ee2:	1ad2      	subs	r2, r2, r3
 8015ee4:	4b3e      	ldr	r3, [pc, #248]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015ee6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015ee8:	4a3d      	ldr	r2, [pc, #244]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	7f1b      	ldrb	r3, [r3, #28]
 8015ef2:	061b      	lsls	r3, r3, #24
 8015ef4:	4a3a      	ldr	r2, [pc, #232]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015efa:	f043 0309 	orr.w	r3, r3, #9
 8015efe:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	7f1b      	ldrb	r3, [r3, #28]
 8015f04:	061b      	lsls	r3, r3, #24
 8015f06:	461c      	mov	r4, r3
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	3318      	adds	r3, #24
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7ff fc51 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015f12:	4603      	mov	r3, r0
 8015f14:	021b      	lsls	r3, r3, #8
 8015f16:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8015f1a:	431c      	orrs	r4, r3
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	3318      	adds	r3, #24
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7ff fc47 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015f26:	4603      	mov	r3, r0
 8015f28:	015b      	lsls	r3, r3, #5
 8015f2a:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8015f2e:	431c      	orrs	r4, r3
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	3318      	adds	r3, #24
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7ff fc3d 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	00db      	lsls	r3, r3, #3
 8015f3e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015f42:	4323      	orrs	r3, r4
 8015f44:	4a26      	ldr	r2, [pc, #152]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015f46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015f4a:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	68da      	ldr	r2, [r3, #12]
 8015f50:	4b23      	ldr	r3, [pc, #140]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015f52:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	68da      	ldr	r2, [r3, #12]
 8015f58:	4b21      	ldr	r3, [pc, #132]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015f5a:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8015f5c:	4b20      	ldr	r3, [pc, #128]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015f5e:	4a21      	ldr	r2, [pc, #132]	; (8015fe4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x16c>)
 8015f60:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8015f62:	e039      	b.n	8015fd8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015f64:	4a1e      	ldr	r2, [pc, #120]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8015f6a:	4b1d      	ldr	r3, [pc, #116]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	7f9b      	ldrb	r3, [r3, #30]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d108      	bne.n	8015f8a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8015f78:	683b      	ldr	r3, [r7, #0]
 8015f7a:	3318      	adds	r3, #24
 8015f7c:	4c18      	ldr	r4, [pc, #96]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7ff fc18 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015f84:	4603      	mov	r3, r0
 8015f86:	63a3      	str	r3, [r4, #56]	; 0x38
 8015f88:	e023      	b.n	8015fd2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15a>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8015f8a:	683b      	ldr	r3, [r7, #0]
 8015f8c:	7f1b      	ldrb	r3, [r3, #28]
 8015f8e:	061b      	lsls	r3, r3, #24
 8015f90:	461c      	mov	r4, r3
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	3318      	adds	r3, #24
 8015f96:	4618      	mov	r0, r3
 8015f98:	f7ff fc0c 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	021b      	lsls	r3, r3, #8
 8015fa0:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8015fa4:	431c      	orrs	r4, r3
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	3318      	adds	r3, #24
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7ff fc02 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	015b      	lsls	r3, r3, #5
 8015fb4:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8015fb8:	431c      	orrs	r4, r3
 8015fba:	683b      	ldr	r3, [r7, #0]
 8015fbc:	3318      	adds	r3, #24
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7ff fbf8 	bl	80157b4 <_ZNK8touchgfx9colortypecvmEv>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	00db      	lsls	r3, r3, #3
 8015fc8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015fcc:	4a04      	ldr	r2, [pc, #16]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015fce:	4323      	orrs	r3, r4
 8015fd0:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8015fd2:	4b03      	ldr	r3, [pc, #12]	; (8015fe0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8015fd4:	4a04      	ldr	r2, [pc, #16]	; (8015fe8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x170>)
 8015fd6:	601a      	str	r2, [r3, #0]
}
 8015fd8:	bf00      	nop
 8015fda:	3714      	adds	r7, #20
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd90      	pop	{r4, r7, pc}
 8015fe0:	4002b000 	.word	0x4002b000
 8015fe4:	00020201 	.word	0x00020201
 8015fe8:	00030201 	.word	0x00030201

08015fec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b082      	sub	sp, #8
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
 8015ff4:	4a05      	ldr	r2, [pc, #20]	; (801600c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	601a      	str	r2, [r3, #0]
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f7ff fbe5 	bl	80157cc <_ZN8touchgfx9DMA_QueueD1Ev>
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	4618      	mov	r0, r3
 8016006:	3708      	adds	r7, #8
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}
 801600c:	0802f688 	.word	0x0802f688

08016010 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016010:	b580      	push	{r7, lr}
 8016012:	b082      	sub	sp, #8
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f7ff ffe7 	bl	8015fec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801601e:	2114      	movs	r1, #20
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f013 f8b6 	bl	8029192 <_ZdlPvj>
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	4618      	mov	r0, r3
 801602a:	3708      	adds	r7, #8
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}

08016030 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8016030:	b480      	push	{r7}
 8016032:	b083      	sub	sp, #12
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8016038:	4a04      	ldr	r2, [pc, #16]	; (801604c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6013      	str	r3, [r2, #0]
    }
 801603e:	bf00      	nop
 8016040:	370c      	adds	r7, #12
 8016042:	46bd      	mov	sp, r7
 8016044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016048:	4770      	bx	lr
 801604a:	bf00      	nop
 801604c:	2000b790 	.word	0x2000b790

08016050 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8016050:	b480      	push	{r7}
 8016052:	b085      	sub	sp, #20
 8016054:	af00      	add	r7, sp, #0
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	607a      	str	r2, [r7, #4]
 801605c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801605e:	4a0b      	ldr	r2, [pc, #44]	; (801608c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	601a      	str	r2, [r3, #0]
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	68ba      	ldr	r2, [r7, #8]
 8016068:	605a      	str	r2, [r3, #4]
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	687a      	ldr	r2, [r7, #4]
 801606e:	609a      	str	r2, [r3, #8]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	683a      	ldr	r2, [r7, #0]
 8016074:	60da      	str	r2, [r3, #12]
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	69ba      	ldr	r2, [r7, #24]
 801607a:	611a      	str	r2, [r3, #16]
    {
    }
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	4618      	mov	r0, r3
 8016080:	3714      	adds	r7, #20
 8016082:	46bd      	mov	sp, r7
 8016084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016088:	4770      	bx	lr
 801608a:	bf00      	nop
 801608c:	0802e938 	.word	0x0802e938

08016090 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8016090:	b480      	push	{r7}
 8016092:	b083      	sub	sp, #12
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
    {
 8016098:	4a04      	ldr	r2, [pc, #16]	; (80160ac <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	601a      	str	r2, [r3, #0]
    }
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	4618      	mov	r0, r3
 80160a2:	370c      	adds	r7, #12
 80160a4:	46bd      	mov	sp, r7
 80160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160aa:	4770      	bx	lr
 80160ac:	0802e938 	.word	0x0802e938

080160b0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b082      	sub	sp, #8
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
    }
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f7ff ffe9 	bl	8016090 <_ZN8touchgfx7MVPHeapD1Ev>
 80160be:	2114      	movs	r1, #20
 80160c0:	6878      	ldr	r0, [r7, #4]
 80160c2:	f013 f866 	bl	8029192 <_ZdlPvj>
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	4618      	mov	r0, r3
 80160ca:	3708      	adds	r7, #8
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}

080160d0 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80160d0:	b480      	push	{r7}
 80160d2:	b083      	sub	sp, #12
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
    {
 80160d8:	4a04      	ldr	r2, [pc, #16]	; (80160ec <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	601a      	str	r2, [r3, #0]
    }
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	4618      	mov	r0, r3
 80160e2:	370c      	adds	r7, #12
 80160e4:	46bd      	mov	sp, r7
 80160e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ea:	4770      	bx	lr
 80160ec:	0802fb5c 	.word	0x0802fb5c

080160f0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
    }
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f7ff ffe9 	bl	80160d0 <_ZN8touchgfx3LCDD1Ev>
 80160fe:	2108      	movs	r1, #8
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f013 f846 	bl	8029192 <_ZdlPvj>
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	4618      	mov	r0, r3
 801610a:	3708      	adds	r7, #8
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}

08016110 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8016110:	b480      	push	{r7}
 8016112:	b083      	sub	sp, #12
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2200      	movs	r2, #0
 801611c:	801a      	strh	r2, [r3, #0]
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	2200      	movs	r2, #0
 8016122:	805a      	strh	r2, [r3, #2]
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2200      	movs	r2, #0
 8016128:	809a      	strh	r2, [r3, #4]
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	2200      	movs	r2, #0
 801612e:	80da      	strh	r2, [r3, #6]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2200      	movs	r2, #0
 8016134:	811a      	strh	r2, [r3, #8]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2200      	movs	r2, #0
 801613a:	815a      	strh	r2, [r3, #10]
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2200      	movs	r2, #0
 8016140:	819a      	strh	r2, [r3, #12]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	2200      	movs	r2, #0
 8016146:	739a      	strb	r2, [r3, #14]
        {
        }
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	4618      	mov	r0, r3
 801614c:	370c      	adds	r7, #12
 801614e:	46bd      	mov	sp, r7
 8016150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016154:	4770      	bx	lr

08016156 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8016156:	b580      	push	{r7, lr}
 8016158:	b082      	sub	sp, #8
 801615a:	af00      	add	r7, sp, #0
 801615c:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	4618      	mov	r0, r3
 8016162:	f7ff ffd5 	bl	8016110 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2200      	movs	r2, #0
 801616a:	611a      	str	r2, [r3, #16]
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2200      	movs	r2, #0
 8016170:	829a      	strh	r2, [r3, #20]
    {
    }
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	4618      	mov	r0, r3
 8016176:	3708      	adds	r7, #8
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}

0801617c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 801617c:	b580      	push	{r7, lr}
 801617e:	b084      	sub	sp, #16
 8016180:	af00      	add	r7, sp, #0
 8016182:	60f8      	str	r0, [r7, #12]
 8016184:	60b9      	str	r1, [r7, #8]
 8016186:	607a      	str	r2, [r7, #4]
 8016188:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 801618a:	4a4a      	ldr	r2, [pc, #296]	; (80162b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	601a      	str	r2, [r3, #0]
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	68ba      	ldr	r2, [r7, #8]
 8016194:	605a      	str	r2, [r3, #4]
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	687a      	ldr	r2, [r7, #4]
 801619a:	609a      	str	r2, [r3, #8]
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	683a      	ldr	r2, [r7, #0]
 80161a0:	60da      	str	r2, [r3, #12]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	2200      	movs	r2, #0
 80161a6:	611a      	str	r2, [r3, #16]
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	2200      	movs	r2, #0
 80161ac:	615a      	str	r2, [r3, #20]
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2200      	movs	r2, #0
 80161b2:	619a      	str	r2, [r3, #24]
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	331c      	adds	r3, #28
 80161b8:	4618      	mov	r0, r3
 80161ba:	f7ff ffcc 	bl	8016156 <_ZN8touchgfx8GesturesC1Ev>
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	2200      	movs	r2, #0
 80161c2:	639a      	str	r2, [r3, #56]	; 0x38
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2200      	movs	r2, #0
 80161c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2200      	movs	r2, #0
 80161ce:	641a      	str	r2, [r3, #64]	; 0x40
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	2200      	movs	r2, #0
 80161d4:	645a      	str	r2, [r3, #68]	; 0x44
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	2200      	movs	r2, #0
 80161da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	2201      	movs	r2, #1
 80161e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2200      	movs	r2, #0
 80161ea:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	2200      	movs	r2, #0
 80161f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	3350      	adds	r3, #80	; 0x50
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7fc ff14 	bl	8013026 <_ZN8touchgfx4RectC1Ev>
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	2201      	movs	r2, #1
 8016202:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2200      	movs	r2, #0
 801620a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	2200      	movs	r2, #0
 8016212:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	2201      	movs	r2, #1
 801621a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	2200      	movs	r2, #0
 8016222:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2200      	movs	r2, #0
 801622a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	2200      	movs	r2, #0
 8016232:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2200      	movs	r2, #0
 801623a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	2200      	movs	r2, #0
 8016242:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	2200      	movs	r2, #0
 801624a:	671a      	str	r2, [r3, #112]	; 0x70
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	2200      	movs	r2, #0
 8016250:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	2200      	movs	r2, #0
 8016258:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	2201      	movs	r2, #1
 8016260:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	2201      	movs	r2, #1
 8016268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 801626c:	4a12      	ldr	r2, [pc, #72]	; (80162b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8016272:	4a12      	ldr	r2, [pc, #72]	; (80162bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8016274:	8b3b      	ldrh	r3, [r7, #24]
 8016276:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8016278:	4a11      	ldr	r2, [pc, #68]	; (80162c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 801627a:	8bbb      	ldrh	r3, [r7, #28]
 801627c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801627e:	4b11      	ldr	r3, [pc, #68]	; (80162c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 8016280:	2200      	movs	r2, #0
 8016282:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016284:	4b0d      	ldr	r3, [pc, #52]	; (80162bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8016286:	881a      	ldrh	r2, [r3, #0]
 8016288:	4b0f      	ldr	r3, [pc, #60]	; (80162c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 801628a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801628c:	4b0c      	ldr	r3, [pc, #48]	; (80162c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 801628e:	881a      	ldrh	r2, [r3, #0]
 8016290:	4b0e      	ldr	r3, [pc, #56]	; (80162cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 8016292:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8016294:	8b3a      	ldrh	r2, [r7, #24]
 8016296:	8bbb      	ldrh	r3, [r7, #28]
 8016298:	429a      	cmp	r2, r3
 801629a:	bf34      	ite	cc
 801629c:	2301      	movcc	r3, #1
 801629e:	2300      	movcs	r3, #0
 80162a0:	b2db      	uxtb	r3, r3
 80162a2:	461a      	mov	r2, r3
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	4618      	mov	r0, r3
 80162ae:	3710      	adds	r7, #16
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}
 80162b4:	0802f1ec 	.word	0x0802f1ec
 80162b8:	2000b734 	.word	0x2000b734
 80162bc:	2000b728 	.word	0x2000b728
 80162c0:	2000b72a 	.word	0x2000b72a
 80162c4:	2000b72c 	.word	0x2000b72c
 80162c8:	2000b72e 	.word	0x2000b72e
 80162cc:	2000b730 	.word	0x2000b730

080162d0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b082      	sub	sp, #8
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
 80162d8:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	4618      	mov	r0, r3
 80162de:	f7fc fc03 	bl	8012ae8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 80162e2:	bf00      	nop
 80162e4:	3708      	adds	r7, #8
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
	...

080162ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b086      	sub	sp, #24
 80162f0:	af02      	add	r7, sp, #8
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	607a      	str	r2, [r7, #4]
 80162f8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80162fa:	68f8      	ldr	r0, [r7, #12]
 80162fc:	69bb      	ldr	r3, [r7, #24]
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	68b9      	ldr	r1, [r7, #8]
 8016306:	f7ff fea3 	bl	8016050 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801630a:	4a04      	ldr	r2, [pc, #16]	; (801631c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	601a      	str	r2, [r3, #0]
    {

    }
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	4618      	mov	r0, r3
 8016314:	3710      	adds	r7, #16
 8016316:	46bd      	mov	sp, r7
 8016318:	bd80      	pop	{r7, pc}
 801631a:	bf00      	nop
 801631c:	0802e924 	.word	0x0802e924

08016320 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016320:	b580      	push	{r7, lr}
 8016322:	af00      	add	r7, sp, #0
 8016324:	4801      	ldr	r0, [pc, #4]	; (801632c <__tcf_0+0xc>)
 8016326:	f000 f95f 	bl	80165e8 <_ZN12FrontendHeapD1Ev>
 801632a:	bd80      	pop	{r7, pc}
 801632c:	2000a538 	.word	0x2000a538

08016330 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8016330:	b580      	push	{r7, lr}
 8016332:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8016334:	4b12      	ldr	r3, [pc, #72]	; (8016380 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	f3bf 8f5b 	dmb	ish
 801633c:	b2db      	uxtb	r3, r3
 801633e:	f003 0301 	and.w	r3, r3, #1
 8016342:	2b00      	cmp	r3, #0
 8016344:	bf0c      	ite	eq
 8016346:	2301      	moveq	r3, #1
 8016348:	2300      	movne	r3, #0
 801634a:	b2db      	uxtb	r3, r3
 801634c:	2b00      	cmp	r3, #0
 801634e:	d013      	beq.n	8016378 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8016350:	480b      	ldr	r0, [pc, #44]	; (8016380 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8016352:	f012 ff20 	bl	8029196 <__cxa_guard_acquire>
 8016356:	4603      	mov	r3, r0
 8016358:	2b00      	cmp	r3, #0
 801635a:	bf14      	ite	ne
 801635c:	2301      	movne	r3, #1
 801635e:	2300      	moveq	r3, #0
 8016360:	b2db      	uxtb	r3, r3
 8016362:	2b00      	cmp	r3, #0
 8016364:	d008      	beq.n	8016378 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8016366:	4807      	ldr	r0, [pc, #28]	; (8016384 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8016368:	f000 f868 	bl	801643c <_ZN12FrontendHeapC1Ev>
 801636c:	4804      	ldr	r0, [pc, #16]	; (8016380 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801636e:	f012 ff1e 	bl	80291ae <__cxa_guard_release>
 8016372:	4805      	ldr	r0, [pc, #20]	; (8016388 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8016374:	f013 f856 	bl	8029424 <atexit>
        return instance;
 8016378:	4b02      	ldr	r3, [pc, #8]	; (8016384 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 801637a:	4618      	mov	r0, r3
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	2000aa04 	.word	0x2000aa04
 8016384:	2000a538 	.word	0x2000a538
 8016388:	08016321 	.word	0x08016321

0801638c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 801638c:	b580      	push	{r7, lr}
 801638e:	b082      	sub	sp, #8
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
 8016394:	4a05      	ldr	r2, [pc, #20]	; (80163ac <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	601a      	str	r2, [r3, #0]
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	4618      	mov	r0, r3
 801639e:	f7ff fe77 	bl	8016090 <_ZN8touchgfx7MVPHeapD1Ev>
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	4618      	mov	r0, r3
 80163a6:	3708      	adds	r7, #8
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}
 80163ac:	0802e924 	.word	0x0802e924

080163b0 <_ZN16FrontendHeapBaseD0Ev>:
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f7ff ffe7 	bl	801638c <_ZN16FrontendHeapBaseD1Ev>
 80163be:	2114      	movs	r1, #20
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f012 fee6 	bl	8029192 <_ZdlPvj>
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	4618      	mov	r0, r3
 80163ca:	3708      	adds	r7, #8
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}

080163d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	4618      	mov	r0, r3
 80163dc:	f000 fd76 	bl	8016ecc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80163e0:	4a03      	ldr	r2, [pc, #12]	; (80163f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	601a      	str	r2, [r3, #0]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	4618      	mov	r0, r3
 80163ea:	3708      	adds	r7, #8
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}
 80163f0:	0802e8f0 	.word	0x0802e8f0

080163f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b082      	sub	sp, #8
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	4618      	mov	r0, r3
 8016400:	f000 fd64 	bl	8016ecc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016404:	4a03      	ldr	r2, [pc, #12]	; (8016414 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	601a      	str	r2, [r3, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	4618      	mov	r0, r3
 801640e:	3708      	adds	r7, #8
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}
 8016414:	0802e8bc 	.word	0x0802e8bc

08016418 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	4618      	mov	r0, r3
 8016424:	f000 fd52 	bl	8016ecc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016428:	4a03      	ldr	r2, [pc, #12]	; (8016438 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	601a      	str	r2, [r3, #0]
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	4618      	mov	r0, r3
 8016432:	3708      	adds	r7, #8
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}
 8016438:	0802e888 	.word	0x0802e888

0801643c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801643c:	b590      	push	{r4, r7, lr}
 801643e:	b085      	sub	sp, #20
 8016440:	af02      	add	r7, sp, #8
 8016442:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8016444:	6878      	ldr	r0, [r7, #4]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	f103 0114 	add.w	r1, r3, #20
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	f503 7456 	add.w	r4, r3, #856	; 0x358
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	f503 735d 	add.w	r3, r3, #884	; 0x374
                     app(model, *this)
 801645e:	9300      	str	r3, [sp, #0]
 8016460:	4623      	mov	r3, r4
 8016462:	f7ff ff43 	bl	80162ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8016466:	4a18      	ldr	r2, [pc, #96]	; (80164c8 <_ZN12FrontendHeapC1Ev+0x8c>)
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	601a      	str	r2, [r3, #0]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	3314      	adds	r3, #20
 8016470:	4618      	mov	r0, r3
 8016472:	f7ff ffad 	bl	80163d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	332c      	adds	r3, #44	; 0x2c
 801647a:	4618      	mov	r0, r3
 801647c:	f7ff ffba 	bl	80163f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8016486:	4618      	mov	r0, r3
 8016488:	f7ff ffc6 	bl	8016418 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016492:	4618      	mov	r0, r3
 8016494:	f7fe f962 	bl	801475c <_ZN5ModelC1Ev>
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f503 705d 	add.w	r0, r3, #884	; 0x374
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80164a4:	687a      	ldr	r2, [r7, #4]
 80164a6:	4619      	mov	r1, r3
 80164a8:	f7fe f942 	bl	8014730 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80164ac:	687a      	ldr	r2, [r7, #4]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80164b4:	4619      	mov	r1, r3
 80164b6:	4610      	mov	r0, r2
 80164b8:	f7ff ff0a 	bl	80162d0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	4618      	mov	r0, r3
 80164c0:	370c      	adds	r7, #12
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd90      	pop	{r4, r7, pc}
 80164c6:	bf00      	nop
 80164c8:	0802e874 	.word	0x0802e874

080164cc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b086      	sub	sp, #24
 80164d0:	af02      	add	r7, sp, #8
 80164d2:	60f8      	str	r0, [r7, #12]
 80164d4:	60b9      	str	r1, [r7, #8]
 80164d6:	607a      	str	r2, [r7, #4]
 80164d8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80164da:	68f8      	ldr	r0, [r7, #12]
 80164dc:	8bbb      	ldrh	r3, [r7, #28]
 80164de:	9301      	str	r3, [sp, #4]
 80164e0:	8b3b      	ldrh	r3, [r7, #24]
 80164e2:	9300      	str	r3, [sp, #0]
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	68b9      	ldr	r1, [r7, #8]
 80164ea:	f7ff fe47 	bl	801617c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80164ee:	4a04      	ldr	r2, [pc, #16]	; (8016500 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	601a      	str	r2, [r3, #0]
    }
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	4618      	mov	r0, r3
 80164f8:	3710      	adds	r7, #16
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	0802e948 	.word	0x0802e948

08016504 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8016504:	b580      	push	{r7, lr}
 8016506:	b086      	sub	sp, #24
 8016508:	af02      	add	r7, sp, #8
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	60b9      	str	r1, [r7, #8]
 801650e:	607a      	str	r2, [r7, #4]
 8016510:	603b      	str	r3, [r7, #0]
 8016512:	68f8      	ldr	r0, [r7, #12]
 8016514:	8bbb      	ldrh	r3, [r7, #28]
 8016516:	9301      	str	r3, [sp, #4]
 8016518:	8b3b      	ldrh	r3, [r7, #24]
 801651a:	9300      	str	r3, [sp, #0]
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	687a      	ldr	r2, [r7, #4]
 8016520:	68b9      	ldr	r1, [r7, #8]
 8016522:	f7ff ffd3 	bl	80164cc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8016526:	4a04      	ldr	r2, [pc, #16]	; (8016538 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	601a      	str	r2, [r3, #0]
    }
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	4618      	mov	r0, r3
 8016530:	3710      	adds	r7, #16
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}
 8016536:	bf00      	nop
 8016538:	0802e744 	.word	0x0802e744

0801653c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801653c:	b480      	push	{r7}
 801653e:	b083      	sub	sp, #12
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	4a04      	ldr	r2, [pc, #16]	; (8016558 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	601a      	str	r2, [r3, #0]
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	4618      	mov	r0, r3
 801654e:	370c      	adds	r7, #12
 8016550:	46bd      	mov	sp, r7
 8016552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016556:	4770      	bx	lr
 8016558:	0802e72c 	.word	0x0802e72c

0801655c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801655c:	b580      	push	{r7, lr}
 801655e:	b082      	sub	sp, #8
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	4618      	mov	r0, r3
 8016568:	f7ff ffe8 	bl	801653c <_ZN8touchgfx15TouchControllerC1Ev>
 801656c:	4a03      	ldr	r2, [pc, #12]	; (801657c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	601a      	str	r2, [r3, #0]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	4618      	mov	r0, r3
 8016576:	3708      	adds	r7, #8
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	0802e714 	.word	0x0802e714

08016580 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8016580:	b590      	push	{r4, r7, lr}
 8016582:	b085      	sub	sp, #20
 8016584:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8016586:	f7fd fead 	bl	80142e4 <_ZN14BitmapDatabase11getInstanceEv>
 801658a:	4604      	mov	r4, r0
 801658c:	f7fd feb4 	bl	80142f8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8016590:	4603      	mov	r3, r0
 8016592:	4619      	mov	r1, r3
 8016594:	2300      	movs	r3, #0
 8016596:	9300      	str	r3, [sp, #0]
 8016598:	2300      	movs	r3, #0
 801659a:	2200      	movs	r2, #0
 801659c:	4620      	mov	r0, r4
 801659e:	f006 fffd 	bl	801d59c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80165a2:	4809      	ldr	r0, [pc, #36]	; (80165c8 <touchgfx_init+0x48>)
 80165a4:	f7ff fd44 	bl	8016030 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80165a8:	2000      	movs	r0, #0
 80165aa:	f7fd ffdf 	bl	801456c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80165ae:	4807      	ldr	r0, [pc, #28]	; (80165cc <touchgfx_init+0x4c>)
 80165b0:	f006 ff36 	bl	801d420 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80165b4:	f7ff febc 	bl	8016330 <_ZN12FrontendHeap11getInstanceEv>
 80165b8:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 80165ba:	4805      	ldr	r0, [pc, #20]	; (80165d0 <touchgfx_init+0x50>)
 80165bc:	f7fe ff3c 	bl	8015438 <_ZN11TouchGFXHAL10initializeEv>
}
 80165c0:	bf00      	nop
 80165c2:	370c      	adds	r7, #12
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd90      	pop	{r4, r7, pc}
 80165c8:	2000b6a4 	.word	0x2000b6a4
 80165cc:	20000090 	.word	0x20000090
 80165d0:	2000b6a8 	.word	0x2000b6a8

080165d4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80165d8:	4802      	ldr	r0, [pc, #8]	; (80165e4 <touchgfx_taskEntry+0x10>)
 80165da:	f7fe ff39 	bl	8015450 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80165de:	bf00      	nop
 80165e0:	bd80      	pop	{r7, pc}
 80165e2:	bf00      	nop
 80165e4:	2000b6a8 	.word	0x2000b6a8

080165e8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b082      	sub	sp, #8
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	4a10      	ldr	r2, [pc, #64]	; (8016634 <_ZN12FrontendHeapD1Ev+0x4c>)
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	601a      	str	r2, [r3, #0]
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80165fc:	4618      	mov	r0, r3
 80165fe:	f7fe f861 	bl	80146c4 <_ZN19FrontendApplicationD1Ev>
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8016608:	4618      	mov	r0, r3
 801660a:	f000 f827 	bl	801665c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	332c      	adds	r3, #44	; 0x2c
 8016612:	4618      	mov	r0, r3
 8016614:	f000 f844 	bl	80166a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	3314      	adds	r3, #20
 801661c:	4618      	mov	r0, r3
 801661e:	f000 f863 	bl	80166e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	4618      	mov	r0, r3
 8016626:	f7ff feb1 	bl	801638c <_ZN16FrontendHeapBaseD1Ev>
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	4618      	mov	r0, r3
 801662e:	3708      	adds	r7, #8
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}
 8016634:	0802e874 	.word	0x0802e874

08016638 <_ZN12FrontendHeapD0Ev>:
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f7ff ffd1 	bl	80165e8 <_ZN12FrontendHeapD1Ev>
 8016646:	f240 41cc 	movw	r1, #1228	; 0x4cc
 801664a:	6878      	ldr	r0, [r7, #4]
 801664c:	f012 fda1 	bl	8029192 <_ZdlPvj>
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	4618      	mov	r0, r3
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
	...

0801665c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	4a05      	ldr	r2, [pc, #20]	; (801667c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	601a      	str	r2, [r3, #0]
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	4618      	mov	r0, r3
 801666e:	f000 fc2b 	bl	8016ec8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	4618      	mov	r0, r3
 8016676:	3708      	adds	r7, #8
 8016678:	46bd      	mov	sp, r7
 801667a:	bd80      	pop	{r7, pc}
 801667c:	0802e888 	.word	0x0802e888

08016680 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	6878      	ldr	r0, [r7, #4]
 801668a:	f7ff ffe7 	bl	801665c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801668e:	2114      	movs	r1, #20
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f012 fd7e 	bl	8029192 <_ZdlPvj>
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	4618      	mov	r0, r3
 801669a:	3708      	adds	r7, #8
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}

080166a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b082      	sub	sp, #8
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
 80166a8:	4a05      	ldr	r2, [pc, #20]	; (80166c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	601a      	str	r2, [r3, #0]
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	4618      	mov	r0, r3
 80166b2:	f000 fc09 	bl	8016ec8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	4618      	mov	r0, r3
 80166ba:	3708      	adds	r7, #8
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}
 80166c0:	0802e8bc 	.word	0x0802e8bc

080166c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	6878      	ldr	r0, [r7, #4]
 80166ce:	f7ff ffe7 	bl	80166a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80166d2:	f44f 714b 	mov.w	r1, #812	; 0x32c
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f012 fd5b 	bl	8029192 <_ZdlPvj>
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	4618      	mov	r0, r3
 80166e0:	3708      	adds	r7, #8
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}
	...

080166e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
 80166f0:	4a05      	ldr	r2, [pc, #20]	; (8016708 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	601a      	str	r2, [r3, #0]
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	4618      	mov	r0, r3
 80166fa:	f000 fbe5 	bl	8016ec8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	4618      	mov	r0, r3
 8016702:	3708      	adds	r7, #8
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}
 8016708:	0802e8f0 	.word	0x0802e8f0

0801670c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801670c:	b580      	push	{r7, lr}
 801670e:	b082      	sub	sp, #8
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	f7ff ffe7 	bl	80166e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801671a:	2118      	movs	r1, #24
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f012 fd38 	bl	8029192 <_ZdlPvj>
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	4618      	mov	r0, r3
 8016726:	3708      	adds	r7, #8
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}

0801672c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	4a05      	ldr	r2, [pc, #20]	; (801674c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	601a      	str	r2, [r3, #0]
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	4618      	mov	r0, r3
 801673e:	f7ff fcc7 	bl	80160d0 <_ZN8touchgfx3LCDD1Ev>
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	4618      	mov	r0, r3
 8016746:	3708      	adds	r7, #8
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	08030cd0 	.word	0x08030cd0

08016750 <_ZN8touchgfx8LCD16bppD0Ev>:
 8016750:	b580      	push	{r7, lr}
 8016752:	b082      	sub	sp, #8
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7ff ffe7 	bl	801672c <_ZN8touchgfx8LCD16bppD1Ev>
 801675e:	2178      	movs	r1, #120	; 0x78
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f012 fd16 	bl	8029192 <_ZdlPvj>
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	4618      	mov	r0, r3
 801676a:	3708      	adds	r7, #8
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}

08016770 <_Z41__static_initialization_and_destruction_0ii>:
 8016770:	b580      	push	{r7, lr}
 8016772:	b084      	sub	sp, #16
 8016774:	af02      	add	r7, sp, #8
 8016776:	6078      	str	r0, [r7, #4]
 8016778:	6039      	str	r1, [r7, #0]
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	2b01      	cmp	r3, #1
 801677e:	d118      	bne.n	80167b2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016786:	4293      	cmp	r3, r2
 8016788:	d113      	bne.n	80167b2 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 801678a:	4817      	ldr	r0, [pc, #92]	; (80167e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801678c:	f7ff fee6 	bl	801655c <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 8016790:	4816      	ldr	r0, [pc, #88]	; (80167ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016792:	f7ff f8cb 	bl	801592c <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 8016796:	4816      	ldr	r0, [pc, #88]	; (80167f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016798:	f009 ff82 	bl	80206a0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 801679c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80167a0:	9301      	str	r3, [sp, #4]
 80167a2:	23f0      	movs	r3, #240	; 0xf0
 80167a4:	9300      	str	r3, [sp, #0]
 80167a6:	4b10      	ldr	r3, [pc, #64]	; (80167e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80167a8:	4a11      	ldr	r2, [pc, #68]	; (80167f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80167aa:	4910      	ldr	r1, [pc, #64]	; (80167ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80167ac:	4811      	ldr	r0, [pc, #68]	; (80167f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80167ae:	f7ff fea9 	bl	8016504 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d113      	bne.n	80167e0 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80167b8:	683b      	ldr	r3, [r7, #0]
 80167ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167be:	4293      	cmp	r3, r2
 80167c0:	d10e      	bne.n	80167e0 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80167c2:	480c      	ldr	r0, [pc, #48]	; (80167f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80167c4:	f7fe fee8 	bl	8015598 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80167c8:	480b      	ldr	r0, [pc, #44]	; (80167f8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80167ca:	f7fb fc3f 	bl	801204c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80167ce:	4808      	ldr	r0, [pc, #32]	; (80167f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80167d0:	f7ff ffac 	bl	801672c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 80167d4:	4805      	ldr	r0, [pc, #20]	; (80167ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80167d6:	f7ff f8d3 	bl	8015980 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 80167da:	4803      	ldr	r0, [pc, #12]	; (80167e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80167dc:	f7fe fc7c 	bl	80150d8 <_ZN20STM32TouchControllerD1Ev>
}
 80167e0:	bf00      	nop
 80167e2:	3708      	adds	r7, #8
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	2000aa08 	.word	0x2000aa08
 80167ec:	2000aa0c 	.word	0x2000aa0c
 80167f0:	2000b62c 	.word	0x2000b62c
 80167f4:	2000b6a8 	.word	0x2000b6a8
 80167f8:	20000090 	.word	0x20000090

080167fc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80167fc:	b480      	push	{r7}
 80167fe:	b083      	sub	sp, #12
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8016804:	2301      	movs	r3, #1
    }
 8016806:	4618      	mov	r0, r3
 8016808:	370c      	adds	r7, #12
 801680a:	46bd      	mov	sp, r7
 801680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016810:	4770      	bx	lr

08016812 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8016812:	b480      	push	{r7}
 8016814:	b083      	sub	sp, #12
 8016816:	af00      	add	r7, sp, #0
 8016818:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801681a:	230c      	movs	r3, #12
    }
 801681c:	4618      	mov	r0, r3
 801681e:	370c      	adds	r7, #12
 8016820:	46bd      	mov	sp, r7
 8016822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016826:	4770      	bx	lr

08016828 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8016828:	b480      	push	{r7}
 801682a:	b083      	sub	sp, #12
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
 8016830:	460b      	mov	r3, r1
 8016832:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016834:	887a      	ldrh	r2, [r7, #2]
 8016836:	4613      	mov	r3, r2
 8016838:	005b      	lsls	r3, r3, #1
 801683a:	4413      	add	r3, r2
 801683c:	009b      	lsls	r3, r3, #2
 801683e:	3308      	adds	r3, #8
 8016840:	687a      	ldr	r2, [r7, #4]
 8016842:	4413      	add	r3, r2
    }
 8016844:	4618      	mov	r0, r3
 8016846:	370c      	adds	r7, #12
 8016848:	46bd      	mov	sp, r7
 801684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684e:	4770      	bx	lr

08016850 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8016850:	b480      	push	{r7}
 8016852:	b083      	sub	sp, #12
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	460b      	mov	r3, r1
 801685a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801685c:	887a      	ldrh	r2, [r7, #2]
 801685e:	4613      	mov	r3, r2
 8016860:	005b      	lsls	r3, r3, #1
 8016862:	4413      	add	r3, r2
 8016864:	009b      	lsls	r3, r3, #2
 8016866:	3308      	adds	r3, #8
 8016868:	687a      	ldr	r2, [r7, #4]
 801686a:	4413      	add	r3, r2
    }
 801686c:	4618      	mov	r0, r3
 801686e:	370c      	adds	r7, #12
 8016870:	46bd      	mov	sp, r7
 8016872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016876:	4770      	bx	lr

08016878 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8016878:	b480      	push	{r7}
 801687a:	b083      	sub	sp, #12
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8016880:	2301      	movs	r3, #1
    }
 8016882:	4618      	mov	r0, r3
 8016884:	370c      	adds	r7, #12
 8016886:	46bd      	mov	sp, r7
 8016888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688c:	4770      	bx	lr

0801688e <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801688e:	b480      	push	{r7}
 8016890:	b083      	sub	sp, #12
 8016892:	af00      	add	r7, sp, #0
 8016894:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016896:	f44f 7349 	mov.w	r3, #804	; 0x324
    }
 801689a:	4618      	mov	r0, r3
 801689c:	370c      	adds	r7, #12
 801689e:	46bd      	mov	sp, r7
 80168a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a4:	4770      	bx	lr

080168a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80168a6:	b480      	push	{r7}
 80168a8:	b083      	sub	sp, #12
 80168aa:	af00      	add	r7, sp, #0
 80168ac:	6078      	str	r0, [r7, #4]
 80168ae:	460b      	mov	r3, r1
 80168b0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80168b2:	887b      	ldrh	r3, [r7, #2]
 80168b4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80168b8:	fb02 f303 	mul.w	r3, r2, r3
 80168bc:	3308      	adds	r3, #8
 80168be:	687a      	ldr	r2, [r7, #4]
 80168c0:	4413      	add	r3, r2
    }
 80168c2:	4618      	mov	r0, r3
 80168c4:	370c      	adds	r7, #12
 80168c6:	46bd      	mov	sp, r7
 80168c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168cc:	4770      	bx	lr

080168ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80168ce:	b480      	push	{r7}
 80168d0:	b083      	sub	sp, #12
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
 80168d6:	460b      	mov	r3, r1
 80168d8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80168da:	887b      	ldrh	r3, [r7, #2]
 80168dc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80168e0:	fb02 f303 	mul.w	r3, r2, r3
 80168e4:	3308      	adds	r3, #8
 80168e6:	687a      	ldr	r2, [r7, #4]
 80168e8:	4413      	add	r3, r2
    }
 80168ea:	4618      	mov	r0, r3
 80168ec:	370c      	adds	r7, #12
 80168ee:	46bd      	mov	sp, r7
 80168f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f4:	4770      	bx	lr

080168f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80168f6:	b480      	push	{r7}
 80168f8:	b083      	sub	sp, #12
 80168fa:	af00      	add	r7, sp, #0
 80168fc:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80168fe:	2301      	movs	r3, #1
    }
 8016900:	4618      	mov	r0, r3
 8016902:	370c      	adds	r7, #12
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr

0801690c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801690c:	b480      	push	{r7}
 801690e:	b083      	sub	sp, #12
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016914:	2310      	movs	r3, #16
    }
 8016916:	4618      	mov	r0, r3
 8016918:	370c      	adds	r7, #12
 801691a:	46bd      	mov	sp, r7
 801691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016920:	4770      	bx	lr

08016922 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8016922:	b480      	push	{r7}
 8016924:	b083      	sub	sp, #12
 8016926:	af00      	add	r7, sp, #0
 8016928:	6078      	str	r0, [r7, #4]
 801692a:	460b      	mov	r3, r1
 801692c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801692e:	887b      	ldrh	r3, [r7, #2]
 8016930:	011b      	lsls	r3, r3, #4
 8016932:	3308      	adds	r3, #8
 8016934:	687a      	ldr	r2, [r7, #4]
 8016936:	4413      	add	r3, r2
    }
 8016938:	4618      	mov	r0, r3
 801693a:	370c      	adds	r7, #12
 801693c:	46bd      	mov	sp, r7
 801693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016942:	4770      	bx	lr

08016944 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8016944:	b480      	push	{r7}
 8016946:	b083      	sub	sp, #12
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
 801694c:	460b      	mov	r3, r1
 801694e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016950:	887b      	ldrh	r3, [r7, #2]
 8016952:	011b      	lsls	r3, r3, #4
 8016954:	3308      	adds	r3, #8
 8016956:	687a      	ldr	r2, [r7, #4]
 8016958:	4413      	add	r3, r2
    }
 801695a:	4618      	mov	r0, r3
 801695c:	370c      	adds	r7, #12
 801695e:	46bd      	mov	sp, r7
 8016960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016964:	4770      	bx	lr

08016966 <_GLOBAL__sub_I_touchgfx_init>:
 8016966:	b580      	push	{r7, lr}
 8016968:	af00      	add	r7, sp, #0
 801696a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801696e:	2001      	movs	r0, #1
 8016970:	f7ff fefe 	bl	8016770 <_Z41__static_initialization_and_destruction_0ii>
 8016974:	bd80      	pop	{r7, pc}

08016976 <_GLOBAL__sub_D_touchgfx_init>:
 8016976:	b580      	push	{r7, lr}
 8016978:	af00      	add	r7, sp, #0
 801697a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801697e:	2000      	movs	r0, #0
 8016980:	f7ff fef6 	bl	8016770 <_Z41__static_initialization_and_destruction_0ii>
 8016984:	bd80      	pop	{r7, pc}

08016986 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8016986:	b580      	push	{r7, lr}
 8016988:	b082      	sub	sp, #8
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	3318      	adds	r3, #24
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	6878      	ldr	r0, [r7, #4]
 8016998:	4798      	blx	r3
    }
 801699a:	bf00      	nop
 801699c:	3708      	adds	r7, #8
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}

080169a2 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80169a2:	b480      	push	{r7}
 80169a4:	b083      	sub	sp, #12
 80169a6:	af00      	add	r7, sp, #0
 80169a8:	6078      	str	r0, [r7, #4]
 80169aa:	460b      	mov	r3, r1
 80169ac:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	78fa      	ldrb	r2, [r7, #3]
 80169b2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80169b6:	bf00      	nop
 80169b8:	370c      	adds	r7, #12
 80169ba:	46bd      	mov	sp, r7
 80169bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c0:	4770      	bx	lr

080169c2 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80169c2:	b480      	push	{r7}
 80169c4:	b083      	sub	sp, #12
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80169d0:	3301      	adds	r3, #1
 80169d2:	b2da      	uxtb	r2, r3
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80169da:	bf00      	nop
 80169dc:	370c      	adds	r7, #12
 80169de:	46bd      	mov	sp, r7
 80169e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e4:	4770      	bx	lr
	...

080169e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b082      	sub	sp, #8
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	460b      	mov	r3, r1
 80169f2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80169f4:	78fb      	ldrb	r3, [r7, #3]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d002      	beq.n	8016a00 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80169fa:	78fb      	ldrb	r3, [r7, #3]
 80169fc:	2b02      	cmp	r3, #2
 80169fe:	d105      	bne.n	8016a0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	78fa      	ldrb	r2, [r7, #3]
 8016a04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8016a08:	2301      	movs	r3, #1
 8016a0a:	e027      	b.n	8016a5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8016a0c:	78fb      	ldrb	r3, [r7, #3]
 8016a0e:	2b01      	cmp	r3, #1
 8016a10:	d123      	bne.n	8016a5a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d014      	beq.n	8016a44 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	3380      	adds	r3, #128	; 0x80
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	6878      	ldr	r0, [r7, #4]
 8016a24:	4798      	blx	r3
 8016a26:	4603      	mov	r3, r0
 8016a28:	461a      	mov	r2, r3
 8016a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d008      	beq.n	8016a44 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8016a32:	4b0c      	ldr	r3, [pc, #48]	; (8016a64 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8016a34:	781b      	ldrb	r3, [r3, #0]
 8016a36:	f083 0301 	eor.w	r3, r3, #1
 8016a3a:	b2db      	uxtb	r3, r3
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d001      	beq.n	8016a44 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8016a40:	2301      	movs	r3, #1
 8016a42:	e000      	b.n	8016a46 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8016a44:	2300      	movs	r3, #0
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d005      	beq.n	8016a56 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	78fa      	ldrb	r2, [r7, #3]
 8016a4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8016a52:	2301      	movs	r3, #1
 8016a54:	e002      	b.n	8016a5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8016a56:	2300      	movs	r3, #0
 8016a58:	e000      	b.n	8016a5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8016a5a:	2300      	movs	r3, #0
    }
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}
 8016a64:	2000b732 	.word	0x2000b732

08016a68 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8016a68:	b480      	push	{r7}
 8016a6a:	b083      	sub	sp, #12
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
 8016a70:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	683a      	ldr	r2, [r7, #0]
 8016a76:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8016a78:	bf00      	nop
 8016a7a:	370c      	adds	r7, #12
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a82:	4770      	bx	lr

08016a84 <__NVIC_EnableIRQ>:
{
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	db0b      	blt.n	8016aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016a96:	79fb      	ldrb	r3, [r7, #7]
 8016a98:	f003 021f 	and.w	r2, r3, #31
 8016a9c:	4907      	ldr	r1, [pc, #28]	; (8016abc <__NVIC_EnableIRQ+0x38>)
 8016a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016aa2:	095b      	lsrs	r3, r3, #5
 8016aa4:	2001      	movs	r0, #1
 8016aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8016aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016aae:	bf00      	nop
 8016ab0:	370c      	adds	r7, #12
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab8:	4770      	bx	lr
 8016aba:	bf00      	nop
 8016abc:	e000e100 	.word	0xe000e100

08016ac0 <__NVIC_DisableIRQ>:
{
 8016ac0:	b480      	push	{r7}
 8016ac2:	b083      	sub	sp, #12
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	db12      	blt.n	8016af8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016ad2:	79fb      	ldrb	r3, [r7, #7]
 8016ad4:	f003 021f 	and.w	r2, r3, #31
 8016ad8:	490a      	ldr	r1, [pc, #40]	; (8016b04 <__NVIC_DisableIRQ+0x44>)
 8016ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ade:	095b      	lsrs	r3, r3, #5
 8016ae0:	2001      	movs	r0, #1
 8016ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8016ae6:	3320      	adds	r3, #32
 8016ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016aec:	f3bf 8f4f 	dsb	sy
}
 8016af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016af2:	f3bf 8f6f 	isb	sy
}
 8016af6:	bf00      	nop
}
 8016af8:	bf00      	nop
 8016afa:	370c      	adds	r7, #12
 8016afc:	46bd      	mov	sp, r7
 8016afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b02:	4770      	bx	lr
 8016b04:	e000e100 	.word	0xe000e100

08016b08 <__NVIC_SetPriority>:
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b083      	sub	sp, #12
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	4603      	mov	r3, r0
 8016b10:	6039      	str	r1, [r7, #0]
 8016b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	db0a      	blt.n	8016b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	b2da      	uxtb	r2, r3
 8016b20:	490c      	ldr	r1, [pc, #48]	; (8016b54 <__NVIC_SetPriority+0x4c>)
 8016b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b26:	0112      	lsls	r2, r2, #4
 8016b28:	b2d2      	uxtb	r2, r2
 8016b2a:	440b      	add	r3, r1
 8016b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016b30:	e00a      	b.n	8016b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016b32:	683b      	ldr	r3, [r7, #0]
 8016b34:	b2da      	uxtb	r2, r3
 8016b36:	4908      	ldr	r1, [pc, #32]	; (8016b58 <__NVIC_SetPriority+0x50>)
 8016b38:	79fb      	ldrb	r3, [r7, #7]
 8016b3a:	f003 030f 	and.w	r3, r3, #15
 8016b3e:	3b04      	subs	r3, #4
 8016b40:	0112      	lsls	r2, r2, #4
 8016b42:	b2d2      	uxtb	r2, r2
 8016b44:	440b      	add	r3, r1
 8016b46:	761a      	strb	r2, [r3, #24]
}
 8016b48:	bf00      	nop
 8016b4a:	370c      	adds	r7, #12
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b52:	4770      	bx	lr
 8016b54:	e000e100 	.word	0xe000e100
 8016b58:	e000ed00 	.word	0xe000ed00

08016b5c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8016b5c:	b5b0      	push	{r4, r5, r7, lr}
 8016b5e:	b082      	sub	sp, #8
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	4618      	mov	r0, r3
 8016b68:	f001 f896 	bl	8017c98 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8016b6c:	687d      	ldr	r5, [r7, #4]
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	334c      	adds	r3, #76	; 0x4c
 8016b74:	681c      	ldr	r4, [r3, #0]
 8016b76:	f003 fd1b 	bl	801a5b0 <_ZN8touchgfx11Application11getInstanceEv>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	4628      	mov	r0, r5
 8016b80:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	490d      	ldr	r1, [pc, #52]	; (8016bbc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8016b86:	4618      	mov	r0, r3
 8016b88:	f7ff ff6e 	bl	8016a68 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2101      	movs	r1, #1
 8016b90:	4618      	mov	r0, r3
 8016b92:	f7ff ff29 	bl	80169e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	3370      	adds	r3, #112	; 0x70
 8016b9e:	681c      	ldr	r4, [r3, #0]
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8016ba8:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2101      	movs	r1, #1
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f7ff fef7 	bl	80169a2 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8016bb4:	bf00      	nop
 8016bb6:	3708      	adds	r7, #8
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bdb0      	pop	{r4, r5, r7, pc}
 8016bbc:	080156f9 	.word	0x080156f9

08016bc0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8016bc8:	2109      	movs	r1, #9
 8016bca:	205a      	movs	r0, #90	; 0x5a
 8016bcc:	f7ff ff9c 	bl	8016b08 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016bd0:	2109      	movs	r1, #9
 8016bd2:	2058      	movs	r0, #88	; 0x58
 8016bd4:	f7ff ff98 	bl	8016b08 <__NVIC_SetPriority>
}
 8016bd8:	bf00      	nop
 8016bda:	3708      	adds	r7, #8
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b082      	sub	sp, #8
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016be8:	205a      	movs	r0, #90	; 0x5a
 8016bea:	f7ff ff4b 	bl	8016a84 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8016bee:	2058      	movs	r0, #88	; 0x58
 8016bf0:	f7ff ff48 	bl	8016a84 <__NVIC_EnableIRQ>
}
 8016bf4:	bf00      	nop
 8016bf6:	3708      	adds	r7, #8
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b082      	sub	sp, #8
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016c04:	205a      	movs	r0, #90	; 0x5a
 8016c06:	f7ff ff5b 	bl	8016ac0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8016c0a:	2058      	movs	r0, #88	; 0x58
 8016c0c:	f7ff ff58 	bl	8016ac0 <__NVIC_DisableIRQ>
}
 8016c10:	bf00      	nop
 8016c12:	3708      	adds	r7, #8
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}

08016c18 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8016c18:	b480      	push	{r7}
 8016c1a:	b083      	sub	sp, #12
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016c20:	4b11      	ldr	r3, [pc, #68]	; (8016c68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016c22:	68db      	ldr	r3, [r3, #12]
 8016c24:	b29b      	uxth	r3, r3
 8016c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016c2a:	b29b      	uxth	r3, r3
 8016c2c:	3b01      	subs	r3, #1
 8016c2e:	b29a      	uxth	r2, r3
 8016c30:	4b0e      	ldr	r3, [pc, #56]	; (8016c6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016c32:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016c34:	4b0c      	ldr	r3, [pc, #48]	; (8016c68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016c36:	691b      	ldr	r3, [r3, #16]
 8016c38:	b29b      	uxth	r3, r3
 8016c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	3b01      	subs	r3, #1
 8016c42:	b29a      	uxth	r2, r3
 8016c44:	4b0a      	ldr	r3, [pc, #40]	; (8016c70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8016c46:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8016c48:	4b08      	ldr	r3, [pc, #32]	; (8016c6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016c4a:	881a      	ldrh	r2, [r3, #0]
 8016c4c:	4b06      	ldr	r3, [pc, #24]	; (8016c68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016c4e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016c50:	4b05      	ldr	r3, [pc, #20]	; (8016c68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c54:	4a04      	ldr	r2, [pc, #16]	; (8016c68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016c56:	f043 0301 	orr.w	r3, r3, #1
 8016c5a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8016c5c:	bf00      	nop
 8016c5e:	370c      	adds	r7, #12
 8016c60:	46bd      	mov	sp, r7
 8016c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c66:	4770      	bx	lr
 8016c68:	40016800 	.word	0x40016800
 8016c6c:	2000b724 	.word	0x2000b724
 8016c70:	2000b726 	.word	0x2000b726

08016c74 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8016c74:	b480      	push	{r7}
 8016c76:	b083      	sub	sp, #12
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016c7c:	4b03      	ldr	r3, [pc, #12]	; (8016c8c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8016c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016c80:	4618      	mov	r0, r3
 8016c82:	370c      	adds	r7, #12
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr
 8016c8c:	40016884 	.word	0x40016884

08016c90 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016c90:	b480      	push	{r7}
 8016c92:	b083      	sub	sp, #12
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
 8016c98:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016c9a:	4a06      	ldr	r2, [pc, #24]	; (8016cb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016ca0:	4b05      	ldr	r3, [pc, #20]	; (8016cb8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8016ca2:	2201      	movs	r2, #1
 8016ca4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016ca6:	bf00      	nop
 8016ca8:	370c      	adds	r7, #12
 8016caa:	46bd      	mov	sp, r7
 8016cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb0:	4770      	bx	lr
 8016cb2:	bf00      	nop
 8016cb4:	40016884 	.word	0x40016884
 8016cb8:	40016800 	.word	0x40016800

08016cbc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b082      	sub	sp, #8
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	6839      	ldr	r1, [r7, #0]
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f000 fcdf 	bl	801768e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016cd0:	bf00      	nop
 8016cd2:	3708      	adds	r7, #8
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b084      	sub	sp, #16
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8016ce6:	68f8      	ldr	r0, [r7, #12]
 8016ce8:	683b      	ldr	r3, [r7, #0]
 8016cea:	687a      	ldr	r2, [r7, #4]
 8016cec:	68b9      	ldr	r1, [r7, #8]
 8016cee:	f000 fe02 	bl	80178f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8016cf2:	4603      	mov	r3, r0
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3710      	adds	r7, #16
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8016cfc:	b480      	push	{r7}
 8016cfe:	b085      	sub	sp, #20
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8016d04:	4b0d      	ldr	r3, [pc, #52]	; (8016d3c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8016d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d08:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8016d0a:	4b0c      	ldr	r3, [pc, #48]	; (8016d3c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8016d0c:	68db      	ldr	r3, [r3, #12]
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016d14:	b29b      	uxth	r3, r3
 8016d16:	3301      	adds	r3, #1
 8016d18:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8016d1a:	89fa      	ldrh	r2, [r7, #14]
 8016d1c:	89bb      	ldrh	r3, [r7, #12]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	d304      	bcc.n	8016d2c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8016d22:	89fa      	ldrh	r2, [r7, #14]
 8016d24:	89bb      	ldrh	r3, [r7, #12]
 8016d26:	1ad3      	subs	r3, r2, r3
 8016d28:	b29b      	uxth	r3, r3
 8016d2a:	e000      	b.n	8016d2e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8016d2c:	2300      	movs	r3, #0
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3714      	adds	r7, #20
 8016d32:	46bd      	mov	sp, r7
 8016d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d38:	4770      	bx	lr
 8016d3a:	bf00      	nop
 8016d3c:	40016800 	.word	0x40016800

08016d40 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b082      	sub	sp, #8
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8016d48:	4b1a      	ldr	r3, [pc, #104]	; (8016db4 <HAL_LTDC_LineEventCallback+0x74>)
 8016d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d4c:	4a1a      	ldr	r2, [pc, #104]	; (8016db8 <HAL_LTDC_LineEventCallback+0x78>)
 8016d4e:	8812      	ldrh	r2, [r2, #0]
 8016d50:	4293      	cmp	r3, r2
 8016d52:	bf0c      	ite	eq
 8016d54:	2301      	moveq	r3, #1
 8016d56:	2300      	movne	r3, #0
 8016d58:	b2db      	uxtb	r3, r3
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d017      	beq.n	8016d8e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8016d5e:	4b17      	ldr	r3, [pc, #92]	; (8016dbc <HAL_LTDC_LineEventCallback+0x7c>)
 8016d60:	881b      	ldrh	r3, [r3, #0]
 8016d62:	4619      	mov	r1, r3
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f7f2 f905 	bl	8008f74 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8016d6a:	f7fb fcd3 	bl	8012714 <_ZN8touchgfx3HAL11getInstanceEv>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	4618      	mov	r0, r3
 8016d72:	f7ff fe26 	bl	80169c2 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8016d76:	f7fe fc97 	bl	80156a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8016d7a:	f7fb fccb 	bl	8012714 <_ZN8touchgfx3HAL11getInstanceEv>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	4618      	mov	r0, r3
 8016d82:	f001 fa11 	bl	80181a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8016d86:	2000      	movs	r0, #0
 8016d88:	f7fe f9c8 	bl	801511c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8016d8c:	e00e      	b.n	8016dac <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8016d8e:	4b0a      	ldr	r3, [pc, #40]	; (8016db8 <HAL_LTDC_LineEventCallback+0x78>)
 8016d90:	881b      	ldrh	r3, [r3, #0]
 8016d92:	4619      	mov	r1, r3
 8016d94:	6878      	ldr	r0, [r7, #4]
 8016d96:	f7f2 f8ed 	bl	8008f74 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8016d9a:	2000      	movs	r0, #0
 8016d9c:	f7fe f9c9 	bl	8015132 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8016da0:	f7fb fcb8 	bl	8012714 <_ZN8touchgfx3HAL11getInstanceEv>
 8016da4:	4603      	mov	r3, r0
 8016da6:	4618      	mov	r0, r3
 8016da8:	f7ff fded 	bl	8016986 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8016dac:	bf00      	nop
 8016dae:	3708      	adds	r7, #8
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}
 8016db4:	40016800 	.word	0x40016800
 8016db8:	2000b724 	.word	0x2000b724
 8016dbc:	2000b726 	.word	0x2000b726

08016dc0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016dc0:	8880      	ldrh	r0, [r0, #4]
 8016dc2:	4770      	bx	lr

08016dc4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	8083      	strh	r3, [r0, #4]
 8016dc8:	4770      	bx	lr
	...

08016dcc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dce:	6803      	ldr	r3, [r0, #0]
 8016dd0:	4605      	mov	r5, r0
 8016dd2:	460e      	mov	r6, r1
 8016dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dd6:	2100      	movs	r1, #0
 8016dd8:	4798      	blx	r3
 8016dda:	682b      	ldr	r3, [r5, #0]
 8016ddc:	4604      	mov	r4, r0
 8016dde:	6a1b      	ldr	r3, [r3, #32]
 8016de0:	4628      	mov	r0, r5
 8016de2:	4798      	blx	r3
 8016de4:	88ab      	ldrh	r3, [r5, #4]
 8016de6:	1b34      	subs	r4, r6, r4
 8016de8:	b2a4      	uxth	r4, r4
 8016dea:	fbb4 f4f0 	udiv	r4, r4, r0
 8016dee:	42a3      	cmp	r3, r4
 8016df0:	d805      	bhi.n	8016dfe <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016df2:	4b0e      	ldr	r3, [pc, #56]	; (8016e2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016df4:	4a0e      	ldr	r2, [pc, #56]	; (8016e30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016df6:	2120      	movs	r1, #32
 8016df8:	480e      	ldr	r0, [pc, #56]	; (8016e34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8016dfa:	f012 faf5 	bl	80293e8 <__assert_func>
 8016dfe:	682b      	ldr	r3, [r5, #0]
 8016e00:	2100      	movs	r1, #0
 8016e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e04:	4628      	mov	r0, r5
 8016e06:	4798      	blx	r3
 8016e08:	682b      	ldr	r3, [r5, #0]
 8016e0a:	4607      	mov	r7, r0
 8016e0c:	6a1b      	ldr	r3, [r3, #32]
 8016e0e:	4628      	mov	r0, r5
 8016e10:	4798      	blx	r3
 8016e12:	1bf3      	subs	r3, r6, r7
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	fbb3 f2f0 	udiv	r2, r3, r0
 8016e1a:	fb02 3010 	mls	r0, r2, r0, r3
 8016e1e:	b118      	cbz	r0, 8016e28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016e20:	4b05      	ldr	r3, [pc, #20]	; (8016e38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016e22:	4a03      	ldr	r2, [pc, #12]	; (8016e30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016e24:	2121      	movs	r1, #33	; 0x21
 8016e26:	e7e7      	b.n	8016df8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016e28:	4620      	mov	r0, r4
 8016e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e2c:	0802e9fc 	.word	0x0802e9fc
 8016e30:	0802eb6a 	.word	0x0802eb6a
 8016e34:	0802ea11 	.word	0x0802ea11
 8016e38:	0802ea3f 	.word	0x0802ea3f

08016e3c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016e3c:	b538      	push	{r3, r4, r5, lr}
 8016e3e:	6803      	ldr	r3, [r0, #0]
 8016e40:	6a1b      	ldr	r3, [r3, #32]
 8016e42:	460d      	mov	r5, r1
 8016e44:	4604      	mov	r4, r0
 8016e46:	4798      	blx	r3
 8016e48:	4285      	cmp	r5, r0
 8016e4a:	d905      	bls.n	8016e58 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016e4c:	4b0c      	ldr	r3, [pc, #48]	; (8016e80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016e4e:	4a0d      	ldr	r2, [pc, #52]	; (8016e84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016e50:	2132      	movs	r1, #50	; 0x32
 8016e52:	480d      	ldr	r0, [pc, #52]	; (8016e88 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016e54:	f012 fac8 	bl	80293e8 <__assert_func>
 8016e58:	6823      	ldr	r3, [r4, #0]
 8016e5a:	88a5      	ldrh	r5, [r4, #4]
 8016e5c:	69db      	ldr	r3, [r3, #28]
 8016e5e:	4620      	mov	r0, r4
 8016e60:	4798      	blx	r3
 8016e62:	4285      	cmp	r5, r0
 8016e64:	d303      	bcc.n	8016e6e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016e66:	4b09      	ldr	r3, [pc, #36]	; (8016e8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016e68:	4a06      	ldr	r2, [pc, #24]	; (8016e84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016e6a:	2133      	movs	r1, #51	; 0x33
 8016e6c:	e7f1      	b.n	8016e52 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016e6e:	6823      	ldr	r3, [r4, #0]
 8016e70:	88a1      	ldrh	r1, [r4, #4]
 8016e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e74:	4620      	mov	r0, r4
 8016e76:	4798      	blx	r3
 8016e78:	88a3      	ldrh	r3, [r4, #4]
 8016e7a:	3301      	adds	r3, #1
 8016e7c:	80a3      	strh	r3, [r4, #4]
 8016e7e:	bd38      	pop	{r3, r4, r5, pc}
 8016e80:	0802eab9 	.word	0x0802eab9
 8016e84:	0802ebad 	.word	0x0802ebad
 8016e88:	0802ea11 	.word	0x0802ea11
 8016e8c:	0802ead0 	.word	0x0802ead0

08016e90 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016e90:	b570      	push	{r4, r5, r6, lr}
 8016e92:	6803      	ldr	r3, [r0, #0]
 8016e94:	6a1b      	ldr	r3, [r3, #32]
 8016e96:	4616      	mov	r6, r2
 8016e98:	4604      	mov	r4, r0
 8016e9a:	460d      	mov	r5, r1
 8016e9c:	4798      	blx	r3
 8016e9e:	4286      	cmp	r6, r0
 8016ea0:	d905      	bls.n	8016eae <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016ea2:	4b06      	ldr	r3, [pc, #24]	; (8016ebc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016ea4:	4a06      	ldr	r2, [pc, #24]	; (8016ec0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016ea6:	4807      	ldr	r0, [pc, #28]	; (8016ec4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016ea8:	213c      	movs	r1, #60	; 0x3c
 8016eaa:	f012 fa9d 	bl	80293e8 <__assert_func>
 8016eae:	6823      	ldr	r3, [r4, #0]
 8016eb0:	4629      	mov	r1, r5
 8016eb2:	4620      	mov	r0, r4
 8016eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016eba:	4718      	bx	r3
 8016ebc:	0802eab9 	.word	0x0802eab9
 8016ec0:	0802eb20 	.word	0x0802eb20
 8016ec4:	0802ea11 	.word	0x0802ea11

08016ec8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016ec8:	4770      	bx	lr
	...

08016ecc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016ecc:	4a02      	ldr	r2, [pc, #8]	; (8016ed8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016ece:	6002      	str	r2, [r0, #0]
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	8082      	strh	r2, [r0, #4]
 8016ed4:	4770      	bx	lr
 8016ed6:	bf00      	nop
 8016ed8:	0802eaf4 	.word	0x0802eaf4

08016edc <_ZN8touchgfx9Container13getFirstChildEv>:
 8016edc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016ede:	4770      	bx	lr

08016ee0 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 8016ee0:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 8016ee4:	4770      	bx	lr

08016ee6 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8016ee6:	8101      	strh	r1, [r0, #8]
 8016ee8:	8781      	strh	r1, [r0, #60]	; 0x3c
 8016eea:	4770      	bx	lr

08016eec <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8016eec:	8141      	strh	r1, [r0, #10]
 8016eee:	87c1      	strh	r1, [r0, #62]	; 0x3e
 8016ef0:	4770      	bx	lr

08016ef2 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8016ef2:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 8016ef6:	4770      	bx	lr

08016ef8 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8016ef8:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016efc:	4770      	bx	lr

08016efe <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8016efe:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8016f00:	4770      	bx	lr

08016f02 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8016f02:	6641      	str	r1, [r0, #100]	; 0x64
 8016f04:	3034      	adds	r0, #52	; 0x34
 8016f06:	f004 baae 	b.w	801b466 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08016f0c <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8016f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f10:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f18:	4293      	cmp	r3, r2
 8016f1a:	4605      	mov	r5, r0
 8016f1c:	d026      	beq.n	8016f6c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x60>
 8016f1e:	6802      	ldr	r2, [r0, #0]
 8016f20:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8016f24:	6d56      	ldr	r6, [r2, #84]	; 0x54
 8016f26:	4a12      	ldr	r2, [pc, #72]	; (8016f70 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x64>)
 8016f28:	6812      	ldr	r2, [r2, #0]
 8016f2a:	b28c      	uxth	r4, r1
 8016f2c:	b92a      	cbnz	r2, 8016f3a <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x2e>
 8016f2e:	4b11      	ldr	r3, [pc, #68]	; (8016f74 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x68>)
 8016f30:	4a11      	ldr	r2, [pc, #68]	; (8016f78 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 8016f32:	21b1      	movs	r1, #177	; 0xb1
 8016f34:	4811      	ldr	r0, [pc, #68]	; (8016f7c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x70>)
 8016f36:	f012 fa57 	bl	80293e8 <__assert_func>
 8016f3a:	4911      	ldr	r1, [pc, #68]	; (8016f80 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x74>)
 8016f3c:	8809      	ldrh	r1, [r1, #0]
 8016f3e:	4299      	cmp	r1, r3
 8016f40:	d803      	bhi.n	8016f4a <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x3e>
 8016f42:	4b10      	ldr	r3, [pc, #64]	; (8016f84 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x78>)
 8016f44:	4a0c      	ldr	r2, [pc, #48]	; (8016f78 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 8016f46:	21b2      	movs	r1, #178	; 0xb2
 8016f48:	e7f4      	b.n	8016f34 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x28>
 8016f4a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016f4e:	4b0e      	ldr	r3, [pc, #56]	; (8016f88 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x7c>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016f56:	6803      	ldr	r3, [r0, #0]
 8016f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f5a:	4798      	blx	r3
 8016f5c:	1a22      	subs	r2, r4, r0
 8016f5e:	4639      	mov	r1, r7
 8016f60:	4628      	mov	r0, r5
 8016f62:	4633      	mov	r3, r6
 8016f64:	b212      	sxth	r2, r2
 8016f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f6a:	4718      	bx	r3
 8016f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f70:	2000b784 	.word	0x2000b784
 8016f74:	0802ec3f 	.word	0x0802ec3f
 8016f78:	0802edb4 	.word	0x0802edb4
 8016f7c:	0802ec81 	.word	0x0802ec81
 8016f80:	2000b788 	.word	0x2000b788
 8016f84:	0802ecaa 	.word	0x0802ecaa
 8016f88:	2000b78c 	.word	0x2000b78c

08016f8c <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8016f8c:	b513      	push	{r0, r1, r4, lr}
 8016f8e:	4b08      	ldr	r3, [pc, #32]	; (8016fb0 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE+0x24>)
 8016f90:	9300      	str	r3, [sp, #0]
 8016f92:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8016f96:	888b      	ldrh	r3, [r1, #4]
 8016f98:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016f9c:	4669      	mov	r1, sp
 8016f9e:	4620      	mov	r0, r4
 8016fa0:	f001 fc77 	bl	8018892 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	f004 fa5e 	bl	801b466 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016faa:	b002      	add	sp, #8
 8016fac:	bd10      	pop	{r4, pc}
 8016fae:	bf00      	nop
 8016fb0:	0802e22c 	.word	0x0802e22c

08016fb4 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8016fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fb8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8016fbc:	b085      	sub	sp, #20
 8016fbe:	4604      	mov	r4, r0
 8016fc0:	b9fb      	cbnz	r3, 8017002 <_ZN8touchgfx12DigitalClock11updateClockEv+0x4e>
 8016fc2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8016fc6:	4a3f      	ldr	r2, [pc, #252]	; (80170c4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x110>)
 8016fc8:	4e3f      	ldr	r6, [pc, #252]	; (80170c8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x114>)
 8016fca:	f100 0574 	add.w	r5, r0, #116	; 0x74
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	bf08      	it	eq
 8016fd2:	4616      	moveq	r6, r2
 8016fd4:	f000 f961 	bl	801729a <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8016fd8:	4607      	mov	r7, r0
 8016fda:	4620      	mov	r0, r4
 8016fdc:	f000 f970 	bl	80172c0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016fe0:	4680      	mov	r8, r0
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	f000 f965 	bl	80172b2 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	bf14      	ite	ne
 8016fec:	2341      	movne	r3, #65	; 0x41
 8016fee:	2350      	moveq	r3, #80	; 0x50
 8016ff0:	e9cd 8300 	strd	r8, r3, [sp]
 8016ff4:	4632      	mov	r2, r6
 8016ff6:	463b      	mov	r3, r7
 8016ff8:	210c      	movs	r1, #12
 8016ffa:	4628      	mov	r0, r5
 8016ffc:	f006 fa02 	bl	801d404 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017000:	e016      	b.n	8017030 <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 8017002:	2b01      	cmp	r3, #1
 8017004:	d11b      	bne.n	801703e <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8017006:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801700a:	4a30      	ldr	r2, [pc, #192]	; (80170cc <_ZN8touchgfx12DigitalClock11updateClockEv+0x118>)
 801700c:	4d30      	ldr	r5, [pc, #192]	; (80170d0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x11c>)
 801700e:	2b00      	cmp	r3, #0
 8017010:	bf08      	it	eq
 8017012:	4615      	moveq	r5, r2
 8017014:	f000 f93e 	bl	8017294 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8017018:	4606      	mov	r6, r0
 801701a:	4620      	mov	r0, r4
 801701c:	f000 f950 	bl	80172c0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8017020:	4633      	mov	r3, r6
 8017022:	9000      	str	r0, [sp, #0]
 8017024:	462a      	mov	r2, r5
 8017026:	210c      	movs	r1, #12
 8017028:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801702c:	f006 f9ea 	bl	801d404 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017030:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8017034:	b005      	add	sp, #20
 8017036:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801703a:	f004 ba14 	b.w	801b466 <_ZNK8touchgfx8Drawable10invalidateEv>
 801703e:	2b02      	cmp	r3, #2
 8017040:	d125      	bne.n	801708e <_ZN8touchgfx12DigitalClock11updateClockEv+0xda>
 8017042:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8017046:	4a23      	ldr	r2, [pc, #140]	; (80170d4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 8017048:	4e23      	ldr	r6, [pc, #140]	; (80170d8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 801704a:	f100 0574 	add.w	r5, r0, #116	; 0x74
 801704e:	2b00      	cmp	r3, #0
 8017050:	bf08      	it	eq
 8017052:	4616      	moveq	r6, r2
 8017054:	f000 f921 	bl	801729a <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8017058:	4607      	mov	r7, r0
 801705a:	4620      	mov	r0, r4
 801705c:	f000 f930 	bl	80172c0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8017060:	4680      	mov	r8, r0
 8017062:	4620      	mov	r0, r4
 8017064:	f000 f92f 	bl	80172c6 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8017068:	4681      	mov	r9, r0
 801706a:	4620      	mov	r0, r4
 801706c:	f000 f921 	bl	80172b2 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8017070:	2800      	cmp	r0, #0
 8017072:	bf14      	ite	ne
 8017074:	2341      	movne	r3, #65	; 0x41
 8017076:	2350      	moveq	r3, #80	; 0x50
 8017078:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801707c:	f8cd 8000 	str.w	r8, [sp]
 8017080:	463b      	mov	r3, r7
 8017082:	4632      	mov	r2, r6
 8017084:	210c      	movs	r1, #12
 8017086:	4628      	mov	r0, r5
 8017088:	f006 f9bc 	bl	801d404 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801708c:	e7d0      	b.n	8017030 <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 801708e:	2b03      	cmp	r3, #3
 8017090:	d1ce      	bne.n	8017030 <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 8017092:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8017096:	4a11      	ldr	r2, [pc, #68]	; (80170dc <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8017098:	4d11      	ldr	r5, [pc, #68]	; (80170e0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 801709a:	2b00      	cmp	r3, #0
 801709c:	bf08      	it	eq
 801709e:	4615      	moveq	r5, r2
 80170a0:	f000 f8f8 	bl	8017294 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 80170a4:	4606      	mov	r6, r0
 80170a6:	4620      	mov	r0, r4
 80170a8:	f000 f90a 	bl	80172c0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80170ac:	4607      	mov	r7, r0
 80170ae:	4620      	mov	r0, r4
 80170b0:	f000 f909 	bl	80172c6 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 80170b4:	4633      	mov	r3, r6
 80170b6:	e9cd 7000 	strd	r7, r0, [sp]
 80170ba:	462a      	mov	r2, r5
 80170bc:	210c      	movs	r1, #12
 80170be:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80170c2:	e79b      	b.n	8016ffc <_ZN8touchgfx12DigitalClock11updateClockEv+0x48>
 80170c4:	0802ebeb 	.word	0x0802ebeb
 80170c8:	0802ec15 	.word	0x0802ec15
 80170cc:	0802ebf7 	.word	0x0802ebf7
 80170d0:	0802ec35 	.word	0x0802ec35
 80170d4:	0802ec12 	.word	0x0802ec12
 80170d8:	0802ebff 	.word	0x0802ebff
 80170dc:	0802ec32 	.word	0x0802ec32
 80170e0:	0802ec23 	.word	0x0802ec23

080170e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80170e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170e6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80170e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170ec:	4299      	cmp	r1, r3
 80170ee:	4606      	mov	r6, r0
 80170f0:	d02a      	beq.n	8017148 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 80170f2:	4b16      	ldr	r3, [pc, #88]	; (801714c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	b92b      	cbnz	r3, 8017104 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 80170f8:	4b15      	ldr	r3, [pc, #84]	; (8017150 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 80170fa:	4a16      	ldr	r2, [pc, #88]	; (8017154 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80170fc:	21b1      	movs	r1, #177	; 0xb1
 80170fe:	4816      	ldr	r0, [pc, #88]	; (8017158 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8017100:	f012 f972 	bl	80293e8 <__assert_func>
 8017104:	4a15      	ldr	r2, [pc, #84]	; (801715c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8017106:	8812      	ldrh	r2, [r2, #0]
 8017108:	428a      	cmp	r2, r1
 801710a:	d803      	bhi.n	8017114 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801710c:	4b14      	ldr	r3, [pc, #80]	; (8017160 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801710e:	4a11      	ldr	r2, [pc, #68]	; (8017154 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017110:	21b2      	movs	r1, #178	; 0xb2
 8017112:	e7f4      	b.n	80170fe <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8017114:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017118:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801711c:	4b11      	ldr	r3, [pc, #68]	; (8017164 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801711e:	7854      	ldrb	r4, [r2, #1]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017126:	682b      	ldr	r3, [r5, #0]
 8017128:	69df      	ldr	r7, [r3, #28]
 801712a:	4b0f      	ldr	r3, [pc, #60]	; (8017168 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801712c:	6818      	ldr	r0, [r3, #0]
 801712e:	f7fd fa73 	bl	8014618 <_ZNK8touchgfx5Texts7getTextEt>
 8017132:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017136:	2300      	movs	r3, #0
 8017138:	9300      	str	r3, [sp, #0]
 801713a:	4602      	mov	r2, r0
 801713c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801713e:	4621      	mov	r1, r4
 8017140:	4628      	mov	r0, r5
 8017142:	47b8      	blx	r7
 8017144:	b003      	add	sp, #12
 8017146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017148:	2000      	movs	r0, #0
 801714a:	e7fb      	b.n	8017144 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801714c:	2000b784 	.word	0x2000b784
 8017150:	0802ec3f 	.word	0x0802ec3f
 8017154:	0802edb4 	.word	0x0802edb4
 8017158:	0802ec81 	.word	0x0802ec81
 801715c:	2000b788 	.word	0x2000b788
 8017160:	0802ecaa 	.word	0x0802ecaa
 8017164:	2000b78c 	.word	0x2000b78c
 8017168:	2000b790 	.word	0x2000b790

0801716c <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 801716c:	b508      	push	{r3, lr}
 801716e:	3034      	adds	r0, #52	; 0x34
 8017170:	f7ff ffb8 	bl	80170e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 8017174:	bd08      	pop	{r3, pc}
	...

08017178 <_ZN8touchgfx12DigitalClockC1Ev>:
 8017178:	b510      	push	{r4, lr}
 801717a:	4604      	mov	r4, r0
 801717c:	f000 f870 	bl	8017260 <_ZN8touchgfx13AbstractClockC1Ev>
 8017180:	2201      	movs	r2, #1
 8017182:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017186:	4a1a      	ldr	r2, [pc, #104]	; (80171f0 <_ZN8touchgfx12DigitalClockC1Ev+0x78>)
 8017188:	65e2      	str	r2, [r4, #92]	; 0x5c
 801718a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801718e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 8017192:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8017196:	66a2      	str	r2, [r4, #104]	; 0x68
 8017198:	4b16      	ldr	r3, [pc, #88]	; (80171f4 <_ZN8touchgfx12DigitalClockC1Ev+0x7c>)
 801719a:	4a17      	ldr	r2, [pc, #92]	; (80171f8 <_ZN8touchgfx12DigitalClockC1Ev+0x80>)
 801719c:	6023      	str	r3, [r4, #0]
 801719e:	6362      	str	r2, [r4, #52]	; 0x34
 80171a0:	2303      	movs	r3, #3
 80171a2:	4622      	mov	r2, r4
 80171a4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 80171a8:	2300      	movs	r3, #0
 80171aa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80171ae:	8723      	strh	r3, [r4, #56]	; 0x38
 80171b0:	8763      	strh	r3, [r4, #58]	; 0x3a
 80171b2:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80171b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80171b6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80171ba:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 80171be:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 80171c2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80171c6:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80171ca:	6523      	str	r3, [r4, #80]	; 0x50
 80171cc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80171d0:	6663      	str	r3, [r4, #100]	; 0x64
 80171d2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 80171d6:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 80171da:	f822 3f74 	strh.w	r3, [r2, #116]!
 80171de:	4620      	mov	r0, r4
 80171e0:	6722      	str	r2, [r4, #112]	; 0x70
 80171e2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80171e6:	f000 f909 	bl	80173fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80171ea:	4620      	mov	r0, r4
 80171ec:	bd10      	pop	{r4, pc}
 80171ee:	bf00      	nop
 80171f0:	0802e22c 	.word	0x0802e22c
 80171f4:	0802ed04 	.word	0x0802ed04
 80171f8:	0802fa4c 	.word	0x0802fa4c

080171fc <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 80171fc:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 8017200:	4770      	bx	lr

08017202 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8017202:	b470      	push	{r4, r5, r6}
 8017204:	2518      	movs	r5, #24
 8017206:	fbb1 f6f5 	udiv	r6, r1, r5
 801720a:	fb06 1115 	mls	r1, r6, r5, r1
 801720e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8017212:	213c      	movs	r1, #60	; 0x3c
 8017214:	fbb2 f5f1 	udiv	r5, r2, r1
 8017218:	fb05 2211 	mls	r2, r5, r1, r2
 801721c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 8017220:	fbb3 f2f1 	udiv	r2, r3, r1
 8017224:	fb02 3311 	mls	r3, r2, r1, r3
 8017228:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 801722c:	6803      	ldr	r3, [r0, #0]
 801722e:	bc70      	pop	{r4, r5, r6}
 8017230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017234:	4718      	bx	r3

08017236 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8017236:	b4f0      	push	{r4, r5, r6, r7}
 8017238:	6804      	ldr	r4, [r0, #0]
 801723a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801723e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8017242:	2e00      	cmp	r6, #0
 8017244:	f04f 040c 	mov.w	r4, #12
 8017248:	fbb1 f7f4 	udiv	r7, r1, r4
 801724c:	fb07 1114 	mls	r1, r7, r4, r1
 8017250:	bf18      	it	ne
 8017252:	2400      	movne	r4, #0
 8017254:	fa54 f181 	uxtab	r1, r4, r1
 8017258:	46ac      	mov	ip, r5
 801725a:	b2c9      	uxtb	r1, r1
 801725c:	bcf0      	pop	{r4, r5, r6, r7}
 801725e:	4760      	bx	ip

08017260 <_ZN8touchgfx13AbstractClockC1Ev>:
 8017260:	2101      	movs	r1, #1
 8017262:	2200      	movs	r2, #0
 8017264:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017268:	4909      	ldr	r1, [pc, #36]	; (8017290 <_ZN8touchgfx13AbstractClockC1Ev+0x30>)
 801726a:	8082      	strh	r2, [r0, #4]
 801726c:	80c2      	strh	r2, [r0, #6]
 801726e:	8102      	strh	r2, [r0, #8]
 8017270:	8142      	strh	r2, [r0, #10]
 8017272:	8182      	strh	r2, [r0, #12]
 8017274:	81c2      	strh	r2, [r0, #14]
 8017276:	8202      	strh	r2, [r0, #16]
 8017278:	8242      	strh	r2, [r0, #18]
 801727a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801727e:	61c2      	str	r2, [r0, #28]
 8017280:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017284:	6001      	str	r1, [r0, #0]
 8017286:	6282      	str	r2, [r0, #40]	; 0x28
 8017288:	8582      	strh	r2, [r0, #44]	; 0x2c
 801728a:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801728e:	4770      	bx	lr
 8017290:	0802edec 	.word	0x0802edec

08017294 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8017294:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017298:	4770      	bx	lr

0801729a <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 801729a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801729e:	220c      	movs	r2, #12
 80172a0:	f100 030b 	add.w	r3, r0, #11
 80172a4:	fb93 f0f2 	sdiv	r0, r3, r2
 80172a8:	fb02 3010 	mls	r0, r2, r0, r3
 80172ac:	3001      	adds	r0, #1
 80172ae:	b2c0      	uxtb	r0, r0
 80172b0:	4770      	bx	lr

080172b2 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 80172b2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80172b6:	280b      	cmp	r0, #11
 80172b8:	bf8c      	ite	hi
 80172ba:	2000      	movhi	r0, #0
 80172bc:	2001      	movls	r0, #1
 80172be:	4770      	bx	lr

080172c0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 80172c0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 80172c4:	4770      	bx	lr

080172c6 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 80172c6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80172ca:	4770      	bx	lr

080172cc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80172cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80172ce:	2000      	movs	r0, #0
 80172d0:	b12b      	cbz	r3, 80172de <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80172d2:	b920      	cbnz	r0, 80172de <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80172d4:	1a5a      	subs	r2, r3, r1
 80172d6:	4250      	negs	r0, r2
 80172d8:	4150      	adcs	r0, r2
 80172da:	699b      	ldr	r3, [r3, #24]
 80172dc:	e7f8      	b.n	80172d0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80172de:	4770      	bx	lr

080172e0 <_ZN8touchgfx9Container9removeAllEv>:
 80172e0:	2200      	movs	r2, #0
 80172e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80172e4:	b123      	cbz	r3, 80172f0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80172e6:	6999      	ldr	r1, [r3, #24]
 80172e8:	6281      	str	r1, [r0, #40]	; 0x28
 80172ea:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80172ee:	e7f8      	b.n	80172e2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80172f0:	4770      	bx	lr

080172f2 <_ZN8touchgfx9Container6unlinkEv>:
 80172f2:	2300      	movs	r3, #0
 80172f4:	6283      	str	r3, [r0, #40]	; 0x28
 80172f6:	4770      	bx	lr

080172f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80172f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172fc:	461f      	mov	r7, r3
 80172fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8017302:	460d      	mov	r5, r1
 8017304:	4616      	mov	r6, r2
 8017306:	b103      	cbz	r3, 801730a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017308:	6038      	str	r0, [r7, #0]
 801730a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801730c:	b314      	cbz	r4, 8017354 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801730e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017312:	b1eb      	cbz	r3, 8017350 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017314:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017318:	428d      	cmp	r5, r1
 801731a:	db19      	blt.n	8017350 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801731c:	8923      	ldrh	r3, [r4, #8]
 801731e:	b289      	uxth	r1, r1
 8017320:	440b      	add	r3, r1
 8017322:	b21b      	sxth	r3, r3
 8017324:	429d      	cmp	r5, r3
 8017326:	da13      	bge.n	8017350 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017328:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801732c:	4296      	cmp	r6, r2
 801732e:	db0f      	blt.n	8017350 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017330:	8963      	ldrh	r3, [r4, #10]
 8017332:	b292      	uxth	r2, r2
 8017334:	4413      	add	r3, r2
 8017336:	b21b      	sxth	r3, r3
 8017338:	429e      	cmp	r6, r3
 801733a:	da09      	bge.n	8017350 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801733c:	6823      	ldr	r3, [r4, #0]
 801733e:	1ab2      	subs	r2, r6, r2
 8017340:	1a69      	subs	r1, r5, r1
 8017342:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017346:	b212      	sxth	r2, r2
 8017348:	463b      	mov	r3, r7
 801734a:	b209      	sxth	r1, r1
 801734c:	4620      	mov	r0, r4
 801734e:	47c0      	blx	r8
 8017350:	69a4      	ldr	r4, [r4, #24]
 8017352:	e7db      	b.n	801730c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017358 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017358:	2200      	movs	r2, #0
 801735a:	8002      	strh	r2, [r0, #0]
 801735c:	8042      	strh	r2, [r0, #2]
 801735e:	8082      	strh	r2, [r0, #4]
 8017360:	80c2      	strh	r2, [r0, #6]
 8017362:	4770      	bx	lr

08017364 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017364:	b570      	push	{r4, r5, r6, lr}
 8017366:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017368:	460d      	mov	r5, r1
 801736a:	4616      	mov	r6, r2
 801736c:	b13c      	cbz	r4, 801737e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801736e:	6823      	ldr	r3, [r4, #0]
 8017370:	4620      	mov	r0, r4
 8017372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017374:	4632      	mov	r2, r6
 8017376:	4629      	mov	r1, r5
 8017378:	4798      	blx	r3
 801737a:	69a4      	ldr	r4, [r4, #24]
 801737c:	e7f6      	b.n	801736c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801737e:	bd70      	pop	{r4, r5, r6, pc}

08017380 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017380:	b538      	push	{r3, r4, r5, lr}
 8017382:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017384:	460d      	mov	r5, r1
 8017386:	b134      	cbz	r4, 8017396 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017388:	682b      	ldr	r3, [r5, #0]
 801738a:	4621      	mov	r1, r4
 801738c:	689b      	ldr	r3, [r3, #8]
 801738e:	4628      	mov	r0, r5
 8017390:	4798      	blx	r3
 8017392:	69a4      	ldr	r4, [r4, #24]
 8017394:	e7f7      	b.n	8017386 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017396:	bd38      	pop	{r3, r4, r5, pc}

08017398 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017398:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801739a:	b19b      	cbz	r3, 80173c4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801739c:	428b      	cmp	r3, r1
 801739e:	d109      	bne.n	80173b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80173a0:	699a      	ldr	r2, [r3, #24]
 80173a2:	2100      	movs	r1, #0
 80173a4:	6159      	str	r1, [r3, #20]
 80173a6:	6282      	str	r2, [r0, #40]	; 0x28
 80173a8:	b902      	cbnz	r2, 80173ac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80173aa:	4770      	bx	lr
 80173ac:	6199      	str	r1, [r3, #24]
 80173ae:	4770      	bx	lr
 80173b0:	4613      	mov	r3, r2
 80173b2:	b13a      	cbz	r2, 80173c4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80173b4:	699a      	ldr	r2, [r3, #24]
 80173b6:	428a      	cmp	r2, r1
 80173b8:	d1fa      	bne.n	80173b0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80173ba:	698a      	ldr	r2, [r1, #24]
 80173bc:	619a      	str	r2, [r3, #24]
 80173be:	2300      	movs	r3, #0
 80173c0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80173c4:	4770      	bx	lr

080173c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80173c6:	b410      	push	{r4}
 80173c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80173ca:	4604      	mov	r4, r0
 80173cc:	b92b      	cbnz	r3, 80173da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80173ce:	6803      	ldr	r3, [r0, #0]
 80173d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80173d6:	4611      	mov	r1, r2
 80173d8:	4718      	bx	r3
 80173da:	b941      	cbnz	r1, 80173ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80173dc:	6193      	str	r3, [r2, #24]
 80173de:	6282      	str	r2, [r0, #40]	; 0x28
 80173e0:	6154      	str	r4, [r2, #20]
 80173e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173e6:	4770      	bx	lr
 80173e8:	4603      	mov	r3, r0
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d0f9      	beq.n	80173e2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80173ee:	4299      	cmp	r1, r3
 80173f0:	6998      	ldr	r0, [r3, #24]
 80173f2:	d1f9      	bne.n	80173e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80173f4:	6190      	str	r0, [r2, #24]
 80173f6:	618a      	str	r2, [r1, #24]
 80173f8:	e7f2      	b.n	80173e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080173fc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80173fc:	4288      	cmp	r0, r1
 80173fe:	b508      	push	{r3, lr}
 8017400:	d105      	bne.n	801740e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8017402:	4b11      	ldr	r3, [pc, #68]	; (8017448 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017404:	4a11      	ldr	r2, [pc, #68]	; (801744c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017406:	2123      	movs	r1, #35	; 0x23
 8017408:	4811      	ldr	r0, [pc, #68]	; (8017450 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801740a:	f011 ffed 	bl	80293e8 <__assert_func>
 801740e:	694b      	ldr	r3, [r1, #20]
 8017410:	b11b      	cbz	r3, 801741a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8017412:	4b10      	ldr	r3, [pc, #64]	; (8017454 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017414:	4a0d      	ldr	r2, [pc, #52]	; (801744c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017416:	2124      	movs	r1, #36	; 0x24
 8017418:	e7f6      	b.n	8017408 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801741a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801741e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017420:	b913      	cbnz	r3, 8017428 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017422:	6281      	str	r1, [r0, #40]	; 0x28
 8017424:	bd08      	pop	{r3, pc}
 8017426:	4613      	mov	r3, r2
 8017428:	699a      	ldr	r2, [r3, #24]
 801742a:	b12a      	cbz	r2, 8017438 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801742c:	428b      	cmp	r3, r1
 801742e:	d1fa      	bne.n	8017426 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017430:	4b09      	ldr	r3, [pc, #36]	; (8017458 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017432:	4a06      	ldr	r2, [pc, #24]	; (801744c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017434:	2135      	movs	r1, #53	; 0x35
 8017436:	e7e7      	b.n	8017408 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017438:	428b      	cmp	r3, r1
 801743a:	d103      	bne.n	8017444 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801743c:	4b06      	ldr	r3, [pc, #24]	; (8017458 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801743e:	4a03      	ldr	r2, [pc, #12]	; (801744c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017440:	2138      	movs	r1, #56	; 0x38
 8017442:	e7e1      	b.n	8017408 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017444:	6199      	str	r1, [r3, #24]
 8017446:	e7ed      	b.n	8017424 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017448:	0802ee78 	.word	0x0802ee78
 801744c:	0802efc8 	.word	0x0802efc8
 8017450:	0802eea4 	.word	0x0802eea4
 8017454:	0802eed7 	.word	0x0802eed7
 8017458:	0802ef0d 	.word	0x0802ef0d

0801745c <_ZN8touchgfx4RectaNERKS0_>:
 801745c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017460:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017464:	888c      	ldrh	r4, [r1, #4]
 8017466:	f9b0 9000 	ldrsh.w	r9, [r0]
 801746a:	443c      	add	r4, r7
 801746c:	b2a4      	uxth	r4, r4
 801746e:	fa0f f884 	sxth.w	r8, r4
 8017472:	45c1      	cmp	r9, r8
 8017474:	da2f      	bge.n	80174d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017476:	8882      	ldrh	r2, [r0, #4]
 8017478:	444a      	add	r2, r9
 801747a:	b292      	uxth	r2, r2
 801747c:	fa0f fe82 	sxth.w	lr, r2
 8017480:	4577      	cmp	r7, lr
 8017482:	da28      	bge.n	80174d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017484:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017488:	88cb      	ldrh	r3, [r1, #6]
 801748a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801748e:	442b      	add	r3, r5
 8017490:	b21b      	sxth	r3, r3
 8017492:	429e      	cmp	r6, r3
 8017494:	da1f      	bge.n	80174d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017496:	88c3      	ldrh	r3, [r0, #6]
 8017498:	4433      	add	r3, r6
 801749a:	b29b      	uxth	r3, r3
 801749c:	fa0f fc83 	sxth.w	ip, r3
 80174a0:	4565      	cmp	r5, ip
 80174a2:	da18      	bge.n	80174d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80174a4:	454f      	cmp	r7, r9
 80174a6:	bfb8      	it	lt
 80174a8:	464f      	movlt	r7, r9
 80174aa:	42b5      	cmp	r5, r6
 80174ac:	bfb8      	it	lt
 80174ae:	4635      	movlt	r5, r6
 80174b0:	45f0      	cmp	r8, lr
 80174b2:	bfd8      	it	le
 80174b4:	4622      	movle	r2, r4
 80174b6:	1bd2      	subs	r2, r2, r7
 80174b8:	8082      	strh	r2, [r0, #4]
 80174ba:	884a      	ldrh	r2, [r1, #2]
 80174bc:	88c9      	ldrh	r1, [r1, #6]
 80174be:	8007      	strh	r7, [r0, #0]
 80174c0:	440a      	add	r2, r1
 80174c2:	b292      	uxth	r2, r2
 80174c4:	b211      	sxth	r1, r2
 80174c6:	458c      	cmp	ip, r1
 80174c8:	bfa8      	it	ge
 80174ca:	4613      	movge	r3, r2
 80174cc:	1b5b      	subs	r3, r3, r5
 80174ce:	80c3      	strh	r3, [r0, #6]
 80174d0:	8045      	strh	r5, [r0, #2]
 80174d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174d6:	2300      	movs	r3, #0
 80174d8:	8003      	strh	r3, [r0, #0]
 80174da:	8043      	strh	r3, [r0, #2]
 80174dc:	8083      	strh	r3, [r0, #4]
 80174de:	80c3      	strh	r3, [r0, #6]
 80174e0:	e7f7      	b.n	80174d2 <_ZN8touchgfx4RectaNERKS0_+0x76>

080174e2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80174e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	dd06      	ble.n	80174f8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80174ea:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80174ee:	2800      	cmp	r0, #0
 80174f0:	bfcc      	ite	gt
 80174f2:	2000      	movgt	r0, #0
 80174f4:	2001      	movle	r0, #1
 80174f6:	4770      	bx	lr
 80174f8:	2001      	movs	r0, #1
 80174fa:	4770      	bx	lr

080174fc <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80174fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017500:	2300      	movs	r3, #0
 8017502:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017504:	8003      	strh	r3, [r0, #0]
 8017506:	4604      	mov	r4, r0
 8017508:	8043      	strh	r3, [r0, #2]
 801750a:	8083      	strh	r3, [r0, #4]
 801750c:	80c3      	strh	r3, [r0, #6]
 801750e:	2d00      	cmp	r5, #0
 8017510:	d040      	beq.n	8017594 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017512:	1d28      	adds	r0, r5, #4
 8017514:	f7ff ffe5 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017518:	b988      	cbnz	r0, 801753e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801751a:	4620      	mov	r0, r4
 801751c:	f7ff ffe1 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017520:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017524:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017528:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801752c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017530:	b138      	cbz	r0, 8017542 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017532:	8022      	strh	r2, [r4, #0]
 8017534:	8063      	strh	r3, [r4, #2]
 8017536:	f8a4 e004 	strh.w	lr, [r4, #4]
 801753a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801753e:	69ad      	ldr	r5, [r5, #24]
 8017540:	e7e5      	b.n	801750e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017542:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017546:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801754a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801754e:	4290      	cmp	r0, r2
 8017550:	4607      	mov	r7, r0
 8017552:	bfa8      	it	ge
 8017554:	4617      	movge	r7, r2
 8017556:	4472      	add	r2, lr
 8017558:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801755c:	8027      	strh	r7, [r4, #0]
 801755e:	4299      	cmp	r1, r3
 8017560:	460e      	mov	r6, r1
 8017562:	4440      	add	r0, r8
 8017564:	bfa8      	it	ge
 8017566:	461e      	movge	r6, r3
 8017568:	4471      	add	r1, lr
 801756a:	4463      	add	r3, ip
 801756c:	b200      	sxth	r0, r0
 801756e:	b212      	sxth	r2, r2
 8017570:	b209      	sxth	r1, r1
 8017572:	b21b      	sxth	r3, r3
 8017574:	4290      	cmp	r0, r2
 8017576:	bfac      	ite	ge
 8017578:	ebc7 0200 	rsbge	r2, r7, r0
 801757c:	ebc7 0202 	rsblt	r2, r7, r2
 8017580:	4299      	cmp	r1, r3
 8017582:	bfac      	ite	ge
 8017584:	ebc6 0301 	rsbge	r3, r6, r1
 8017588:	ebc6 0303 	rsblt	r3, r6, r3
 801758c:	8066      	strh	r6, [r4, #2]
 801758e:	80a2      	strh	r2, [r4, #4]
 8017590:	80e3      	strh	r3, [r4, #6]
 8017592:	e7d4      	b.n	801753e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017594:	4620      	mov	r0, r4
 8017596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801759a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801759a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801759e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80175a2:	b383      	cbz	r3, 8017606 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80175a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80175a6:	b374      	cbz	r4, 8017606 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80175a8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80175ac:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80175b0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80175b4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80175b8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80175bc:	b303      	cbz	r3, 8017600 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80175be:	4668      	mov	r0, sp
 80175c0:	1d21      	adds	r1, r4, #4
 80175c2:	f8ad 5000 	strh.w	r5, [sp]
 80175c6:	f8ad 6002 	strh.w	r6, [sp, #2]
 80175ca:	f8ad 7004 	strh.w	r7, [sp, #4]
 80175ce:	f8ad 8006 	strh.w	r8, [sp, #6]
 80175d2:	f7ff ff43 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 80175d6:	4668      	mov	r0, sp
 80175d8:	f7ff ff83 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80175dc:	b980      	cbnz	r0, 8017600 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80175de:	f8bd 3000 	ldrh.w	r3, [sp]
 80175e2:	88a2      	ldrh	r2, [r4, #4]
 80175e4:	1a9b      	subs	r3, r3, r2
 80175e6:	f8ad 3000 	strh.w	r3, [sp]
 80175ea:	88e2      	ldrh	r2, [r4, #6]
 80175ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80175f0:	1a9b      	subs	r3, r3, r2
 80175f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80175f6:	6823      	ldr	r3, [r4, #0]
 80175f8:	4669      	mov	r1, sp
 80175fa:	689b      	ldr	r3, [r3, #8]
 80175fc:	4620      	mov	r0, r4
 80175fe:	4798      	blx	r3
 8017600:	69a4      	ldr	r4, [r4, #24]
 8017602:	2c00      	cmp	r4, #0
 8017604:	d1d8      	bne.n	80175b8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017606:	b002      	add	sp, #8
 8017608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801760c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801760c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801760e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017612:	460d      	mov	r5, r1
 8017614:	4616      	mov	r6, r2
 8017616:	b323      	cbz	r3, 8017662 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017618:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801761a:	b314      	cbz	r4, 8017662 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801761c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017620:	b1eb      	cbz	r3, 801765e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017622:	6828      	ldr	r0, [r5, #0]
 8017624:	6869      	ldr	r1, [r5, #4]
 8017626:	466b      	mov	r3, sp
 8017628:	c303      	stmia	r3!, {r0, r1}
 801762a:	4668      	mov	r0, sp
 801762c:	1d21      	adds	r1, r4, #4
 801762e:	f7ff ff15 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 8017632:	4668      	mov	r0, sp
 8017634:	f7ff ff55 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017638:	b988      	cbnz	r0, 801765e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801763a:	f8bd 3000 	ldrh.w	r3, [sp]
 801763e:	88a2      	ldrh	r2, [r4, #4]
 8017640:	1a9b      	subs	r3, r3, r2
 8017642:	f8ad 3000 	strh.w	r3, [sp]
 8017646:	88e2      	ldrh	r2, [r4, #6]
 8017648:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801764c:	1a9b      	subs	r3, r3, r2
 801764e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017652:	6823      	ldr	r3, [r4, #0]
 8017654:	4632      	mov	r2, r6
 8017656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017658:	4669      	mov	r1, sp
 801765a:	4620      	mov	r0, r4
 801765c:	4798      	blx	r3
 801765e:	69a4      	ldr	r4, [r4, #24]
 8017660:	e7db      	b.n	801761a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017662:	b002      	add	sp, #8
 8017664:	bd70      	pop	{r4, r5, r6, pc}

08017666 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8017666:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801766a:	4770      	bx	lr

0801766c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801766c:	b513      	push	{r0, r1, r4, lr}
 801766e:	6803      	ldr	r3, [r0, #0]
 8017670:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8017674:	2300      	movs	r3, #0
 8017676:	e9cd 3300 	strd	r3, r3, [sp]
 801767a:	466b      	mov	r3, sp
 801767c:	47a0      	blx	r4
 801767e:	b002      	add	sp, #8
 8017680:	bd10      	pop	{r4, pc}

08017682 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017682:	2301      	movs	r3, #1
 8017684:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017688:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801768c:	4770      	bx	lr

0801768e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801768e:	2301      	movs	r3, #1
 8017690:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017694:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017698:	4770      	bx	lr

0801769a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801769a:	6843      	ldr	r3, [r0, #4]
 801769c:	2201      	movs	r2, #1
 801769e:	725a      	strb	r2, [r3, #9]
 80176a0:	6840      	ldr	r0, [r0, #4]
 80176a2:	6803      	ldr	r3, [r0, #0]
 80176a4:	691b      	ldr	r3, [r3, #16]
 80176a6:	4718      	bx	r3

080176a8 <_ZN8touchgfx3HAL8flushDMAEv>:
 80176a8:	6840      	ldr	r0, [r0, #4]
 80176aa:	6803      	ldr	r3, [r0, #0]
 80176ac:	689b      	ldr	r3, [r3, #8]
 80176ae:	4718      	bx	r3

080176b0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80176b0:	4b04      	ldr	r3, [pc, #16]	; (80176c4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80176b2:	781b      	ldrb	r3, [r3, #0]
 80176b4:	b123      	cbz	r3, 80176c0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80176b6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80176ba:	f080 0001 	eor.w	r0, r0, #1
 80176be:	4770      	bx	lr
 80176c0:	2001      	movs	r0, #1
 80176c2:	4770      	bx	lr
 80176c4:	2000b732 	.word	0x2000b732

080176c8 <_ZN8touchgfx3HAL8endFrameEv>:
 80176c8:	b510      	push	{r4, lr}
 80176ca:	4604      	mov	r4, r0
 80176cc:	6840      	ldr	r0, [r0, #4]
 80176ce:	6803      	ldr	r3, [r0, #0]
 80176d0:	689b      	ldr	r3, [r3, #8]
 80176d2:	4798      	blx	r3
 80176d4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80176d8:	b113      	cbz	r3, 80176e0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80176da:	2301      	movs	r3, #1
 80176dc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80176e0:	bd10      	pop	{r4, pc}

080176e2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80176e2:	b508      	push	{r3, lr}
 80176e4:	6803      	ldr	r3, [r0, #0]
 80176e6:	4604      	mov	r4, r0
 80176e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80176ea:	4798      	blx	r3
 80176ec:	6823      	ldr	r3, [r4, #0]
 80176ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176f0:	4620      	mov	r0, r4
 80176f2:	4798      	blx	r3
 80176f4:	f7fd ffe8 	bl	80156c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80176f8:	6823      	ldr	r3, [r4, #0]
 80176fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80176fc:	e7f8      	b.n	80176f0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08017700 <_ZN8touchgfx3HAL4tickEv>:
 8017700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017702:	6803      	ldr	r3, [r0, #0]
 8017704:	4d5c      	ldr	r5, [pc, #368]	; (8017878 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801770a:	4604      	mov	r4, r0
 801770c:	4798      	blx	r3
 801770e:	2800      	cmp	r0, #0
 8017710:	f000 8097 	beq.w	8017842 <_ZN8touchgfx3HAL4tickEv+0x142>
 8017714:	2001      	movs	r0, #1
 8017716:	f7fd fd01 	bl	801511c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801771a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801771e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017722:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017726:	2600      	movs	r6, #0
 8017728:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801772c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017730:	b133      	cbz	r3, 8017740 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017732:	6823      	ldr	r3, [r4, #0]
 8017734:	4620      	mov	r0, r4
 8017736:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801773a:	4798      	blx	r3
 801773c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017740:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017744:	6862      	ldr	r2, [r4, #4]
 8017746:	f083 0301 	eor.w	r3, r3, #1
 801774a:	7253      	strb	r3, [r2, #9]
 801774c:	2601      	movs	r6, #1
 801774e:	702e      	strb	r6, [r5, #0]
 8017750:	f002 ff2e 	bl	801a5b0 <_ZN8touchgfx11Application11getInstanceEv>
 8017754:	6803      	ldr	r3, [r0, #0]
 8017756:	4631      	mov	r1, r6
 8017758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801775a:	4798      	blx	r3
 801775c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017760:	b90b      	cbnz	r3, 8017766 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017762:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017766:	f002 ff23 	bl	801a5b0 <_ZN8touchgfx11Application11getInstanceEv>
 801776a:	6803      	ldr	r3, [r0, #0]
 801776c:	695b      	ldr	r3, [r3, #20]
 801776e:	4798      	blx	r3
 8017770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017772:	6803      	ldr	r3, [r0, #0]
 8017774:	691b      	ldr	r3, [r3, #16]
 8017776:	4798      	blx	r3
 8017778:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801777c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017780:	3b01      	subs	r3, #1
 8017782:	b2db      	uxtb	r3, r3
 8017784:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017788:	b10a      	cbz	r2, 801778e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801778a:	2b00      	cmp	r3, #0
 801778c:	d1eb      	bne.n	8017766 <_ZN8touchgfx3HAL4tickEv+0x66>
 801778e:	4a3b      	ldr	r2, [pc, #236]	; (801787c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017790:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017794:	7813      	ldrb	r3, [r2, #0]
 8017796:	3301      	adds	r3, #1
 8017798:	b25b      	sxtb	r3, r3
 801779a:	4299      	cmp	r1, r3
 801779c:	7013      	strb	r3, [r2, #0]
 801779e:	dc10      	bgt.n	80177c2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80177a0:	68e0      	ldr	r0, [r4, #12]
 80177a2:	2300      	movs	r3, #0
 80177a4:	7013      	strb	r3, [r2, #0]
 80177a6:	6803      	ldr	r3, [r0, #0]
 80177a8:	aa03      	add	r2, sp, #12
 80177aa:	68db      	ldr	r3, [r3, #12]
 80177ac:	a902      	add	r1, sp, #8
 80177ae:	4798      	blx	r3
 80177b0:	6823      	ldr	r3, [r4, #0]
 80177b2:	2800      	cmp	r0, #0
 80177b4:	d051      	beq.n	801785a <_ZN8touchgfx3HAL4tickEv+0x15a>
 80177b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80177ba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80177be:	4620      	mov	r0, r4
 80177c0:	4798      	blx	r3
 80177c2:	6960      	ldr	r0, [r4, #20]
 80177c4:	2300      	movs	r3, #0
 80177c6:	f88d 3007 	strb.w	r3, [sp, #7]
 80177ca:	b158      	cbz	r0, 80177e4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80177cc:	6803      	ldr	r3, [r0, #0]
 80177ce:	f10d 0107 	add.w	r1, sp, #7
 80177d2:	68db      	ldr	r3, [r3, #12]
 80177d4:	4798      	blx	r3
 80177d6:	b128      	cbz	r0, 80177e4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80177d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80177de:	6803      	ldr	r3, [r0, #0]
 80177e0:	68db      	ldr	r3, [r3, #12]
 80177e2:	4798      	blx	r3
 80177e4:	f104 001c 	add.w	r0, r4, #28
 80177e8:	f011 fc1a 	bl	8029020 <_ZN8touchgfx8Gestures4tickEv>
 80177ec:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80177f0:	b30b      	cbz	r3, 8017836 <_ZN8touchgfx3HAL4tickEv+0x136>
 80177f2:	6920      	ldr	r0, [r4, #16]
 80177f4:	6803      	ldr	r3, [r0, #0]
 80177f6:	691b      	ldr	r3, [r3, #16]
 80177f8:	4798      	blx	r3
 80177fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80177fc:	4606      	mov	r6, r0
 80177fe:	b903      	cbnz	r3, 8017802 <_ZN8touchgfx3HAL4tickEv+0x102>
 8017800:	6720      	str	r0, [r4, #112]	; 0x70
 8017802:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017804:	4a1e      	ldr	r2, [pc, #120]	; (8017880 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8017806:	1af3      	subs	r3, r6, r3
 8017808:	4293      	cmp	r3, r2
 801780a:	d914      	bls.n	8017836 <_ZN8touchgfx3HAL4tickEv+0x136>
 801780c:	6920      	ldr	r0, [r4, #16]
 801780e:	6803      	ldr	r3, [r0, #0]
 8017810:	699b      	ldr	r3, [r3, #24]
 8017812:	4798      	blx	r3
 8017814:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017816:	2264      	movs	r2, #100	; 0x64
 8017818:	1af3      	subs	r3, r6, r3
 801781a:	fbb3 f3f2 	udiv	r3, r3, r2
 801781e:	fbb0 f0f3 	udiv	r0, r0, r3
 8017822:	2800      	cmp	r0, #0
 8017824:	dc1e      	bgt.n	8017864 <_ZN8touchgfx3HAL4tickEv+0x164>
 8017826:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801782a:	6920      	ldr	r0, [r4, #16]
 801782c:	6803      	ldr	r3, [r0, #0]
 801782e:	2100      	movs	r1, #0
 8017830:	69db      	ldr	r3, [r3, #28]
 8017832:	4798      	blx	r3
 8017834:	6726      	str	r6, [r4, #112]	; 0x70
 8017836:	f002 febb 	bl	801a5b0 <_ZN8touchgfx11Application11getInstanceEv>
 801783a:	6803      	ldr	r3, [r0, #0]
 801783c:	2100      	movs	r1, #0
 801783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017840:	4798      	blx	r3
 8017842:	6823      	ldr	r3, [r4, #0]
 8017844:	4620      	mov	r0, r4
 8017846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801784a:	4798      	blx	r3
 801784c:	2001      	movs	r0, #1
 801784e:	f7fd fc70 	bl	8015132 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017852:	2300      	movs	r3, #0
 8017854:	702b      	strb	r3, [r5, #0]
 8017856:	b004      	add	sp, #16
 8017858:	bd70      	pop	{r4, r5, r6, pc}
 801785a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801785e:	4620      	mov	r0, r4
 8017860:	4798      	blx	r3
 8017862:	e7ae      	b.n	80177c2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017864:	2863      	cmp	r0, #99	; 0x63
 8017866:	bfcb      	itete	gt
 8017868:	2300      	movgt	r3, #0
 801786a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801786e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017872:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8017876:	e7d8      	b.n	801782a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8017878:	2000b738 	.word	0x2000b738
 801787c:	2000b739 	.word	0x2000b739
 8017880:	05f5e100 	.word	0x05f5e100

08017884 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017884:	f7fd beec 	b.w	8015660 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017888 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017888:	6581      	str	r1, [r0, #88]	; 0x58
 801788a:	301c      	adds	r0, #28
 801788c:	f011 bbc6 	b.w	802901c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017890 <_ZN8touchgfx3HAL5touchEll>:
 8017890:	b530      	push	{r4, r5, lr}
 8017892:	b087      	sub	sp, #28
 8017894:	4604      	mov	r4, r0
 8017896:	a804      	add	r0, sp, #16
 8017898:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801789c:	f002 fc52 	bl	801a144 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80178a0:	9b04      	ldr	r3, [sp, #16]
 80178a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80178a6:	a906      	add	r1, sp, #24
 80178a8:	9b05      	ldr	r3, [sp, #20]
 80178aa:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80178ae:	a803      	add	r0, sp, #12
 80178b0:	f002 fc86 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80178b4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80178b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80178bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80178c0:	f104 001c 	add.w	r0, r4, #28
 80178c4:	b189      	cbz	r1, 80178ea <_ZN8touchgfx3HAL5touchEll+0x5a>
 80178c6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80178ca:	9300      	str	r3, [sp, #0]
 80178cc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80178d0:	4613      	mov	r3, r2
 80178d2:	462a      	mov	r2, r5
 80178d4:	f011 fbb2 	bl	802903c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80178d8:	b128      	cbz	r0, 80178e6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80178da:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80178de:	65e3      	str	r3, [r4, #92]	; 0x5c
 80178e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80178e4:	6623      	str	r3, [r4, #96]	; 0x60
 80178e6:	b007      	add	sp, #28
 80178e8:	bd30      	pop	{r4, r5, pc}
 80178ea:	f011 fbeb 	bl	80290c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80178ee:	2301      	movs	r3, #1
 80178f0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80178f4:	e7f1      	b.n	80178da <_ZN8touchgfx3HAL5touchEll+0x4a>

080178f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80178f6:	b570      	push	{r4, r5, r6, lr}
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d050      	beq.n	801799e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80178fc:	ea81 0002 	eor.w	r0, r1, r2
 8017900:	07c6      	lsls	r6, r0, #31
 8017902:	d508      	bpl.n	8017916 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017904:	3a01      	subs	r2, #1
 8017906:	18cc      	adds	r4, r1, r3
 8017908:	42a1      	cmp	r1, r4
 801790a:	d048      	beq.n	801799e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801790c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017910:	f801 0b01 	strb.w	r0, [r1], #1
 8017914:	e7f8      	b.n	8017908 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017916:	07d5      	lsls	r5, r2, #31
 8017918:	bf42      	ittt	mi
 801791a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801791e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017922:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017926:	2b01      	cmp	r3, #1
 8017928:	d915      	bls.n	8017956 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801792a:	ea82 0001 	eor.w	r0, r2, r1
 801792e:	0784      	lsls	r4, r0, #30
 8017930:	d02d      	beq.n	801798e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8017932:	1e94      	subs	r4, r2, #2
 8017934:	4608      	mov	r0, r1
 8017936:	18ce      	adds	r6, r1, r3
 8017938:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801793c:	f820 5b02 	strh.w	r5, [r0], #2
 8017940:	1a35      	subs	r5, r6, r0
 8017942:	2d01      	cmp	r5, #1
 8017944:	d8f8      	bhi.n	8017938 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8017946:	1e98      	subs	r0, r3, #2
 8017948:	f020 0001 	bic.w	r0, r0, #1
 801794c:	3002      	adds	r0, #2
 801794e:	4401      	add	r1, r0
 8017950:	4402      	add	r2, r0
 8017952:	f003 0301 	and.w	r3, r3, #1
 8017956:	1f14      	subs	r4, r2, #4
 8017958:	4608      	mov	r0, r1
 801795a:	18ce      	adds	r6, r1, r3
 801795c:	1a35      	subs	r5, r6, r0
 801795e:	2d03      	cmp	r5, #3
 8017960:	d810      	bhi.n	8017984 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8017962:	089c      	lsrs	r4, r3, #2
 8017964:	00a0      	lsls	r0, r4, #2
 8017966:	4401      	add	r1, r0
 8017968:	3801      	subs	r0, #1
 801796a:	4402      	add	r2, r0
 801796c:	f06f 0003 	mvn.w	r0, #3
 8017970:	fb00 3404 	mla	r4, r0, r4, r3
 8017974:	440c      	add	r4, r1
 8017976:	42a1      	cmp	r1, r4
 8017978:	d011      	beq.n	801799e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801797a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801797e:	f801 3b01 	strb.w	r3, [r1], #1
 8017982:	e7f8      	b.n	8017976 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8017984:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8017988:	f840 5b04 	str.w	r5, [r0], #4
 801798c:	e7e6      	b.n	801795c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801798e:	0790      	lsls	r0, r2, #30
 8017990:	d0e1      	beq.n	8017956 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8017992:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017996:	f821 0b02 	strh.w	r0, [r1], #2
 801799a:	3b02      	subs	r3, #2
 801799c:	e7db      	b.n	8017956 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801799e:	2001      	movs	r0, #1
 80179a0:	bd70      	pop	{r4, r5, r6, pc}

080179a2 <_ZN8touchgfx3HAL7noTouchEv>:
 80179a2:	b510      	push	{r4, lr}
 80179a4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80179a8:	4604      	mov	r4, r0
 80179aa:	b153      	cbz	r3, 80179c2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80179ac:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80179b0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80179b4:	2101      	movs	r1, #1
 80179b6:	301c      	adds	r0, #28
 80179b8:	f011 fb84 	bl	80290c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80179bc:	2300      	movs	r3, #0
 80179be:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80179c2:	bd10      	pop	{r4, pc}

080179c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80179c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179c8:	4604      	mov	r4, r0
 80179ca:	6980      	ldr	r0, [r0, #24]
 80179cc:	b085      	sub	sp, #20
 80179ce:	460f      	mov	r7, r1
 80179d0:	4690      	mov	r8, r2
 80179d2:	4699      	mov	r9, r3
 80179d4:	b930      	cbnz	r0, 80179e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80179d6:	4b1c      	ldr	r3, [pc, #112]	; (8017a48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80179d8:	4a1c      	ldr	r2, [pc, #112]	; (8017a4c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80179da:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80179de:	481c      	ldr	r0, [pc, #112]	; (8017a50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 80179e0:	f011 fd02 	bl	80293e8 <__assert_func>
 80179e4:	ad04      	add	r5, sp, #16
 80179e6:	2600      	movs	r6, #0
 80179e8:	f845 6d04 	str.w	r6, [r5, #-4]!
 80179ec:	6806      	ldr	r6, [r0, #0]
 80179ee:	9501      	str	r5, [sp, #4]
 80179f0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80179f4:	9500      	str	r5, [sp, #0]
 80179f6:	6835      	ldr	r5, [r6, #0]
 80179f8:	47a8      	blx	r5
 80179fa:	4d16      	ldr	r5, [pc, #88]	; (8017a54 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80179fc:	4606      	mov	r6, r0
 80179fe:	f8a5 9000 	strh.w	r9, [r5]
 8017a02:	f7fa fe93 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 8017a06:	6803      	ldr	r3, [r0, #0]
 8017a08:	6a1b      	ldr	r3, [r3, #32]
 8017a0a:	4798      	blx	r3
 8017a0c:	2801      	cmp	r0, #1
 8017a0e:	d012      	beq.n	8017a36 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8017a10:	d306      	bcc.n	8017a20 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8017a12:	280d      	cmp	r0, #13
 8017a14:	d80b      	bhi.n	8017a2e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017a16:	4b10      	ldr	r3, [pc, #64]	; (8017a58 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017a18:	4a0c      	ldr	r2, [pc, #48]	; (8017a4c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017a1a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017a1e:	e7de      	b.n	80179de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017a20:	882b      	ldrh	r3, [r5, #0]
 8017a22:	fb08 7203 	mla	r2, r8, r3, r7
 8017a26:	9b03      	ldr	r3, [sp, #12]
 8017a28:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017a2c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017a2e:	4630      	mov	r0, r6
 8017a30:	b005      	add	sp, #20
 8017a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a36:	882a      	ldrh	r2, [r5, #0]
 8017a38:	9b03      	ldr	r3, [sp, #12]
 8017a3a:	fb08 7202 	mla	r2, r8, r2, r7
 8017a3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017a42:	1a9a      	subs	r2, r3, r2
 8017a44:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017a46:	e7f2      	b.n	8017a2e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017a48:	0802f071 	.word	0x0802f071
 8017a4c:	0802f38a 	.word	0x0802f38a
 8017a50:	0802f0b6 	.word	0x0802f0b6
 8017a54:	2000b72e 	.word	0x2000b72e
 8017a58:	0802f0dc 	.word	0x0802f0dc

08017a5c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8017a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a60:	4698      	mov	r8, r3
 8017a62:	6803      	ldr	r3, [r0, #0]
 8017a64:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8017a66:	4b0f      	ldr	r3, [pc, #60]	; (8017aa4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8017a68:	b087      	sub	sp, #28
 8017a6a:	f8b3 9000 	ldrh.w	r9, [r3]
 8017a6e:	460e      	mov	r6, r1
 8017a70:	4617      	mov	r7, r2
 8017a72:	4604      	mov	r4, r0
 8017a74:	f7fa fe5a 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 8017a78:	6803      	ldr	r3, [r0, #0]
 8017a7a:	6a1b      	ldr	r3, [r3, #32]
 8017a7c:	4798      	blx	r3
 8017a7e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017a82:	9302      	str	r3, [sp, #8]
 8017a84:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017a88:	9301      	str	r3, [sp, #4]
 8017a8a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017a8e:	9300      	str	r3, [sp, #0]
 8017a90:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8017a94:	4643      	mov	r3, r8
 8017a96:	463a      	mov	r2, r7
 8017a98:	4631      	mov	r1, r6
 8017a9a:	4620      	mov	r0, r4
 8017a9c:	47a8      	blx	r5
 8017a9e:	b007      	add	sp, #28
 8017aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017aa4:	2000b72e 	.word	0x2000b72e

08017aa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aac:	4604      	mov	r4, r0
 8017aae:	b08b      	sub	sp, #44	; 0x2c
 8017ab0:	4610      	mov	r0, r2
 8017ab2:	460d      	mov	r5, r1
 8017ab4:	4691      	mov	r9, r2
 8017ab6:	461e      	mov	r6, r3
 8017ab8:	f005 fcca 	bl	801d450 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017abc:	2800      	cmp	r0, #0
 8017abe:	f000 80a0 	beq.w	8017c02 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8017ac2:	6823      	ldr	r3, [r4, #0]
 8017ac4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017c38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 8017ac8:	6a1b      	ldr	r3, [r3, #32]
 8017aca:	f8df a170 	ldr.w	sl, [pc, #368]	; 8017c3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8017ace:	4620      	mov	r0, r4
 8017ad0:	4798      	blx	r3
 8017ad2:	6823      	ldr	r3, [r4, #0]
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ad8:	4798      	blx	r3
 8017ada:	f8bb 3000 	ldrh.w	r3, [fp]
 8017ade:	9301      	str	r3, [sp, #4]
 8017ae0:	f8ba 3000 	ldrh.w	r3, [sl]
 8017ae4:	9302      	str	r3, [sp, #8]
 8017ae6:	4b51      	ldr	r3, [pc, #324]	; (8017c2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8017ae8:	881a      	ldrh	r2, [r3, #0]
 8017aea:	9203      	str	r2, [sp, #12]
 8017aec:	4a50      	ldr	r2, [pc, #320]	; (8017c30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8017aee:	8812      	ldrh	r2, [r2, #0]
 8017af0:	9204      	str	r2, [sp, #16]
 8017af2:	af0a      	add	r7, sp, #40	; 0x28
 8017af4:	4a4f      	ldr	r2, [pc, #316]	; (8017c34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8017af6:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8017afa:	7812      	ldrb	r2, [r2, #0]
 8017afc:	4698      	mov	r8, r3
 8017afe:	4638      	mov	r0, r7
 8017b00:	2a00      	cmp	r2, #0
 8017b02:	f040 8081 	bne.w	8017c08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8017b06:	f005 fd5d 	bl	801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017b0a:	f8ab 0000 	strh.w	r0, [fp]
 8017b0e:	4638      	mov	r0, r7
 8017b10:	f005 fd92 	bl	801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b14:	f8aa 0000 	strh.w	r0, [sl]
 8017b18:	4638      	mov	r0, r7
 8017b1a:	f005 fd53 	bl	801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017b1e:	f8a8 0000 	strh.w	r0, [r8]
 8017b22:	4638      	mov	r0, r7
 8017b24:	f005 fd88 	bl	801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b28:	4b41      	ldr	r3, [pc, #260]	; (8017c30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8017b2a:	8018      	strh	r0, [r3, #0]
 8017b2c:	4648      	mov	r0, r9
 8017b2e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017b32:	f005 fc8d 	bl	801d450 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017b36:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	4611      	mov	r1, r2
 8017b3e:	4628      	mov	r0, r5
 8017b40:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017b44:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017b48:	f7fb fb4c 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
 8017b4c:	2301      	movs	r3, #1
 8017b4e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017b52:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017b56:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	dd5c      	ble.n	8017c18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8017b5e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	dd58      	ble.n	8017c18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8017b66:	462a      	mov	r2, r5
 8017b68:	ab08      	add	r3, sp, #32
 8017b6a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017b6e:	6851      	ldr	r1, [r2, #4]
 8017b70:	c303      	stmia	r3!, {r0, r1}
 8017b72:	4631      	mov	r1, r6
 8017b74:	a808      	add	r0, sp, #32
 8017b76:	f7ff fc71 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 8017b7a:	a807      	add	r0, sp, #28
 8017b7c:	f005 feb4 	bl	801d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017b80:	4606      	mov	r6, r0
 8017b82:	f7fa fdd3 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 8017b86:	6803      	ldr	r3, [r0, #0]
 8017b88:	6a1b      	ldr	r3, [r3, #32]
 8017b8a:	4798      	blx	r3
 8017b8c:	4286      	cmp	r6, r0
 8017b8e:	d04a      	beq.n	8017c26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 8017b90:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017b92:	b150      	cbz	r0, 8017baa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8017b94:	a807      	add	r0, sp, #28
 8017b96:	f005 fea7 	bl	801d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017b9a:	4606      	mov	r6, r0
 8017b9c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017b9e:	6803      	ldr	r3, [r0, #0]
 8017ba0:	6a1b      	ldr	r3, [r3, #32]
 8017ba2:	4798      	blx	r3
 8017ba4:	1a33      	subs	r3, r6, r0
 8017ba6:	4258      	negs	r0, r3
 8017ba8:	4158      	adcs	r0, r3
 8017baa:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017bae:	2600      	movs	r6, #0
 8017bb0:	682a      	ldr	r2, [r5, #0]
 8017bb2:	696b      	ldr	r3, [r5, #20]
 8017bb4:	616e      	str	r6, [r5, #20]
 8017bb6:	9305      	str	r3, [sp, #20]
 8017bb8:	6892      	ldr	r2, [r2, #8]
 8017bba:	a908      	add	r1, sp, #32
 8017bbc:	4628      	mov	r0, r5
 8017bbe:	4790      	blx	r2
 8017bc0:	9b05      	ldr	r3, [sp, #20]
 8017bc2:	616b      	str	r3, [r5, #20]
 8017bc4:	4652      	mov	r2, sl
 8017bc6:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017bca:	4649      	mov	r1, r9
 8017bcc:	4628      	mov	r0, r5
 8017bce:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017bd2:	f7fb fb07 	bl	80131e4 <_ZN8touchgfx8Drawable5setXYEss>
 8017bd6:	4b18      	ldr	r3, [pc, #96]	; (8017c38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8017bd8:	9a01      	ldr	r2, [sp, #4]
 8017bda:	801a      	strh	r2, [r3, #0]
 8017bdc:	4b17      	ldr	r3, [pc, #92]	; (8017c3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 8017bde:	9a02      	ldr	r2, [sp, #8]
 8017be0:	801a      	strh	r2, [r3, #0]
 8017be2:	4b12      	ldr	r3, [pc, #72]	; (8017c2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8017be4:	9a03      	ldr	r2, [sp, #12]
 8017be6:	801a      	strh	r2, [r3, #0]
 8017be8:	4b11      	ldr	r3, [pc, #68]	; (8017c30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8017bea:	9a04      	ldr	r2, [sp, #16]
 8017bec:	801a      	strh	r2, [r3, #0]
 8017bee:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017bf2:	6823      	ldr	r3, [r4, #0]
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	6a1b      	ldr	r3, [r3, #32]
 8017bf8:	4798      	blx	r3
 8017bfa:	6823      	ldr	r3, [r4, #0]
 8017bfc:	4620      	mov	r0, r4
 8017bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c00:	4798      	blx	r3
 8017c02:	b00b      	add	sp, #44	; 0x2c
 8017c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c08:	f005 fd16 	bl	801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017c0c:	f8ab 0000 	strh.w	r0, [fp]
 8017c10:	4638      	mov	r0, r7
 8017c12:	f005 fcd7 	bl	801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c16:	e77d      	b.n	8017b14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8017c18:	462a      	mov	r2, r5
 8017c1a:	ab08      	add	r3, sp, #32
 8017c1c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017c20:	6851      	ldr	r1, [r2, #4]
 8017c22:	c303      	stmia	r3!, {r0, r1}
 8017c24:	e7a9      	b.n	8017b7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8017c26:	2000      	movs	r0, #0
 8017c28:	e7bf      	b.n	8017baa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8017c2a:	bf00      	nop
 8017c2c:	2000b728 	.word	0x2000b728
 8017c30:	2000b72a 	.word	0x2000b72a
 8017c34:	2000b72c 	.word	0x2000b72c
 8017c38:	2000b72e 	.word	0x2000b72e
 8017c3c:	2000b730 	.word	0x2000b730

08017c40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017c40:	b510      	push	{r4, lr}
 8017c42:	4b07      	ldr	r3, [pc, #28]	; (8017c60 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017c44:	781b      	ldrb	r3, [r3, #0]
 8017c46:	4604      	mov	r4, r0
 8017c48:	b13b      	cbz	r3, 8017c5a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017c4a:	6803      	ldr	r3, [r0, #0]
 8017c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c4e:	4798      	blx	r3
 8017c50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017c52:	4283      	cmp	r3, r0
 8017c54:	d101      	bne.n	8017c5a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017c56:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017c58:	bd10      	pop	{r4, pc}
 8017c5a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017c5c:	e7fc      	b.n	8017c58 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017c5e:	bf00      	nop
 8017c60:	2000b732 	.word	0x2000b732

08017c64 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017c64:	b510      	push	{r4, lr}
 8017c66:	4b0b      	ldr	r3, [pc, #44]	; (8017c94 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8017c68:	781b      	ldrb	r3, [r3, #0]
 8017c6a:	4604      	mov	r4, r0
 8017c6c:	b95b      	cbnz	r3, 8017c86 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017c6e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017c72:	2b02      	cmp	r3, #2
 8017c74:	d007      	beq.n	8017c86 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017c76:	6840      	ldr	r0, [r0, #4]
 8017c78:	f000 fbce 	bl	8018418 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017c7c:	b118      	cbz	r0, 8017c86 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017c7e:	6862      	ldr	r2, [r4, #4]
 8017c80:	7a53      	ldrb	r3, [r2, #9]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d0fc      	beq.n	8017c80 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017c86:	f7fd fcdd 	bl	8015644 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017c8a:	4620      	mov	r0, r4
 8017c8c:	f7ff ffd8 	bl	8017c40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017c90:	bd10      	pop	{r4, pc}
 8017c92:	bf00      	nop
 8017c94:	2000b732 	.word	0x2000b732

08017c98 <_ZN8touchgfx3HAL10initializeEv>:
 8017c98:	b510      	push	{r4, lr}
 8017c9a:	4604      	mov	r4, r0
 8017c9c:	f7fd fc9e 	bl	80155dc <_ZN8touchgfx10OSWrappers10initializeEv>
 8017ca0:	6860      	ldr	r0, [r4, #4]
 8017ca2:	6803      	ldr	r3, [r0, #0]
 8017ca4:	68db      	ldr	r3, [r3, #12]
 8017ca6:	4798      	blx	r3
 8017ca8:	68e0      	ldr	r0, [r4, #12]
 8017caa:	6803      	ldr	r3, [r0, #0]
 8017cac:	689b      	ldr	r3, [r3, #8]
 8017cae:	4798      	blx	r3
 8017cb0:	6823      	ldr	r3, [r4, #0]
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cba:	4718      	bx	r3

08017cbc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8017cbc:	b508      	push	{r3, lr}
 8017cbe:	290d      	cmp	r1, #13
 8017cc0:	d817      	bhi.n	8017cf2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8017cc2:	e8df f001 	tbb	[pc, r1]
 8017cc6:	090b      	.short	0x090b
 8017cc8:	0d0d0d07 	.word	0x0d0d0d07
 8017ccc:	1414140d 	.word	0x1414140d
 8017cd0:	0d0d1414 	.word	0x0d0d1414
 8017cd4:	2020      	movs	r0, #32
 8017cd6:	bd08      	pop	{r3, pc}
 8017cd8:	2018      	movs	r0, #24
 8017cda:	e7fc      	b.n	8017cd6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017cdc:	2010      	movs	r0, #16
 8017cde:	e7fa      	b.n	8017cd6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017ce0:	4b05      	ldr	r3, [pc, #20]	; (8017cf8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8017ce2:	4a06      	ldr	r2, [pc, #24]	; (8017cfc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8017ce4:	4806      	ldr	r0, [pc, #24]	; (8017d00 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8017ce6:	f44f 7111 	mov.w	r1, #580	; 0x244
 8017cea:	f011 fb7d 	bl	80293e8 <__assert_func>
 8017cee:	2008      	movs	r0, #8
 8017cf0:	e7f1      	b.n	8017cd6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017cf2:	2000      	movs	r0, #0
 8017cf4:	e7ef      	b.n	8017cd6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017cf6:	bf00      	nop
 8017cf8:	0802f1af 	.word	0x0802f1af
 8017cfc:	0802f54c 	.word	0x0802f54c
 8017d00:	0802f0b6 	.word	0x0802f0b6

08017d04 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8017d04:	b570      	push	{r4, r5, r6, lr}
 8017d06:	460d      	mov	r5, r1
 8017d08:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8017d0c:	4616      	mov	r6, r2
 8017d0e:	461c      	mov	r4, r3
 8017d10:	f7ff ffd4 	bl	8017cbc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8017d14:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017d18:	10c0      	asrs	r0, r0, #3
 8017d1a:	fb06 5101 	mla	r1, r6, r1, r5
 8017d1e:	fb00 4001 	mla	r0, r0, r1, r4
 8017d22:	bd70      	pop	{r4, r5, r6, pc}

08017d24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8017d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d28:	b08a      	sub	sp, #40	; 0x28
 8017d2a:	f04f 0c00 	mov.w	ip, #0
 8017d2e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8017d32:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017d36:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8017d3a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8017d3e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017d42:	f8cd c020 	str.w	ip, [sp, #32]
 8017d46:	f1b8 0f02 	cmp.w	r8, #2
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	469a      	mov	sl, r3
 8017d4e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017d52:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017d56:	d030      	beq.n	8017dba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8017d58:	2bff      	cmp	r3, #255	; 0xff
 8017d5a:	d12c      	bne.n	8017db6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8017d5c:	4560      	cmp	r0, ip
 8017d5e:	bf14      	ite	ne
 8017d60:	2004      	movne	r0, #4
 8017d62:	2001      	moveq	r0, #1
 8017d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d68:	9204      	str	r2, [sp, #16]
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017d70:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017d74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017d78:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017d7c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8017d80:	f7ff ff5e 	bl	8017c40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017d84:	e9cd 9700 	strd	r9, r7, [sp]
 8017d88:	4603      	mov	r3, r0
 8017d8a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8017d8e:	4651      	mov	r1, sl
 8017d90:	4620      	mov	r0, r4
 8017d92:	f7ff ffb7 	bl	8017d04 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017d96:	f8ad 901e 	strh.w	r9, [sp, #30]
 8017d9a:	9005      	str	r0, [sp, #20]
 8017d9c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8017da0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8017da4:	b106      	cbz	r6, 8017da8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8017da6:	b98d      	cbnz	r5, 8017dcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8017da8:	4b12      	ldr	r3, [pc, #72]	; (8017df4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8017daa:	4a13      	ldr	r2, [pc, #76]	; (8017df8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8017dac:	f240 11c3 	movw	r1, #451	; 0x1c3
 8017db0:	4812      	ldr	r0, [pc, #72]	; (8017dfc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8017db2:	f011 fb19 	bl	80293e8 <__assert_func>
 8017db6:	2004      	movs	r0, #4
 8017db8:	e7d4      	b.n	8017d64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017dba:	2bff      	cmp	r3, #255	; 0xff
 8017dbc:	d104      	bne.n	8017dc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8017dbe:	2800      	cmp	r0, #0
 8017dc0:	bf14      	ite	ne
 8017dc2:	2040      	movne	r0, #64	; 0x40
 8017dc4:	2020      	moveq	r0, #32
 8017dc6:	e7cd      	b.n	8017d64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017dc8:	2040      	movs	r0, #64	; 0x40
 8017dca:	e7cb      	b.n	8017d64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017dcc:	6823      	ldr	r3, [r4, #0]
 8017dce:	9d02      	ldr	r5, [sp, #8]
 8017dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dd2:	4620      	mov	r0, r4
 8017dd4:	4798      	blx	r3
 8017dd6:	4228      	tst	r0, r5
 8017dd8:	d104      	bne.n	8017de4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8017dda:	4b09      	ldr	r3, [pc, #36]	; (8017e00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8017ddc:	4a06      	ldr	r2, [pc, #24]	; (8017df8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8017dde:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8017de2:	e7e5      	b.n	8017db0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8017de4:	6860      	ldr	r0, [r4, #4]
 8017de6:	6803      	ldr	r3, [r0, #0]
 8017de8:	a902      	add	r1, sp, #8
 8017dea:	685b      	ldr	r3, [r3, #4]
 8017dec:	4798      	blx	r3
 8017dee:	b00a      	add	sp, #40	; 0x28
 8017df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017df4:	0802f132 	.word	0x0802f132
 8017df8:	0802f3ee 	.word	0x0802f3ee
 8017dfc:	0802f0b6 	.word	0x0802f0b6
 8017e00:	0802f16a 	.word	0x0802f16a

08017e04 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8017e04:	b510      	push	{r4, lr}
 8017e06:	b08a      	sub	sp, #40	; 0x28
 8017e08:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8017e0c:	9408      	str	r4, [sp, #32]
 8017e0e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8017e12:	9407      	str	r4, [sp, #28]
 8017e14:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8017e18:	9406      	str	r4, [sp, #24]
 8017e1a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8017e1e:	9405      	str	r4, [sp, #20]
 8017e20:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8017e24:	9404      	str	r4, [sp, #16]
 8017e26:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8017e2a:	9403      	str	r4, [sp, #12]
 8017e2c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8017e30:	9402      	str	r4, [sp, #8]
 8017e32:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8017e36:	e9cd 3400 	strd	r3, r4, [sp]
 8017e3a:	4613      	mov	r3, r2
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	f7ff ff71 	bl	8017d24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017e42:	b00a      	add	sp, #40	; 0x28
 8017e44:	bd10      	pop	{r4, pc}
	...

08017e48 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8017e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e4a:	b08b      	sub	sp, #44	; 0x2c
 8017e4c:	4616      	mov	r6, r2
 8017e4e:	460d      	mov	r5, r1
 8017e50:	461f      	mov	r7, r3
 8017e52:	4604      	mov	r4, r0
 8017e54:	f7fa fc6a 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 8017e58:	6803      	ldr	r3, [r0, #0]
 8017e5a:	6a1b      	ldr	r3, [r3, #32]
 8017e5c:	4798      	blx	r3
 8017e5e:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017e62:	4b0d      	ldr	r3, [pc, #52]	; (8017e98 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8017e64:	881b      	ldrh	r3, [r3, #0]
 8017e66:	9306      	str	r3, [sp, #24]
 8017e68:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017e6c:	9305      	str	r3, [sp, #20]
 8017e6e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017e72:	9304      	str	r3, [sp, #16]
 8017e74:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017e78:	9303      	str	r3, [sp, #12]
 8017e7a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017e7e:	9302      	str	r3, [sp, #8]
 8017e80:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017e84:	2200      	movs	r2, #0
 8017e86:	e9cd 7300 	strd	r7, r3, [sp]
 8017e8a:	4629      	mov	r1, r5
 8017e8c:	4633      	mov	r3, r6
 8017e8e:	4620      	mov	r0, r4
 8017e90:	f7ff ff48 	bl	8017d24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017e94:	b00b      	add	sp, #44	; 0x2c
 8017e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e98:	2000b72e 	.word	0x2000b72e

08017e9c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8017e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ea0:	461f      	mov	r7, r3
 8017ea2:	4b14      	ldr	r3, [pc, #80]	; (8017ef4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8017ea4:	b08a      	sub	sp, #40	; 0x28
 8017ea6:	4616      	mov	r6, r2
 8017ea8:	f8b3 8000 	ldrh.w	r8, [r3]
 8017eac:	460d      	mov	r5, r1
 8017eae:	4604      	mov	r4, r0
 8017eb0:	f7fa fc3c 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 8017eb4:	6803      	ldr	r3, [r0, #0]
 8017eb6:	6a1b      	ldr	r3, [r3, #32]
 8017eb8:	4798      	blx	r3
 8017eba:	2302      	movs	r3, #2
 8017ebc:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8017ec0:	2301      	movs	r3, #1
 8017ec2:	9305      	str	r3, [sp, #20]
 8017ec4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017ec8:	9304      	str	r3, [sp, #16]
 8017eca:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017ece:	9303      	str	r3, [sp, #12]
 8017ed0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017ed4:	9302      	str	r3, [sp, #8]
 8017ed6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017eda:	9008      	str	r0, [sp, #32]
 8017edc:	e9cd 7300 	strd	r7, r3, [sp]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	4633      	mov	r3, r6
 8017ee4:	4629      	mov	r1, r5
 8017ee6:	4620      	mov	r0, r4
 8017ee8:	f7ff ff1c 	bl	8017d24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017eec:	b00a      	add	sp, #40	; 0x28
 8017eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ef2:	bf00      	nop
 8017ef4:	2000b72e 	.word	0x2000b72e

08017ef8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8017ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017efc:	b08b      	sub	sp, #44	; 0x2c
 8017efe:	469b      	mov	fp, r3
 8017f00:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8017f04:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8017f08:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8017f0c:	2fff      	cmp	r7, #255	; 0xff
 8017f0e:	bf14      	ite	ne
 8017f10:	2308      	movne	r3, #8
 8017f12:	2302      	moveq	r3, #2
 8017f14:	2600      	movs	r6, #0
 8017f16:	4604      	mov	r4, r0
 8017f18:	4689      	mov	r9, r1
 8017f1a:	4692      	mov	sl, r2
 8017f1c:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8017f20:	9608      	str	r6, [sp, #32]
 8017f22:	f7ff fe8d 	bl	8017c40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017f26:	e9cd 8500 	strd	r8, r5, [sp]
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	465a      	mov	r2, fp
 8017f2e:	4651      	mov	r1, sl
 8017f30:	4620      	mov	r0, r4
 8017f32:	f7ff fee7 	bl	8017d04 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017f36:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017f3a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017f3e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017f42:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017f46:	6823      	ldr	r3, [r4, #0]
 8017f48:	9005      	str	r0, [sp, #20]
 8017f4a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8017f4e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8017f52:	f8ad 601c 	strh.w	r6, [sp, #28]
 8017f56:	f8ad 801e 	strh.w	r8, [sp, #30]
 8017f5a:	f8cd 9020 	str.w	r9, [sp, #32]
 8017f5e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8017f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f64:	9d02      	ldr	r5, [sp, #8]
 8017f66:	4620      	mov	r0, r4
 8017f68:	4798      	blx	r3
 8017f6a:	4228      	tst	r0, r5
 8017f6c:	d106      	bne.n	8017f7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8017f6e:	4b07      	ldr	r3, [pc, #28]	; (8017f8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8017f70:	4a07      	ldr	r2, [pc, #28]	; (8017f90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8017f72:	4808      	ldr	r0, [pc, #32]	; (8017f94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8017f74:	f240 11fb 	movw	r1, #507	; 0x1fb
 8017f78:	f011 fa36 	bl	80293e8 <__assert_func>
 8017f7c:	6860      	ldr	r0, [r4, #4]
 8017f7e:	6803      	ldr	r3, [r0, #0]
 8017f80:	a902      	add	r1, sp, #8
 8017f82:	685b      	ldr	r3, [r3, #4]
 8017f84:	4798      	blx	r3
 8017f86:	b00b      	add	sp, #44	; 0x2c
 8017f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f8c:	0802f16a 	.word	0x0802f16a
 8017f90:	0802f4b7 	.word	0x0802f4b7
 8017f94:	0802f0b6 	.word	0x0802f0b6

08017f98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017f98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017f9c:	461f      	mov	r7, r3
 8017f9e:	4b0b      	ldr	r3, [pc, #44]	; (8017fcc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017fa0:	460d      	mov	r5, r1
 8017fa2:	f8b3 8000 	ldrh.w	r8, [r3]
 8017fa6:	4616      	mov	r6, r2
 8017fa8:	4604      	mov	r4, r0
 8017faa:	f7fa fbbf 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 8017fae:	6803      	ldr	r3, [r0, #0]
 8017fb0:	6a1b      	ldr	r3, [r3, #32]
 8017fb2:	4798      	blx	r3
 8017fb4:	463b      	mov	r3, r7
 8017fb6:	e9cd 8000 	strd	r8, r0, [sp]
 8017fba:	4632      	mov	r2, r6
 8017fbc:	4629      	mov	r1, r5
 8017fbe:	4620      	mov	r0, r4
 8017fc0:	f7ff fea0 	bl	8017d04 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017fc4:	b002      	add	sp, #8
 8017fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fca:	bf00      	nop
 8017fcc:	2000b72e 	.word	0x2000b72e

08017fd0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8017fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd4:	b088      	sub	sp, #32
 8017fd6:	4698      	mov	r8, r3
 8017fd8:	2300      	movs	r3, #0
 8017fda:	9306      	str	r3, [sp, #24]
 8017fdc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017fe0:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8017fe4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017fe8:	f8ad 6010 	strh.w	r6, [sp, #16]
 8017fec:	e9cd 3100 	strd	r3, r1, [sp]
 8017ff0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017ff4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ff8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017ffc:	f88d 301c 	strb.w	r3, [sp, #28]
 8018000:	4617      	mov	r7, r2
 8018002:	4604      	mov	r4, r0
 8018004:	f8ad 5012 	strh.w	r5, [sp, #18]
 8018008:	f7ff fe1a 	bl	8017c40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801800c:	4642      	mov	r2, r8
 801800e:	4603      	mov	r3, r0
 8018010:	4639      	mov	r1, r7
 8018012:	4620      	mov	r0, r4
 8018014:	f7ff ffc0 	bl	8017f98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018018:	4b16      	ldr	r3, [pc, #88]	; (8018074 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801801a:	9003      	str	r0, [sp, #12]
 801801c:	881b      	ldrh	r3, [r3, #0]
 801801e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018022:	f7fa fb83 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 8018026:	6803      	ldr	r3, [r0, #0]
 8018028:	6a1b      	ldr	r3, [r3, #32]
 801802a:	4798      	blx	r3
 801802c:	f88d 001e 	strb.w	r0, [sp, #30]
 8018030:	f88d 001d 	strb.w	r0, [sp, #29]
 8018034:	b106      	cbz	r6, 8018038 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8018036:	b935      	cbnz	r5, 8018046 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8018038:	4b0f      	ldr	r3, [pc, #60]	; (8018078 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801803a:	4a10      	ldr	r2, [pc, #64]	; (801807c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801803c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8018040:	480f      	ldr	r0, [pc, #60]	; (8018080 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8018042:	f011 f9d1 	bl	80293e8 <__assert_func>
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	9d00      	ldr	r5, [sp, #0]
 801804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801804c:	4620      	mov	r0, r4
 801804e:	4798      	blx	r3
 8018050:	4228      	tst	r0, r5
 8018052:	d104      	bne.n	801805e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8018054:	4b0b      	ldr	r3, [pc, #44]	; (8018084 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8018056:	4a09      	ldr	r2, [pc, #36]	; (801807c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8018058:	f240 11e1 	movw	r1, #481	; 0x1e1
 801805c:	e7f0      	b.n	8018040 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801805e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018060:	6860      	ldr	r0, [r4, #4]
 8018062:	9306      	str	r3, [sp, #24]
 8018064:	6803      	ldr	r3, [r0, #0]
 8018066:	4669      	mov	r1, sp
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	4798      	blx	r3
 801806c:	b008      	add	sp, #32
 801806e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018072:	bf00      	nop
 8018074:	2000b72e 	.word	0x2000b72e
 8018078:	0802f132 	.word	0x0802f132
 801807c:	0802f2a0 	.word	0x0802f2a0
 8018080:	0802f0b6 	.word	0x0802f0b6
 8018084:	0802f16a 	.word	0x0802f16a

08018088 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018088:	b570      	push	{r4, r5, r6, lr}
 801808a:	b08a      	sub	sp, #40	; 0x28
 801808c:	466b      	mov	r3, sp
 801808e:	e883 0006 	stmia.w	r3, {r1, r2}
 8018092:	4b20      	ldr	r3, [pc, #128]	; (8018114 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	4604      	mov	r4, r0
 8018098:	b933      	cbnz	r3, 80180a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801809a:	4b1f      	ldr	r3, [pc, #124]	; (8018118 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801809c:	4a1f      	ldr	r2, [pc, #124]	; (801811c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801809e:	4820      	ldr	r0, [pc, #128]	; (8018120 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80180a0:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80180a4:	f011 f9a0 	bl	80293e8 <__assert_func>
 80180a8:	2300      	movs	r3, #0
 80180aa:	9308      	str	r3, [sp, #32]
 80180ac:	2301      	movs	r3, #1
 80180ae:	9302      	str	r3, [sp, #8]
 80180b0:	6803      	ldr	r3, [r0, #0]
 80180b2:	f8bd 5000 	ldrh.w	r5, [sp]
 80180b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180b8:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80180bc:	4798      	blx	r3
 80180be:	4632      	mov	r2, r6
 80180c0:	4629      	mov	r1, r5
 80180c2:	4603      	mov	r3, r0
 80180c4:	4620      	mov	r0, r4
 80180c6:	f7ff ff67 	bl	8017f98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80180ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80180cc:	9305      	str	r3, [sp, #20]
 80180ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80180d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80180d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80180da:	f8ad 301a 	strh.w	r3, [sp, #26]
 80180de:	4b11      	ldr	r3, [pc, #68]	; (8018124 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80180e0:	9003      	str	r0, [sp, #12]
 80180e2:	881b      	ldrh	r3, [r3, #0]
 80180e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80180e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80180ec:	f7fa fb1e 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 80180f0:	6803      	ldr	r3, [r0, #0]
 80180f2:	6a1b      	ldr	r3, [r3, #32]
 80180f4:	4798      	blx	r3
 80180f6:	23ff      	movs	r3, #255	; 0xff
 80180f8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80180fc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018100:	6860      	ldr	r0, [r4, #4]
 8018102:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018106:	6803      	ldr	r3, [r0, #0]
 8018108:	a902      	add	r1, sp, #8
 801810a:	685b      	ldr	r3, [r3, #4]
 801810c:	4798      	blx	r3
 801810e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018110:	b00a      	add	sp, #40	; 0x28
 8018112:	bd70      	pop	{r4, r5, r6, pc}
 8018114:	2000b733 	.word	0x2000b733
 8018118:	0802f003 	.word	0x0802f003
 801811c:	0802f344 	.word	0x0802f344
 8018120:	0802f0b6 	.word	0x0802f0b6
 8018124:	2000b72e 	.word	0x2000b72e

08018128 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801812a:	b08b      	sub	sp, #44	; 0x2c
 801812c:	466d      	mov	r5, sp
 801812e:	e885 0006 	stmia.w	r5, {r1, r2}
 8018132:	461d      	mov	r5, r3
 8018134:	2300      	movs	r3, #0
 8018136:	9308      	str	r3, [sp, #32]
 8018138:	2301      	movs	r3, #1
 801813a:	9302      	str	r3, [sp, #8]
 801813c:	6803      	ldr	r3, [r0, #0]
 801813e:	f8bd 6000 	ldrh.w	r6, [sp]
 8018142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018144:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018148:	4604      	mov	r4, r0
 801814a:	4798      	blx	r3
 801814c:	463a      	mov	r2, r7
 801814e:	4631      	mov	r1, r6
 8018150:	4603      	mov	r3, r0
 8018152:	4620      	mov	r0, r4
 8018154:	f7ff ff20 	bl	8017f98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018158:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801815c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018160:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018164:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018168:	4b0e      	ldr	r3, [pc, #56]	; (80181a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801816a:	9003      	str	r0, [sp, #12]
 801816c:	881b      	ldrh	r3, [r3, #0]
 801816e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018172:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018174:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018178:	9505      	str	r5, [sp, #20]
 801817a:	f7fa fad7 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 801817e:	6803      	ldr	r3, [r0, #0]
 8018180:	6a1b      	ldr	r3, [r3, #32]
 8018182:	4798      	blx	r3
 8018184:	23ff      	movs	r3, #255	; 0xff
 8018186:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801818a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801818e:	6860      	ldr	r0, [r4, #4]
 8018190:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018194:	6803      	ldr	r3, [r0, #0]
 8018196:	a902      	add	r1, sp, #8
 8018198:	685b      	ldr	r3, [r3, #4]
 801819a:	4798      	blx	r3
 801819c:	4628      	mov	r0, r5
 801819e:	b00b      	add	sp, #44	; 0x2c
 80181a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181a2:	bf00      	nop
 80181a4:	2000b72e 	.word	0x2000b72e

080181a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80181a8:	b570      	push	{r4, r5, r6, lr}
 80181aa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80181ae:	4604      	mov	r4, r0
 80181b0:	b19b      	cbz	r3, 80181da <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80181b2:	2002      	movs	r0, #2
 80181b4:	f7fc ffc8 	bl	8015148 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80181b8:	2300      	movs	r3, #0
 80181ba:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80181be:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80181c2:	6823      	ldr	r3, [r4, #0]
 80181c4:	4620      	mov	r0, r4
 80181c6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80181ca:	f7ff fd39 	bl	8017c40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80181ce:	462b      	mov	r3, r5
 80181d0:	4601      	mov	r1, r0
 80181d2:	4620      	mov	r0, r4
 80181d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181d8:	4718      	bx	r3
 80181da:	bd70      	pop	{r4, r5, r6, pc}

080181dc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 80181dc:	4770      	bx	lr

080181de <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80181de:	4770      	bx	lr

080181e0 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80181e0:	2000      	movs	r0, #0
 80181e2:	4770      	bx	lr

080181e4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80181e4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80181e8:	1a13      	subs	r3, r2, r0
 80181ea:	4258      	negs	r0, r3
 80181ec:	4158      	adcs	r0, r3
 80181ee:	4770      	bx	lr

080181f0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80181f0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80181f4:	1a9b      	subs	r3, r3, r2
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	bfdc      	itt	le
 80181fa:	6882      	ldrle	r2, [r0, #8]
 80181fc:	189b      	addle	r3, r3, r2
 80181fe:	2b01      	cmp	r3, #1
 8018200:	bfcc      	ite	gt
 8018202:	2000      	movgt	r0, #0
 8018204:	2001      	movle	r0, #1
 8018206:	4770      	bx	lr

08018208 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018208:	6902      	ldr	r2, [r0, #16]
 801820a:	6840      	ldr	r0, [r0, #4]
 801820c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8018210:	4770      	bx	lr

08018212 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018212:	6803      	ldr	r3, [r0, #0]
 8018214:	691b      	ldr	r3, [r3, #16]
 8018216:	4718      	bx	r3

08018218 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018218:	4770      	bx	lr

0801821a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801821a:	4770      	bx	lr

0801821c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801821c:	b570      	push	{r4, r5, r6, lr}
 801821e:	2301      	movs	r3, #1
 8018220:	7203      	strb	r3, [r0, #8]
 8018222:	4604      	mov	r4, r0
 8018224:	6840      	ldr	r0, [r0, #4]
 8018226:	6803      	ldr	r3, [r0, #0]
 8018228:	699b      	ldr	r3, [r3, #24]
 801822a:	4798      	blx	r3
 801822c:	6803      	ldr	r3, [r0, #0]
 801822e:	2b08      	cmp	r3, #8
 8018230:	4605      	mov	r5, r0
 8018232:	d01e      	beq.n	8018272 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8018234:	d80b      	bhi.n	801824e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018236:	2b02      	cmp	r3, #2
 8018238:	d027      	beq.n	801828a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801823a:	2b04      	cmp	r3, #4
 801823c:	d011      	beq.n	8018262 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801823e:	2b01      	cmp	r3, #1
 8018240:	d028      	beq.n	8018294 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018242:	4b17      	ldr	r3, [pc, #92]	; (80182a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8018244:	4a17      	ldr	r2, [pc, #92]	; (80182a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8018246:	4818      	ldr	r0, [pc, #96]	; (80182a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8018248:	218c      	movs	r1, #140	; 0x8c
 801824a:	f011 f8cd 	bl	80293e8 <__assert_func>
 801824e:	2b40      	cmp	r3, #64	; 0x40
 8018250:	d020      	beq.n	8018294 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018252:	d801      	bhi.n	8018258 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018254:	2b20      	cmp	r3, #32
 8018256:	e7f3      	b.n	8018240 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018258:	2b80      	cmp	r3, #128	; 0x80
 801825a:	d01b      	beq.n	8018294 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801825c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018260:	e7ee      	b.n	8018240 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018262:	6823      	ldr	r3, [r4, #0]
 8018264:	7f01      	ldrb	r1, [r0, #28]
 8018266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018268:	4620      	mov	r0, r4
 801826a:	4798      	blx	r3
 801826c:	6823      	ldr	r3, [r4, #0]
 801826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018270:	e006      	b.n	8018280 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018272:	6823      	ldr	r3, [r4, #0]
 8018274:	7f01      	ldrb	r1, [r0, #28]
 8018276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018278:	4620      	mov	r0, r4
 801827a:	4798      	blx	r3
 801827c:	6823      	ldr	r3, [r4, #0]
 801827e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018280:	4629      	mov	r1, r5
 8018282:	4620      	mov	r0, r4
 8018284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018288:	4718      	bx	r3
 801828a:	6823      	ldr	r3, [r4, #0]
 801828c:	4620      	mov	r0, r4
 801828e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018290:	4798      	blx	r3
 8018292:	e7f3      	b.n	801827c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8018294:	6823      	ldr	r3, [r4, #0]
 8018296:	4620      	mov	r0, r4
 8018298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801829a:	4798      	blx	r3
 801829c:	e7e6      	b.n	801826c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801829e:	bf00      	nop
 80182a0:	0802f595 	.word	0x0802f595
 80182a4:	0802f6a4 	.word	0x0802f6a4
 80182a8:	0802f5ba 	.word	0x0802f5ba

080182ac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80182ac:	b570      	push	{r4, r5, r6, lr}
 80182ae:	4604      	mov	r4, r0
 80182b0:	460e      	mov	r6, r1
 80182b2:	6860      	ldr	r0, [r4, #4]
 80182b4:	6803      	ldr	r3, [r0, #0]
 80182b6:	685b      	ldr	r3, [r3, #4]
 80182b8:	4798      	blx	r3
 80182ba:	2800      	cmp	r0, #0
 80182bc:	d1f9      	bne.n	80182b2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80182be:	4d0d      	ldr	r5, [pc, #52]	; (80182f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80182c0:	6828      	ldr	r0, [r5, #0]
 80182c2:	6803      	ldr	r3, [r0, #0]
 80182c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80182c6:	4798      	blx	r3
 80182c8:	f7fd f9d6 	bl	8015678 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80182cc:	6828      	ldr	r0, [r5, #0]
 80182ce:	2101      	movs	r1, #1
 80182d0:	f7ff ff84 	bl	80181dc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 80182d4:	6860      	ldr	r0, [r4, #4]
 80182d6:	6803      	ldr	r3, [r0, #0]
 80182d8:	4631      	mov	r1, r6
 80182da:	689b      	ldr	r3, [r3, #8]
 80182dc:	4798      	blx	r3
 80182de:	6823      	ldr	r3, [r4, #0]
 80182e0:	4620      	mov	r0, r4
 80182e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182e4:	4798      	blx	r3
 80182e6:	6828      	ldr	r0, [r5, #0]
 80182e8:	6803      	ldr	r3, [r0, #0]
 80182ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80182f0:	4718      	bx	r3
 80182f2:	bf00      	nop
 80182f4:	2000b734 	.word	0x2000b734

080182f8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80182f8:	b508      	push	{r3, lr}
 80182fa:	f7fd f9a3 	bl	8015644 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80182fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018302:	f7fd b9ad 	b.w	8015660 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018306 <_ZN8touchgfx13DMA_Interface5startEv>:
 8018306:	b510      	push	{r4, lr}
 8018308:	4604      	mov	r4, r0
 801830a:	6840      	ldr	r0, [r0, #4]
 801830c:	6803      	ldr	r3, [r0, #0]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	4798      	blx	r3
 8018312:	b948      	cbnz	r0, 8018328 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018314:	7a63      	ldrb	r3, [r4, #9]
 8018316:	b13b      	cbz	r3, 8018328 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018318:	7a23      	ldrb	r3, [r4, #8]
 801831a:	b92b      	cbnz	r3, 8018328 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801831c:	6823      	ldr	r3, [r4, #0]
 801831e:	4620      	mov	r0, r4
 8018320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018326:	4718      	bx	r3
 8018328:	bd10      	pop	{r4, pc}
	...

0801832c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801832c:	b510      	push	{r4, lr}
 801832e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8018332:	1b12      	subs	r2, r2, r4
 8018334:	2a00      	cmp	r2, #0
 8018336:	bfdc      	itt	le
 8018338:	6883      	ldrle	r3, [r0, #8]
 801833a:	18d2      	addle	r2, r2, r3
 801833c:	2a01      	cmp	r2, #1
 801833e:	dd18      	ble.n	8018372 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8018340:	6843      	ldr	r3, [r0, #4]
 8018342:	f101 021c 	add.w	r2, r1, #28
 8018346:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801834a:	f851 4b04 	ldr.w	r4, [r1], #4
 801834e:	f843 4b04 	str.w	r4, [r3], #4
 8018352:	4291      	cmp	r1, r2
 8018354:	d1f9      	bne.n	801834a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8018356:	880a      	ldrh	r2, [r1, #0]
 8018358:	801a      	strh	r2, [r3, #0]
 801835a:	788a      	ldrb	r2, [r1, #2]
 801835c:	709a      	strb	r2, [r3, #2]
 801835e:	68c3      	ldr	r3, [r0, #12]
 8018360:	6882      	ldr	r2, [r0, #8]
 8018362:	f3bf 8f5b 	dmb	ish
 8018366:	3301      	adds	r3, #1
 8018368:	429a      	cmp	r2, r3
 801836a:	bfd8      	it	le
 801836c:	1a9b      	suble	r3, r3, r2
 801836e:	60c3      	str	r3, [r0, #12]
 8018370:	bd10      	pop	{r4, pc}
 8018372:	4b03      	ldr	r3, [pc, #12]	; (8018380 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8018374:	4a03      	ldr	r2, [pc, #12]	; (8018384 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8018376:	4804      	ldr	r0, [pc, #16]	; (8018388 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8018378:	2139      	movs	r1, #57	; 0x39
 801837a:	f011 f835 	bl	80293e8 <__assert_func>
 801837e:	bf00      	nop
 8018380:	0802f5e0 	.word	0x0802f5e0
 8018384:	0802f6d4 	.word	0x0802f6d4
 8018388:	0802f5ba 	.word	0x0802f5ba

0801838c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801838c:	b510      	push	{r4, lr}
 801838e:	6803      	ldr	r3, [r0, #0]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	4604      	mov	r4, r0
 8018394:	4798      	blx	r3
 8018396:	b128      	cbz	r0, 80183a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8018398:	4b07      	ldr	r3, [pc, #28]	; (80183b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801839a:	4a08      	ldr	r2, [pc, #32]	; (80183bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801839c:	4808      	ldr	r0, [pc, #32]	; (80183c0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801839e:	213f      	movs	r1, #63	; 0x3f
 80183a0:	f011 f822 	bl	80293e8 <__assert_func>
 80183a4:	6923      	ldr	r3, [r4, #16]
 80183a6:	68a2      	ldr	r2, [r4, #8]
 80183a8:	f3bf 8f5b 	dmb	ish
 80183ac:	3301      	adds	r3, #1
 80183ae:	429a      	cmp	r2, r3
 80183b0:	bfd8      	it	le
 80183b2:	1a9b      	suble	r3, r3, r2
 80183b4:	6123      	str	r3, [r4, #16]
 80183b6:	bd10      	pop	{r4, pc}
 80183b8:	0802f603 	.word	0x0802f603
 80183bc:	0802f722 	.word	0x0802f722
 80183c0:	0802f5ba 	.word	0x0802f5ba

080183c4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80183c4:	b570      	push	{r4, r5, r6, lr}
 80183c6:	4604      	mov	r4, r0
 80183c8:	6840      	ldr	r0, [r0, #4]
 80183ca:	6803      	ldr	r3, [r0, #0]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	4798      	blx	r3
 80183d0:	4605      	mov	r5, r0
 80183d2:	b930      	cbnz	r0, 80183e2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80183d4:	7a23      	ldrb	r3, [r4, #8]
 80183d6:	b123      	cbz	r3, 80183e2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80183d8:	6860      	ldr	r0, [r4, #4]
 80183da:	6803      	ldr	r3, [r0, #0]
 80183dc:	695b      	ldr	r3, [r3, #20]
 80183de:	4798      	blx	r3
 80183e0:	7225      	strb	r5, [r4, #8]
 80183e2:	6860      	ldr	r0, [r4, #4]
 80183e4:	6803      	ldr	r3, [r0, #0]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	4798      	blx	r3
 80183ea:	b928      	cbnz	r0, 80183f8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80183ec:	6823      	ldr	r3, [r4, #0]
 80183ee:	4620      	mov	r0, r4
 80183f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183f6:	4718      	bx	r3
 80183f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183fc:	f7fd b948 	b.w	8015690 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018400 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018400:	b510      	push	{r4, lr}
 8018402:	4c04      	ldr	r4, [pc, #16]	; (8018414 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018404:	6082      	str	r2, [r0, #8]
 8018406:	2200      	movs	r2, #0
 8018408:	e9c0 4100 	strd	r4, r1, [r0]
 801840c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018410:	bd10      	pop	{r4, pc}
 8018412:	bf00      	nop
 8018414:	0802f688 	.word	0x0802f688

08018418 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018418:	6840      	ldr	r0, [r0, #4]
 801841a:	6803      	ldr	r3, [r0, #0]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	4718      	bx	r3

08018420 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8018420:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8018424:	4770      	bx	lr

08018426 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8018426:	b510      	push	{r4, lr}
 8018428:	4604      	mov	r4, r0
 801842a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801842c:	b150      	cbz	r0, 8018444 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801842e:	6803      	ldr	r3, [r0, #0]
 8018430:	68db      	ldr	r3, [r3, #12]
 8018432:	4798      	blx	r3
 8018434:	b130      	cbz	r0, 8018444 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8018436:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018438:	6803      	ldr	r3, [r0, #0]
 801843a:	4621      	mov	r1, r4
 801843c:	689b      	ldr	r3, [r3, #8]
 801843e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018442:	4718      	bx	r3
 8018444:	bd10      	pop	{r4, pc}

08018446 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8018446:	b570      	push	{r4, r5, r6, lr}
 8018448:	790b      	ldrb	r3, [r1, #4]
 801844a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801844e:	2b00      	cmp	r3, #0
 8018450:	bf0c      	ite	eq
 8018452:	2301      	moveq	r3, #1
 8018454:	2300      	movne	r3, #0
 8018456:	4604      	mov	r4, r0
 8018458:	460e      	mov	r6, r1
 801845a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801845e:	d109      	bne.n	8018474 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8018460:	b14d      	cbz	r5, 8018476 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8018462:	7933      	ldrb	r3, [r6, #4]
 8018464:	2b01      	cmp	r3, #1
 8018466:	d10c      	bne.n	8018482 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8018468:	6823      	ldr	r3, [r4, #0]
 801846a:	4620      	mov	r0, r4
 801846c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801846e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018472:	4718      	bx	r3
 8018474:	b12d      	cbz	r5, 8018482 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8018476:	6823      	ldr	r3, [r4, #0]
 8018478:	4620      	mov	r0, r4
 801847a:	695b      	ldr	r3, [r3, #20]
 801847c:	4798      	blx	r3
 801847e:	2d00      	cmp	r5, #0
 8018480:	d1ef      	bne.n	8018462 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8018482:	bd70      	pop	{r4, r5, r6, pc}

08018484 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8018484:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8018488:	b133      	cbz	r3, 8018498 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801848a:	790b      	ldrb	r3, [r1, #4]
 801848c:	2b01      	cmp	r3, #1
 801848e:	bf01      	itttt	eq
 8018490:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8018492:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8018494:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8018496:	8603      	strheq	r3, [r0, #48]	; 0x30
 8018498:	f7ff bfd5 	b.w	8018446 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801849c <_ZN8touchgfx12ToggleButton10forceStateEb>:
 801849c:	b570      	push	{r4, r5, r6, lr}
 801849e:	4604      	mov	r4, r0
 80184a0:	f100 0534 	add.w	r5, r0, #52	; 0x34
 80184a4:	b169      	cbz	r1, 80184c2 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 80184a6:	302e      	adds	r0, #46	; 0x2e
 80184a8:	f7fc fb4e 	bl	8014b48 <_ZNK8touchgfx6Bitmap5getIdEv>
 80184ac:	4606      	mov	r6, r0
 80184ae:	4628      	mov	r0, r5
 80184b0:	f7fc fb4a 	bl	8014b48 <_ZNK8touchgfx6Bitmap5getIdEv>
 80184b4:	4286      	cmp	r6, r0
 80184b6:	d003      	beq.n	80184c0 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 80184b8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80184ba:	8623      	strh	r3, [r4, #48]	; 0x30
 80184bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80184be:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80184c0:	bd70      	pop	{r4, r5, r6, pc}
 80184c2:	3030      	adds	r0, #48	; 0x30
 80184c4:	f7fc fb40 	bl	8014b48 <_ZNK8touchgfx6Bitmap5getIdEv>
 80184c8:	4606      	mov	r6, r0
 80184ca:	4628      	mov	r0, r5
 80184cc:	f7fc fb3c 	bl	8014b48 <_ZNK8touchgfx6Bitmap5getIdEv>
 80184d0:	4286      	cmp	r6, r0
 80184d2:	bf1f      	itttt	ne
 80184d4:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 80184d6:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 80184d8:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 80184da:	8623      	strhne	r3, [r4, #48]	; 0x30
 80184dc:	e7f0      	b.n	80184c0 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

080184de <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80184de:	2200      	movs	r2, #0
 80184e0:	8002      	strh	r2, [r0, #0]
 80184e2:	8042      	strh	r2, [r0, #2]
 80184e4:	8082      	strh	r2, [r0, #4]
 80184e6:	80c2      	strh	r2, [r0, #6]
 80184e8:	4770      	bx	lr

080184ea <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80184ea:	b570      	push	{r4, r5, r6, lr}
 80184ec:	6803      	ldr	r3, [r0, #0]
 80184ee:	4604      	mov	r4, r0
 80184f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184f2:	4615      	mov	r5, r2
 80184f4:	4798      	blx	r3
 80184f6:	6823      	ldr	r3, [r4, #0]
 80184f8:	4629      	mov	r1, r5
 80184fa:	4620      	mov	r0, r4
 80184fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018502:	4718      	bx	r3

08018504 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018504:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018506:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801850c:	4299      	cmp	r1, r3
 801850e:	d029      	beq.n	8018564 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8018510:	4b15      	ldr	r3, [pc, #84]	; (8018568 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	b92b      	cbnz	r3, 8018522 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8018516:	4b15      	ldr	r3, [pc, #84]	; (801856c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8018518:	4a15      	ldr	r2, [pc, #84]	; (8018570 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801851a:	21b1      	movs	r1, #177	; 0xb1
 801851c:	4815      	ldr	r0, [pc, #84]	; (8018574 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801851e:	f010 ff63 	bl	80293e8 <__assert_func>
 8018522:	4a15      	ldr	r2, [pc, #84]	; (8018578 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8018524:	8812      	ldrh	r2, [r2, #0]
 8018526:	428a      	cmp	r2, r1
 8018528:	d803      	bhi.n	8018532 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801852a:	4b14      	ldr	r3, [pc, #80]	; (801857c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801852c:	4a10      	ldr	r2, [pc, #64]	; (8018570 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801852e:	21b2      	movs	r1, #178	; 0xb2
 8018530:	e7f4      	b.n	801851c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8018532:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018536:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801853a:	4b11      	ldr	r3, [pc, #68]	; (8018580 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801853c:	7854      	ldrb	r4, [r2, #1]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018544:	682b      	ldr	r3, [r5, #0]
 8018546:	69de      	ldr	r6, [r3, #28]
 8018548:	4b0e      	ldr	r3, [pc, #56]	; (8018584 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801854a:	6818      	ldr	r0, [r3, #0]
 801854c:	f7fc f864 	bl	8014618 <_ZNK8touchgfx5Texts7getTextEt>
 8018550:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018554:	2300      	movs	r3, #0
 8018556:	4602      	mov	r2, r0
 8018558:	9300      	str	r3, [sp, #0]
 801855a:	4621      	mov	r1, r4
 801855c:	4628      	mov	r0, r5
 801855e:	47b0      	blx	r6
 8018560:	b002      	add	sp, #8
 8018562:	bd70      	pop	{r4, r5, r6, pc}
 8018564:	2000      	movs	r0, #0
 8018566:	e7fb      	b.n	8018560 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8018568:	2000b784 	.word	0x2000b784
 801856c:	0802ec3f 	.word	0x0802ec3f
 8018570:	0802f8a8 	.word	0x0802f8a8
 8018574:	0802ec81 	.word	0x0802ec81
 8018578:	2000b788 	.word	0x2000b788
 801857c:	0802ecaa 	.word	0x0802ecaa
 8018580:	2000b78c 	.word	0x2000b78c
 8018584:	2000b790 	.word	0x2000b790

08018588 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8018588:	b570      	push	{r4, r5, r6, lr}
 801858a:	6803      	ldr	r3, [r0, #0]
 801858c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801858e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8018590:	4b11      	ldr	r3, [pc, #68]	; (80185d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	4604      	mov	r4, r0
 8018596:	b28d      	uxth	r5, r1
 8018598:	b92b      	cbnz	r3, 80185a6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801859a:	4b10      	ldr	r3, [pc, #64]	; (80185dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801859c:	4a10      	ldr	r2, [pc, #64]	; (80185e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801859e:	21b1      	movs	r1, #177	; 0xb1
 80185a0:	4810      	ldr	r0, [pc, #64]	; (80185e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80185a2:	f010 ff21 	bl	80293e8 <__assert_func>
 80185a6:	4910      	ldr	r1, [pc, #64]	; (80185e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80185a8:	8809      	ldrh	r1, [r1, #0]
 80185aa:	4291      	cmp	r1, r2
 80185ac:	d803      	bhi.n	80185b6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80185ae:	4b0f      	ldr	r3, [pc, #60]	; (80185ec <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80185b0:	4a0b      	ldr	r2, [pc, #44]	; (80185e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80185b2:	21b2      	movs	r1, #178	; 0xb2
 80185b4:	e7f4      	b.n	80185a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80185b6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80185ba:	4b0d      	ldr	r3, [pc, #52]	; (80185f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80185c2:	6803      	ldr	r3, [r0, #0]
 80185c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185c6:	4798      	blx	r3
 80185c8:	1a29      	subs	r1, r5, r0
 80185ca:	4633      	mov	r3, r6
 80185cc:	4620      	mov	r0, r4
 80185ce:	b209      	sxth	r1, r1
 80185d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185d4:	4718      	bx	r3
 80185d6:	bf00      	nop
 80185d8:	2000b784 	.word	0x2000b784
 80185dc:	0802ec3f 	.word	0x0802ec3f
 80185e0:	0802f8a8 	.word	0x0802f8a8
 80185e4:	0802ec81 	.word	0x0802ec81
 80185e8:	2000b788 	.word	0x2000b788
 80185ec:	0802ecaa 	.word	0x0802ecaa
 80185f0:	2000b78c 	.word	0x2000b78c

080185f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80185f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185f8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80185fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185fe:	4293      	cmp	r3, r2
 8018600:	b08c      	sub	sp, #48	; 0x30
 8018602:	4604      	mov	r4, r0
 8018604:	4688      	mov	r8, r1
 8018606:	d05f      	beq.n	80186c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8018608:	4e31      	ldr	r6, [pc, #196]	; (80186d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801860a:	6832      	ldr	r2, [r6, #0]
 801860c:	b92a      	cbnz	r2, 801861a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801860e:	4b31      	ldr	r3, [pc, #196]	; (80186d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8018610:	4a31      	ldr	r2, [pc, #196]	; (80186d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018612:	21b1      	movs	r1, #177	; 0xb1
 8018614:	4831      	ldr	r0, [pc, #196]	; (80186dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8018616:	f010 fee7 	bl	80293e8 <__assert_func>
 801861a:	4d31      	ldr	r5, [pc, #196]	; (80186e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801861c:	8829      	ldrh	r1, [r5, #0]
 801861e:	4299      	cmp	r1, r3
 8018620:	d803      	bhi.n	801862a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8018622:	4b30      	ldr	r3, [pc, #192]	; (80186e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8018624:	4a2c      	ldr	r2, [pc, #176]	; (80186d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018626:	21b2      	movs	r1, #178	; 0xb2
 8018628:	e7f4      	b.n	8018614 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801862a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801862e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018632:	4b2d      	ldr	r3, [pc, #180]	; (80186e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801863a:	2a00      	cmp	r2, #0
 801863c:	d044      	beq.n	80186c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801863e:	784b      	ldrb	r3, [r1, #1]
 8018640:	9207      	str	r2, [sp, #28]
 8018642:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8018646:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801864a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801864e:	4b27      	ldr	r3, [pc, #156]	; (80186ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8018650:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801865a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801865e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8018662:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8018666:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801866a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801866c:	9009      	str	r0, [sp, #36]	; 0x24
 801866e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018672:	f88d 9020 	strb.w	r9, [sp, #32]
 8018676:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801867a:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801867e:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8018682:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018686:	b10a      	cbz	r2, 801868c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8018688:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801868a:	b907      	cbnz	r7, 801868e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801868c:	689f      	ldr	r7, [r3, #8]
 801868e:	f10d 0914 	add.w	r9, sp, #20
 8018692:	4621      	mov	r1, r4
 8018694:	4648      	mov	r0, r9
 8018696:	f002 ff94 	bl	801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801869a:	6833      	ldr	r3, [r6, #0]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d0b6      	beq.n	801860e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80186a0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80186a2:	882b      	ldrh	r3, [r5, #0]
 80186a4:	428b      	cmp	r3, r1
 80186a6:	d9bc      	bls.n	8018622 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80186a8:	4b11      	ldr	r3, [pc, #68]	; (80186f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80186aa:	6818      	ldr	r0, [r3, #0]
 80186ac:	f7fb ffb4 	bl	8014618 <_ZNK8touchgfx5Texts7getTextEt>
 80186b0:	2300      	movs	r3, #0
 80186b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80186b6:	ab07      	add	r3, sp, #28
 80186b8:	9001      	str	r0, [sp, #4]
 80186ba:	9300      	str	r3, [sp, #0]
 80186bc:	e899 0006 	ldmia.w	r9, {r1, r2}
 80186c0:	4643      	mov	r3, r8
 80186c2:	4638      	mov	r0, r7
 80186c4:	f7fb ff39 	bl	801453a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80186c8:	b00c      	add	sp, #48	; 0x30
 80186ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ce:	bf00      	nop
 80186d0:	2000b784 	.word	0x2000b784
 80186d4:	0802ec3f 	.word	0x0802ec3f
 80186d8:	0802f8a8 	.word	0x0802f8a8
 80186dc:	0802ec81 	.word	0x0802ec81
 80186e0:	2000b788 	.word	0x2000b788
 80186e4:	0802ecaa 	.word	0x0802ecaa
 80186e8:	2000b78c 	.word	0x2000b78c
 80186ec:	2000b734 	.word	0x2000b734
 80186f0:	2000b790 	.word	0x2000b790

080186f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80186f4:	b40e      	push	{r1, r2, r3}
 80186f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186fa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80186fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018700:	4293      	cmp	r3, r2
 8018702:	b09b      	sub	sp, #108	; 0x6c
 8018704:	4604      	mov	r4, r0
 8018706:	d061      	beq.n	80187cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8018708:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80187e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801870c:	aa24      	add	r2, sp, #144	; 0x90
 801870e:	9203      	str	r2, [sp, #12]
 8018710:	f8da 2000 	ldr.w	r2, [sl]
 8018714:	b92a      	cbnz	r2, 8018722 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8018716:	4b2e      	ldr	r3, [pc, #184]	; (80187d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8018718:	4a2e      	ldr	r2, [pc, #184]	; (80187d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801871a:	21b1      	movs	r1, #177	; 0xb1
 801871c:	482e      	ldr	r0, [pc, #184]	; (80187d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 801871e:	f010 fe63 	bl	80293e8 <__assert_func>
 8018722:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80187e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8018726:	f8b8 1000 	ldrh.w	r1, [r8]
 801872a:	4299      	cmp	r1, r3
 801872c:	d803      	bhi.n	8018736 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801872e:	4b2b      	ldr	r3, [pc, #172]	; (80187dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8018730:	4a28      	ldr	r2, [pc, #160]	; (80187d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8018732:	21b2      	movs	r1, #178	; 0xb2
 8018734:	e7f2      	b.n	801871c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8018736:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80187e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 801873a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801873e:	f8d9 3000 	ldr.w	r3, [r9]
 8018742:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	4638      	mov	r0, r7
 801874a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801874c:	4798      	blx	r3
 801874e:	4606      	mov	r6, r0
 8018750:	b205      	sxth	r5, r0
 8018752:	a804      	add	r0, sp, #16
 8018754:	f003 fb49 	bl	801bdea <_ZN8touchgfx12TextProviderC1Ev>
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	4638      	mov	r0, r7
 801875c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801875e:	4798      	blx	r3
 8018760:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018762:	9a03      	ldr	r2, [sp, #12]
 8018764:	4603      	mov	r3, r0
 8018766:	a804      	add	r0, sp, #16
 8018768:	f003 fb84 	bl	801be74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801876c:	f8da 3000 	ldr.w	r3, [sl]
 8018770:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8018774:	2b00      	cmp	r3, #0
 8018776:	d0ce      	beq.n	8018716 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8018778:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801877a:	f8b8 0000 	ldrh.w	r0, [r8]
 801877e:	4290      	cmp	r0, r2
 8018780:	d9d5      	bls.n	801872e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8018782:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8018786:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801878a:	787a      	ldrb	r2, [r7, #1]
 801878c:	f8d9 3000 	ldr.w	r3, [r9]
 8018790:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8018794:	9700      	str	r7, [sp, #0]
 8018796:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801879a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801879e:	a804      	add	r0, sp, #16
 80187a0:	f001 fa7a 	bl	8019c98 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80187a4:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80187a8:	18a9      	adds	r1, r5, r2
 80187aa:	2900      	cmp	r1, #0
 80187ac:	b203      	sxth	r3, r0
 80187ae:	dd0b      	ble.n	80187c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 80187b0:	3b01      	subs	r3, #1
 80187b2:	fb13 f302 	smulbb	r3, r3, r2
 80187b6:	fb16 3300 	smlabb	r3, r6, r0, r3
 80187ba:	b21d      	sxth	r5, r3
 80187bc:	4628      	mov	r0, r5
 80187be:	b01b      	add	sp, #108	; 0x6c
 80187c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187c4:	b003      	add	sp, #12
 80187c6:	4770      	bx	lr
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	dcf7      	bgt.n	80187bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80187cc:	2500      	movs	r5, #0
 80187ce:	e7f5      	b.n	80187bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80187d0:	0802ec3f 	.word	0x0802ec3f
 80187d4:	0802f8a8 	.word	0x0802f8a8
 80187d8:	0802ec81 	.word	0x0802ec81
 80187dc:	0802ecaa 	.word	0x0802ecaa
 80187e0:	2000b784 	.word	0x2000b784
 80187e4:	2000b788 	.word	0x2000b788
 80187e8:	2000b78c 	.word	0x2000b78c

080187ec <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80187ec:	b570      	push	{r4, r5, r6, lr}
 80187ee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80187f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187f4:	4299      	cmp	r1, r3
 80187f6:	4604      	mov	r4, r0
 80187f8:	d01e      	beq.n	8018838 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80187fa:	6803      	ldr	r3, [r0, #0]
 80187fc:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80187fe:	4b0f      	ldr	r3, [pc, #60]	; (801883c <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	b92b      	cbnz	r3, 8018810 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8018804:	4b0e      	ldr	r3, [pc, #56]	; (8018840 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8018806:	4a0f      	ldr	r2, [pc, #60]	; (8018844 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8018808:	21b1      	movs	r1, #177	; 0xb1
 801880a:	480f      	ldr	r0, [pc, #60]	; (8018848 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801880c:	f010 fdec 	bl	80293e8 <__assert_func>
 8018810:	4b0e      	ldr	r3, [pc, #56]	; (801884c <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8018812:	881b      	ldrh	r3, [r3, #0]
 8018814:	428b      	cmp	r3, r1
 8018816:	d803      	bhi.n	8018820 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8018818:	4b0d      	ldr	r3, [pc, #52]	; (8018850 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801881a:	4a0a      	ldr	r2, [pc, #40]	; (8018844 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801881c:	21b2      	movs	r1, #178	; 0xb2
 801881e:	e7f4      	b.n	801880a <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8018820:	4b0c      	ldr	r3, [pc, #48]	; (8018854 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8018822:	6818      	ldr	r0, [r3, #0]
 8018824:	f7fb fef8 	bl	8014618 <_ZNK8touchgfx5Texts7getTextEt>
 8018828:	2300      	movs	r3, #0
 801882a:	4601      	mov	r1, r0
 801882c:	46ac      	mov	ip, r5
 801882e:	4620      	mov	r0, r4
 8018830:	461a      	mov	r2, r3
 8018832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018836:	4760      	bx	ip
 8018838:	2000      	movs	r0, #0
 801883a:	bd70      	pop	{r4, r5, r6, pc}
 801883c:	2000b784 	.word	0x2000b784
 8018840:	0802ec3f 	.word	0x0802ec3f
 8018844:	0802f8a8 	.word	0x0802f8a8
 8018848:	0802ec81 	.word	0x0802ec81
 801884c:	2000b788 	.word	0x2000b788
 8018850:	0802ecaa 	.word	0x0802ecaa
 8018854:	2000b790 	.word	0x2000b790

08018858 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018858:	b538      	push	{r3, r4, r5, lr}
 801885a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801885c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018860:	429a      	cmp	r2, r3
 8018862:	4604      	mov	r4, r0
 8018864:	d014      	beq.n	8018890 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018866:	6803      	ldr	r3, [r0, #0]
 8018868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801886a:	4798      	blx	r3
 801886c:	6823      	ldr	r3, [r4, #0]
 801886e:	4605      	mov	r5, r0
 8018870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018872:	4620      	mov	r0, r4
 8018874:	4798      	blx	r3
 8018876:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801887a:	b22d      	sxth	r5, r5
 801887c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018880:	4601      	mov	r1, r0
 8018882:	bf06      	itte	eq
 8018884:	4602      	moveq	r2, r0
 8018886:	4629      	moveq	r1, r5
 8018888:	462a      	movne	r2, r5
 801888a:	4620      	mov	r0, r4
 801888c:	f7fa fd06 	bl	801329c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018890:	bd38      	pop	{r3, r4, r5, pc}

08018892 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8018892:	888a      	ldrh	r2, [r1, #4]
 8018894:	8582      	strh	r2, [r0, #44]	; 0x2c
 8018896:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801889a:	b922      	cbnz	r2, 80188a6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801889c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80188a0:	b90b      	cbnz	r3, 80188a6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 80188a2:	f7ff bfd9 	b.w	8018858 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80188a6:	4770      	bx	lr

080188a8 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80188a8:	2300      	movs	r3, #0
 80188aa:	8083      	strh	r3, [r0, #4]
 80188ac:	80c3      	strh	r3, [r0, #6]
 80188ae:	8003      	strh	r3, [r0, #0]
 80188b0:	8043      	strh	r3, [r0, #2]
 80188b2:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80188b6:	2bff      	cmp	r3, #255	; 0xff
 80188b8:	bf01      	itttt	eq
 80188ba:	890b      	ldrheq	r3, [r1, #8]
 80188bc:	8083      	strheq	r3, [r0, #4]
 80188be:	894b      	ldrheq	r3, [r1, #10]
 80188c0:	80c3      	strheq	r3, [r0, #6]
 80188c2:	4770      	bx	lr

080188c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80188c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188c6:	4604      	mov	r4, r0
 80188c8:	6808      	ldr	r0, [r1, #0]
 80188ca:	6849      	ldr	r1, [r1, #4]
 80188cc:	466b      	mov	r3, sp
 80188ce:	c303      	stmia	r3!, {r0, r1}
 80188d0:	6823      	ldr	r3, [r4, #0]
 80188d2:	4669      	mov	r1, sp
 80188d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188d6:	4620      	mov	r0, r4
 80188d8:	4798      	blx	r3
 80188da:	4b08      	ldr	r3, [pc, #32]	; (80188fc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80188e2:	b10a      	cbz	r2, 80188e8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80188e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80188e6:	b900      	cbnz	r0, 80188ea <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80188e8:	6898      	ldr	r0, [r3, #8]
 80188ea:	6803      	ldr	r3, [r0, #0]
 80188ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80188ee:	699d      	ldr	r5, [r3, #24]
 80188f0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80188f4:	4669      	mov	r1, sp
 80188f6:	47a8      	blx	r5
 80188f8:	b003      	add	sp, #12
 80188fa:	bd30      	pop	{r4, r5, pc}
 80188fc:	2000b734 	.word	0x2000b734

08018900 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8018900:	b570      	push	{r4, r5, r6, lr}
 8018902:	880b      	ldrh	r3, [r1, #0]
 8018904:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018906:	4605      	mov	r5, r0
 8018908:	8813      	ldrh	r3, [r2, #0]
 801890a:	f825 3f30 	strh.w	r3, [r5, #48]!
 801890e:	4604      	mov	r4, r0
 8018910:	4628      	mov	r0, r5
 8018912:	f004 fe57 	bl	801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018916:	4606      	mov	r6, r0
 8018918:	4628      	mov	r0, r5
 801891a:	f004 fe8d 	bl	801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801891e:	6823      	ldr	r3, [r4, #0]
 8018920:	4605      	mov	r5, r0
 8018922:	b231      	sxth	r1, r6
 8018924:	4620      	mov	r0, r4
 8018926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018928:	4798      	blx	r3
 801892a:	6823      	ldr	r3, [r4, #0]
 801892c:	b229      	sxth	r1, r5
 801892e:	4620      	mov	r0, r4
 8018930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018936:	4718      	bx	r3

08018938 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8018938:	b510      	push	{r4, lr}
 801893a:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801893e:	2bff      	cmp	r3, #255	; 0xff
 8018940:	4604      	mov	r4, r0
 8018942:	d006      	beq.n	8018952 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8018944:	2300      	movs	r3, #0
 8018946:	8003      	strh	r3, [r0, #0]
 8018948:	8043      	strh	r3, [r0, #2]
 801894a:	8083      	strh	r3, [r0, #4]
 801894c:	80c3      	strh	r3, [r0, #6]
 801894e:	4620      	mov	r0, r4
 8018950:	bd10      	pop	{r4, pc}
 8018952:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8018956:	b11b      	cbz	r3, 8018960 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8018958:	3130      	adds	r1, #48	; 0x30
 801895a:	f004 fea7 	bl	801d6ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801895e:	e7f6      	b.n	801894e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018960:	312e      	adds	r1, #46	; 0x2e
 8018962:	e7fa      	b.n	801895a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08018964 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8018964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018968:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801896c:	b08a      	sub	sp, #40	; 0x28
 801896e:	4604      	mov	r4, r0
 8018970:	4688      	mov	r8, r1
 8018972:	2b00      	cmp	r3, #0
 8018974:	d044      	beq.n	8018a00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8018976:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018978:	f8ad 3014 	strh.w	r3, [sp, #20]
 801897c:	a805      	add	r0, sp, #20
 801897e:	f004 fe21 	bl	801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018982:	4605      	mov	r5, r0
 8018984:	b206      	sxth	r6, r0
 8018986:	a805      	add	r0, sp, #20
 8018988:	f004 fe56 	bl	801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801898c:	f9b8 2000 	ldrsh.w	r2, [r8]
 8018990:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8018994:	4417      	add	r7, r2
 8018996:	b2bf      	uxth	r7, r7
 8018998:	2300      	movs	r3, #0
 801899a:	fa0f fe87 	sxth.w	lr, r7
 801899e:	459e      	cmp	lr, r3
 80189a0:	fa0f fc80 	sxth.w	ip, r0
 80189a4:	9306      	str	r3, [sp, #24]
 80189a6:	dd2d      	ble.n	8018a04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80189a8:	4296      	cmp	r6, r2
 80189aa:	dd2b      	ble.n	8018a04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80189ac:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80189b0:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80189b4:	4419      	add	r1, r3
 80189b6:	b289      	uxth	r1, r1
 80189b8:	fa0f f881 	sxth.w	r8, r1
 80189bc:	f1b8 0f00 	cmp.w	r8, #0
 80189c0:	dd20      	ble.n	8018a04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80189c2:	459c      	cmp	ip, r3
 80189c4:	dd1e      	ble.n	8018a04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80189c6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80189ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80189ce:	4576      	cmp	r6, lr
 80189d0:	bfa8      	it	ge
 80189d2:	463d      	movge	r5, r7
 80189d4:	45c4      	cmp	ip, r8
 80189d6:	bfa8      	it	ge
 80189d8:	4608      	movge	r0, r1
 80189da:	1aad      	subs	r5, r5, r2
 80189dc:	1ac0      	subs	r0, r0, r3
 80189de:	f8ad 501c 	strh.w	r5, [sp, #28]
 80189e2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80189e6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80189ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80189ee:	4b1f      	ldr	r3, [pc, #124]	; (8018a6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	b953      	cbnz	r3, 8018a0a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 80189f4:	4b1e      	ldr	r3, [pc, #120]	; (8018a70 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 80189f6:	4a1f      	ldr	r2, [pc, #124]	; (8018a74 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80189f8:	481f      	ldr	r0, [pc, #124]	; (8018a78 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 80189fa:	218b      	movs	r1, #139	; 0x8b
 80189fc:	f010 fcf4 	bl	80293e8 <__assert_func>
 8018a00:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018a02:	e7b9      	b.n	8018978 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018a04:	2300      	movs	r3, #0
 8018a06:	9307      	str	r3, [sp, #28]
 8018a08:	e7f1      	b.n	80189ee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8018a0a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a12:	429a      	cmp	r2, r3
 8018a14:	d026      	beq.n	8018a64 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018a16:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	dd22      	ble.n	8018a64 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018a1e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	dd1e      	ble.n	8018a64 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018a26:	2300      	movs	r3, #0
 8018a28:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8018a2c:	6823      	ldr	r3, [r4, #0]
 8018a2e:	a908      	add	r1, sp, #32
 8018a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a32:	4620      	mov	r0, r4
 8018a34:	4798      	blx	r3
 8018a36:	4b11      	ldr	r3, [pc, #68]	; (8018a7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018a3e:	b10a      	cbz	r2, 8018a44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8018a40:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018a42:	b900      	cbnz	r0, 8018a46 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8018a44:	6898      	ldr	r0, [r3, #8]
 8018a46:	6801      	ldr	r1, [r0, #0]
 8018a48:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8018a4c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018a50:	2501      	movs	r5, #1
 8018a52:	9502      	str	r5, [sp, #8]
 8018a54:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8018a58:	9401      	str	r4, [sp, #4]
 8018a5a:	ac06      	add	r4, sp, #24
 8018a5c:	9400      	str	r4, [sp, #0]
 8018a5e:	688c      	ldr	r4, [r1, #8]
 8018a60:	a905      	add	r1, sp, #20
 8018a62:	47a0      	blx	r4
 8018a64:	b00a      	add	sp, #40	; 0x28
 8018a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a6a:	bf00      	nop
 8018a6c:	2000b7bc 	.word	0x2000b7bc
 8018a70:	0802f93c 	.word	0x0802f93c
 8018a74:	0802fa10 	.word	0x0802fa10
 8018a78:	0802f978 	.word	0x0802f978
 8018a7c:	2000b734 	.word	0x2000b734

08018a80 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8018a80:	b570      	push	{r4, r5, r6, lr}
 8018a82:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a88:	4299      	cmp	r1, r3
 8018a8a:	4604      	mov	r4, r0
 8018a8c:	d01e      	beq.n	8018acc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8018a8e:	6803      	ldr	r3, [r0, #0]
 8018a90:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018a92:	4b0f      	ldr	r3, [pc, #60]	; (8018ad0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	b92b      	cbnz	r3, 8018aa4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8018a98:	4b0e      	ldr	r3, [pc, #56]	; (8018ad4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8018a9a:	4a0f      	ldr	r2, [pc, #60]	; (8018ad8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018a9c:	21b1      	movs	r1, #177	; 0xb1
 8018a9e:	480f      	ldr	r0, [pc, #60]	; (8018adc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8018aa0:	f010 fca2 	bl	80293e8 <__assert_func>
 8018aa4:	4b0e      	ldr	r3, [pc, #56]	; (8018ae0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8018aa6:	881b      	ldrh	r3, [r3, #0]
 8018aa8:	428b      	cmp	r3, r1
 8018aaa:	d803      	bhi.n	8018ab4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8018aac:	4b0d      	ldr	r3, [pc, #52]	; (8018ae4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8018aae:	4a0a      	ldr	r2, [pc, #40]	; (8018ad8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018ab0:	21b2      	movs	r1, #178	; 0xb2
 8018ab2:	e7f4      	b.n	8018a9e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8018ab4:	4b0c      	ldr	r3, [pc, #48]	; (8018ae8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8018ab6:	6818      	ldr	r0, [r3, #0]
 8018ab8:	f7fb fdae 	bl	8014618 <_ZNK8touchgfx5Texts7getTextEt>
 8018abc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018abe:	4601      	mov	r1, r0
 8018ac0:	46ac      	mov	ip, r5
 8018ac2:	4620      	mov	r0, r4
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018aca:	4760      	bx	ip
 8018acc:	2000      	movs	r0, #0
 8018ace:	bd70      	pop	{r4, r5, r6, pc}
 8018ad0:	2000b784 	.word	0x2000b784
 8018ad4:	0802ec3f 	.word	0x0802ec3f
 8018ad8:	0802fabc 	.word	0x0802fabc
 8018adc:	0802ec81 	.word	0x0802ec81
 8018ae0:	2000b788 	.word	0x2000b788
 8018ae4:	0802ecaa 	.word	0x0802ecaa
 8018ae8:	2000b790 	.word	0x2000b790

08018aec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8018aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018af0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018af6:	4293      	cmp	r3, r2
 8018af8:	b08c      	sub	sp, #48	; 0x30
 8018afa:	4604      	mov	r4, r0
 8018afc:	460e      	mov	r6, r1
 8018afe:	d05d      	beq.n	8018bbc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018b00:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8018be0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8018b04:	f8d8 2000 	ldr.w	r2, [r8]
 8018b08:	b92a      	cbnz	r2, 8018b16 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8018b0a:	4b2e      	ldr	r3, [pc, #184]	; (8018bc4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8018b0c:	4a2e      	ldr	r2, [pc, #184]	; (8018bc8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018b0e:	21b1      	movs	r1, #177	; 0xb1
 8018b10:	482e      	ldr	r0, [pc, #184]	; (8018bcc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8018b12:	f010 fc69 	bl	80293e8 <__assert_func>
 8018b16:	4f2e      	ldr	r7, [pc, #184]	; (8018bd0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8018b18:	8839      	ldrh	r1, [r7, #0]
 8018b1a:	4299      	cmp	r1, r3
 8018b1c:	d803      	bhi.n	8018b26 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8018b1e:	4b2d      	ldr	r3, [pc, #180]	; (8018bd4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8018b20:	4a29      	ldr	r2, [pc, #164]	; (8018bc8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018b22:	21b2      	movs	r1, #178	; 0xb2
 8018b24:	e7f4      	b.n	8018b10 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8018b26:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018b2a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018b2e:	4b2a      	ldr	r3, [pc, #168]	; (8018bd8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018b36:	2a00      	cmp	r2, #0
 8018b38:	d040      	beq.n	8018bbc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018b3a:	784b      	ldrb	r3, [r1, #1]
 8018b3c:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8018b40:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018b44:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8018b48:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8018b4c:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8018b50:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018b52:	9207      	str	r2, [sp, #28]
 8018b54:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8018b58:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018b5c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018b60:	f88d 9020 	strb.w	r9, [sp, #32]
 8018b64:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8018b68:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8018b6c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8018b70:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018b74:	9009      	str	r0, [sp, #36]	; 0x24
 8018b76:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018b7a:	f7f9 fdd7 	bl	801272c <_ZN8touchgfx3HAL3lcdEv>
 8018b7e:	ad05      	add	r5, sp, #20
 8018b80:	4681      	mov	r9, r0
 8018b82:	4621      	mov	r1, r4
 8018b84:	4628      	mov	r0, r5
 8018b86:	f002 fd1c 	bl	801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d0bb      	beq.n	8018b0a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8018b92:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018b94:	883b      	ldrh	r3, [r7, #0]
 8018b96:	428b      	cmp	r3, r1
 8018b98:	d9c1      	bls.n	8018b1e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8018b9a:	4b10      	ldr	r3, [pc, #64]	; (8018bdc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8018b9c:	6818      	ldr	r0, [r3, #0]
 8018b9e:	f7fb fd3b 	bl	8014618 <_ZNK8touchgfx5Texts7getTextEt>
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	9303      	str	r3, [sp, #12]
 8018ba6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018ba8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8018bac:	ab07      	add	r3, sp, #28
 8018bae:	9300      	str	r3, [sp, #0]
 8018bb0:	e895 0006 	ldmia.w	r5, {r1, r2}
 8018bb4:	4633      	mov	r3, r6
 8018bb6:	4648      	mov	r0, r9
 8018bb8:	f7fb fcbf 	bl	801453a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018bbc:	b00c      	add	sp, #48	; 0x30
 8018bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bc2:	bf00      	nop
 8018bc4:	0802ec3f 	.word	0x0802ec3f
 8018bc8:	0802fabc 	.word	0x0802fabc
 8018bcc:	0802ec81 	.word	0x0802ec81
 8018bd0:	2000b788 	.word	0x2000b788
 8018bd4:	0802ecaa 	.word	0x0802ecaa
 8018bd8:	2000b78c 	.word	0x2000b78c
 8018bdc:	2000b790 	.word	0x2000b790
 8018be0:	2000b784 	.word	0x2000b784

08018be4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8018be4:	b570      	push	{r4, r5, r6, lr}
 8018be6:	880b      	ldrh	r3, [r1, #0]
 8018be8:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018bea:	4604      	mov	r4, r0
 8018bec:	4608      	mov	r0, r1
 8018bee:	460d      	mov	r5, r1
 8018bf0:	f004 fce8 	bl	801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018bf4:	4606      	mov	r6, r0
 8018bf6:	4628      	mov	r0, r5
 8018bf8:	f004 fd1e 	bl	801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018bfc:	6823      	ldr	r3, [r4, #0]
 8018bfe:	4605      	mov	r5, r0
 8018c00:	b231      	sxth	r1, r6
 8018c02:	4620      	mov	r0, r4
 8018c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c06:	4798      	blx	r3
 8018c08:	6823      	ldr	r3, [r4, #0]
 8018c0a:	b229      	sxth	r1, r5
 8018c0c:	4620      	mov	r0, r4
 8018c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c14:	4718      	bx	r3

08018c16 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018c16:	b510      	push	{r4, lr}
 8018c18:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018c1c:	2bff      	cmp	r3, #255	; 0xff
 8018c1e:	4604      	mov	r4, r0
 8018c20:	d006      	beq.n	8018c30 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8018c22:	2300      	movs	r3, #0
 8018c24:	8003      	strh	r3, [r0, #0]
 8018c26:	8043      	strh	r3, [r0, #2]
 8018c28:	8083      	strh	r3, [r0, #4]
 8018c2a:	80c3      	strh	r3, [r0, #6]
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	bd10      	pop	{r4, pc}
 8018c30:	3126      	adds	r1, #38	; 0x26
 8018c32:	f004 fd3b 	bl	801d6ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018c36:	e7f9      	b.n	8018c2c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018c38 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c3c:	4604      	mov	r4, r0
 8018c3e:	b088      	sub	sp, #32
 8018c40:	f854 3b26 	ldr.w	r3, [r4], #38
 8018c44:	2500      	movs	r5, #0
 8018c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c48:	460f      	mov	r7, r1
 8018c4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018c4e:	a904      	add	r1, sp, #16
 8018c50:	4606      	mov	r6, r0
 8018c52:	4798      	blx	r3
 8018c54:	4620      	mov	r0, r4
 8018c56:	f004 fcb5 	bl	801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018c5a:	4680      	mov	r8, r0
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	f004 fceb 	bl	801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018c62:	9506      	str	r5, [sp, #24]
 8018c64:	ad06      	add	r5, sp, #24
 8018c66:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018c6a:	4639      	mov	r1, r7
 8018c6c:	4628      	mov	r0, r5
 8018c6e:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018c72:	f7fe fbf3 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 8018c76:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	dd19      	ble.n	8018cb2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018c7e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	dd15      	ble.n	8018cb2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018c86:	4b0c      	ldr	r3, [pc, #48]	; (8018cb8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018c8e:	b10a      	cbz	r2, 8018c94 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8018c90:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018c92:	b900      	cbnz	r0, 8018c96 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8018c94:	6898      	ldr	r0, [r3, #8]
 8018c96:	6801      	ldr	r1, [r0, #0]
 8018c98:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018c9c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018ca0:	2701      	movs	r7, #1
 8018ca2:	9702      	str	r7, [sp, #8]
 8018ca4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8018ca8:	e9cd 5600 	strd	r5, r6, [sp]
 8018cac:	688d      	ldr	r5, [r1, #8]
 8018cae:	4621      	mov	r1, r4
 8018cb0:	47a8      	blx	r5
 8018cb2:	b008      	add	sp, #32
 8018cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cb8:	2000b734 	.word	0x2000b734

08018cbc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc0:	4696      	mov	lr, r2
 8018cc2:	4605      	mov	r5, r0
 8018cc4:	4614      	mov	r4, r2
 8018cc6:	460e      	mov	r6, r1
 8018cc8:	461f      	mov	r7, r3
 8018cca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018cce:	b097      	sub	sp, #92	; 0x5c
 8018cd0:	f10d 0c1c 	add.w	ip, sp, #28
 8018cd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018cd8:	f8de 3000 	ldr.w	r3, [lr]
 8018cdc:	f8cc 3000 	str.w	r3, [ip]
 8018ce0:	f104 0e14 	add.w	lr, r4, #20
 8018ce4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018ce8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018cec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018cf0:	f8de 3000 	ldr.w	r3, [lr]
 8018cf4:	f8cc 3000 	str.w	r3, [ip]
 8018cf8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018cfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018d00:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018d04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d08:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8018d0c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8018d10:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8018d14:	f8de 3000 	ldr.w	r3, [lr]
 8018d18:	f8cc 3000 	str.w	r3, [ip]
 8018d1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018d1e:	682b      	ldr	r3, [r5, #0]
 8018d20:	9201      	str	r2, [sp, #4]
 8018d22:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018d26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018d28:	9200      	str	r2, [sp, #0]
 8018d2a:	f8cd 8008 	str.w	r8, [sp, #8]
 8018d2e:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 8018d32:	aa07      	add	r2, sp, #28
 8018d34:	463b      	mov	r3, r7
 8018d36:	4631      	mov	r1, r6
 8018d38:	4628      	mov	r0, r5
 8018d3a:	47d8      	blx	fp
 8018d3c:	46a6      	mov	lr, r4
 8018d3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018d42:	f10d 0c1c 	add.w	ip, sp, #28
 8018d46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d4a:	f8de 3000 	ldr.w	r3, [lr]
 8018d4e:	f8cc 3000 	str.w	r3, [ip]
 8018d52:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018d56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018d5a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018d5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d62:	343c      	adds	r4, #60	; 0x3c
 8018d64:	f8de 3000 	ldr.w	r3, [lr]
 8018d68:	f8cc 3000 	str.w	r3, [ip]
 8018d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d6e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018d72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d76:	6823      	ldr	r3, [r4, #0]
 8018d78:	f8cc 3000 	str.w	r3, [ip]
 8018d7c:	682b      	ldr	r3, [r5, #0]
 8018d7e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018d82:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018d84:	9201      	str	r2, [sp, #4]
 8018d86:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018d88:	9200      	str	r2, [sp, #0]
 8018d8a:	f8cd 8008 	str.w	r8, [sp, #8]
 8018d8e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8018d90:	aa07      	add	r2, sp, #28
 8018d92:	463b      	mov	r3, r7
 8018d94:	4631      	mov	r1, r6
 8018d96:	4628      	mov	r0, r5
 8018d98:	47a0      	blx	r4
 8018d9a:	b017      	add	sp, #92	; 0x5c
 8018d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018da0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018da0:	2000      	movs	r0, #0
 8018da2:	4770      	bx	lr

08018da4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018da8:	b08d      	sub	sp, #52	; 0x34
 8018daa:	4688      	mov	r8, r1
 8018dac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018dae:	f8d3 c000 	ldr.w	ip, [r3]
 8018db2:	680f      	ldr	r7, [r1, #0]
 8018db4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8018db8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8018dbc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8018dc0:	edd3 6a07 	vldr	s13, [r3, #28]
 8018dc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018dc6:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8018dca:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018dce:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018dd2:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018dd6:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8018dda:	eba7 070c 	sub.w	r7, r7, ip
 8018dde:	42bc      	cmp	r4, r7
 8018de0:	bfa8      	it	ge
 8018de2:	463c      	movge	r4, r7
 8018de4:	ee07 4a90 	vmov	s15, r4
 8018de8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018dec:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018df0:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018df4:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018df8:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018dfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018e00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018e04:	eb09 0e0c 	add.w	lr, r9, ip
 8018e08:	4571      	cmp	r1, lr
 8018e0a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018e0e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018e12:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018e16:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018e1a:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018e1e:	f340 808d 	ble.w	8018f3c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8018e22:	eba1 060e 	sub.w	r6, r1, lr
 8018e26:	fb96 f5f4 	sdiv	r5, r6, r4
 8018e2a:	ee07 5a10 	vmov	s14, r5
 8018e2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018e32:	2d00      	cmp	r5, #0
 8018e34:	fb04 6615 	mls	r6, r4, r5, r6
 8018e38:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018e3c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018e40:	eea7 1a05 	vfma.f32	s2, s14, s10
 8018e44:	dd13      	ble.n	8018e6e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8018e46:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018e4a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018e4e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e56:	bf18      	it	ne
 8018e58:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018e5c:	ee31 2a45 	vsub.f32	s4, s2, s10
 8018e60:	bf08      	it	eq
 8018e62:	eeb0 7a67 	vmoveq.f32	s14, s15
 8018e66:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018e6a:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018e6e:	fb05 f204 	mul.w	r2, r5, r4
 8018e72:	1abf      	subs	r7, r7, r2
 8018e74:	4494      	add	ip, r2
 8018e76:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018e7a:	4411      	add	r1, r2
 8018e7c:	eb09 020c 	add.w	r2, r9, ip
 8018e80:	443a      	add	r2, r7
 8018e82:	b209      	sxth	r1, r1
 8018e84:	428a      	cmp	r2, r1
 8018e86:	bfc4      	itt	gt
 8018e88:	eba1 0209 	subgt.w	r2, r1, r9
 8018e8c:	eba2 070c 	subgt.w	r7, r2, ip
 8018e90:	2f00      	cmp	r7, #0
 8018e92:	dd50      	ble.n	8018f36 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8018e94:	fb97 f1f4 	sdiv	r1, r7, r4
 8018e98:	fb04 7211 	mls	r2, r4, r1, r7
 8018e9c:	b90a      	cbnz	r2, 8018ea2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 8018e9e:	3901      	subs	r1, #1
 8018ea0:	4622      	mov	r2, r4
 8018ea2:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018ea6:	6840      	ldr	r0, [r0, #4]
 8018ea8:	900b      	str	r0, [sp, #44]	; 0x2c
 8018eaa:	f8d0 a000 	ldr.w	sl, [r0]
 8018eae:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018eb0:	9008      	str	r0, [sp, #32]
 8018eb2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8018eb6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018eb8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018ebc:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018ec0:	695b      	ldr	r3, [r3, #20]
 8018ec2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018ec4:	445b      	add	r3, fp
 8018ec6:	eef0 6a42 	vmov.f32	s13, s4
 8018eca:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018ece:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018ed2:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018ed6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018eda:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018ede:	9307      	str	r3, [sp, #28]
 8018ee0:	ee17 7a90 	vmov	r7, s15
 8018ee4:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018ee8:	eeb0 7a61 	vmov.f32	s14, s3
 8018eec:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018ef0:	ee16 3a90 	vmov	r3, s13
 8018ef4:	fb97 f7f4 	sdiv	r7, r7, r4
 8018ef8:	ee17 ca90 	vmov	ip, s15
 8018efc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018f00:	fb9c fcf4 	sdiv	ip, ip, r4
 8018f04:	fb0c 3306 	mla	r3, ip, r6, r3
 8018f08:	9302      	str	r3, [sp, #8]
 8018f0a:	ee17 3a10 	vmov	r3, s14
 8018f0e:	44b6      	add	lr, r6
 8018f10:	fb04 e505 	mla	r5, r4, r5, lr
 8018f14:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8018f18:	fb07 3706 	mla	r7, r7, r6, r3
 8018f1c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018f20:	e9cd 4700 	strd	r4, r7, [sp]
 8018f24:	2900      	cmp	r1, #0
 8018f26:	bfcc      	ite	gt
 8018f28:	46a1      	movgt	r9, r4
 8018f2a:	4691      	movle	r9, r2
 8018f2c:	eba9 0306 	sub.w	r3, r9, r6
 8018f30:	f8da 4008 	ldr.w	r4, [sl, #8]
 8018f34:	47a0      	blx	r4
 8018f36:	b00d      	add	sp, #52	; 0x34
 8018f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f3c:	2500      	movs	r5, #0
 8018f3e:	462e      	mov	r6, r5
 8018f40:	e799      	b.n	8018e76 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08018f44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f48:	b0db      	sub	sp, #364	; 0x16c
 8018f4a:	461d      	mov	r5, r3
 8018f4c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8018f50:	930a      	str	r3, [sp, #40]	; 0x28
 8018f52:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8018f58:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8018f5c:	9310      	str	r3, [sp, #64]	; 0x40
 8018f5e:	6803      	ldr	r3, [r0, #0]
 8018f60:	910f      	str	r1, [sp, #60]	; 0x3c
 8018f62:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8018f64:	9009      	str	r0, [sp, #36]	; 0x24
 8018f66:	4614      	mov	r4, r2
 8018f68:	4629      	mov	r1, r5
 8018f6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018f6e:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8018f72:	47b8      	blx	r7
 8018f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f76:	6058      	str	r0, [r3, #4]
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	f000 83a1 	beq.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018f7e:	682b      	ldr	r3, [r5, #0]
 8018f80:	9314      	str	r3, [sp, #80]	; 0x50
 8018f82:	686b      	ldr	r3, [r5, #4]
 8018f84:	9315      	str	r3, [sp, #84]	; 0x54
 8018f86:	4bc4      	ldr	r3, [pc, #784]	; (8019298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8018f88:	ed94 7a02 	vldr	s14, [r4, #8]
 8018f8c:	7819      	ldrb	r1, [r3, #0]
 8018f8e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8018f92:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8018f96:	2900      	cmp	r1, #0
 8018f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018f9c:	bf16      	itet	ne
 8018f9e:	4619      	movne	r1, r3
 8018fa0:	4611      	moveq	r1, r2
 8018fa2:	4613      	movne	r3, r2
 8018fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fa8:	9116      	str	r1, [sp, #88]	; 0x58
 8018faa:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8018fae:	f240 8387 	bls.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018fb2:	ed94 7a07 	vldr	s14, [r4, #28]
 8018fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fbe:	f240 837f 	bls.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018fc2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8018fc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fce:	f240 8377 	bls.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018fd2:	6822      	ldr	r2, [r4, #0]
 8018fd4:	4bb1      	ldr	r3, [pc, #708]	; (801929c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8018fd6:	429a      	cmp	r2, r3
 8018fd8:	f2c0 8372 	blt.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018fdc:	49b0      	ldr	r1, [pc, #704]	; (80192a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018fde:	6963      	ldr	r3, [r4, #20]
 8018fe0:	428a      	cmp	r2, r1
 8018fe2:	f300 836d 	bgt.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018fe6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018fea:	48ae      	ldr	r0, [pc, #696]	; (80192a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018fec:	33ff      	adds	r3, #255	; 0xff
 8018fee:	4283      	cmp	r3, r0
 8018ff0:	f200 8366 	bhi.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018ff4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018ff6:	4dac      	ldr	r5, [pc, #688]	; (80192a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018ff8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018ffc:	33ff      	adds	r3, #255	; 0xff
 8018ffe:	42ab      	cmp	r3, r5
 8019000:	f200 835e 	bhi.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019004:	6862      	ldr	r2, [r4, #4]
 8019006:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801900a:	33ff      	adds	r3, #255	; 0xff
 801900c:	4283      	cmp	r3, r0
 801900e:	f200 8357 	bhi.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019012:	69a1      	ldr	r1, [r4, #24]
 8019014:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019018:	33ff      	adds	r3, #255	; 0xff
 801901a:	4283      	cmp	r3, r0
 801901c:	f200 8350 	bhi.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019022:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8019026:	30ff      	adds	r0, #255	; 0xff
 8019028:	42a8      	cmp	r0, r5
 801902a:	f200 8349 	bhi.w	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801902e:	428a      	cmp	r2, r1
 8019030:	f280 8110 	bge.w	8019254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019034:	429a      	cmp	r2, r3
 8019036:	f300 8119 	bgt.w	801926c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801903a:	4299      	cmp	r1, r3
 801903c:	f280 811d 	bge.w	801927a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019040:	2502      	movs	r5, #2
 8019042:	2701      	movs	r7, #1
 8019044:	46a9      	mov	r9, r5
 8019046:	46b8      	mov	r8, r7
 8019048:	f04f 0a00 	mov.w	sl, #0
 801904c:	4621      	mov	r1, r4
 801904e:	a849      	add	r0, sp, #292	; 0x124
 8019050:	f003 fc84 	bl	801c95c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019054:	4622      	mov	r2, r4
 8019056:	4653      	mov	r3, sl
 8019058:	a949      	add	r1, sp, #292	; 0x124
 801905a:	f8cd 9000 	str.w	r9, [sp]
 801905e:	a819      	add	r0, sp, #100	; 0x64
 8019060:	f003 fdac 	bl	801cbbc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019064:	4622      	mov	r2, r4
 8019066:	4653      	mov	r3, sl
 8019068:	a949      	add	r1, sp, #292	; 0x124
 801906a:	f8cd 8000 	str.w	r8, [sp]
 801906e:	a829      	add	r0, sp, #164	; 0xa4
 8019070:	f003 fda4 	bl	801cbbc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019074:	4643      	mov	r3, r8
 8019076:	4622      	mov	r2, r4
 8019078:	a949      	add	r1, sp, #292	; 0x124
 801907a:	f8cd 9000 	str.w	r9, [sp]
 801907e:	a839      	add	r0, sp, #228	; 0xe4
 8019080:	f003 fd9c 	bl	801cbbc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019084:	42af      	cmp	r7, r5
 8019086:	bfb5      	itete	lt
 8019088:	2300      	movlt	r3, #0
 801908a:	2301      	movge	r3, #1
 801908c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801908e:	930e      	strge	r3, [sp, #56]	; 0x38
 8019090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019092:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019096:	af12      	add	r7, sp, #72	; 0x48
 8019098:	bfb9      	ittee	lt
 801909a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801909c:	ac19      	addlt	r4, sp, #100	; 0x64
 801909e:	ad19      	addge	r5, sp, #100	; 0x64
 80190a0:	ac29      	addge	r4, sp, #164	; 0xa4
 80190a2:	e887 0003 	stmia.w	r7, {r0, r1}
 80190a6:	b928      	cbnz	r0, 80190b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80190a8:	4b80      	ldr	r3, [pc, #512]	; (80192ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80190aa:	6818      	ldr	r0, [r3, #0]
 80190ac:	6803      	ldr	r3, [r0, #0]
 80190ae:	6a1b      	ldr	r3, [r3, #32]
 80190b0:	4798      	blx	r3
 80190b2:	6038      	str	r0, [r7, #0]
 80190b4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80190b6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80190ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80190be:	930c      	str	r3, [sp, #48]	; 0x30
 80190c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80190c2:	6963      	ldr	r3, [r4, #20]
 80190c4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80190c6:	440b      	add	r3, r1
 80190c8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80190cc:	4408      	add	r0, r1
 80190ce:	b200      	sxth	r0, r0
 80190d0:	4283      	cmp	r3, r0
 80190d2:	900d      	str	r0, [sp, #52]	; 0x34
 80190d4:	f280 80dd 	bge.w	8019292 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80190d8:	428b      	cmp	r3, r1
 80190da:	da08      	bge.n	80190ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80190dc:	2a00      	cmp	r2, #0
 80190de:	dd06      	ble.n	80190ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80190e0:	1acb      	subs	r3, r1, r3
 80190e2:	429a      	cmp	r2, r3
 80190e4:	f2c0 80e4 	blt.w	80192b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	f300 80e2 	bgt.w	80192b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80190ee:	6967      	ldr	r7, [r4, #20]
 80190f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190f2:	443b      	add	r3, r7
 80190f4:	461f      	mov	r7, r3
 80190f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80190f8:	1bdf      	subs	r7, r3, r7
 80190fa:	4297      	cmp	r7, r2
 80190fc:	bfa8      	it	ge
 80190fe:	4617      	movge	r7, r2
 8019100:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019104:	2f00      	cmp	r7, #0
 8019106:	f340 8166 	ble.w	80193d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801910a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801910c:	6829      	ldr	r1, [r5, #0]
 801910e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019112:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019116:	6820      	ldr	r0, [r4, #0]
 8019118:	4411      	add	r1, r2
 801911a:	4299      	cmp	r1, r3
 801911c:	dd1a      	ble.n	8019154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801911e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019122:	440b      	add	r3, r1
 8019124:	4402      	add	r2, r0
 8019126:	b21b      	sxth	r3, r3
 8019128:	429a      	cmp	r2, r3
 801912a:	dc13      	bgt.n	8019154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801912c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801912e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	9206      	str	r2, [sp, #24]
 8019134:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019136:	9205      	str	r2, [sp, #20]
 8019138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801913a:	9500      	str	r5, [sp, #0]
 801913c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019140:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019142:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019144:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019148:	a912      	add	r1, sp, #72	; 0x48
 801914a:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 801914e:	aa49      	add	r2, sp, #292	; 0x124
 8019150:	4623      	mov	r3, r4
 8019152:	47c8      	blx	r9
 8019154:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019158:	441a      	add	r2, r3
 801915a:	6963      	ldr	r3, [r4, #20]
 801915c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019160:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019164:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019168:	68a1      	ldr	r1, [r4, #8]
 801916a:	ed94 6a08 	vldr	s12, [r4, #32]
 801916e:	6022      	str	r2, [r4, #0]
 8019170:	3301      	adds	r3, #1
 8019172:	6163      	str	r3, [r4, #20]
 8019174:	69a3      	ldr	r3, [r4, #24]
 8019176:	ee37 7a27 	vadd.f32	s14, s14, s15
 801917a:	3b01      	subs	r3, #1
 801917c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019180:	61a3      	str	r3, [r4, #24]
 8019182:	6923      	ldr	r3, [r4, #16]
 8019184:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801918c:	edd4 6a07 	vldr	s13, [r4, #28]
 8019190:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019194:	440b      	add	r3, r1
 8019196:	68e1      	ldr	r1, [r4, #12]
 8019198:	6123      	str	r3, [r4, #16]
 801919a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801919e:	428b      	cmp	r3, r1
 80191a0:	edc4 6a07 	vstr	s13, [r4, #28]
 80191a4:	db15      	blt.n	80191d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80191a6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80191aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80191ae:	3201      	adds	r2, #1
 80191b0:	edc4 6a07 	vstr	s13, [r4, #28]
 80191b4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80191b8:	6022      	str	r2, [r4, #0]
 80191ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 80191be:	1a5b      	subs	r3, r3, r1
 80191c0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80191c4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80191c8:	6123      	str	r3, [r4, #16]
 80191ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80191ce:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80191d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80191d6:	441a      	add	r2, r3
 80191d8:	696b      	ldr	r3, [r5, #20]
 80191da:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80191de:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80191e2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80191e6:	68a9      	ldr	r1, [r5, #8]
 80191e8:	ed95 6a08 	vldr	s12, [r5, #32]
 80191ec:	602a      	str	r2, [r5, #0]
 80191ee:	3301      	adds	r3, #1
 80191f0:	616b      	str	r3, [r5, #20]
 80191f2:	69ab      	ldr	r3, [r5, #24]
 80191f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80191f8:	3b01      	subs	r3, #1
 80191fa:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80191fe:	61ab      	str	r3, [r5, #24]
 8019200:	692b      	ldr	r3, [r5, #16]
 8019202:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801920a:	edd5 6a07 	vldr	s13, [r5, #28]
 801920e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019212:	440b      	add	r3, r1
 8019214:	68e9      	ldr	r1, [r5, #12]
 8019216:	612b      	str	r3, [r5, #16]
 8019218:	ee76 6a86 	vadd.f32	s13, s13, s12
 801921c:	428b      	cmp	r3, r1
 801921e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019222:	db15      	blt.n	8019250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019224:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019228:	ee76 6a26 	vadd.f32	s13, s12, s13
 801922c:	3201      	adds	r2, #1
 801922e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019232:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019236:	602a      	str	r2, [r5, #0]
 8019238:	ee36 7a87 	vadd.f32	s14, s13, s14
 801923c:	1a5b      	subs	r3, r3, r1
 801923e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019242:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019246:	612b      	str	r3, [r5, #16]
 8019248:	ee77 7a27 	vadd.f32	s15, s14, s15
 801924c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019250:	3f01      	subs	r7, #1
 8019252:	e757      	b.n	8019104 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019254:	4299      	cmp	r1, r3
 8019256:	dc13      	bgt.n	8019280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019258:	429a      	cmp	r2, r3
 801925a:	da14      	bge.n	8019286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801925c:	2502      	movs	r5, #2
 801925e:	2703      	movs	r7, #3
 8019260:	46a9      	mov	r9, r5
 8019262:	f04f 0800 	mov.w	r8, #0
 8019266:	f04f 0a01 	mov.w	sl, #1
 801926a:	e6ef      	b.n	801904c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801926c:	2501      	movs	r5, #1
 801926e:	2700      	movs	r7, #0
 8019270:	46a9      	mov	r9, r5
 8019272:	46b8      	mov	r8, r7
 8019274:	f04f 0a02 	mov.w	sl, #2
 8019278:	e6e8      	b.n	801904c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801927a:	2501      	movs	r5, #1
 801927c:	2702      	movs	r7, #2
 801927e:	e6e1      	b.n	8019044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019280:	2500      	movs	r5, #0
 8019282:	2701      	movs	r7, #1
 8019284:	e7f4      	b.n	8019270 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019286:	2702      	movs	r7, #2
 8019288:	2503      	movs	r5, #3
 801928a:	f04f 0900 	mov.w	r9, #0
 801928e:	46b8      	mov	r8, r7
 8019290:	e7e9      	b.n	8019266 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019292:	4613      	mov	r3, r2
 8019294:	e728      	b.n	80190e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019296:	bf00      	nop
 8019298:	2000b72c 	.word	0x2000b72c
 801929c:	fffd8f01 	.word	0xfffd8f01
 80192a0:	00027100 	.word	0x00027100
 80192a4:	0004e1ff 	.word	0x0004e1ff
 80192a8:	0004e1fe 	.word	0x0004e1fe
 80192ac:	2000b734 	.word	0x2000b734
 80192b0:	4613      	mov	r3, r2
 80192b2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80192b4:	9111      	str	r1, [sp, #68]	; 0x44
 80192b6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80192ba:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80192be:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80192c0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80192c4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80192c8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80192cc:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80192d0:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80192d4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80192d8:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80192dc:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80192e0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80192e4:	469e      	mov	lr, r3
 80192e6:	469c      	mov	ip, r3
 80192e8:	f04f 0900 	mov.w	r9, #0
 80192ec:	f1bc 0f00 	cmp.w	ip, #0
 80192f0:	d147      	bne.n	8019382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80192f2:	eb03 0c07 	add.w	ip, r3, r7
 80192f6:	1ad7      	subs	r7, r2, r3
 80192f8:	f1b9 0f00 	cmp.w	r9, #0
 80192fc:	d009      	beq.n	8019312 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80192fe:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019302:	9029      	str	r0, [sp, #164]	; 0xa4
 8019304:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019308:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801930c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019310:	912d      	str	r1, [sp, #180]	; 0xb4
 8019312:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019314:	9111      	str	r1, [sp, #68]	; 0x44
 8019316:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801931a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801931e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019322:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019326:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801932a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801932e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019332:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019336:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801933a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801933e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019342:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019346:	f04f 0800 	mov.w	r8, #0
 801934a:	f1be 0f00 	cmp.w	lr, #0
 801934e:	d031      	beq.n	80193b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019350:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019352:	4431      	add	r1, r6
 8019354:	4549      	cmp	r1, r9
 8019356:	4450      	add	r0, sl
 8019358:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801935c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019360:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019364:	db08      	blt.n	8019378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019366:	ee77 7a85 	vadd.f32	s15, s15, s10
 801936a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801936e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019372:	3001      	adds	r0, #1
 8019374:	eba1 0109 	sub.w	r1, r1, r9
 8019378:	f10e 3eff 	add.w	lr, lr, #4294967295
 801937c:	f04f 0801 	mov.w	r8, #1
 8019380:	e7e3      	b.n	801934a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019382:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019384:	4431      	add	r1, r6
 8019386:	4541      	cmp	r1, r8
 8019388:	4450      	add	r0, sl
 801938a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801938e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019392:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019396:	db08      	blt.n	80193aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019398:	ee76 6a85 	vadd.f32	s13, s13, s10
 801939c:	ee37 7a25 	vadd.f32	s14, s14, s11
 80193a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80193a4:	3001      	adds	r0, #1
 80193a6:	eba1 0108 	sub.w	r1, r1, r8
 80193aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80193ae:	f04f 0901 	mov.w	r9, #1
 80193b2:	e79b      	b.n	80192ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80193b4:	449c      	add	ip, r3
 80193b6:	1aff      	subs	r7, r7, r3
 80193b8:	f1b8 0f00 	cmp.w	r8, #0
 80193bc:	d009      	beq.n	80193d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80193be:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80193c2:	9019      	str	r0, [sp, #100]	; 0x64
 80193c4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80193c8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80193cc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80193d0:	911d      	str	r1, [sp, #116]	; 0x74
 80193d2:	1ad2      	subs	r2, r2, r3
 80193d4:	e68b      	b.n	80190ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80193d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193d8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80193da:	2b00      	cmp	r3, #0
 80193dc:	f000 80d1 	beq.w	8019582 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80193e0:	ad19      	add	r5, sp, #100	; 0x64
 80193e2:	ac39      	add	r4, sp, #228	; 0xe4
 80193e4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80193e6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80193ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80193ee:	930c      	str	r3, [sp, #48]	; 0x30
 80193f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80193f2:	6963      	ldr	r3, [r4, #20]
 80193f4:	440b      	add	r3, r1
 80193f6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80193fa:	4408      	add	r0, r1
 80193fc:	b200      	sxth	r0, r0
 80193fe:	4283      	cmp	r3, r0
 8019400:	900d      	str	r0, [sp, #52]	; 0x34
 8019402:	f280 80c1 	bge.w	8019588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019406:	428b      	cmp	r3, r1
 8019408:	da08      	bge.n	801941c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801940a:	2a00      	cmp	r2, #0
 801940c:	dd06      	ble.n	801941c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801940e:	1acb      	subs	r3, r1, r3
 8019410:	429a      	cmp	r2, r3
 8019412:	f2c0 80bb 	blt.w	801958c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019416:	2b00      	cmp	r3, #0
 8019418:	f300 80b9 	bgt.w	801958e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801941c:	6967      	ldr	r7, [r4, #20]
 801941e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019420:	443b      	add	r3, r7
 8019422:	461f      	mov	r7, r3
 8019424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019426:	1bdf      	subs	r7, r3, r7
 8019428:	4297      	cmp	r7, r2
 801942a:	bfa8      	it	ge
 801942c:	4617      	movge	r7, r2
 801942e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019432:	2f00      	cmp	r7, #0
 8019434:	f340 813c 	ble.w	80196b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019438:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801943a:	6829      	ldr	r1, [r5, #0]
 801943c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019440:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019444:	6820      	ldr	r0, [r4, #0]
 8019446:	4411      	add	r1, r2
 8019448:	4299      	cmp	r1, r3
 801944a:	dd1a      	ble.n	8019482 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801944c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019450:	440b      	add	r3, r1
 8019452:	4402      	add	r2, r0
 8019454:	b21b      	sxth	r3, r3
 8019456:	429a      	cmp	r2, r3
 8019458:	dc13      	bgt.n	8019482 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801945a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801945c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	9206      	str	r2, [sp, #24]
 8019462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019464:	9205      	str	r2, [sp, #20]
 8019466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019468:	9500      	str	r5, [sp, #0]
 801946a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801946e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019472:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019476:	a912      	add	r1, sp, #72	; 0x48
 8019478:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 801947c:	aa49      	add	r2, sp, #292	; 0x124
 801947e:	4623      	mov	r3, r4
 8019480:	47c8      	blx	r9
 8019482:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019486:	441a      	add	r2, r3
 8019488:	6963      	ldr	r3, [r4, #20]
 801948a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801948e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019492:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019496:	68a1      	ldr	r1, [r4, #8]
 8019498:	ed94 6a08 	vldr	s12, [r4, #32]
 801949c:	6022      	str	r2, [r4, #0]
 801949e:	3301      	adds	r3, #1
 80194a0:	6163      	str	r3, [r4, #20]
 80194a2:	69a3      	ldr	r3, [r4, #24]
 80194a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80194a8:	3b01      	subs	r3, #1
 80194aa:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80194ae:	61a3      	str	r3, [r4, #24]
 80194b0:	6923      	ldr	r3, [r4, #16]
 80194b2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80194b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80194ba:	edd4 6a07 	vldr	s13, [r4, #28]
 80194be:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80194c2:	440b      	add	r3, r1
 80194c4:	68e1      	ldr	r1, [r4, #12]
 80194c6:	6123      	str	r3, [r4, #16]
 80194c8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80194cc:	428b      	cmp	r3, r1
 80194ce:	edc4 6a07 	vstr	s13, [r4, #28]
 80194d2:	db15      	blt.n	8019500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80194d4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80194d8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80194dc:	3201      	adds	r2, #1
 80194de:	edc4 6a07 	vstr	s13, [r4, #28]
 80194e2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80194e6:	6022      	str	r2, [r4, #0]
 80194e8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80194ec:	1a5b      	subs	r3, r3, r1
 80194ee:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80194f2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80194f6:	6123      	str	r3, [r4, #16]
 80194f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194fc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019500:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019504:	441a      	add	r2, r3
 8019506:	696b      	ldr	r3, [r5, #20]
 8019508:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801950c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019510:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019514:	68a9      	ldr	r1, [r5, #8]
 8019516:	ed95 6a08 	vldr	s12, [r5, #32]
 801951a:	602a      	str	r2, [r5, #0]
 801951c:	3301      	adds	r3, #1
 801951e:	616b      	str	r3, [r5, #20]
 8019520:	69ab      	ldr	r3, [r5, #24]
 8019522:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019526:	3b01      	subs	r3, #1
 8019528:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801952c:	61ab      	str	r3, [r5, #24]
 801952e:	692b      	ldr	r3, [r5, #16]
 8019530:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019538:	edd5 6a07 	vldr	s13, [r5, #28]
 801953c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019540:	440b      	add	r3, r1
 8019542:	68e9      	ldr	r1, [r5, #12]
 8019544:	612b      	str	r3, [r5, #16]
 8019546:	ee76 6a86 	vadd.f32	s13, s13, s12
 801954a:	428b      	cmp	r3, r1
 801954c:	edc5 6a07 	vstr	s13, [r5, #28]
 8019550:	db15      	blt.n	801957e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019552:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019556:	ee76 6a26 	vadd.f32	s13, s12, s13
 801955a:	3201      	adds	r2, #1
 801955c:	edc5 6a07 	vstr	s13, [r5, #28]
 8019560:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019564:	602a      	str	r2, [r5, #0]
 8019566:	ee36 7a87 	vadd.f32	s14, s13, s14
 801956a:	1a5b      	subs	r3, r3, r1
 801956c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019570:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019574:	612b      	str	r3, [r5, #16]
 8019576:	ee77 7a27 	vadd.f32	s15, s14, s15
 801957a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801957e:	3f01      	subs	r7, #1
 8019580:	e757      	b.n	8019432 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019582:	ad39      	add	r5, sp, #228	; 0xe4
 8019584:	ac19      	add	r4, sp, #100	; 0x64
 8019586:	e72d      	b.n	80193e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019588:	4613      	mov	r3, r2
 801958a:	e744      	b.n	8019416 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801958c:	4613      	mov	r3, r2
 801958e:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019592:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8019594:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8019598:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801959c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80195a0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80195a4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80195a8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80195ac:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80195b0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80195b2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80195b6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80195ba:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80195be:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80195c2:	960e      	str	r6, [sp, #56]	; 0x38
 80195c4:	469e      	mov	lr, r3
 80195c6:	461f      	mov	r7, r3
 80195c8:	f04f 0900 	mov.w	r9, #0
 80195cc:	2f00      	cmp	r7, #0
 80195ce:	d146      	bne.n	801965e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80195d0:	449c      	add	ip, r3
 80195d2:	1ad7      	subs	r7, r2, r3
 80195d4:	f1b9 0f00 	cmp.w	r9, #0
 80195d8:	d009      	beq.n	80195ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80195da:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80195de:	9039      	str	r0, [sp, #228]	; 0xe4
 80195e0:	913d      	str	r1, [sp, #244]	; 0xf4
 80195e2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80195e6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80195ea:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80195ee:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80195f0:	910e      	str	r1, [sp, #56]	; 0x38
 80195f2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80195f6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80195fa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80195fe:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019602:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019606:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801960a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801960e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019612:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019616:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801961a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801961e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019622:	f04f 0800 	mov.w	r8, #0
 8019626:	f1be 0f00 	cmp.w	lr, #0
 801962a:	d030      	beq.n	801968e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801962c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801962e:	4431      	add	r1, r6
 8019630:	4549      	cmp	r1, r9
 8019632:	4450      	add	r0, sl
 8019634:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019638:	ee37 7a04 	vadd.f32	s14, s14, s8
 801963c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019640:	db08      	blt.n	8019654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019642:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019646:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801964a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801964e:	3001      	adds	r0, #1
 8019650:	eba1 0109 	sub.w	r1, r1, r9
 8019654:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019658:	f04f 0801 	mov.w	r8, #1
 801965c:	e7e3      	b.n	8019626 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801965e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019660:	4431      	add	r1, r6
 8019662:	4541      	cmp	r1, r8
 8019664:	4450      	add	r0, sl
 8019666:	ee37 7a24 	vadd.f32	s14, s14, s9
 801966a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801966e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019672:	db08      	blt.n	8019686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019674:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019678:	ee37 7a25 	vadd.f32	s14, s14, s11
 801967c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019680:	3001      	adds	r0, #1
 8019682:	eba1 0108 	sub.w	r1, r1, r8
 8019686:	3f01      	subs	r7, #1
 8019688:	f04f 0901 	mov.w	r9, #1
 801968c:	e79e      	b.n	80195cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801968e:	449c      	add	ip, r3
 8019690:	1aff      	subs	r7, r7, r3
 8019692:	f1b8 0f00 	cmp.w	r8, #0
 8019696:	d009      	beq.n	80196ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019698:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801969c:	9019      	str	r0, [sp, #100]	; 0x64
 801969e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80196a2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80196a6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80196aa:	911d      	str	r1, [sp, #116]	; 0x74
 80196ac:	1ad2      	subs	r2, r2, r3
 80196ae:	e6b5      	b.n	801941c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80196b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	b923      	cbnz	r3, 80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80196b6:	4b04      	ldr	r3, [pc, #16]	; (80196c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80196b8:	6818      	ldr	r0, [r3, #0]
 80196ba:	6803      	ldr	r3, [r0, #0]
 80196bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196be:	4798      	blx	r3
 80196c0:	b05b      	add	sp, #364	; 0x16c
 80196c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196c6:	bf00      	nop
 80196c8:	2000b734 	.word	0x2000b734

080196cc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80196cc:	b570      	push	{r4, r5, r6, lr}
 80196ce:	4604      	mov	r4, r0
 80196d0:	2500      	movs	r5, #0
 80196d2:	7223      	strb	r3, [r4, #8]
 80196d4:	9804      	ldr	r0, [sp, #16]
 80196d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80196da:	8025      	strh	r5, [r4, #0]
 80196dc:	6061      	str	r1, [r4, #4]
 80196de:	7263      	strb	r3, [r4, #9]
 80196e0:	60e0      	str	r0, [r4, #12]
 80196e2:	8222      	strh	r2, [r4, #16]
 80196e4:	8265      	strh	r5, [r4, #18]
 80196e6:	82a5      	strh	r5, [r4, #20]
 80196e8:	82e5      	strh	r5, [r4, #22]
 80196ea:	8325      	strh	r5, [r4, #24]
 80196ec:	8365      	strh	r5, [r4, #26]
 80196ee:	83a5      	strh	r5, [r4, #28]
 80196f0:	77a5      	strb	r5, [r4, #30]
 80196f2:	6803      	ldr	r3, [r0, #0]
 80196f4:	695b      	ldr	r3, [r3, #20]
 80196f6:	4798      	blx	r3
 80196f8:	4606      	mov	r6, r0
 80196fa:	b1f8      	cbz	r0, 801973c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80196fc:	68e0      	ldr	r0, [r4, #12]
 80196fe:	6803      	ldr	r3, [r0, #0]
 8019700:	4631      	mov	r1, r6
 8019702:	68db      	ldr	r3, [r3, #12]
 8019704:	4798      	blx	r3
 8019706:	7b43      	ldrb	r3, [r0, #13]
 8019708:	7a82      	ldrb	r2, [r0, #10]
 801970a:	005b      	lsls	r3, r3, #1
 801970c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019710:	4313      	orrs	r3, r2
 8019712:	83a3      	strh	r3, [r4, #28]
 8019714:	7a63      	ldrb	r3, [r4, #9]
 8019716:	2b04      	cmp	r3, #4
 8019718:	4605      	mov	r5, r0
 801971a:	d10f      	bne.n	801973c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801971c:	68e0      	ldr	r0, [r4, #12]
 801971e:	6803      	ldr	r3, [r0, #0]
 8019720:	462a      	mov	r2, r5
 8019722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019724:	4631      	mov	r1, r6
 8019726:	4798      	blx	r3
 8019728:	7b6b      	ldrb	r3, [r5, #13]
 801972a:	005b      	lsls	r3, r3, #1
 801972c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019730:	7aab      	ldrb	r3, [r5, #10]
 8019732:	4313      	orrs	r3, r2
 8019734:	4418      	add	r0, r3
 8019736:	8ba3      	ldrh	r3, [r4, #28]
 8019738:	4418      	add	r0, r3
 801973a:	83a0      	strh	r0, [r4, #28]
 801973c:	4620      	mov	r0, r4
 801973e:	bd70      	pop	{r4, r5, r6, pc}

08019740 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019744:	2400      	movs	r4, #0
 8019746:	b085      	sub	sp, #20
 8019748:	4681      	mov	r9, r0
 801974a:	4688      	mov	r8, r1
 801974c:	4692      	mov	sl, r2
 801974e:	469b      	mov	fp, r3
 8019750:	4627      	mov	r7, r4
 8019752:	4625      	mov	r5, r4
 8019754:	4626      	mov	r6, r4
 8019756:	4554      	cmp	r4, sl
 8019758:	da2a      	bge.n	80197b0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801975a:	2300      	movs	r3, #0
 801975c:	9303      	str	r3, [sp, #12]
 801975e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019762:	429d      	cmp	r5, r3
 8019764:	d004      	beq.n	8019770 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019766:	f242 030b 	movw	r3, #8203	; 0x200b
 801976a:	429d      	cmp	r5, r3
 801976c:	bf18      	it	ne
 801976e:	462f      	movne	r7, r5
 8019770:	ab03      	add	r3, sp, #12
 8019772:	4642      	mov	r2, r8
 8019774:	4659      	mov	r1, fp
 8019776:	4648      	mov	r0, r9
 8019778:	f002 fe76 	bl	801c468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801977c:	4605      	mov	r5, r0
 801977e:	b1b8      	cbz	r0, 80197b0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019780:	280a      	cmp	r0, #10
 8019782:	d015      	beq.n	80197b0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019784:	9a03      	ldr	r2, [sp, #12]
 8019786:	b18a      	cbz	r2, 80197ac <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019788:	7b50      	ldrb	r0, [r2, #13]
 801978a:	7a93      	ldrb	r3, [r2, #10]
 801978c:	8895      	ldrh	r5, [r2, #4]
 801978e:	0040      	lsls	r0, r0, #1
 8019790:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019794:	4303      	orrs	r3, r0
 8019796:	9301      	str	r3, [sp, #4]
 8019798:	f8d8 3000 	ldr.w	r3, [r8]
 801979c:	4639      	mov	r1, r7
 801979e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197a0:	4640      	mov	r0, r8
 80197a2:	4798      	blx	r3
 80197a4:	9b01      	ldr	r3, [sp, #4]
 80197a6:	4418      	add	r0, r3
 80197a8:	4406      	add	r6, r0
 80197aa:	b2b6      	uxth	r6, r6
 80197ac:	3401      	adds	r4, #1
 80197ae:	e7d2      	b.n	8019756 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80197b0:	4630      	mov	r0, r6
 80197b2:	b005      	add	sp, #20
 80197b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080197b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80197b8:	2a02      	cmp	r2, #2
 80197ba:	b530      	push	{r4, r5, lr}
 80197bc:	d011      	beq.n	80197e2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80197be:	2a03      	cmp	r2, #3
 80197c0:	d01c      	beq.n	80197fc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80197c2:	2a01      	cmp	r2, #1
 80197c4:	d10c      	bne.n	80197e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80197c6:	888b      	ldrh	r3, [r1, #4]
 80197c8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80197cc:	8801      	ldrh	r1, [r0, #0]
 80197ce:	8844      	ldrh	r4, [r0, #2]
 80197d0:	8004      	strh	r4, [r0, #0]
 80197d2:	1a9b      	subs	r3, r3, r2
 80197d4:	1a5b      	subs	r3, r3, r1
 80197d6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80197da:	8043      	strh	r3, [r0, #2]
 80197dc:	8081      	strh	r1, [r0, #4]
 80197de:	80c2      	strh	r2, [r0, #6]
 80197e0:	bd30      	pop	{r4, r5, pc}
 80197e2:	88cb      	ldrh	r3, [r1, #6]
 80197e4:	88c2      	ldrh	r2, [r0, #6]
 80197e6:	1a9b      	subs	r3, r3, r2
 80197e8:	8842      	ldrh	r2, [r0, #2]
 80197ea:	1a9b      	subs	r3, r3, r2
 80197ec:	888a      	ldrh	r2, [r1, #4]
 80197ee:	8881      	ldrh	r1, [r0, #4]
 80197f0:	8043      	strh	r3, [r0, #2]
 80197f2:	1a52      	subs	r2, r2, r1
 80197f4:	8801      	ldrh	r1, [r0, #0]
 80197f6:	1a52      	subs	r2, r2, r1
 80197f8:	8002      	strh	r2, [r0, #0]
 80197fa:	e7f1      	b.n	80197e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80197fc:	88cb      	ldrh	r3, [r1, #6]
 80197fe:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019802:	8841      	ldrh	r1, [r0, #2]
 8019804:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019808:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801980c:	8045      	strh	r5, [r0, #2]
 801980e:	1a9b      	subs	r3, r3, r2
 8019810:	1a5b      	subs	r3, r3, r1
 8019812:	8003      	strh	r3, [r0, #0]
 8019814:	8082      	strh	r2, [r0, #4]
 8019816:	80c4      	strh	r4, [r0, #6]
 8019818:	e7e2      	b.n	80197e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801981a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801981a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801981e:	b09f      	sub	sp, #124	; 0x7c
 8019820:	9116      	str	r1, [sp, #88]	; 0x58
 8019822:	9317      	str	r3, [sp, #92]	; 0x5c
 8019824:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019826:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019828:	8809      	ldrh	r1, [r1, #0]
 801982a:	889b      	ldrh	r3, [r3, #4]
 801982c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019830:	9212      	str	r2, [sp, #72]	; 0x48
 8019832:	440b      	add	r3, r1
 8019834:	b21b      	sxth	r3, r3
 8019836:	9310      	str	r3, [sp, #64]	; 0x40
 8019838:	f8d8 3000 	ldr.w	r3, [r8]
 801983c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019840:	7a59      	ldrb	r1, [r3, #9]
 8019842:	7a1b      	ldrb	r3, [r3, #8]
 8019844:	9315      	str	r3, [sp, #84]	; 0x54
 8019846:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019848:	9011      	str	r0, [sp, #68]	; 0x44
 801984a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801984e:	9114      	str	r1, [sp, #80]	; 0x50
 8019850:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019854:	2a00      	cmp	r2, #0
 8019856:	d067      	beq.n	8019928 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8019858:	f898 3010 	ldrb.w	r3, [r8, #16]
 801985c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801985e:	2b04      	cmp	r3, #4
 8019860:	bf14      	ite	ne
 8019862:	2301      	movne	r3, #1
 8019864:	2302      	moveq	r3, #2
 8019866:	4413      	add	r3, r2
 8019868:	f04f 0900 	mov.w	r9, #0
 801986c:	930f      	str	r3, [sp, #60]	; 0x3c
 801986e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019872:	464c      	mov	r4, r9
 8019874:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019878:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801987c:	4293      	cmp	r3, r2
 801987e:	f280 808c 	bge.w	801999a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019882:	2300      	movs	r3, #0
 8019884:	931c      	str	r3, [sp, #112]	; 0x70
 8019886:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801988a:	429c      	cmp	r4, r3
 801988c:	d006      	beq.n	801989c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801988e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019890:	f242 020b 	movw	r2, #8203	; 0x200b
 8019894:	4294      	cmp	r4, r2
 8019896:	bf18      	it	ne
 8019898:	4623      	movne	r3, r4
 801989a:	930d      	str	r3, [sp, #52]	; 0x34
 801989c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801989e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80198a0:	f8d8 2000 	ldr.w	r2, [r8]
 80198a4:	428b      	cmp	r3, r1
 80198a6:	db41      	blt.n	801992c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80198a8:	6813      	ldr	r3, [r2, #0]
 80198aa:	4610      	mov	r0, r2
 80198ac:	695b      	ldr	r3, [r3, #20]
 80198ae:	4798      	blx	r3
 80198b0:	4604      	mov	r4, r0
 80198b2:	f8d8 0000 	ldr.w	r0, [r8]
 80198b6:	6803      	ldr	r3, [r0, #0]
 80198b8:	aa1d      	add	r2, sp, #116	; 0x74
 80198ba:	689e      	ldr	r6, [r3, #8]
 80198bc:	4621      	mov	r1, r4
 80198be:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80198c2:	47b0      	blx	r6
 80198c4:	901c      	str	r0, [sp, #112]	; 0x70
 80198c6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80198ca:	429c      	cmp	r4, r3
 80198cc:	f000 80e9 	beq.w	8019aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80198d0:	f242 030b 	movw	r3, #8203	; 0x200b
 80198d4:	429c      	cmp	r4, r3
 80198d6:	f000 80e4 	beq.w	8019aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80198da:	2c00      	cmp	r4, #0
 80198dc:	f000 80f6 	beq.w	8019acc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 80198e0:	2c0a      	cmp	r4, #10
 80198e2:	d060      	beq.n	80199a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80198e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80198e6:	b36a      	cbz	r2, 8019944 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80198e8:	8894      	ldrh	r4, [r2, #4]
 80198ea:	f1bb 0f00 	cmp.w	fp, #0
 80198ee:	d03b      	beq.n	8019968 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80198f0:	f892 900d 	ldrb.w	r9, [r2, #13]
 80198f4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80198f8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80198fc:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019900:	f1bb 0f01 	cmp.w	fp, #1
 8019904:	ea49 0903 	orr.w	r9, r9, r3
 8019908:	d134      	bne.n	8019974 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801990a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801990c:	eba5 0509 	sub.w	r5, r5, r9
 8019910:	2b00      	cmp	r3, #0
 8019912:	d14f      	bne.n	80199b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019914:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019916:	eb09 0305 	add.w	r3, r9, r5
 801991a:	4413      	add	r3, r2
 801991c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801991e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019922:	4293      	cmp	r3, r2
 8019924:	da51      	bge.n	80199ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019926:	e038      	b.n	801999a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019928:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801992a:	e79d      	b.n	8019868 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801992c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019930:	9301      	str	r3, [sp, #4]
 8019932:	ab1d      	add	r3, sp, #116	; 0x74
 8019934:	9300      	str	r3, [sp, #0]
 8019936:	4659      	mov	r1, fp
 8019938:	ab1c      	add	r3, sp, #112	; 0x70
 801993a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801993c:	f002 fdec 	bl	801c518 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019940:	4604      	mov	r4, r0
 8019942:	e7c0      	b.n	80198c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019944:	f8d8 0000 	ldr.w	r0, [r8]
 8019948:	6803      	ldr	r3, [r0, #0]
 801994a:	691b      	ldr	r3, [r3, #16]
 801994c:	4798      	blx	r3
 801994e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019952:	4298      	cmp	r0, r3
 8019954:	f000 80a5 	beq.w	8019aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019958:	f242 030b 	movw	r3, #8203	; 0x200b
 801995c:	4298      	cmp	r0, r3
 801995e:	f000 80a0 	beq.w	8019aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019962:	f1bb 0f00 	cmp.w	fp, #0
 8019966:	d100      	bne.n	801996a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8019968:	444d      	add	r5, r9
 801996a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801996c:	2a00      	cmp	r2, #0
 801996e:	d1bf      	bne.n	80198f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8019970:	4691      	mov	r9, r2
 8019972:	e096      	b.n	8019aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019976:	2b00      	cmp	r3, #0
 8019978:	f000 80aa 	beq.w	8019ad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801997c:	f1bb 0f00 	cmp.w	fp, #0
 8019980:	d118      	bne.n	80199b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019982:	f8d8 0000 	ldr.w	r0, [r8]
 8019986:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019988:	6803      	ldr	r3, [r0, #0]
 801998a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801998c:	4798      	blx	r3
 801998e:	4405      	add	r5, r0
 8019990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019992:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019994:	1aeb      	subs	r3, r5, r3
 8019996:	4293      	cmp	r3, r2
 8019998:	dd17      	ble.n	80199ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801999a:	2c00      	cmp	r4, #0
 801999c:	f000 8096 	beq.w	8019acc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 80199a0:	2c0a      	cmp	r4, #10
 80199a2:	f040 8084 	bne.w	8019aae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 80199a6:	240a      	movs	r4, #10
 80199a8:	fab4 f084 	clz	r0, r4
 80199ac:	0940      	lsrs	r0, r0, #5
 80199ae:	b01f      	add	sp, #124	; 0x7c
 80199b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199b4:	f8d8 0000 	ldr.w	r0, [r8]
 80199b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80199ba:	6803      	ldr	r3, [r0, #0]
 80199bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199be:	4798      	blx	r3
 80199c0:	f1bb 0f01 	cmp.w	fp, #1
 80199c4:	eba5 0500 	sub.w	r5, r5, r0
 80199c8:	d0a4      	beq.n	8019914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80199ca:	981c      	ldr	r0, [sp, #112]	; 0x70
 80199cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80199ce:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80199d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80199d6:	7b43      	ldrb	r3, [r0, #13]
 80199d8:	015b      	lsls	r3, r3, #5
 80199da:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80199de:	7983      	ldrb	r3, [r0, #6]
 80199e0:	4429      	add	r1, r5
 80199e2:	4313      	orrs	r3, r2
 80199e4:	440b      	add	r3, r1
 80199e6:	42b3      	cmp	r3, r6
 80199e8:	db5b      	blt.n	8019aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80199ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80199ec:	4299      	cmp	r1, r3
 80199ee:	da58      	bge.n	8019aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80199f0:	f8d8 0000 	ldr.w	r0, [r8]
 80199f4:	6803      	ldr	r3, [r0, #0]
 80199f6:	42ae      	cmp	r6, r5
 80199f8:	bfc8      	it	gt
 80199fa:	1b76      	subgt	r6, r6, r5
 80199fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199fe:	bfcc      	ite	gt
 8019a00:	b2b6      	uxthgt	r6, r6
 8019a02:	2600      	movle	r6, #0
 8019a04:	4798      	blx	r3
 8019a06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019a08:	7b5a      	ldrb	r2, [r3, #13]
 8019a0a:	00d1      	lsls	r1, r2, #3
 8019a0c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019a10:	7a19      	ldrb	r1, [r3, #8]
 8019a12:	4339      	orrs	r1, r7
 8019a14:	0657      	lsls	r7, r2, #25
 8019a16:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019a18:	bf44      	itt	mi
 8019a1a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019a1e:	b209      	sxthmi	r1, r1
 8019a20:	19c7      	adds	r7, r0, r7
 8019a22:	1a7f      	subs	r7, r7, r1
 8019a24:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019a26:	b2bf      	uxth	r7, r7
 8019a28:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019a2c:	fa0f fa87 	sxth.w	sl, r7
 8019a30:	4551      	cmp	r1, sl
 8019a32:	dd3a      	ble.n	8019aaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019a34:	0112      	lsls	r2, r2, #4
 8019a36:	79d8      	ldrb	r0, [r3, #7]
 8019a38:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019a3c:	4302      	orrs	r2, r0
 8019a3e:	4492      	add	sl, r2
 8019a40:	4551      	cmp	r1, sl
 8019a42:	dc2e      	bgt.n	8019aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019a44:	1bcf      	subs	r7, r1, r7
 8019a46:	b2bf      	uxth	r7, r7
 8019a48:	468a      	mov	sl, r1
 8019a4a:	9319      	str	r3, [sp, #100]	; 0x64
 8019a4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019a4e:	f8d8 0000 	ldr.w	r0, [r8]
 8019a52:	681a      	ldr	r2, [r3, #0]
 8019a54:	6801      	ldr	r1, [r0, #0]
 8019a56:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8019a58:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019a5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8019a5c:	9218      	str	r2, [sp, #96]	; 0x60
 8019a5e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019a60:	4788      	blx	r1
 8019a62:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019a66:	910b      	str	r1, [sp, #44]	; 0x2c
 8019a68:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019a6c:	910a      	str	r1, [sp, #40]	; 0x28
 8019a6e:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019a72:	9109      	str	r1, [sp, #36]	; 0x24
 8019a74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019a76:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019a7a:	9305      	str	r3, [sp, #20]
 8019a7c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019a7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019a80:	9206      	str	r2, [sp, #24]
 8019a82:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019a86:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8019a8a:	e9cd a601 	strd	sl, r6, [sp, #4]
 8019a8e:	442e      	add	r6, r5
 8019a90:	b236      	sxth	r6, r6
 8019a92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019a94:	9600      	str	r6, [sp, #0]
 8019a96:	681a      	ldr	r2, [r3, #0]
 8019a98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019a9a:	685b      	ldr	r3, [r3, #4]
 8019a9c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019a9e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019aa0:	47b0      	blx	r6
 8019aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019aa4:	3301      	adds	r3, #1
 8019aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8019aa8:	e6e6      	b.n	8019878 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8019aaa:	2700      	movs	r7, #0
 8019aac:	e7cd      	b.n	8019a4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 8019aae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019ab0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019ab2:	3501      	adds	r5, #1
 8019ab4:	429d      	cmp	r5, r3
 8019ab6:	f6bf af77 	bge.w	80199a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019aba:	4659      	mov	r1, fp
 8019abc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019abe:	f7fa fc8b 	bl	80143d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019ac2:	4604      	mov	r4, r0
 8019ac4:	b110      	cbz	r0, 8019acc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8019ac6:	280a      	cmp	r0, #10
 8019ac8:	d1f2      	bne.n	8019ab0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019aca:	e76c      	b.n	80199a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019acc:	2400      	movs	r4, #0
 8019ace:	e76b      	b.n	80199a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019ad0:	f1bb 0f00 	cmp.w	fp, #0
 8019ad4:	f43f af5c 	beq.w	8019990 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019ad8:	e777      	b.n	80199ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08019ada <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019ada:	b530      	push	{r4, r5, lr}
 8019adc:	8a44      	ldrh	r4, [r0, #18]
 8019ade:	8ac5      	ldrh	r5, [r0, #22]
 8019ae0:	82c3      	strh	r3, [r0, #22]
 8019ae2:	442c      	add	r4, r5
 8019ae4:	1ae4      	subs	r4, r4, r3
 8019ae6:	8244      	strh	r4, [r0, #18]
 8019ae8:	8b03      	ldrh	r3, [r0, #24]
 8019aea:	8a84      	ldrh	r4, [r0, #20]
 8019aec:	4422      	add	r2, r4
 8019aee:	440c      	add	r4, r1
 8019af0:	1a59      	subs	r1, r3, r1
 8019af2:	8342      	strh	r2, [r0, #26]
 8019af4:	8284      	strh	r4, [r0, #20]
 8019af6:	8301      	strh	r1, [r0, #24]
 8019af8:	bd30      	pop	{r4, r5, pc}

08019afa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019afa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019afe:	7a43      	ldrb	r3, [r0, #9]
 8019b00:	1eda      	subs	r2, r3, #3
 8019b02:	b087      	sub	sp, #28
 8019b04:	4604      	mov	r4, r0
 8019b06:	b2d2      	uxtb	r2, r2
 8019b08:	460f      	mov	r7, r1
 8019b0a:	2900      	cmp	r1, #0
 8019b0c:	d036      	beq.n	8019b7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8019b0e:	2a01      	cmp	r2, #1
 8019b10:	d932      	bls.n	8019b78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019b12:	1e58      	subs	r0, r3, #1
 8019b14:	f1d0 0b00 	rsbs	fp, r0, #0
 8019b18:	eb4b 0b00 	adc.w	fp, fp, r0
 8019b1c:	1e99      	subs	r1, r3, #2
 8019b1e:	424b      	negs	r3, r1
 8019b20:	414b      	adcs	r3, r1
 8019b22:	9303      	str	r3, [sp, #12]
 8019b24:	2300      	movs	r3, #0
 8019b26:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019b2a:	2500      	movs	r5, #0
 8019b2c:	8265      	strh	r5, [r4, #18]
 8019b2e:	82a5      	strh	r5, [r4, #20]
 8019b30:	46a9      	mov	r9, r5
 8019b32:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8019b36:	2300      	movs	r3, #0
 8019b38:	9305      	str	r3, [sp, #20]
 8019b3a:	8823      	ldrh	r3, [r4, #0]
 8019b3c:	2b20      	cmp	r3, #32
 8019b3e:	d02b      	beq.n	8019b98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8019b40:	eba3 020a 	sub.w	r2, r3, sl
 8019b44:	4256      	negs	r6, r2
 8019b46:	4156      	adcs	r6, r2
 8019b48:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019b4c:	4293      	cmp	r3, r2
 8019b4e:	d004      	beq.n	8019b5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019b50:	4553      	cmp	r3, sl
 8019b52:	bf16      	itet	ne
 8019b54:	4699      	movne	r9, r3
 8019b56:	2601      	moveq	r6, #1
 8019b58:	2600      	movne	r6, #0
 8019b5a:	ab05      	add	r3, sp, #20
 8019b5c:	68e2      	ldr	r2, [r4, #12]
 8019b5e:	7a21      	ldrb	r1, [r4, #8]
 8019b60:	6860      	ldr	r0, [r4, #4]
 8019b62:	f002 fc81 	bl	801c468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b66:	8020      	strh	r0, [r4, #0]
 8019b68:	b9c8      	cbnz	r0, 8019b9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019b6a:	8b22      	ldrh	r2, [r4, #24]
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	4611      	mov	r1, r2
 8019b70:	4620      	mov	r0, r4
 8019b72:	f7ff ffb2 	bl	8019ada <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019b76:	e066      	b.n	8019c46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019b78:	468b      	mov	fp, r1
 8019b7a:	e7cf      	b.n	8019b1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8019b7c:	3b01      	subs	r3, #1
 8019b7e:	2a01      	cmp	r2, #1
 8019b80:	bf8c      	ite	hi
 8019b82:	2200      	movhi	r2, #0
 8019b84:	2201      	movls	r2, #1
 8019b86:	2b01      	cmp	r3, #1
 8019b88:	bf8c      	ite	hi
 8019b8a:	2300      	movhi	r3, #0
 8019b8c:	2301      	movls	r3, #1
 8019b8e:	9202      	str	r2, [sp, #8]
 8019b90:	9301      	str	r3, [sp, #4]
 8019b92:	9103      	str	r1, [sp, #12]
 8019b94:	468b      	mov	fp, r1
 8019b96:	e7c8      	b.n	8019b2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8019b98:	4699      	mov	r9, r3
 8019b9a:	2601      	movs	r6, #1
 8019b9c:	e7dd      	b.n	8019b5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019b9e:	8ae3      	ldrh	r3, [r4, #22]
 8019ba0:	280a      	cmp	r0, #10
 8019ba2:	f103 0301 	add.w	r3, r3, #1
 8019ba6:	82e3      	strh	r3, [r4, #22]
 8019ba8:	d0df      	beq.n	8019b6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8019baa:	9a05      	ldr	r2, [sp, #20]
 8019bac:	bb42      	cbnz	r2, 8019c00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8019bae:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019bb2:	4298      	cmp	r0, r3
 8019bb4:	d001      	beq.n	8019bba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019bb6:	4550      	cmp	r0, sl
 8019bb8:	d1bd      	bne.n	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019bba:	8823      	ldrh	r3, [r4, #0]
 8019bbc:	8b21      	ldrh	r1, [r4, #24]
 8019bbe:	2b20      	cmp	r3, #32
 8019bc0:	d001      	beq.n	8019bc6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8019bc2:	4553      	cmp	r3, sl
 8019bc4:	d131      	bne.n	8019c2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8019bc6:	2e00      	cmp	r6, #0
 8019bc8:	bf0a      	itet	eq
 8019bca:	460d      	moveq	r5, r1
 8019bcc:	4630      	movne	r0, r6
 8019bce:	2001      	moveq	r0, #1
 8019bd0:	440a      	add	r2, r1
 8019bd2:	8aa3      	ldrh	r3, [r4, #20]
 8019bd4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019bd8:	b292      	uxth	r2, r2
 8019bda:	8322      	strh	r2, [r4, #24]
 8019bdc:	4413      	add	r3, r2
 8019bde:	2f00      	cmp	r7, #0
 8019be0:	d03a      	beq.n	8019c58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019be2:	f1bb 0f00 	cmp.w	fp, #0
 8019be6:	d102      	bne.n	8019bee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8019be8:	9903      	ldr	r1, [sp, #12]
 8019bea:	b301      	cbz	r1, 8019c2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019bec:	b1f8      	cbz	r0, 8019c2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019bee:	8ba1      	ldrh	r1, [r4, #28]
 8019bf0:	4419      	add	r1, r3
 8019bf2:	458c      	cmp	ip, r1
 8019bf4:	da2a      	bge.n	8019c4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019bf6:	8a61      	ldrh	r1, [r4, #18]
 8019bf8:	b341      	cbz	r1, 8019c4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019bfa:	4563      	cmp	r3, ip
 8019bfc:	dd9b      	ble.n	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019bfe:	e01c      	b.n	8019c3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8019c00:	8893      	ldrh	r3, [r2, #4]
 8019c02:	8023      	strh	r3, [r4, #0]
 8019c04:	f892 800d 	ldrb.w	r8, [r2, #13]
 8019c08:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019c0c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019c10:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019c14:	ea48 0800 	orr.w	r8, r8, r0
 8019c18:	68e0      	ldr	r0, [r4, #12]
 8019c1a:	6803      	ldr	r3, [r0, #0]
 8019c1c:	4649      	mov	r1, r9
 8019c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c20:	4798      	blx	r3
 8019c22:	eb08 0200 	add.w	r2, r8, r0
 8019c26:	b292      	uxth	r2, r2
 8019c28:	e7c7      	b.n	8019bba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019c2a:	2000      	movs	r0, #0
 8019c2c:	e7d0      	b.n	8019bd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8019c2e:	4563      	cmp	r3, ip
 8019c30:	dd81      	ble.n	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019c32:	8a63      	ldrh	r3, [r4, #18]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	f43f af7e 	beq.w	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019c3a:	2301      	movs	r3, #1
 8019c3c:	77a3      	strb	r3, [r4, #30]
 8019c3e:	8ba2      	ldrh	r2, [r4, #28]
 8019c40:	8b63      	ldrh	r3, [r4, #26]
 8019c42:	4413      	add	r3, r2
 8019c44:	8363      	strh	r3, [r4, #26]
 8019c46:	b007      	add	sp, #28
 8019c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	4611      	mov	r1, r2
 8019c50:	4620      	mov	r0, r4
 8019c52:	f7ff ff42 	bl	8019ada <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019c56:	e76e      	b.n	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019c58:	4563      	cmp	r3, ip
 8019c5a:	dd14      	ble.n	8019c86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8019c5c:	9b02      	ldr	r3, [sp, #8]
 8019c5e:	b113      	cbz	r3, 8019c66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8019c60:	2301      	movs	r3, #1
 8019c62:	460a      	mov	r2, r1
 8019c64:	e783      	b.n	8019b6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8019c66:	9b01      	ldr	r3, [sp, #4]
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	f43f af64 	beq.w	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019c6e:	2800      	cmp	r0, #0
 8019c70:	f47f af61 	bne.w	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019c74:	b116      	cbz	r6, 8019c7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8019c76:	2301      	movs	r3, #1
 8019c78:	462a      	mov	r2, r5
 8019c7a:	e779      	b.n	8019b70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8019c7c:	8a63      	ldrh	r3, [r4, #18]
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	f43f af59 	beq.w	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019c84:	e7df      	b.n	8019c46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019c86:	2800      	cmp	r0, #0
 8019c88:	f47f af55 	bne.w	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019c8c:	2e00      	cmp	r6, #0
 8019c8e:	f43f af52 	beq.w	8019b36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019c92:	2301      	movs	r3, #1
 8019c94:	462a      	mov	r2, r5
 8019c96:	e7db      	b.n	8019c50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08019c98 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8019c98:	b530      	push	{r4, r5, lr}
 8019c9a:	4605      	mov	r5, r0
 8019c9c:	b08b      	sub	sp, #44	; 0x2c
 8019c9e:	b191      	cbz	r1, 8019cc6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8019ca0:	e9cd 3100 	strd	r3, r1, [sp]
 8019ca4:	4613      	mov	r3, r2
 8019ca6:	4601      	mov	r1, r0
 8019ca8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8019cac:	a802      	add	r0, sp, #8
 8019cae:	f7ff fd0d 	bl	80196cc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019cb2:	2401      	movs	r4, #1
 8019cb4:	2100      	movs	r1, #0
 8019cb6:	a802      	add	r0, sp, #8
 8019cb8:	f7ff ff1f 	bl	8019afa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019cbc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019cc0:	b163      	cbz	r3, 8019cdc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8019cc2:	3401      	adds	r4, #1
 8019cc4:	e7f6      	b.n	8019cb4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8019cc6:	f002 fcc7 	bl	801c658 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019cca:	2401      	movs	r4, #1
 8019ccc:	280a      	cmp	r0, #10
 8019cce:	4628      	mov	r0, r5
 8019cd0:	bf08      	it	eq
 8019cd2:	3401      	addeq	r4, #1
 8019cd4:	f002 fcc0 	bl	801c658 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	d1f7      	bne.n	8019ccc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8019cdc:	b2a0      	uxth	r0, r4
 8019cde:	b00b      	add	sp, #44	; 0x2c
 8019ce0:	bd30      	pop	{r4, r5, pc}

08019ce2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019ce2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ce6:	b0db      	sub	sp, #364	; 0x16c
 8019ce8:	4689      	mov	r9, r1
 8019cea:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8019cee:	900a      	str	r0, [sp, #40]	; 0x28
 8019cf0:	461c      	mov	r4, r3
 8019cf2:	f1ba 0f00 	cmp.w	sl, #0
 8019cf6:	f000 80a5 	beq.w	8019e44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	f000 80a1 	beq.w	8019e44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019d02:	7ba3      	ldrb	r3, [r4, #14]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	f000 809d 	beq.w	8019e44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019d0a:	6810      	ldr	r0, [r2, #0]
 8019d0c:	6851      	ldr	r1, [r2, #4]
 8019d0e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019d12:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019d16:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8019d1a:	4643      	mov	r3, r8
 8019d1c:	c303      	stmia	r3!, {r0, r1}
 8019d1e:	2500      	movs	r5, #0
 8019d20:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8019d24:	79a2      	ldrb	r2, [r4, #6]
 8019d26:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019d2a:	a90e      	add	r1, sp, #56	; 0x38
 8019d2c:	4640      	mov	r0, r8
 8019d2e:	950e      	str	r5, [sp, #56]	; 0x38
 8019d30:	f7ff fd42 	bl	80197b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019d34:	a90e      	add	r1, sp, #56	; 0x38
 8019d36:	4608      	mov	r0, r1
 8019d38:	79a2      	ldrb	r2, [r4, #6]
 8019d3a:	af18      	add	r7, sp, #96	; 0x60
 8019d3c:	f7ff fd3c 	bl	80197b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019d40:	4638      	mov	r0, r7
 8019d42:	f002 f852 	bl	801bdea <_ZN8touchgfx12TextProviderC1Ev>
 8019d46:	6820      	ldr	r0, [r4, #0]
 8019d48:	6803      	ldr	r3, [r0, #0]
 8019d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d4c:	4798      	blx	r3
 8019d4e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019d50:	4603      	mov	r3, r0
 8019d52:	4651      	mov	r1, sl
 8019d54:	4638      	mov	r0, r7
 8019d56:	f002 f88d 	bl	801be74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019d5a:	6820      	ldr	r0, [r4, #0]
 8019d5c:	7923      	ldrb	r3, [r4, #4]
 8019d5e:	9308      	str	r3, [sp, #32]
 8019d60:	6803      	ldr	r3, [r0, #0]
 8019d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d64:	4798      	blx	r3
 8019d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d6a:	181e      	adds	r6, r3, r0
 8019d6c:	42ae      	cmp	r6, r5
 8019d6e:	dd06      	ble.n	8019d7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8019d70:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8019d74:	4282      	cmp	r2, r0
 8019d76:	bfa4      	itt	ge
 8019d78:	189d      	addge	r5, r3, r2
 8019d7a:	fb95 f5f6 	sdivge	r5, r5, r6
 8019d7e:	a82e      	add	r0, sp, #184	; 0xb8
 8019d80:	f002 f833 	bl	801bdea <_ZN8touchgfx12TextProviderC1Ev>
 8019d84:	7c23      	ldrb	r3, [r4, #16]
 8019d86:	b14b      	cbz	r3, 8019d9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8019d88:	6820      	ldr	r0, [r4, #0]
 8019d8a:	6803      	ldr	r3, [r0, #0]
 8019d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d8e:	4798      	blx	r3
 8019d90:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019d92:	4603      	mov	r3, r0
 8019d94:	4651      	mov	r1, sl
 8019d96:	a82e      	add	r0, sp, #184	; 0xb8
 8019d98:	f002 f86c 	bl	801be74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019d9c:	7c21      	ldrb	r1, [r4, #16]
 8019d9e:	9101      	str	r1, [sp, #4]
 8019da0:	6821      	ldr	r1, [r4, #0]
 8019da2:	7963      	ldrb	r3, [r4, #5]
 8019da4:	9100      	str	r1, [sp, #0]
 8019da6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8019daa:	a92e      	add	r1, sp, #184	; 0xb8
 8019dac:	a810      	add	r0, sp, #64	; 0x40
 8019dae:	f7ff fc8d 	bl	80196cc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019db2:	7c23      	ldrb	r3, [r4, #16]
 8019db4:	b9bb      	cbnz	r3, 8019de6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8019db6:	fa1f fa86 	uxth.w	sl, r6
 8019dba:	2d00      	cmp	r5, #0
 8019dbc:	dd45      	ble.n	8019e4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8019dbe:	4638      	mov	r0, r7
 8019dc0:	f002 fc4a 	bl	801c658 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019dc4:	2800      	cmp	r0, #0
 8019dc6:	d03d      	beq.n	8019e44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019dc8:	280a      	cmp	r0, #10
 8019dca:	d1f6      	bne.n	8019dba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8019dcc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019dd0:	4453      	add	r3, sl
 8019dd2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019dd6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019dda:	eba3 030a 	sub.w	r3, r3, sl
 8019dde:	3d01      	subs	r5, #1
 8019de0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019de4:	e7e9      	b.n	8019dba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8019de6:	0073      	lsls	r3, r6, #1
 8019de8:	9309      	str	r3, [sp, #36]	; 0x24
 8019dea:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8019dee:	fa1f fa86 	uxth.w	sl, r6
 8019df2:	2d00      	cmp	r5, #0
 8019df4:	dd29      	ble.n	8019e4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8019df6:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019dfc:	428b      	cmp	r3, r1
 8019dfe:	bfd4      	ite	le
 8019e00:	2100      	movle	r1, #0
 8019e02:	2101      	movgt	r1, #1
 8019e04:	a810      	add	r0, sp, #64	; 0x40
 8019e06:	f7ff fe78 	bl	8019afa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019e0a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8019e0e:	3b01      	subs	r3, #1
 8019e10:	b29b      	uxth	r3, r3
 8019e12:	455b      	cmp	r3, fp
 8019e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8019e16:	d005      	beq.n	8019e24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8019e18:	7961      	ldrb	r1, [r4, #5]
 8019e1a:	4638      	mov	r0, r7
 8019e1c:	f7fa fadc 	bl	80143d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e22:	e7f4      	b.n	8019e0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8019e24:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019e28:	4453      	add	r3, sl
 8019e2a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019e2e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019e32:	eba3 030a 	sub.w	r3, r3, sl
 8019e36:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019e3a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019e3e:	3d01      	subs	r5, #1
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d1d6      	bne.n	8019df2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8019e44:	b05b      	add	sp, #364	; 0x16c
 8019e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e4a:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8019e4e:	ad44      	add	r5, sp, #272	; 0x110
 8019e50:	f04f 0b00 	mov.w	fp, #0
 8019e54:	7c23      	ldrb	r3, [r4, #16]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d067      	beq.n	8019f2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8019e5a:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019e5e:	458a      	cmp	sl, r1
 8019e60:	bfd4      	ite	le
 8019e62:	2100      	movle	r1, #0
 8019e64:	2101      	movgt	r1, #1
 8019e66:	a810      	add	r0, sp, #64	; 0x40
 8019e68:	f7ff fe47 	bl	8019afa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019e6c:	9b08      	ldr	r3, [sp, #32]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d056      	beq.n	8019f20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019e72:	7c23      	ldrb	r3, [r4, #16]
 8019e74:	9309      	str	r3, [sp, #36]	; 0x24
 8019e76:	2258      	movs	r2, #88	; 0x58
 8019e78:	4639      	mov	r1, r7
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	f00f fb36 	bl	80294ec <memcpy>
 8019e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d059      	beq.n	8019f3a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8019e86:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8019e8a:	7922      	ldrb	r2, [r4, #4]
 8019e8c:	2a01      	cmp	r2, #1
 8019e8e:	d13d      	bne.n	8019f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8019e90:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8019e94:	1ac0      	subs	r0, r0, r3
 8019e96:	2302      	movs	r3, #2
 8019e98:	fb90 f0f3 	sdiv	r0, r0, r3
 8019e9c:	b200      	sxth	r0, r0
 8019e9e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019ea2:	4418      	add	r0, r3
 8019ea4:	7c23      	ldrb	r3, [r4, #16]
 8019ea6:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d03a      	beq.n	8019f24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8019eae:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8019eb2:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8019eb6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8019eba:	9500      	str	r5, [sp, #0]
 8019ebc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019ec0:	e9cd b703 	strd	fp, r7, [sp, #12]
 8019ec4:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8019ec8:	464a      	mov	r2, r9
 8019eca:	2100      	movs	r1, #0
 8019ecc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019ece:	f7ff fca4 	bl	801981a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019ed2:	2800      	cmp	r0, #0
 8019ed4:	d1b6      	bne.n	8019e44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019ed6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019eda:	b2b2      	uxth	r2, r6
 8019edc:	4611      	mov	r1, r2
 8019ede:	4413      	add	r3, r2
 8019ee0:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8019ee4:	1a52      	subs	r2, r2, r1
 8019ee6:	7c21      	ldrb	r1, [r4, #16]
 8019ee8:	b21b      	sxth	r3, r3
 8019eea:	b212      	sxth	r2, r2
 8019eec:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019ef0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019ef4:	b109      	cbz	r1, 8019efa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8019ef6:	42b2      	cmp	r2, r6
 8019ef8:	dba4      	blt.n	8019e44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019efa:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8019efe:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019f02:	440a      	add	r2, r1
 8019f04:	b212      	sxth	r2, r2
 8019f06:	4293      	cmp	r3, r2
 8019f08:	dda4      	ble.n	8019e54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8019f0a:	e79b      	b.n	8019e44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019f0c:	2a02      	cmp	r2, #2
 8019f0e:	d105      	bne.n	8019f1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8019f10:	7be2      	ldrb	r2, [r4, #15]
 8019f12:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8019f16:	1a80      	subs	r0, r0, r2
 8019f18:	1ac0      	subs	r0, r0, r3
 8019f1a:	e7bf      	b.n	8019e9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8019f1c:	2000      	movs	r0, #0
 8019f1e:	e7be      	b.n	8019e9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8019f20:	7be0      	ldrb	r0, [r4, #15]
 8019f22:	e7bc      	b.n	8019e9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8019f24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019f28:	e7c3      	b.n	8019eb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8019f2a:	9b08      	ldr	r3, [sp, #32]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d0f7      	beq.n	8019f20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019f30:	2258      	movs	r2, #88	; 0x58
 8019f32:	4639      	mov	r1, r7
 8019f34:	4628      	mov	r0, r5
 8019f36:	f00f fad9 	bl	80294ec <memcpy>
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019f40:	6821      	ldr	r1, [r4, #0]
 8019f42:	4628      	mov	r0, r5
 8019f44:	f7ff fbfc 	bl	8019740 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019f48:	b203      	sxth	r3, r0
 8019f4a:	e79e      	b.n	8019e8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08019f4c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019f4c:	b510      	push	{r4, lr}
 8019f4e:	2b02      	cmp	r3, #2
 8019f50:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019f54:	d00b      	beq.n	8019f6e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8019f56:	2b03      	cmp	r3, #3
 8019f58:	d00e      	beq.n	8019f78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8019f5a:	2b01      	cmp	r3, #1
 8019f5c:	d001      	beq.n	8019f62 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8019f5e:	1860      	adds	r0, r4, r1
 8019f60:	bd10      	pop	{r4, pc}
 8019f62:	8880      	ldrh	r0, [r0, #4]
 8019f64:	4420      	add	r0, r4
 8019f66:	b200      	sxth	r0, r0
 8019f68:	1a80      	subs	r0, r0, r2
 8019f6a:	3801      	subs	r0, #1
 8019f6c:	e7f8      	b.n	8019f60 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8019f6e:	8880      	ldrh	r0, [r0, #4]
 8019f70:	4420      	add	r0, r4
 8019f72:	b200      	sxth	r0, r0
 8019f74:	1a40      	subs	r0, r0, r1
 8019f76:	e7f8      	b.n	8019f6a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019f78:	18a0      	adds	r0, r4, r2
 8019f7a:	e7f1      	b.n	8019f60 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08019f7c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019f7c:	b510      	push	{r4, lr}
 8019f7e:	2b02      	cmp	r3, #2
 8019f80:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8019f84:	d006      	beq.n	8019f94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8019f86:	2b03      	cmp	r3, #3
 8019f88:	d00a      	beq.n	8019fa0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019f8a:	2b01      	cmp	r3, #1
 8019f8c:	bf14      	ite	ne
 8019f8e:	18a0      	addne	r0, r4, r2
 8019f90:	1860      	addeq	r0, r4, r1
 8019f92:	bd10      	pop	{r4, pc}
 8019f94:	88c0      	ldrh	r0, [r0, #6]
 8019f96:	4420      	add	r0, r4
 8019f98:	b200      	sxth	r0, r0
 8019f9a:	1a80      	subs	r0, r0, r2
 8019f9c:	3801      	subs	r0, #1
 8019f9e:	e7f8      	b.n	8019f92 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8019fa0:	88c0      	ldrh	r0, [r0, #6]
 8019fa2:	4420      	add	r0, r4
 8019fa4:	b200      	sxth	r0, r0
 8019fa6:	1a40      	subs	r0, r0, r1
 8019fa8:	e7f8      	b.n	8019f9c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08019fac <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019fac:	4b01      	ldr	r3, [pc, #4]	; (8019fb4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8019fae:	2200      	movs	r2, #0
 8019fb0:	601a      	str	r2, [r3, #0]
 8019fb2:	4770      	bx	lr
 8019fb4:	2000b73c 	.word	0x2000b73c

08019fb8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019fb8:	4603      	mov	r3, r0
 8019fba:	b1c8      	cbz	r0, 8019ff0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019fbc:	0c02      	lsrs	r2, r0, #16
 8019fbe:	0412      	lsls	r2, r2, #16
 8019fc0:	b9a2      	cbnz	r2, 8019fec <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8019fc2:	0403      	lsls	r3, r0, #16
 8019fc4:	2010      	movs	r0, #16
 8019fc6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019fca:	bf04      	itt	eq
 8019fcc:	021b      	lsleq	r3, r3, #8
 8019fce:	3008      	addeq	r0, #8
 8019fd0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019fd4:	bf04      	itt	eq
 8019fd6:	011b      	lsleq	r3, r3, #4
 8019fd8:	3004      	addeq	r0, #4
 8019fda:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019fde:	bf04      	itt	eq
 8019fe0:	009b      	lsleq	r3, r3, #2
 8019fe2:	3002      	addeq	r0, #2
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	db04      	blt.n	8019ff2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019fe8:	3001      	adds	r0, #1
 8019fea:	4770      	bx	lr
 8019fec:	2000      	movs	r0, #0
 8019fee:	e7ea      	b.n	8019fc6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019ff0:	2020      	movs	r0, #32
 8019ff2:	4770      	bx	lr

08019ff4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ff8:	b087      	sub	sp, #28
 8019ffa:	4681      	mov	r9, r0
 8019ffc:	4698      	mov	r8, r3
 8019ffe:	4610      	mov	r0, r2
 801a000:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a004:	460d      	mov	r5, r1
 801a006:	b981      	cbnz	r1, 801a02a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801a008:	b14b      	cbz	r3, 801a01e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801a00a:	460b      	mov	r3, r1
 801a00c:	e9cd 4700 	strd	r4, r7, [sp]
 801a010:	464a      	mov	r2, r9
 801a012:	4641      	mov	r1, r8
 801a014:	f7ff ffee 	bl	8019ff4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a018:	b007      	add	sp, #28
 801a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a01e:	f04f 33ff 	mov.w	r3, #4294967295
 801a022:	603b      	str	r3, [r7, #0]
 801a024:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a028:	e7f6      	b.n	801a018 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a02a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801a02e:	d107      	bne.n	801a040 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801a030:	fb09 f602 	mul.w	r6, r9, r2
 801a034:	fbb6 f0f4 	udiv	r0, r6, r4
 801a038:	fb04 6610 	mls	r6, r4, r0, r6
 801a03c:	603e      	str	r6, [r7, #0]
 801a03e:	e7eb      	b.n	801a018 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a040:	2601      	movs	r6, #1
 801a042:	408e      	lsls	r6, r1
 801a044:	3e01      	subs	r6, #1
 801a046:	4016      	ands	r6, r2
 801a048:	fa09 fb01 	lsl.w	fp, r9, r1
 801a04c:	4630      	mov	r0, r6
 801a04e:	fbbb f3f4 	udiv	r3, fp, r4
 801a052:	9302      	str	r3, [sp, #8]
 801a054:	fb0a f303 	mul.w	r3, sl, r3
 801a058:	9303      	str	r3, [sp, #12]
 801a05a:	f7ff ffad 	bl	8019fb8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a05e:	464a      	mov	r2, r9
 801a060:	460b      	mov	r3, r1
 801a062:	e9cd 4700 	strd	r4, r7, [sp]
 801a066:	4601      	mov	r1, r0
 801a068:	4630      	mov	r0, r6
 801a06a:	f7ff ffc3 	bl	8019ff4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a06e:	9b02      	ldr	r3, [sp, #8]
 801a070:	fb04 bb13 	mls	fp, r4, r3, fp
 801a074:	4606      	mov	r6, r0
 801a076:	4658      	mov	r0, fp
 801a078:	eb05 0108 	add.w	r1, r5, r8
 801a07c:	f7ff ff9c 	bl	8019fb8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a080:	ab05      	add	r3, sp, #20
 801a082:	e9cd 4300 	strd	r4, r3, [sp]
 801a086:	465a      	mov	r2, fp
 801a088:	4603      	mov	r3, r0
 801a08a:	4650      	mov	r0, sl
 801a08c:	f7ff ffb2 	bl	8019ff4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a090:	6839      	ldr	r1, [r7, #0]
 801a092:	9a05      	ldr	r2, [sp, #20]
 801a094:	9b03      	ldr	r3, [sp, #12]
 801a096:	4411      	add	r1, r2
 801a098:	fbb1 f2f4 	udiv	r2, r1, r4
 801a09c:	18d3      	adds	r3, r2, r3
 801a09e:	441e      	add	r6, r3
 801a0a0:	fb04 1412 	mls	r4, r4, r2, r1
 801a0a4:	4430      	add	r0, r6
 801a0a6:	603c      	str	r4, [r7, #0]
 801a0a8:	e7b6      	b.n	801a018 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801a0aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a0aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a0ae:	b085      	sub	sp, #20
 801a0b0:	f1b0 0900 	subs.w	r9, r0, #0
 801a0b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a0b6:	461d      	mov	r5, r3
 801a0b8:	bfbf      	itttt	lt
 801a0ba:	6823      	ldrlt	r3, [r4, #0]
 801a0bc:	425b      	neglt	r3, r3
 801a0be:	f1c9 0900 	rsblt	r9, r9, #0
 801a0c2:	6023      	strlt	r3, [r4, #0]
 801a0c4:	bfb4      	ite	lt
 801a0c6:	f04f 36ff 	movlt.w	r6, #4294967295
 801a0ca:	2601      	movge	r6, #1
 801a0cc:	2a00      	cmp	r2, #0
 801a0ce:	4617      	mov	r7, r2
 801a0d0:	da04      	bge.n	801a0dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a0d2:	6823      	ldr	r3, [r4, #0]
 801a0d4:	425b      	negs	r3, r3
 801a0d6:	4257      	negs	r7, r2
 801a0d8:	4276      	negs	r6, r6
 801a0da:	6023      	str	r3, [r4, #0]
 801a0dc:	2d00      	cmp	r5, #0
 801a0de:	4638      	mov	r0, r7
 801a0e0:	bfba      	itte	lt
 801a0e2:	426d      	neglt	r5, r5
 801a0e4:	f04f 38ff 	movlt.w	r8, #4294967295
 801a0e8:	f04f 0801 	movge.w	r8, #1
 801a0ec:	f7ff ff64 	bl	8019fb8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a0f0:	ab03      	add	r3, sp, #12
 801a0f2:	e9cd 5300 	strd	r5, r3, [sp]
 801a0f6:	463a      	mov	r2, r7
 801a0f8:	4603      	mov	r3, r0
 801a0fa:	4648      	mov	r0, r9
 801a0fc:	f7ff ff7a 	bl	8019ff4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a100:	6823      	ldr	r3, [r4, #0]
 801a102:	9a03      	ldr	r2, [sp, #12]
 801a104:	4546      	cmp	r6, r8
 801a106:	441a      	add	r2, r3
 801a108:	fb92 f3f5 	sdiv	r3, r2, r5
 801a10c:	4418      	add	r0, r3
 801a10e:	bf18      	it	ne
 801a110:	4240      	negne	r0, r0
 801a112:	fb05 2313 	mls	r3, r5, r3, r2
 801a116:	1c72      	adds	r2, r6, #1
 801a118:	6023      	str	r3, [r4, #0]
 801a11a:	d105      	bne.n	801a128 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	f1c3 0200 	rsb	r2, r3, #0
 801a122:	db0b      	blt.n	801a13c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a124:	6022      	str	r2, [r4, #0]
 801a126:	e006      	b.n	801a136 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a128:	2e01      	cmp	r6, #1
 801a12a:	d104      	bne.n	801a136 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	da02      	bge.n	801a136 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a130:	442b      	add	r3, r5
 801a132:	3801      	subs	r0, #1
 801a134:	6023      	str	r3, [r4, #0]
 801a136:	b005      	add	sp, #20
 801a138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a13c:	3801      	subs	r0, #1
 801a13e:	1b52      	subs	r2, r2, r5
 801a140:	e7f0      	b.n	801a124 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801a144 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a144:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a148:	4c1c      	ldr	r4, [pc, #112]	; (801a1bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a14a:	6807      	ldr	r7, [r0, #0]
 801a14c:	69a3      	ldr	r3, [r4, #24]
 801a14e:	4605      	mov	r5, r0
 801a150:	b92b      	cbnz	r3, 801a15e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a152:	6840      	ldr	r0, [r0, #4]
 801a154:	e9c5 7000 	strd	r7, r0, [r5]
 801a158:	b004      	add	sp, #16
 801a15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a15e:	68a2      	ldr	r2, [r4, #8]
 801a160:	6820      	ldr	r0, [r4, #0]
 801a162:	ae04      	add	r6, sp, #16
 801a164:	f04f 0802 	mov.w	r8, #2
 801a168:	fb93 f1f8 	sdiv	r1, r3, r8
 801a16c:	440a      	add	r2, r1
 801a16e:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a172:	69e1      	ldr	r1, [r4, #28]
 801a174:	9600      	str	r6, [sp, #0]
 801a176:	463a      	mov	r2, r7
 801a178:	f7ff ff97 	bl	801a0aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a17c:	69a3      	ldr	r3, [r4, #24]
 801a17e:	686a      	ldr	r2, [r5, #4]
 801a180:	6a21      	ldr	r1, [r4, #32]
 801a182:	9600      	str	r6, [sp, #0]
 801a184:	4607      	mov	r7, r0
 801a186:	6860      	ldr	r0, [r4, #4]
 801a188:	f7ff ff8f 	bl	801a0aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a18c:	6962      	ldr	r2, [r4, #20]
 801a18e:	69a3      	ldr	r3, [r4, #24]
 801a190:	fb93 f8f8 	sdiv	r8, r3, r8
 801a194:	4442      	add	r2, r8
 801a196:	9203      	str	r2, [sp, #12]
 801a198:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a19a:	682a      	ldr	r2, [r5, #0]
 801a19c:	9600      	str	r6, [sp, #0]
 801a19e:	4407      	add	r7, r0
 801a1a0:	68e0      	ldr	r0, [r4, #12]
 801a1a2:	f7ff ff82 	bl	801a0aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a1a6:	9600      	str	r6, [sp, #0]
 801a1a8:	4680      	mov	r8, r0
 801a1aa:	69a3      	ldr	r3, [r4, #24]
 801a1ac:	686a      	ldr	r2, [r5, #4]
 801a1ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a1b0:	6920      	ldr	r0, [r4, #16]
 801a1b2:	f7ff ff7a 	bl	801a0aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a1b6:	4440      	add	r0, r8
 801a1b8:	e7cc      	b.n	801a154 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a1ba:	bf00      	nop
 801a1bc:	2000b740 	.word	0x2000b740

0801a1c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a1c0:	b510      	push	{r4, lr}
 801a1c2:	4b07      	ldr	r3, [pc, #28]	; (801a1e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a1c4:	781b      	ldrb	r3, [r3, #0]
 801a1c6:	2b01      	cmp	r3, #1
 801a1c8:	d108      	bne.n	801a1dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a1ca:	4b06      	ldr	r3, [pc, #24]	; (801a1e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a1cc:	880c      	ldrh	r4, [r1, #0]
 801a1ce:	881b      	ldrh	r3, [r3, #0]
 801a1d0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a1d4:	3b01      	subs	r3, #1
 801a1d6:	1b1b      	subs	r3, r3, r4
 801a1d8:	8003      	strh	r3, [r0, #0]
 801a1da:	800a      	strh	r2, [r1, #0]
 801a1dc:	bd10      	pop	{r4, pc}
 801a1de:	bf00      	nop
 801a1e0:	2000b72c 	.word	0x2000b72c
 801a1e4:	2000b730 	.word	0x2000b730

0801a1e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a1e8:	b510      	push	{r4, lr}
 801a1ea:	4b0a      	ldr	r3, [pc, #40]	; (801a214 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a1ec:	781b      	ldrb	r3, [r3, #0]
 801a1ee:	2b01      	cmp	r3, #1
 801a1f0:	d10e      	bne.n	801a210 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a1f2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a1f6:	8843      	ldrh	r3, [r0, #2]
 801a1f8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a1fc:	8044      	strh	r4, [r0, #2]
 801a1fe:	18ca      	adds	r2, r1, r3
 801a200:	4b05      	ldr	r3, [pc, #20]	; (801a218 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a202:	881b      	ldrh	r3, [r3, #0]
 801a204:	1a9b      	subs	r3, r3, r2
 801a206:	8003      	strh	r3, [r0, #0]
 801a208:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a20c:	80c3      	strh	r3, [r0, #6]
 801a20e:	8081      	strh	r1, [r0, #4]
 801a210:	bd10      	pop	{r4, pc}
 801a212:	bf00      	nop
 801a214:	2000b72c 	.word	0x2000b72c
 801a218:	2000b728 	.word	0x2000b728

0801a21c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a21c:	b510      	push	{r4, lr}
 801a21e:	4b07      	ldr	r3, [pc, #28]	; (801a23c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a220:	781b      	ldrb	r3, [r3, #0]
 801a222:	2b01      	cmp	r3, #1
 801a224:	d108      	bne.n	801a238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a226:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a22a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a22e:	8003      	strh	r3, [r0, #0]
 801a230:	8893      	ldrh	r3, [r2, #4]
 801a232:	3b01      	subs	r3, #1
 801a234:	1b1b      	subs	r3, r3, r4
 801a236:	800b      	strh	r3, [r1, #0]
 801a238:	bd10      	pop	{r4, pc}
 801a23a:	bf00      	nop
 801a23c:	2000b72c 	.word	0x2000b72c

0801a240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a240:	b513      	push	{r0, r1, r4, lr}
 801a242:	4b08      	ldr	r3, [pc, #32]	; (801a264 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a244:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a248:	4b07      	ldr	r3, [pc, #28]	; (801a268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801a24a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a24e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a252:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a256:	2400      	movs	r4, #0
 801a258:	466a      	mov	r2, sp
 801a25a:	9400      	str	r4, [sp, #0]
 801a25c:	f7ff ffde 	bl	801a21c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a260:	b002      	add	sp, #8
 801a262:	bd10      	pop	{r4, pc}
 801a264:	2000b728 	.word	0x2000b728
 801a268:	2000b72a 	.word	0x2000b72a

0801a26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a26c:	b510      	push	{r4, lr}
 801a26e:	4b0a      	ldr	r3, [pc, #40]	; (801a298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a270:	781b      	ldrb	r3, [r3, #0]
 801a272:	2b01      	cmp	r3, #1
 801a274:	460a      	mov	r2, r1
 801a276:	d10d      	bne.n	801a294 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a278:	8881      	ldrh	r1, [r0, #4]
 801a27a:	8803      	ldrh	r3, [r0, #0]
 801a27c:	440b      	add	r3, r1
 801a27e:	4601      	mov	r1, r0
 801a280:	3b01      	subs	r3, #1
 801a282:	f821 3b02 	strh.w	r3, [r1], #2
 801a286:	f7ff ffc9 	bl	801a21c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a28a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a28e:	88c2      	ldrh	r2, [r0, #6]
 801a290:	8082      	strh	r2, [r0, #4]
 801a292:	80c3      	strh	r3, [r0, #6]
 801a294:	bd10      	pop	{r4, pc}
 801a296:	bf00      	nop
 801a298:	2000b72c 	.word	0x2000b72c

0801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a29c:	b507      	push	{r0, r1, r2, lr}
 801a29e:	4b09      	ldr	r3, [pc, #36]	; (801a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a2a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a2a4:	4b08      	ldr	r3, [pc, #32]	; (801a2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801a2a6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a2aa:	2100      	movs	r1, #0
 801a2ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2b0:	9100      	str	r1, [sp, #0]
 801a2b2:	4669      	mov	r1, sp
 801a2b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a2b8:	f7ff ffd8 	bl	801a26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a2bc:	b003      	add	sp, #12
 801a2be:	f85d fb04 	ldr.w	pc, [sp], #4
 801a2c2:	bf00      	nop
 801a2c4:	2000b728 	.word	0x2000b728
 801a2c8:	2000b72a 	.word	0x2000b72a

0801a2cc <_ZN8touchgfx11Application13requestRedrawEv>:
 801a2cc:	4b06      	ldr	r3, [pc, #24]	; (801a2e8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a2ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a2d2:	4b06      	ldr	r3, [pc, #24]	; (801a2ec <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a2d4:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801a2d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2dc:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801a2e0:	2100      	movs	r1, #0
 801a2e2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801a2e6:	4770      	bx	lr
 801a2e8:	2000b728 	.word	0x2000b728
 801a2ec:	2000b72a 	.word	0x2000b72a

0801a2f0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a2f0:	4b03      	ldr	r3, [pc, #12]	; (801a300 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a2f2:	6818      	ldr	r0, [r3, #0]
 801a2f4:	b110      	cbz	r0, 801a2fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a2f6:	6803      	ldr	r3, [r0, #0]
 801a2f8:	699b      	ldr	r3, [r3, #24]
 801a2fa:	4718      	bx	r3
 801a2fc:	4770      	bx	lr
 801a2fe:	bf00      	nop
 801a300:	2000b770 	.word	0x2000b770

0801a304 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a304:	4770      	bx	lr
	...

0801a308 <_ZN8touchgfx11Application4drawEv>:
 801a308:	b507      	push	{r0, r1, r2, lr}
 801a30a:	4b09      	ldr	r3, [pc, #36]	; (801a330 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a30c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a310:	4b08      	ldr	r3, [pc, #32]	; (801a334 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a312:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a316:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a31a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a31e:	6803      	ldr	r3, [r0, #0]
 801a320:	2100      	movs	r1, #0
 801a322:	9100      	str	r1, [sp, #0]
 801a324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a326:	4669      	mov	r1, sp
 801a328:	4798      	blx	r3
 801a32a:	b003      	add	sp, #12
 801a32c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a330:	2000b728 	.word	0x2000b728
 801a334:	2000b72a 	.word	0x2000b72a

0801a338 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a338:	4b03      	ldr	r3, [pc, #12]	; (801a348 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a33a:	6818      	ldr	r0, [r3, #0]
 801a33c:	b110      	cbz	r0, 801a344 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a33e:	6803      	ldr	r3, [r0, #0]
 801a340:	69db      	ldr	r3, [r3, #28]
 801a342:	4718      	bx	r3
 801a344:	4770      	bx	lr
 801a346:	bf00      	nop
 801a348:	2000b770 	.word	0x2000b770

0801a34c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a34c:	4b03      	ldr	r3, [pc, #12]	; (801a35c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a34e:	6818      	ldr	r0, [r3, #0]
 801a350:	b110      	cbz	r0, 801a358 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a352:	6803      	ldr	r3, [r0, #0]
 801a354:	6a1b      	ldr	r3, [r3, #32]
 801a356:	4718      	bx	r3
 801a358:	4770      	bx	lr
 801a35a:	bf00      	nop
 801a35c:	2000b770 	.word	0x2000b770

0801a360 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a360:	4b03      	ldr	r3, [pc, #12]	; (801a370 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a362:	6818      	ldr	r0, [r3, #0]
 801a364:	b110      	cbz	r0, 801a36c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a366:	6803      	ldr	r3, [r0, #0]
 801a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a36a:	4718      	bx	r3
 801a36c:	4770      	bx	lr
 801a36e:	bf00      	nop
 801a370:	2000b770 	.word	0x2000b770

0801a374 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a374:	b570      	push	{r4, r5, r6, lr}
 801a376:	4d34      	ldr	r5, [pc, #208]	; (801a448 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801a378:	4604      	mov	r4, r0
 801a37a:	6828      	ldr	r0, [r5, #0]
 801a37c:	b140      	cbz	r0, 801a390 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a37e:	7a03      	ldrb	r3, [r0, #8]
 801a380:	b933      	cbnz	r3, 801a390 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a382:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a386:	6803      	ldr	r3, [r0, #0]
 801a388:	689b      	ldr	r3, [r3, #8]
 801a38a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a38e:	4718      	bx	r3
 801a390:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801a394:	b97b      	cbnz	r3, 801a3b6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a396:	b170      	cbz	r0, 801a3b6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a398:	7a03      	ldrb	r3, [r0, #8]
 801a39a:	b163      	cbz	r3, 801a3b6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a39c:	4b2b      	ldr	r3, [pc, #172]	; (801a44c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a39e:	6818      	ldr	r0, [r3, #0]
 801a3a0:	b110      	cbz	r0, 801a3a8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a3a2:	6803      	ldr	r3, [r0, #0]
 801a3a4:	691b      	ldr	r3, [r3, #16]
 801a3a6:	4798      	blx	r3
 801a3a8:	6828      	ldr	r0, [r5, #0]
 801a3aa:	6803      	ldr	r3, [r0, #0]
 801a3ac:	68db      	ldr	r3, [r3, #12]
 801a3ae:	4798      	blx	r3
 801a3b0:	2301      	movs	r3, #1
 801a3b2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a3b6:	2500      	movs	r5, #0
 801a3b8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a3bc:	42a8      	cmp	r0, r5
 801a3be:	dd0c      	ble.n	801a3da <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801a3c0:	1963      	adds	r3, r4, r5
 801a3c2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a3c6:	b132      	cbz	r2, 801a3d6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801a3c8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a3cc:	4413      	add	r3, r2
 801a3ce:	6858      	ldr	r0, [r3, #4]
 801a3d0:	6803      	ldr	r3, [r0, #0]
 801a3d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a3d4:	4798      	blx	r3
 801a3d6:	3501      	adds	r5, #1
 801a3d8:	e7ee      	b.n	801a3b8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a3da:	2300      	movs	r3, #0
 801a3dc:	461a      	mov	r2, r3
 801a3de:	4298      	cmp	r0, r3
 801a3e0:	d114      	bne.n	801a40c <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801a3e2:	1d25      	adds	r5, r4, #4
 801a3e4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801a3e8:	1e48      	subs	r0, r1, #1
 801a3ea:	b280      	uxth	r0, r0
 801a3ec:	4291      	cmp	r1, r2
 801a3ee:	dd24      	ble.n	801a43a <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801a3f0:	4288      	cmp	r0, r1
 801a3f2:	d2fb      	bcs.n	801a3ec <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801a3f4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801a3f8:	3304      	adds	r3, #4
 801a3fa:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801a3fe:	428b      	cmp	r3, r1
 801a400:	d018      	beq.n	801a434 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801a402:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801a406:	f843 6c04 	str.w	r6, [r3, #-4]
 801a40a:	e7f8      	b.n	801a3fe <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801a40c:	18e1      	adds	r1, r4, r3
 801a40e:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801a412:	b16d      	cbz	r5, 801a430 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801a414:	429a      	cmp	r2, r3
 801a416:	d00a      	beq.n	801a42e <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801a418:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801a41c:	4431      	add	r1, r6
 801a41e:	684e      	ldr	r6, [r1, #4]
 801a420:	b291      	uxth	r1, r2
 801a422:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a426:	604e      	str	r6, [r1, #4]
 801a428:	18a1      	adds	r1, r4, r2
 801a42a:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a42e:	3201      	adds	r2, #1
 801a430:	3301      	adds	r3, #1
 801a432:	e7d4      	b.n	801a3de <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801a434:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801a438:	e7d4      	b.n	801a3e4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801a43a:	4b04      	ldr	r3, [pc, #16]	; (801a44c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a43c:	6818      	ldr	r0, [r3, #0]
 801a43e:	b110      	cbz	r0, 801a446 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801a440:	6803      	ldr	r3, [r0, #0]
 801a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a444:	e7a1      	b.n	801a38a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a446:	bd70      	pop	{r4, r5, r6, pc}
 801a448:	2000b774 	.word	0x2000b774
 801a44c:	2000b770 	.word	0x2000b770

0801a450 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a450:	b570      	push	{r4, r5, r6, lr}
 801a452:	4606      	mov	r6, r0
 801a454:	460c      	mov	r4, r1
 801a456:	b929      	cbnz	r1, 801a464 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a458:	4b0c      	ldr	r3, [pc, #48]	; (801a48c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a45a:	4a0d      	ldr	r2, [pc, #52]	; (801a490 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a45c:	480d      	ldr	r0, [pc, #52]	; (801a494 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a45e:	2164      	movs	r1, #100	; 0x64
 801a460:	f00e ffc2 	bl	80293e8 <__assert_func>
 801a464:	4d0c      	ldr	r5, [pc, #48]	; (801a498 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a466:	2300      	movs	r3, #0
 801a468:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a46c:	6828      	ldr	r0, [r5, #0]
 801a46e:	b110      	cbz	r0, 801a476 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a470:	6803      	ldr	r3, [r0, #0]
 801a472:	695b      	ldr	r3, [r3, #20]
 801a474:	4798      	blx	r3
 801a476:	602c      	str	r4, [r5, #0]
 801a478:	6823      	ldr	r3, [r4, #0]
 801a47a:	4620      	mov	r0, r4
 801a47c:	68db      	ldr	r3, [r3, #12]
 801a47e:	4798      	blx	r3
 801a480:	6833      	ldr	r3, [r6, #0]
 801a482:	4630      	mov	r0, r6
 801a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a48a:	4718      	bx	r3
 801a48c:	0802fba8 	.word	0x0802fba8
 801a490:	0802fc78 	.word	0x0802fc78
 801a494:	0802fbb2 	.word	0x0802fbb2
 801a498:	2000b770 	.word	0x2000b770

0801a49c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a49c:	b510      	push	{r4, lr}
 801a49e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a4a2:	888a      	ldrh	r2, [r1, #4]
 801a4a4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a4a8:	4422      	add	r2, r4
 801a4aa:	b212      	sxth	r2, r2
 801a4ac:	4293      	cmp	r3, r2
 801a4ae:	da15      	bge.n	801a4dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a4b0:	8882      	ldrh	r2, [r0, #4]
 801a4b2:	4413      	add	r3, r2
 801a4b4:	b21b      	sxth	r3, r3
 801a4b6:	429c      	cmp	r4, r3
 801a4b8:	da10      	bge.n	801a4dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a4ba:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a4be:	88c9      	ldrh	r1, [r1, #6]
 801a4c0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a4c4:	4419      	add	r1, r3
 801a4c6:	b209      	sxth	r1, r1
 801a4c8:	428a      	cmp	r2, r1
 801a4ca:	da07      	bge.n	801a4dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a4cc:	88c0      	ldrh	r0, [r0, #6]
 801a4ce:	4410      	add	r0, r2
 801a4d0:	b200      	sxth	r0, r0
 801a4d2:	4283      	cmp	r3, r0
 801a4d4:	bfac      	ite	ge
 801a4d6:	2000      	movge	r0, #0
 801a4d8:	2001      	movlt	r0, #1
 801a4da:	bd10      	pop	{r4, pc}
 801a4dc:	2000      	movs	r0, #0
 801a4de:	e7fc      	b.n	801a4da <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a4e0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a4e0:	b570      	push	{r4, r5, r6, lr}
 801a4e2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a4e6:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a4ea:	42ac      	cmp	r4, r5
 801a4ec:	db18      	blt.n	801a520 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a4ee:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a4f2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a4f6:	429a      	cmp	r2, r3
 801a4f8:	db12      	blt.n	801a520 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a4fa:	8886      	ldrh	r6, [r0, #4]
 801a4fc:	4435      	add	r5, r6
 801a4fe:	888e      	ldrh	r6, [r1, #4]
 801a500:	4434      	add	r4, r6
 801a502:	b22d      	sxth	r5, r5
 801a504:	b224      	sxth	r4, r4
 801a506:	42a5      	cmp	r5, r4
 801a508:	db0a      	blt.n	801a520 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a50a:	88c0      	ldrh	r0, [r0, #6]
 801a50c:	4418      	add	r0, r3
 801a50e:	88cb      	ldrh	r3, [r1, #6]
 801a510:	441a      	add	r2, r3
 801a512:	b200      	sxth	r0, r0
 801a514:	b212      	sxth	r2, r2
 801a516:	4290      	cmp	r0, r2
 801a518:	bfb4      	ite	lt
 801a51a:	2000      	movlt	r0, #0
 801a51c:	2001      	movge	r0, #1
 801a51e:	bd70      	pop	{r4, r5, r6, pc}
 801a520:	2000      	movs	r0, #0
 801a522:	e7fc      	b.n	801a51e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801a524 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a526:	4604      	mov	r4, r0
 801a528:	4608      	mov	r0, r1
 801a52a:	460d      	mov	r5, r1
 801a52c:	f7fc ffd9 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a530:	b978      	cbnz	r0, 801a552 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801a532:	4620      	mov	r0, r4
 801a534:	f7fc ffd5 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a538:	f9b5 6000 	ldrsh.w	r6, [r5]
 801a53c:	b150      	cbz	r0, 801a554 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801a53e:	8026      	strh	r6, [r4, #0]
 801a540:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a544:	8063      	strh	r3, [r4, #2]
 801a546:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801a54a:	80a3      	strh	r3, [r4, #4]
 801a54c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a550:	80e3      	strh	r3, [r4, #6]
 801a552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a554:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a558:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a55c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a560:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801a564:	88ed      	ldrh	r5, [r5, #6]
 801a566:	42b1      	cmp	r1, r6
 801a568:	460f      	mov	r7, r1
 801a56a:	bfa8      	it	ge
 801a56c:	4637      	movge	r7, r6
 801a56e:	4293      	cmp	r3, r2
 801a570:	4618      	mov	r0, r3
 801a572:	4466      	add	r6, ip
 801a574:	bfa8      	it	ge
 801a576:	4610      	movge	r0, r2
 801a578:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a57c:	8027      	strh	r7, [r4, #0]
 801a57e:	442a      	add	r2, r5
 801a580:	88e5      	ldrh	r5, [r4, #6]
 801a582:	8060      	strh	r0, [r4, #2]
 801a584:	4461      	add	r1, ip
 801a586:	442b      	add	r3, r5
 801a588:	b236      	sxth	r6, r6
 801a58a:	b209      	sxth	r1, r1
 801a58c:	b212      	sxth	r2, r2
 801a58e:	b21b      	sxth	r3, r3
 801a590:	428e      	cmp	r6, r1
 801a592:	bfac      	ite	ge
 801a594:	ebc7 0106 	rsbge	r1, r7, r6
 801a598:	ebc7 0101 	rsblt	r1, r7, r1
 801a59c:	429a      	cmp	r2, r3
 801a59e:	bfac      	ite	ge
 801a5a0:	ebc0 0202 	rsbge	r2, r0, r2
 801a5a4:	ebc0 0203 	rsblt	r2, r0, r3
 801a5a8:	80a1      	strh	r1, [r4, #4]
 801a5aa:	80e2      	strh	r2, [r4, #6]
 801a5ac:	e7d1      	b.n	801a552 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801a5b0 <_ZN8touchgfx11Application11getInstanceEv>:
 801a5b0:	4b01      	ldr	r3, [pc, #4]	; (801a5b8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a5b2:	6818      	ldr	r0, [r3, #0]
 801a5b4:	4770      	bx	lr
 801a5b6:	bf00      	nop
 801a5b8:	2000b780 	.word	0x2000b780

0801a5bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a5bc:	2300      	movs	r3, #0
 801a5be:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a5c2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a5c6:	30a8      	adds	r0, #168	; 0xa8
 801a5c8:	f802 3b01 	strb.w	r3, [r2], #1
 801a5cc:	4282      	cmp	r2, r0
 801a5ce:	d1fb      	bne.n	801a5c8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a5d0:	4770      	bx	lr

0801a5d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a5d8:	2200      	movs	r2, #0
 801a5da:	801a      	strh	r2, [r3, #0]
 801a5dc:	805a      	strh	r2, [r3, #2]
 801a5de:	809a      	strh	r2, [r3, #4]
 801a5e0:	80da      	strh	r2, [r3, #6]
 801a5e2:	3308      	adds	r3, #8
 801a5e4:	428b      	cmp	r3, r1
 801a5e6:	d1f8      	bne.n	801a5da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a5e8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a5ec:	4770      	bx	lr
	...

0801a5f0 <_ZN8touchgfx11ApplicationC1Ev>:
 801a5f0:	b570      	push	{r4, r5, r6, lr}
 801a5f2:	4b1a      	ldr	r3, [pc, #104]	; (801a65c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a5f4:	6003      	str	r3, [r0, #0]
 801a5f6:	2500      	movs	r5, #0
 801a5f8:	4604      	mov	r4, r0
 801a5fa:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801a5fe:	30a8      	adds	r0, #168	; 0xa8
 801a600:	f7ff ffe7 	bl	801a5d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a604:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a608:	f7ff ffe3 	bl	801a5d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a60c:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801a610:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801a614:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801a618:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801a61c:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801a620:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801a624:	490e      	ldr	r1, [pc, #56]	; (801a660 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a626:	480f      	ldr	r0, [pc, #60]	; (801a664 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a628:	4e0f      	ldr	r6, [pc, #60]	; (801a668 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a62a:	f00e fcab 	bl	8028f84 <CRC_Lock>
 801a62e:	4b0f      	ldr	r3, [pc, #60]	; (801a66c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801a630:	b158      	cbz	r0, 801a64a <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801a632:	801d      	strh	r5, [r3, #0]
 801a634:	4a0e      	ldr	r2, [pc, #56]	; (801a670 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801a636:	2300      	movs	r3, #0
 801a638:	6013      	str	r3, [r2, #0]
 801a63a:	4a0e      	ldr	r2, [pc, #56]	; (801a674 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801a63c:	6033      	str	r3, [r6, #0]
 801a63e:	4620      	mov	r0, r4
 801a640:	6013      	str	r3, [r2, #0]
 801a642:	f7ff ffbb 	bl	801a5bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a646:	4620      	mov	r0, r4
 801a648:	bd70      	pop	{r4, r5, r6, pc}
 801a64a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a64e:	2002      	movs	r0, #2
 801a650:	801a      	strh	r2, [r3, #0]
 801a652:	6030      	str	r0, [r6, #0]
 801a654:	f001 fa7e 	bl	801bb54 <_ZN8touchgfx6Screen4drawEv>
 801a658:	e7ec      	b.n	801a634 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801a65a:	bf00      	nop
 801a65c:	0802fc3c 	.word	0x0802fc3c
 801a660:	b5e8b5cd 	.word	0xb5e8b5cd
 801a664:	f407a5c2 	.word	0xf407a5c2
 801a668:	2000b770 	.word	0x2000b770
 801a66c:	20000094 	.word	0x20000094
 801a670:	2000b780 	.word	0x2000b780
 801a674:	2000b774 	.word	0x2000b774

0801a678 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a678:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a67c:	428b      	cmp	r3, r1
 801a67e:	b510      	push	{r4, lr}
 801a680:	d90e      	bls.n	801a6a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a682:	3b01      	subs	r3, #1
 801a684:	b29b      	uxth	r3, r3
 801a686:	428b      	cmp	r3, r1
 801a688:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a68c:	d908      	bls.n	801a6a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a68e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a692:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a696:	681a      	ldr	r2, [r3, #0]
 801a698:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a69c:	685a      	ldr	r2, [r3, #4]
 801a69e:	6062      	str	r2, [r4, #4]
 801a6a0:	bd10      	pop	{r4, pc}
	...

0801a6a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6a6:	466b      	mov	r3, sp
 801a6a8:	e883 0006 	stmia.w	r3, {r1, r2}
 801a6ac:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a6b0:	2a07      	cmp	r2, #7
 801a6b2:	4604      	mov	r4, r0
 801a6b4:	d906      	bls.n	801a6c4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a6b6:	4b09      	ldr	r3, [pc, #36]	; (801a6dc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a6b8:	4a09      	ldr	r2, [pc, #36]	; (801a6e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a6ba:	480a      	ldr	r0, [pc, #40]	; (801a6e4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a6bc:	f240 118f 	movw	r1, #399	; 0x18f
 801a6c0:	f00e fe92 	bl	80293e8 <__assert_func>
 801a6c4:	1c51      	adds	r1, r2, #1
 801a6c6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a6ca:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a6ce:	cb03      	ldmia	r3!, {r0, r1}
 801a6d0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a6d4:	6069      	str	r1, [r5, #4]
 801a6d6:	b003      	add	sp, #12
 801a6d8:	bd30      	pop	{r4, r5, pc}
 801a6da:	bf00      	nop
 801a6dc:	0802fbdc 	.word	0x0802fbdc
 801a6e0:	0802fcbc 	.word	0x0802fcbc
 801a6e4:	0802fc0b 	.word	0x0802fc0b

0801a6e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6ec:	b08d      	sub	sp, #52	; 0x34
 801a6ee:	ac08      	add	r4, sp, #32
 801a6f0:	4683      	mov	fp, r0
 801a6f2:	4620      	mov	r0, r4
 801a6f4:	e884 0006 	stmia.w	r4, {r1, r2}
 801a6f8:	f7fc fef3 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a6fc:	2800      	cmp	r0, #0
 801a6fe:	d16a      	bne.n	801a7d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a700:	9402      	str	r4, [sp, #8]
 801a702:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a706:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a70a:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a70e:	2400      	movs	r4, #0
 801a710:	9301      	str	r3, [sp, #4]
 801a712:	36a0      	adds	r6, #160	; 0xa0
 801a714:	42a5      	cmp	r5, r4
 801a716:	d00d      	beq.n	801a734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801a718:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801a71c:	9802      	ldr	r0, [sp, #8]
 801a71e:	f7ff fedf 	bl	801a4e0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a722:	b128      	cbz	r0, 801a730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801a724:	1e69      	subs	r1, r5, #1
 801a726:	1b09      	subs	r1, r1, r4
 801a728:	b289      	uxth	r1, r1
 801a72a:	9801      	ldr	r0, [sp, #4]
 801a72c:	f7ff ffa4 	bl	801a678 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a730:	3401      	adds	r4, #1
 801a732:	e7ef      	b.n	801a714 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a734:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a738:	9703      	str	r7, [sp, #12]
 801a73a:	1e7b      	subs	r3, r7, #1
 801a73c:	9300      	str	r3, [sp, #0]
 801a73e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801a742:	2400      	movs	r4, #0
 801a744:	4655      	mov	r5, sl
 801a746:	9704      	str	r7, [sp, #16]
 801a748:	4626      	mov	r6, r4
 801a74a:	9b04      	ldr	r3, [sp, #16]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d078      	beq.n	801a842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801a750:	9902      	ldr	r1, [sp, #8]
 801a752:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a756:	f7ff fea1 	bl	801a49c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a75a:	b360      	cbz	r0, 801a7b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a75c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801a760:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801a764:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801a768:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801a76c:	45e6      	cmp	lr, ip
 801a76e:	db35      	blt.n	801a7dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a770:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a774:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a778:	4472      	add	r2, lr
 801a77a:	4463      	add	r3, ip
 801a77c:	b212      	sxth	r2, r2
 801a77e:	b21b      	sxth	r3, r3
 801a780:	429a      	cmp	r2, r3
 801a782:	dc2b      	bgt.n	801a7dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a784:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a788:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a78c:	fa1f f288 	uxth.w	r2, r8
 801a790:	4413      	add	r3, r2
 801a792:	b29b      	uxth	r3, r3
 801a794:	45c1      	cmp	r9, r8
 801a796:	fa0f fe83 	sxth.w	lr, r3
 801a79a:	fa1f fc89 	uxth.w	ip, r9
 801a79e:	db0f      	blt.n	801a7c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801a7a0:	eba3 030c 	sub.w	r3, r3, ip
 801a7a4:	1ac9      	subs	r1, r1, r3
 801a7a6:	b209      	sxth	r1, r1
 801a7a8:	2900      	cmp	r1, #0
 801a7aa:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a7ae:	dd12      	ble.n	801a7d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a7b0:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801a7b4:	4604      	mov	r4, r0
 801a7b6:	9b04      	ldr	r3, [sp, #16]
 801a7b8:	3b01      	subs	r3, #1
 801a7ba:	9304      	str	r3, [sp, #16]
 801a7bc:	3d08      	subs	r5, #8
 801a7be:	e7c4      	b.n	801a74a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801a7c0:	4461      	add	r1, ip
 801a7c2:	b209      	sxth	r1, r1
 801a7c4:	4571      	cmp	r1, lr
 801a7c6:	dc3a      	bgt.n	801a83e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a7c8:	eba2 020c 	sub.w	r2, r2, ip
 801a7cc:	b212      	sxth	r2, r2
 801a7ce:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a7d2:	2a00      	cmp	r2, #0
 801a7d4:	dcee      	bgt.n	801a7b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a7d6:	b00d      	add	sp, #52	; 0x34
 801a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7dc:	45c1      	cmp	r9, r8
 801a7de:	db2e      	blt.n	801a83e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a7e0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801a7e4:	4499      	add	r9, r3
 801a7e6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a7ea:	4498      	add	r8, r3
 801a7ec:	fa0f f989 	sxth.w	r9, r9
 801a7f0:	fa0f f888 	sxth.w	r8, r8
 801a7f4:	45c1      	cmp	r9, r8
 801a7f6:	dc22      	bgt.n	801a83e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a7f8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a7fc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a800:	fa1f f28c 	uxth.w	r2, ip
 801a804:	4413      	add	r3, r2
 801a806:	b29b      	uxth	r3, r3
 801a808:	45e6      	cmp	lr, ip
 801a80a:	fa1f f88e 	uxth.w	r8, lr
 801a80e:	fa0f f983 	sxth.w	r9, r3
 801a812:	db0a      	blt.n	801a82a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801a814:	eba3 0308 	sub.w	r3, r3, r8
 801a818:	1ac9      	subs	r1, r1, r3
 801a81a:	b209      	sxth	r1, r1
 801a81c:	2900      	cmp	r1, #0
 801a81e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801a822:	ddd8      	ble.n	801a7d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a824:	f8ad 9020 	strh.w	r9, [sp, #32]
 801a828:	e7c4      	b.n	801a7b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a82a:	4441      	add	r1, r8
 801a82c:	b209      	sxth	r1, r1
 801a82e:	4549      	cmp	r1, r9
 801a830:	dc05      	bgt.n	801a83e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a832:	eba2 0208 	sub.w	r2, r2, r8
 801a836:	b212      	sxth	r2, r2
 801a838:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801a83c:	e7c9      	b.n	801a7d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801a83e:	4606      	mov	r6, r0
 801a840:	e7b9      	b.n	801a7b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a842:	2c00      	cmp	r4, #0
 801a844:	f47f af7d 	bne.w	801a742 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801a848:	2e00      	cmp	r6, #0
 801a84a:	f000 81dd 	beq.w	801ac08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801a84e:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801a852:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801a856:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a85a:	b2b9      	uxth	r1, r7
 801a85c:	9104      	str	r1, [sp, #16]
 801a85e:	9804      	ldr	r0, [sp, #16]
 801a860:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a864:	4401      	add	r1, r0
 801a866:	b2b3      	uxth	r3, r6
 801a868:	b289      	uxth	r1, r1
 801a86a:	441a      	add	r2, r3
 801a86c:	9105      	str	r1, [sp, #20]
 801a86e:	b292      	uxth	r2, r2
 801a870:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801a874:	fa0f f882 	sxth.w	r8, r2
 801a878:	4655      	mov	r5, sl
 801a87a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a87e:	9b03      	ldr	r3, [sp, #12]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d054      	beq.n	801a92e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801a884:	9902      	ldr	r1, [sp, #8]
 801a886:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a88a:	f7ff fe07 	bl	801a49c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a88e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a892:	b1d8      	cbz	r0, 801a8cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a894:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801a898:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801a89c:	4576      	cmp	r6, lr
 801a89e:	dc26      	bgt.n	801a8ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a8a0:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801a8a4:	44f4      	add	ip, lr
 801a8a6:	fa0f fc8c 	sxth.w	ip, ip
 801a8aa:	45e0      	cmp	r8, ip
 801a8ac:	db1f      	blt.n	801a8ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a8ae:	428f      	cmp	r7, r1
 801a8b0:	fa1f fc81 	uxth.w	ip, r1
 801a8b4:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801a8b8:	dc0f      	bgt.n	801a8da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801a8ba:	9805      	ldr	r0, [sp, #20]
 801a8bc:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801a8c0:	eba0 0c0c 	sub.w	ip, r0, ip
 801a8c4:	eba1 010c 	sub.w	r1, r1, ip
 801a8c8:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801a8cc:	4620      	mov	r0, r4
 801a8ce:	9903      	ldr	r1, [sp, #12]
 801a8d0:	3901      	subs	r1, #1
 801a8d2:	9103      	str	r1, [sp, #12]
 801a8d4:	3d08      	subs	r5, #8
 801a8d6:	4604      	mov	r4, r0
 801a8d8:	e7cf      	b.n	801a87a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801a8da:	4461      	add	r1, ip
 801a8dc:	b209      	sxth	r1, r1
 801a8de:	4549      	cmp	r1, r9
 801a8e0:	dcf5      	bgt.n	801a8ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a8e2:	9904      	ldr	r1, [sp, #16]
 801a8e4:	eba1 0c0c 	sub.w	ip, r1, ip
 801a8e8:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801a8ec:	e7ee      	b.n	801a8cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a8ee:	428f      	cmp	r7, r1
 801a8f0:	dced      	bgt.n	801a8ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a8f2:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801a8f6:	4461      	add	r1, ip
 801a8f8:	b209      	sxth	r1, r1
 801a8fa:	4589      	cmp	r9, r1
 801a8fc:	dbe7      	blt.n	801a8ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a8fe:	4576      	cmp	r6, lr
 801a900:	fa1f fc8e 	uxth.w	ip, lr
 801a904:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801a908:	dc08      	bgt.n	801a91c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801a90a:	eba2 0c0c 	sub.w	ip, r2, ip
 801a90e:	eba1 010c 	sub.w	r1, r1, ip
 801a912:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801a916:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801a91a:	e7d7      	b.n	801a8cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a91c:	4461      	add	r1, ip
 801a91e:	b209      	sxth	r1, r1
 801a920:	4588      	cmp	r8, r1
 801a922:	dbd4      	blt.n	801a8ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a924:	eba3 0c0c 	sub.w	ip, r3, ip
 801a928:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801a92c:	e7ce      	b.n	801a8cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a92e:	2c00      	cmp	r4, #0
 801a930:	f000 816a 	beq.w	801ac08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801a934:	9b00      	ldr	r3, [sp, #0]
 801a936:	3301      	adds	r3, #1
 801a938:	f000 8166 	beq.w	801ac08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801a93c:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801a940:	4621      	mov	r1, r4
 801a942:	9802      	ldr	r0, [sp, #8]
 801a944:	f7ff fdcc 	bl	801a4e0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a948:	b120      	cbz	r0, 801a954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801a94a:	f8bd 1000 	ldrh.w	r1, [sp]
 801a94e:	9801      	ldr	r0, [sp, #4]
 801a950:	f7ff fe92 	bl	801a678 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a954:	9902      	ldr	r1, [sp, #8]
 801a956:	4620      	mov	r0, r4
 801a958:	f7ff fda0 	bl	801a49c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a95c:	2800      	cmp	r0, #0
 801a95e:	f000 809b 	beq.w	801aa98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801a962:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801a966:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801a96a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801a96e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801a972:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a976:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801a97a:	fa1f f288 	uxth.w	r2, r8
 801a97e:	19d5      	adds	r5, r2, r7
 801a980:	fa1f f985 	uxth.w	r9, r5
 801a984:	fa0f f589 	sxth.w	r5, r9
 801a988:	b2a1      	uxth	r1, r4
 801a98a:	440b      	add	r3, r1
 801a98c:	9503      	str	r5, [sp, #12]
 801a98e:	45a0      	cmp	r8, r4
 801a990:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a994:	9507      	str	r5, [sp, #28]
 801a996:	b29b      	uxth	r3, r3
 801a998:	f340 809d 	ble.w	801aad6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801a99c:	1a52      	subs	r2, r2, r1
 801a99e:	b292      	uxth	r2, r2
 801a9a0:	4584      	cmp	ip, r0
 801a9a2:	fa0f fe83 	sxth.w	lr, r3
 801a9a6:	b215      	sxth	r5, r2
 801a9a8:	dd2f      	ble.n	801aa0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801a9aa:	9e00      	ldr	r6, [sp, #0]
 801a9ac:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a9b0:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801a9b4:	9e03      	ldr	r6, [sp, #12]
 801a9b6:	eba6 060e 	sub.w	r6, r6, lr
 801a9ba:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801a9be:	fa1f fc8c 	uxth.w	ip, ip
 801a9c2:	b280      	uxth	r0, r0
 801a9c4:	ebac 0300 	sub.w	r3, ip, r0
 801a9c8:	448c      	add	ip, r1
 801a9ca:	4470      	add	r0, lr
 801a9cc:	b29b      	uxth	r3, r3
 801a9ce:	fa0f fc8c 	sxth.w	ip, ip
 801a9d2:	b200      	sxth	r0, r0
 801a9d4:	b21c      	sxth	r4, r3
 801a9d6:	ebac 0000 	sub.w	r0, ip, r0
 801a9da:	4366      	muls	r6, r4
 801a9dc:	4368      	muls	r0, r5
 801a9de:	4286      	cmp	r6, r0
 801a9e0:	db09      	blt.n	801a9f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801a9e2:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801a9e6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801a9ea:	4417      	add	r7, r2
 801a9ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a9f0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a9f4:	e685      	b.n	801a702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a9f6:	440b      	add	r3, r1
 801a9f8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a9fc:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801aa00:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801aa04:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aa08:	e67b      	b.n	801a702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801aa0a:	9e03      	ldr	r6, [sp, #12]
 801aa0c:	45b6      	cmp	lr, r6
 801aa0e:	da28      	bge.n	801aa62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801aa10:	9b00      	ldr	r3, [sp, #0]
 801aa12:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801aa16:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801aa1a:	eb04 030c 	add.w	r3, r4, ip
 801aa1e:	fa1f f883 	uxth.w	r8, r3
 801aa22:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801aa26:	4403      	add	r3, r0
 801aa28:	eba3 0308 	sub.w	r3, r3, r8
 801aa2c:	b29b      	uxth	r3, r3
 801aa2e:	fa0f f988 	sxth.w	r9, r8
 801aa32:	eba0 000c 	sub.w	r0, r0, ip
 801aa36:	fa0f f883 	sxth.w	r8, r3
 801aa3a:	eba6 060e 	sub.w	r6, r6, lr
 801aa3e:	4368      	muls	r0, r5
 801aa40:	fb08 f606 	mul.w	r6, r8, r6
 801aa44:	42b0      	cmp	r0, r6
 801aa46:	dc06      	bgt.n	801aa56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801aa48:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801aa4c:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801aa50:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801aa54:	e7c9      	b.n	801a9ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801aa56:	4423      	add	r3, r4
 801aa58:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801aa5c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801aa60:	e64f      	b.n	801a702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801aa62:	9807      	ldr	r0, [sp, #28]
 801aa64:	eba3 0309 	sub.w	r3, r3, r9
 801aa68:	b29b      	uxth	r3, r3
 801aa6a:	2806      	cmp	r0, #6
 801aa6c:	fa0f fc83 	sxth.w	ip, r3
 801aa70:	d818      	bhi.n	801aaa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801aa72:	4652      	mov	r2, sl
 801aa74:	ab0a      	add	r3, sp, #40	; 0x28
 801aa76:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801aa7a:	6851      	ldr	r1, [r2, #4]
 801aa7c:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801aa80:	c303      	stmia	r3!, {r0, r1}
 801aa82:	9b03      	ldr	r3, [sp, #12]
 801aa84:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801aa88:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801aa8c:	ab0a      	add	r3, sp, #40	; 0x28
 801aa8e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801aa92:	9801      	ldr	r0, [sp, #4]
 801aa94:	f7ff fe06 	bl	801a6a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801aa98:	9b00      	ldr	r3, [sp, #0]
 801aa9a:	3b01      	subs	r3, #1
 801aa9c:	9300      	str	r3, [sp, #0]
 801aa9e:	f1aa 0a08 	sub.w	sl, sl, #8
 801aaa2:	e747      	b.n	801a934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801aaa4:	9800      	ldr	r0, [sp, #0]
 801aaa6:	45ac      	cmp	ip, r5
 801aaa8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801aaac:	db0c      	blt.n	801aac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801aaae:	4417      	add	r7, r2
 801aab0:	b2bf      	uxth	r7, r7
 801aab2:	4458      	add	r0, fp
 801aab4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801aab8:	440f      	add	r7, r1
 801aaba:	f8ad 4020 	strh.w	r4, [sp, #32]
 801aabe:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801aac2:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801aac6:	e61c      	b.n	801a702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801aac8:	4458      	add	r0, fp
 801aaca:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801aace:	443b      	add	r3, r7
 801aad0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801aad4:	e615      	b.n	801a702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801aad6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801aada:	fa1f f18c 	uxth.w	r1, ip
 801aade:	eb01 0e05 	add.w	lr, r1, r5
 801aae2:	b282      	uxth	r2, r0
 801aae4:	fa1f fe8e 	uxth.w	lr, lr
 801aae8:	9204      	str	r2, [sp, #16]
 801aaea:	fa0f f28e 	sxth.w	r2, lr
 801aaee:	9205      	str	r2, [sp, #20]
 801aaf0:	9e04      	ldr	r6, [sp, #16]
 801aaf2:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801aaf6:	4432      	add	r2, r6
 801aaf8:	b292      	uxth	r2, r2
 801aafa:	4584      	cmp	ip, r0
 801aafc:	9206      	str	r2, [sp, #24]
 801aafe:	da26      	bge.n	801ab4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801ab00:	eba3 0309 	sub.w	r3, r3, r9
 801ab04:	eba2 020e 	sub.w	r2, r2, lr
 801ab08:	b29b      	uxth	r3, r3
 801ab0a:	b292      	uxth	r2, r2
 801ab0c:	fa0f fa83 	sxth.w	sl, r3
 801ab10:	b211      	sxth	r1, r2
 801ab12:	eba0 000c 	sub.w	r0, r0, ip
 801ab16:	eba4 0408 	sub.w	r4, r4, r8
 801ab1a:	fb0a f000 	mul.w	r0, sl, r0
 801ab1e:	434c      	muls	r4, r1
 801ab20:	42a0      	cmp	r0, r4
 801ab22:	9800      	ldr	r0, [sp, #0]
 801ab24:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801ab28:	dc06      	bgt.n	801ab38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801ab2a:	4458      	add	r0, fp
 801ab2c:	9a05      	ldr	r2, [sp, #20]
 801ab2e:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801ab32:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801ab36:	e7ca      	b.n	801aace <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ab38:	eb0b 0300 	add.w	r3, fp, r0
 801ab3c:	9903      	ldr	r1, [sp, #12]
 801ab3e:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801ab42:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801ab46:	442a      	add	r2, r5
 801ab48:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801ab4c:	e5d9      	b.n	801a702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ab4e:	9e04      	ldr	r6, [sp, #16]
 801ab50:	9a03      	ldr	r2, [sp, #12]
 801ab52:	1b89      	subs	r1, r1, r6
 801ab54:	b21e      	sxth	r6, r3
 801ab56:	b289      	uxth	r1, r1
 801ab58:	4296      	cmp	r6, r2
 801ab5a:	fa0f fc81 	sxth.w	ip, r1
 801ab5e:	dd26      	ble.n	801abae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 801ab60:	eba3 0309 	sub.w	r3, r3, r9
 801ab64:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ab68:	9e05      	ldr	r6, [sp, #20]
 801ab6a:	b29b      	uxth	r3, r3
 801ab6c:	eba6 0902 	sub.w	r9, r6, r2
 801ab70:	b218      	sxth	r0, r3
 801ab72:	eba4 0408 	sub.w	r4, r4, r8
 801ab76:	fb0c f404 	mul.w	r4, ip, r4
 801ab7a:	fb00 f909 	mul.w	r9, r0, r9
 801ab7e:	9a00      	ldr	r2, [sp, #0]
 801ab80:	454c      	cmp	r4, r9
 801ab82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801ab86:	db03      	blt.n	801ab90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 801ab88:	445a      	add	r2, fp
 801ab8a:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801ab8e:	e79e      	b.n	801aace <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ab90:	eb0b 0302 	add.w	r3, fp, r2
 801ab94:	9a03      	ldr	r2, [sp, #12]
 801ab96:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801ab9a:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801ab9e:	4429      	add	r1, r5
 801aba0:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801aba4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aba8:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801abac:	e5a9      	b.n	801a702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801abae:	9b06      	ldr	r3, [sp, #24]
 801abb0:	9c07      	ldr	r4, [sp, #28]
 801abb2:	eba3 020e 	sub.w	r2, r3, lr
 801abb6:	b292      	uxth	r2, r2
 801abb8:	2c06      	cmp	r4, #6
 801abba:	b213      	sxth	r3, r2
 801abbc:	d80d      	bhi.n	801abda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 801abbe:	4651      	mov	r1, sl
 801abc0:	aa0a      	add	r2, sp, #40	; 0x28
 801abc2:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801abc6:	6849      	ldr	r1, [r1, #4]
 801abc8:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801abcc:	9b05      	ldr	r3, [sp, #20]
 801abce:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801abd2:	c203      	stmia	r2!, {r0, r1}
 801abd4:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801abd8:	e758      	b.n	801aa8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801abda:	9c00      	ldr	r4, [sp, #0]
 801abdc:	4563      	cmp	r3, ip
 801abde:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801abe2:	db0d      	blt.n	801ac00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 801abe4:	4429      	add	r1, r5
 801abe6:	9a04      	ldr	r2, [sp, #16]
 801abe8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801abec:	b289      	uxth	r1, r1
 801abee:	445c      	add	r4, fp
 801abf0:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801abf4:	4411      	add	r1, r2
 801abf6:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801abfa:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801abfe:	e580      	b.n	801a702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ac00:	445c      	add	r4, fp
 801ac02:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801ac06:	e79e      	b.n	801ab46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801ac08:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801ac0c:	2f07      	cmp	r7, #7
 801ac0e:	d806      	bhi.n	801ac1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 801ac10:	ab08      	add	r3, sp, #32
 801ac12:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ac16:	9801      	ldr	r0, [sp, #4]
 801ac18:	f7ff fd44 	bl	801a6a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ac1c:	e5db      	b.n	801a7d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ac1e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ac22:	f107 39ff 	add.w	r9, r7, #4294967295
 801ac26:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801ac2a:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801ac2e:	f04f 35ff 	mov.w	r5, #4294967295
 801ac32:	2400      	movs	r4, #0
 801ac34:	9304      	str	r3, [sp, #16]
 801ac36:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801ac3a:	9300      	str	r3, [sp, #0]
 801ac3c:	f109 32ff 	add.w	r2, r9, #4294967295
 801ac40:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801ac44:	9303      	str	r3, [sp, #12]
 801ac46:	4690      	mov	r8, r2
 801ac48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ac4c:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ac50:	bf14      	ite	ne
 801ac52:	9904      	ldrne	r1, [sp, #16]
 801ac54:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801ac58:	6818      	ldr	r0, [r3, #0]
 801ac5a:	9206      	str	r2, [sp, #24]
 801ac5c:	bf18      	it	ne
 801ac5e:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801ac62:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801ac66:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801ac6a:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801ac6e:	9305      	str	r3, [sp, #20]
 801ac70:	fb16 f601 	smulbb	r6, r6, r1
 801ac74:	6859      	ldr	r1, [r3, #4]
 801ac76:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ac7a:	4671      	mov	r1, lr
 801ac7c:	a80a      	add	r0, sp, #40	; 0x28
 801ac7e:	f7ff fc51 	bl	801a524 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ac82:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801ac86:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ac8a:	9b03      	ldr	r3, [sp, #12]
 801ac8c:	9a00      	ldr	r2, [sp, #0]
 801ac8e:	fb11 f100 	smulbb	r1, r1, r0
 801ac92:	fb02 6603 	mla	r6, r2, r3, r6
 801ac96:	1b8e      	subs	r6, r1, r6
 801ac98:	2008      	movs	r0, #8
 801ac9a:	fb91 f1f0 	sdiv	r1, r1, r0
 801ac9e:	42b1      	cmp	r1, r6
 801aca0:	dc21      	bgt.n	801ace6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801aca2:	4556      	cmp	r6, sl
 801aca4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801aca8:	da03      	bge.n	801acb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801acaa:	b1e6      	cbz	r6, 801ace6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801acac:	46b2      	mov	sl, r6
 801acae:	4645      	mov	r5, r8
 801acb0:	464c      	mov	r4, r9
 801acb2:	f108 38ff 	add.w	r8, r8, #4294967295
 801acb6:	f118 0f02 	cmn.w	r8, #2
 801acba:	d1c7      	bne.n	801ac4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 801acbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 801acc0:	f1a7 0708 	sub.w	r7, r7, #8
 801acc4:	4691      	mov	r9, r2
 801acc6:	d1b6      	bne.n	801ac36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801acc8:	9b01      	ldr	r3, [sp, #4]
 801acca:	b2a6      	uxth	r6, r4
 801accc:	00e4      	lsls	r4, r4, #3
 801acce:	1918      	adds	r0, r3, r4
 801acd0:	1c6b      	adds	r3, r5, #1
 801acd2:	d10b      	bne.n	801acec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 801acd4:	4601      	mov	r1, r0
 801acd6:	9802      	ldr	r0, [sp, #8]
 801acd8:	f7ff fc24 	bl	801a524 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801acdc:	4631      	mov	r1, r6
 801acde:	9801      	ldr	r0, [sp, #4]
 801ace0:	f7ff fcca 	bl	801a678 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ace4:	e50d      	b.n	801a702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ace6:	4645      	mov	r5, r8
 801ace8:	464c      	mov	r4, r9
 801acea:	e7ed      	b.n	801acc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 801acec:	9b01      	ldr	r3, [sp, #4]
 801acee:	00ed      	lsls	r5, r5, #3
 801acf0:	1959      	adds	r1, r3, r5
 801acf2:	f7ff fc17 	bl	801a524 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801acf6:	9b02      	ldr	r3, [sp, #8]
 801acf8:	cb03      	ldmia	r3!, {r0, r1}
 801acfa:	445d      	add	r5, fp
 801acfc:	445c      	add	r4, fp
 801acfe:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801ad02:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801ad06:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801ad0a:	9b02      	ldr	r3, [sp, #8]
 801ad0c:	6861      	ldr	r1, [r4, #4]
 801ad0e:	c303      	stmia	r3!, {r0, r1}
 801ad10:	e7e4      	b.n	801acdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

0801ad14 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801ad14:	b530      	push	{r4, r5, lr}
 801ad16:	4b1d      	ldr	r3, [pc, #116]	; (801ad8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801ad18:	b085      	sub	sp, #20
 801ad1a:	460c      	mov	r4, r1
 801ad1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ad20:	4b1b      	ldr	r3, [pc, #108]	; (801ad90 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801ad22:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ad26:	2100      	movs	r1, #0
 801ad28:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad2c:	9100      	str	r1, [sp, #0]
 801ad2e:	4605      	mov	r5, r0
 801ad30:	6861      	ldr	r1, [r4, #4]
 801ad32:	6820      	ldr	r0, [r4, #0]
 801ad34:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ad38:	ab02      	add	r3, sp, #8
 801ad3a:	c303      	stmia	r3!, {r0, r1}
 801ad3c:	4669      	mov	r1, sp
 801ad3e:	a802      	add	r0, sp, #8
 801ad40:	f7fc fb8c 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 801ad44:	ab02      	add	r3, sp, #8
 801ad46:	cb03      	ldmia	r3!, {r0, r1}
 801ad48:	4b12      	ldr	r3, [pc, #72]	; (801ad94 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801ad4a:	6020      	str	r0, [r4, #0]
 801ad4c:	6818      	ldr	r0, [r3, #0]
 801ad4e:	6061      	str	r1, [r4, #4]
 801ad50:	b138      	cbz	r0, 801ad62 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801ad52:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801ad56:	b133      	cbz	r3, 801ad66 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801ad58:	6821      	ldr	r1, [r4, #0]
 801ad5a:	6862      	ldr	r2, [r4, #4]
 801ad5c:	4628      	mov	r0, r5
 801ad5e:	f7ff fcc3 	bl	801a6e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ad62:	b005      	add	sp, #20
 801ad64:	bd30      	pop	{r4, r5, pc}
 801ad66:	6803      	ldr	r3, [r0, #0]
 801ad68:	4621      	mov	r1, r4
 801ad6a:	689b      	ldr	r3, [r3, #8]
 801ad6c:	4798      	blx	r3
 801ad6e:	4b0a      	ldr	r3, [pc, #40]	; (801ad98 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801ad70:	6818      	ldr	r0, [r3, #0]
 801ad72:	b118      	cbz	r0, 801ad7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801ad74:	6803      	ldr	r3, [r0, #0]
 801ad76:	4621      	mov	r1, r4
 801ad78:	689b      	ldr	r3, [r3, #8]
 801ad7a:	4798      	blx	r3
 801ad7c:	4b07      	ldr	r3, [pc, #28]	; (801ad9c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801ad7e:	6818      	ldr	r0, [r3, #0]
 801ad80:	6803      	ldr	r3, [r0, #0]
 801ad82:	4621      	mov	r1, r4
 801ad84:	695b      	ldr	r3, [r3, #20]
 801ad86:	4798      	blx	r3
 801ad88:	e7eb      	b.n	801ad62 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801ad8a:	bf00      	nop
 801ad8c:	2000b728 	.word	0x2000b728
 801ad90:	2000b72a 	.word	0x2000b72a
 801ad94:	2000b770 	.word	0x2000b770
 801ad98:	2000b76c 	.word	0x2000b76c
 801ad9c:	2000b734 	.word	0x2000b734

0801ada0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada4:	4604      	mov	r4, r0
 801ada6:	b09b      	sub	sp, #108	; 0x6c
 801ada8:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801adac:	b129      	cbz	r1, 801adba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801adae:	2300      	movs	r3, #0
 801adb0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801adb4:	b01b      	add	sp, #108	; 0x6c
 801adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adba:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801adbe:	4630      	mov	r0, r6
 801adc0:	f7fc fb8f 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801adc4:	4605      	mov	r5, r0
 801adc6:	b940      	cbnz	r0, 801adda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801adc8:	e896 0006 	ldmia.w	r6, {r1, r2}
 801adcc:	4620      	mov	r0, r4
 801adce:	f7ff fc8b 	bl	801a6e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801add2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801add6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801adda:	4ba6      	ldr	r3, [pc, #664]	; (801b074 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	b33b      	cbz	r3, 801ae30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801ade0:	4da5      	ldr	r5, [pc, #660]	; (801b078 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801ade2:	4628      	mov	r0, r5
 801ade4:	f7fc fb7d 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ade8:	4606      	mov	r6, r0
 801adea:	bb08      	cbnz	r0, 801ae30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801adec:	4628      	mov	r0, r5
 801adee:	f7ff f9fb 	bl	801a1e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801adf2:	6829      	ldr	r1, [r5, #0]
 801adf4:	686a      	ldr	r2, [r5, #4]
 801adf6:	4620      	mov	r0, r4
 801adf8:	f7ff fc76 	bl	801a6e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801adfc:	802e      	strh	r6, [r5, #0]
 801adfe:	806e      	strh	r6, [r5, #2]
 801ae00:	80ae      	strh	r6, [r5, #4]
 801ae02:	80ee      	strh	r6, [r5, #6]
 801ae04:	4f9d      	ldr	r7, [pc, #628]	; (801b07c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801ae06:	a809      	add	r0, sp, #36	; 0x24
 801ae08:	f7ff fbe3 	bl	801a5d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ae0c:	883d      	ldrh	r5, [r7, #0]
 801ae0e:	462e      	mov	r6, r5
 801ae10:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ae14:	42b3      	cmp	r3, r6
 801ae16:	d910      	bls.n	801ae3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801ae18:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ae1c:	a809      	add	r0, sp, #36	; 0x24
 801ae1e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801ae22:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801ae26:	3601      	adds	r6, #1
 801ae28:	f7ff fc3c 	bl	801a6a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ae2c:	b2b6      	uxth	r6, r6
 801ae2e:	e7ef      	b.n	801ae10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ae30:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d1e5      	bne.n	801ae04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801ae38:	e7bc      	b.n	801adb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ae3a:	462e      	mov	r6, r5
 801ae3c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ae40:	42b3      	cmp	r3, r6
 801ae42:	d90b      	bls.n	801ae5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801ae44:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ae48:	4620      	mov	r0, r4
 801ae4a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801ae4e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ae52:	3601      	adds	r6, #1
 801ae54:	f7ff fc48 	bl	801a6e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ae58:	b2b6      	uxth	r6, r6
 801ae5a:	e7ef      	b.n	801ae3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801ae5c:	4a88      	ldr	r2, [pc, #544]	; (801b080 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801ae5e:	6813      	ldr	r3, [r2, #0]
 801ae60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801ae64:	2b01      	cmp	r3, #1
 801ae66:	4690      	mov	r8, r2
 801ae68:	f040 8093 	bne.w	801af92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 801ae6c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801ae70:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801ae74:	33aa      	adds	r3, #170	; 0xaa
 801ae76:	f04f 0900 	mov.w	r9, #0
 801ae7a:	42a8      	cmp	r0, r5
 801ae7c:	f103 0308 	add.w	r3, r3, #8
 801ae80:	dd0a      	ble.n	801ae98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801ae82:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801ae86:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801ae8a:	440a      	add	r2, r1
 801ae8c:	b212      	sxth	r2, r2
 801ae8e:	4591      	cmp	r9, r2
 801ae90:	bfb8      	it	lt
 801ae92:	4691      	movlt	r9, r2
 801ae94:	3501      	adds	r5, #1
 801ae96:	e7f0      	b.n	801ae7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801ae98:	4b7a      	ldr	r3, [pc, #488]	; (801b084 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801ae9a:	4e7b      	ldr	r6, [pc, #492]	; (801b088 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801ae9c:	881d      	ldrh	r5, [r3, #0]
 801ae9e:	2300      	movs	r3, #0
 801aea0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801aea4:	2d0f      	cmp	r5, #15
 801aea6:	bf8c      	ite	hi
 801aea8:	08ed      	lsrhi	r5, r5, #3
 801aeaa:	2501      	movls	r5, #1
 801aeac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801aeb0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801aeb4:	f8d8 0000 	ldr.w	r0, [r8]
 801aeb8:	440b      	add	r3, r1
 801aeba:	b21b      	sxth	r3, r3
 801aebc:	4599      	cmp	r9, r3
 801aebe:	6802      	ldr	r2, [r0, #0]
 801aec0:	dd4a      	ble.n	801af58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801aec2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801aec6:	4798      	blx	r3
 801aec8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801aecc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801aed0:	4413      	add	r3, r2
 801aed2:	b21b      	sxth	r3, r3
 801aed4:	195a      	adds	r2, r3, r5
 801aed6:	4290      	cmp	r0, r2
 801aed8:	da07      	bge.n	801aeea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801aeda:	4581      	cmp	r9, r0
 801aedc:	dd05      	ble.n	801aeea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801aede:	4298      	cmp	r0, r3
 801aee0:	da33      	bge.n	801af4a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	dd31      	ble.n	801af4a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801aee6:	4648      	mov	r0, r9
 801aee8:	e004      	b.n	801aef4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801aeea:	4298      	cmp	r0, r3
 801aeec:	dbfb      	blt.n	801aee6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801aeee:	4548      	cmp	r0, r9
 801aef0:	bfa8      	it	ge
 801aef2:	4648      	movge	r0, r9
 801aef4:	f9b6 2000 	ldrsh.w	r2, [r6]
 801aef8:	f8b7 a000 	ldrh.w	sl, [r7]
 801aefc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801af00:	2100      	movs	r1, #0
 801af02:	1ac0      	subs	r0, r0, r3
 801af04:	f8ad 1014 	strh.w	r1, [sp, #20]
 801af08:	f8ad 2018 	strh.w	r2, [sp, #24]
 801af0c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801af10:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801af14:	4553      	cmp	r3, sl
 801af16:	d9c9      	bls.n	801aeac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801af18:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801af1c:	ab07      	add	r3, sp, #28
 801af1e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801af22:	6851      	ldr	r1, [r2, #4]
 801af24:	c303      	stmia	r3!, {r0, r1}
 801af26:	a807      	add	r0, sp, #28
 801af28:	a905      	add	r1, sp, #20
 801af2a:	f7fc fa97 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 801af2e:	a807      	add	r0, sp, #28
 801af30:	f7fc fad7 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801af34:	b920      	cbnz	r0, 801af40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801af36:	6823      	ldr	r3, [r4, #0]
 801af38:	a907      	add	r1, sp, #28
 801af3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af3c:	4620      	mov	r0, r4
 801af3e:	4798      	blx	r3
 801af40:	f10a 0a01 	add.w	sl, sl, #1
 801af44:	fa1f fa8a 	uxth.w	sl, sl
 801af48:	e7e2      	b.n	801af10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801af4a:	f8d8 0000 	ldr.w	r0, [r8]
 801af4e:	6803      	ldr	r3, [r0, #0]
 801af50:	2101      	movs	r1, #1
 801af52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801af54:	4798      	blx	r3
 801af56:	e7a9      	b.n	801aeac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801af58:	69d3      	ldr	r3, [r2, #28]
 801af5a:	4798      	blx	r3
 801af5c:	4b4b      	ldr	r3, [pc, #300]	; (801b08c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801af5e:	781b      	ldrb	r3, [r3, #0]
 801af60:	2b00      	cmp	r3, #0
 801af62:	f43f af27 	beq.w	801adb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801af66:	2300      	movs	r3, #0
 801af68:	883d      	ldrh	r5, [r7, #0]
 801af6a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801af6e:	34ea      	adds	r4, #234	; 0xea
 801af70:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801af74:	42ab      	cmp	r3, r5
 801af76:	f67f af1d 	bls.w	801adb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801af7a:	ab1a      	add	r3, sp, #104	; 0x68
 801af7c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801af80:	3b44      	subs	r3, #68	; 0x44
 801af82:	e893 0006 	ldmia.w	r3, {r1, r2}
 801af86:	4620      	mov	r0, r4
 801af88:	3501      	adds	r5, #1
 801af8a:	f7ff fb8b 	bl	801a6a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801af8e:	b2ad      	uxth	r5, r5
 801af90:	e7ee      	b.n	801af70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 801af92:	2b02      	cmp	r3, #2
 801af94:	f040 813c 	bne.w	801b210 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x470>
 801af98:	4b3d      	ldr	r3, [pc, #244]	; (801b090 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801af9a:	781b      	ldrb	r3, [r3, #0]
 801af9c:	2b01      	cmp	r3, #1
 801af9e:	d02c      	beq.n	801affa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 801afa0:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801afa4:	883a      	ldrh	r2, [r7, #0]
 801afa6:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801afaa:	3201      	adds	r2, #1
 801afac:	b292      	uxth	r2, r2
 801afae:	2900      	cmp	r1, #0
 801afb0:	d0d4      	beq.n	801af5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801afb2:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801afb6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801afba:	441d      	add	r5, r3
 801afbc:	b22d      	sxth	r5, r5
 801afbe:	4610      	mov	r0, r2
 801afc0:	f04f 0a00 	mov.w	sl, #0
 801afc4:	b283      	uxth	r3, r0
 801afc6:	4299      	cmp	r1, r3
 801afc8:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801afcc:	f240 80c4 	bls.w	801b158 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801afd0:	4426      	add	r6, r4
 801afd2:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801afd6:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801afda:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801afde:	4573      	cmp	r3, lr
 801afe0:	4684      	mov	ip, r0
 801afe2:	f340 80a6 	ble.w	801b132 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801afe6:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801afea:	4475      	add	r5, lr
 801afec:	b22d      	sxth	r5, r5
 801afee:	429d      	cmp	r5, r3
 801aff0:	bfa8      	it	ge
 801aff2:	461d      	movge	r5, r3
 801aff4:	3001      	adds	r0, #1
 801aff6:	46e2      	mov	sl, ip
 801aff8:	e7e4      	b.n	801afc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 801affa:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801affe:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801b002:	f1bb 0f00 	cmp.w	fp, #0
 801b006:	d0a9      	beq.n	801af5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801b008:	883b      	ldrh	r3, [r7, #0]
 801b00a:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801b00e:	3301      	adds	r3, #1
 801b010:	b29b      	uxth	r3, r3
 801b012:	2600      	movs	r6, #0
 801b014:	b299      	uxth	r1, r3
 801b016:	458b      	cmp	fp, r1
 801b018:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 801b01c:	d93a      	bls.n	801b094 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801b01e:	4425      	add	r5, r4
 801b020:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801b024:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801b028:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801b02c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801b030:	4408      	add	r0, r1
 801b032:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801b036:	4471      	add	r1, lr
 801b038:	b200      	sxth	r0, r0
 801b03a:	b209      	sxth	r1, r1
 801b03c:	4288      	cmp	r0, r1
 801b03e:	469c      	mov	ip, r3
 801b040:	da06      	bge.n	801b050 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801b042:	4586      	cmp	lr, r0
 801b044:	4672      	mov	r2, lr
 801b046:	bfb8      	it	lt
 801b048:	4602      	movlt	r2, r0
 801b04a:	3301      	adds	r3, #1
 801b04c:	4666      	mov	r6, ip
 801b04e:	e7e1      	b.n	801b014 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 801b050:	d10b      	bne.n	801b06a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801b052:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801b056:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801b05a:	458c      	cmp	ip, r1
 801b05c:	bfb4      	ite	lt
 801b05e:	469c      	movlt	ip, r3
 801b060:	46b4      	movge	ip, r6
 801b062:	4572      	cmp	r2, lr
 801b064:	bfb8      	it	lt
 801b066:	4672      	movlt	r2, lr
 801b068:	e7ef      	b.n	801b04a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801b06a:	428a      	cmp	r2, r1
 801b06c:	bfb8      	it	lt
 801b06e:	460a      	movlt	r2, r1
 801b070:	46b4      	mov	ip, r6
 801b072:	e7ea      	b.n	801b04a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801b074:	2000b76c 	.word	0x2000b76c
 801b078:	2000b778 	.word	0x2000b778
 801b07c:	20000094 	.word	0x20000094
 801b080:	2000b734 	.word	0x2000b734
 801b084:	2000b72a 	.word	0x2000b72a
 801b088:	2000b728 	.word	0x2000b728
 801b08c:	2000b732 	.word	0x2000b732
 801b090:	2000b72c 	.word	0x2000b72c
 801b094:	1961      	adds	r1, r4, r5
 801b096:	ab07      	add	r3, sp, #28
 801b098:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801b09c:	6849      	ldr	r1, [r1, #4]
 801b09e:	c303      	stmia	r3!, {r0, r1}
 801b0a0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b0a4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b0a8:	2b13      	cmp	r3, #19
 801b0aa:	bfd8      	it	le
 801b0ac:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b0b0:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b0b4:	440b      	add	r3, r1
 801b0b6:	1a9b      	subs	r3, r3, r2
 801b0b8:	a807      	add	r0, sp, #28
 801b0ba:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b0be:	f7ff f8ed 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b0c2:	a807      	add	r0, sp, #28
 801b0c4:	f7fc fa0d 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0c8:	2800      	cmp	r0, #0
 801b0ca:	d198      	bne.n	801affe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b0cc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b0d0:	f8d8 0000 	ldr.w	r0, [r8]
 801b0d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b0d8:	f8d0 e000 	ldr.w	lr, [r0]
 801b0dc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b0e0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b0e4:	f1bc 0f14 	cmp.w	ip, #20
 801b0e8:	bfa8      	it	ge
 801b0ea:	f04f 0c14 	movge.w	ip, #20
 801b0ee:	fa1f fc8c 	uxth.w	ip, ip
 801b0f2:	f8cd c000 	str.w	ip, [sp]
 801b0f6:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 801b0fa:	47d0      	blx	sl
 801b0fc:	4682      	mov	sl, r0
 801b0fe:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b102:	a807      	add	r0, sp, #28
 801b104:	f7ff f870 	bl	801a1e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b108:	6823      	ldr	r3, [r4, #0]
 801b10a:	4425      	add	r5, r4
 801b10c:	4620      	mov	r0, r4
 801b10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b110:	a907      	add	r1, sp, #28
 801b112:	4798      	blx	r3
 801b114:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801b118:	eba0 000a 	sub.w	r0, r0, sl
 801b11c:	b200      	sxth	r0, r0
 801b11e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801b122:	2800      	cmp	r0, #0
 801b124:	f47f af6b 	bne.w	801affe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b128:	b2b1      	uxth	r1, r6
 801b12a:	4648      	mov	r0, r9
 801b12c:	f7ff faa4 	bl	801a678 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b130:	e765      	b.n	801affe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b132:	d10c      	bne.n	801b14e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801b134:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801b138:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801b13c:	45b4      	cmp	ip, r6
 801b13e:	bfb4      	ite	lt
 801b140:	4684      	movlt	ip, r0
 801b142:	46d4      	movge	ip, sl
 801b144:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801b148:	4433      	add	r3, r6
 801b14a:	b21b      	sxth	r3, r3
 801b14c:	e74f      	b.n	801afee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 801b14e:	4575      	cmp	r5, lr
 801b150:	bfa8      	it	ge
 801b152:	4675      	movge	r5, lr
 801b154:	46d4      	mov	ip, sl
 801b156:	e74d      	b.n	801aff4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 801b158:	eb0b 0006 	add.w	r0, fp, r6
 801b15c:	4426      	add	r6, r4
 801b15e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b162:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801b166:	f1b9 0f13 	cmp.w	r9, #19
 801b16a:	bfde      	ittt	le
 801b16c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801b170:	444d      	addle	r5, r9
 801b172:	b22d      	sxthle	r5, r5
 801b174:	f7fc f9b5 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b178:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b17c:	2800      	cmp	r0, #0
 801b17e:	f47f af16 	bne.w	801afae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 801b182:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801b186:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b18a:	eba5 050c 	sub.w	r5, r5, ip
 801b18e:	fa1f f28c 	uxth.w	r2, ip
 801b192:	fa1f f989 	uxth.w	r9, r9
 801b196:	eb02 0009 	add.w	r0, r2, r9
 801b19a:	2d14      	cmp	r5, #20
 801b19c:	bfa8      	it	ge
 801b19e:	2514      	movge	r5, #20
 801b1a0:	b200      	sxth	r0, r0
 801b1a2:	fa1f fe85 	uxth.w	lr, r5
 801b1a6:	eba0 000c 	sub.w	r0, r0, ip
 801b1aa:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801b1ae:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801b1b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b1b6:	4586      	cmp	lr, r0
 801b1b8:	f8d8 0000 	ldr.w	r0, [r8]
 801b1bc:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b1c0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b1c4:	bfb8      	it	lt
 801b1c6:	46f1      	movlt	r9, lr
 801b1c8:	6805      	ldr	r5, [r0, #0]
 801b1ca:	f8cd 9000 	str.w	r9, [sp]
 801b1ce:	b29b      	uxth	r3, r3
 801b1d0:	b289      	uxth	r1, r1
 801b1d2:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 801b1d4:	47a8      	blx	r5
 801b1d6:	6823      	ldr	r3, [r4, #0]
 801b1d8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b1de:	a907      	add	r1, sp, #28
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	4798      	blx	r3
 801b1e4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b1e8:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801b1ec:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801b1f0:	1a5b      	subs	r3, r3, r1
 801b1f2:	440a      	add	r2, r1
 801b1f4:	b21b      	sxth	r3, r3
 801b1f6:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801b1fa:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	f47f aed0 	bne.w	801afa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801b204:	fa1f f18a 	uxth.w	r1, sl
 801b208:	4658      	mov	r0, fp
 801b20a:	f7ff fa35 	bl	801a678 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b20e:	e6c9      	b.n	801afa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801b210:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b214:	42ab      	cmp	r3, r5
 801b216:	f67f aea1 	bls.w	801af5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801b21a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b21e:	ab07      	add	r3, sp, #28
 801b220:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b224:	6851      	ldr	r1, [r2, #4]
 801b226:	c303      	stmia	r3!, {r0, r1}
 801b228:	a807      	add	r0, sp, #28
 801b22a:	f7fc f95a 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b22e:	b920      	cbnz	r0, 801b23a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49a>
 801b230:	6823      	ldr	r3, [r4, #0]
 801b232:	a907      	add	r1, sp, #28
 801b234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b236:	4620      	mov	r0, r4
 801b238:	4798      	blx	r3
 801b23a:	3501      	adds	r5, #1
 801b23c:	b2ad      	uxth	r5, r5
 801b23e:	e7e7      	b.n	801b210 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x470>

0801b240 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b240:	4b03      	ldr	r3, [pc, #12]	; (801b250 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b242:	2200      	movs	r2, #0
 801b244:	801a      	strh	r2, [r3, #0]
 801b246:	805a      	strh	r2, [r3, #2]
 801b248:	809a      	strh	r2, [r3, #4]
 801b24a:	80da      	strh	r2, [r3, #6]
 801b24c:	4770      	bx	lr
 801b24e:	bf00      	nop
 801b250:	2000b778 	.word	0x2000b778

0801b254 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b258:	4607      	mov	r7, r0
 801b25a:	b099      	sub	sp, #100	; 0x64
 801b25c:	a802      	add	r0, sp, #8
 801b25e:	4614      	mov	r4, r2
 801b260:	461d      	mov	r5, r3
 801b262:	468a      	mov	sl, r1
 801b264:	f000 fdc1 	bl	801bdea <_ZN8touchgfx12TextProviderC1Ev>
 801b268:	683b      	ldr	r3, [r7, #0]
 801b26a:	4638      	mov	r0, r7
 801b26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b26e:	4798      	blx	r3
 801b270:	462a      	mov	r2, r5
 801b272:	4603      	mov	r3, r0
 801b274:	4621      	mov	r1, r4
 801b276:	a802      	add	r0, sp, #8
 801b278:	f000 fdfc 	bl	801be74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b27c:	2500      	movs	r5, #0
 801b27e:	462c      	mov	r4, r5
 801b280:	46a9      	mov	r9, r5
 801b282:	46a8      	mov	r8, r5
 801b284:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b288:	2300      	movs	r3, #0
 801b28a:	9301      	str	r3, [sp, #4]
 801b28c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b290:	429c      	cmp	r4, r3
 801b292:	d002      	beq.n	801b29a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801b294:	455c      	cmp	r4, fp
 801b296:	bf18      	it	ne
 801b298:	4625      	movne	r5, r4
 801b29a:	ab01      	add	r3, sp, #4
 801b29c:	463a      	mov	r2, r7
 801b29e:	4651      	mov	r1, sl
 801b2a0:	a802      	add	r0, sp, #8
 801b2a2:	f001 f8e1 	bl	801c468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b2a6:	4604      	mov	r4, r0
 801b2a8:	b108      	cbz	r0, 801b2ae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801b2aa:	280a      	cmp	r0, #10
 801b2ac:	d10a      	bne.n	801b2c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801b2ae:	45c1      	cmp	r9, r8
 801b2b0:	bf38      	it	cc
 801b2b2:	46c1      	movcc	r9, r8
 801b2b4:	f04f 0800 	mov.w	r8, #0
 801b2b8:	2c00      	cmp	r4, #0
 801b2ba:	d1e5      	bne.n	801b288 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b2bc:	4648      	mov	r0, r9
 801b2be:	b019      	add	sp, #100	; 0x64
 801b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2c4:	9a01      	ldr	r2, [sp, #4]
 801b2c6:	2a00      	cmp	r2, #0
 801b2c8:	d0de      	beq.n	801b288 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b2ca:	7b56      	ldrb	r6, [r2, #13]
 801b2cc:	683b      	ldr	r3, [r7, #0]
 801b2ce:	8894      	ldrh	r4, [r2, #4]
 801b2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2d2:	0076      	lsls	r6, r6, #1
 801b2d4:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801b2d8:	7a96      	ldrb	r6, [r2, #10]
 801b2da:	4629      	mov	r1, r5
 801b2dc:	4306      	orrs	r6, r0
 801b2de:	4638      	mov	r0, r7
 801b2e0:	4798      	blx	r3
 801b2e2:	4430      	add	r0, r6
 801b2e4:	4480      	add	r8, r0
 801b2e6:	fa1f f888 	uxth.w	r8, r8
 801b2ea:	e7e5      	b.n	801b2b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801b2ec <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b2ec:	b508      	push	{r3, lr}
 801b2ee:	6803      	ldr	r3, [r0, #0]
 801b2f0:	68db      	ldr	r3, [r3, #12]
 801b2f2:	4798      	blx	r3
 801b2f4:	b128      	cbz	r0, 801b302 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b2f6:	7b43      	ldrb	r3, [r0, #13]
 801b2f8:	7a80      	ldrb	r0, [r0, #10]
 801b2fa:	005b      	lsls	r3, r3, #1
 801b2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b300:	4318      	orrs	r0, r3
 801b302:	bd08      	pop	{r3, pc}

0801b304 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b304:	b40e      	push	{r1, r2, r3}
 801b306:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b308:	b098      	sub	sp, #96	; 0x60
 801b30a:	ab1d      	add	r3, sp, #116	; 0x74
 801b30c:	4605      	mov	r5, r0
 801b30e:	f853 4b04 	ldr.w	r4, [r3], #4
 801b312:	9300      	str	r3, [sp, #0]
 801b314:	a802      	add	r0, sp, #8
 801b316:	f000 fd68 	bl	801bdea <_ZN8touchgfx12TextProviderC1Ev>
 801b31a:	682b      	ldr	r3, [r5, #0]
 801b31c:	4628      	mov	r0, r5
 801b31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b320:	4798      	blx	r3
 801b322:	ae18      	add	r6, sp, #96	; 0x60
 801b324:	4603      	mov	r3, r0
 801b326:	4621      	mov	r1, r4
 801b328:	9a00      	ldr	r2, [sp, #0]
 801b32a:	2400      	movs	r4, #0
 801b32c:	a802      	add	r0, sp, #8
 801b32e:	f000 fda1 	bl	801be74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b332:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801b336:	462a      	mov	r2, r5
 801b338:	4633      	mov	r3, r6
 801b33a:	4621      	mov	r1, r4
 801b33c:	a802      	add	r0, sp, #8
 801b33e:	f001 f893 	bl	801c468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b342:	b1f0      	cbz	r0, 801b382 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 801b344:	280a      	cmp	r0, #10
 801b346:	d018      	beq.n	801b37a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 801b348:	9f01      	ldr	r7, [sp, #4]
 801b34a:	b1b7      	cbz	r7, 801b37a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 801b34c:	7b78      	ldrb	r0, [r7, #13]
 801b34e:	7a3b      	ldrb	r3, [r7, #8]
 801b350:	88aa      	ldrh	r2, [r5, #4]
 801b352:	00c1      	lsls	r1, r0, #3
 801b354:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b358:	4319      	orrs	r1, r3
 801b35a:	0643      	lsls	r3, r0, #25
 801b35c:	bf44      	itt	mi
 801b35e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b362:	b219      	sxthmi	r1, r3
 801b364:	0100      	lsls	r0, r0, #4
 801b366:	79fb      	ldrb	r3, [r7, #7]
 801b368:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b36c:	4303      	orrs	r3, r0
 801b36e:	4413      	add	r3, r2
 801b370:	1a5b      	subs	r3, r3, r1
 801b372:	b29b      	uxth	r3, r3
 801b374:	42a3      	cmp	r3, r4
 801b376:	bfc8      	it	gt
 801b378:	b21c      	sxthgt	r4, r3
 801b37a:	4633      	mov	r3, r6
 801b37c:	462a      	mov	r2, r5
 801b37e:	2100      	movs	r1, #0
 801b380:	e7dc      	b.n	801b33c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801b382:	b2a0      	uxth	r0, r4
 801b384:	b018      	add	sp, #96	; 0x60
 801b386:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b38a:	b003      	add	sp, #12
 801b38c:	4770      	bx	lr

0801b38e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b38e:	b40e      	push	{r1, r2, r3}
 801b390:	b530      	push	{r4, r5, lr}
 801b392:	b098      	sub	sp, #96	; 0x60
 801b394:	ab1b      	add	r3, sp, #108	; 0x6c
 801b396:	4604      	mov	r4, r0
 801b398:	f853 5b04 	ldr.w	r5, [r3], #4
 801b39c:	9301      	str	r3, [sp, #4]
 801b39e:	a802      	add	r0, sp, #8
 801b3a0:	f000 fd23 	bl	801bdea <_ZN8touchgfx12TextProviderC1Ev>
 801b3a4:	6823      	ldr	r3, [r4, #0]
 801b3a6:	4620      	mov	r0, r4
 801b3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3aa:	4798      	blx	r3
 801b3ac:	9a01      	ldr	r2, [sp, #4]
 801b3ae:	4603      	mov	r3, r0
 801b3b0:	4629      	mov	r1, r5
 801b3b2:	a802      	add	r0, sp, #8
 801b3b4:	f000 fd5e 	bl	801be74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b3b8:	a802      	add	r0, sp, #8
 801b3ba:	f001 f94d 	bl	801c658 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b3be:	2401      	movs	r4, #1
 801b3c0:	b2a3      	uxth	r3, r4
 801b3c2:	b140      	cbz	r0, 801b3d6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 801b3c4:	280a      	cmp	r0, #10
 801b3c6:	bf08      	it	eq
 801b3c8:	3301      	addeq	r3, #1
 801b3ca:	a802      	add	r0, sp, #8
 801b3cc:	bf08      	it	eq
 801b3ce:	b21c      	sxtheq	r4, r3
 801b3d0:	f001 f942 	bl	801c658 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b3d4:	e7f4      	b.n	801b3c0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801b3d6:	4618      	mov	r0, r3
 801b3d8:	b018      	add	sp, #96	; 0x60
 801b3da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b3de:	b003      	add	sp, #12
 801b3e0:	4770      	bx	lr

0801b3e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b3e2:	b40e      	push	{r1, r2, r3}
 801b3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3e6:	b098      	sub	sp, #96	; 0x60
 801b3e8:	ab1d      	add	r3, sp, #116	; 0x74
 801b3ea:	4604      	mov	r4, r0
 801b3ec:	f853 5b04 	ldr.w	r5, [r3], #4
 801b3f0:	9300      	str	r3, [sp, #0]
 801b3f2:	a802      	add	r0, sp, #8
 801b3f4:	f000 fcf9 	bl	801bdea <_ZN8touchgfx12TextProviderC1Ev>
 801b3f8:	6823      	ldr	r3, [r4, #0]
 801b3fa:	4620      	mov	r0, r4
 801b3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3fe:	4798      	blx	r3
 801b400:	4629      	mov	r1, r5
 801b402:	4603      	mov	r3, r0
 801b404:	9a00      	ldr	r2, [sp, #0]
 801b406:	a802      	add	r0, sp, #8
 801b408:	ad18      	add	r5, sp, #96	; 0x60
 801b40a:	f000 fd33 	bl	801be74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b40e:	2100      	movs	r1, #0
 801b410:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801b414:	4622      	mov	r2, r4
 801b416:	462b      	mov	r3, r5
 801b418:	a802      	add	r0, sp, #8
 801b41a:	f001 f825 	bl	801c468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b41e:	26ff      	movs	r6, #255	; 0xff
 801b420:	b1d8      	cbz	r0, 801b45a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b422:	280a      	cmp	r0, #10
 801b424:	d012      	beq.n	801b44c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b426:	9801      	ldr	r0, [sp, #4]
 801b428:	b180      	cbz	r0, 801b44c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b42a:	7b47      	ldrb	r7, [r0, #13]
 801b42c:	7922      	ldrb	r2, [r4, #4]
 801b42e:	00fb      	lsls	r3, r7, #3
 801b430:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b434:	7a03      	ldrb	r3, [r0, #8]
 801b436:	430b      	orrs	r3, r1
 801b438:	0679      	lsls	r1, r7, #25
 801b43a:	bf44      	itt	mi
 801b43c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b440:	b21b      	sxthmi	r3, r3
 801b442:	1ad3      	subs	r3, r2, r3
 801b444:	b2db      	uxtb	r3, r3
 801b446:	429e      	cmp	r6, r3
 801b448:	bf28      	it	cs
 801b44a:	461e      	movcs	r6, r3
 801b44c:	462b      	mov	r3, r5
 801b44e:	4622      	mov	r2, r4
 801b450:	2100      	movs	r1, #0
 801b452:	a802      	add	r0, sp, #8
 801b454:	f001 f808 	bl	801c468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b458:	e7e2      	b.n	801b420 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801b45a:	4630      	mov	r0, r6
 801b45c:	b018      	add	sp, #96	; 0x60
 801b45e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b462:	b003      	add	sp, #12
 801b464:	4770      	bx	lr

0801b466 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b466:	b513      	push	{r0, r1, r4, lr}
 801b468:	1d01      	adds	r1, r0, #4
 801b46a:	4603      	mov	r3, r0
 801b46c:	c903      	ldmia	r1, {r0, r1}
 801b46e:	466a      	mov	r2, sp
 801b470:	e882 0003 	stmia.w	r2, {r0, r1}
 801b474:	2100      	movs	r1, #0
 801b476:	9100      	str	r1, [sp, #0]
 801b478:	6819      	ldr	r1, [r3, #0]
 801b47a:	4618      	mov	r0, r3
 801b47c:	690c      	ldr	r4, [r1, #16]
 801b47e:	4611      	mov	r1, r2
 801b480:	47a0      	blx	r4
 801b482:	b002      	add	sp, #8
 801b484:	bd10      	pop	{r4, pc}

0801b486 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b486:	b538      	push	{r3, r4, r5, lr}
 801b488:	680b      	ldr	r3, [r1, #0]
 801b48a:	460c      	mov	r4, r1
 801b48c:	68db      	ldr	r3, [r3, #12]
 801b48e:	4605      	mov	r5, r0
 801b490:	4798      	blx	r3
 801b492:	6823      	ldr	r3, [r4, #0]
 801b494:	4620      	mov	r0, r4
 801b496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b498:	4629      	mov	r1, r5
 801b49a:	4798      	blx	r3
 801b49c:	4628      	mov	r0, r5
 801b49e:	bd38      	pop	{r3, r4, r5, pc}

0801b4a0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b4a0:	b410      	push	{r4}
 801b4a2:	880a      	ldrh	r2, [r1, #0]
 801b4a4:	8884      	ldrh	r4, [r0, #4]
 801b4a6:	4422      	add	r2, r4
 801b4a8:	800a      	strh	r2, [r1, #0]
 801b4aa:	88c4      	ldrh	r4, [r0, #6]
 801b4ac:	884a      	ldrh	r2, [r1, #2]
 801b4ae:	4422      	add	r2, r4
 801b4b0:	804a      	strh	r2, [r1, #2]
 801b4b2:	6940      	ldr	r0, [r0, #20]
 801b4b4:	b120      	cbz	r0, 801b4c0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b4b6:	6803      	ldr	r3, [r0, #0]
 801b4b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4be:	4718      	bx	r3
 801b4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4c4:	4770      	bx	lr

0801b4c6 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b4c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4c8:	460b      	mov	r3, r1
 801b4ca:	b085      	sub	sp, #20
 801b4cc:	4604      	mov	r4, r0
 801b4ce:	b901      	cbnz	r1, 801b4d2 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b4d0:	b322      	cbz	r2, 801b51c <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801b4d2:	1d27      	adds	r7, r4, #4
 801b4d4:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b4d8:	466e      	mov	r6, sp
 801b4da:	e886 0003 	stmia.w	r6, {r0, r1}
 801b4de:	88a1      	ldrh	r1, [r4, #4]
 801b4e0:	88e5      	ldrh	r5, [r4, #6]
 801b4e2:	4419      	add	r1, r3
 801b4e4:	6823      	ldr	r3, [r4, #0]
 801b4e6:	442a      	add	r2, r5
 801b4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4ea:	b209      	sxth	r1, r1
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	b215      	sxth	r5, r2
 801b4f0:	4798      	blx	r3
 801b4f2:	6823      	ldr	r3, [r4, #0]
 801b4f4:	4629      	mov	r1, r5
 801b4f6:	4620      	mov	r0, r4
 801b4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4fa:	4798      	blx	r3
 801b4fc:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b500:	ad02      	add	r5, sp, #8
 801b502:	e885 0003 	stmia.w	r5, {r0, r1}
 801b506:	6960      	ldr	r0, [r4, #20]
 801b508:	b150      	cbz	r0, 801b520 <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801b50a:	6803      	ldr	r3, [r0, #0]
 801b50c:	4631      	mov	r1, r6
 801b50e:	691b      	ldr	r3, [r3, #16]
 801b510:	4798      	blx	r3
 801b512:	6960      	ldr	r0, [r4, #20]
 801b514:	6803      	ldr	r3, [r0, #0]
 801b516:	691b      	ldr	r3, [r3, #16]
 801b518:	4629      	mov	r1, r5
 801b51a:	4798      	blx	r3
 801b51c:	b005      	add	sp, #20
 801b51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b520:	f7ff f846 	bl	801a5b0 <_ZN8touchgfx11Application11getInstanceEv>
 801b524:	6803      	ldr	r3, [r0, #0]
 801b526:	4631      	mov	r1, r6
 801b528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b52a:	4798      	blx	r3
 801b52c:	f7ff f840 	bl	801a5b0 <_ZN8touchgfx11Application11getInstanceEv>
 801b530:	6803      	ldr	r3, [r0, #0]
 801b532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b534:	e7f0      	b.n	801b518 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801b536 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b536:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b538:	8882      	ldrh	r2, [r0, #4]
 801b53a:	880b      	ldrh	r3, [r1, #0]
 801b53c:	4413      	add	r3, r2
 801b53e:	800b      	strh	r3, [r1, #0]
 801b540:	88c2      	ldrh	r2, [r0, #6]
 801b542:	884b      	ldrh	r3, [r1, #2]
 801b544:	4413      	add	r3, r2
 801b546:	4602      	mov	r2, r0
 801b548:	804b      	strh	r3, [r1, #2]
 801b54a:	4605      	mov	r5, r0
 801b54c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b550:	460c      	mov	r4, r1
 801b552:	6851      	ldr	r1, [r2, #4]
 801b554:	466b      	mov	r3, sp
 801b556:	c303      	stmia	r3!, {r0, r1}
 801b558:	4621      	mov	r1, r4
 801b55a:	4668      	mov	r0, sp
 801b55c:	f7fb ff7e 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 801b560:	466b      	mov	r3, sp
 801b562:	cb03      	ldmia	r3!, {r0, r1}
 801b564:	6020      	str	r0, [r4, #0]
 801b566:	6061      	str	r1, [r4, #4]
 801b568:	6968      	ldr	r0, [r5, #20]
 801b56a:	b128      	cbz	r0, 801b578 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b56c:	6803      	ldr	r3, [r0, #0]
 801b56e:	691b      	ldr	r3, [r3, #16]
 801b570:	4621      	mov	r1, r4
 801b572:	4798      	blx	r3
 801b574:	b003      	add	sp, #12
 801b576:	bd30      	pop	{r4, r5, pc}
 801b578:	f7ff f81a 	bl	801a5b0 <_ZN8touchgfx11Application11getInstanceEv>
 801b57c:	6803      	ldr	r3, [r0, #0]
 801b57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b580:	e7f6      	b.n	801b570 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b582 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b582:	b570      	push	{r4, r5, r6, lr}
 801b584:	8882      	ldrh	r2, [r0, #4]
 801b586:	880b      	ldrh	r3, [r1, #0]
 801b588:	4413      	add	r3, r2
 801b58a:	800b      	strh	r3, [r1, #0]
 801b58c:	88c2      	ldrh	r2, [r0, #6]
 801b58e:	884b      	ldrh	r3, [r1, #2]
 801b590:	460c      	mov	r4, r1
 801b592:	4413      	add	r3, r2
 801b594:	804b      	strh	r3, [r1, #2]
 801b596:	4605      	mov	r5, r0
 801b598:	1d01      	adds	r1, r0, #4
 801b59a:	4620      	mov	r0, r4
 801b59c:	f7fb ff5e 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 801b5a0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	dd0b      	ble.n	801b5c0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b5a8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	dd07      	ble.n	801b5c0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b5b0:	6968      	ldr	r0, [r5, #20]
 801b5b2:	b128      	cbz	r0, 801b5c0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b5b4:	6803      	ldr	r3, [r0, #0]
 801b5b6:	4621      	mov	r1, r4
 801b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b5be:	4718      	bx	r3
 801b5c0:	bd70      	pop	{r4, r5, r6, pc}

0801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b5c2:	b510      	push	{r4, lr}
 801b5c4:	4604      	mov	r4, r0
 801b5c6:	4608      	mov	r0, r1
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	8023      	strh	r3, [r4, #0]
 801b5cc:	8063      	strh	r3, [r4, #2]
 801b5ce:	6803      	ldr	r3, [r0, #0]
 801b5d0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b5d4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b5d8:	80a1      	strh	r1, [r4, #4]
 801b5da:	80e2      	strh	r2, [r4, #6]
 801b5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5de:	4621      	mov	r1, r4
 801b5e0:	4798      	blx	r3
 801b5e2:	4620      	mov	r0, r4
 801b5e4:	bd10      	pop	{r4, pc}
	...

0801b5e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b5e8:	b530      	push	{r4, r5, lr}
 801b5ea:	8083      	strh	r3, [r0, #4]
 801b5ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b5f0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b5f4:	7183      	strb	r3, [r0, #6]
 801b5f6:	79c3      	ldrb	r3, [r0, #7]
 801b5f8:	6101      	str	r1, [r0, #16]
 801b5fa:	f365 0306 	bfi	r3, r5, #0, #7
 801b5fe:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b602:	8282      	strh	r2, [r0, #20]
 801b604:	f365 13c7 	bfi	r3, r5, #7, #1
 801b608:	71c3      	strb	r3, [r0, #7]
 801b60a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b60e:	7203      	strb	r3, [r0, #8]
 801b610:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b614:	7243      	strb	r3, [r0, #9]
 801b616:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b61a:	8143      	strh	r3, [r0, #10]
 801b61c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b620:	8183      	strh	r3, [r0, #12]
 801b622:	4b01      	ldr	r3, [pc, #4]	; (801b628 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b624:	6003      	str	r3, [r0, #0]
 801b626:	bd30      	pop	{r4, r5, pc}
 801b628:	0802fd90 	.word	0x0802fd90

0801b62c <_ZNK8touchgfx9ConstFont4findEt>:
 801b62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b62e:	6904      	ldr	r4, [r0, #16]
 801b630:	b3bc      	cbz	r4, 801b6a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b632:	88a3      	ldrh	r3, [r4, #4]
 801b634:	8a82      	ldrh	r2, [r0, #20]
 801b636:	1acb      	subs	r3, r1, r3
 801b638:	f102 32ff 	add.w	r2, r2, #4294967295
 801b63c:	d431      	bmi.n	801b6a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b63e:	4293      	cmp	r3, r2
 801b640:	dd0c      	ble.n	801b65c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b642:	230e      	movs	r3, #14
 801b644:	fb03 4302 	mla	r3, r3, r2, r4
 801b648:	889b      	ldrh	r3, [r3, #4]
 801b64a:	1a5b      	subs	r3, r3, r1
 801b64c:	1ad3      	subs	r3, r2, r3
 801b64e:	429a      	cmp	r2, r3
 801b650:	db27      	blt.n	801b6a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b652:	2b00      	cmp	r3, #0
 801b654:	bfbc      	itt	lt
 801b656:	2302      	movlt	r3, #2
 801b658:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b65c:	2500      	movs	r5, #0
 801b65e:	260e      	movs	r6, #14
 801b660:	4295      	cmp	r5, r2
 801b662:	dc1e      	bgt.n	801b6a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b664:	fb06 4003 	mla	r0, r6, r3, r4
 801b668:	8887      	ldrh	r7, [r0, #4]
 801b66a:	42b9      	cmp	r1, r7
 801b66c:	d01a      	beq.n	801b6a4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b66e:	d20d      	bcs.n	801b68c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b670:	1e5a      	subs	r2, r3, #1
 801b672:	4295      	cmp	r5, r2
 801b674:	dc15      	bgt.n	801b6a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b676:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b67a:	1a5b      	subs	r3, r3, r1
 801b67c:	1ad3      	subs	r3, r2, r3
 801b67e:	429a      	cmp	r2, r3
 801b680:	db0f      	blt.n	801b6a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b682:	429d      	cmp	r5, r3
 801b684:	ddec      	ble.n	801b660 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b686:	1953      	adds	r3, r2, r5
 801b688:	105b      	asrs	r3, r3, #1
 801b68a:	e7e9      	b.n	801b660 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b68c:	1c5d      	adds	r5, r3, #1
 801b68e:	42aa      	cmp	r2, r5
 801b690:	db07      	blt.n	801b6a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b692:	8a43      	ldrh	r3, [r0, #18]
 801b694:	1acb      	subs	r3, r1, r3
 801b696:	442b      	add	r3, r5
 801b698:	429d      	cmp	r5, r3
 801b69a:	dc02      	bgt.n	801b6a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b69c:	429a      	cmp	r2, r3
 801b69e:	dadf      	bge.n	801b660 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b6a0:	e7f1      	b.n	801b686 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b6a2:	2000      	movs	r0, #0
 801b6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b6a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6a8:	4604      	mov	r4, r0
 801b6aa:	4617      	mov	r7, r2
 801b6ac:	461e      	mov	r6, r3
 801b6ae:	b911      	cbnz	r1, 801b6b6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b6b0:	2500      	movs	r5, #0
 801b6b2:	4628      	mov	r0, r5
 801b6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6b6:	290a      	cmp	r1, #10
 801b6b8:	d0fa      	beq.n	801b6b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b6ba:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b6be:	4291      	cmp	r1, r2
 801b6c0:	d0f6      	beq.n	801b6b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b6c2:	f242 020b 	movw	r2, #8203	; 0x200b
 801b6c6:	4291      	cmp	r1, r2
 801b6c8:	d0f2      	beq.n	801b6b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b6ca:	f7ff ffaf 	bl	801b62c <_ZNK8touchgfx9ConstFont4findEt>
 801b6ce:	4605      	mov	r5, r0
 801b6d0:	b950      	cbnz	r0, 801b6e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b6d2:	6823      	ldr	r3, [r4, #0]
 801b6d4:	4620      	mov	r0, r4
 801b6d6:	691b      	ldr	r3, [r3, #16]
 801b6d8:	4798      	blx	r3
 801b6da:	4601      	mov	r1, r0
 801b6dc:	4620      	mov	r0, r4
 801b6de:	f7ff ffa5 	bl	801b62c <_ZNK8touchgfx9ConstFont4findEt>
 801b6e2:	4605      	mov	r5, r0
 801b6e4:	2800      	cmp	r0, #0
 801b6e6:	d0e3      	beq.n	801b6b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b6e8:	6823      	ldr	r3, [r4, #0]
 801b6ea:	4629      	mov	r1, r5
 801b6ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b6ee:	4620      	mov	r0, r4
 801b6f0:	4798      	blx	r3
 801b6f2:	6038      	str	r0, [r7, #0]
 801b6f4:	6823      	ldr	r3, [r4, #0]
 801b6f6:	4620      	mov	r0, r4
 801b6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6fa:	4798      	blx	r3
 801b6fc:	7030      	strb	r0, [r6, #0]
 801b6fe:	e7d8      	b.n	801b6b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b700 <_ZN8touchgfx6memsetEPvhm>:
 801b700:	4402      	add	r2, r0
 801b702:	4290      	cmp	r0, r2
 801b704:	d002      	beq.n	801b70c <_ZN8touchgfx6memsetEPvhm+0xc>
 801b706:	f800 1b01 	strb.w	r1, [r0], #1
 801b70a:	e7fa      	b.n	801b702 <_ZN8touchgfx6memsetEPvhm+0x2>
 801b70c:	4770      	bx	lr

0801b70e <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b70e:	2000      	movs	r0, #0
 801b710:	4770      	bx	lr

0801b712 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b712:	2001      	movs	r0, #1
 801b714:	4770      	bx	lr

0801b716 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b716:	2002      	movs	r0, #2
 801b718:	4770      	bx	lr

0801b71a <_ZN8touchgfx12GestureEventD1Ev>:
 801b71a:	4770      	bx	lr

0801b71c <_ZN8touchgfx9DragEventD1Ev>:
 801b71c:	4770      	bx	lr

0801b71e <_ZN8touchgfx10ClickEventD1Ev>:
 801b71e:	4770      	bx	lr

0801b720 <_ZN8touchgfx10ClickEventD0Ev>:
 801b720:	b510      	push	{r4, lr}
 801b722:	210c      	movs	r1, #12
 801b724:	4604      	mov	r4, r0
 801b726:	f00d fd34 	bl	8029192 <_ZdlPvj>
 801b72a:	4620      	mov	r0, r4
 801b72c:	bd10      	pop	{r4, pc}

0801b72e <_ZN8touchgfx9DragEventD0Ev>:
 801b72e:	b510      	push	{r4, lr}
 801b730:	2110      	movs	r1, #16
 801b732:	4604      	mov	r4, r0
 801b734:	f00d fd2d 	bl	8029192 <_ZdlPvj>
 801b738:	4620      	mov	r0, r4
 801b73a:	bd10      	pop	{r4, pc}

0801b73c <_ZN8touchgfx12GestureEventD0Ev>:
 801b73c:	b510      	push	{r4, lr}
 801b73e:	210c      	movs	r1, #12
 801b740:	4604      	mov	r4, r0
 801b742:	f00d fd26 	bl	8029192 <_ZdlPvj>
 801b746:	4620      	mov	r0, r4
 801b748:	bd10      	pop	{r4, pc}
	...

0801b74c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b74c:	b530      	push	{r4, r5, lr}
 801b74e:	460d      	mov	r5, r1
 801b750:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b752:	b087      	sub	sp, #28
 801b754:	4604      	mov	r4, r0
 801b756:	b301      	cbz	r1, 801b79a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b758:	a801      	add	r0, sp, #4
 801b75a:	f7ff ff32 	bl	801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b75e:	892a      	ldrh	r2, [r5, #8]
 801b760:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b764:	7928      	ldrb	r0, [r5, #4]
 801b766:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b76a:	f88d 0010 	strb.w	r0, [sp, #16]
 801b76e:	1ad2      	subs	r2, r2, r3
 801b770:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b772:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b774:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b778:	441a      	add	r2, r3
 801b77a:	896b      	ldrh	r3, [r5, #10]
 801b77c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b780:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b784:	1b5b      	subs	r3, r3, r5
 801b786:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b788:	442b      	add	r3, r5
 801b78a:	4d05      	ldr	r5, [pc, #20]	; (801b7a0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b78c:	9503      	str	r5, [sp, #12]
 801b78e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b792:	6803      	ldr	r3, [r0, #0]
 801b794:	a903      	add	r1, sp, #12
 801b796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b798:	4798      	blx	r3
 801b79a:	b007      	add	sp, #28
 801b79c:	bd30      	pop	{r4, r5, pc}
 801b79e:	bf00      	nop
 801b7a0:	0802fe0c 	.word	0x0802fe0c

0801b7a4 <_ZNK8touchgfx4Rect9intersectEss>:
 801b7a4:	b510      	push	{r4, lr}
 801b7a6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b7aa:	428b      	cmp	r3, r1
 801b7ac:	dc10      	bgt.n	801b7d0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b7ae:	8884      	ldrh	r4, [r0, #4]
 801b7b0:	4423      	add	r3, r4
 801b7b2:	b21b      	sxth	r3, r3
 801b7b4:	4299      	cmp	r1, r3
 801b7b6:	da0b      	bge.n	801b7d0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b7b8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b7bc:	4293      	cmp	r3, r2
 801b7be:	dc07      	bgt.n	801b7d0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b7c0:	88c0      	ldrh	r0, [r0, #6]
 801b7c2:	4418      	add	r0, r3
 801b7c4:	b200      	sxth	r0, r0
 801b7c6:	4282      	cmp	r2, r0
 801b7c8:	bfac      	ite	ge
 801b7ca:	2000      	movge	r0, #0
 801b7cc:	2001      	movlt	r0, #1
 801b7ce:	bd10      	pop	{r4, pc}
 801b7d0:	2000      	movs	r0, #0
 801b7d2:	e7fc      	b.n	801b7ce <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801b7d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7d6:	460c      	mov	r4, r1
 801b7d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b7da:	b089      	sub	sp, #36	; 0x24
 801b7dc:	4605      	mov	r5, r0
 801b7de:	2900      	cmp	r1, #0
 801b7e0:	d054      	beq.n	801b88c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801b7e2:	4668      	mov	r0, sp
 801b7e4:	f7ff feed 	bl	801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b7e8:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801b7ea:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801b7ec:	8922      	ldrh	r2, [r4, #8]
 801b7ee:	88e1      	ldrh	r1, [r4, #6]
 801b7f0:	443a      	add	r2, r7
 801b7f2:	4431      	add	r1, r6
 801b7f4:	b212      	sxth	r2, r2
 801b7f6:	b209      	sxth	r1, r1
 801b7f8:	4668      	mov	r0, sp
 801b7fa:	f7ff ffd3 	bl	801b7a4 <_ZNK8touchgfx4Rect9intersectEss>
 801b7fe:	b1d0      	cbz	r0, 801b836 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b800:	89a2      	ldrh	r2, [r4, #12]
 801b802:	8961      	ldrh	r1, [r4, #10]
 801b804:	443a      	add	r2, r7
 801b806:	4431      	add	r1, r6
 801b808:	b212      	sxth	r2, r2
 801b80a:	b209      	sxth	r1, r1
 801b80c:	4668      	mov	r0, sp
 801b80e:	f7ff ffc9 	bl	801b7a4 <_ZNK8touchgfx4Rect9intersectEss>
 801b812:	4603      	mov	r3, r0
 801b814:	b978      	cbnz	r0, 801b836 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b816:	4a1e      	ldr	r2, [pc, #120]	; (801b890 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801b818:	9204      	str	r2, [sp, #16]
 801b81a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b81c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b820:	2202      	movs	r2, #2
 801b822:	f88d 2014 	strb.w	r2, [sp, #20]
 801b826:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b82a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b82e:	6803      	ldr	r3, [r0, #0]
 801b830:	a904      	add	r1, sp, #16
 801b832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b834:	4798      	blx	r3
 801b836:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b838:	a802      	add	r0, sp, #8
 801b83a:	f7ff fec2 	bl	801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b83e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b842:	88e0      	ldrh	r0, [r4, #6]
 801b844:	8961      	ldrh	r1, [r4, #10]
 801b846:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b84a:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801b84e:	8923      	ldrh	r3, [r4, #8]
 801b850:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b852:	7927      	ldrb	r7, [r4, #4]
 801b854:	f88d 7014 	strb.w	r7, [sp, #20]
 801b858:	1a80      	subs	r0, r0, r2
 801b85a:	1a89      	subs	r1, r1, r2
 801b85c:	89a2      	ldrh	r2, [r4, #12]
 801b85e:	4c0d      	ldr	r4, [pc, #52]	; (801b894 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801b860:	9404      	str	r4, [sp, #16]
 801b862:	4460      	add	r0, ip
 801b864:	eba3 030e 	sub.w	r3, r3, lr
 801b868:	eba2 020e 	sub.w	r2, r2, lr
 801b86c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b870:	4433      	add	r3, r6
 801b872:	4461      	add	r1, ip
 801b874:	4432      	add	r2, r6
 801b876:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b878:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b87c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b880:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b884:	6803      	ldr	r3, [r0, #0]
 801b886:	a904      	add	r1, sp, #16
 801b888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b88a:	4798      	blx	r3
 801b88c:	b009      	add	sp, #36	; 0x24
 801b88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b890:	0802fde4 	.word	0x0802fde4
 801b894:	0802fdf8 	.word	0x0802fdf8

0801b898 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b89c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801b8a0:	790b      	ldrb	r3, [r1, #4]
 801b8a2:	b0a1      	sub	sp, #132	; 0x84
 801b8a4:	4604      	mov	r4, r0
 801b8a6:	460d      	mov	r5, r1
 801b8a8:	f1b9 0f00 	cmp.w	r9, #0
 801b8ac:	d00f      	beq.n	801b8ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	f040 80a0 	bne.w	801b9f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801b8b4:	b021      	add	sp, #132	; 0x84
 801b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ba:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b8be:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b8c2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b8c6:	1d20      	adds	r0, r4, #4
 801b8c8:	f7fb fd16 	bl	80172f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b8cc:	e092      	b.n	801b9f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d1f0      	bne.n	801b8b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b8d2:	4b5e      	ldr	r3, [pc, #376]	; (801ba4c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801b8da:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801b8de:	f1ba 0f03 	cmp.w	sl, #3
 801b8e2:	ddea      	ble.n	801b8ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801b8e4:	f1ba 0f0c 	cmp.w	sl, #12
 801b8e8:	f04f 0303 	mov.w	r3, #3
 801b8ec:	bfdc      	itt	le
 801b8ee:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801b8f2:	fb92 f3f3 	sdivle	r3, r2, r3
 801b8f6:	9301      	str	r3, [sp, #4]
 801b8f8:	4b55      	ldr	r3, [pc, #340]	; (801ba50 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801b8fa:	4956      	ldr	r1, [pc, #344]	; (801ba54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801b8fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b900:	4b55      	ldr	r3, [pc, #340]	; (801ba58 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801b902:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b906:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b90a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b90e:	ab0e      	add	r3, sp, #56	; 0x38
 801b910:	2248      	movs	r2, #72	; 0x48
 801b912:	2600      	movs	r6, #0
 801b914:	4618      	mov	r0, r3
 801b916:	960a      	str	r6, [sp, #40]	; 0x28
 801b918:	f00d fde8 	bl	80294ec <memcpy>
 801b91c:	f04f 32ff 	mov.w	r2, #4294967295
 801b920:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801b924:	f8cd a008 	str.w	sl, [sp, #8]
 801b928:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b92c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b930:	b29b      	uxth	r3, r3
 801b932:	46b3      	mov	fp, r6
 801b934:	9303      	str	r3, [sp, #12]
 801b936:	2300      	movs	r3, #0
 801b938:	9309      	str	r3, [sp, #36]	; 0x24
 801b93a:	9b07      	ldr	r3, [sp, #28]
 801b93c:	9a03      	ldr	r2, [sp, #12]
 801b93e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801b942:	88ef      	ldrh	r7, [r5, #6]
 801b944:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801b948:	fb13 f302 	smulbb	r3, r3, r2
 801b94c:	b29b      	uxth	r3, r3
 801b94e:	9304      	str	r3, [sp, #16]
 801b950:	9b07      	ldr	r3, [sp, #28]
 801b952:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b956:	a80a      	add	r0, sp, #40	; 0x28
 801b958:	685b      	ldr	r3, [r3, #4]
 801b95a:	fb13 f302 	smulbb	r3, r3, r2
 801b95e:	b29b      	uxth	r3, r3
 801b960:	9305      	str	r3, [sp, #20]
 801b962:	9b04      	ldr	r3, [sp, #16]
 801b964:	441f      	add	r7, r3
 801b966:	9b05      	ldr	r3, [sp, #20]
 801b968:	4498      	add	r8, r3
 801b96a:	b23f      	sxth	r7, r7
 801b96c:	fa0f f888 	sxth.w	r8, r8
 801b970:	4642      	mov	r2, r8
 801b972:	4639      	mov	r1, r7
 801b974:	f7ff ff16 	bl	801b7a4 <_ZNK8touchgfx4Rect9intersectEss>
 801b978:	b380      	cbz	r0, 801b9dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801b97a:	4639      	mov	r1, r7
 801b97c:	ab09      	add	r3, sp, #36	; 0x24
 801b97e:	4642      	mov	r2, r8
 801b980:	1d20      	adds	r0, r4, #4
 801b982:	f7fb fcb9 	bl	80172f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b986:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b988:	b341      	cbz	r1, 801b9dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801b98a:	4549      	cmp	r1, r9
 801b98c:	d026      	beq.n	801b9dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801b98e:	a80c      	add	r0, sp, #48	; 0x30
 801b990:	f7ff fe17 	bl	801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b994:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b998:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b99c:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b9a0:	2002      	movs	r0, #2
 801b9a2:	fb92 f2f0 	sdiv	r2, r2, r0
 801b9a6:	440a      	add	r2, r1
 801b9a8:	1a99      	subs	r1, r3, r2
 801b9aa:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b9ae:	fb93 f3f0 	sdiv	r3, r3, r0
 801b9b2:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801b9b6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b9ba:	4403      	add	r3, r0
 801b9bc:	1ad3      	subs	r3, r2, r3
 801b9be:	435b      	muls	r3, r3
 801b9c0:	9a06      	ldr	r2, [sp, #24]
 801b9c2:	fb01 3301 	mla	r3, r1, r1, r3
 801b9c6:	4293      	cmp	r3, r2
 801b9c8:	d208      	bcs.n	801b9dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801b9ca:	9a04      	ldr	r2, [sp, #16]
 801b9cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b9d0:	86a2      	strh	r2, [r4, #52]	; 0x34
 801b9d2:	9a05      	ldr	r2, [sp, #20]
 801b9d4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801b9d8:	86e2      	strh	r2, [r4, #54]	; 0x36
 801b9da:	9306      	str	r3, [sp, #24]
 801b9dc:	f10b 0b02 	add.w	fp, fp, #2
 801b9e0:	f1bb 0f08 	cmp.w	fp, #8
 801b9e4:	dda7      	ble.n	801b936 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b9e6:	9b02      	ldr	r3, [sp, #8]
 801b9e8:	4453      	add	r3, sl
 801b9ea:	9302      	str	r3, [sp, #8]
 801b9ec:	9b01      	ldr	r3, [sp, #4]
 801b9ee:	3601      	adds	r6, #1
 801b9f0:	42b3      	cmp	r3, r6
 801b9f2:	d199      	bne.n	801b928 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 801b9f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b9f6:	2900      	cmp	r1, #0
 801b9f8:	f43f af5c 	beq.w	801b8b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b9fc:	a80c      	add	r0, sp, #48	; 0x30
 801b9fe:	f7ff fde0 	bl	801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ba02:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ba06:	88ea      	ldrh	r2, [r5, #6]
 801ba08:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801ba0c:	7929      	ldrb	r1, [r5, #4]
 801ba0e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801ba12:	1ad2      	subs	r2, r2, r3
 801ba14:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ba16:	441a      	add	r2, r3
 801ba18:	892b      	ldrh	r3, [r5, #8]
 801ba1a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801ba1e:	1a1b      	subs	r3, r3, r0
 801ba20:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801ba22:	4403      	add	r3, r0
 801ba24:	480d      	ldr	r0, [pc, #52]	; (801ba5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801ba26:	900e      	str	r0, [sp, #56]	; 0x38
 801ba28:	2600      	movs	r6, #0
 801ba2a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ba2c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801ba30:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801ba34:	6803      	ldr	r3, [r0, #0]
 801ba36:	a90e      	add	r1, sp, #56	; 0x38
 801ba38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba3a:	4798      	blx	r3
 801ba3c:	792b      	ldrb	r3, [r5, #4]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	f43f af38 	beq.w	801b8b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ba44:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801ba48:	e734      	b.n	801b8b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ba4a:	bf00      	nop
 801ba4c:	2000b734 	.word	0x2000b734
 801ba50:	2000b728 	.word	0x2000b728
 801ba54:	0802dff4 	.word	0x0802dff4
 801ba58:	2000b72a 	.word	0x2000b72a
 801ba5c:	0802fde4 	.word	0x0802fde4

0801ba60 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801ba60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba62:	4604      	mov	r4, r0
 801ba64:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801ba68:	3201      	adds	r2, #1
 801ba6a:	d112      	bne.n	801ba92 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801ba6c:	6803      	ldr	r3, [r0, #0]
 801ba6e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ba72:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ba76:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ba7a:	2500      	movs	r5, #0
 801ba7c:	9500      	str	r5, [sp, #0]
 801ba7e:	466d      	mov	r5, sp
 801ba80:	4629      	mov	r1, r5
 801ba82:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba88:	4798      	blx	r3
 801ba8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ba8e:	e884 0003 	stmia.w	r4, {r0, r1}
 801ba92:	4620      	mov	r0, r4
 801ba94:	b003      	add	sp, #12
 801ba96:	bd30      	pop	{r4, r5, pc}

0801ba98 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801ba98:	b513      	push	{r0, r1, r4, lr}
 801ba9a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801ba9e:	3301      	adds	r3, #1
 801baa0:	4604      	mov	r4, r0
 801baa2:	d109      	bne.n	801bab8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801baa4:	4601      	mov	r1, r0
 801baa6:	4668      	mov	r0, sp
 801baa8:	f7ff fd8b 	bl	801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801baac:	f8bd 3000 	ldrh.w	r3, [sp]
 801bab0:	8423      	strh	r3, [r4, #32]
 801bab2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bab6:	8463      	strh	r3, [r4, #34]	; 0x22
 801bab8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801babc:	b002      	add	sp, #8
 801babe:	bd10      	pop	{r4, pc}

0801bac0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801bac0:	b513      	push	{r0, r1, r4, lr}
 801bac2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801bac6:	3301      	adds	r3, #1
 801bac8:	4604      	mov	r4, r0
 801baca:	d109      	bne.n	801bae0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801bacc:	4601      	mov	r1, r0
 801bace:	4668      	mov	r0, sp
 801bad0:	f7ff fd77 	bl	801b5c2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bad4:	f8bd 3000 	ldrh.w	r3, [sp]
 801bad8:	8423      	strh	r3, [r4, #32]
 801bada:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bade:	8463      	strh	r3, [r4, #34]	; 0x22
 801bae0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801bae4:	b002      	add	sp, #8
 801bae6:	bd10      	pop	{r4, pc}

0801bae8 <_ZN8touchgfx6ScreenC1Ev>:
 801bae8:	b570      	push	{r4, r5, r6, lr}
 801baea:	4605      	mov	r5, r0
 801baec:	4b15      	ldr	r3, [pc, #84]	; (801bb44 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801baee:	f845 3b04 	str.w	r3, [r5], #4
 801baf2:	2300      	movs	r3, #0
 801baf4:	8103      	strh	r3, [r0, #8]
 801baf6:	8143      	strh	r3, [r0, #10]
 801baf8:	8183      	strh	r3, [r0, #12]
 801bafa:	81c3      	strh	r3, [r0, #14]
 801bafc:	8203      	strh	r3, [r0, #16]
 801bafe:	8243      	strh	r3, [r0, #18]
 801bb00:	8283      	strh	r3, [r0, #20]
 801bb02:	82c3      	strh	r3, [r0, #22]
 801bb04:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801bb08:	6203      	str	r3, [r0, #32]
 801bb0a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801bb0e:	4a0e      	ldr	r2, [pc, #56]	; (801bb48 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801bb10:	6343      	str	r3, [r0, #52]	; 0x34
 801bb12:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801bb16:	4b0d      	ldr	r3, [pc, #52]	; (801bb4c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801bb18:	6042      	str	r2, [r0, #4]
 801bb1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bb1e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801bb20:	4a0b      	ldr	r2, [pc, #44]	; (801bb50 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801bb22:	4604      	mov	r4, r0
 801bb24:	2101      	movs	r1, #1
 801bb26:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801bb2a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801bb2e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801bb32:	4628      	mov	r0, r5
 801bb34:	4798      	blx	r3
 801bb36:	6863      	ldr	r3, [r4, #4]
 801bb38:	4628      	mov	r0, r5
 801bb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb3c:	4631      	mov	r1, r6
 801bb3e:	4798      	blx	r3
 801bb40:	4620      	mov	r0, r4
 801bb42:	bd70      	pop	{r4, r5, r6, pc}
 801bb44:	0802fe20 	.word	0x0802fe20
 801bb48:	0802ef48 	.word	0x0802ef48
 801bb4c:	2000b72a 	.word	0x2000b72a
 801bb50:	2000b728 	.word	0x2000b728

0801bb54 <_ZN8touchgfx6Screen4drawEv>:
 801bb54:	b507      	push	{r0, r1, r2, lr}
 801bb56:	4b09      	ldr	r3, [pc, #36]	; (801bb7c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801bb58:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb5c:	4b08      	ldr	r3, [pc, #32]	; (801bb80 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801bb5e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bb62:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb66:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bb6a:	6803      	ldr	r3, [r0, #0]
 801bb6c:	2100      	movs	r1, #0
 801bb6e:	9100      	str	r1, [sp, #0]
 801bb70:	689b      	ldr	r3, [r3, #8]
 801bb72:	4669      	mov	r1, sp
 801bb74:	4798      	blx	r3
 801bb76:	b003      	add	sp, #12
 801bb78:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb7c:	2000b728 	.word	0x2000b728
 801bb80:	2000b72a 	.word	0x2000b72a

0801bb84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb88:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	b089      	sub	sp, #36	; 0x24
 801bb90:	4680      	mov	r8, r0
 801bb92:	460c      	mov	r4, r1
 801bb94:	4615      	mov	r5, r2
 801bb96:	dd0e      	ble.n	801bbb6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bb98:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	dd0a      	ble.n	801bbb6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bba0:	4628      	mov	r0, r5
 801bba2:	f7ff ff5d 	bl	801ba60 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bba6:	4621      	mov	r1, r4
 801bba8:	f7fe fc78 	bl	801a49c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bbac:	69eb      	ldr	r3, [r5, #28]
 801bbae:	b928      	cbnz	r0, 801bbbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801bbb0:	461d      	mov	r5, r3
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d1f4      	bne.n	801bba0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801bbb6:	b009      	add	sp, #36	; 0x24
 801bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbbc:	ae04      	add	r6, sp, #16
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	f000 80b5 	beq.w	801bd2e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bbc4:	682b      	ldr	r3, [r5, #0]
 801bbc6:	4629      	mov	r1, r5
 801bbc8:	68db      	ldr	r3, [r3, #12]
 801bbca:	a802      	add	r0, sp, #8
 801bbcc:	4798      	blx	r3
 801bbce:	4628      	mov	r0, r5
 801bbd0:	f7ff ff62 	bl	801ba98 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bbd4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801bbd8:	4407      	add	r7, r0
 801bbda:	4628      	mov	r0, r5
 801bbdc:	f7ff ff70 	bl	801bac0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bbe0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bbe4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801bbe8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bbec:	4418      	add	r0, r3
 801bbee:	4621      	mov	r1, r4
 801bbf0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801bbf4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801bbf8:	b23f      	sxth	r7, r7
 801bbfa:	4630      	mov	r0, r6
 801bbfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bc00:	f8ad 7010 	strh.w	r7, [sp, #16]
 801bc04:	f7fb fc2a 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 801bc08:	4628      	mov	r0, r5
 801bc0a:	f7ff ff29 	bl	801ba60 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bc0e:	4602      	mov	r2, r0
 801bc10:	e896 0003 	ldmia.w	r6, {r0, r1}
 801bc14:	ab06      	add	r3, sp, #24
 801bc16:	e883 0003 	stmia.w	r3, {r0, r1}
 801bc1a:	4611      	mov	r1, r2
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	f7fb fc1d 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 801bc22:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801bc26:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bc2a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801bc2e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801bc32:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801bc36:	4299      	cmp	r1, r3
 801bc38:	d10b      	bne.n	801bc52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801bc3a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bc3e:	4552      	cmp	r2, sl
 801bc40:	d107      	bne.n	801bc52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801bc42:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801bc46:	455a      	cmp	r2, fp
 801bc48:	d103      	bne.n	801bc52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801bc4a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801bc4e:	454a      	cmp	r2, r9
 801bc50:	d06d      	beq.n	801bd2e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bc52:	f1bb 0f00 	cmp.w	fp, #0
 801bc56:	dd65      	ble.n	801bd24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801bc58:	f1b9 0f00 	cmp.w	r9, #0
 801bc5c:	dd62      	ble.n	801bd24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801bc5e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bc62:	fa1f f08a 	uxth.w	r0, sl
 801bc66:	4552      	cmp	r2, sl
 801bc68:	9000      	str	r0, [sp, #0]
 801bc6a:	da12      	bge.n	801bc92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801bc6c:	9301      	str	r3, [sp, #4]
 801bc6e:	9b00      	ldr	r3, [sp, #0]
 801bc70:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801bc74:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bc78:	1a9a      	subs	r2, r3, r2
 801bc7a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801bc7e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bc82:	f8ad 2016 	strh.w	r2, [sp, #22]
 801bc86:	69ea      	ldr	r2, [r5, #28]
 801bc88:	4631      	mov	r1, r6
 801bc8a:	4640      	mov	r0, r8
 801bc8c:	f7ff ff7a 	bl	801bb84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bc90:	9b01      	ldr	r3, [sp, #4]
 801bc92:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bc96:	429a      	cmp	r2, r3
 801bc98:	b29f      	uxth	r7, r3
 801bc9a:	da0d      	bge.n	801bcb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801bc9c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bca0:	1aba      	subs	r2, r7, r2
 801bca2:	f8ad a012 	strh.w	sl, [sp, #18]
 801bca6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bcaa:	f8ad 9016 	strh.w	r9, [sp, #22]
 801bcae:	69ea      	ldr	r2, [r5, #28]
 801bcb0:	4631      	mov	r1, r6
 801bcb2:	4640      	mov	r0, r8
 801bcb4:	f7ff ff66 	bl	801bb84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bcb8:	8822      	ldrh	r2, [r4, #0]
 801bcba:	88a3      	ldrh	r3, [r4, #4]
 801bcbc:	445f      	add	r7, fp
 801bcbe:	4413      	add	r3, r2
 801bcc0:	b29b      	uxth	r3, r3
 801bcc2:	b2bf      	uxth	r7, r7
 801bcc4:	b23a      	sxth	r2, r7
 801bcc6:	b219      	sxth	r1, r3
 801bcc8:	4291      	cmp	r1, r2
 801bcca:	dd0d      	ble.n	801bce8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801bccc:	1bdb      	subs	r3, r3, r7
 801bcce:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bcd2:	f8ad a012 	strh.w	sl, [sp, #18]
 801bcd6:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bcda:	f8ad 9016 	strh.w	r9, [sp, #22]
 801bcde:	69ea      	ldr	r2, [r5, #28]
 801bce0:	4631      	mov	r1, r6
 801bce2:	4640      	mov	r0, r8
 801bce4:	f7ff ff4e 	bl	801bb84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bce8:	88e2      	ldrh	r2, [r4, #6]
 801bcea:	8863      	ldrh	r3, [r4, #2]
 801bcec:	4413      	add	r3, r2
 801bcee:	9a00      	ldr	r2, [sp, #0]
 801bcf0:	444a      	add	r2, r9
 801bcf2:	b29b      	uxth	r3, r3
 801bcf4:	fa1f f982 	uxth.w	r9, r2
 801bcf8:	fa0f f289 	sxth.w	r2, r9
 801bcfc:	b219      	sxth	r1, r3
 801bcfe:	428a      	cmp	r2, r1
 801bd00:	da15      	bge.n	801bd2e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bd02:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bd06:	f9b4 0000 	ldrsh.w	r0, [r4]
 801bd0a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801bd0e:	eba3 0309 	sub.w	r3, r3, r9
 801bd12:	f8ad 0010 	strh.w	r0, [sp, #16]
 801bd16:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bd1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bd1e:	69ea      	ldr	r2, [r5, #28]
 801bd20:	4631      	mov	r1, r6
 801bd22:	e001      	b.n	801bd28 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801bd24:	69ea      	ldr	r2, [r5, #28]
 801bd26:	4621      	mov	r1, r4
 801bd28:	4640      	mov	r0, r8
 801bd2a:	f7ff ff2b 	bl	801bb84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bd2e:	4628      	mov	r0, r5
 801bd30:	f7ff fe96 	bl	801ba60 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bd34:	6861      	ldr	r1, [r4, #4]
 801bd36:	4602      	mov	r2, r0
 801bd38:	6820      	ldr	r0, [r4, #0]
 801bd3a:	4633      	mov	r3, r6
 801bd3c:	c303      	stmia	r3!, {r0, r1}
 801bd3e:	4611      	mov	r1, r2
 801bd40:	4630      	mov	r0, r6
 801bd42:	f7fb fb8b 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 801bd46:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	f77f af33 	ble.w	801bbb6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bd50:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	f77f af2e 	ble.w	801bbb6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bd5a:	4628      	mov	r0, r5
 801bd5c:	f7ff fe9c 	bl	801ba98 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bd60:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801bd64:	1a18      	subs	r0, r3, r0
 801bd66:	f8ad 0010 	strh.w	r0, [sp, #16]
 801bd6a:	4628      	mov	r0, r5
 801bd6c:	f7ff fea8 	bl	801bac0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bd70:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bd74:	1a18      	subs	r0, r3, r0
 801bd76:	f8ad 0012 	strh.w	r0, [sp, #18]
 801bd7a:	682b      	ldr	r3, [r5, #0]
 801bd7c:	4631      	mov	r1, r6
 801bd7e:	689b      	ldr	r3, [r3, #8]
 801bd80:	4628      	mov	r0, r5
 801bd82:	4798      	blx	r3
 801bd84:	e717      	b.n	801bbb6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801bd86 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801bd86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bd88:	aa02      	add	r2, sp, #8
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	f842 3d04 	str.w	r3, [r2, #-4]!
 801bd90:	4604      	mov	r4, r0
 801bd92:	3004      	adds	r0, #4
 801bd94:	460d      	mov	r5, r1
 801bd96:	f7fb fc39 	bl	801760c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801bd9a:	9a01      	ldr	r2, [sp, #4]
 801bd9c:	b11a      	cbz	r2, 801bda6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801bd9e:	4629      	mov	r1, r5
 801bda0:	4620      	mov	r0, r4
 801bda2:	f7ff feef 	bl	801bb84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bda6:	b003      	add	sp, #12
 801bda8:	bd30      	pop	{r4, r5, pc}

0801bdaa <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801bdaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bdac:	4602      	mov	r2, r0
 801bdae:	4604      	mov	r4, r0
 801bdb0:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801bdb4:	460d      	mov	r5, r1
 801bdb6:	6851      	ldr	r1, [r2, #4]
 801bdb8:	466b      	mov	r3, sp
 801bdba:	c303      	stmia	r3!, {r0, r1}
 801bdbc:	4629      	mov	r1, r5
 801bdbe:	4668      	mov	r0, sp
 801bdc0:	f7fb fb4c 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 801bdc4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801bdc8:	4669      	mov	r1, sp
 801bdca:	b123      	cbz	r3, 801bdd6 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801bdcc:	4620      	mov	r0, r4
 801bdce:	f7ff ffda 	bl	801bd86 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801bdd2:	b003      	add	sp, #12
 801bdd4:	bd30      	pop	{r4, r5, pc}
 801bdd6:	1d20      	adds	r0, r4, #4
 801bdd8:	f7fb fbdf 	bl	801759a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801bddc:	e7f9      	b.n	801bdd2 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801bdde <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801bdde:	680a      	ldr	r2, [r1, #0]
 801bde0:	460b      	mov	r3, r1
 801bde2:	6992      	ldr	r2, [r2, #24]
 801bde4:	1d01      	adds	r1, r0, #4
 801bde6:	4618      	mov	r0, r3
 801bde8:	4710      	bx	r2

0801bdea <_ZN8touchgfx12TextProviderC1Ev>:
 801bdea:	b510      	push	{r4, lr}
 801bdec:	2300      	movs	r3, #0
 801bdee:	2201      	movs	r2, #1
 801bdf0:	4604      	mov	r4, r0
 801bdf2:	e9c0 3300 	strd	r3, r3, [r0]
 801bdf6:	60c3      	str	r3, [r0, #12]
 801bdf8:	7403      	strb	r3, [r0, #16]
 801bdfa:	82c3      	strh	r3, [r0, #22]
 801bdfc:	8303      	strh	r3, [r0, #24]
 801bdfe:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801be00:	8603      	strh	r3, [r0, #48]	; 0x30
 801be02:	86c3      	strh	r3, [r0, #54]	; 0x36
 801be04:	8703      	strh	r3, [r0, #56]	; 0x38
 801be06:	63c3      	str	r3, [r0, #60]	; 0x3c
 801be08:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801be0c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801be10:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801be14:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801be18:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801be1c:	f7f8 fb82 	bl	8014524 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801be20:	4620      	mov	r0, r4
 801be22:	bd10      	pop	{r4, pc}

0801be24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801be24:	b530      	push	{r4, r5, lr}
 801be26:	2500      	movs	r5, #0
 801be28:	2401      	movs	r4, #1
 801be2a:	6843      	ldr	r3, [r0, #4]
 801be2c:	b913      	cbnz	r3, 801be34 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801be2e:	6803      	ldr	r3, [r0, #0]
 801be30:	b1f3      	cbz	r3, 801be70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801be32:	6043      	str	r3, [r0, #4]
 801be34:	7c03      	ldrb	r3, [r0, #16]
 801be36:	b143      	cbz	r3, 801be4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801be38:	68c3      	ldr	r3, [r0, #12]
 801be3a:	b12b      	cbz	r3, 801be48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801be3c:	881a      	ldrh	r2, [r3, #0]
 801be3e:	b11a      	cbz	r2, 801be48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801be40:	1c9a      	adds	r2, r3, #2
 801be42:	60c2      	str	r2, [r0, #12]
 801be44:	8818      	ldrh	r0, [r3, #0]
 801be46:	bd30      	pop	{r4, r5, pc}
 801be48:	7405      	strb	r5, [r0, #16]
 801be4a:	6843      	ldr	r3, [r0, #4]
 801be4c:	8819      	ldrh	r1, [r3, #0]
 801be4e:	b179      	cbz	r1, 801be70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801be50:	1c9a      	adds	r2, r3, #2
 801be52:	2902      	cmp	r1, #2
 801be54:	6042      	str	r2, [r0, #4]
 801be56:	d1f5      	bne.n	801be44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801be58:	6883      	ldr	r3, [r0, #8]
 801be5a:	1d1a      	adds	r2, r3, #4
 801be5c:	6082      	str	r2, [r0, #8]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	60c3      	str	r3, [r0, #12]
 801be62:	2b00      	cmp	r3, #0
 801be64:	d0e1      	beq.n	801be2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801be66:	881b      	ldrh	r3, [r3, #0]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	d0de      	beq.n	801be2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801be6c:	7404      	strb	r4, [r0, #16]
 801be6e:	e7dc      	b.n	801be2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801be70:	2000      	movs	r0, #0
 801be72:	e7e8      	b.n	801be46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801be74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801be74:	b410      	push	{r4}
 801be76:	63c3      	str	r3, [r0, #60]	; 0x3c
 801be78:	2300      	movs	r3, #0
 801be7a:	6082      	str	r2, [r0, #8]
 801be7c:	6001      	str	r1, [r0, #0]
 801be7e:	6043      	str	r3, [r0, #4]
 801be80:	60c3      	str	r3, [r0, #12]
 801be82:	7403      	strb	r3, [r0, #16]
 801be84:	8603      	strh	r3, [r0, #48]	; 0x30
 801be86:	8303      	strh	r3, [r0, #24]
 801be88:	8703      	strh	r3, [r0, #56]	; 0x38
 801be8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be8e:	f7f8 bb49 	b.w	8014524 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801be92 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801be92:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be94:	4605      	mov	r5, r0
 801be96:	4608      	mov	r0, r1
 801be98:	b1e9      	cbz	r1, 801bed6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801be9a:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801be9e:	460b      	mov	r3, r1
 801bea0:	f101 0708 	add.w	r7, r1, #8
 801bea4:	4622      	mov	r2, r4
 801bea6:	6818      	ldr	r0, [r3, #0]
 801bea8:	6859      	ldr	r1, [r3, #4]
 801beaa:	4626      	mov	r6, r4
 801beac:	c603      	stmia	r6!, {r0, r1}
 801beae:	3308      	adds	r3, #8
 801beb0:	42bb      	cmp	r3, r7
 801beb2:	4634      	mov	r4, r6
 801beb4:	d1f7      	bne.n	801bea6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801beb6:	6818      	ldr	r0, [r3, #0]
 801beb8:	6030      	str	r0, [r6, #0]
 801beba:	889b      	ldrh	r3, [r3, #4]
 801bebc:	80b3      	strh	r3, [r6, #4]
 801bebe:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801bec2:	015b      	lsls	r3, r3, #5
 801bec4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bec8:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801becc:	430b      	orrs	r3, r1
 801bece:	425b      	negs	r3, r3
 801bed0:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801bed4:	4610      	mov	r0, r2
 801bed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bed8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bed8:	b538      	push	{r3, r4, r5, lr}
 801beda:	460c      	mov	r4, r1
 801bedc:	6811      	ldr	r1, [r2, #0]
 801bede:	4610      	mov	r0, r2
 801bee0:	68cd      	ldr	r5, [r1, #12]
 801bee2:	4619      	mov	r1, r3
 801bee4:	47a8      	blx	r5
 801bee6:	2800      	cmp	r0, #0
 801bee8:	bf08      	it	eq
 801beea:	4620      	moveq	r0, r4
 801beec:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bef0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bef2:	4604      	mov	r4, r0
 801bef4:	4615      	mov	r5, r2
 801bef6:	4608      	mov	r0, r1
 801bef8:	b93a      	cbnz	r2, 801bf0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801befa:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801befe:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801bf02:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801bf06:	4628      	mov	r0, r5
 801bf08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf0a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801bf0e:	8893      	ldrh	r3, [r2, #4]
 801bf10:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801bf14:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bf18:	79ee      	ldrb	r6, [r5, #7]
 801bf1a:	4316      	orrs	r6, r2
 801bf1c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801bf20:	189a      	adds	r2, r3, r2
 801bf22:	b291      	uxth	r1, r2
 801bf24:	291d      	cmp	r1, #29
 801bf26:	b2b7      	uxth	r7, r6
 801bf28:	f200 8083 	bhi.w	801c032 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801bf2c:	2201      	movs	r2, #1
 801bf2e:	408a      	lsls	r2, r1
 801bf30:	4978      	ldr	r1, [pc, #480]	; (801c114 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801bf32:	420a      	tst	r2, r1
 801bf34:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801bf38:	d12d      	bne.n	801bf96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801bf3a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801bf3e:	d078      	beq.n	801c032 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801bf40:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801bf44:	462b      	mov	r3, r5
 801bf46:	f105 0e08 	add.w	lr, r5, #8
 801bf4a:	4615      	mov	r5, r2
 801bf4c:	6818      	ldr	r0, [r3, #0]
 801bf4e:	6859      	ldr	r1, [r3, #4]
 801bf50:	4694      	mov	ip, r2
 801bf52:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bf56:	3308      	adds	r3, #8
 801bf58:	4573      	cmp	r3, lr
 801bf5a:	4662      	mov	r2, ip
 801bf5c:	d1f6      	bne.n	801bf4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 801bf5e:	6818      	ldr	r0, [r3, #0]
 801bf60:	f8cc 0000 	str.w	r0, [ip]
 801bf64:	889b      	ldrh	r3, [r3, #4]
 801bf66:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bf6a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801bf6e:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801bf72:	b2b3      	uxth	r3, r6
 801bf74:	1aca      	subs	r2, r1, r3
 801bf76:	b292      	uxth	r2, r2
 801bf78:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801bf7c:	10d2      	asrs	r2, r2, #3
 801bf7e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801bf82:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801bf86:	4302      	orrs	r2, r0
 801bf88:	1bcf      	subs	r7, r1, r7
 801bf8a:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801bf8e:	1afb      	subs	r3, r7, r3
 801bf90:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801bf94:	e7b7      	b.n	801bf06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bf96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bf98:	b92b      	cbnz	r3, 801bfa6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801bf9a:	4b5f      	ldr	r3, [pc, #380]	; (801c118 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801bf9c:	4a5f      	ldr	r2, [pc, #380]	; (801c11c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801bf9e:	4860      	ldr	r0, [pc, #384]	; (801c120 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801bfa0:	21c0      	movs	r1, #192	; 0xc0
 801bfa2:	f00d fa21 	bl	80293e8 <__assert_func>
 801bfa6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801bfa8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bfac:	8b59      	ldrh	r1, [r3, #26]
 801bfae:	f640 6333 	movw	r3, #3635	; 0xe33
 801bfb2:	4299      	cmp	r1, r3
 801bfb4:	d110      	bne.n	801bfd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801bfb6:	6803      	ldr	r3, [r0, #0]
 801bfb8:	68db      	ldr	r3, [r3, #12]
 801bfba:	4798      	blx	r3
 801bfbc:	7b41      	ldrb	r1, [r0, #13]
 801bfbe:	00cb      	lsls	r3, r1, #3
 801bfc0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bfc4:	7a03      	ldrb	r3, [r0, #8]
 801bfc6:	0648      	lsls	r0, r1, #25
 801bfc8:	ea43 0302 	orr.w	r3, r3, r2
 801bfcc:	bf44      	itt	mi
 801bfce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bfd2:	b21b      	sxthmi	r3, r3
 801bfd4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bfd8:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801bfdc:	443b      	add	r3, r7
 801bfde:	4433      	add	r3, r6
 801bfe0:	b29b      	uxth	r3, r3
 801bfe2:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801bfe6:	462a      	mov	r2, r5
 801bfe8:	f105 0c08 	add.w	ip, r5, #8
 801bfec:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bff0:	4635      	mov	r5, r6
 801bff2:	6810      	ldr	r0, [r2, #0]
 801bff4:	6851      	ldr	r1, [r2, #4]
 801bff6:	4637      	mov	r7, r6
 801bff8:	c703      	stmia	r7!, {r0, r1}
 801bffa:	3208      	adds	r2, #8
 801bffc:	4562      	cmp	r2, ip
 801bffe:	463e      	mov	r6, r7
 801c000:	d1f7      	bne.n	801bff2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801c002:	6810      	ldr	r0, [r2, #0]
 801c004:	6038      	str	r0, [r7, #0]
 801c006:	8892      	ldrh	r2, [r2, #4]
 801c008:	80ba      	strh	r2, [r7, #4]
 801c00a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c00e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c012:	10db      	asrs	r3, r3, #3
 801c014:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c018:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c01c:	4313      	orrs	r3, r2
 801c01e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c022:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801c026:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801c02a:	1a9b      	subs	r3, r3, r2
 801c02c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801c030:	e769      	b.n	801bf06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c032:	f023 0204 	bic.w	r2, r3, #4
 801c036:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c03a:	428a      	cmp	r2, r1
 801c03c:	d003      	beq.n	801c046 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801c03e:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c042:	4293      	cmp	r3, r2
 801c044:	d120      	bne.n	801c088 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 801c046:	3b01      	subs	r3, #1
 801c048:	4602      	mov	r2, r0
 801c04a:	b29b      	uxth	r3, r3
 801c04c:	4629      	mov	r1, r5
 801c04e:	4620      	mov	r0, r4
 801c050:	f7ff ff42 	bl	801bed8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c054:	7b41      	ldrb	r1, [r0, #13]
 801c056:	00cb      	lsls	r3, r1, #3
 801c058:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c05c:	7a03      	ldrb	r3, [r0, #8]
 801c05e:	0649      	lsls	r1, r1, #25
 801c060:	ea43 0302 	orr.w	r3, r3, r2
 801c064:	bf44      	itt	mi
 801c066:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c06a:	b21b      	sxthmi	r3, r3
 801c06c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c070:	7b6b      	ldrb	r3, [r5, #13]
 801c072:	7aaa      	ldrb	r2, [r5, #10]
 801c074:	005b      	lsls	r3, r3, #1
 801c076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c07a:	4313      	orrs	r3, r2
 801c07c:	115a      	asrs	r2, r3, #5
 801c07e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c082:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c086:	e036      	b.n	801c0f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801c088:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c08c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c090:	7a2a      	ldrb	r2, [r5, #8]
 801c092:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c096:	ea42 0201 	orr.w	r2, r2, r1
 801c09a:	bf1c      	itt	ne
 801c09c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c0a0:	b212      	sxthne	r2, r2
 801c0a2:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c0a6:	f640 6109 	movw	r1, #3593	; 0xe09
 801c0aa:	f023 0210 	bic.w	r2, r3, #16
 801c0ae:	428a      	cmp	r2, r1
 801c0b0:	d003      	beq.n	801c0ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 801c0b2:	f640 6213 	movw	r2, #3603	; 0xe13
 801c0b6:	4293      	cmp	r3, r2
 801c0b8:	d12a      	bne.n	801c110 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801c0ba:	7b6e      	ldrb	r6, [r5, #13]
 801c0bc:	0076      	lsls	r6, r6, #1
 801c0be:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c0c2:	7aae      	ldrb	r6, [r5, #10]
 801c0c4:	4316      	orrs	r6, r2
 801c0c6:	f640 6213 	movw	r2, #3603	; 0xe13
 801c0ca:	4293      	cmp	r3, r2
 801c0cc:	bf18      	it	ne
 801c0ce:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c0d2:	4602      	mov	r2, r0
 801c0d4:	bf14      	ite	ne
 801c0d6:	b29b      	uxthne	r3, r3
 801c0d8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c0dc:	4629      	mov	r1, r5
 801c0de:	4620      	mov	r0, r4
 801c0e0:	f7ff fefa 	bl	801bed8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c0e4:	7b43      	ldrb	r3, [r0, #13]
 801c0e6:	7a82      	ldrb	r2, [r0, #10]
 801c0e8:	005b      	lsls	r3, r3, #1
 801c0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c0ee:	4313      	orrs	r3, r2
 801c0f0:	1af6      	subs	r6, r6, r3
 801c0f2:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801c0f6:	7b69      	ldrb	r1, [r5, #13]
 801c0f8:	00cb      	lsls	r3, r1, #3
 801c0fa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c0fe:	7a2b      	ldrb	r3, [r5, #8]
 801c100:	4313      	orrs	r3, r2
 801c102:	064a      	lsls	r2, r1, #25
 801c104:	bf44      	itt	mi
 801c106:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c10a:	b21b      	sxthmi	r3, r3
 801c10c:	1bdb      	subs	r3, r3, r7
 801c10e:	e73f      	b.n	801bf90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801c110:	2300      	movs	r3, #0
 801c112:	e7b6      	b.n	801c082 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 801c114:	3fc00079 	.word	0x3fc00079
 801c118:	0802fe4c 	.word	0x0802fe4c
 801c11c:	080300be 	.word	0x080300be
 801c120:	0802fe55 	.word	0x0802fe55

0801c124 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c128:	4604      	mov	r4, r0
 801c12a:	b942      	cbnz	r2, 801c13e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c12c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c130:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c134:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c138:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c13c:	e046      	b.n	801c1cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c13e:	7b51      	ldrb	r1, [r2, #13]
 801c140:	8893      	ldrh	r3, [r2, #4]
 801c142:	010f      	lsls	r7, r1, #4
 801c144:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c148:	79d7      	ldrb	r7, [r2, #7]
 801c14a:	4307      	orrs	r7, r0
 801c14c:	2f04      	cmp	r7, #4
 801c14e:	b2bd      	uxth	r5, r7
 801c150:	bfcc      	ite	gt
 801c152:	08bf      	lsrgt	r7, r7, #2
 801c154:	2701      	movle	r7, #1
 801c156:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c15a:	f200 80ab 	bhi.w	801c2b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801c15e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c162:	4283      	cmp	r3, r0
 801c164:	d216      	bcs.n	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c166:	f240 605b 	movw	r0, #1627	; 0x65b
 801c16a:	4283      	cmp	r3, r0
 801c16c:	d859      	bhi.n	801c222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801c16e:	f240 6057 	movw	r0, #1623	; 0x657
 801c172:	4283      	cmp	r3, r0
 801c174:	d20e      	bcs.n	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c176:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c17a:	d24a      	bcs.n	801c212 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801c17c:	f240 604e 	movw	r0, #1614	; 0x64e
 801c180:	4283      	cmp	r3, r0
 801c182:	d207      	bcs.n	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c184:	f240 601a 	movw	r0, #1562	; 0x61a
 801c188:	4283      	cmp	r3, r0
 801c18a:	d02a      	beq.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c18c:	d821      	bhi.n	801c1d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801c18e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c192:	d35b      	bcc.n	801c24c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c194:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801c198:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c19c:	f040 80d0 	bne.w	801c340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c1a0:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801c1a4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c1a8:	f040 80ca 	bne.w	801c340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c1ac:	00cb      	lsls	r3, r1, #3
 801c1ae:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c1b2:	7a13      	ldrb	r3, [r2, #8]
 801c1b4:	0649      	lsls	r1, r1, #25
 801c1b6:	ea43 0300 	orr.w	r3, r3, r0
 801c1ba:	bf44      	itt	mi
 801c1bc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c1c0:	b21b      	sxthmi	r3, r3
 801c1c2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c1c6:	1b5d      	subs	r5, r3, r5
 801c1c8:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c1cc:	4610      	mov	r0, r2
 801c1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c1d2:	f240 604b 	movw	r0, #1611	; 0x64b
 801c1d6:	4283      	cmp	r3, r0
 801c1d8:	d338      	bcc.n	801c24c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c1da:	f240 604c 	movw	r0, #1612	; 0x64c
 801c1de:	4283      	cmp	r3, r0
 801c1e0:	d9d8      	bls.n	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c1e2:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801c1e6:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801c1ea:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c1ee:	f040 80f1 	bne.w	801c3d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801c1f2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c1f6:	f040 80ed 	bne.w	801c3d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801c1fa:	00cb      	lsls	r3, r1, #3
 801c1fc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c200:	7a13      	ldrb	r3, [r2, #8]
 801c202:	064e      	lsls	r6, r1, #25
 801c204:	ea43 0300 	orr.w	r3, r3, r0
 801c208:	bf44      	itt	mi
 801c20a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c20e:	b21b      	sxthmi	r3, r3
 801c210:	e7d9      	b.n	801c1c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801c212:	f240 6054 	movw	r0, #1620	; 0x654
 801c216:	4283      	cmp	r3, r0
 801c218:	d8e3      	bhi.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c21a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c21e:	d9e0      	bls.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c220:	e7b8      	b.n	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c222:	f240 6074 	movw	r0, #1652	; 0x674
 801c226:	4283      	cmp	r3, r0
 801c228:	d0b4      	beq.n	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c22a:	d82d      	bhi.n	801c288 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801c22c:	f240 605e 	movw	r0, #1630	; 0x65e
 801c230:	4283      	cmp	r3, r0
 801c232:	d804      	bhi.n	801c23e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801c234:	f240 605d 	movw	r0, #1629	; 0x65d
 801c238:	4283      	cmp	r3, r0
 801c23a:	d3d2      	bcc.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c23c:	e7aa      	b.n	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c23e:	f240 605f 	movw	r0, #1631	; 0x65f
 801c242:	4283      	cmp	r3, r0
 801c244:	d0cd      	beq.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c246:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c24a:	d0a3      	beq.n	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c24c:	00cb      	lsls	r3, r1, #3
 801c24e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c252:	7a13      	ldrb	r3, [r2, #8]
 801c254:	0649      	lsls	r1, r1, #25
 801c256:	ea43 0300 	orr.w	r3, r3, r0
 801c25a:	bf44      	itt	mi
 801c25c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c260:	b21b      	sxthmi	r3, r3
 801c262:	1b5d      	subs	r5, r3, r5
 801c264:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c268:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c26c:	7b53      	ldrb	r3, [r2, #13]
 801c26e:	015b      	lsls	r3, r3, #5
 801c270:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c274:	7993      	ldrb	r3, [r2, #6]
 801c276:	430b      	orrs	r3, r1
 801c278:	005b      	lsls	r3, r3, #1
 801c27a:	2105      	movs	r1, #5
 801c27c:	fb93 f3f1 	sdiv	r3, r3, r1
 801c280:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c284:	440b      	add	r3, r1
 801c286:	e757      	b.n	801c138 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c288:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c28c:	4283      	cmp	r3, r0
 801c28e:	d809      	bhi.n	801c2a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801c290:	f240 60df 	movw	r0, #1759	; 0x6df
 801c294:	4283      	cmp	r3, r0
 801c296:	f4bf af7d 	bcs.w	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c29a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c29e:	2b05      	cmp	r3, #5
 801c2a0:	d8d4      	bhi.n	801c24c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c2a2:	e777      	b.n	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c2a4:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801c2a8:	4283      	cmp	r3, r0
 801c2aa:	d09a      	beq.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c2ac:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801c2b0:	4283      	cmp	r3, r0
 801c2b2:	e7ca      	b.n	801c24a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801c2b4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801c2b8:	d22b      	bcs.n	801c312 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801c2ba:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801c2be:	4283      	cmp	r3, r0
 801c2c0:	d28f      	bcs.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c2c2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c2c6:	4283      	cmp	r3, r0
 801c2c8:	d816      	bhi.n	801c2f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801c2ca:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801c2ce:	4283      	cmp	r3, r0
 801c2d0:	f4bf af60 	bcs.w	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c2d4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801c2d8:	4283      	cmp	r3, r0
 801c2da:	d80a      	bhi.n	801c2f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801c2dc:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801c2e0:	4283      	cmp	r3, r0
 801c2e2:	f4bf af57 	bcs.w	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c2e6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801c2ea:	4283      	cmp	r3, r0
 801c2ec:	f43f af79 	beq.w	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c2f0:	e7ac      	b.n	801c24c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c2f2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801c2f6:	e7f8      	b.n	801c2ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801c2f8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801c2fc:	4283      	cmp	r3, r0
 801c2fe:	d802      	bhi.n	801c306 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801c300:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c304:	e798      	b.n	801c238 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801c306:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801c30a:	4283      	cmp	r3, r0
 801c30c:	f47f af42 	bne.w	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c310:	e767      	b.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c312:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801c316:	4283      	cmp	r3, r0
 801c318:	f43f af63 	beq.w	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c31c:	d802      	bhi.n	801c324 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801c31e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801c322:	e7f2      	b.n	801c30a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801c324:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801c328:	4283      	cmp	r3, r0
 801c32a:	d805      	bhi.n	801c338 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801c32c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801c330:	4283      	cmp	r3, r0
 801c332:	f4ff af2f 	bcc.w	801c194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c336:	e754      	b.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c338:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801c33c:	4283      	cmp	r3, r0
 801c33e:	e7af      	b.n	801c2a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801c340:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801c344:	4617      	mov	r7, r2
 801c346:	f102 0808 	add.w	r8, r2, #8
 801c34a:	4666      	mov	r6, ip
 801c34c:	6838      	ldr	r0, [r7, #0]
 801c34e:	6879      	ldr	r1, [r7, #4]
 801c350:	46e6      	mov	lr, ip
 801c352:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c356:	3708      	adds	r7, #8
 801c358:	4547      	cmp	r7, r8
 801c35a:	46f4      	mov	ip, lr
 801c35c:	d1f6      	bne.n	801c34c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801c35e:	6838      	ldr	r0, [r7, #0]
 801c360:	f8ce 0000 	str.w	r0, [lr]
 801c364:	88b9      	ldrh	r1, [r7, #4]
 801c366:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c36a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c36e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c372:	d009      	beq.n	801c388 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 801c374:	7b51      	ldrb	r1, [r2, #13]
 801c376:	7992      	ldrb	r2, [r2, #6]
 801c378:	0149      	lsls	r1, r1, #5
 801c37a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c37e:	4311      	orrs	r1, r2
 801c380:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c384:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c388:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c38c:	d00d      	beq.n	801c3aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 801c38e:	442b      	add	r3, r5
 801c390:	b29b      	uxth	r3, r3
 801c392:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c396:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c39a:	10db      	asrs	r3, r3, #3
 801c39c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c3a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c3a4:	4313      	orrs	r3, r2
 801c3a6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c3aa:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c3ae:	00cb      	lsls	r3, r1, #3
 801c3b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c3b4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c3b8:	064f      	lsls	r7, r1, #25
 801c3ba:	ea43 0302 	orr.w	r3, r3, r2
 801c3be:	bf44      	itt	mi
 801c3c0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c3c4:	b21b      	sxthmi	r3, r3
 801c3c6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c3ca:	1b5d      	subs	r5, r3, r5
 801c3cc:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c3d0:	4632      	mov	r2, r6
 801c3d2:	e6fb      	b.n	801c1cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c3d4:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801c3d8:	4694      	mov	ip, r2
 801c3da:	f102 0908 	add.w	r9, r2, #8
 801c3de:	4676      	mov	r6, lr
 801c3e0:	f8dc 0000 	ldr.w	r0, [ip]
 801c3e4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c3e8:	46f0      	mov	r8, lr
 801c3ea:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c3ee:	f10c 0c08 	add.w	ip, ip, #8
 801c3f2:	45cc      	cmp	ip, r9
 801c3f4:	46c6      	mov	lr, r8
 801c3f6:	d1f3      	bne.n	801c3e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 801c3f8:	f8dc 0000 	ldr.w	r0, [ip]
 801c3fc:	f8c8 0000 	str.w	r0, [r8]
 801c400:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801c404:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c408:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c40c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c410:	d009      	beq.n	801c426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 801c412:	7b51      	ldrb	r1, [r2, #13]
 801c414:	7992      	ldrb	r2, [r2, #6]
 801c416:	0149      	lsls	r1, r1, #5
 801c418:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c41c:	4311      	orrs	r1, r2
 801c41e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c422:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c426:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c42a:	d00d      	beq.n	801c448 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801c42c:	1bdb      	subs	r3, r3, r7
 801c42e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c432:	b29b      	uxth	r3, r3
 801c434:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c438:	10db      	asrs	r3, r3, #3
 801c43a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c43e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c442:	4313      	orrs	r3, r2
 801c444:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c448:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c44c:	00cb      	lsls	r3, r1, #3
 801c44e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c452:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c456:	0648      	lsls	r0, r1, #25
 801c458:	ea43 0302 	orr.w	r3, r3, r2
 801c45c:	bf44      	itt	mi
 801c45e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c462:	b21b      	sxthmi	r3, r3
 801c464:	e7b1      	b.n	801c3ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

0801c468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c46c:	461e      	mov	r6, r3
 801c46e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c470:	4604      	mov	r4, r0
 801c472:	4617      	mov	r7, r2
 801c474:	b92b      	cbnz	r3, 801c482 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801c476:	4b25      	ldr	r3, [pc, #148]	; (801c50c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801c478:	4a25      	ldr	r2, [pc, #148]	; (801c510 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801c47a:	4826      	ldr	r0, [pc, #152]	; (801c514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801c47c:	21c0      	movs	r1, #192	; 0xc0
 801c47e:	f00c ffb3 	bl	80293e8 <__assert_func>
 801c482:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c484:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c488:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c48c:	f7f7 ffa4 	bl	80143d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c490:	4605      	mov	r5, r0
 801c492:	b918      	cbnz	r0, 801c49c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801c494:	6030      	str	r0, [r6, #0]
 801c496:	4628      	mov	r0, r5
 801c498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c49c:	683b      	ldr	r3, [r7, #0]
 801c49e:	4601      	mov	r1, r0
 801c4a0:	68db      	ldr	r3, [r3, #12]
 801c4a2:	4638      	mov	r0, r7
 801c4a4:	4798      	blx	r3
 801c4a6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c4aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c4ae:	4602      	mov	r2, r0
 801c4b0:	6030      	str	r0, [r6, #0]
 801c4b2:	d213      	bcs.n	801c4dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801c4b4:	4643      	mov	r3, r8
 801c4b6:	4639      	mov	r1, r7
 801c4b8:	4620      	mov	r0, r4
 801c4ba:	f7ff fe33 	bl	801c124 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c4be:	6030      	str	r0, [r6, #0]
 801c4c0:	6833      	ldr	r3, [r6, #0]
 801c4c2:	b143      	cbz	r3, 801c4d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801c4c4:	7b5a      	ldrb	r2, [r3, #13]
 801c4c6:	7a9b      	ldrb	r3, [r3, #10]
 801c4c8:	0052      	lsls	r2, r2, #1
 801c4ca:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c4ce:	4313      	orrs	r3, r2
 801c4d0:	bf0c      	ite	eq
 801c4d2:	2301      	moveq	r3, #1
 801c4d4:	2300      	movne	r3, #0
 801c4d6:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c4da:	e7dc      	b.n	801c496 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801c4dc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c4e0:	b29b      	uxth	r3, r3
 801c4e2:	2b7f      	cmp	r3, #127	; 0x7f
 801c4e4:	d804      	bhi.n	801c4f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801c4e6:	4639      	mov	r1, r7
 801c4e8:	4620      	mov	r0, r4
 801c4ea:	f7ff fd01 	bl	801bef0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c4ee:	e7e6      	b.n	801c4be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c4f0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d0e3      	beq.n	801c4c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c4f8:	f640 1302 	movw	r3, #2306	; 0x902
 801c4fc:	429d      	cmp	r5, r3
 801c4fe:	d1df      	bne.n	801c4c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c500:	4601      	mov	r1, r0
 801c502:	4620      	mov	r0, r4
 801c504:	f7ff fcc5 	bl	801be92 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c508:	e7d9      	b.n	801c4be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c50a:	bf00      	nop
 801c50c:	0802fe4c 	.word	0x0802fe4c
 801c510:	080300be 	.word	0x080300be
 801c514:	0802fe55 	.word	0x0802fe55

0801c518 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c51c:	461e      	mov	r6, r3
 801c51e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c520:	4604      	mov	r4, r0
 801c522:	4617      	mov	r7, r2
 801c524:	b92b      	cbnz	r3, 801c532 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801c526:	4b26      	ldr	r3, [pc, #152]	; (801c5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801c528:	4a26      	ldr	r2, [pc, #152]	; (801c5c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801c52a:	4827      	ldr	r0, [pc, #156]	; (801c5c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801c52c:	21c0      	movs	r1, #192	; 0xc0
 801c52e:	f00c ff5b 	bl	80293e8 <__assert_func>
 801c532:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c534:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c538:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c53c:	f7f7 ff4c 	bl	80143d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c540:	4605      	mov	r5, r0
 801c542:	b918      	cbnz	r0, 801c54c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801c544:	6030      	str	r0, [r6, #0]
 801c546:	4628      	mov	r0, r5
 801c548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c54c:	683b      	ldr	r3, [r7, #0]
 801c54e:	4601      	mov	r1, r0
 801c550:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c554:	4638      	mov	r0, r7
 801c556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c55a:	47c8      	blx	r9
 801c55c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c564:	4602      	mov	r2, r0
 801c566:	6030      	str	r0, [r6, #0]
 801c568:	d213      	bcs.n	801c592 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801c56a:	4643      	mov	r3, r8
 801c56c:	4639      	mov	r1, r7
 801c56e:	4620      	mov	r0, r4
 801c570:	f7ff fdd8 	bl	801c124 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c574:	6030      	str	r0, [r6, #0]
 801c576:	6833      	ldr	r3, [r6, #0]
 801c578:	b143      	cbz	r3, 801c58c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801c57a:	7b5a      	ldrb	r2, [r3, #13]
 801c57c:	7a9b      	ldrb	r3, [r3, #10]
 801c57e:	0052      	lsls	r2, r2, #1
 801c580:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c584:	4313      	orrs	r3, r2
 801c586:	bf0c      	ite	eq
 801c588:	2301      	moveq	r3, #1
 801c58a:	2300      	movne	r3, #0
 801c58c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c590:	e7d9      	b.n	801c546 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801c592:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c596:	b29b      	uxth	r3, r3
 801c598:	2b7f      	cmp	r3, #127	; 0x7f
 801c59a:	d804      	bhi.n	801c5a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801c59c:	4639      	mov	r1, r7
 801c59e:	4620      	mov	r0, r4
 801c5a0:	f7ff fca6 	bl	801bef0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c5a4:	e7e6      	b.n	801c574 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c5a6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d0e3      	beq.n	801c576 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c5ae:	f640 1302 	movw	r3, #2306	; 0x902
 801c5b2:	429d      	cmp	r5, r3
 801c5b4:	d1df      	bne.n	801c576 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c5b6:	4601      	mov	r1, r0
 801c5b8:	4620      	mov	r0, r4
 801c5ba:	f7ff fc6a 	bl	801be92 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c5be:	e7d9      	b.n	801c574 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c5c0:	0802fe4c 	.word	0x0802fe4c
 801c5c4:	080300be 	.word	0x080300be
 801c5c8:	0802fe55 	.word	0x0802fe55

0801c5cc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c5cc:	b510      	push	{r4, lr}
 801c5ce:	4604      	mov	r4, r0
 801c5d0:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801c5d2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c5d4:	b9d9      	cbnz	r1, 801c60e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801c5d6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c5d8:	2b0a      	cmp	r3, #10
 801c5da:	d036      	beq.n	801c64a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f7ff fc21 	bl	801be24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c5e2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c5e4:	2b09      	cmp	r3, #9
 801c5e6:	d906      	bls.n	801c5f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801c5e8:	4b18      	ldr	r3, [pc, #96]	; (801c64c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801c5ea:	4a19      	ldr	r2, [pc, #100]	; (801c650 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801c5ec:	4819      	ldr	r0, [pc, #100]	; (801c654 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801c5ee:	f44f 7182 	mov.w	r1, #260	; 0x104
 801c5f2:	f00c fef9 	bl	80293e8 <__assert_func>
 801c5f6:	1c5a      	adds	r2, r3, #1
 801c5f8:	8622      	strh	r2, [r4, #48]	; 0x30
 801c5fa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c5fc:	4413      	add	r3, r2
 801c5fe:	b29b      	uxth	r3, r3
 801c600:	2b09      	cmp	r3, #9
 801c602:	bf88      	it	hi
 801c604:	3b0a      	subhi	r3, #10
 801c606:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c60a:	8358      	strh	r0, [r3, #26]
 801c60c:	e7e3      	b.n	801c5d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801c60e:	2b0a      	cmp	r3, #10
 801c610:	d01b      	beq.n	801c64a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c612:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c614:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c618:	3901      	subs	r1, #1
 801c61a:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801c61c:	8721      	strh	r1, [r4, #56]	; 0x38
 801c61e:	1c51      	adds	r1, r2, #1
 801c620:	b289      	uxth	r1, r1
 801c622:	2901      	cmp	r1, #1
 801c624:	bf8a      	itet	hi
 801c626:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c62a:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801c62c:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801c62e:	2b09      	cmp	r3, #9
 801c630:	d8da      	bhi.n	801c5e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801c632:	1c5a      	adds	r2, r3, #1
 801c634:	8622      	strh	r2, [r4, #48]	; 0x30
 801c636:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c638:	4413      	add	r3, r2
 801c63a:	b29b      	uxth	r3, r3
 801c63c:	2b09      	cmp	r3, #9
 801c63e:	bf88      	it	hi
 801c640:	3b0a      	subhi	r3, #10
 801c642:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c646:	8358      	strh	r0, [r3, #26]
 801c648:	e7c2      	b.n	801c5d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c64a:	bd10      	pop	{r4, pc}
 801c64c:	0802fe81 	.word	0x0802fe81
 801c650:	08030214 	.word	0x08030214
 801c654:	0802fe55 	.word	0x0802fe55

0801c658 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c658:	b538      	push	{r3, r4, r5, lr}
 801c65a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801c65c:	4604      	mov	r4, r0
 801c65e:	b92a      	cbnz	r2, 801c66c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801c660:	4b13      	ldr	r3, [pc, #76]	; (801c6b0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801c662:	4a14      	ldr	r2, [pc, #80]	; (801c6b4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801c664:	4814      	ldr	r0, [pc, #80]	; (801c6b8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801c666:	21d5      	movs	r1, #213	; 0xd5
 801c668:	f00c febe 	bl	80293e8 <__assert_func>
 801c66c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c66e:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801c672:	3a01      	subs	r2, #1
 801c674:	8b4d      	ldrh	r5, [r1, #26]
 801c676:	8602      	strh	r2, [r0, #48]	; 0x30
 801c678:	1c5a      	adds	r2, r3, #1
 801c67a:	b292      	uxth	r2, r2
 801c67c:	2a09      	cmp	r2, #9
 801c67e:	bf86      	itte	hi
 801c680:	3b09      	subhi	r3, #9
 801c682:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801c684:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801c686:	f7ff ffa1 	bl	801c5cc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c68a:	8b23      	ldrh	r3, [r4, #24]
 801c68c:	2b01      	cmp	r3, #1
 801c68e:	bf9c      	itt	ls
 801c690:	3301      	addls	r3, #1
 801c692:	8323      	strhls	r3, [r4, #24]
 801c694:	8ae3      	ldrh	r3, [r4, #22]
 801c696:	b90b      	cbnz	r3, 801c69c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801c698:	2302      	movs	r3, #2
 801c69a:	82e3      	strh	r3, [r4, #22]
 801c69c:	8ae3      	ldrh	r3, [r4, #22]
 801c69e:	3b01      	subs	r3, #1
 801c6a0:	b29b      	uxth	r3, r3
 801c6a2:	82e3      	strh	r3, [r4, #22]
 801c6a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c6a8:	4628      	mov	r0, r5
 801c6aa:	8265      	strh	r5, [r4, #18]
 801c6ac:	bd38      	pop	{r3, r4, r5, pc}
 801c6ae:	bf00      	nop
 801c6b0:	0802fe4c 	.word	0x0802fe4c
 801c6b4:	08030169 	.word	0x08030169
 801c6b8:	0802fe55 	.word	0x0802fe55

0801c6bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c6bc:	b538      	push	{r3, r4, r5, lr}
 801c6be:	428a      	cmp	r2, r1
 801c6c0:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801c6c2:	d90c      	bls.n	801c6de <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801c6c4:	b92c      	cbnz	r4, 801c6d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801c6c6:	4b1c      	ldr	r3, [pc, #112]	; (801c738 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801c6c8:	4a1c      	ldr	r2, [pc, #112]	; (801c73c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801c6ca:	21e1      	movs	r1, #225	; 0xe1
 801c6cc:	481c      	ldr	r0, [pc, #112]	; (801c740 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801c6ce:	f00c fe8b 	bl	80293e8 <__assert_func>
 801c6d2:	3c01      	subs	r4, #1
 801c6d4:	8604      	strh	r4, [r0, #48]	; 0x30
 801c6d6:	4b1b      	ldr	r3, [pc, #108]	; (801c744 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801c6d8:	4a1b      	ldr	r2, [pc, #108]	; (801c748 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801c6da:	21c5      	movs	r1, #197	; 0xc5
 801c6dc:	e7f6      	b.n	801c6cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c6de:	428c      	cmp	r4, r1
 801c6e0:	d203      	bcs.n	801c6ea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801c6e2:	4b1a      	ldr	r3, [pc, #104]	; (801c74c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801c6e4:	4a1a      	ldr	r2, [pc, #104]	; (801c750 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801c6e6:	21cb      	movs	r1, #203	; 0xcb
 801c6e8:	e7f0      	b.n	801c6cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c6ea:	1a64      	subs	r4, r4, r1
 801c6ec:	8604      	strh	r4, [r0, #48]	; 0x30
 801c6ee:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801c6f0:	4421      	add	r1, r4
 801c6f2:	b289      	uxth	r1, r1
 801c6f4:	2909      	cmp	r1, #9
 801c6f6:	bf88      	it	hi
 801c6f8:	390a      	subhi	r1, #10
 801c6fa:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c6fc:	250a      	movs	r5, #10
 801c6fe:	b1ba      	cbz	r2, 801c730 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801c700:	3a01      	subs	r2, #1
 801c702:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801c704:	b292      	uxth	r2, r2
 801c706:	2909      	cmp	r1, #9
 801c708:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c70c:	d903      	bls.n	801c716 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801c70e:	4b11      	ldr	r3, [pc, #68]	; (801c754 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801c710:	4a11      	ldr	r2, [pc, #68]	; (801c758 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801c712:	21e6      	movs	r1, #230	; 0xe6
 801c714:	e7da      	b.n	801c6cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c716:	3101      	adds	r1, #1
 801c718:	8601      	strh	r1, [r0, #48]	; 0x30
 801c71a:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c71c:	b901      	cbnz	r1, 801c720 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801c71e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801c720:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c722:	3901      	subs	r1, #1
 801c724:	b289      	uxth	r1, r1
 801c726:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c728:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c72c:	834c      	strh	r4, [r1, #26]
 801c72e:	e7e6      	b.n	801c6fe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801c730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c734:	f7ff bf4a 	b.w	801c5cc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c738:	0802fe4c 	.word	0x0802fe4c
 801c73c:	0802ff42 	.word	0x0802ff42
 801c740:	0802fe55 	.word	0x0802fe55
 801c744:	0802fe8d 	.word	0x0802fe8d
 801c748:	0802ffec 	.word	0x0802ffec
 801c74c:	0802fe9b 	.word	0x0802fe9b
 801c750:	080302c3 	.word	0x080302c3
 801c754:	0802fea7 	.word	0x0802fea7
 801c758:	0802feba 	.word	0x0802feba

0801c75c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c75c:	3a01      	subs	r2, #1
 801c75e:	b570      	push	{r4, r5, r6, lr}
 801c760:	b292      	uxth	r2, r2
 801c762:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801c766:	42b2      	cmp	r2, r6
 801c768:	d019      	beq.n	801c79e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801c76a:	8b04      	ldrh	r4, [r0, #24]
 801c76c:	f831 5b02 	ldrh.w	r5, [r1], #2
 801c770:	4294      	cmp	r4, r2
 801c772:	d805      	bhi.n	801c780 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801c774:	4b19      	ldr	r3, [pc, #100]	; (801c7dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c776:	4a1a      	ldr	r2, [pc, #104]	; (801c7e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801c778:	481a      	ldr	r0, [pc, #104]	; (801c7e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801c77a:	21c5      	movs	r1, #197	; 0xc5
 801c77c:	f00c fe34 	bl	80293e8 <__assert_func>
 801c780:	8ac4      	ldrh	r4, [r0, #22]
 801c782:	4414      	add	r4, r2
 801c784:	b2a4      	uxth	r4, r4
 801c786:	2c01      	cmp	r4, #1
 801c788:	bf88      	it	hi
 801c78a:	3c02      	subhi	r4, #2
 801c78c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c790:	3a01      	subs	r2, #1
 801c792:	8a64      	ldrh	r4, [r4, #18]
 801c794:	42ac      	cmp	r4, r5
 801c796:	b292      	uxth	r2, r2
 801c798:	d0e5      	beq.n	801c766 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801c79a:	2000      	movs	r0, #0
 801c79c:	bd70      	pop	{r4, r5, r6, pc}
 801c79e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c7a2:	2400      	movs	r4, #0
 801c7a4:	4413      	add	r3, r2
 801c7a6:	b2a2      	uxth	r2, r4
 801c7a8:	429a      	cmp	r2, r3
 801c7aa:	da14      	bge.n	801c7d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801c7ac:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801c7ae:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c7b2:	4296      	cmp	r6, r2
 801c7b4:	d802      	bhi.n	801c7bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801c7b6:	4b09      	ldr	r3, [pc, #36]	; (801c7dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c7b8:	4a0b      	ldr	r2, [pc, #44]	; (801c7e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801c7ba:	e7dd      	b.n	801c778 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801c7bc:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801c7be:	4432      	add	r2, r6
 801c7c0:	b292      	uxth	r2, r2
 801c7c2:	2a09      	cmp	r2, #9
 801c7c4:	bf88      	it	hi
 801c7c6:	3a0a      	subhi	r2, #10
 801c7c8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c7cc:	3401      	adds	r4, #1
 801c7ce:	8b52      	ldrh	r2, [r2, #26]
 801c7d0:	42aa      	cmp	r2, r5
 801c7d2:	d0e8      	beq.n	801c7a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801c7d4:	e7e1      	b.n	801c79a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801c7d6:	2001      	movs	r0, #1
 801c7d8:	e7e0      	b.n	801c79c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801c7da:	bf00      	nop
 801c7dc:	0802fe8d 	.word	0x0802fe8d
 801c7e0:	08030347 	.word	0x08030347
 801c7e4:	0802fe55 	.word	0x0802fe55
 801c7e8:	0802ffec 	.word	0x0802ffec

0801c7ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7f0:	4605      	mov	r5, r0
 801c7f2:	4616      	mov	r6, r2
 801c7f4:	1c8c      	adds	r4, r1, #2
 801c7f6:	8809      	ldrh	r1, [r1, #0]
 801c7f8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c7fc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c800:	42b3      	cmp	r3, r6
 801c802:	d124      	bne.n	801c84e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c804:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c808:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c80c:	f001 070f 	and.w	r7, r1, #15
 801c810:	f8cd 8000 	str.w	r8, [sp]
 801c814:	464b      	mov	r3, r9
 801c816:	4652      	mov	r2, sl
 801c818:	4621      	mov	r1, r4
 801c81a:	4628      	mov	r0, r5
 801c81c:	f7ff ff9e 	bl	801c75c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c820:	4683      	mov	fp, r0
 801c822:	b168      	cbz	r0, 801c840 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c824:	eb0a 0109 	add.w	r1, sl, r9
 801c828:	4441      	add	r1, r8
 801c82a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c82e:	463a      	mov	r2, r7
 801c830:	4649      	mov	r1, r9
 801c832:	4628      	mov	r0, r5
 801c834:	f7ff ff42 	bl	801c6bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c838:	4658      	mov	r0, fp
 801c83a:	b003      	add	sp, #12
 801c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c840:	eb07 010a 	add.w	r1, r7, sl
 801c844:	4449      	add	r1, r9
 801c846:	4441      	add	r1, r8
 801c848:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c84c:	e7d2      	b.n	801c7f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c84e:	f04f 0b00 	mov.w	fp, #0
 801c852:	e7f1      	b.n	801c838 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c854 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c854:	b570      	push	{r4, r5, r6, lr}
 801c856:	8810      	ldrh	r0, [r2, #0]
 801c858:	4298      	cmp	r0, r3
 801c85a:	d817      	bhi.n	801c88c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c85c:	1e48      	subs	r0, r1, #1
 801c85e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c862:	4298      	cmp	r0, r3
 801c864:	d312      	bcc.n	801c88c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c866:	2400      	movs	r4, #0
 801c868:	428c      	cmp	r4, r1
 801c86a:	d20f      	bcs.n	801c88c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c86c:	1860      	adds	r0, r4, r1
 801c86e:	1040      	asrs	r0, r0, #1
 801c870:	0085      	lsls	r5, r0, #2
 801c872:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c876:	42b3      	cmp	r3, r6
 801c878:	d902      	bls.n	801c880 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c87a:	3001      	adds	r0, #1
 801c87c:	b284      	uxth	r4, r0
 801c87e:	e7f3      	b.n	801c868 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c880:	d201      	bcs.n	801c886 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c882:	b281      	uxth	r1, r0
 801c884:	e7f0      	b.n	801c868 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c886:	442a      	add	r2, r5
 801c888:	8850      	ldrh	r0, [r2, #2]
 801c88a:	bd70      	pop	{r4, r5, r6, pc}
 801c88c:	2000      	movs	r0, #0
 801c88e:	e7fc      	b.n	801c88a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c890 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c894:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c896:	886f      	ldrh	r7, [r5, #2]
 801c898:	4604      	mov	r4, r0
 801c89a:	087f      	lsrs	r7, r7, #1
 801c89c:	260b      	movs	r6, #11
 801c89e:	3e01      	subs	r6, #1
 801c8a0:	d01b      	beq.n	801c8da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c8a2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c8a4:	b92b      	cbnz	r3, 801c8b2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801c8a6:	4b0e      	ldr	r3, [pc, #56]	; (801c8e0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801c8a8:	4a0e      	ldr	r2, [pc, #56]	; (801c8e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801c8aa:	480f      	ldr	r0, [pc, #60]	; (801c8e8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801c8ac:	21c0      	movs	r1, #192	; 0xc0
 801c8ae:	f00c fd9b 	bl	80293e8 <__assert_func>
 801c8b2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c8b4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c8b8:	462a      	mov	r2, r5
 801c8ba:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c8be:	4639      	mov	r1, r7
 801c8c0:	4643      	mov	r3, r8
 801c8c2:	4620      	mov	r0, r4
 801c8c4:	f7ff ffc6 	bl	801c854 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c8c8:	b138      	cbz	r0, 801c8da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c8ca:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c8ce:	4642      	mov	r2, r8
 801c8d0:	4620      	mov	r0, r4
 801c8d2:	f7ff ff8b 	bl	801c7ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c8d6:	2800      	cmp	r0, #0
 801c8d8:	d1e1      	bne.n	801c89e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8de:	bf00      	nop
 801c8e0:	0802fe4c 	.word	0x0802fe4c
 801c8e4:	080300be 	.word	0x080300be
 801c8e8:	0802fe55 	.word	0x0802fe55

0801c8ec <_ZN8touchgfx8ceil28_4El>:
 801c8ec:	f110 030f 	adds.w	r3, r0, #15
 801c8f0:	d401      	bmi.n	801c8f6 <_ZN8touchgfx8ceil28_4El+0xa>
 801c8f2:	1118      	asrs	r0, r3, #4
 801c8f4:	4770      	bx	lr
 801c8f6:	f1c0 0001 	rsb	r0, r0, #1
 801c8fa:	f010 000f 	ands.w	r0, r0, #15
 801c8fe:	bf18      	it	ne
 801c900:	2001      	movne	r0, #1
 801c902:	2210      	movs	r2, #16
 801c904:	fb93 f3f2 	sdiv	r3, r3, r2
 801c908:	1a18      	subs	r0, r3, r0
 801c90a:	4770      	bx	lr

0801c90c <_ZN8touchgfx11floorDivModEllRlS0_>:
 801c90c:	2900      	cmp	r1, #0
 801c90e:	b538      	push	{r3, r4, r5, lr}
 801c910:	dc05      	bgt.n	801c91e <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801c912:	4b0f      	ldr	r3, [pc, #60]	; (801c950 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801c914:	4a0f      	ldr	r2, [pc, #60]	; (801c954 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801c916:	4810      	ldr	r0, [pc, #64]	; (801c958 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801c918:	21fa      	movs	r1, #250	; 0xfa
 801c91a:	f00c fd65 	bl	80293e8 <__assert_func>
 801c91e:	2800      	cmp	r0, #0
 801c920:	db06      	blt.n	801c930 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801c922:	fb90 f4f1 	sdiv	r4, r0, r1
 801c926:	6014      	str	r4, [r2, #0]
 801c928:	fb01 0114 	mls	r1, r1, r4, r0
 801c92c:	6019      	str	r1, [r3, #0]
 801c92e:	bd38      	pop	{r3, r4, r5, pc}
 801c930:	4240      	negs	r0, r0
 801c932:	fb90 f4f1 	sdiv	r4, r0, r1
 801c936:	4265      	negs	r5, r4
 801c938:	fb01 0014 	mls	r0, r1, r4, r0
 801c93c:	6015      	str	r5, [r2, #0]
 801c93e:	6018      	str	r0, [r3, #0]
 801c940:	2800      	cmp	r0, #0
 801c942:	d0f4      	beq.n	801c92e <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801c944:	6810      	ldr	r0, [r2, #0]
 801c946:	3801      	subs	r0, #1
 801c948:	6010      	str	r0, [r2, #0]
 801c94a:	6818      	ldr	r0, [r3, #0]
 801c94c:	1a09      	subs	r1, r1, r0
 801c94e:	e7ed      	b.n	801c92c <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801c950:	08030418 	.word	0x08030418
 801c954:	08030457 	.word	0x08030457
 801c958:	08030428 	.word	0x08030428

0801c95c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c95c:	b570      	push	{r4, r5, r6, lr}
 801c95e:	694a      	ldr	r2, [r1, #20]
 801c960:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801c962:	684b      	ldr	r3, [r1, #4]
 801c964:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801c966:	1b54      	subs	r4, r2, r5
 801c968:	f000 8106 	beq.w	801cb78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c96c:	1b9b      	subs	r3, r3, r6
 801c96e:	d003      	beq.n	801c978 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c970:	4363      	muls	r3, r4
 801c972:	2210      	movs	r2, #16
 801c974:	fb93 f3f2 	sdiv	r3, r3, r2
 801c978:	680c      	ldr	r4, [r1, #0]
 801c97a:	698a      	ldr	r2, [r1, #24]
 801c97c:	1b65      	subs	r5, r4, r5
 801c97e:	f000 80fd 	beq.w	801cb7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c982:	1b92      	subs	r2, r2, r6
 801c984:	d003      	beq.n	801c98e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c986:	436a      	muls	r2, r5
 801c988:	2410      	movs	r4, #16
 801c98a:	fb92 f2f4 	sdiv	r2, r2, r4
 801c98e:	1a9b      	subs	r3, r3, r2
 801c990:	ee07 3a90 	vmov	s15, r3
 801c994:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801cbb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c99c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c9a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c9a4:	460a      	mov	r2, r1
 801c9a6:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	f100 040c 	add.w	r4, r0, #12
 801c9b0:	eeb1 6a43 	vneg.f32	s12, s6
 801c9b4:	edd2 7a02 	vldr	s15, [r2, #8]
 801c9b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c9bc:	3214      	adds	r2, #20
 801c9be:	ece3 6a01 	vstmia	r3!, {s13}
 801c9c2:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c9c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c9ca:	429c      	cmp	r4, r3
 801c9cc:	edc3 7a02 	vstr	s15, [r3, #8]
 801c9d0:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c9d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c9d8:	edc3 7a05 	vstr	s15, [r3, #20]
 801c9dc:	d1ea      	bne.n	801c9b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c9de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c9e0:	698b      	ldr	r3, [r1, #24]
 801c9e2:	edd0 4a02 	vldr	s9, [r0, #8]
 801c9e6:	edd0 3a00 	vldr	s7, [r0]
 801c9ea:	edd0 6a01 	vldr	s13, [r0, #4]
 801c9ee:	ed90 5a05 	vldr	s10, [r0, #20]
 801c9f2:	ed90 2a03 	vldr	s4, [r0, #12]
 801c9f6:	edd0 5a04 	vldr	s11, [r0, #16]
 801c9fa:	ed90 1a07 	vldr	s2, [r0, #28]
 801c9fe:	edd0 2a06 	vldr	s5, [r0, #24]
 801ca02:	1a9b      	subs	r3, r3, r2
 801ca04:	ee07 3a90 	vmov	s15, r3
 801ca08:	684b      	ldr	r3, [r1, #4]
 801ca0a:	1a9b      	subs	r3, r3, r2
 801ca0c:	ee07 3a10 	vmov	s14, r3
 801ca10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca14:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ca18:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ca1c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ca20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca24:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ca28:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ca2c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ca30:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ca34:	ee32 5a45 	vsub.f32	s10, s4, s10
 801ca38:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ca3c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801ca40:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ca42:	694a      	ldr	r2, [r1, #20]
 801ca44:	1b13      	subs	r3, r2, r4
 801ca46:	ee07 3a10 	vmov	s14, r3
 801ca4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca4e:	680b      	ldr	r3, [r1, #0]
 801ca50:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ca54:	1b1b      	subs	r3, r3, r4
 801ca56:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801ca5a:	ee07 3a10 	vmov	s14, r3
 801ca5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca62:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ca66:	eee6 4a87 	vfma.f32	s9, s13, s14
 801ca6a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801ca6e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801ca72:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ca74:	698b      	ldr	r3, [r1, #24]
 801ca76:	1a9b      	subs	r3, r3, r2
 801ca78:	ee06 3a90 	vmov	s13, r3
 801ca7c:	684b      	ldr	r3, [r1, #4]
 801ca7e:	1a9b      	subs	r3, r3, r2
 801ca80:	ee07 3a10 	vmov	s14, r3
 801ca84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ca88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca8c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801ca90:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ca94:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801ca98:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ca9c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801caa0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801caa4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801caa6:	694a      	ldr	r2, [r1, #20]
 801caa8:	1b13      	subs	r3, r2, r4
 801caaa:	ee07 3a10 	vmov	s14, r3
 801caae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cab2:	680b      	ldr	r3, [r1, #0]
 801cab4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cab8:	1b1b      	subs	r3, r3, r4
 801caba:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801cabe:	ee07 3a10 	vmov	s14, r3
 801cac2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cac6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801caca:	eea5 5a87 	vfma.f32	s10, s11, s14
 801cace:	edd0 5a08 	vldr	s11, [r0, #32]
 801cad2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801cad6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801cada:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801cade:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cae0:	698b      	ldr	r3, [r1, #24]
 801cae2:	1a9b      	subs	r3, r3, r2
 801cae4:	ee07 3a10 	vmov	s14, r3
 801cae8:	684b      	ldr	r3, [r1, #4]
 801caea:	1a9b      	subs	r3, r3, r2
 801caec:	ee01 3a90 	vmov	s3, r3
 801caf0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801caf4:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801caf8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cafc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801cb00:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801cb04:	ee61 1a84 	vmul.f32	s3, s3, s8
 801cb08:	eea1 7a21 	vfma.f32	s14, s2, s3
 801cb0c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801cb10:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801cb14:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801cb16:	694a      	ldr	r2, [r1, #20]
 801cb18:	1b13      	subs	r3, r2, r4
 801cb1a:	ee03 3a10 	vmov	s6, r3
 801cb1e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801cb22:	680b      	ldr	r3, [r1, #0]
 801cb24:	ee23 3a04 	vmul.f32	s6, s6, s8
 801cb28:	1b1b      	subs	r3, r3, r4
 801cb2a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801cb2e:	ee03 3a10 	vmov	s6, r3
 801cb32:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801cb36:	ee23 4a04 	vmul.f32	s8, s6, s8
 801cb3a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801cb3e:	ee25 6a86 	vmul.f32	s12, s11, s12
 801cb42:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801cb46:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801cb4a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801cb4e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801cb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb56:	dd13      	ble.n	801cb80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801cb58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cb5c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801cb60:	63c3      	str	r3, [r0, #60]	; 0x3c
 801cb62:	eee3 7a87 	vfma.f32	s15, s7, s14
 801cb66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb6e:	dd15      	ble.n	801cb9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801cb70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cb74:	6403      	str	r3, [r0, #64]	; 0x40
 801cb76:	bd70      	pop	{r4, r5, r6, pc}
 801cb78:	4623      	mov	r3, r4
 801cb7a:	e6fd      	b.n	801c978 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801cb7c:	462a      	mov	r2, r5
 801cb7e:	e706      	b.n	801c98e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801cb80:	d502      	bpl.n	801cb88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801cb82:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801cb86:	e7e9      	b.n	801cb5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801cb88:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801cb8c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801cb90:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801cb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb98:	dade      	bge.n	801cb58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801cb9a:	e7f2      	b.n	801cb82 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801cb9c:	d502      	bpl.n	801cba4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801cb9e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801cba2:	e7e7      	b.n	801cb74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801cba4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801cba8:	eee3 4a86 	vfma.f32	s9, s7, s12
 801cbac:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801cbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbb4:	dadc      	bge.n	801cb70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801cbb6:	e7f2      	b.n	801cb9e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801cbb8:	3d800000 	.word	0x3d800000

0801cbbc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801cbbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbc0:	f04f 0814 	mov.w	r8, #20
 801cbc4:	fb08 f903 	mul.w	r9, r8, r3
 801cbc8:	eb02 0a09 	add.w	sl, r2, r9
 801cbcc:	4604      	mov	r4, r0
 801cbce:	f8da 0004 	ldr.w	r0, [sl, #4]
 801cbd2:	4617      	mov	r7, r2
 801cbd4:	460d      	mov	r5, r1
 801cbd6:	461e      	mov	r6, r3
 801cbd8:	f7ff fe88 	bl	801c8ec <_ZN8touchgfx8ceil28_4El>
 801cbdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbde:	6160      	str	r0, [r4, #20]
 801cbe0:	fb08 f803 	mul.w	r8, r8, r3
 801cbe4:	eb07 0b08 	add.w	fp, r7, r8
 801cbe8:	9001      	str	r0, [sp, #4]
 801cbea:	f8db 0004 	ldr.w	r0, [fp, #4]
 801cbee:	f7ff fe7d 	bl	801c8ec <_ZN8touchgfx8ceil28_4El>
 801cbf2:	9a01      	ldr	r2, [sp, #4]
 801cbf4:	1a80      	subs	r0, r0, r2
 801cbf6:	61a0      	str	r0, [r4, #24]
 801cbf8:	2800      	cmp	r0, #0
 801cbfa:	f000 8088 	beq.w	801cd0e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801cbfe:	f857 3009 	ldr.w	r3, [r7, r9]
 801cc02:	f857 c008 	ldr.w	ip, [r7, r8]
 801cc06:	f8da 1004 	ldr.w	r1, [sl, #4]
 801cc0a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801cc0e:	ebac 0c03 	sub.w	ip, ip, r3
 801cc12:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801cc16:	fb0b f202 	mul.w	r2, fp, r2
 801cc1a:	fb0c 2211 	mls	r2, ip, r1, r2
 801cc1e:	1a40      	subs	r0, r0, r1
 801cc20:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801cc24:	fb00 2003 	mla	r0, r0, r3, r2
 801cc28:	3801      	subs	r0, #1
 801cc2a:	f104 0310 	add.w	r3, r4, #16
 801cc2e:	4622      	mov	r2, r4
 801cc30:	4641      	mov	r1, r8
 801cc32:	4440      	add	r0, r8
 801cc34:	f7ff fe6a 	bl	801c90c <_ZN8touchgfx11floorDivModEllRlS0_>
 801cc38:	f104 0308 	add.w	r3, r4, #8
 801cc3c:	1d22      	adds	r2, r4, #4
 801cc3e:	4641      	mov	r1, r8
 801cc40:	4658      	mov	r0, fp
 801cc42:	f7ff fe63 	bl	801c90c <_ZN8touchgfx11floorDivModEllRlS0_>
 801cc46:	f8c4 800c 	str.w	r8, [r4, #12]
 801cc4a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801cc4e:	6962      	ldr	r2, [r4, #20]
 801cc50:	eddf 6a31 	vldr	s13, [pc, #196]	; 801cd18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801cc54:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801cc58:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801cc5c:	ee07 3a10 	vmov	s14, r3
 801cc60:	6822      	ldr	r2, [r4, #0]
 801cc62:	f857 3009 	ldr.w	r3, [r7, r9]
 801cc66:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801cc6a:	ee07 3a90 	vmov	s15, r3
 801cc6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cc72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc76:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801cc7a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cc7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cc82:	edd3 6a00 	vldr	s13, [r3]
 801cc86:	eee6 6a07 	vfma.f32	s13, s12, s14
 801cc8a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801cc8e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801cc92:	edc4 6a07 	vstr	s13, [r4, #28]
 801cc96:	edd4 6a01 	vldr	s13, [r4, #4]
 801cc9a:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801cc9e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801cca2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cca6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ccaa:	ed84 6a08 	vstr	s12, [r4, #32]
 801ccae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801ccb0:	6262      	str	r2, [r4, #36]	; 0x24
 801ccb2:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801ccb6:	ed93 6a03 	vldr	s12, [r3, #12]
 801ccba:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ccbe:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ccc2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ccc6:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801ccca:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ccce:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801ccd2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ccd6:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801ccda:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801ccdc:	6322      	str	r2, [r4, #48]	; 0x30
 801ccde:	ed93 6a06 	vldr	s12, [r3, #24]
 801cce2:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801cce6:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ccea:	eeb0 7a46 	vmov.f32	s14, s12
 801ccee:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801ccf2:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ccf6:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801ccfa:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801ccfe:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801cd02:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cd06:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801cd0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801cd0c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801cd0e:	4620      	mov	r0, r4
 801cd10:	b003      	add	sp, #12
 801cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd16:	bf00      	nop
 801cd18:	3d800000 	.word	0x3d800000

0801cd1c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801cd1c:	4602      	mov	r2, r0
 801cd1e:	b148      	cbz	r0, 801cd34 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801cd20:	2300      	movs	r3, #0
 801cd22:	b298      	uxth	r0, r3
 801cd24:	3301      	adds	r3, #1
 801cd26:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801cd2a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801cd2e:	2900      	cmp	r1, #0
 801cd30:	d1f7      	bne.n	801cd22 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801cd32:	4770      	bx	lr
 801cd34:	4770      	bx	lr

0801cd36 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801cd36:	b530      	push	{r4, r5, lr}
 801cd38:	4604      	mov	r4, r0
 801cd3a:	b159      	cbz	r1, 801cd54 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801cd3c:	b148      	cbz	r0, 801cd52 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801cd3e:	2300      	movs	r3, #0
 801cd40:	b298      	uxth	r0, r3
 801cd42:	4282      	cmp	r2, r0
 801cd44:	d905      	bls.n	801cd52 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801cd46:	5ccd      	ldrb	r5, [r1, r3]
 801cd48:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801cd4c:	3301      	adds	r3, #1
 801cd4e:	2d00      	cmp	r5, #0
 801cd50:	d1f6      	bne.n	801cd40 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801cd52:	bd30      	pop	{r4, r5, pc}
 801cd54:	4608      	mov	r0, r1
 801cd56:	e7fc      	b.n	801cd52 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801cd58 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801cd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd5a:	b08b      	sub	sp, #44	; 0x2c
 801cd5c:	468c      	mov	ip, r1
 801cd5e:	2100      	movs	r1, #0
 801cd60:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801cd64:	ae01      	add	r6, sp, #4
 801cd66:	211f      	movs	r1, #31
 801cd68:	fbb0 f7f3 	udiv	r7, r0, r3
 801cd6c:	fb03 0517 	mls	r5, r3, r7, r0
 801cd70:	b2ec      	uxtb	r4, r5
 801cd72:	2d09      	cmp	r5, #9
 801cd74:	bfd4      	ite	le
 801cd76:	3430      	addle	r4, #48	; 0x30
 801cd78:	3457      	addgt	r4, #87	; 0x57
 801cd7a:	b2e4      	uxtb	r4, r4
 801cd7c:	558c      	strb	r4, [r1, r6]
 801cd7e:	4638      	mov	r0, r7
 801cd80:	1e4c      	subs	r4, r1, #1
 801cd82:	b92f      	cbnz	r7, 801cd90 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801cd84:	4431      	add	r1, r6
 801cd86:	4660      	mov	r0, ip
 801cd88:	f7ff ffd5 	bl	801cd36 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801cd8c:	b00b      	add	sp, #44	; 0x2c
 801cd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd90:	4621      	mov	r1, r4
 801cd92:	e7e9      	b.n	801cd68 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801cd94 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd96:	4607      	mov	r7, r0
 801cd98:	b08b      	sub	sp, #44	; 0x2c
 801cd9a:	4608      	mov	r0, r1
 801cd9c:	b341      	cbz	r1, 801cdf0 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801cd9e:	1e99      	subs	r1, r3, #2
 801cda0:	2922      	cmp	r1, #34	; 0x22
 801cda2:	d825      	bhi.n	801cdf0 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801cda4:	2100      	movs	r1, #0
 801cda6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801cdaa:	463c      	mov	r4, r7
 801cdac:	261f      	movs	r6, #31
 801cdae:	f10d 0c04 	add.w	ip, sp, #4
 801cdb2:	fb94 fef3 	sdiv	lr, r4, r3
 801cdb6:	fb03 441e 	mls	r4, r3, lr, r4
 801cdba:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801cdbe:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801cdc2:	b2ec      	uxtb	r4, r5
 801cdc4:	2d09      	cmp	r5, #9
 801cdc6:	bfd4      	ite	le
 801cdc8:	3430      	addle	r4, #48	; 0x30
 801cdca:	3457      	addgt	r4, #87	; 0x57
 801cdcc:	b2e4      	uxtb	r4, r4
 801cdce:	f80c 4006 	strb.w	r4, [ip, r6]
 801cdd2:	4674      	mov	r4, lr
 801cdd4:	1e71      	subs	r1, r6, #1
 801cdd6:	b96c      	cbnz	r4, 801cdf4 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801cdd8:	2f00      	cmp	r7, #0
 801cdda:	da05      	bge.n	801cde8 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801cddc:	ab0a      	add	r3, sp, #40	; 0x28
 801cdde:	4419      	add	r1, r3
 801cde0:	232d      	movs	r3, #45	; 0x2d
 801cde2:	f801 3c24 	strb.w	r3, [r1, #-36]
 801cde6:	1eb1      	subs	r1, r6, #2
 801cde8:	3101      	adds	r1, #1
 801cdea:	4461      	add	r1, ip
 801cdec:	f7ff ffa3 	bl	801cd36 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801cdf0:	b00b      	add	sp, #44	; 0x2c
 801cdf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cdf4:	460e      	mov	r6, r1
 801cdf6:	e7dc      	b.n	801cdb2 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801cdf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdfc:	4691      	mov	r9, r2
 801cdfe:	b085      	sub	sp, #20
 801ce00:	6802      	ldr	r2, [r0, #0]
 801ce02:	9201      	str	r2, [sp, #4]
 801ce04:	4688      	mov	r8, r1
 801ce06:	4683      	mov	fp, r0
 801ce08:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801ce0c:	9103      	str	r1, [sp, #12]
 801ce0e:	4610      	mov	r0, r2
 801ce10:	461c      	mov	r4, r3
 801ce12:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ce16:	9302      	str	r3, [sp, #8]
 801ce18:	f7ff ff80 	bl	801cd1c <_ZN8touchgfx7Unicode6strlenEPKt>
 801ce1c:	f1b8 0f00 	cmp.w	r8, #0
 801ce20:	bf0c      	ite	eq
 801ce22:	4684      	moveq	ip, r0
 801ce24:	f100 0c01 	addne.w	ip, r0, #1
 801ce28:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801ce2c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801ce30:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ce32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ce34:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801ce38:	9903      	ldr	r1, [sp, #12]
 801ce3a:	fa1f fc8c 	uxth.w	ip, ip
 801ce3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ce42:	d041      	beq.n	801cec8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ce44:	d834      	bhi.n	801ceb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801ce46:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801ce4a:	d059      	beq.n	801cf00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801ce4c:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801ce50:	d03a      	beq.n	801cec8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ce52:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801ce56:	d034      	beq.n	801cec2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ce58:	2400      	movs	r4, #0
 801ce5a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801ce5e:	3a01      	subs	r2, #1
 801ce60:	b169      	cbz	r1, 801ce7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ce62:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ce64:	458c      	cmp	ip, r1
 801ce66:	da09      	bge.n	801ce7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ce68:	eba1 010c 	sub.w	r1, r1, ip
 801ce6c:	b289      	uxth	r1, r1
 801ce6e:	b933      	cbnz	r3, 801ce7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ce70:	2e00      	cmp	r6, #0
 801ce72:	d051      	beq.n	801cf18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ce74:	2800      	cmp	r0, #0
 801ce76:	d04f      	beq.n	801cf18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ce78:	440c      	add	r4, r1
 801ce7a:	b2a4      	uxth	r4, r4
 801ce7c:	2100      	movs	r1, #0
 801ce7e:	682b      	ldr	r3, [r5, #0]
 801ce80:	4293      	cmp	r3, r2
 801ce82:	da07      	bge.n	801ce94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ce84:	f1b8 0f00 	cmp.w	r8, #0
 801ce88:	d004      	beq.n	801ce94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ce8a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ce8e:	682b      	ldr	r3, [r5, #0]
 801ce90:	3301      	adds	r3, #1
 801ce92:	602b      	str	r3, [r5, #0]
 801ce94:	2730      	movs	r7, #48	; 0x30
 801ce96:	2c00      	cmp	r4, #0
 801ce98:	d04e      	beq.n	801cf38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ce9a:	682e      	ldr	r6, [r5, #0]
 801ce9c:	3c01      	subs	r4, #1
 801ce9e:	42b2      	cmp	r2, r6
 801cea0:	b2a4      	uxth	r4, r4
 801cea2:	dd49      	ble.n	801cf38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cea4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801cea8:	682b      	ldr	r3, [r5, #0]
 801ceaa:	3301      	adds	r3, #1
 801ceac:	602b      	str	r3, [r5, #0]
 801ceae:	e7f2      	b.n	801ce96 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801ceb0:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801ceb4:	d01d      	beq.n	801cef2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801ceb6:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801ceba:	d002      	beq.n	801cec2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801cebc:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801cec0:	e7c9      	b.n	801ce56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801cec2:	4684      	mov	ip, r0
 801cec4:	f04f 0800 	mov.w	r8, #0
 801cec8:	2c00      	cmp	r4, #0
 801ceca:	d0c6      	beq.n	801ce5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cecc:	b947      	cbnz	r7, 801cee0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801cece:	2801      	cmp	r0, #1
 801ced0:	d106      	bne.n	801cee0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ced2:	8814      	ldrh	r4, [r2, #0]
 801ced4:	2c30      	cmp	r4, #48	; 0x30
 801ced6:	bf02      	ittt	eq
 801ced8:	3202      	addeq	r2, #2
 801ceda:	f8cb 2000 	streq.w	r2, [fp]
 801cede:	4638      	moveq	r0, r7
 801cee0:	45bc      	cmp	ip, r7
 801cee2:	da14      	bge.n	801cf0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801cee4:	b2bf      	uxth	r7, r7
 801cee6:	eba7 040c 	sub.w	r4, r7, ip
 801ceea:	b2a4      	uxth	r4, r4
 801ceec:	46bc      	mov	ip, r7
 801ceee:	2600      	movs	r6, #0
 801cef0:	e7b3      	b.n	801ce5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cef2:	4684      	mov	ip, r0
 801cef4:	b16c      	cbz	r4, 801cf12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801cef6:	42b8      	cmp	r0, r7
 801cef8:	dd00      	ble.n	801cefc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801cefa:	b2b8      	uxth	r0, r7
 801cefc:	2400      	movs	r4, #0
 801cefe:	e003      	b.n	801cf08 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801cf00:	f04f 0c01 	mov.w	ip, #1
 801cf04:	2400      	movs	r4, #0
 801cf06:	4660      	mov	r0, ip
 801cf08:	4626      	mov	r6, r4
 801cf0a:	46a0      	mov	r8, r4
 801cf0c:	e7a5      	b.n	801ce5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cf0e:	2400      	movs	r4, #0
 801cf10:	e7ed      	b.n	801ceee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801cf12:	4626      	mov	r6, r4
 801cf14:	46a0      	mov	r8, r4
 801cf16:	e7a0      	b.n	801ce5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cf18:	2900      	cmp	r1, #0
 801cf1a:	d0b0      	beq.n	801ce7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cf1c:	2720      	movs	r7, #32
 801cf1e:	682e      	ldr	r6, [r5, #0]
 801cf20:	2900      	cmp	r1, #0
 801cf22:	d0ac      	beq.n	801ce7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cf24:	3901      	subs	r1, #1
 801cf26:	4296      	cmp	r6, r2
 801cf28:	b289      	uxth	r1, r1
 801cf2a:	daa7      	bge.n	801ce7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801cf2c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801cf30:	682b      	ldr	r3, [r5, #0]
 801cf32:	3301      	adds	r3, #1
 801cf34:	602b      	str	r3, [r5, #0]
 801cf36:	e7f2      	b.n	801cf1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801cf38:	b188      	cbz	r0, 801cf5e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801cf3a:	682b      	ldr	r3, [r5, #0]
 801cf3c:	3801      	subs	r0, #1
 801cf3e:	429a      	cmp	r2, r3
 801cf40:	b280      	uxth	r0, r0
 801cf42:	dd0c      	ble.n	801cf5e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801cf44:	f8db 3000 	ldr.w	r3, [fp]
 801cf48:	1c9c      	adds	r4, r3, #2
 801cf4a:	f8cb 4000 	str.w	r4, [fp]
 801cf4e:	881c      	ldrh	r4, [r3, #0]
 801cf50:	682b      	ldr	r3, [r5, #0]
 801cf52:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801cf56:	682b      	ldr	r3, [r5, #0]
 801cf58:	3301      	adds	r3, #1
 801cf5a:	602b      	str	r3, [r5, #0]
 801cf5c:	e7ec      	b.n	801cf38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cf5e:	2620      	movs	r6, #32
 801cf60:	b151      	cbz	r1, 801cf78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801cf62:	6828      	ldr	r0, [r5, #0]
 801cf64:	3901      	subs	r1, #1
 801cf66:	4282      	cmp	r2, r0
 801cf68:	b289      	uxth	r1, r1
 801cf6a:	dd05      	ble.n	801cf78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801cf6c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801cf70:	682b      	ldr	r3, [r5, #0]
 801cf72:	3301      	adds	r3, #1
 801cf74:	602b      	str	r3, [r5, #0]
 801cf76:	e7f3      	b.n	801cf60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801cf78:	b005      	add	sp, #20
 801cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801cf7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cf82:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801cf86:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801cf8a:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801cf8e:	2400      	movs	r4, #0
 801cf90:	8014      	strh	r4, [r2, #0]
 801cf92:	701c      	strb	r4, [r3, #0]
 801cf94:	f888 4000 	strb.w	r4, [r8]
 801cf98:	f88c 4000 	strb.w	r4, [ip]
 801cf9c:	f88e 4000 	strb.w	r4, [lr]
 801cfa0:	703c      	strb	r4, [r7, #0]
 801cfa2:	6804      	ldr	r4, [r0, #0]
 801cfa4:	b1a4      	cbz	r4, 801cfd0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801cfa6:	8824      	ldrh	r4, [r4, #0]
 801cfa8:	f04f 0901 	mov.w	r9, #1
 801cfac:	b314      	cbz	r4, 801cff4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cfae:	2c2b      	cmp	r4, #43	; 0x2b
 801cfb0:	d001      	beq.n	801cfb6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801cfb2:	2c20      	cmp	r4, #32
 801cfb4:	d110      	bne.n	801cfd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801cfb6:	8014      	strh	r4, [r2, #0]
 801cfb8:	6804      	ldr	r4, [r0, #0]
 801cfba:	b10c      	cbz	r4, 801cfc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801cfbc:	3402      	adds	r4, #2
 801cfbe:	6004      	str	r4, [r0, #0]
 801cfc0:	680c      	ldr	r4, [r1, #0]
 801cfc2:	b10c      	cbz	r4, 801cfc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801cfc4:	3401      	adds	r4, #1
 801cfc6:	600c      	str	r4, [r1, #0]
 801cfc8:	6804      	ldr	r4, [r0, #0]
 801cfca:	b17c      	cbz	r4, 801cfec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801cfcc:	8824      	ldrh	r4, [r4, #0]
 801cfce:	e7ed      	b.n	801cfac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cfd0:	680c      	ldr	r4, [r1, #0]
 801cfd2:	b17c      	cbz	r4, 801cff4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cfd4:	7824      	ldrb	r4, [r4, #0]
 801cfd6:	e7e7      	b.n	801cfa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801cfd8:	2c2d      	cmp	r4, #45	; 0x2d
 801cfda:	d102      	bne.n	801cfe2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801cfdc:	f883 9000 	strb.w	r9, [r3]
 801cfe0:	e7ea      	b.n	801cfb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cfe2:	2c23      	cmp	r4, #35	; 0x23
 801cfe4:	d107      	bne.n	801cff6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801cfe6:	f888 9000 	strb.w	r9, [r8]
 801cfea:	e7e5      	b.n	801cfb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cfec:	680c      	ldr	r4, [r1, #0]
 801cfee:	b10c      	cbz	r4, 801cff4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cff0:	7824      	ldrb	r4, [r4, #0]
 801cff2:	e7db      	b.n	801cfac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cff4:	2400      	movs	r4, #0
 801cff6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801cffa:	2b09      	cmp	r3, #9
 801cffc:	d901      	bls.n	801d002 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801cffe:	2c2a      	cmp	r4, #42	; 0x2a
 801d000:	d122      	bne.n	801d048 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d002:	2301      	movs	r3, #1
 801d004:	2c30      	cmp	r4, #48	; 0x30
 801d006:	f88e 3000 	strb.w	r3, [lr]
 801d00a:	d10d      	bne.n	801d028 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d00c:	f88c 3000 	strb.w	r3, [ip]
 801d010:	6803      	ldr	r3, [r0, #0]
 801d012:	b10b      	cbz	r3, 801d018 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801d014:	3302      	adds	r3, #2
 801d016:	6003      	str	r3, [r0, #0]
 801d018:	680b      	ldr	r3, [r1, #0]
 801d01a:	b10b      	cbz	r3, 801d020 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801d01c:	3301      	adds	r3, #1
 801d01e:	600b      	str	r3, [r1, #0]
 801d020:	6803      	ldr	r3, [r0, #0]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d02f      	beq.n	801d086 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801d026:	881c      	ldrh	r4, [r3, #0]
 801d028:	2c2a      	cmp	r4, #42	; 0x2a
 801d02a:	d135      	bne.n	801d098 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d02c:	f04f 33ff 	mov.w	r3, #4294967295
 801d030:	6033      	str	r3, [r6, #0]
 801d032:	6803      	ldr	r3, [r0, #0]
 801d034:	b10b      	cbz	r3, 801d03a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801d036:	3302      	adds	r3, #2
 801d038:	6003      	str	r3, [r0, #0]
 801d03a:	680b      	ldr	r3, [r1, #0]
 801d03c:	b10b      	cbz	r3, 801d042 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801d03e:	3301      	adds	r3, #1
 801d040:	600b      	str	r3, [r1, #0]
 801d042:	6803      	ldr	r3, [r0, #0]
 801d044:	b31b      	cbz	r3, 801d08e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801d046:	881c      	ldrh	r4, [r3, #0]
 801d048:	2c2e      	cmp	r4, #46	; 0x2e
 801d04a:	d11a      	bne.n	801d082 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d04c:	2301      	movs	r3, #1
 801d04e:	703b      	strb	r3, [r7, #0]
 801d050:	6803      	ldr	r3, [r0, #0]
 801d052:	b10b      	cbz	r3, 801d058 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801d054:	3302      	adds	r3, #2
 801d056:	6003      	str	r3, [r0, #0]
 801d058:	680b      	ldr	r3, [r1, #0]
 801d05a:	b10b      	cbz	r3, 801d060 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801d05c:	3301      	adds	r3, #1
 801d05e:	600b      	str	r3, [r1, #0]
 801d060:	6803      	ldr	r3, [r0, #0]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d036      	beq.n	801d0d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801d066:	881b      	ldrh	r3, [r3, #0]
 801d068:	2b2a      	cmp	r3, #42	; 0x2a
 801d06a:	d137      	bne.n	801d0dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d06c:	f04f 33ff 	mov.w	r3, #4294967295
 801d070:	602b      	str	r3, [r5, #0]
 801d072:	6803      	ldr	r3, [r0, #0]
 801d074:	b10b      	cbz	r3, 801d07a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801d076:	3302      	adds	r3, #2
 801d078:	6003      	str	r3, [r0, #0]
 801d07a:	680b      	ldr	r3, [r1, #0]
 801d07c:	b10b      	cbz	r3, 801d082 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d07e:	3301      	adds	r3, #1
 801d080:	600b      	str	r3, [r1, #0]
 801d082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d086:	680c      	ldr	r4, [r1, #0]
 801d088:	b134      	cbz	r4, 801d098 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d08a:	7824      	ldrb	r4, [r4, #0]
 801d08c:	e7cc      	b.n	801d028 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d08e:	680b      	ldr	r3, [r1, #0]
 801d090:	2b00      	cmp	r3, #0
 801d092:	d0f6      	beq.n	801d082 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d094:	781c      	ldrb	r4, [r3, #0]
 801d096:	e7d7      	b.n	801d048 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d098:	2300      	movs	r3, #0
 801d09a:	6033      	str	r3, [r6, #0]
 801d09c:	220a      	movs	r2, #10
 801d09e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d0a2:	fa1f f38c 	uxth.w	r3, ip
 801d0a6:	2b09      	cmp	r3, #9
 801d0a8:	d8ce      	bhi.n	801d048 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d0aa:	6833      	ldr	r3, [r6, #0]
 801d0ac:	fb02 c303 	mla	r3, r2, r3, ip
 801d0b0:	6033      	str	r3, [r6, #0]
 801d0b2:	6803      	ldr	r3, [r0, #0]
 801d0b4:	b10b      	cbz	r3, 801d0ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801d0b6:	3302      	adds	r3, #2
 801d0b8:	6003      	str	r3, [r0, #0]
 801d0ba:	680b      	ldr	r3, [r1, #0]
 801d0bc:	b10b      	cbz	r3, 801d0c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801d0be:	3301      	adds	r3, #1
 801d0c0:	600b      	str	r3, [r1, #0]
 801d0c2:	6803      	ldr	r3, [r0, #0]
 801d0c4:	b10b      	cbz	r3, 801d0ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801d0c6:	881c      	ldrh	r4, [r3, #0]
 801d0c8:	e7e9      	b.n	801d09e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d0ca:	680c      	ldr	r4, [r1, #0]
 801d0cc:	2c00      	cmp	r4, #0
 801d0ce:	d0e6      	beq.n	801d09e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d0d0:	7824      	ldrb	r4, [r4, #0]
 801d0d2:	e7e4      	b.n	801d09e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d0d4:	680b      	ldr	r3, [r1, #0]
 801d0d6:	b10b      	cbz	r3, 801d0dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d0d8:	781b      	ldrb	r3, [r3, #0]
 801d0da:	e7c5      	b.n	801d068 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801d0dc:	2200      	movs	r2, #0
 801d0de:	602a      	str	r2, [r5, #0]
 801d0e0:	240a      	movs	r4, #10
 801d0e2:	3b30      	subs	r3, #48	; 0x30
 801d0e4:	b29e      	uxth	r6, r3
 801d0e6:	2e09      	cmp	r6, #9
 801d0e8:	682a      	ldr	r2, [r5, #0]
 801d0ea:	d813      	bhi.n	801d114 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801d0ec:	fb04 3302 	mla	r3, r4, r2, r3
 801d0f0:	602b      	str	r3, [r5, #0]
 801d0f2:	6803      	ldr	r3, [r0, #0]
 801d0f4:	b10b      	cbz	r3, 801d0fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801d0f6:	3302      	adds	r3, #2
 801d0f8:	6003      	str	r3, [r0, #0]
 801d0fa:	680b      	ldr	r3, [r1, #0]
 801d0fc:	b10b      	cbz	r3, 801d102 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801d0fe:	3301      	adds	r3, #1
 801d100:	600b      	str	r3, [r1, #0]
 801d102:	6803      	ldr	r3, [r0, #0]
 801d104:	b10b      	cbz	r3, 801d10a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801d106:	881b      	ldrh	r3, [r3, #0]
 801d108:	e7eb      	b.n	801d0e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d10a:	680b      	ldr	r3, [r1, #0]
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	d0e8      	beq.n	801d0e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d110:	781b      	ldrb	r3, [r3, #0]
 801d112:	e7e6      	b.n	801d0e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d114:	2a06      	cmp	r2, #6
 801d116:	bfa8      	it	ge
 801d118:	2206      	movge	r2, #6
 801d11a:	602a      	str	r2, [r5, #0]
 801d11c:	e7b1      	b.n	801d082 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801d11e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801d11e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d122:	b0a3      	sub	sp, #140	; 0x8c
 801d124:	2600      	movs	r6, #0
 801d126:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801d12a:	4607      	mov	r7, r0
 801d12c:	4688      	mov	r8, r1
 801d12e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d132:	4631      	mov	r1, r6
 801d134:	2242      	movs	r2, #66	; 0x42
 801d136:	4648      	mov	r0, r9
 801d138:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801d13a:	960d      	str	r6, [sp, #52]	; 0x34
 801d13c:	f7fe fae0 	bl	801b700 <_ZN8touchgfx6memsetEPvhm>
 801d140:	b15f      	cbz	r7, 801d15a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801d142:	f108 3aff 	add.w	sl, r8, #4294967295
 801d146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d14a:	b152      	cbz	r2, 801d162 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801d14c:	8812      	ldrh	r2, [r2, #0]
 801d14e:	b10a      	cbz	r2, 801d154 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d150:	459a      	cmp	sl, r3
 801d152:	dc2e      	bgt.n	801d1b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801d154:	2200      	movs	r2, #0
 801d156:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d15a:	4638      	mov	r0, r7
 801d15c:	b023      	add	sp, #140	; 0x8c
 801d15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d162:	9a08      	ldr	r2, [sp, #32]
 801d164:	2a00      	cmp	r2, #0
 801d166:	d0f5      	beq.n	801d154 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d168:	7812      	ldrb	r2, [r2, #0]
 801d16a:	e7f0      	b.n	801d14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801d16c:	2d00      	cmp	r5, #0
 801d16e:	d0ea      	beq.n	801d146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d170:	782a      	ldrb	r2, [r5, #0]
 801d172:	b142      	cbz	r2, 801d186 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801d174:	2a25      	cmp	r2, #37	; 0x25
 801d176:	d001      	beq.n	801d17c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801d178:	459a      	cmp	sl, r3
 801d17a:	dc08      	bgt.n	801d18e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801d17c:	f1bb 0f00 	cmp.w	fp, #0
 801d180:	d121      	bne.n	801d1c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801d182:	2d00      	cmp	r5, #0
 801d184:	d0df      	beq.n	801d146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d186:	782a      	ldrb	r2, [r5, #0]
 801d188:	f04f 0b00 	mov.w	fp, #0
 801d18c:	e01d      	b.n	801d1ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801d18e:	f1bb 0f00 	cmp.w	fp, #0
 801d192:	d078      	beq.n	801d286 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801d194:	f8bb 2000 	ldrh.w	r2, [fp]
 801d198:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d19c:	f1bb 0f00 	cmp.w	fp, #0
 801d1a0:	d002      	beq.n	801d1a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801d1a2:	f10b 0202 	add.w	r2, fp, #2
 801d1a6:	9209      	str	r2, [sp, #36]	; 0x24
 801d1a8:	b10d      	cbz	r5, 801d1ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801d1aa:	3501      	adds	r5, #1
 801d1ac:	9508      	str	r5, [sp, #32]
 801d1ae:	3301      	adds	r3, #1
 801d1b0:	930d      	str	r3, [sp, #52]	; 0x34
 801d1b2:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801d1b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d1b8:	f1bb 0f00 	cmp.w	fp, #0
 801d1bc:	d0d6      	beq.n	801d16c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801d1be:	f8bb 2000 	ldrh.w	r2, [fp]
 801d1c2:	2a00      	cmp	r2, #0
 801d1c4:	d1d6      	bne.n	801d174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801d1c6:	f8bb 2000 	ldrh.w	r2, [fp]
 801d1ca:	2a00      	cmp	r2, #0
 801d1cc:	d0bb      	beq.n	801d146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d1ce:	459a      	cmp	sl, r3
 801d1d0:	ddb9      	ble.n	801d146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d1d2:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801d1d6:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801d1da:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801d1de:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801d1e2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801d1e6:	960e      	str	r6, [sp, #56]	; 0x38
 801d1e8:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801d1ec:	960f      	str	r6, [sp, #60]	; 0x3c
 801d1ee:	f1bb 0f00 	cmp.w	fp, #0
 801d1f2:	d002      	beq.n	801d1fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801d1f4:	f10b 0302 	add.w	r3, fp, #2
 801d1f8:	9309      	str	r3, [sp, #36]	; 0x24
 801d1fa:	b10d      	cbz	r5, 801d200 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801d1fc:	1c6b      	adds	r3, r5, #1
 801d1fe:	9308      	str	r3, [sp, #32]
 801d200:	ab0f      	add	r3, sp, #60	; 0x3c
 801d202:	9305      	str	r3, [sp, #20]
 801d204:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801d208:	9304      	str	r3, [sp, #16]
 801d20a:	ab0e      	add	r3, sp, #56	; 0x38
 801d20c:	9303      	str	r3, [sp, #12]
 801d20e:	ab0c      	add	r3, sp, #48	; 0x30
 801d210:	9302      	str	r3, [sp, #8]
 801d212:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801d216:	9301      	str	r3, [sp, #4]
 801d218:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801d21c:	9300      	str	r3, [sp, #0]
 801d21e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801d222:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801d226:	a908      	add	r1, sp, #32
 801d228:	a809      	add	r0, sp, #36	; 0x24
 801d22a:	f7ff fea8 	bl	801cf7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801d22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d230:	2b00      	cmp	r3, #0
 801d232:	bfbe      	ittt	lt
 801d234:	6823      	ldrlt	r3, [r4, #0]
 801d236:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d23a:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d23e:	bfb8      	it	lt
 801d240:	3404      	addlt	r4, #4
 801d242:	2b00      	cmp	r3, #0
 801d244:	bfb8      	it	lt
 801d246:	6823      	ldrlt	r3, [r4, #0]
 801d248:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d24c:	bfbe      	ittt	lt
 801d24e:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d252:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801d254:	3404      	addlt	r4, #4
 801d256:	b1d9      	cbz	r1, 801d290 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801d258:	880b      	ldrh	r3, [r1, #0]
 801d25a:	2b69      	cmp	r3, #105	; 0x69
 801d25c:	d01f      	beq.n	801d29e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801d25e:	d82f      	bhi.n	801d2c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801d260:	2b58      	cmp	r3, #88	; 0x58
 801d262:	d01c      	beq.n	801d29e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801d264:	d818      	bhi.n	801d298 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801d266:	2b25      	cmp	r3, #37	; 0x25
 801d268:	d034      	beq.n	801d2d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801d26a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d26e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d270:	f1bb 0f00 	cmp.w	fp, #0
 801d274:	f000 80b8 	beq.w	801d3e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801d278:	f8bb 5000 	ldrh.w	r5, [fp]
 801d27c:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d280:	3301      	adds	r3, #1
 801d282:	930d      	str	r3, [sp, #52]	; 0x34
 801d284:	e029      	b.n	801d2da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801d286:	b10d      	cbz	r5, 801d28c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801d288:	782a      	ldrb	r2, [r5, #0]
 801d28a:	e785      	b.n	801d198 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d28c:	462a      	mov	r2, r5
 801d28e:	e783      	b.n	801d198 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d290:	2a00      	cmp	r2, #0
 801d292:	d0ea      	beq.n	801d26a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801d294:	7813      	ldrb	r3, [r2, #0]
 801d296:	e7e0      	b.n	801d25a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801d298:	3b63      	subs	r3, #99	; 0x63
 801d29a:	2b01      	cmp	r3, #1
 801d29c:	d8e5      	bhi.n	801d26a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801d29e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801d2a2:	b329      	cbz	r1, 801d2f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801d2a4:	880b      	ldrh	r3, [r1, #0]
 801d2a6:	2b69      	cmp	r3, #105	; 0x69
 801d2a8:	d063      	beq.n	801d372 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801d2aa:	d825      	bhi.n	801d2f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801d2ac:	2b63      	cmp	r3, #99	; 0x63
 801d2ae:	d038      	beq.n	801d322 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801d2b0:	2b64      	cmp	r3, #100	; 0x64
 801d2b2:	d05e      	beq.n	801d372 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801d2b4:	2b58      	cmp	r3, #88	; 0x58
 801d2b6:	d07b      	beq.n	801d3b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801d2b8:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801d2bc:	4625      	mov	r5, r4
 801d2be:	e036      	b.n	801d32e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801d2c0:	2b73      	cmp	r3, #115	; 0x73
 801d2c2:	d0ec      	beq.n	801d29e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801d2c4:	d802      	bhi.n	801d2cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801d2c6:	2b6f      	cmp	r3, #111	; 0x6f
 801d2c8:	d1cf      	bne.n	801d26a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801d2ca:	e7e8      	b.n	801d29e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801d2cc:	2b75      	cmp	r3, #117	; 0x75
 801d2ce:	d0e6      	beq.n	801d29e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801d2d0:	2b78      	cmp	r3, #120	; 0x78
 801d2d2:	e7f9      	b.n	801d2c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801d2d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d2d6:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801d2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2dc:	b10b      	cbz	r3, 801d2e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801d2de:	3302      	adds	r3, #2
 801d2e0:	9309      	str	r3, [sp, #36]	; 0x24
 801d2e2:	9b08      	ldr	r3, [sp, #32]
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	f43f af2e 	beq.w	801d146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d2ea:	3301      	adds	r3, #1
 801d2ec:	9308      	str	r3, [sp, #32]
 801d2ee:	e72a      	b.n	801d146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d2f0:	2a00      	cmp	r2, #0
 801d2f2:	d0e1      	beq.n	801d2b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801d2f4:	7813      	ldrb	r3, [r2, #0]
 801d2f6:	e7d6      	b.n	801d2a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801d2f8:	2b73      	cmp	r3, #115	; 0x73
 801d2fa:	d036      	beq.n	801d36a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801d2fc:	d807      	bhi.n	801d30e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801d2fe:	2b6f      	cmp	r3, #111	; 0x6f
 801d300:	d1da      	bne.n	801d2b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801d302:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d304:	1d25      	adds	r5, r4, #4
 801d306:	eba8 0202 	sub.w	r2, r8, r2
 801d30a:	2308      	movs	r3, #8
 801d30c:	e04a      	b.n	801d3a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801d30e:	2b75      	cmp	r3, #117	; 0x75
 801d310:	d043      	beq.n	801d39a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801d312:	2b78      	cmp	r3, #120	; 0x78
 801d314:	d1d0      	bne.n	801d2b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801d316:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d318:	1d25      	adds	r5, r4, #4
 801d31a:	eba8 0202 	sub.w	r2, r8, r2
 801d31e:	2310      	movs	r3, #16
 801d320:	e040      	b.n	801d3a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801d322:	7823      	ldrb	r3, [r4, #0]
 801d324:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d328:	1d25      	adds	r5, r4, #4
 801d32a:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801d32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d330:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801d334:	2b00      	cmp	r3, #0
 801d336:	d052      	beq.n	801d3de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801d338:	881a      	ldrh	r2, [r3, #0]
 801d33a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801d33e:	a80d      	add	r0, sp, #52	; 0x34
 801d340:	9005      	str	r0, [sp, #20]
 801d342:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801d346:	9004      	str	r0, [sp, #16]
 801d348:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d34a:	9003      	str	r0, [sp, #12]
 801d34c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801d350:	9002      	str	r0, [sp, #8]
 801d352:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d354:	9001      	str	r0, [sp, #4]
 801d356:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801d35a:	9000      	str	r0, [sp, #0]
 801d35c:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801d360:	a810      	add	r0, sp, #64	; 0x40
 801d362:	f7ff fd49 	bl	801cdf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801d366:	462c      	mov	r4, r5
 801d368:	e7b7      	b.n	801d2da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801d36a:	6823      	ldr	r3, [r4, #0]
 801d36c:	1d25      	adds	r5, r4, #4
 801d36e:	9310      	str	r3, [sp, #64]	; 0x40
 801d370:	e7dd      	b.n	801d32e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801d372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d374:	6820      	ldr	r0, [r4, #0]
 801d376:	eba8 0202 	sub.w	r2, r8, r2
 801d37a:	230a      	movs	r3, #10
 801d37c:	b292      	uxth	r2, r2
 801d37e:	4649      	mov	r1, r9
 801d380:	f7ff fd08 	bl	801cd94 <_ZN8touchgfx7Unicode4itoaElPtti>
 801d384:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d388:	2b2d      	cmp	r3, #45	; 0x2d
 801d38a:	f104 0504 	add.w	r5, r4, #4
 801d38e:	d1ce      	bne.n	801d32e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801d390:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d396:	3302      	adds	r3, #2
 801d398:	e7e9      	b.n	801d36e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801d39a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d39c:	1d25      	adds	r5, r4, #4
 801d39e:	eba8 0202 	sub.w	r2, r8, r2
 801d3a2:	230a      	movs	r3, #10
 801d3a4:	b292      	uxth	r2, r2
 801d3a6:	4649      	mov	r1, r9
 801d3a8:	6820      	ldr	r0, [r4, #0]
 801d3aa:	f7ff fcd5 	bl	801cd58 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d3ae:	e7be      	b.n	801d32e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801d3b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d3b2:	6820      	ldr	r0, [r4, #0]
 801d3b4:	eba8 0202 	sub.w	r2, r8, r2
 801d3b8:	b292      	uxth	r2, r2
 801d3ba:	2310      	movs	r3, #16
 801d3bc:	4649      	mov	r1, r9
 801d3be:	f7ff fccb 	bl	801cd58 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d3c2:	1d25      	adds	r5, r4, #4
 801d3c4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801d3c8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d0ae      	beq.n	801d32e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801d3d0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801d3d4:	2919      	cmp	r1, #25
 801d3d6:	d8f7      	bhi.n	801d3c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801d3d8:	3b20      	subs	r3, #32
 801d3da:	8013      	strh	r3, [r2, #0]
 801d3dc:	e7f4      	b.n	801d3c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801d3de:	9a08      	ldr	r2, [sp, #32]
 801d3e0:	2a00      	cmp	r2, #0
 801d3e2:	d0aa      	beq.n	801d33a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801d3e4:	7812      	ldrb	r2, [r2, #0]
 801d3e6:	e7a8      	b.n	801d33a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801d3e8:	2d00      	cmp	r5, #0
 801d3ea:	f43f af47 	beq.w	801d27c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801d3ee:	782d      	ldrb	r5, [r5, #0]
 801d3f0:	e744      	b.n	801d27c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801d3f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801d3f2:	b507      	push	{r0, r1, r2, lr}
 801d3f4:	9300      	str	r3, [sp, #0]
 801d3f6:	4613      	mov	r3, r2
 801d3f8:	2200      	movs	r2, #0
 801d3fa:	f7ff fe90 	bl	801d11e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801d3fe:	b003      	add	sp, #12
 801d400:	f85d fb04 	ldr.w	pc, [sp], #4

0801d404 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801d404:	b40c      	push	{r2, r3}
 801d406:	b507      	push	{r0, r1, r2, lr}
 801d408:	ab04      	add	r3, sp, #16
 801d40a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d40e:	9301      	str	r3, [sp, #4]
 801d410:	f7ff ffef 	bl	801d3f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801d414:	b003      	add	sp, #12
 801d416:	f85d eb04 	ldr.w	lr, [sp], #4
 801d41a:	b002      	add	sp, #8
 801d41c:	4770      	bx	lr
	...

0801d420 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d420:	4b01      	ldr	r3, [pc, #4]	; (801d428 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d422:	6018      	str	r0, [r3, #0]
 801d424:	4770      	bx	lr
 801d426:	bf00      	nop
 801d428:	2000b794 	.word	0x2000b794

0801d42c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801d42c:	4b06      	ldr	r3, [pc, #24]	; (801d448 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801d42e:	881a      	ldrh	r2, [r3, #0]
 801d430:	4282      	cmp	r2, r0
 801d432:	d807      	bhi.n	801d444 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801d434:	4b05      	ldr	r3, [pc, #20]	; (801d44c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801d436:	881b      	ldrh	r3, [r3, #0]
 801d438:	4413      	add	r3, r2
 801d43a:	4298      	cmp	r0, r3
 801d43c:	bfac      	ite	ge
 801d43e:	2000      	movge	r0, #0
 801d440:	2001      	movlt	r0, #1
 801d442:	4770      	bx	lr
 801d444:	2000      	movs	r0, #0
 801d446:	4770      	bx	lr
 801d448:	2000b7b4 	.word	0x2000b7b4
 801d44c:	2000b7b8 	.word	0x2000b7b8

0801d450 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801d450:	b508      	push	{r3, lr}
 801d452:	4601      	mov	r1, r0
 801d454:	f7ff ffea 	bl	801d42c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d458:	b118      	cbz	r0, 801d462 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801d45a:	4b02      	ldr	r3, [pc, #8]	; (801d464 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801d462:	bd08      	pop	{r3, pc}
 801d464:	2000b798 	.word	0x2000b798

0801d468 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d46c:	4d28      	ldr	r5, [pc, #160]	; (801d510 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d46e:	682b      	ldr	r3, [r5, #0]
 801d470:	2b00      	cmp	r3, #0
 801d472:	d04a      	beq.n	801d50a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d474:	4a27      	ldr	r2, [pc, #156]	; (801d514 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d476:	4e28      	ldr	r6, [pc, #160]	; (801d518 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d478:	8810      	ldrh	r0, [r2, #0]
 801d47a:	f8b6 8000 	ldrh.w	r8, [r6]
 801d47e:	4c27      	ldr	r4, [pc, #156]	; (801d51c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d480:	4f27      	ldr	r7, [pc, #156]	; (801d520 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d482:	4440      	add	r0, r8
 801d484:	1c41      	adds	r1, r0, #1
 801d486:	f021 0101 	bic.w	r1, r1, #1
 801d48a:	0409      	lsls	r1, r1, #16
 801d48c:	0c09      	lsrs	r1, r1, #16
 801d48e:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801d492:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801d496:	eb03 020e 	add.w	r2, r3, lr
 801d49a:	eb0e 010c 	add.w	r1, lr, ip
 801d49e:	6022      	str	r2, [r4, #0]
 801d4a0:	185a      	adds	r2, r3, r1
 801d4a2:	603a      	str	r2, [r7, #0]
 801d4a4:	220e      	movs	r2, #14
 801d4a6:	fb02 f208 	mul.w	r2, r2, r8
 801d4aa:	3203      	adds	r2, #3
 801d4ac:	f022 0203 	bic.w	r2, r2, #3
 801d4b0:	4411      	add	r1, r2
 801d4b2:	440b      	add	r3, r1
 801d4b4:	491b      	ldr	r1, [pc, #108]	; (801d524 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801d4b6:	600b      	str	r3, [r1, #0]
 801d4b8:	491b      	ldr	r1, [pc, #108]	; (801d528 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	800b      	strh	r3, [r1, #0]
 801d4be:	491b      	ldr	r1, [pc, #108]	; (801d52c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801d4c0:	6809      	ldr	r1, [r1, #0]
 801d4c2:	eba1 010e 	sub.w	r1, r1, lr
 801d4c6:	eba1 010c 	sub.w	r1, r1, ip
 801d4ca:	1a8a      	subs	r2, r1, r2
 801d4cc:	4918      	ldr	r1, [pc, #96]	; (801d530 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801d4ce:	600a      	str	r2, [r1, #0]
 801d4d0:	4a18      	ldr	r2, [pc, #96]	; (801d534 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801d4d2:	469c      	mov	ip, r3
 801d4d4:	8013      	strh	r3, [r2, #0]
 801d4d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d4da:	4283      	cmp	r3, r0
 801d4dc:	d10d      	bne.n	801d4fa <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801d4de:	8835      	ldrh	r5, [r6, #0]
 801d4e0:	6838      	ldr	r0, [r7, #0]
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	240e      	movs	r4, #14
 801d4e6:	429d      	cmp	r5, r3
 801d4e8:	d90f      	bls.n	801d50a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d4ea:	fb04 0203 	mla	r2, r4, r3, r0
 801d4ee:	3301      	adds	r3, #1
 801d4f0:	7b11      	ldrb	r1, [r2, #12]
 801d4f2:	f36f 1145 	bfc	r1, #5, #1
 801d4f6:	7311      	strb	r1, [r2, #12]
 801d4f8:	e7f5      	b.n	801d4e6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801d4fa:	682a      	ldr	r2, [r5, #0]
 801d4fc:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d500:	6822      	ldr	r2, [r4, #0]
 801d502:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801d506:	3301      	adds	r3, #1
 801d508:	e7e7      	b.n	801d4da <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801d50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d50e:	bf00      	nop
 801d510:	2000b798 	.word	0x2000b798
 801d514:	2000b7b4 	.word	0x2000b7b4
 801d518:	2000b7b8 	.word	0x2000b7b8
 801d51c:	2000b7ac 	.word	0x2000b7ac
 801d520:	2000b79c 	.word	0x2000b79c
 801d524:	2000b7a4 	.word	0x2000b7a4
 801d528:	2000b7b6 	.word	0x2000b7b6
 801d52c:	2000b7a0 	.word	0x2000b7a0
 801d530:	2000b7b0 	.word	0x2000b7b0
 801d534:	2000b7a8 	.word	0x2000b7a8

0801d538 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d538:	b510      	push	{r4, lr}
 801d53a:	4b10      	ldr	r3, [pc, #64]	; (801d57c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801d53c:	681b      	ldr	r3, [r3, #0]
 801d53e:	b9db      	cbnz	r3, 801d578 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d540:	b1d1      	cbz	r1, 801d578 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d542:	4b0f      	ldr	r3, [pc, #60]	; (801d580 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801d544:	801a      	strh	r2, [r3, #0]
 801d546:	4b0f      	ldr	r3, [pc, #60]	; (801d584 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801d548:	881b      	ldrh	r3, [r3, #0]
 801d54a:	b292      	uxth	r2, r2
 801d54c:	240e      	movs	r4, #14
 801d54e:	4413      	add	r3, r2
 801d550:	4362      	muls	r2, r4
 801d552:	2406      	movs	r4, #6
 801d554:	fb04 2203 	mla	r2, r4, r3, r2
 801d558:	428a      	cmp	r2, r1
 801d55a:	d305      	bcc.n	801d568 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801d55c:	4b0a      	ldr	r3, [pc, #40]	; (801d588 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801d55e:	4a0b      	ldr	r2, [pc, #44]	; (801d58c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801d560:	480b      	ldr	r0, [pc, #44]	; (801d590 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801d562:	2137      	movs	r1, #55	; 0x37
 801d564:	f00b ff40 	bl	80293e8 <__assert_func>
 801d568:	4b0a      	ldr	r3, [pc, #40]	; (801d594 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801d56a:	6019      	str	r1, [r3, #0]
 801d56c:	4b0a      	ldr	r3, [pc, #40]	; (801d598 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801d56e:	6018      	str	r0, [r3, #0]
 801d570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d574:	f7ff bf78 	b.w	801d468 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d578:	bd10      	pop	{r4, pc}
 801d57a:	bf00      	nop
 801d57c:	2000b7a4 	.word	0x2000b7a4
 801d580:	2000b7b8 	.word	0x2000b7b8
 801d584:	2000b7b4 	.word	0x2000b7b4
 801d588:	080304f5 	.word	0x080304f5
 801d58c:	0803054e 	.word	0x0803054e
 801d590:	080304d0 	.word	0x080304d0
 801d594:	2000b7a0 	.word	0x2000b7a0
 801d598:	2000b798 	.word	0x2000b798

0801d59c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d59c:	b470      	push	{r4, r5, r6}
 801d59e:	4c07      	ldr	r4, [pc, #28]	; (801d5bc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d5a0:	6826      	ldr	r6, [r4, #0]
 801d5a2:	4605      	mov	r5, r0
 801d5a4:	4610      	mov	r0, r2
 801d5a6:	9a03      	ldr	r2, [sp, #12]
 801d5a8:	b936      	cbnz	r6, 801d5b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d5aa:	6025      	str	r5, [r4, #0]
 801d5ac:	4c04      	ldr	r4, [pc, #16]	; (801d5c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d5ae:	8021      	strh	r1, [r4, #0]
 801d5b0:	bc70      	pop	{r4, r5, r6}
 801d5b2:	4619      	mov	r1, r3
 801d5b4:	f7ff bfc0 	b.w	801d538 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d5b8:	bc70      	pop	{r4, r5, r6}
 801d5ba:	4770      	bx	lr
 801d5bc:	2000b7bc 	.word	0x2000b7bc
 801d5c0:	2000b7b4 	.word	0x2000b7b4

0801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d5c4:	b508      	push	{r3, lr}
 801d5c6:	4b14      	ldr	r3, [pc, #80]	; (801d618 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d5c8:	6819      	ldr	r1, [r3, #0]
 801d5ca:	b931      	cbnz	r1, 801d5da <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801d5cc:	4b13      	ldr	r3, [pc, #76]	; (801d61c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d5ce:	4a14      	ldr	r2, [pc, #80]	; (801d620 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d5d0:	4814      	ldr	r0, [pc, #80]	; (801d624 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d5d2:	f240 3187 	movw	r1, #903	; 0x387
 801d5d6:	f00b ff07 	bl	80293e8 <__assert_func>
 801d5da:	4a13      	ldr	r2, [pc, #76]	; (801d628 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d5dc:	8803      	ldrh	r3, [r0, #0]
 801d5de:	8812      	ldrh	r2, [r2, #0]
 801d5e0:	4293      	cmp	r3, r2
 801d5e2:	d204      	bcs.n	801d5ee <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801d5e4:	2214      	movs	r2, #20
 801d5e6:	fb02 1303 	mla	r3, r2, r3, r1
 801d5ea:	8918      	ldrh	r0, [r3, #8]
 801d5ec:	bd08      	pop	{r3, pc}
 801d5ee:	490f      	ldr	r1, [pc, #60]	; (801d62c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801d5f0:	8809      	ldrh	r1, [r1, #0]
 801d5f2:	4411      	add	r1, r2
 801d5f4:	428b      	cmp	r3, r1
 801d5f6:	da06      	bge.n	801d606 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801d5f8:	1a9b      	subs	r3, r3, r2
 801d5fa:	4a0d      	ldr	r2, [pc, #52]	; (801d630 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801d5fc:	6812      	ldr	r2, [r2, #0]
 801d5fe:	210e      	movs	r1, #14
 801d600:	fb01 2303 	mla	r3, r1, r3, r2
 801d604:	e7f1      	b.n	801d5ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801d606:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d60a:	4293      	cmp	r3, r2
 801d60c:	bf0a      	itet	eq
 801d60e:	4b09      	ldreq	r3, [pc, #36]	; (801d634 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801d610:	2000      	movne	r0, #0
 801d612:	8818      	ldrheq	r0, [r3, #0]
 801d614:	e7ea      	b.n	801d5ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801d616:	bf00      	nop
 801d618:	2000b7bc 	.word	0x2000b7bc
 801d61c:	0802f93c 	.word	0x0802f93c
 801d620:	080305fb 	.word	0x080305fb
 801d624:	080304d0 	.word	0x080304d0
 801d628:	2000b7b4 	.word	0x2000b7b4
 801d62c:	2000b7b8 	.word	0x2000b7b8
 801d630:	2000b79c 	.word	0x2000b79c
 801d634:	2000b728 	.word	0x2000b728

0801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d638:	b508      	push	{r3, lr}
 801d63a:	4b14      	ldr	r3, [pc, #80]	; (801d68c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d63c:	6819      	ldr	r1, [r3, #0]
 801d63e:	b931      	cbnz	r1, 801d64e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801d640:	4b13      	ldr	r3, [pc, #76]	; (801d690 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d642:	4a14      	ldr	r2, [pc, #80]	; (801d694 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d644:	4814      	ldr	r0, [pc, #80]	; (801d698 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d646:	f240 319b 	movw	r1, #923	; 0x39b
 801d64a:	f00b fecd 	bl	80293e8 <__assert_func>
 801d64e:	4a13      	ldr	r2, [pc, #76]	; (801d69c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d650:	8803      	ldrh	r3, [r0, #0]
 801d652:	8812      	ldrh	r2, [r2, #0]
 801d654:	4293      	cmp	r3, r2
 801d656:	d204      	bcs.n	801d662 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801d658:	2214      	movs	r2, #20
 801d65a:	fb02 1303 	mla	r3, r2, r3, r1
 801d65e:	8958      	ldrh	r0, [r3, #10]
 801d660:	bd08      	pop	{r3, pc}
 801d662:	490f      	ldr	r1, [pc, #60]	; (801d6a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801d664:	8809      	ldrh	r1, [r1, #0]
 801d666:	4411      	add	r1, r2
 801d668:	428b      	cmp	r3, r1
 801d66a:	da06      	bge.n	801d67a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801d66c:	1a9b      	subs	r3, r3, r2
 801d66e:	4a0d      	ldr	r2, [pc, #52]	; (801d6a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801d670:	6812      	ldr	r2, [r2, #0]
 801d672:	210e      	movs	r1, #14
 801d674:	fb01 2303 	mla	r3, r1, r3, r2
 801d678:	e7f1      	b.n	801d65e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801d67a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d67e:	4293      	cmp	r3, r2
 801d680:	bf0a      	itet	eq
 801d682:	4b09      	ldreq	r3, [pc, #36]	; (801d6a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801d684:	2000      	movne	r0, #0
 801d686:	8818      	ldrheq	r0, [r3, #0]
 801d688:	e7ea      	b.n	801d660 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801d68a:	bf00      	nop
 801d68c:	2000b7bc 	.word	0x2000b7bc
 801d690:	0802f93c 	.word	0x0802f93c
 801d694:	08030627 	.word	0x08030627
 801d698:	080304d0 	.word	0x080304d0
 801d69c:	2000b7b4 	.word	0x2000b7b4
 801d6a0:	2000b7b8 	.word	0x2000b7b8
 801d6a4:	2000b79c 	.word	0x2000b79c
 801d6a8:	2000b72a 	.word	0x2000b72a

0801d6ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d6ac:	b510      	push	{r4, lr}
 801d6ae:	4b23      	ldr	r3, [pc, #140]	; (801d73c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d6b0:	681c      	ldr	r4, [r3, #0]
 801d6b2:	b934      	cbnz	r4, 801d6c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801d6b4:	4b22      	ldr	r3, [pc, #136]	; (801d740 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d6b6:	4a23      	ldr	r2, [pc, #140]	; (801d744 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801d6b8:	4823      	ldr	r0, [pc, #140]	; (801d748 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801d6ba:	f240 31af 	movw	r1, #943	; 0x3af
 801d6be:	f00b fe93 	bl	80293e8 <__assert_func>
 801d6c2:	4a22      	ldr	r2, [pc, #136]	; (801d74c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801d6c4:	880b      	ldrh	r3, [r1, #0]
 801d6c6:	8812      	ldrh	r2, [r2, #0]
 801d6c8:	4293      	cmp	r3, r2
 801d6ca:	d211      	bcs.n	801d6f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801d6cc:	2214      	movs	r2, #20
 801d6ce:	fb02 4303 	mla	r3, r2, r3, r4
 801d6d2:	8a1a      	ldrh	r2, [r3, #16]
 801d6d4:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d6d8:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d6dc:	8a5b      	ldrh	r3, [r3, #18]
 801d6de:	8004      	strh	r4, [r0, #0]
 801d6e0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d6e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d6e8:	8041      	strh	r1, [r0, #2]
 801d6ea:	8082      	strh	r2, [r0, #4]
 801d6ec:	80c3      	strh	r3, [r0, #6]
 801d6ee:	e00e      	b.n	801d70e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801d6f0:	4917      	ldr	r1, [pc, #92]	; (801d750 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801d6f2:	8809      	ldrh	r1, [r1, #0]
 801d6f4:	4411      	add	r1, r2
 801d6f6:	428b      	cmp	r3, r1
 801d6f8:	da0a      	bge.n	801d710 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801d6fa:	1a9b      	subs	r3, r3, r2
 801d6fc:	4a15      	ldr	r2, [pc, #84]	; (801d754 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801d6fe:	6812      	ldr	r2, [r2, #0]
 801d700:	210e      	movs	r1, #14
 801d702:	fb01 2303 	mla	r3, r1, r3, r2
 801d706:	681a      	ldr	r2, [r3, #0]
 801d708:	6002      	str	r2, [r0, #0]
 801d70a:	685a      	ldr	r2, [r3, #4]
 801d70c:	6042      	str	r2, [r0, #4]
 801d70e:	bd10      	pop	{r4, pc}
 801d710:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d714:	4293      	cmp	r3, r2
 801d716:	d10b      	bne.n	801d730 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801d718:	4b0f      	ldr	r3, [pc, #60]	; (801d758 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801d71a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d71e:	4b0f      	ldr	r3, [pc, #60]	; (801d75c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801d720:	8081      	strh	r1, [r0, #4]
 801d722:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d726:	80c2      	strh	r2, [r0, #6]
 801d728:	2300      	movs	r3, #0
 801d72a:	8003      	strh	r3, [r0, #0]
 801d72c:	8043      	strh	r3, [r0, #2]
 801d72e:	e7ee      	b.n	801d70e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801d730:	2300      	movs	r3, #0
 801d732:	8003      	strh	r3, [r0, #0]
 801d734:	8043      	strh	r3, [r0, #2]
 801d736:	8083      	strh	r3, [r0, #4]
 801d738:	e7d8      	b.n	801d6ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801d73a:	bf00      	nop
 801d73c:	2000b7bc 	.word	0x2000b7bc
 801d740:	0802f93c 	.word	0x0802f93c
 801d744:	08030594 	.word	0x08030594
 801d748:	080304d0 	.word	0x080304d0
 801d74c:	2000b7b4 	.word	0x2000b7b4
 801d750:	2000b7b8 	.word	0x2000b7b8
 801d754:	2000b79c 	.word	0x2000b79c
 801d758:	2000b728 	.word	0x2000b728
 801d75c:	2000b72a 	.word	0x2000b72a

0801d760 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d760:	4b18      	ldr	r3, [pc, #96]	; (801d7c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	b34b      	cbz	r3, 801d7ba <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d766:	4a18      	ldr	r2, [pc, #96]	; (801d7c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d768:	8800      	ldrh	r0, [r0, #0]
 801d76a:	8812      	ldrh	r2, [r2, #0]
 801d76c:	4290      	cmp	r0, r2
 801d76e:	d211      	bcs.n	801d794 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801d770:	2214      	movs	r2, #20
 801d772:	fb02 3300 	mla	r3, r2, r0, r3
 801d776:	8a1a      	ldrh	r2, [r3, #16]
 801d778:	8919      	ldrh	r1, [r3, #8]
 801d77a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d77e:	428a      	cmp	r2, r1
 801d780:	db1d      	blt.n	801d7be <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d782:	8a58      	ldrh	r0, [r3, #18]
 801d784:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d788:	895b      	ldrh	r3, [r3, #10]
 801d78a:	4298      	cmp	r0, r3
 801d78c:	bfac      	ite	ge
 801d78e:	2000      	movge	r0, #0
 801d790:	2001      	movlt	r0, #1
 801d792:	4770      	bx	lr
 801d794:	4b0d      	ldr	r3, [pc, #52]	; (801d7cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d796:	881b      	ldrh	r3, [r3, #0]
 801d798:	4413      	add	r3, r2
 801d79a:	4298      	cmp	r0, r3
 801d79c:	da0d      	bge.n	801d7ba <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d79e:	4b0c      	ldr	r3, [pc, #48]	; (801d7d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801d7a0:	681b      	ldr	r3, [r3, #0]
 801d7a2:	1a80      	subs	r0, r0, r2
 801d7a4:	220e      	movs	r2, #14
 801d7a6:	fb02 3300 	mla	r3, r2, r0, r3
 801d7aa:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d7ae:	891a      	ldrh	r2, [r3, #8]
 801d7b0:	4291      	cmp	r1, r2
 801d7b2:	db04      	blt.n	801d7be <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d7b4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d7b8:	e7e6      	b.n	801d788 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801d7ba:	2000      	movs	r0, #0
 801d7bc:	4770      	bx	lr
 801d7be:	2001      	movs	r0, #1
 801d7c0:	4770      	bx	lr
 801d7c2:	bf00      	nop
 801d7c4:	2000b7bc 	.word	0x2000b7bc
 801d7c8:	2000b7b4 	.word	0x2000b7b4
 801d7cc:	2000b7b8 	.word	0x2000b7b8
 801d7d0:	2000b79c 	.word	0x2000b79c

0801d7d4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d7d4:	b508      	push	{r3, lr}
 801d7d6:	4b12      	ldr	r3, [pc, #72]	; (801d820 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d7d8:	6819      	ldr	r1, [r3, #0]
 801d7da:	b931      	cbnz	r1, 801d7ea <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d7dc:	4b11      	ldr	r3, [pc, #68]	; (801d824 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d7de:	4a12      	ldr	r2, [pc, #72]	; (801d828 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d7e0:	4812      	ldr	r0, [pc, #72]	; (801d82c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d7e2:	f240 31d3 	movw	r1, #979	; 0x3d3
 801d7e6:	f00b fdff 	bl	80293e8 <__assert_func>
 801d7ea:	8803      	ldrh	r3, [r0, #0]
 801d7ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d7f0:	4293      	cmp	r3, r2
 801d7f2:	d012      	beq.n	801d81a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d7f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d7f8:	4293      	cmp	r3, r2
 801d7fa:	d103      	bne.n	801d804 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801d7fc:	4b0c      	ldr	r3, [pc, #48]	; (801d830 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801d802:	bd08      	pop	{r3, pc}
 801d804:	4a0b      	ldr	r2, [pc, #44]	; (801d834 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801d806:	6812      	ldr	r2, [r2, #0]
 801d808:	b11a      	cbz	r2, 801d812 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801d80a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d80e:	2800      	cmp	r0, #0
 801d810:	d1f7      	bne.n	801d802 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d812:	2214      	movs	r2, #20
 801d814:	4353      	muls	r3, r2
 801d816:	58c8      	ldr	r0, [r1, r3]
 801d818:	e7f3      	b.n	801d802 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d81a:	2000      	movs	r0, #0
 801d81c:	e7f1      	b.n	801d802 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d81e:	bf00      	nop
 801d820:	2000b7bc 	.word	0x2000b7bc
 801d824:	0802f93c 	.word	0x0802f93c
 801d828:	080305ca 	.word	0x080305ca
 801d82c:	080304d0 	.word	0x080304d0
 801d830:	2000b734 	.word	0x2000b734
 801d834:	2000b798 	.word	0x2000b798

0801d838 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d838:	8802      	ldrh	r2, [r0, #0]
 801d83a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801d83e:	429a      	cmp	r2, r3
 801d840:	d845      	bhi.n	801d8ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801d842:	4b24      	ldr	r3, [pc, #144]	; (801d8d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d844:	8818      	ldrh	r0, [r3, #0]
 801d846:	4282      	cmp	r2, r0
 801d848:	d221      	bcs.n	801d88e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801d84a:	4b23      	ldr	r3, [pc, #140]	; (801d8d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d84c:	6819      	ldr	r1, [r3, #0]
 801d84e:	2314      	movs	r3, #20
 801d850:	fb03 1302 	mla	r3, r3, r2, r1
 801d854:	6858      	ldr	r0, [r3, #4]
 801d856:	2800      	cmp	r0, #0
 801d858:	d03a      	beq.n	801d8d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801d85a:	4920      	ldr	r1, [pc, #128]	; (801d8dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d85c:	6809      	ldr	r1, [r1, #0]
 801d85e:	2900      	cmp	r1, #0
 801d860:	d036      	beq.n	801d8d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801d862:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d866:	2900      	cmp	r1, #0
 801d868:	d032      	beq.n	801d8d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801d86a:	891a      	ldrh	r2, [r3, #8]
 801d86c:	8958      	ldrh	r0, [r3, #10]
 801d86e:	4350      	muls	r0, r2
 801d870:	7c5a      	ldrb	r2, [r3, #17]
 801d872:	7cdb      	ldrb	r3, [r3, #19]
 801d874:	0952      	lsrs	r2, r2, #5
 801d876:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d87a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d87e:	2b0b      	cmp	r3, #11
 801d880:	bf18      	it	ne
 801d882:	0040      	lslne	r0, r0, #1
 801d884:	3003      	adds	r0, #3
 801d886:	f020 0003 	bic.w	r0, r0, #3
 801d88a:	4408      	add	r0, r1
 801d88c:	4770      	bx	lr
 801d88e:	4b14      	ldr	r3, [pc, #80]	; (801d8e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801d890:	881b      	ldrh	r3, [r3, #0]
 801d892:	4403      	add	r3, r0
 801d894:	429a      	cmp	r2, r3
 801d896:	da1a      	bge.n	801d8ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801d898:	4b12      	ldr	r3, [pc, #72]	; (801d8e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	1a10      	subs	r0, r2, r0
 801d89e:	210e      	movs	r1, #14
 801d8a0:	fb01 3000 	mla	r0, r1, r0, r3
 801d8a4:	7b03      	ldrb	r3, [r0, #12]
 801d8a6:	f003 031f 	and.w	r3, r3, #31
 801d8aa:	2b0b      	cmp	r3, #11
 801d8ac:	d10b      	bne.n	801d8c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d8ae:	8903      	ldrh	r3, [r0, #8]
 801d8b0:	8940      	ldrh	r0, [r0, #10]
 801d8b2:	4358      	muls	r0, r3
 801d8b4:	4b09      	ldr	r3, [pc, #36]	; (801d8dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d8b6:	6819      	ldr	r1, [r3, #0]
 801d8b8:	3003      	adds	r0, #3
 801d8ba:	f020 0303 	bic.w	r3, r0, #3
 801d8be:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d8c2:	4418      	add	r0, r3
 801d8c4:	4770      	bx	lr
 801d8c6:	2b0d      	cmp	r3, #13
 801d8c8:	d101      	bne.n	801d8ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801d8ca:	300d      	adds	r0, #13
 801d8cc:	4770      	bx	lr
 801d8ce:	2000      	movs	r0, #0
 801d8d0:	4770      	bx	lr
 801d8d2:	bf00      	nop
 801d8d4:	2000b7b4 	.word	0x2000b7b4
 801d8d8:	2000b7bc 	.word	0x2000b7bc
 801d8dc:	2000b798 	.word	0x2000b798
 801d8e0:	2000b7b8 	.word	0x2000b7b8
 801d8e4:	2000b79c 	.word	0x2000b79c

0801d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d8e8:	4b19      	ldr	r3, [pc, #100]	; (801d950 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d8ea:	6819      	ldr	r1, [r3, #0]
 801d8ec:	8803      	ldrh	r3, [r0, #0]
 801d8ee:	b1e9      	cbz	r1, 801d92c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d8f0:	4a18      	ldr	r2, [pc, #96]	; (801d954 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d8f2:	8812      	ldrh	r2, [r2, #0]
 801d8f4:	429a      	cmp	r2, r3
 801d8f6:	d90a      	bls.n	801d90e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801d8f8:	2214      	movs	r2, #20
 801d8fa:	fb02 1303 	mla	r3, r2, r3, r1
 801d8fe:	7c58      	ldrb	r0, [r3, #17]
 801d900:	0942      	lsrs	r2, r0, #5
 801d902:	7cd8      	ldrb	r0, [r3, #19]
 801d904:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801d908:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801d90c:	4770      	bx	lr
 801d90e:	4912      	ldr	r1, [pc, #72]	; (801d958 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801d910:	8809      	ldrh	r1, [r1, #0]
 801d912:	4411      	add	r1, r2
 801d914:	428b      	cmp	r3, r1
 801d916:	da09      	bge.n	801d92c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d918:	1a9b      	subs	r3, r3, r2
 801d91a:	4a10      	ldr	r2, [pc, #64]	; (801d95c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801d91c:	6812      	ldr	r2, [r2, #0]
 801d91e:	210e      	movs	r1, #14
 801d920:	fb01 2303 	mla	r3, r1, r3, r2
 801d924:	7b18      	ldrb	r0, [r3, #12]
 801d926:	f000 001f 	and.w	r0, r0, #31
 801d92a:	4770      	bx	lr
 801d92c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d930:	4293      	cmp	r3, r2
 801d932:	d10a      	bne.n	801d94a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801d934:	4b0a      	ldr	r3, [pc, #40]	; (801d960 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d93c:	b10a      	cbz	r2, 801d942 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d93e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d940:	b900      	cbnz	r0, 801d944 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801d942:	6898      	ldr	r0, [r3, #8]
 801d944:	6803      	ldr	r3, [r0, #0]
 801d946:	6a1b      	ldr	r3, [r3, #32]
 801d948:	4718      	bx	r3
 801d94a:	2000      	movs	r0, #0
 801d94c:	4770      	bx	lr
 801d94e:	bf00      	nop
 801d950:	2000b7bc 	.word	0x2000b7bc
 801d954:	2000b7b4 	.word	0x2000b7b4
 801d958:	2000b7b8 	.word	0x2000b7b8
 801d95c:	2000b79c 	.word	0x2000b79c
 801d960:	2000b734 	.word	0x2000b734

0801d964 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801d964:	2010      	movs	r0, #16
 801d966:	4770      	bx	lr

0801d968 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801d968:	2000      	movs	r0, #0
 801d96a:	4770      	bx	lr

0801d96c <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801d96c:	00d2      	lsls	r2, r2, #3
 801d96e:	0209      	lsls	r1, r1, #8
 801d970:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d974:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 801d978:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801d97c:	4310      	orrs	r0, r2
 801d97e:	4770      	bx	lr

0801d980 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801d980:	0a09      	lsrs	r1, r1, #8
 801d982:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801d986:	4770      	bx	lr

0801d988 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 801d988:	08c9      	lsrs	r1, r1, #3
 801d98a:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801d98e:	4770      	bx	lr

0801d990 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801d990:	00c9      	lsls	r1, r1, #3
 801d992:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801d996:	4770      	bx	lr

0801d998 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d998:	2bff      	cmp	r3, #255	; 0xff
 801d99a:	d050      	beq.n	801da3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d99c:	2a0b      	cmp	r2, #11
 801d99e:	d04a      	beq.n	801da36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d9a0:	d80e      	bhi.n	801d9c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d9a2:	2a03      	cmp	r2, #3
 801d9a4:	d03f      	beq.n	801da26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801d9a6:	d804      	bhi.n	801d9b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9a8:	2a01      	cmp	r2, #1
 801d9aa:	d03e      	beq.n	801da2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d9ac:	d93f      	bls.n	801da2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d9ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d9b0:	4770      	bx	lr
 801d9b2:	2a09      	cmp	r2, #9
 801d9b4:	d03f      	beq.n	801da36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d9b6:	d83c      	bhi.n	801da32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d9b8:	2a08      	cmp	r2, #8
 801d9ba:	d03a      	beq.n	801da32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d9bc:	2000      	movs	r0, #0
 801d9be:	4770      	bx	lr
 801d9c0:	2a2f      	cmp	r2, #47	; 0x2f
 801d9c2:	d024      	beq.n	801da0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801d9c4:	d80d      	bhi.n	801d9e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801d9c6:	2a2d      	cmp	r2, #45	; 0x2d
 801d9c8:	d014      	beq.n	801d9f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801d9ca:	d826      	bhi.n	801da1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801d9cc:	2a2c      	cmp	r2, #44	; 0x2c
 801d9ce:	d1f5      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d9d0:	684b      	ldr	r3, [r1, #4]
 801d9d2:	781b      	ldrb	r3, [r3, #0]
 801d9d4:	2b01      	cmp	r3, #1
 801d9d6:	d018      	beq.n	801da0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801d9d8:	d323      	bcc.n	801da22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801d9da:	2b02      	cmp	r3, #2
 801d9dc:	d1ee      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d9de:	6880      	ldr	r0, [r0, #8]
 801d9e0:	4770      	bx	lr
 801d9e2:	2a31      	cmp	r2, #49	; 0x31
 801d9e4:	d004      	beq.n	801d9f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801d9e6:	d328      	bcc.n	801da3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d9e8:	2a32      	cmp	r2, #50	; 0x32
 801d9ea:	d026      	beq.n	801da3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d9ec:	2a33      	cmp	r2, #51	; 0x33
 801d9ee:	d1e5      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d9f0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801d9f2:	4770      	bx	lr
 801d9f4:	684b      	ldr	r3, [r1, #4]
 801d9f6:	781b      	ldrb	r3, [r3, #0]
 801d9f8:	2b01      	cmp	r3, #1
 801d9fa:	d004      	beq.n	801da06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9fc:	d30b      	bcc.n	801da16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d9fe:	2b02      	cmp	r3, #2
 801da00:	d1dc      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801da02:	6900      	ldr	r0, [r0, #16]
 801da04:	4770      	bx	lr
 801da06:	6a00      	ldr	r0, [r0, #32]
 801da08:	4770      	bx	lr
 801da0a:	6980      	ldr	r0, [r0, #24]
 801da0c:	4770      	bx	lr
 801da0e:	684b      	ldr	r3, [r1, #4]
 801da10:	781b      	ldrb	r3, [r3, #0]
 801da12:	2b00      	cmp	r3, #0
 801da14:	d1d2      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801da16:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801da18:	4770      	bx	lr
 801da1a:	684b      	ldr	r3, [r1, #4]
 801da1c:	781b      	ldrb	r3, [r3, #0]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d1cc      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801da22:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801da24:	4770      	bx	lr
 801da26:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801da28:	4770      	bx	lr
 801da2a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801da2c:	4770      	bx	lr
 801da2e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801da30:	4770      	bx	lr
 801da32:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801da34:	4770      	bx	lr
 801da36:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801da38:	4770      	bx	lr
 801da3a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801da3c:	4770      	bx	lr
 801da3e:	2a0b      	cmp	r2, #11
 801da40:	d049      	beq.n	801dad6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801da42:	d80e      	bhi.n	801da62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801da44:	2a03      	cmp	r2, #3
 801da46:	d040      	beq.n	801daca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801da48:	d804      	bhi.n	801da54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801da4a:	2a01      	cmp	r2, #1
 801da4c:	d03f      	beq.n	801dace <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801da4e:	d940      	bls.n	801dad2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801da50:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801da52:	4770      	bx	lr
 801da54:	2a09      	cmp	r2, #9
 801da56:	d03e      	beq.n	801dad6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801da58:	d801      	bhi.n	801da5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801da5a:	2a08      	cmp	r2, #8
 801da5c:	d1ae      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801da5e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801da60:	4770      	bx	lr
 801da62:	2a2f      	cmp	r2, #47	; 0x2f
 801da64:	d024      	beq.n	801dab0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801da66:	d80d      	bhi.n	801da84 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801da68:	2a2d      	cmp	r2, #45	; 0x2d
 801da6a:	d014      	beq.n	801da96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801da6c:	d826      	bhi.n	801dabc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801da6e:	2a2c      	cmp	r2, #44	; 0x2c
 801da70:	d1a4      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801da72:	684b      	ldr	r3, [r1, #4]
 801da74:	781b      	ldrb	r3, [r3, #0]
 801da76:	2b01      	cmp	r3, #1
 801da78:	d018      	beq.n	801daac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801da7a:	d324      	bcc.n	801dac6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801da7c:	2b02      	cmp	r3, #2
 801da7e:	d19d      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801da80:	68c0      	ldr	r0, [r0, #12]
 801da82:	4770      	bx	lr
 801da84:	2a31      	cmp	r2, #49	; 0x31
 801da86:	d004      	beq.n	801da92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801da88:	d327      	bcc.n	801dada <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801da8a:	2a32      	cmp	r2, #50	; 0x32
 801da8c:	d025      	beq.n	801dada <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801da8e:	2a33      	cmp	r2, #51	; 0x33
 801da90:	d194      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801da92:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801da94:	4770      	bx	lr
 801da96:	684b      	ldr	r3, [r1, #4]
 801da98:	781b      	ldrb	r3, [r3, #0]
 801da9a:	2b01      	cmp	r3, #1
 801da9c:	d004      	beq.n	801daa8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801da9e:	d30b      	bcc.n	801dab8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801daa0:	2b02      	cmp	r3, #2
 801daa2:	d18b      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801daa4:	6940      	ldr	r0, [r0, #20]
 801daa6:	4770      	bx	lr
 801daa8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801daaa:	4770      	bx	lr
 801daac:	69c0      	ldr	r0, [r0, #28]
 801daae:	4770      	bx	lr
 801dab0:	684b      	ldr	r3, [r1, #4]
 801dab2:	781b      	ldrb	r3, [r3, #0]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d181      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dab8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801daba:	4770      	bx	lr
 801dabc:	684b      	ldr	r3, [r1, #4]
 801dabe:	781b      	ldrb	r3, [r3, #0]
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	f47f af7b 	bne.w	801d9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dac6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801dac8:	4770      	bx	lr
 801daca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801dacc:	4770      	bx	lr
 801dace:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801dad0:	4770      	bx	lr
 801dad2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801dad4:	4770      	bx	lr
 801dad6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801dad8:	4770      	bx	lr
 801dada:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801dadc:	4770      	bx	lr

0801dade <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dae2:	b087      	sub	sp, #28
 801dae4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dae6:	9205      	str	r2, [sp, #20]
 801dae8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801daec:	9202      	str	r2, [sp, #8]
 801daee:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801daf2:	9101      	str	r1, [sp, #4]
 801daf4:	6841      	ldr	r1, [r0, #4]
 801daf6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801dafa:	fb01 2404 	mla	r4, r1, r4, r2
 801dafe:	6802      	ldr	r2, [r0, #0]
 801db00:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801db04:	f8de 2000 	ldr.w	r2, [lr]
 801db08:	9203      	str	r2, [sp, #12]
 801db0a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801db0e:	3204      	adds	r2, #4
 801db10:	9204      	str	r2, [sp, #16]
 801db12:	9a02      	ldr	r2, [sp, #8]
 801db14:	43d6      	mvns	r6, r2
 801db16:	b2f6      	uxtb	r6, r6
 801db18:	9a01      	ldr	r2, [sp, #4]
 801db1a:	2a00      	cmp	r2, #0
 801db1c:	dc03      	bgt.n	801db26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801db1e:	9a05      	ldr	r2, [sp, #20]
 801db20:	2a00      	cmp	r2, #0
 801db22:	f340 8129 	ble.w	801dd78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801db26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801db28:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801db2c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801db30:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801db34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801db36:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	dd0e      	ble.n	801db5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801db3e:	1408      	asrs	r0, r1, #16
 801db40:	d405      	bmi.n	801db4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801db42:	4560      	cmp	r0, ip
 801db44:	da03      	bge.n	801db4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801db46:	1410      	asrs	r0, r2, #16
 801db48:	d401      	bmi.n	801db4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801db4a:	42b8      	cmp	r0, r7
 801db4c:	db07      	blt.n	801db5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801db4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801db50:	4401      	add	r1, r0
 801db52:	9814      	ldr	r0, [sp, #80]	; 0x50
 801db54:	3b01      	subs	r3, #1
 801db56:	4402      	add	r2, r0
 801db58:	3402      	adds	r4, #2
 801db5a:	e7ee      	b.n	801db3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801db5c:	d071      	beq.n	801dc42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801db5e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801db60:	1e58      	subs	r0, r3, #1
 801db62:	fb05 1500 	mla	r5, r5, r0, r1
 801db66:	142d      	asrs	r5, r5, #16
 801db68:	d45f      	bmi.n	801dc2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801db6a:	4565      	cmp	r5, ip
 801db6c:	da5d      	bge.n	801dc2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801db6e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801db70:	fb05 2000 	mla	r0, r5, r0, r2
 801db74:	1400      	asrs	r0, r0, #16
 801db76:	d458      	bmi.n	801dc2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801db78:	42b8      	cmp	r0, r7
 801db7a:	da56      	bge.n	801dc2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801db7c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801db80:	4699      	mov	r9, r3
 801db82:	46a2      	mov	sl, r4
 801db84:	f1b9 0f00 	cmp.w	r9, #0
 801db88:	dd57      	ble.n	801dc3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801db8a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801db8e:	9803      	ldr	r0, [sp, #12]
 801db90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801db94:	140d      	asrs	r5, r1, #16
 801db96:	fb07 000c 	mla	r0, r7, ip, r0
 801db9a:	f109 39ff 	add.w	r9, r9, #4294967295
 801db9e:	5d40      	ldrb	r0, [r0, r5]
 801dba0:	9d04      	ldr	r5, [sp, #16]
 801dba2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801dba6:	f8ba 5000 	ldrh.w	r5, [sl]
 801dbaa:	122f      	asrs	r7, r5, #8
 801dbac:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801dbb0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dbb4:	fb17 f706 	smulbb	r7, r7, r6
 801dbb8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801dbbc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dbc0:	00ed      	lsls	r5, r5, #3
 801dbc2:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801dbc6:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801dbca:	10c7      	asrs	r7, r0, #3
 801dbcc:	b2ed      	uxtb	r5, r5
 801dbce:	00c0      	lsls	r0, r0, #3
 801dbd0:	fb18 f806 	smulbb	r8, r8, r6
 801dbd4:	fb15 f506 	smulbb	r5, r5, r6
 801dbd8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dbdc:	b2c0      	uxtb	r0, r0
 801dbde:	fa1f fc8c 	uxth.w	ip, ip
 801dbe2:	fb07 870b 	mla	r7, r7, fp, r8
 801dbe6:	fb00 500b 	mla	r0, r0, fp, r5
 801dbea:	b280      	uxth	r0, r0
 801dbec:	b2bf      	uxth	r7, r7
 801dbee:	f10c 0501 	add.w	r5, ip, #1
 801dbf2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dbf6:	f107 0801 	add.w	r8, r7, #1
 801dbfa:	1c45      	adds	r5, r0, #1
 801dbfc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801dc00:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801dc04:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dc06:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dc0a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801dc0e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801dc12:	ea4c 0c05 	orr.w	ip, ip, r5
 801dc16:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801dc1a:	4401      	add	r1, r0
 801dc1c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801dc1e:	ea4c 0c08 	orr.w	ip, ip, r8
 801dc22:	f82a cb02 	strh.w	ip, [sl], #2
 801dc26:	4402      	add	r2, r0
 801dc28:	e7ac      	b.n	801db84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801dc2a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801dc2e:	f04f 0800 	mov.w	r8, #0
 801dc32:	eb03 0008 	add.w	r0, r3, r8
 801dc36:	2800      	cmp	r0, #0
 801dc38:	dc41      	bgt.n	801dcbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dc3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dc42:	9b01      	ldr	r3, [sp, #4]
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	f340 8097 	ble.w	801dd78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801dc4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dc4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dc52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dc56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dc5c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc60:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc64:	eef0 6a62 	vmov.f32	s13, s5
 801dc68:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dc70:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc74:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801dc78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc7c:	eef0 6a43 	vmov.f32	s13, s6
 801dc80:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc84:	ee12 2a90 	vmov	r2, s5
 801dc88:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc90:	ee13 2a10 	vmov	r2, s6
 801dc94:	9313      	str	r3, [sp, #76]	; 0x4c
 801dc96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc98:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc9c:	9314      	str	r3, [sp, #80]	; 0x50
 801dc9e:	9b01      	ldr	r3, [sp, #4]
 801dca0:	9a05      	ldr	r2, [sp, #20]
 801dca2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dca6:	3b01      	subs	r3, #1
 801dca8:	9301      	str	r3, [sp, #4]
 801dcaa:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801dcae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dcb0:	eeb0 3a67 	vmov.f32	s6, s15
 801dcb4:	bf08      	it	eq
 801dcb6:	4613      	moveq	r3, r2
 801dcb8:	eef0 2a47 	vmov.f32	s5, s14
 801dcbc:	e72c      	b.n	801db18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801dcbe:	140f      	asrs	r7, r1, #16
 801dcc0:	d453      	bmi.n	801dd6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801dcc2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dcc6:	42bd      	cmp	r5, r7
 801dcc8:	dd4f      	ble.n	801dd6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801dcca:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801dcce:	d44c      	bmi.n	801dd6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801dcd0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801dcd4:	4560      	cmp	r0, ip
 801dcd6:	dd48      	ble.n	801dd6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801dcd8:	9803      	ldr	r0, [sp, #12]
 801dcda:	b22d      	sxth	r5, r5
 801dcdc:	fb0c 0505 	mla	r5, ip, r5, r0
 801dce0:	5de8      	ldrb	r0, [r5, r7]
 801dce2:	9d04      	ldr	r5, [sp, #16]
 801dce4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801dce8:	f06f 0501 	mvn.w	r5, #1
 801dcec:	fb05 fb08 	mul.w	fp, r5, r8
 801dcf0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801dcf4:	f834 500b 	ldrh.w	r5, [r4, fp]
 801dcf8:	122f      	asrs	r7, r5, #8
 801dcfa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dcfe:	fb17 f706 	smulbb	r7, r7, r6
 801dd02:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801dd06:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dd0a:	00ed      	lsls	r5, r5, #3
 801dd0c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801dd10:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801dd14:	10c7      	asrs	r7, r0, #3
 801dd16:	b2ed      	uxtb	r5, r5
 801dd18:	00c0      	lsls	r0, r0, #3
 801dd1a:	fb19 f906 	smulbb	r9, r9, r6
 801dd1e:	fb15 f506 	smulbb	r5, r5, r6
 801dd22:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dd26:	b2c0      	uxtb	r0, r0
 801dd28:	fa1f fc8c 	uxth.w	ip, ip
 801dd2c:	fb07 970a 	mla	r7, r7, sl, r9
 801dd30:	fb00 500a 	mla	r0, r0, sl, r5
 801dd34:	b2bf      	uxth	r7, r7
 801dd36:	b280      	uxth	r0, r0
 801dd38:	f10c 0501 	add.w	r5, ip, #1
 801dd3c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dd40:	f107 0901 	add.w	r9, r7, #1
 801dd44:	1c45      	adds	r5, r0, #1
 801dd46:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801dd4a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801dd4e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dd52:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801dd56:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801dd5a:	ea4c 0c05 	orr.w	ip, ip, r5
 801dd5e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801dd62:	ea4c 0c09 	orr.w	ip, ip, r9
 801dd66:	f824 c00b 	strh.w	ip, [r4, fp]
 801dd6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dd6c:	4401      	add	r1, r0
 801dd6e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801dd70:	f108 38ff 	add.w	r8, r8, #4294967295
 801dd74:	4402      	add	r2, r0
 801dd76:	e75c      	b.n	801dc32 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801dd78:	b007      	add	sp, #28
 801dd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dd7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dd7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd82:	b085      	sub	sp, #20
 801dd84:	4693      	mov	fp, r2
 801dd86:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801dd88:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801dd8a:	6870      	ldr	r0, [r6, #4]
 801dd8c:	9100      	str	r1, [sp, #0]
 801dd8e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801dd92:	fb00 2404 	mla	r4, r0, r4, r2
 801dd96:	6832      	ldr	r2, [r6, #0]
 801dd98:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dd9c:	682a      	ldr	r2, [r5, #0]
 801dd9e:	9201      	str	r2, [sp, #4]
 801dda0:	686a      	ldr	r2, [r5, #4]
 801dda2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801dda6:	3204      	adds	r2, #4
 801dda8:	9202      	str	r2, [sp, #8]
 801ddaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ddae:	9a00      	ldr	r2, [sp, #0]
 801ddb0:	2a00      	cmp	r2, #0
 801ddb2:	dc03      	bgt.n	801ddbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ddb4:	f1bb 0f00 	cmp.w	fp, #0
 801ddb8:	f340 80a0 	ble.w	801defc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801ddbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ddbe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ddc2:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ddc6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ddca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ddcc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	dd0c      	ble.n	801ddee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ddd4:	1406      	asrs	r6, r0, #16
 801ddd6:	d405      	bmi.n	801dde4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ddd8:	454e      	cmp	r6, r9
 801ddda:	da03      	bge.n	801dde4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801dddc:	1416      	asrs	r6, r2, #16
 801ddde:	d401      	bmi.n	801dde4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801dde0:	4546      	cmp	r6, r8
 801dde2:	db05      	blt.n	801ddf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dde4:	4470      	add	r0, lr
 801dde6:	4462      	add	r2, ip
 801dde8:	3b01      	subs	r3, #1
 801ddea:	3402      	adds	r4, #2
 801ddec:	e7f0      	b.n	801ddd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ddee:	d00f      	beq.n	801de10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ddf0:	1e5e      	subs	r6, r3, #1
 801ddf2:	fb0e 0706 	mla	r7, lr, r6, r0
 801ddf6:	143f      	asrs	r7, r7, #16
 801ddf8:	d541      	bpl.n	801de7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801ddfa:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ddfe:	4698      	mov	r8, r3
 801de00:	9603      	str	r6, [sp, #12]
 801de02:	f1b8 0f00 	cmp.w	r8, #0
 801de06:	dc59      	bgt.n	801debc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801de08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de0c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801de10:	9b00      	ldr	r3, [sp, #0]
 801de12:	2b00      	cmp	r3, #0
 801de14:	dd72      	ble.n	801defc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801de16:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de1a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801de22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de24:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de2c:	eeb0 6a62 	vmov.f32	s12, s5
 801de30:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de38:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de3c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801de40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de44:	eeb0 6a43 	vmov.f32	s12, s6
 801de48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de4c:	ee12 2a90 	vmov	r2, s5
 801de50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de54:	fb92 fef3 	sdiv	lr, r2, r3
 801de58:	ee13 2a10 	vmov	r2, s6
 801de5c:	fb92 fcf3 	sdiv	ip, r2, r3
 801de60:	9b00      	ldr	r3, [sp, #0]
 801de62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de66:	3b01      	subs	r3, #1
 801de68:	9300      	str	r3, [sp, #0]
 801de6a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801de6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de70:	eeb0 3a67 	vmov.f32	s6, s15
 801de74:	bf08      	it	eq
 801de76:	465b      	moveq	r3, fp
 801de78:	eef0 2a47 	vmov.f32	s5, s14
 801de7c:	e797      	b.n	801ddae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801de7e:	454f      	cmp	r7, r9
 801de80:	dabb      	bge.n	801ddfa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de82:	fb0c 2606 	mla	r6, ip, r6, r2
 801de86:	1436      	asrs	r6, r6, #16
 801de88:	d4b7      	bmi.n	801ddfa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de8a:	4546      	cmp	r6, r8
 801de8c:	dab5      	bge.n	801ddfa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de8e:	461e      	mov	r6, r3
 801de90:	46a0      	mov	r8, r4
 801de92:	2e00      	cmp	r6, #0
 801de94:	ddb8      	ble.n	801de08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801de96:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801de9a:	9901      	ldr	r1, [sp, #4]
 801de9c:	1417      	asrs	r7, r2, #16
 801de9e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801dea2:	fb0a 1707 	mla	r7, sl, r7, r1
 801dea6:	9902      	ldr	r1, [sp, #8]
 801dea8:	f817 7009 	ldrb.w	r7, [r7, r9]
 801deac:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801deb0:	f828 7b02 	strh.w	r7, [r8], #2
 801deb4:	4470      	add	r0, lr
 801deb6:	4462      	add	r2, ip
 801deb8:	3e01      	subs	r6, #1
 801deba:	e7ea      	b.n	801de92 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801debc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801dec0:	d417      	bmi.n	801def2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801dec2:	68ae      	ldr	r6, [r5, #8]
 801dec4:	454e      	cmp	r6, r9
 801dec6:	dd14      	ble.n	801def2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801dec8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801decc:	d411      	bmi.n	801def2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801dece:	68ef      	ldr	r7, [r5, #12]
 801ded0:	4557      	cmp	r7, sl
 801ded2:	dd0e      	ble.n	801def2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ded4:	9f01      	ldr	r7, [sp, #4]
 801ded6:	b236      	sxth	r6, r6
 801ded8:	fb0a 7606 	mla	r6, sl, r6, r7
 801dedc:	9f02      	ldr	r7, [sp, #8]
 801dede:	f816 6009 	ldrb.w	r6, [r6, r9]
 801dee2:	f06f 0101 	mvn.w	r1, #1
 801dee6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801deea:	fb01 f608 	mul.w	r6, r1, r8
 801deee:	9903      	ldr	r1, [sp, #12]
 801def0:	538f      	strh	r7, [r1, r6]
 801def2:	4470      	add	r0, lr
 801def4:	4462      	add	r2, ip
 801def6:	f108 38ff 	add.w	r8, r8, #4294967295
 801defa:	e782      	b.n	801de02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801defc:	b005      	add	sp, #20
 801defe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801df02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df06:	b087      	sub	sp, #28
 801df08:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801df0a:	9205      	str	r2, [sp, #20]
 801df0c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801df10:	9203      	str	r2, [sp, #12]
 801df12:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801df16:	9102      	str	r1, [sp, #8]
 801df18:	6861      	ldr	r1, [r4, #4]
 801df1a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801df1e:	fb01 2000 	mla	r0, r1, r0, r2
 801df22:	6822      	ldr	r2, [r4, #0]
 801df24:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801df28:	9200      	str	r2, [sp, #0]
 801df2a:	f8dc 2000 	ldr.w	r2, [ip]
 801df2e:	9204      	str	r2, [sp, #16]
 801df30:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801df34:	3204      	adds	r2, #4
 801df36:	9201      	str	r2, [sp, #4]
 801df38:	9a03      	ldr	r2, [sp, #12]
 801df3a:	43d5      	mvns	r5, r2
 801df3c:	b2ed      	uxtb	r5, r5
 801df3e:	9a02      	ldr	r2, [sp, #8]
 801df40:	2a00      	cmp	r2, #0
 801df42:	dc03      	bgt.n	801df4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801df44:	9a05      	ldr	r2, [sp, #20]
 801df46:	2a00      	cmp	r2, #0
 801df48:	f340 812c 	ble.w	801e1a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801df4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801df4e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801df52:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801df56:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801df5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801df5c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801df60:	2b00      	cmp	r3, #0
 801df62:	dd10      	ble.n	801df86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801df64:	140c      	asrs	r4, r1, #16
 801df66:	d405      	bmi.n	801df74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801df68:	4574      	cmp	r4, lr
 801df6a:	da03      	bge.n	801df74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801df6c:	1414      	asrs	r4, r2, #16
 801df6e:	d401      	bmi.n	801df74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801df70:	42bc      	cmp	r4, r7
 801df72:	db09      	blt.n	801df88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801df74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801df76:	9800      	ldr	r0, [sp, #0]
 801df78:	4421      	add	r1, r4
 801df7a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801df7c:	3002      	adds	r0, #2
 801df7e:	4422      	add	r2, r4
 801df80:	3b01      	subs	r3, #1
 801df82:	9000      	str	r0, [sp, #0]
 801df84:	e7ec      	b.n	801df60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801df86:	d071      	beq.n	801e06c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801df88:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801df8a:	1e5c      	subs	r4, r3, #1
 801df8c:	fb06 1604 	mla	r6, r6, r4, r1
 801df90:	1436      	asrs	r6, r6, #16
 801df92:	d45d      	bmi.n	801e050 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801df94:	4576      	cmp	r6, lr
 801df96:	da5b      	bge.n	801e050 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801df98:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801df9a:	fb06 2404 	mla	r4, r6, r4, r2
 801df9e:	1424      	asrs	r4, r4, #16
 801dfa0:	d456      	bmi.n	801e050 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dfa2:	42bc      	cmp	r4, r7
 801dfa4:	da54      	bge.n	801e050 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dfa6:	f8dd 9000 	ldr.w	r9, [sp]
 801dfaa:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801dfae:	4698      	mov	r8, r3
 801dfb0:	f1b8 0f00 	cmp.w	r8, #0
 801dfb4:	dd54      	ble.n	801e060 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801dfb6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801dfba:	9804      	ldr	r0, [sp, #16]
 801dfbc:	1414      	asrs	r4, r2, #16
 801dfbe:	fb07 0404 	mla	r4, r7, r4, r0
 801dfc2:	140e      	asrs	r6, r1, #16
 801dfc4:	9801      	ldr	r0, [sp, #4]
 801dfc6:	f814 e006 	ldrb.w	lr, [r4, r6]
 801dfca:	f8b9 4000 	ldrh.w	r4, [r9]
 801dfce:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801dfd2:	eb00 0b0e 	add.w	fp, r0, lr
 801dfd6:	1227      	asrs	r7, r4, #8
 801dfd8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801dfdc:	f89b b001 	ldrb.w	fp, [fp, #1]
 801dfe0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801dfe4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dfe6:	fb16 f60a 	smulbb	r6, r6, sl
 801dfea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dfee:	fb07 6705 	mla	r7, r7, r5, r6
 801dff2:	10e6      	asrs	r6, r4, #3
 801dff4:	00e4      	lsls	r4, r4, #3
 801dff6:	b2e4      	uxtb	r4, r4
 801dff8:	fb1b fb0a 	smulbb	fp, fp, sl
 801dffc:	fb14 f405 	smulbb	r4, r4, r5
 801e000:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e004:	b2bf      	uxth	r7, r7
 801e006:	fb06 b605 	mla	r6, r6, r5, fp
 801e00a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e00e:	b2b6      	uxth	r6, r6
 801e010:	fa1f fe8e 	uxth.w	lr, lr
 801e014:	1c7c      	adds	r4, r7, #1
 801e016:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e01a:	f106 0b01 	add.w	fp, r6, #1
 801e01e:	f10e 0401 	add.w	r4, lr, #1
 801e022:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e026:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e02a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e02e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e032:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e036:	4327      	orrs	r7, r4
 801e038:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e03c:	4401      	add	r1, r0
 801e03e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e040:	ea47 070b 	orr.w	r7, r7, fp
 801e044:	f829 7b02 	strh.w	r7, [r9], #2
 801e048:	4402      	add	r2, r0
 801e04a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e04e:	e7af      	b.n	801dfb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e050:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e054:	f04f 0e00 	mov.w	lr, #0
 801e058:	eb03 040e 	add.w	r4, r3, lr
 801e05c:	2c00      	cmp	r4, #0
 801e05e:	dc43      	bgt.n	801e0e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e060:	9a00      	ldr	r2, [sp, #0]
 801e062:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e066:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e06a:	9300      	str	r3, [sp, #0]
 801e06c:	9b02      	ldr	r3, [sp, #8]
 801e06e:	2b00      	cmp	r3, #0
 801e070:	f340 8098 	ble.w	801e1a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e074:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e07c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e080:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e082:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e086:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e08a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e08e:	eef0 6a62 	vmov.f32	s13, s5
 801e092:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e096:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e09a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e09e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e0a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e0a6:	eef0 6a43 	vmov.f32	s13, s6
 801e0aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e0ae:	ee12 2a90 	vmov	r2, s5
 801e0b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e0b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0ba:	ee13 2a10 	vmov	r2, s6
 801e0be:	9313      	str	r3, [sp, #76]	; 0x4c
 801e0c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e0c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0c6:	9314      	str	r3, [sp, #80]	; 0x50
 801e0c8:	9b02      	ldr	r3, [sp, #8]
 801e0ca:	9a05      	ldr	r2, [sp, #20]
 801e0cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e0d0:	3b01      	subs	r3, #1
 801e0d2:	9302      	str	r3, [sp, #8]
 801e0d4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e0d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e0da:	eeb0 3a67 	vmov.f32	s6, s15
 801e0de:	bf08      	it	eq
 801e0e0:	4613      	moveq	r3, r2
 801e0e2:	eef0 2a47 	vmov.f32	s5, s14
 801e0e6:	e72a      	b.n	801df3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e0e8:	140f      	asrs	r7, r1, #16
 801e0ea:	d454      	bmi.n	801e196 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e0ec:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e0f0:	42be      	cmp	r6, r7
 801e0f2:	dd50      	ble.n	801e196 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e0f4:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e0f8:	d44d      	bmi.n	801e196 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e0fa:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e0fe:	4544      	cmp	r4, r8
 801e100:	dd49      	ble.n	801e196 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e102:	9c04      	ldr	r4, [sp, #16]
 801e104:	b236      	sxth	r6, r6
 801e106:	fb08 4606 	mla	r6, r8, r6, r4
 801e10a:	f06f 0001 	mvn.w	r0, #1
 801e10e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e112:	9c01      	ldr	r4, [sp, #4]
 801e114:	fb00 fa0e 	mul.w	sl, r0, lr
 801e118:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e11c:	9800      	ldr	r0, [sp, #0]
 801e11e:	eb04 0b08 	add.w	fp, r4, r8
 801e122:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e126:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e12a:	9801      	ldr	r0, [sp, #4]
 801e12c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e130:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e134:	9800      	ldr	r0, [sp, #0]
 801e136:	1227      	asrs	r7, r4, #8
 801e138:	fb16 f609 	smulbb	r6, r6, r9
 801e13c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e140:	fb07 6705 	mla	r7, r7, r5, r6
 801e144:	10e6      	asrs	r6, r4, #3
 801e146:	00e4      	lsls	r4, r4, #3
 801e148:	b2e4      	uxtb	r4, r4
 801e14a:	fb1b fb09 	smulbb	fp, fp, r9
 801e14e:	fb14 f405 	smulbb	r4, r4, r5
 801e152:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e156:	b2bf      	uxth	r7, r7
 801e158:	fb06 b605 	mla	r6, r6, r5, fp
 801e15c:	fb08 4809 	mla	r8, r8, r9, r4
 801e160:	b2b6      	uxth	r6, r6
 801e162:	fa1f f888 	uxth.w	r8, r8
 801e166:	1c7c      	adds	r4, r7, #1
 801e168:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e16c:	f106 0b01 	add.w	fp, r6, #1
 801e170:	f108 0401 	add.w	r4, r8, #1
 801e174:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e178:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e17c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e180:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e184:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e188:	4327      	orrs	r7, r4
 801e18a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e18e:	ea47 070b 	orr.w	r7, r7, fp
 801e192:	f820 700a 	strh.w	r7, [r0, sl]
 801e196:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e198:	4401      	add	r1, r0
 801e19a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e19c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e1a0:	4402      	add	r2, r0
 801e1a2:	e759      	b.n	801e058 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e1a4:	b007      	add	sp, #28
 801e1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e1ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1b0:	b085      	sub	sp, #20
 801e1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1b6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e1b8:	9203      	str	r2, [sp, #12]
 801e1ba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e1be:	6870      	ldr	r0, [r6, #4]
 801e1c0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e1c2:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801e1c6:	686f      	ldr	r7, [r5, #4]
 801e1c8:	9101      	str	r1, [sp, #4]
 801e1ca:	fb00 2404 	mla	r4, r0, r4, r2
 801e1ce:	6832      	ldr	r2, [r6, #0]
 801e1d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e1d4:	682a      	ldr	r2, [r5, #0]
 801e1d6:	9202      	str	r2, [sp, #8]
 801e1d8:	3704      	adds	r7, #4
 801e1da:	9a01      	ldr	r2, [sp, #4]
 801e1dc:	2a00      	cmp	r2, #0
 801e1de:	dc03      	bgt.n	801e1e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e1e0:	9a03      	ldr	r2, [sp, #12]
 801e1e2:	2a00      	cmp	r2, #0
 801e1e4:	f340 80cc 	ble.w	801e380 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e1e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e1ea:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e1ee:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e1f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e1f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e1f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	dd0d      	ble.n	801e21c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e200:	1406      	asrs	r6, r0, #16
 801e202:	d405      	bmi.n	801e210 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e204:	454e      	cmp	r6, r9
 801e206:	da03      	bge.n	801e210 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e208:	1416      	asrs	r6, r2, #16
 801e20a:	d401      	bmi.n	801e210 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e20c:	4546      	cmp	r6, r8
 801e20e:	db06      	blt.n	801e21e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e210:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e212:	4460      	add	r0, ip
 801e214:	4432      	add	r2, r6
 801e216:	3b01      	subs	r3, #1
 801e218:	3402      	adds	r4, #2
 801e21a:	e7ef      	b.n	801e1fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e21c:	d00f      	beq.n	801e23e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e21e:	1e5e      	subs	r6, r3, #1
 801e220:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e224:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e228:	d543      	bpl.n	801e2b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e22a:	4698      	mov	r8, r3
 801e22c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e230:	f1b8 0f00 	cmp.w	r8, #0
 801e234:	dc71      	bgt.n	801e31a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e236:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e23a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e23e:	9b01      	ldr	r3, [sp, #4]
 801e240:	2b00      	cmp	r3, #0
 801e242:	f340 809d 	ble.w	801e380 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e246:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e24a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e24e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e254:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e258:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e25c:	eeb0 6a62 	vmov.f32	s12, s5
 801e260:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e264:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e268:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e26c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e270:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e274:	eeb0 6a43 	vmov.f32	s12, s6
 801e278:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e27c:	ee12 2a90 	vmov	r2, s5
 801e280:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e284:	fb92 fcf3 	sdiv	ip, r2, r3
 801e288:	ee13 2a10 	vmov	r2, s6
 801e28c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e290:	9312      	str	r3, [sp, #72]	; 0x48
 801e292:	9b01      	ldr	r3, [sp, #4]
 801e294:	9a03      	ldr	r2, [sp, #12]
 801e296:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e29a:	3b01      	subs	r3, #1
 801e29c:	9301      	str	r3, [sp, #4]
 801e29e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2a4:	eeb0 3a67 	vmov.f32	s6, s15
 801e2a8:	bf08      	it	eq
 801e2aa:	4613      	moveq	r3, r2
 801e2ac:	eef0 2a47 	vmov.f32	s5, s14
 801e2b0:	e793      	b.n	801e1da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e2b2:	45ce      	cmp	lr, r9
 801e2b4:	dab9      	bge.n	801e22a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e2b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e2b8:	fb01 2606 	mla	r6, r1, r6, r2
 801e2bc:	1436      	asrs	r6, r6, #16
 801e2be:	d4b4      	bmi.n	801e22a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e2c0:	4546      	cmp	r6, r8
 801e2c2:	dab2      	bge.n	801e22a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e2c4:	4698      	mov	r8, r3
 801e2c6:	46a2      	mov	sl, r4
 801e2c8:	f1b8 0f00 	cmp.w	r8, #0
 801e2cc:	ddb3      	ble.n	801e236 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e2ce:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e2d2:	9902      	ldr	r1, [sp, #8]
 801e2d4:	1416      	asrs	r6, r2, #16
 801e2d6:	fb09 1606 	mla	r6, r9, r6, r1
 801e2da:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e2de:	492a      	ldr	r1, [pc, #168]	; (801e388 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e2e0:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e2e4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e2e8:	eb07 0b0e 	add.w	fp, r7, lr
 801e2ec:	4460      	add	r0, ip
 801e2ee:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801e2f2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e2f6:	00f6      	lsls	r6, r6, #3
 801e2f8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801e2fc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e300:	ea49 0606 	orr.w	r6, r9, r6
 801e304:	f817 900e 	ldrb.w	r9, [r7, lr]
 801e308:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e30a:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801e30e:	f82a 6b02 	strh.w	r6, [sl], #2
 801e312:	440a      	add	r2, r1
 801e314:	f108 38ff 	add.w	r8, r8, #4294967295
 801e318:	e7d6      	b.n	801e2c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e31a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e31e:	d429      	bmi.n	801e374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e320:	68ae      	ldr	r6, [r5, #8]
 801e322:	454e      	cmp	r6, r9
 801e324:	dd26      	ble.n	801e374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e326:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e32a:	d423      	bmi.n	801e374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e32c:	68e9      	ldr	r1, [r5, #12]
 801e32e:	4559      	cmp	r1, fp
 801e330:	dd20      	ble.n	801e374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e332:	9902      	ldr	r1, [sp, #8]
 801e334:	fa0f fe86 	sxth.w	lr, r6
 801e338:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801e33c:	f06f 0101 	mvn.w	r1, #1
 801e340:	f81e e009 	ldrb.w	lr, [lr, r9]
 801e344:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e348:	eb07 060e 	add.w	r6, r7, lr
 801e34c:	fb01 f908 	mul.w	r9, r1, r8
 801e350:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e354:	7876      	ldrb	r6, [r6, #1]
 801e356:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801e35a:	00f6      	lsls	r6, r6, #3
 801e35c:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801e360:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e364:	ea4b 0606 	orr.w	r6, fp, r6
 801e368:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801e36c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801e370:	f82a 6009 	strh.w	r6, [sl, r9]
 801e374:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e376:	4460      	add	r0, ip
 801e378:	440a      	add	r2, r1
 801e37a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e37e:	e757      	b.n	801e230 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e380:	b005      	add	sp, #20
 801e382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e386:	bf00      	nop
 801e388:	fffff800 	.word	0xfffff800

0801e38c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e390:	b087      	sub	sp, #28
 801e392:	468b      	mov	fp, r1
 801e394:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e396:	9204      	str	r2, [sp, #16]
 801e398:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e39c:	9205      	str	r2, [sp, #20]
 801e39e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e3a2:	6841      	ldr	r1, [r0, #4]
 801e3a4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e3a8:	fb01 2404 	mla	r4, r1, r4, r2
 801e3ac:	6802      	ldr	r2, [r0, #0]
 801e3ae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e3b2:	f8dc 2000 	ldr.w	r2, [ip]
 801e3b6:	9201      	str	r2, [sp, #4]
 801e3b8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e3bc:	3204      	adds	r2, #4
 801e3be:	9202      	str	r2, [sp, #8]
 801e3c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e3c4:	f1bb 0f00 	cmp.w	fp, #0
 801e3c8:	dc03      	bgt.n	801e3d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e3ca:	9a04      	ldr	r2, [sp, #16]
 801e3cc:	2a00      	cmp	r2, #0
 801e3ce:	f340 8138 	ble.w	801e642 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e3d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e3d4:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e3d8:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801e3dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e3e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e3e2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e3e6:	2b00      	cmp	r3, #0
 801e3e8:	dd0e      	ble.n	801e408 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e3ea:	1402      	asrs	r2, r0, #16
 801e3ec:	d405      	bmi.n	801e3fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e3ee:	42ba      	cmp	r2, r7
 801e3f0:	da03      	bge.n	801e3fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e3f2:	140a      	asrs	r2, r1, #16
 801e3f4:	d401      	bmi.n	801e3fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e3f6:	42b2      	cmp	r2, r6
 801e3f8:	db07      	blt.n	801e40a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e3fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e3fc:	4410      	add	r0, r2
 801e3fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e400:	3b01      	subs	r3, #1
 801e402:	4411      	add	r1, r2
 801e404:	3402      	adds	r4, #2
 801e406:	e7ee      	b.n	801e3e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e408:	d019      	beq.n	801e43e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801e40a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e40c:	1e5a      	subs	r2, r3, #1
 801e40e:	fb05 0502 	mla	r5, r5, r2, r0
 801e412:	142d      	asrs	r5, r5, #16
 801e414:	d409      	bmi.n	801e42a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e416:	42bd      	cmp	r5, r7
 801e418:	da07      	bge.n	801e42a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e41a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e41c:	fb05 1202 	mla	r2, r5, r2, r1
 801e420:	1412      	asrs	r2, r2, #16
 801e422:	d402      	bmi.n	801e42a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e424:	42b2      	cmp	r2, r6
 801e426:	f2c0 80ac 	blt.w	801e582 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801e42a:	f04f 0e00 	mov.w	lr, #0
 801e42e:	eb03 020e 	add.w	r2, r3, lr
 801e432:	2a00      	cmp	r2, #0
 801e434:	dc3e      	bgt.n	801e4b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e43a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e43e:	f1bb 0f00 	cmp.w	fp, #0
 801e442:	f340 80fe 	ble.w	801e642 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e446:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e44a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e44e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e452:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e454:	f1bb 0b01 	subs.w	fp, fp, #1
 801e458:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e45c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e460:	eeb0 6a62 	vmov.f32	s12, s5
 801e464:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e468:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e46c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e470:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e474:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e478:	eeb0 6a43 	vmov.f32	s12, s6
 801e47c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e480:	ee12 2a90 	vmov	r2, s5
 801e484:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e488:	fb92 f3f3 	sdiv	r3, r2, r3
 801e48c:	ee13 2a10 	vmov	r2, s6
 801e490:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e494:	9313      	str	r3, [sp, #76]	; 0x4c
 801e496:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e498:	fb92 f3f3 	sdiv	r3, r2, r3
 801e49c:	9a04      	ldr	r2, [sp, #16]
 801e49e:	9314      	str	r3, [sp, #80]	; 0x50
 801e4a0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e4a6:	eeb0 3a67 	vmov.f32	s6, s15
 801e4aa:	bf08      	it	eq
 801e4ac:	4613      	moveq	r3, r2
 801e4ae:	eef0 2a47 	vmov.f32	s5, s14
 801e4b2:	e787      	b.n	801e3c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e4b4:	1406      	asrs	r6, r0, #16
 801e4b6:	d45d      	bmi.n	801e574 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e4b8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801e4bc:	42b5      	cmp	r5, r6
 801e4be:	dd59      	ble.n	801e574 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e4c0:	140f      	asrs	r7, r1, #16
 801e4c2:	d457      	bmi.n	801e574 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e4c4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e4c8:	42ba      	cmp	r2, r7
 801e4ca:	dd53      	ble.n	801e574 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e4cc:	9a01      	ldr	r2, [sp, #4]
 801e4ce:	b22d      	sxth	r5, r5
 801e4d0:	fb07 2505 	mla	r5, r7, r5, r2
 801e4d4:	5daa      	ldrb	r2, [r5, r6]
 801e4d6:	9d02      	ldr	r5, [sp, #8]
 801e4d8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e4dc:	0e2e      	lsrs	r6, r5, #24
 801e4de:	d049      	beq.n	801e574 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e4e0:	f06f 0201 	mvn.w	r2, #1
 801e4e4:	fb02 f20e 	mul.w	r2, r2, lr
 801e4e8:	9203      	str	r2, [sp, #12]
 801e4ea:	f834 8002 	ldrh.w	r8, [r4, r2]
 801e4ee:	9a05      	ldr	r2, [sp, #20]
 801e4f0:	4356      	muls	r6, r2
 801e4f2:	1c72      	adds	r2, r6, #1
 801e4f4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e4f8:	1212      	asrs	r2, r2, #8
 801e4fa:	fa1f f982 	uxth.w	r9, r2
 801e4fe:	ea4f 2728 	mov.w	r7, r8, asr #8
 801e502:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e506:	43d2      	mvns	r2, r2
 801e508:	b2d2      	uxtb	r2, r2
 801e50a:	fb16 f609 	smulbb	r6, r6, r9
 801e50e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e512:	fb07 6702 	mla	r7, r7, r2, r6
 801e516:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e51a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e51e:	b2ed      	uxtb	r5, r5
 801e520:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e524:	fa5f f888 	uxtb.w	r8, r8
 801e528:	fb15 f509 	smulbb	r5, r5, r9
 801e52c:	fb08 5502 	mla	r5, r8, r2, r5
 801e530:	b2bf      	uxth	r7, r7
 801e532:	fb1a fa09 	smulbb	sl, sl, r9
 801e536:	b2ad      	uxth	r5, r5
 801e538:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e53c:	fb06 a602 	mla	r6, r6, r2, sl
 801e540:	1c7a      	adds	r2, r7, #1
 801e542:	f105 0a01 	add.w	sl, r5, #1
 801e546:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e54a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e54e:	b2b6      	uxth	r6, r6
 801e550:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e554:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e558:	ea47 070a 	orr.w	r7, r7, sl
 801e55c:	f106 0a01 	add.w	sl, r6, #1
 801e560:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e564:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e568:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e56c:	9a03      	ldr	r2, [sp, #12]
 801e56e:	ea47 070a 	orr.w	r7, r7, sl
 801e572:	52a7      	strh	r7, [r4, r2]
 801e574:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e576:	4410      	add	r0, r2
 801e578:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e57a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e57e:	4411      	add	r1, r2
 801e580:	e755      	b.n	801e42e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e582:	f04f 0800 	mov.w	r8, #0
 801e586:	eba3 0208 	sub.w	r2, r3, r8
 801e58a:	2a00      	cmp	r2, #0
 801e58c:	f77f af53 	ble.w	801e436 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e590:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801e594:	9f01      	ldr	r7, [sp, #4]
 801e596:	140a      	asrs	r2, r1, #16
 801e598:	1405      	asrs	r5, r0, #16
 801e59a:	fb06 7202 	mla	r2, r6, r2, r7
 801e59e:	5d52      	ldrb	r2, [r2, r5]
 801e5a0:	9d02      	ldr	r5, [sp, #8]
 801e5a2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e5a6:	0e2e      	lsrs	r6, r5, #24
 801e5a8:	d044      	beq.n	801e634 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801e5aa:	9a05      	ldr	r2, [sp, #20]
 801e5ac:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801e5b0:	4356      	muls	r6, r2
 801e5b2:	1c72      	adds	r2, r6, #1
 801e5b4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e5b8:	1212      	asrs	r2, r2, #8
 801e5ba:	fa1f f982 	uxth.w	r9, r2
 801e5be:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e5c2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e5c6:	43d2      	mvns	r2, r2
 801e5c8:	b2d2      	uxtb	r2, r2
 801e5ca:	fb16 f609 	smulbb	r6, r6, r9
 801e5ce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e5d2:	fb07 6702 	mla	r7, r7, r2, r6
 801e5d6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e5da:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e5de:	b2ed      	uxtb	r5, r5
 801e5e0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e5e4:	fa5f fe8e 	uxtb.w	lr, lr
 801e5e8:	fb15 f509 	smulbb	r5, r5, r9
 801e5ec:	fb0e 5502 	mla	r5, lr, r2, r5
 801e5f0:	b2bf      	uxth	r7, r7
 801e5f2:	fb1a fa09 	smulbb	sl, sl, r9
 801e5f6:	b2ad      	uxth	r5, r5
 801e5f8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e5fc:	fb06 a602 	mla	r6, r6, r2, sl
 801e600:	1c7a      	adds	r2, r7, #1
 801e602:	f105 0a01 	add.w	sl, r5, #1
 801e606:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e60a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e60e:	b2b6      	uxth	r6, r6
 801e610:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e614:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e618:	ea47 070a 	orr.w	r7, r7, sl
 801e61c:	f106 0a01 	add.w	sl, r6, #1
 801e620:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e624:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e628:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e62c:	ea47 070a 	orr.w	r7, r7, sl
 801e630:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801e634:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e636:	4410      	add	r0, r2
 801e638:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e63a:	f108 0801 	add.w	r8, r8, #1
 801e63e:	4411      	add	r1, r2
 801e640:	e7a1      	b.n	801e586 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e642:	b007      	add	sp, #28
 801e644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e648 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e64c:	b085      	sub	sp, #20
 801e64e:	468b      	mov	fp, r1
 801e650:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e652:	9203      	str	r2, [sp, #12]
 801e654:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e658:	6841      	ldr	r1, [r0, #4]
 801e65a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801e65e:	fb01 2404 	mla	r4, r1, r4, r2
 801e662:	6802      	ldr	r2, [r0, #0]
 801e664:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e668:	f8de 2000 	ldr.w	r2, [lr]
 801e66c:	9200      	str	r2, [sp, #0]
 801e66e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e672:	3204      	adds	r2, #4
 801e674:	9201      	str	r2, [sp, #4]
 801e676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e67a:	f1bb 0f00 	cmp.w	fp, #0
 801e67e:	dc03      	bgt.n	801e688 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e680:	9a03      	ldr	r2, [sp, #12]
 801e682:	2a00      	cmp	r2, #0
 801e684:	f340 8153 	ble.w	801e92e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801e688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e68a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e68e:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801e692:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e696:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e698:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	dd0e      	ble.n	801e6be <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e6a0:	1408      	asrs	r0, r1, #16
 801e6a2:	d405      	bmi.n	801e6b0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e6a4:	42b8      	cmp	r0, r7
 801e6a6:	da03      	bge.n	801e6b0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e6a8:	1410      	asrs	r0, r2, #16
 801e6aa:	d401      	bmi.n	801e6b0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e6ac:	42b0      	cmp	r0, r6
 801e6ae:	db07      	blt.n	801e6c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e6b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e6b2:	4401      	add	r1, r0
 801e6b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e6b6:	3b01      	subs	r3, #1
 801e6b8:	4402      	add	r2, r0
 801e6ba:	3402      	adds	r4, #2
 801e6bc:	e7ee      	b.n	801e69c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e6be:	d017      	beq.n	801e6f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e6c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e6c2:	1e58      	subs	r0, r3, #1
 801e6c4:	fb05 1500 	mla	r5, r5, r0, r1
 801e6c8:	142d      	asrs	r5, r5, #16
 801e6ca:	d409      	bmi.n	801e6e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e6cc:	42bd      	cmp	r5, r7
 801e6ce:	da07      	bge.n	801e6e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e6d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e6d2:	fb05 2000 	mla	r0, r5, r0, r2
 801e6d6:	1400      	asrs	r0, r0, #16
 801e6d8:	d402      	bmi.n	801e6e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e6da:	42b0      	cmp	r0, r6
 801e6dc:	f2c0 80bc 	blt.w	801e858 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e6e0:	2600      	movs	r6, #0
 801e6e2:	1998      	adds	r0, r3, r6
 801e6e4:	2800      	cmp	r0, #0
 801e6e6:	dc3e      	bgt.n	801e766 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e6e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e6ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e6f0:	f1bb 0f00 	cmp.w	fp, #0
 801e6f4:	f340 811b 	ble.w	801e92e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801e6f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e6fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e700:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e704:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e706:	f1bb 0b01 	subs.w	fp, fp, #1
 801e70a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e70e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e712:	eeb0 6a62 	vmov.f32	s12, s5
 801e716:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e71a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e71e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e722:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e726:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e72a:	eeb0 6a43 	vmov.f32	s12, s6
 801e72e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e732:	ee12 2a90 	vmov	r2, s5
 801e736:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e73a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e73e:	ee13 2a10 	vmov	r2, s6
 801e742:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e746:	9311      	str	r3, [sp, #68]	; 0x44
 801e748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e74a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e74e:	9a03      	ldr	r2, [sp, #12]
 801e750:	9312      	str	r3, [sp, #72]	; 0x48
 801e752:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e758:	eeb0 3a67 	vmov.f32	s6, s15
 801e75c:	bf08      	it	eq
 801e75e:	4613      	moveq	r3, r2
 801e760:	eef0 2a47 	vmov.f32	s5, s14
 801e764:	e789      	b.n	801e67a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e766:	140f      	asrs	r7, r1, #16
 801e768:	d45e      	bmi.n	801e828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e76a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e76e:	42bd      	cmp	r5, r7
 801e770:	dd5a      	ble.n	801e828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e772:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e776:	d457      	bmi.n	801e828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e778:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e77c:	4560      	cmp	r0, ip
 801e77e:	dd53      	ble.n	801e828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e780:	9800      	ldr	r0, [sp, #0]
 801e782:	b22d      	sxth	r5, r5
 801e784:	fb0c 0505 	mla	r5, ip, r5, r0
 801e788:	5de8      	ldrb	r0, [r5, r7]
 801e78a:	9d01      	ldr	r5, [sp, #4]
 801e78c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801e790:	0e07      	lsrs	r7, r0, #24
 801e792:	2fff      	cmp	r7, #255	; 0xff
 801e794:	d04e      	beq.n	801e834 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e796:	b2fd      	uxtb	r5, r7
 801e798:	2f00      	cmp	r7, #0
 801e79a:	d045      	beq.n	801e828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e79c:	f06f 0701 	mvn.w	r7, #1
 801e7a0:	4377      	muls	r7, r6
 801e7a2:	fa1f f985 	uxth.w	r9, r5
 801e7a6:	f834 8007 	ldrh.w	r8, [r4, r7]
 801e7aa:	9702      	str	r7, [sp, #8]
 801e7ac:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e7b0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801e7b4:	43ed      	mvns	r5, r5
 801e7b6:	b2ed      	uxtb	r5, r5
 801e7b8:	fb17 f709 	smulbb	r7, r7, r9
 801e7bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e7c0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801e7c4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e7c8:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801e7cc:	b2c0      	uxtb	r0, r0
 801e7ce:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e7d2:	fa5f f888 	uxtb.w	r8, r8
 801e7d6:	fb10 f009 	smulbb	r0, r0, r9
 801e7da:	fb08 0005 	mla	r0, r8, r5, r0
 801e7de:	b280      	uxth	r0, r0
 801e7e0:	fa1f fc8c 	uxth.w	ip, ip
 801e7e4:	fb1a fa09 	smulbb	sl, sl, r9
 801e7e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e7ec:	fb07 a705 	mla	r7, r7, r5, sl
 801e7f0:	f100 0a01 	add.w	sl, r0, #1
 801e7f4:	f10c 0501 	add.w	r5, ip, #1
 801e7f8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801e7fc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e800:	b2bf      	uxth	r7, r7
 801e802:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e806:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e80a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e80e:	f107 0a01 	add.w	sl, r7, #1
 801e812:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e816:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e81a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e81e:	9802      	ldr	r0, [sp, #8]
 801e820:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e824:	f824 c000 	strh.w	ip, [r4, r0]
 801e828:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e82a:	4401      	add	r1, r0
 801e82c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e82e:	3e01      	subs	r6, #1
 801e830:	4402      	add	r2, r0
 801e832:	e756      	b.n	801e6e2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e834:	f06f 0501 	mvn.w	r5, #1
 801e838:	fb05 f706 	mul.w	r7, r5, r6
 801e83c:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801e840:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801e844:	0945      	lsrs	r5, r0, #5
 801e846:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e84a:	ea4c 0505 	orr.w	r5, ip, r5
 801e84e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e852:	4305      	orrs	r5, r0
 801e854:	53e5      	strh	r5, [r4, r7]
 801e856:	e7e7      	b.n	801e828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e858:	f04f 0800 	mov.w	r8, #0
 801e85c:	eba3 0008 	sub.w	r0, r3, r8
 801e860:	2800      	cmp	r0, #0
 801e862:	f77f af41 	ble.w	801e6e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e866:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e86a:	9f00      	ldr	r7, [sp, #0]
 801e86c:	1410      	asrs	r0, r2, #16
 801e86e:	140d      	asrs	r5, r1, #16
 801e870:	fb06 7000 	mla	r0, r6, r0, r7
 801e874:	5d40      	ldrb	r0, [r0, r5]
 801e876:	9d01      	ldr	r5, [sp, #4]
 801e878:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801e87c:	0e06      	lsrs	r6, r0, #24
 801e87e:	2eff      	cmp	r6, #255	; 0xff
 801e880:	d048      	beq.n	801e914 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801e882:	b2f5      	uxtb	r5, r6
 801e884:	2e00      	cmp	r6, #0
 801e886:	d03e      	beq.n	801e906 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801e888:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801e88c:	fa1f f985 	uxth.w	r9, r5
 801e890:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e894:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801e898:	43ed      	mvns	r5, r5
 801e89a:	b2ed      	uxtb	r5, r5
 801e89c:	fb16 f609 	smulbb	r6, r6, r9
 801e8a0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e8a4:	fb07 6705 	mla	r7, r7, r5, r6
 801e8a8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e8ac:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801e8b0:	b2c0      	uxtb	r0, r0
 801e8b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e8b6:	fa5f fc8c 	uxtb.w	ip, ip
 801e8ba:	fb10 f009 	smulbb	r0, r0, r9
 801e8be:	fb0c 0005 	mla	r0, ip, r5, r0
 801e8c2:	b2bf      	uxth	r7, r7
 801e8c4:	fb1a fa09 	smulbb	sl, sl, r9
 801e8c8:	b280      	uxth	r0, r0
 801e8ca:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e8ce:	fb06 a605 	mla	r6, r6, r5, sl
 801e8d2:	1c7d      	adds	r5, r7, #1
 801e8d4:	f100 0a01 	add.w	sl, r0, #1
 801e8d8:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801e8dc:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801e8e0:	b2b6      	uxth	r6, r6
 801e8e2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e8e6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e8ea:	ea47 070a 	orr.w	r7, r7, sl
 801e8ee:	f106 0a01 	add.w	sl, r6, #1
 801e8f2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e8f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e8fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e8fe:	ea47 070a 	orr.w	r7, r7, sl
 801e902:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801e906:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e908:	4401      	add	r1, r0
 801e90a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e90c:	f108 0801 	add.w	r8, r8, #1
 801e910:	4402      	add	r2, r0
 801e912:	e7a3      	b.n	801e85c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e914:	4d07      	ldr	r5, [pc, #28]	; (801e934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801e916:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801e91a:	0945      	lsrs	r5, r0, #5
 801e91c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e920:	4335      	orrs	r5, r6
 801e922:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e926:	4305      	orrs	r5, r0
 801e928:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801e92c:	e7eb      	b.n	801e906 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801e92e:	b005      	add	sp, #20
 801e930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e934:	fffff800 	.word	0xfffff800

0801e938 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e93c:	b087      	sub	sp, #28
 801e93e:	468b      	mov	fp, r1
 801e940:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e942:	9204      	str	r2, [sp, #16]
 801e944:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e948:	9205      	str	r2, [sp, #20]
 801e94a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e94e:	6861      	ldr	r1, [r4, #4]
 801e950:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e954:	fb01 2000 	mla	r0, r1, r0, r2
 801e958:	6822      	ldr	r2, [r4, #0]
 801e95a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e95e:	f8de 2000 	ldr.w	r2, [lr]
 801e962:	9201      	str	r2, [sp, #4]
 801e964:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e968:	9202      	str	r2, [sp, #8]
 801e96a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e96e:	f1bb 0f00 	cmp.w	fp, #0
 801e972:	dc03      	bgt.n	801e97c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e974:	9a04      	ldr	r2, [sp, #16]
 801e976:	2a00      	cmp	r2, #0
 801e978:	f340 8142 	ble.w	801ec00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e97c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e97e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e982:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801e986:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e98a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e98c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e990:	2b00      	cmp	r3, #0
 801e992:	dd0e      	ble.n	801e9b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e994:	140c      	asrs	r4, r1, #16
 801e996:	d405      	bmi.n	801e9a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e998:	42bc      	cmp	r4, r7
 801e99a:	da03      	bge.n	801e9a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e99c:	1414      	asrs	r4, r2, #16
 801e99e:	d401      	bmi.n	801e9a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e9a0:	42b4      	cmp	r4, r6
 801e9a2:	db07      	blt.n	801e9b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e9a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e9a6:	4421      	add	r1, r4
 801e9a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e9aa:	3b01      	subs	r3, #1
 801e9ac:	4422      	add	r2, r4
 801e9ae:	3002      	adds	r0, #2
 801e9b0:	e7ee      	b.n	801e990 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e9b2:	d019      	beq.n	801e9e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e9b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e9b6:	1e5c      	subs	r4, r3, #1
 801e9b8:	fb05 1504 	mla	r5, r5, r4, r1
 801e9bc:	142d      	asrs	r5, r5, #16
 801e9be:	d409      	bmi.n	801e9d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e9c0:	42bd      	cmp	r5, r7
 801e9c2:	da07      	bge.n	801e9d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e9c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e9c6:	fb05 2404 	mla	r4, r5, r4, r2
 801e9ca:	1424      	asrs	r4, r4, #16
 801e9cc:	d402      	bmi.n	801e9d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e9ce:	42b4      	cmp	r4, r6
 801e9d0:	f2c0 80b1 	blt.w	801eb36 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801e9d4:	f04f 0800 	mov.w	r8, #0
 801e9d8:	eb03 0408 	add.w	r4, r3, r8
 801e9dc:	2c00      	cmp	r4, #0
 801e9de:	dc3e      	bgt.n	801ea5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e9e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e9e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e9e8:	f1bb 0f00 	cmp.w	fp, #0
 801e9ec:	f340 8108 	ble.w	801ec00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e9f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e9f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e9f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e9fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9fe:	f1bb 0b01 	subs.w	fp, fp, #1
 801ea02:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea0a:	eeb0 6a62 	vmov.f32	s12, s5
 801ea0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea16:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea1a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ea1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea22:	eeb0 6a43 	vmov.f32	s12, s6
 801ea26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea2a:	ee12 2a90 	vmov	r2, s5
 801ea2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea36:	ee13 2a10 	vmov	r2, s6
 801ea3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea3e:	9313      	str	r3, [sp, #76]	; 0x4c
 801ea40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea46:	9a04      	ldr	r2, [sp, #16]
 801ea48:	9314      	str	r3, [sp, #80]	; 0x50
 801ea4a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ea4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea50:	eeb0 3a67 	vmov.f32	s6, s15
 801ea54:	bf08      	it	eq
 801ea56:	4613      	moveq	r3, r2
 801ea58:	eef0 2a47 	vmov.f32	s5, s14
 801ea5c:	e787      	b.n	801e96e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ea5e:	140e      	asrs	r6, r1, #16
 801ea60:	d462      	bmi.n	801eb28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ea62:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ea66:	42b5      	cmp	r5, r6
 801ea68:	dd5e      	ble.n	801eb28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ea6a:	1417      	asrs	r7, r2, #16
 801ea6c:	d45c      	bmi.n	801eb28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ea6e:	f8de 400c 	ldr.w	r4, [lr, #12]
 801ea72:	42bc      	cmp	r4, r7
 801ea74:	dd58      	ble.n	801eb28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ea76:	b22d      	sxth	r5, r5
 801ea78:	fb07 6505 	mla	r5, r7, r5, r6
 801ea7c:	9c02      	ldr	r4, [sp, #8]
 801ea7e:	5d66      	ldrb	r6, [r4, r5]
 801ea80:	2e00      	cmp	r6, #0
 801ea82:	d051      	beq.n	801eb28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ea84:	9c01      	ldr	r4, [sp, #4]
 801ea86:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801ea8a:	f06f 0401 	mvn.w	r4, #1
 801ea8e:	fb04 f408 	mul.w	r4, r4, r8
 801ea92:	9403      	str	r4, [sp, #12]
 801ea94:	5b05      	ldrh	r5, [r0, r4]
 801ea96:	9c05      	ldr	r4, [sp, #20]
 801ea98:	4366      	muls	r6, r4
 801ea9a:	1c74      	adds	r4, r6, #1
 801ea9c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801eaa0:	1224      	asrs	r4, r4, #8
 801eaa2:	b2a7      	uxth	r7, r4
 801eaa4:	122e      	asrs	r6, r5, #8
 801eaa6:	43e4      	mvns	r4, r4
 801eaa8:	b2e4      	uxtb	r4, r4
 801eaaa:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801eaae:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801eab2:	fb16 f604 	smulbb	r6, r6, r4
 801eab6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801eaba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eabe:	00ed      	lsls	r5, r5, #3
 801eac0:	fb0c 6c07 	mla	ip, ip, r7, r6
 801eac4:	b2ed      	uxtb	r5, r5
 801eac6:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801eaca:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801eace:	fb15 f504 	smulbb	r5, r5, r4
 801ead2:	fa5f f989 	uxtb.w	r9, r9
 801ead6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801eada:	fb09 5507 	mla	r5, r9, r7, r5
 801eade:	fb1a fa04 	smulbb	sl, sl, r4
 801eae2:	fa1f fc8c 	uxth.w	ip, ip
 801eae6:	b2ad      	uxth	r5, r5
 801eae8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eaec:	fb06 a607 	mla	r6, r6, r7, sl
 801eaf0:	f10c 0401 	add.w	r4, ip, #1
 801eaf4:	f105 0a01 	add.w	sl, r5, #1
 801eaf8:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801eafc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eb00:	b2b6      	uxth	r6, r6
 801eb02:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eb06:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801eb0a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801eb0e:	f106 0a01 	add.w	sl, r6, #1
 801eb12:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eb16:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eb1a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eb1e:	9c03      	ldr	r4, [sp, #12]
 801eb20:	ea4c 0c0a 	orr.w	ip, ip, sl
 801eb24:	f820 c004 	strh.w	ip, [r0, r4]
 801eb28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eb2a:	4421      	add	r1, r4
 801eb2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eb2e:	f108 38ff 	add.w	r8, r8, #4294967295
 801eb32:	4422      	add	r2, r4
 801eb34:	e750      	b.n	801e9d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eb36:	f04f 0900 	mov.w	r9, #0
 801eb3a:	eba3 0409 	sub.w	r4, r3, r9
 801eb3e:	2c00      	cmp	r4, #0
 801eb40:	f77f af4e 	ble.w	801e9e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801eb44:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801eb48:	140d      	asrs	r5, r1, #16
 801eb4a:	1414      	asrs	r4, r2, #16
 801eb4c:	fb06 5404 	mla	r4, r6, r4, r5
 801eb50:	9d02      	ldr	r5, [sp, #8]
 801eb52:	5d2e      	ldrb	r6, [r5, r4]
 801eb54:	2e00      	cmp	r6, #0
 801eb56:	d04c      	beq.n	801ebf2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801eb58:	9d01      	ldr	r5, [sp, #4]
 801eb5a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801eb5e:	9c05      	ldr	r4, [sp, #20]
 801eb60:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801eb64:	4366      	muls	r6, r4
 801eb66:	1c74      	adds	r4, r6, #1
 801eb68:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801eb6c:	1224      	asrs	r4, r4, #8
 801eb6e:	b2a7      	uxth	r7, r4
 801eb70:	122e      	asrs	r6, r5, #8
 801eb72:	43e4      	mvns	r4, r4
 801eb74:	b2e4      	uxtb	r4, r4
 801eb76:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801eb7a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801eb7e:	fb16 f604 	smulbb	r6, r6, r4
 801eb82:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801eb86:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eb8a:	00ed      	lsls	r5, r5, #3
 801eb8c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801eb90:	b2ed      	uxtb	r5, r5
 801eb92:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801eb96:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801eb9a:	fb15 f504 	smulbb	r5, r5, r4
 801eb9e:	fa5f f888 	uxtb.w	r8, r8
 801eba2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801eba6:	fb08 5507 	mla	r5, r8, r7, r5
 801ebaa:	fb1a fa04 	smulbb	sl, sl, r4
 801ebae:	fa1f fc8c 	uxth.w	ip, ip
 801ebb2:	b2ad      	uxth	r5, r5
 801ebb4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ebb8:	fb06 a607 	mla	r6, r6, r7, sl
 801ebbc:	f10c 0401 	add.w	r4, ip, #1
 801ebc0:	f105 0a01 	add.w	sl, r5, #1
 801ebc4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ebc8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ebcc:	b2b6      	uxth	r6, r6
 801ebce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ebd2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ebd6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ebda:	f106 0a01 	add.w	sl, r6, #1
 801ebde:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ebe2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ebe6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ebea:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ebee:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801ebf2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ebf4:	4421      	add	r1, r4
 801ebf6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ebf8:	f109 0901 	add.w	r9, r9, #1
 801ebfc:	4422      	add	r2, r4
 801ebfe:	e79c      	b.n	801eb3a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ec00:	b007      	add	sp, #28
 801ec02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec06 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec0a:	b085      	sub	sp, #20
 801ec0c:	468b      	mov	fp, r1
 801ec0e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ec10:	9203      	str	r2, [sp, #12]
 801ec12:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801ec16:	6861      	ldr	r1, [r4, #4]
 801ec18:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801ec1c:	fb01 2000 	mla	r0, r1, r0, r2
 801ec20:	6822      	ldr	r2, [r4, #0]
 801ec22:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ec26:	f8d8 2000 	ldr.w	r2, [r8]
 801ec2a:	9200      	str	r2, [sp, #0]
 801ec2c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ec30:	9201      	str	r2, [sp, #4]
 801ec32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec36:	f1bb 0f00 	cmp.w	fp, #0
 801ec3a:	dc03      	bgt.n	801ec44 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ec3c:	9a03      	ldr	r2, [sp, #12]
 801ec3e:	2a00      	cmp	r2, #0
 801ec40:	f340 8146 	ble.w	801eed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ec44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec46:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ec4a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ec4e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ec52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ec54:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	dd0e      	ble.n	801ec7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ec5c:	140c      	asrs	r4, r1, #16
 801ec5e:	d405      	bmi.n	801ec6c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ec60:	42bc      	cmp	r4, r7
 801ec62:	da03      	bge.n	801ec6c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ec64:	1414      	asrs	r4, r2, #16
 801ec66:	d401      	bmi.n	801ec6c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ec68:	42b4      	cmp	r4, r6
 801ec6a:	db07      	blt.n	801ec7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ec6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ec6e:	4421      	add	r1, r4
 801ec70:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ec72:	3b01      	subs	r3, #1
 801ec74:	4422      	add	r2, r4
 801ec76:	3002      	adds	r0, #2
 801ec78:	e7ee      	b.n	801ec58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ec7a:	d017      	beq.n	801ecac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ec7c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ec7e:	1e5c      	subs	r4, r3, #1
 801ec80:	fb05 1504 	mla	r5, r5, r4, r1
 801ec84:	142d      	asrs	r5, r5, #16
 801ec86:	d409      	bmi.n	801ec9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ec88:	42bd      	cmp	r5, r7
 801ec8a:	da07      	bge.n	801ec9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ec8c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ec8e:	fb05 2404 	mla	r4, r5, r4, r2
 801ec92:	1424      	asrs	r4, r4, #16
 801ec94:	d402      	bmi.n	801ec9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ec96:	42b4      	cmp	r4, r6
 801ec98:	f2c0 80b3 	blt.w	801ee02 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ec9c:	2600      	movs	r6, #0
 801ec9e:	199c      	adds	r4, r3, r6
 801eca0:	2c00      	cmp	r4, #0
 801eca2:	dc3e      	bgt.n	801ed22 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801eca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eca8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ecac:	f1bb 0f00 	cmp.w	fp, #0
 801ecb0:	f340 810e 	ble.w	801eed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ecb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ecb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ecbc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ecc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecc2:	f1bb 0b01 	subs.w	fp, fp, #1
 801ecc6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ecca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ecce:	eeb0 6a62 	vmov.f32	s12, s5
 801ecd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ecd6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecda:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecde:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ece2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ece6:	eeb0 6a43 	vmov.f32	s12, s6
 801ecea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ecee:	ee12 2a90 	vmov	r2, s5
 801ecf2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecf6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecfa:	ee13 2a10 	vmov	r2, s6
 801ecfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed02:	9311      	str	r3, [sp, #68]	; 0x44
 801ed04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed06:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed0a:	9a03      	ldr	r2, [sp, #12]
 801ed0c:	9312      	str	r3, [sp, #72]	; 0x48
 801ed0e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ed12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed14:	eeb0 3a67 	vmov.f32	s6, s15
 801ed18:	bf08      	it	eq
 801ed1a:	4613      	moveq	r3, r2
 801ed1c:	eef0 2a47 	vmov.f32	s5, s14
 801ed20:	e789      	b.n	801ec36 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ed22:	140f      	asrs	r7, r1, #16
 801ed24:	d45f      	bmi.n	801ede6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ed26:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ed2a:	42bd      	cmp	r5, r7
 801ed2c:	dd5b      	ble.n	801ede6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ed2e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ed32:	d458      	bmi.n	801ede6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ed34:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ed38:	4564      	cmp	r4, ip
 801ed3a:	dd54      	ble.n	801ede6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ed3c:	b22d      	sxth	r5, r5
 801ed3e:	fb0c 7505 	mla	r5, ip, r5, r7
 801ed42:	9c01      	ldr	r4, [sp, #4]
 801ed44:	5d64      	ldrb	r4, [r4, r5]
 801ed46:	2cff      	cmp	r4, #255	; 0xff
 801ed48:	d053      	beq.n	801edf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801ed4a:	2c00      	cmp	r4, #0
 801ed4c:	d04b      	beq.n	801ede6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ed4e:	9f00      	ldr	r7, [sp, #0]
 801ed50:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801ed54:	f06f 0501 	mvn.w	r5, #1
 801ed58:	4375      	muls	r5, r6
 801ed5a:	9502      	str	r5, [sp, #8]
 801ed5c:	5b45      	ldrh	r5, [r0, r5]
 801ed5e:	fa1f fc84 	uxth.w	ip, r4
 801ed62:	122f      	asrs	r7, r5, #8
 801ed64:	43e4      	mvns	r4, r4
 801ed66:	b2e4      	uxtb	r4, r4
 801ed68:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801ed6c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ed70:	fb17 f704 	smulbb	r7, r7, r4
 801ed74:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ed78:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ed7c:	00ed      	lsls	r5, r5, #3
 801ed7e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801ed82:	b2ed      	uxtb	r5, r5
 801ed84:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801ed88:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ed8c:	fb15 f504 	smulbb	r5, r5, r4
 801ed90:	fa5f f989 	uxtb.w	r9, r9
 801ed94:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ed98:	fb09 550c 	mla	r5, r9, ip, r5
 801ed9c:	fb1a fa04 	smulbb	sl, sl, r4
 801eda0:	fa1f fe8e 	uxth.w	lr, lr
 801eda4:	b2ad      	uxth	r5, r5
 801eda6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801edaa:	fb07 a70c 	mla	r7, r7, ip, sl
 801edae:	f10e 0401 	add.w	r4, lr, #1
 801edb2:	f105 0a01 	add.w	sl, r5, #1
 801edb6:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801edba:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801edbe:	b2bf      	uxth	r7, r7
 801edc0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801edc4:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801edc8:	ea4e 0e0a 	orr.w	lr, lr, sl
 801edcc:	f107 0a01 	add.w	sl, r7, #1
 801edd0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801edd4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801edd8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eddc:	9c02      	ldr	r4, [sp, #8]
 801edde:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ede2:	f820 e004 	strh.w	lr, [r0, r4]
 801ede6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ede8:	4421      	add	r1, r4
 801edea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801edec:	3e01      	subs	r6, #1
 801edee:	4422      	add	r2, r4
 801edf0:	e755      	b.n	801ec9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801edf2:	9c00      	ldr	r4, [sp, #0]
 801edf4:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801edf8:	f06f 0401 	mvn.w	r4, #1
 801edfc:	4374      	muls	r4, r6
 801edfe:	5305      	strh	r5, [r0, r4]
 801ee00:	e7f1      	b.n	801ede6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ee02:	f04f 0900 	mov.w	r9, #0
 801ee06:	eba3 0409 	sub.w	r4, r3, r9
 801ee0a:	2c00      	cmp	r4, #0
 801ee0c:	f77f af4a 	ble.w	801eca4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ee10:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ee14:	1414      	asrs	r4, r2, #16
 801ee16:	140d      	asrs	r5, r1, #16
 801ee18:	fb06 5504 	mla	r5, r6, r4, r5
 801ee1c:	9c01      	ldr	r4, [sp, #4]
 801ee1e:	5d64      	ldrb	r4, [r4, r5]
 801ee20:	2cff      	cmp	r4, #255	; 0xff
 801ee22:	d04f      	beq.n	801eec4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801ee24:	2c00      	cmp	r4, #0
 801ee26:	d046      	beq.n	801eeb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee28:	9e00      	ldr	r6, [sp, #0]
 801ee2a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801ee2e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ee32:	b2a7      	uxth	r7, r4
 801ee34:	122e      	asrs	r6, r5, #8
 801ee36:	43e4      	mvns	r4, r4
 801ee38:	b2e4      	uxtb	r4, r4
 801ee3a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ee3e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ee42:	fb16 f604 	smulbb	r6, r6, r4
 801ee46:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ee4a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ee4e:	00ed      	lsls	r5, r5, #3
 801ee50:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ee54:	b2ed      	uxtb	r5, r5
 801ee56:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ee5a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ee5e:	fb15 f504 	smulbb	r5, r5, r4
 801ee62:	fa5f fe8e 	uxtb.w	lr, lr
 801ee66:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ee6a:	fb0e 5507 	mla	r5, lr, r7, r5
 801ee6e:	fb1a fa04 	smulbb	sl, sl, r4
 801ee72:	fa1f fc8c 	uxth.w	ip, ip
 801ee76:	b2ad      	uxth	r5, r5
 801ee78:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ee7c:	fb06 a607 	mla	r6, r6, r7, sl
 801ee80:	f10c 0401 	add.w	r4, ip, #1
 801ee84:	f105 0a01 	add.w	sl, r5, #1
 801ee88:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ee8c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ee90:	b2b6      	uxth	r6, r6
 801ee92:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ee96:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ee9a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ee9e:	f106 0a01 	add.w	sl, r6, #1
 801eea2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eea6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eeaa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eeae:	ea4c 0c0a 	orr.w	ip, ip, sl
 801eeb2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801eeb6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eeb8:	4421      	add	r1, r4
 801eeba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eebc:	f109 0901 	add.w	r9, r9, #1
 801eec0:	4422      	add	r2, r4
 801eec2:	e7a0      	b.n	801ee06 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801eec4:	9c00      	ldr	r4, [sp, #0]
 801eec6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801eeca:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801eece:	e7f2      	b.n	801eeb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801eed0:	b005      	add	sp, #20
 801eed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eed6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeda:	b085      	sub	sp, #20
 801eedc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801eede:	9203      	str	r2, [sp, #12]
 801eee0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801eee4:	9201      	str	r2, [sp, #4]
 801eee6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801eeea:	9100      	str	r1, [sp, #0]
 801eeec:	6841      	ldr	r1, [r0, #4]
 801eeee:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801eef2:	fb01 2404 	mla	r4, r1, r4, r2
 801eef6:	6802      	ldr	r2, [r0, #0]
 801eef8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eefc:	f8de 2000 	ldr.w	r2, [lr]
 801ef00:	9202      	str	r2, [sp, #8]
 801ef02:	9a01      	ldr	r2, [sp, #4]
 801ef04:	43d6      	mvns	r6, r2
 801ef06:	b2f6      	uxtb	r6, r6
 801ef08:	9a00      	ldr	r2, [sp, #0]
 801ef0a:	2a00      	cmp	r2, #0
 801ef0c:	dc03      	bgt.n	801ef16 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ef0e:	9a03      	ldr	r2, [sp, #12]
 801ef10:	2a00      	cmp	r2, #0
 801ef12:	f340 8124 	ble.w	801f15e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ef16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef18:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801ef1c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ef20:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ef24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef26:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	dd0e      	ble.n	801ef4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ef2e:	1408      	asrs	r0, r1, #16
 801ef30:	d405      	bmi.n	801ef3e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ef32:	4560      	cmp	r0, ip
 801ef34:	da03      	bge.n	801ef3e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ef36:	1410      	asrs	r0, r2, #16
 801ef38:	d401      	bmi.n	801ef3e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ef3a:	42b8      	cmp	r0, r7
 801ef3c:	db07      	blt.n	801ef4e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ef3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ef40:	4401      	add	r1, r0
 801ef42:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ef44:	3b01      	subs	r3, #1
 801ef46:	4402      	add	r2, r0
 801ef48:	3402      	adds	r4, #2
 801ef4a:	e7ee      	b.n	801ef2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ef4c:	d06e      	beq.n	801f02c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ef4e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ef50:	1e58      	subs	r0, r3, #1
 801ef52:	fb05 1500 	mla	r5, r5, r0, r1
 801ef56:	142d      	asrs	r5, r5, #16
 801ef58:	d45c      	bmi.n	801f014 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ef5a:	4565      	cmp	r5, ip
 801ef5c:	da5a      	bge.n	801f014 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ef5e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ef60:	fb05 2000 	mla	r0, r5, r0, r2
 801ef64:	1400      	asrs	r0, r0, #16
 801ef66:	d455      	bmi.n	801f014 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ef68:	42b8      	cmp	r0, r7
 801ef6a:	da53      	bge.n	801f014 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ef6c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801ef70:	4699      	mov	r9, r3
 801ef72:	46a2      	mov	sl, r4
 801ef74:	f1b9 0f00 	cmp.w	r9, #0
 801ef78:	dd54      	ble.n	801f024 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ef7a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ef7e:	140d      	asrs	r5, r1, #16
 801ef80:	1410      	asrs	r0, r2, #16
 801ef82:	fb07 5000 	mla	r0, r7, r0, r5
 801ef86:	9d02      	ldr	r5, [sp, #8]
 801ef88:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ef8c:	f8ba 5000 	ldrh.w	r5, [sl]
 801ef90:	122f      	asrs	r7, r5, #8
 801ef92:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ef96:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ef9a:	fb17 f706 	smulbb	r7, r7, r6
 801ef9e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801efa2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801efa6:	00ed      	lsls	r5, r5, #3
 801efa8:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801efac:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801efb0:	10c7      	asrs	r7, r0, #3
 801efb2:	b2ed      	uxtb	r5, r5
 801efb4:	00c0      	lsls	r0, r0, #3
 801efb6:	fb18 f806 	smulbb	r8, r8, r6
 801efba:	fb15 f506 	smulbb	r5, r5, r6
 801efbe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801efc2:	b2c0      	uxtb	r0, r0
 801efc4:	fa1f fc8c 	uxth.w	ip, ip
 801efc8:	fb07 870b 	mla	r7, r7, fp, r8
 801efcc:	fb00 500b 	mla	r0, r0, fp, r5
 801efd0:	b280      	uxth	r0, r0
 801efd2:	b2bf      	uxth	r7, r7
 801efd4:	f10c 0501 	add.w	r5, ip, #1
 801efd8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801efdc:	f107 0801 	add.w	r8, r7, #1
 801efe0:	1c45      	adds	r5, r0, #1
 801efe2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801efe6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801efea:	9811      	ldr	r0, [sp, #68]	; 0x44
 801efec:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801eff0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801eff4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801eff8:	ea4c 0c05 	orr.w	ip, ip, r5
 801effc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f000:	4401      	add	r1, r0
 801f002:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f004:	ea4c 0c08 	orr.w	ip, ip, r8
 801f008:	f82a cb02 	strh.w	ip, [sl], #2
 801f00c:	4402      	add	r2, r0
 801f00e:	f109 39ff 	add.w	r9, r9, #4294967295
 801f012:	e7af      	b.n	801ef74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f014:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f018:	f04f 0800 	mov.w	r8, #0
 801f01c:	eb03 0008 	add.w	r0, r3, r8
 801f020:	2800      	cmp	r0, #0
 801f022:	dc41      	bgt.n	801f0a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f028:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f02c:	9b00      	ldr	r3, [sp, #0]
 801f02e:	2b00      	cmp	r3, #0
 801f030:	f340 8095 	ble.w	801f15e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f034:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f03c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f042:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f046:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f04a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f04e:	eef0 6a62 	vmov.f32	s13, s5
 801f052:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f056:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f05a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f05e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f062:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f066:	eef0 6a43 	vmov.f32	s13, s6
 801f06a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f06e:	ee12 2a90 	vmov	r2, s5
 801f072:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f076:	fb92 f3f3 	sdiv	r3, r2, r3
 801f07a:	ee13 2a10 	vmov	r2, s6
 801f07e:	9311      	str	r3, [sp, #68]	; 0x44
 801f080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f082:	fb92 f3f3 	sdiv	r3, r2, r3
 801f086:	9312      	str	r3, [sp, #72]	; 0x48
 801f088:	9b00      	ldr	r3, [sp, #0]
 801f08a:	9a03      	ldr	r2, [sp, #12]
 801f08c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f090:	3b01      	subs	r3, #1
 801f092:	9300      	str	r3, [sp, #0]
 801f094:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f09a:	eeb0 3a67 	vmov.f32	s6, s15
 801f09e:	bf08      	it	eq
 801f0a0:	4613      	moveq	r3, r2
 801f0a2:	eef0 2a47 	vmov.f32	s5, s14
 801f0a6:	e72f      	b.n	801ef08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f0a8:	140f      	asrs	r7, r1, #16
 801f0aa:	d451      	bmi.n	801f150 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f0ac:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f0b0:	42bd      	cmp	r5, r7
 801f0b2:	dd4d      	ble.n	801f150 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f0b4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f0b8:	d44a      	bmi.n	801f150 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f0ba:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f0be:	4560      	cmp	r0, ip
 801f0c0:	dd46      	ble.n	801f150 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f0c2:	b22d      	sxth	r5, r5
 801f0c4:	fb0c 7505 	mla	r5, ip, r5, r7
 801f0c8:	9802      	ldr	r0, [sp, #8]
 801f0ca:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f0ce:	f06f 0501 	mvn.w	r5, #1
 801f0d2:	fb05 fb08 	mul.w	fp, r5, r8
 801f0d6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f0da:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f0de:	122f      	asrs	r7, r5, #8
 801f0e0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f0e4:	fb17 f706 	smulbb	r7, r7, r6
 801f0e8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f0ec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f0f0:	00ed      	lsls	r5, r5, #3
 801f0f2:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f0f6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f0fa:	10c7      	asrs	r7, r0, #3
 801f0fc:	b2ed      	uxtb	r5, r5
 801f0fe:	00c0      	lsls	r0, r0, #3
 801f100:	fb19 f906 	smulbb	r9, r9, r6
 801f104:	fb15 f506 	smulbb	r5, r5, r6
 801f108:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f10c:	b2c0      	uxtb	r0, r0
 801f10e:	fa1f fc8c 	uxth.w	ip, ip
 801f112:	fb07 970a 	mla	r7, r7, sl, r9
 801f116:	fb00 500a 	mla	r0, r0, sl, r5
 801f11a:	b2bf      	uxth	r7, r7
 801f11c:	b280      	uxth	r0, r0
 801f11e:	f10c 0501 	add.w	r5, ip, #1
 801f122:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f126:	f107 0901 	add.w	r9, r7, #1
 801f12a:	1c45      	adds	r5, r0, #1
 801f12c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f130:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f134:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f138:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f13c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f140:	ea4c 0c05 	orr.w	ip, ip, r5
 801f144:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f148:	ea4c 0c09 	orr.w	ip, ip, r9
 801f14c:	f824 c00b 	strh.w	ip, [r4, fp]
 801f150:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f152:	4401      	add	r1, r0
 801f154:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f156:	f108 38ff 	add.w	r8, r8, #4294967295
 801f15a:	4402      	add	r2, r0
 801f15c:	e75e      	b.n	801f01c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f15e:	b005      	add	sp, #20
 801f160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f164 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f168:	b085      	sub	sp, #20
 801f16a:	4693      	mov	fp, r2
 801f16c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f16e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f170:	6870      	ldr	r0, [r6, #4]
 801f172:	9101      	str	r1, [sp, #4]
 801f174:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f178:	fb00 2404 	mla	r4, r0, r4, r2
 801f17c:	6832      	ldr	r2, [r6, #0]
 801f17e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f182:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f186:	682a      	ldr	r2, [r5, #0]
 801f188:	9202      	str	r2, [sp, #8]
 801f18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f18e:	9a01      	ldr	r2, [sp, #4]
 801f190:	2a00      	cmp	r2, #0
 801f192:	dc03      	bgt.n	801f19c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f194:	f1bb 0f00 	cmp.w	fp, #0
 801f198:	f340 809a 	ble.w	801f2d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f19c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f19e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f1a2:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f1a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f1aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f1ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	dd0c      	ble.n	801f1ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f1b4:	1406      	asrs	r6, r0, #16
 801f1b6:	d405      	bmi.n	801f1c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f1b8:	454e      	cmp	r6, r9
 801f1ba:	da03      	bge.n	801f1c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f1bc:	1416      	asrs	r6, r2, #16
 801f1be:	d401      	bmi.n	801f1c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f1c0:	4546      	cmp	r6, r8
 801f1c2:	db05      	blt.n	801f1d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f1c4:	4470      	add	r0, lr
 801f1c6:	4462      	add	r2, ip
 801f1c8:	3b01      	subs	r3, #1
 801f1ca:	3402      	adds	r4, #2
 801f1cc:	e7f0      	b.n	801f1b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f1ce:	d00f      	beq.n	801f1f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f1d0:	1e5e      	subs	r6, r3, #1
 801f1d2:	fb0e 0706 	mla	r7, lr, r6, r0
 801f1d6:	143f      	asrs	r7, r7, #16
 801f1d8:	d541      	bpl.n	801f25e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f1da:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f1de:	4698      	mov	r8, r3
 801f1e0:	9603      	str	r6, [sp, #12]
 801f1e2:	f1b8 0f00 	cmp.w	r8, #0
 801f1e6:	dc56      	bgt.n	801f296 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f1e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f1f0:	9b01      	ldr	r3, [sp, #4]
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	dd6c      	ble.n	801f2d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f1f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f204:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f208:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f20c:	eeb0 6a62 	vmov.f32	s12, s5
 801f210:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f214:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f218:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f21c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f220:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f224:	eeb0 6a43 	vmov.f32	s12, s6
 801f228:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f22c:	ee12 2a90 	vmov	r2, s5
 801f230:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f234:	fb92 fef3 	sdiv	lr, r2, r3
 801f238:	ee13 2a10 	vmov	r2, s6
 801f23c:	fb92 fcf3 	sdiv	ip, r2, r3
 801f240:	9b01      	ldr	r3, [sp, #4]
 801f242:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f246:	3b01      	subs	r3, #1
 801f248:	9301      	str	r3, [sp, #4]
 801f24a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f24e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f250:	eeb0 3a67 	vmov.f32	s6, s15
 801f254:	bf08      	it	eq
 801f256:	465b      	moveq	r3, fp
 801f258:	eef0 2a47 	vmov.f32	s5, s14
 801f25c:	e797      	b.n	801f18e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f25e:	454f      	cmp	r7, r9
 801f260:	dabb      	bge.n	801f1da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f262:	fb0c 2606 	mla	r6, ip, r6, r2
 801f266:	1436      	asrs	r6, r6, #16
 801f268:	d4b7      	bmi.n	801f1da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f26a:	4546      	cmp	r6, r8
 801f26c:	dab5      	bge.n	801f1da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f26e:	461e      	mov	r6, r3
 801f270:	46a0      	mov	r8, r4
 801f272:	2e00      	cmp	r6, #0
 801f274:	ddb8      	ble.n	801f1e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f276:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f27a:	9902      	ldr	r1, [sp, #8]
 801f27c:	1417      	asrs	r7, r2, #16
 801f27e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f282:	fb0a 9707 	mla	r7, sl, r7, r9
 801f286:	4470      	add	r0, lr
 801f288:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f28c:	f828 7b02 	strh.w	r7, [r8], #2
 801f290:	4462      	add	r2, ip
 801f292:	3e01      	subs	r6, #1
 801f294:	e7ed      	b.n	801f272 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f296:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f29a:	d414      	bmi.n	801f2c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f29c:	68ae      	ldr	r6, [r5, #8]
 801f29e:	454e      	cmp	r6, r9
 801f2a0:	dd11      	ble.n	801f2c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f2a2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f2a6:	d40e      	bmi.n	801f2c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f2a8:	68ef      	ldr	r7, [r5, #12]
 801f2aa:	4557      	cmp	r7, sl
 801f2ac:	dd0b      	ble.n	801f2c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f2ae:	b236      	sxth	r6, r6
 801f2b0:	fb0a 9606 	mla	r6, sl, r6, r9
 801f2b4:	9f02      	ldr	r7, [sp, #8]
 801f2b6:	f06f 0101 	mvn.w	r1, #1
 801f2ba:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f2be:	fb01 f608 	mul.w	r6, r1, r8
 801f2c2:	9903      	ldr	r1, [sp, #12]
 801f2c4:	538f      	strh	r7, [r1, r6]
 801f2c6:	4470      	add	r0, lr
 801f2c8:	4462      	add	r2, ip
 801f2ca:	f108 38ff 	add.w	r8, r8, #4294967295
 801f2ce:	e788      	b.n	801f1e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f2d0:	b005      	add	sp, #20
 801f2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f2d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2da:	b085      	sub	sp, #20
 801f2dc:	468b      	mov	fp, r1
 801f2de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f2e0:	9202      	str	r2, [sp, #8]
 801f2e2:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f2e6:	9203      	str	r2, [sp, #12]
 801f2e8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f2ec:	6841      	ldr	r1, [r0, #4]
 801f2ee:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f2f2:	fb01 2404 	mla	r4, r1, r4, r2
 801f2f6:	6802      	ldr	r2, [r0, #0]
 801f2f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f2fc:	f8d8 2000 	ldr.w	r2, [r8]
 801f300:	9200      	str	r2, [sp, #0]
 801f302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f306:	f1bb 0f00 	cmp.w	fp, #0
 801f30a:	dc03      	bgt.n	801f314 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f30c:	9a02      	ldr	r2, [sp, #8]
 801f30e:	2a00      	cmp	r2, #0
 801f310:	f340 8134 	ble.w	801f57c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f314:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f316:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f31a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f31e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f322:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f324:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f328:	2b00      	cmp	r3, #0
 801f32a:	dd0e      	ble.n	801f34a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f32c:	1402      	asrs	r2, r0, #16
 801f32e:	d405      	bmi.n	801f33c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f330:	42ba      	cmp	r2, r7
 801f332:	da03      	bge.n	801f33c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f334:	140a      	asrs	r2, r1, #16
 801f336:	d401      	bmi.n	801f33c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f338:	42b2      	cmp	r2, r6
 801f33a:	db07      	blt.n	801f34c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f33c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f33e:	4410      	add	r0, r2
 801f340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f342:	3b01      	subs	r3, #1
 801f344:	4411      	add	r1, r2
 801f346:	3402      	adds	r4, #2
 801f348:	e7ee      	b.n	801f328 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f34a:	d019      	beq.n	801f380 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f34c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f34e:	1e5a      	subs	r2, r3, #1
 801f350:	fb05 0502 	mla	r5, r5, r2, r0
 801f354:	142d      	asrs	r5, r5, #16
 801f356:	d409      	bmi.n	801f36c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f358:	42bd      	cmp	r5, r7
 801f35a:	da07      	bge.n	801f36c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f35c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f35e:	fb05 1202 	mla	r2, r5, r2, r1
 801f362:	1412      	asrs	r2, r2, #16
 801f364:	d402      	bmi.n	801f36c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f366:	42b2      	cmp	r2, r6
 801f368:	f2c0 80aa 	blt.w	801f4c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f36c:	f04f 0c00 	mov.w	ip, #0
 801f370:	eb03 020c 	add.w	r2, r3, ip
 801f374:	2a00      	cmp	r2, #0
 801f376:	dc3e      	bgt.n	801f3f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f378:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f37c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f380:	f1bb 0f00 	cmp.w	fp, #0
 801f384:	f340 80fa 	ble.w	801f57c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f388:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f38c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f390:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f396:	f1bb 0b01 	subs.w	fp, fp, #1
 801f39a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f39e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3a2:	eeb0 6a62 	vmov.f32	s12, s5
 801f3a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3b2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f3b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3ba:	eeb0 6a43 	vmov.f32	s12, s6
 801f3be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3c2:	ee12 2a90 	vmov	r2, s5
 801f3c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3ce:	ee13 2a10 	vmov	r2, s6
 801f3d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3d6:	9311      	str	r3, [sp, #68]	; 0x44
 801f3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3da:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3de:	9a02      	ldr	r2, [sp, #8]
 801f3e0:	9312      	str	r3, [sp, #72]	; 0x48
 801f3e2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f3e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3e8:	eeb0 3a67 	vmov.f32	s6, s15
 801f3ec:	bf08      	it	eq
 801f3ee:	4613      	moveq	r3, r2
 801f3f0:	eef0 2a47 	vmov.f32	s5, s14
 801f3f4:	e787      	b.n	801f306 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f3f6:	1406      	asrs	r6, r0, #16
 801f3f8:	d45b      	bmi.n	801f4b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f3fa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f3fe:	42b5      	cmp	r5, r6
 801f400:	dd57      	ble.n	801f4b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f402:	140f      	asrs	r7, r1, #16
 801f404:	d455      	bmi.n	801f4b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f406:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801f40a:	42ba      	cmp	r2, r7
 801f40c:	dd51      	ble.n	801f4b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f40e:	b22d      	sxth	r5, r5
 801f410:	fb07 6505 	mla	r5, r7, r5, r6
 801f414:	9a00      	ldr	r2, [sp, #0]
 801f416:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f41a:	0e2e      	lsrs	r6, r5, #24
 801f41c:	d049      	beq.n	801f4b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f41e:	f06f 0201 	mvn.w	r2, #1
 801f422:	fb02 f20c 	mul.w	r2, r2, ip
 801f426:	9201      	str	r2, [sp, #4]
 801f428:	f834 e002 	ldrh.w	lr, [r4, r2]
 801f42c:	9a03      	ldr	r2, [sp, #12]
 801f42e:	4356      	muls	r6, r2
 801f430:	1c72      	adds	r2, r6, #1
 801f432:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f436:	1212      	asrs	r2, r2, #8
 801f438:	fa1f f982 	uxth.w	r9, r2
 801f43c:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f440:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f444:	43d2      	mvns	r2, r2
 801f446:	b2d2      	uxtb	r2, r2
 801f448:	fb16 f609 	smulbb	r6, r6, r9
 801f44c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f450:	fb07 6702 	mla	r7, r7, r2, r6
 801f454:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f458:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f45c:	b2ed      	uxtb	r5, r5
 801f45e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f462:	fa5f fe8e 	uxtb.w	lr, lr
 801f466:	fb15 f509 	smulbb	r5, r5, r9
 801f46a:	fb0e 5502 	mla	r5, lr, r2, r5
 801f46e:	b2bf      	uxth	r7, r7
 801f470:	fb1a fa09 	smulbb	sl, sl, r9
 801f474:	b2ad      	uxth	r5, r5
 801f476:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f47a:	fb06 a602 	mla	r6, r6, r2, sl
 801f47e:	1c7a      	adds	r2, r7, #1
 801f480:	f105 0a01 	add.w	sl, r5, #1
 801f484:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f488:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f48c:	b2b6      	uxth	r6, r6
 801f48e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f492:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f496:	ea47 070a 	orr.w	r7, r7, sl
 801f49a:	f106 0a01 	add.w	sl, r6, #1
 801f49e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f4a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f4a6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f4aa:	9a01      	ldr	r2, [sp, #4]
 801f4ac:	ea47 070a 	orr.w	r7, r7, sl
 801f4b0:	52a7      	strh	r7, [r4, r2]
 801f4b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f4b4:	4410      	add	r0, r2
 801f4b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f4b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f4bc:	4411      	add	r1, r2
 801f4be:	e757      	b.n	801f370 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f4c0:	f04f 0e00 	mov.w	lr, #0
 801f4c4:	eba3 020e 	sub.w	r2, r3, lr
 801f4c8:	2a00      	cmp	r2, #0
 801f4ca:	f77f af55 	ble.w	801f378 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f4ce:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f4d2:	1405      	asrs	r5, r0, #16
 801f4d4:	140a      	asrs	r2, r1, #16
 801f4d6:	fb06 5202 	mla	r2, r6, r2, r5
 801f4da:	9d00      	ldr	r5, [sp, #0]
 801f4dc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f4e0:	0e2e      	lsrs	r6, r5, #24
 801f4e2:	d044      	beq.n	801f56e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801f4e4:	9a03      	ldr	r2, [sp, #12]
 801f4e6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f4ea:	4356      	muls	r6, r2
 801f4ec:	1c72      	adds	r2, r6, #1
 801f4ee:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f4f2:	1212      	asrs	r2, r2, #8
 801f4f4:	fa1f f982 	uxth.w	r9, r2
 801f4f8:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f4fc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f500:	43d2      	mvns	r2, r2
 801f502:	b2d2      	uxtb	r2, r2
 801f504:	fb16 f609 	smulbb	r6, r6, r9
 801f508:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f50c:	fb07 6702 	mla	r7, r7, r2, r6
 801f510:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f514:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f518:	b2ed      	uxtb	r5, r5
 801f51a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f51e:	fa5f fc8c 	uxtb.w	ip, ip
 801f522:	fb15 f509 	smulbb	r5, r5, r9
 801f526:	fb0c 5502 	mla	r5, ip, r2, r5
 801f52a:	b2bf      	uxth	r7, r7
 801f52c:	fb1a fa09 	smulbb	sl, sl, r9
 801f530:	b2ad      	uxth	r5, r5
 801f532:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f536:	fb06 a602 	mla	r6, r6, r2, sl
 801f53a:	1c7a      	adds	r2, r7, #1
 801f53c:	f105 0a01 	add.w	sl, r5, #1
 801f540:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f544:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f548:	b2b6      	uxth	r6, r6
 801f54a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f54e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f552:	ea47 070a 	orr.w	r7, r7, sl
 801f556:	f106 0a01 	add.w	sl, r6, #1
 801f55a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f55e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f562:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f566:	ea47 070a 	orr.w	r7, r7, sl
 801f56a:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801f56e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f570:	4410      	add	r0, r2
 801f572:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f574:	f10e 0e01 	add.w	lr, lr, #1
 801f578:	4411      	add	r1, r2
 801f57a:	e7a3      	b.n	801f4c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f57c:	b005      	add	sp, #20
 801f57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f584 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f588:	b085      	sub	sp, #20
 801f58a:	468b      	mov	fp, r1
 801f58c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f58e:	9203      	str	r2, [sp, #12]
 801f590:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f594:	6861      	ldr	r1, [r4, #4]
 801f596:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801f59a:	fb01 2000 	mla	r0, r1, r0, r2
 801f59e:	6822      	ldr	r2, [r4, #0]
 801f5a0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f5a4:	f8d9 2000 	ldr.w	r2, [r9]
 801f5a8:	9200      	str	r2, [sp, #0]
 801f5aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f5ae:	f1bb 0f00 	cmp.w	fp, #0
 801f5b2:	dc03      	bgt.n	801f5bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f5b4:	9a03      	ldr	r2, [sp, #12]
 801f5b6:	2a00      	cmp	r2, #0
 801f5b8:	f340 8154 	ble.w	801f864 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f5bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f5be:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f5c2:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f5c6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f5ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	dd0e      	ble.n	801f5f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f5d4:	140c      	asrs	r4, r1, #16
 801f5d6:	d405      	bmi.n	801f5e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f5d8:	42bc      	cmp	r4, r7
 801f5da:	da03      	bge.n	801f5e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f5dc:	1414      	asrs	r4, r2, #16
 801f5de:	d401      	bmi.n	801f5e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f5e0:	42b4      	cmp	r4, r6
 801f5e2:	db07      	blt.n	801f5f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f5e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f5e6:	4421      	add	r1, r4
 801f5e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f5ea:	3b01      	subs	r3, #1
 801f5ec:	4422      	add	r2, r4
 801f5ee:	3002      	adds	r0, #2
 801f5f0:	e7ee      	b.n	801f5d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f5f2:	d017      	beq.n	801f624 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f5f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f5f6:	1e5c      	subs	r4, r3, #1
 801f5f8:	fb05 1504 	mla	r5, r5, r4, r1
 801f5fc:	142d      	asrs	r5, r5, #16
 801f5fe:	d409      	bmi.n	801f614 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f600:	42bd      	cmp	r5, r7
 801f602:	da07      	bge.n	801f614 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f604:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f606:	fb05 2404 	mla	r4, r5, r4, r2
 801f60a:	1424      	asrs	r4, r4, #16
 801f60c:	d402      	bmi.n	801f614 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f60e:	42b4      	cmp	r4, r6
 801f610:	f2c0 80c0 	blt.w	801f794 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f614:	2700      	movs	r7, #0
 801f616:	19dc      	adds	r4, r3, r7
 801f618:	2c00      	cmp	r4, #0
 801f61a:	dc3e      	bgt.n	801f69a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f61c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f620:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f624:	f1bb 0f00 	cmp.w	fp, #0
 801f628:	f340 811c 	ble.w	801f864 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f62c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f630:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f634:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f63a:	f1bb 0b01 	subs.w	fp, fp, #1
 801f63e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f642:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f646:	eeb0 6a62 	vmov.f32	s12, s5
 801f64a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f64e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f652:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f656:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f65a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f65e:	eeb0 6a43 	vmov.f32	s12, s6
 801f662:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f666:	ee12 2a90 	vmov	r2, s5
 801f66a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f66e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f672:	ee13 2a10 	vmov	r2, s6
 801f676:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f67a:	9311      	str	r3, [sp, #68]	; 0x44
 801f67c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f67e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f682:	9a03      	ldr	r2, [sp, #12]
 801f684:	9312      	str	r3, [sp, #72]	; 0x48
 801f686:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f68a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f68c:	eeb0 3a67 	vmov.f32	s6, s15
 801f690:	bf08      	it	eq
 801f692:	4613      	moveq	r3, r2
 801f694:	eef0 2a47 	vmov.f32	s5, s14
 801f698:	e789      	b.n	801f5ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f69a:	140e      	asrs	r6, r1, #16
 801f69c:	d461      	bmi.n	801f762 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f69e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801f6a2:	42b5      	cmp	r5, r6
 801f6a4:	dd5d      	ble.n	801f762 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f6a6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f6aa:	d45a      	bmi.n	801f762 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f6ac:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801f6b0:	4564      	cmp	r4, ip
 801f6b2:	dd56      	ble.n	801f762 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f6b4:	b22d      	sxth	r5, r5
 801f6b6:	fb0c 6505 	mla	r5, ip, r5, r6
 801f6ba:	9c00      	ldr	r4, [sp, #0]
 801f6bc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801f6c0:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801f6c4:	d04d      	beq.n	801f762 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f6c6:	0a26      	lsrs	r6, r4, #8
 801f6c8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f6cc:	fa5f f58e 	uxtb.w	r5, lr
 801f6d0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801f6d4:	9601      	str	r6, [sp, #4]
 801f6d6:	d04a      	beq.n	801f76e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f6d8:	f06f 0601 	mvn.w	r6, #1
 801f6dc:	437e      	muls	r6, r7
 801f6de:	fa1f fa85 	uxth.w	sl, r5
 801f6e2:	f830 8006 	ldrh.w	r8, [r0, r6]
 801f6e6:	9602      	str	r6, [sp, #8]
 801f6e8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801f6ec:	43ed      	mvns	r5, r5
 801f6ee:	fa5f fc8c 	uxtb.w	ip, ip
 801f6f2:	b2ed      	uxtb	r5, r5
 801f6f4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f6f8:	fb1c fc0a 	smulbb	ip, ip, sl
 801f6fc:	fb0e cc05 	mla	ip, lr, r5, ip
 801f700:	b2e4      	uxtb	r4, r4
 801f702:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801f706:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f70a:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801f70e:	fa5f f888 	uxtb.w	r8, r8
 801f712:	fb14 f40a 	smulbb	r4, r4, sl
 801f716:	fb08 4405 	mla	r4, r8, r5, r4
 801f71a:	b2a4      	uxth	r4, r4
 801f71c:	fa1f fc8c 	uxth.w	ip, ip
 801f720:	fb16 f60a 	smulbb	r6, r6, sl
 801f724:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f728:	fb0e 6e05 	mla	lr, lr, r5, r6
 801f72c:	1c66      	adds	r6, r4, #1
 801f72e:	f10c 0501 	add.w	r5, ip, #1
 801f732:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801f736:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f73a:	fa1f fe8e 	uxth.w	lr, lr
 801f73e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f742:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f746:	ea4c 0c06 	orr.w	ip, ip, r6
 801f74a:	f10e 0601 	add.w	r6, lr, #1
 801f74e:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801f752:	0976      	lsrs	r6, r6, #5
 801f754:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f758:	9c02      	ldr	r4, [sp, #8]
 801f75a:	ea4c 0c06 	orr.w	ip, ip, r6
 801f75e:	f820 c004 	strh.w	ip, [r0, r4]
 801f762:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f764:	4421      	add	r1, r4
 801f766:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f768:	3f01      	subs	r7, #1
 801f76a:	4422      	add	r2, r4
 801f76c:	e753      	b.n	801f616 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f76e:	4e3f      	ldr	r6, [pc, #252]	; (801f86c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801f770:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f774:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801f778:	ea4c 0c04 	orr.w	ip, ip, r4
 801f77c:	9c01      	ldr	r4, [sp, #4]
 801f77e:	f06f 0501 	mvn.w	r5, #1
 801f782:	00e6      	lsls	r6, r4, #3
 801f784:	437d      	muls	r5, r7
 801f786:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801f78a:	ea4c 0c04 	orr.w	ip, ip, r4
 801f78e:	f820 c005 	strh.w	ip, [r0, r5]
 801f792:	e7e6      	b.n	801f762 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f794:	f04f 0800 	mov.w	r8, #0
 801f798:	eba3 0408 	sub.w	r4, r3, r8
 801f79c:	2c00      	cmp	r4, #0
 801f79e:	f77f af3d 	ble.w	801f61c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f7a2:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801f7a6:	140d      	asrs	r5, r1, #16
 801f7a8:	1414      	asrs	r4, r2, #16
 801f7aa:	fb06 5404 	mla	r4, r6, r4, r5
 801f7ae:	9d00      	ldr	r5, [sp, #0]
 801f7b0:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801f7b4:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801f7b8:	d042      	beq.n	801f840 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f7ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f7be:	fa5f f58c 	uxtb.w	r5, ip
 801f7c2:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801f7c6:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801f7ca:	d040      	beq.n	801f84e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f7cc:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801f7d0:	fa1f fa85 	uxth.w	sl, r5
 801f7d4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f7d8:	43ed      	mvns	r5, r5
 801f7da:	b2ff      	uxtb	r7, r7
 801f7dc:	b2ed      	uxtb	r5, r5
 801f7de:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f7e2:	fb17 f70a 	smulbb	r7, r7, sl
 801f7e6:	fb0c 7705 	mla	r7, ip, r5, r7
 801f7ea:	b2e4      	uxtb	r4, r4
 801f7ec:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801f7f0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f7f4:	fa5f fe8e 	uxtb.w	lr, lr
 801f7f8:	fb14 f40a 	smulbb	r4, r4, sl
 801f7fc:	fb0e 4405 	mla	r4, lr, r5, r4
 801f800:	b2f6      	uxtb	r6, r6
 801f802:	b2bf      	uxth	r7, r7
 801f804:	fb16 f60a 	smulbb	r6, r6, sl
 801f808:	b2a4      	uxth	r4, r4
 801f80a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f80e:	fb0c 6c05 	mla	ip, ip, r5, r6
 801f812:	1c7d      	adds	r5, r7, #1
 801f814:	1c66      	adds	r6, r4, #1
 801f816:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801f81a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801f81e:	fa1f fc8c 	uxth.w	ip, ip
 801f822:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f826:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f82a:	4337      	orrs	r7, r6
 801f82c:	f10c 0601 	add.w	r6, ip, #1
 801f830:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801f834:	0976      	lsrs	r6, r6, #5
 801f836:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f83a:	4337      	orrs	r7, r6
 801f83c:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801f840:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f842:	4421      	add	r1, r4
 801f844:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f846:	f108 0801 	add.w	r8, r8, #1
 801f84a:	4422      	add	r2, r4
 801f84c:	e7a4      	b.n	801f798 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f84e:	4d07      	ldr	r5, [pc, #28]	; (801f86c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801f850:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f854:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801f858:	00f6      	lsls	r6, r6, #3
 801f85a:	4327      	orrs	r7, r4
 801f85c:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801f860:	4327      	orrs	r7, r4
 801f862:	e7eb      	b.n	801f83c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801f864:	b005      	add	sp, #20
 801f866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f86a:	bf00      	nop
 801f86c:	fffff800 	.word	0xfffff800

0801f870 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f874:	b087      	sub	sp, #28
 801f876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f87a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f87c:	9204      	str	r2, [sp, #16]
 801f87e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f882:	9205      	str	r2, [sp, #20]
 801f884:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f888:	9101      	str	r1, [sp, #4]
 801f88a:	6841      	ldr	r1, [r0, #4]
 801f88c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f890:	fb01 2404 	mla	r4, r1, r4, r2
 801f894:	6802      	ldr	r2, [r0, #0]
 801f896:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f89a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f89e:	3201      	adds	r2, #1
 801f8a0:	f022 0201 	bic.w	r2, r2, #1
 801f8a4:	9202      	str	r2, [sp, #8]
 801f8a6:	f8d8 2000 	ldr.w	r2, [r8]
 801f8aa:	9203      	str	r2, [sp, #12]
 801f8ac:	9a01      	ldr	r2, [sp, #4]
 801f8ae:	2a00      	cmp	r2, #0
 801f8b0:	dc03      	bgt.n	801f8ba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f8b2:	9a04      	ldr	r2, [sp, #16]
 801f8b4:	2a00      	cmp	r2, #0
 801f8b6:	f340 814d 	ble.w	801fb54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f8ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f8bc:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f8c0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f8c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f8c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f8ca:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	dd0e      	ble.n	801f8f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f8d2:	1402      	asrs	r2, r0, #16
 801f8d4:	d405      	bmi.n	801f8e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f8d6:	42ba      	cmp	r2, r7
 801f8d8:	da03      	bge.n	801f8e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f8da:	140a      	asrs	r2, r1, #16
 801f8dc:	d401      	bmi.n	801f8e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f8de:	42b2      	cmp	r2, r6
 801f8e0:	db07      	blt.n	801f8f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f8e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f8e4:	4410      	add	r0, r2
 801f8e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f8e8:	3b01      	subs	r3, #1
 801f8ea:	4411      	add	r1, r2
 801f8ec:	3402      	adds	r4, #2
 801f8ee:	e7ee      	b.n	801f8ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f8f0:	d019      	beq.n	801f926 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f8f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f8f4:	1e5a      	subs	r2, r3, #1
 801f8f6:	fb05 0502 	mla	r5, r5, r2, r0
 801f8fa:	142d      	asrs	r5, r5, #16
 801f8fc:	d409      	bmi.n	801f912 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f8fe:	42bd      	cmp	r5, r7
 801f900:	da07      	bge.n	801f912 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f902:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f904:	fb05 1202 	mla	r2, r5, r2, r1
 801f908:	1412      	asrs	r2, r2, #16
 801f90a:	d402      	bmi.n	801f912 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f90c:	42b2      	cmp	r2, r6
 801f90e:	f2c0 80b7 	blt.w	801fa80 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f912:	f04f 0c00 	mov.w	ip, #0
 801f916:	eb03 020c 	add.w	r2, r3, ip
 801f91a:	2a00      	cmp	r2, #0
 801f91c:	dc3f      	bgt.n	801f99e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801f91e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f922:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f926:	9b01      	ldr	r3, [sp, #4]
 801f928:	2b00      	cmp	r3, #0
 801f92a:	f340 8113 	ble.w	801fb54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f92e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f932:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f936:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f93a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f93c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f940:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f944:	eeb0 6a62 	vmov.f32	s12, s5
 801f948:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f94c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f950:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f954:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f958:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f95c:	eeb0 6a43 	vmov.f32	s12, s6
 801f960:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f964:	ee12 2a90 	vmov	r2, s5
 801f968:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f96c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f970:	ee13 2a10 	vmov	r2, s6
 801f974:	9313      	str	r3, [sp, #76]	; 0x4c
 801f976:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f978:	fb92 f3f3 	sdiv	r3, r2, r3
 801f97c:	9314      	str	r3, [sp, #80]	; 0x50
 801f97e:	9b01      	ldr	r3, [sp, #4]
 801f980:	9a04      	ldr	r2, [sp, #16]
 801f982:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f986:	3b01      	subs	r3, #1
 801f988:	9301      	str	r3, [sp, #4]
 801f98a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f98e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f990:	eeb0 3a67 	vmov.f32	s6, s15
 801f994:	bf08      	it	eq
 801f996:	4613      	moveq	r3, r2
 801f998:	eef0 2a47 	vmov.f32	s5, s14
 801f99c:	e786      	b.n	801f8ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f99e:	1405      	asrs	r5, r0, #16
 801f9a0:	d467      	bmi.n	801fa72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f9a2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f9a6:	42aa      	cmp	r2, r5
 801f9a8:	dd63      	ble.n	801fa72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f9aa:	140e      	asrs	r6, r1, #16
 801f9ac:	d461      	bmi.n	801fa72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f9ae:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801f9b2:	42b2      	cmp	r2, r6
 801f9b4:	dd5d      	ble.n	801fa72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f9b6:	9a02      	ldr	r2, [sp, #8]
 801f9b8:	fb06 5502 	mla	r5, r6, r2, r5
 801f9bc:	086a      	lsrs	r2, r5, #1
 801f9be:	9e03      	ldr	r6, [sp, #12]
 801f9c0:	5cb2      	ldrb	r2, [r6, r2]
 801f9c2:	07ee      	lsls	r6, r5, #31
 801f9c4:	bf54      	ite	pl
 801f9c6:	f002 020f 	andpl.w	r2, r2, #15
 801f9ca:	1112      	asrmi	r2, r2, #4
 801f9cc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f9d0:	b2d2      	uxtb	r2, r2
 801f9d2:	2a00      	cmp	r2, #0
 801f9d4:	d04d      	beq.n	801fa72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f9d6:	f06f 0601 	mvn.w	r6, #1
 801f9da:	fb06 fb0c 	mul.w	fp, r6, ip
 801f9de:	9e05      	ldr	r6, [sp, #20]
 801f9e0:	4d5e      	ldr	r5, [pc, #376]	; (801fb5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801f9e2:	f834 e00b 	ldrh.w	lr, [r4, fp]
 801f9e6:	682d      	ldr	r5, [r5, #0]
 801f9e8:	4372      	muls	r2, r6
 801f9ea:	1c56      	adds	r6, r2, #1
 801f9ec:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f9f0:	1212      	asrs	r2, r2, #8
 801f9f2:	0a2f      	lsrs	r7, r5, #8
 801f9f4:	fa1f fa82 	uxth.w	sl, r2
 801f9f8:	ea4f 262e 	mov.w	r6, lr, asr #8
 801f9fc:	43d2      	mvns	r2, r2
 801f9fe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fa02:	b2d2      	uxtb	r2, r2
 801fa04:	fb17 f70a 	smulbb	r7, r7, sl
 801fa08:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801fa0c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fa10:	fb06 7602 	mla	r6, r6, r2, r7
 801fa14:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801fa18:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fa1c:	fb19 f90a 	smulbb	r9, r9, sl
 801fa20:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fa24:	00ed      	lsls	r5, r5, #3
 801fa26:	fb07 9702 	mla	r7, r7, r2, r9
 801fa2a:	b2ed      	uxtb	r5, r5
 801fa2c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fa30:	b2bf      	uxth	r7, r7
 801fa32:	fa5f fe8e 	uxtb.w	lr, lr
 801fa36:	fb15 f50a 	smulbb	r5, r5, sl
 801fa3a:	b2b6      	uxth	r6, r6
 801fa3c:	fb0e 5502 	mla	r5, lr, r2, r5
 801fa40:	f107 0901 	add.w	r9, r7, #1
 801fa44:	b2ad      	uxth	r5, r5
 801fa46:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801fa4a:	f106 0901 	add.w	r9, r6, #1
 801fa4e:	097f      	lsrs	r7, r7, #5
 801fa50:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801fa54:	f105 0e01 	add.w	lr, r5, #1
 801fa58:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fa5c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fa60:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801fa64:	4337      	orrs	r7, r6
 801fa66:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801fa6a:	ea47 070e 	orr.w	r7, r7, lr
 801fa6e:	f824 700b 	strh.w	r7, [r4, fp]
 801fa72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa74:	4410      	add	r0, r2
 801fa76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fa78:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fa7c:	4411      	add	r1, r2
 801fa7e:	e74a      	b.n	801f916 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fa80:	f04f 0e00 	mov.w	lr, #0
 801fa84:	eba3 020e 	sub.w	r2, r3, lr
 801fa88:	2a00      	cmp	r2, #0
 801fa8a:	f77f af48 	ble.w	801f91e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801fa8e:	9e02      	ldr	r6, [sp, #8]
 801fa90:	1402      	asrs	r2, r0, #16
 801fa92:	140d      	asrs	r5, r1, #16
 801fa94:	fb06 2505 	mla	r5, r6, r5, r2
 801fa98:	086a      	lsrs	r2, r5, #1
 801fa9a:	9e03      	ldr	r6, [sp, #12]
 801fa9c:	5cb2      	ldrb	r2, [r6, r2]
 801fa9e:	07ed      	lsls	r5, r5, #31
 801faa0:	bf54      	ite	pl
 801faa2:	f002 020f 	andpl.w	r2, r2, #15
 801faa6:	1112      	asrmi	r2, r2, #4
 801faa8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801faac:	b2d2      	uxtb	r2, r2
 801faae:	2a00      	cmp	r2, #0
 801fab0:	d049      	beq.n	801fb46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fab2:	9e05      	ldr	r6, [sp, #20]
 801fab4:	4d29      	ldr	r5, [pc, #164]	; (801fb5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801fab6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801faba:	682d      	ldr	r5, [r5, #0]
 801fabc:	4372      	muls	r2, r6
 801fabe:	1c56      	adds	r6, r2, #1
 801fac0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fac4:	1212      	asrs	r2, r2, #8
 801fac6:	0a2f      	lsrs	r7, r5, #8
 801fac8:	fa1f fa82 	uxth.w	sl, r2
 801facc:	ea4f 262c 	mov.w	r6, ip, asr #8
 801fad0:	43d2      	mvns	r2, r2
 801fad2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fad6:	b2d2      	uxtb	r2, r2
 801fad8:	fb17 f70a 	smulbb	r7, r7, sl
 801fadc:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801fae0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fae4:	fb06 7602 	mla	r6, r6, r2, r7
 801fae8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801faec:	ea4f 07ec 	mov.w	r7, ip, asr #3
 801faf0:	fb19 f90a 	smulbb	r9, r9, sl
 801faf4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801faf8:	00ed      	lsls	r5, r5, #3
 801fafa:	fb07 9702 	mla	r7, r7, r2, r9
 801fafe:	b2ed      	uxtb	r5, r5
 801fb00:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fb04:	b2bf      	uxth	r7, r7
 801fb06:	fa5f fc8c 	uxtb.w	ip, ip
 801fb0a:	fb15 f50a 	smulbb	r5, r5, sl
 801fb0e:	b2b6      	uxth	r6, r6
 801fb10:	fb0c 5502 	mla	r5, ip, r2, r5
 801fb14:	f107 0901 	add.w	r9, r7, #1
 801fb18:	b2ad      	uxth	r5, r5
 801fb1a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801fb1e:	f106 0b01 	add.w	fp, r6, #1
 801fb22:	097f      	lsrs	r7, r7, #5
 801fb24:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801fb28:	f105 0c01 	add.w	ip, r5, #1
 801fb2c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fb30:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fb34:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801fb38:	4337      	orrs	r7, r6
 801fb3a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fb3e:	ea47 070c 	orr.w	r7, r7, ip
 801fb42:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801fb46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb48:	4410      	add	r0, r2
 801fb4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb4c:	f10e 0e01 	add.w	lr, lr, #1
 801fb50:	4411      	add	r1, r2
 801fb52:	e797      	b.n	801fa84 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fb54:	b007      	add	sp, #28
 801fb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb5a:	bf00      	nop
 801fb5c:	2000b73c 	.word	0x2000b73c

0801fb60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb64:	b087      	sub	sp, #28
 801fb66:	468b      	mov	fp, r1
 801fb68:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fb6a:	9205      	str	r2, [sp, #20]
 801fb6c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fb70:	6841      	ldr	r1, [r0, #4]
 801fb72:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801fb76:	fb01 2404 	mla	r4, r1, r4, r2
 801fb7a:	6802      	ldr	r2, [r0, #0]
 801fb7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fb80:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801fb84:	3201      	adds	r2, #1
 801fb86:	f022 0201 	bic.w	r2, r2, #1
 801fb8a:	9201      	str	r2, [sp, #4]
 801fb8c:	f8d8 2000 	ldr.w	r2, [r8]
 801fb90:	9202      	str	r2, [sp, #8]
 801fb92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fb96:	f1bb 0f00 	cmp.w	fp, #0
 801fb9a:	dc03      	bgt.n	801fba4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801fb9c:	9a05      	ldr	r2, [sp, #20]
 801fb9e:	2a00      	cmp	r2, #0
 801fba0:	f340 8156 	ble.w	801fe50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801fba4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fba6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fbaa:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fbae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fbb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fbb4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	dd0e      	ble.n	801fbda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fbbc:	1402      	asrs	r2, r0, #16
 801fbbe:	d405      	bmi.n	801fbcc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fbc0:	42ba      	cmp	r2, r7
 801fbc2:	da03      	bge.n	801fbcc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fbc4:	140a      	asrs	r2, r1, #16
 801fbc6:	d401      	bmi.n	801fbcc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fbc8:	42b2      	cmp	r2, r6
 801fbca:	db07      	blt.n	801fbdc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fbcc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fbce:	4410      	add	r0, r2
 801fbd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fbd2:	3b01      	subs	r3, #1
 801fbd4:	4411      	add	r1, r2
 801fbd6:	3402      	adds	r4, #2
 801fbd8:	e7ee      	b.n	801fbb8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fbda:	d017      	beq.n	801fc0c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801fbdc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fbde:	1e5a      	subs	r2, r3, #1
 801fbe0:	fb05 0502 	mla	r5, r5, r2, r0
 801fbe4:	142d      	asrs	r5, r5, #16
 801fbe6:	d409      	bmi.n	801fbfc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fbe8:	42bd      	cmp	r5, r7
 801fbea:	da07      	bge.n	801fbfc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fbec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fbee:	fb05 1202 	mla	r2, r5, r2, r1
 801fbf2:	1412      	asrs	r2, r2, #16
 801fbf4:	d402      	bmi.n	801fbfc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fbf6:	42b2      	cmp	r2, r6
 801fbf8:	f2c0 80be 	blt.w	801fd78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801fbfc:	2600      	movs	r6, #0
 801fbfe:	199a      	adds	r2, r3, r6
 801fc00:	2a00      	cmp	r2, #0
 801fc02:	dc3e      	bgt.n	801fc82 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801fc04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc08:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fc0c:	f1bb 0f00 	cmp.w	fp, #0
 801fc10:	f340 811e 	ble.w	801fe50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801fc14:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc22:	f1bb 0b01 	subs.w	fp, fp, #1
 801fc26:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc2e:	eeb0 6a62 	vmov.f32	s12, s5
 801fc32:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc3e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fc42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc46:	eeb0 6a43 	vmov.f32	s12, s6
 801fc4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc4e:	ee12 2a90 	vmov	r2, s5
 801fc52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc56:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc5a:	ee13 2a10 	vmov	r2, s6
 801fc5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc62:	9313      	str	r3, [sp, #76]	; 0x4c
 801fc64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc66:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc6a:	9a05      	ldr	r2, [sp, #20]
 801fc6c:	9314      	str	r3, [sp, #80]	; 0x50
 801fc6e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fc72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc74:	eeb0 3a67 	vmov.f32	s6, s15
 801fc78:	bf08      	it	eq
 801fc7a:	4613      	moveq	r3, r2
 801fc7c:	eef0 2a47 	vmov.f32	s5, s14
 801fc80:	e789      	b.n	801fb96 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fc82:	1405      	asrs	r5, r0, #16
 801fc84:	d465      	bmi.n	801fd52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fc86:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801fc8a:	42aa      	cmp	r2, r5
 801fc8c:	dd61      	ble.n	801fd52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fc8e:	140f      	asrs	r7, r1, #16
 801fc90:	d45f      	bmi.n	801fd52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fc92:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801fc96:	42ba      	cmp	r2, r7
 801fc98:	dd5b      	ble.n	801fd52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fc9a:	9a01      	ldr	r2, [sp, #4]
 801fc9c:	fb07 5502 	mla	r5, r7, r2, r5
 801fca0:	086a      	lsrs	r2, r5, #1
 801fca2:	9f02      	ldr	r7, [sp, #8]
 801fca4:	5cba      	ldrb	r2, [r7, r2]
 801fca6:	07ef      	lsls	r7, r5, #31
 801fca8:	bf54      	ite	pl
 801fcaa:	f002 020f 	andpl.w	r2, r2, #15
 801fcae:	1112      	asrmi	r2, r2, #4
 801fcb0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fcb4:	b2d2      	uxtb	r2, r2
 801fcb6:	2a00      	cmp	r2, #0
 801fcb8:	d04b      	beq.n	801fd52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fcba:	4d67      	ldr	r5, [pc, #412]	; (801fe58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>)
 801fcbc:	682f      	ldr	r7, [r5, #0]
 801fcbe:	08fd      	lsrs	r5, r7, #3
 801fcc0:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801fcc4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fcc8:	00ff      	lsls	r7, r7, #3
 801fcca:	2aff      	cmp	r2, #255	; 0xff
 801fccc:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801fcd0:	9503      	str	r5, [sp, #12]
 801fcd2:	b2ff      	uxtb	r7, r7
 801fcd4:	d043      	beq.n	801fd5e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801fcd6:	f06f 0501 	mvn.w	r5, #1
 801fcda:	4375      	muls	r5, r6
 801fcdc:	fa1f fa82 	uxth.w	sl, r2
 801fce0:	f834 e005 	ldrh.w	lr, [r4, r5]
 801fce4:	9504      	str	r5, [sp, #16]
 801fce6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fcea:	43d2      	mvns	r2, r2
 801fcec:	b2d2      	uxtb	r2, r2
 801fcee:	fb19 f90a 	smulbb	r9, r9, sl
 801fcf2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fcf6:	9d03      	ldr	r5, [sp, #12]
 801fcf8:	fb0c 9c02 	mla	ip, ip, r2, r9
 801fcfc:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801fd00:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801fd04:	fb15 f50a 	smulbb	r5, r5, sl
 801fd08:	fb09 5502 	mla	r5, r9, r2, r5
 801fd0c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fd10:	b2ad      	uxth	r5, r5
 801fd12:	fa5f fe8e 	uxtb.w	lr, lr
 801fd16:	fb17 f70a 	smulbb	r7, r7, sl
 801fd1a:	fa1f fc8c 	uxth.w	ip, ip
 801fd1e:	fb0e 7702 	mla	r7, lr, r2, r7
 801fd22:	f105 0901 	add.w	r9, r5, #1
 801fd26:	b2bf      	uxth	r7, r7
 801fd28:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fd2c:	f10c 0901 	add.w	r9, ip, #1
 801fd30:	1c7a      	adds	r2, r7, #1
 801fd32:	096d      	lsrs	r5, r5, #5
 801fd34:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801fd38:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fd3c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fd40:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fd44:	ea45 050c 	orr.w	r5, r5, ip
 801fd48:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fd4c:	9a04      	ldr	r2, [sp, #16]
 801fd4e:	433d      	orrs	r5, r7
 801fd50:	52a5      	strh	r5, [r4, r2]
 801fd52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fd54:	4410      	add	r0, r2
 801fd56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd58:	3e01      	subs	r6, #1
 801fd5a:	4411      	add	r1, r2
 801fd5c:	e74f      	b.n	801fbfe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fd5e:	f06f 0201 	mvn.w	r2, #1
 801fd62:	fb02 fe06 	mul.w	lr, r2, r6
 801fd66:	9a03      	ldr	r2, [sp, #12]
 801fd68:	00d5      	lsls	r5, r2, #3
 801fd6a:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801fd6e:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 801fd72:	f824 500e 	strh.w	r5, [r4, lr]
 801fd76:	e7ec      	b.n	801fd52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fd78:	f04f 0e00 	mov.w	lr, #0
 801fd7c:	eba3 020e 	sub.w	r2, r3, lr
 801fd80:	2a00      	cmp	r2, #0
 801fd82:	f77f af3f 	ble.w	801fc04 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801fd86:	9e01      	ldr	r6, [sp, #4]
 801fd88:	1402      	asrs	r2, r0, #16
 801fd8a:	140d      	asrs	r5, r1, #16
 801fd8c:	fb06 2505 	mla	r5, r6, r5, r2
 801fd90:	086a      	lsrs	r2, r5, #1
 801fd92:	9e02      	ldr	r6, [sp, #8]
 801fd94:	5cb2      	ldrb	r2, [r6, r2]
 801fd96:	07ed      	lsls	r5, r5, #31
 801fd98:	bf54      	ite	pl
 801fd9a:	f002 020f 	andpl.w	r2, r2, #15
 801fd9e:	1112      	asrmi	r2, r2, #4
 801fda0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fda4:	b2d2      	uxtb	r2, r2
 801fda6:	2a00      	cmp	r2, #0
 801fda8:	d045      	beq.n	801fe36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fdaa:	4d2b      	ldr	r5, [pc, #172]	; (801fe58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>)
 801fdac:	682e      	ldr	r6, [r5, #0]
 801fdae:	2aff      	cmp	r2, #255	; 0xff
 801fdb0:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801fdb4:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 801fdb8:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801fdbc:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801fdc0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fdc4:	b2f6      	uxtb	r6, r6
 801fdc6:	d03d      	beq.n	801fe44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fdc8:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801fdcc:	fa1f fa82 	uxth.w	sl, r2
 801fdd0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fdd4:	43d2      	mvns	r2, r2
 801fdd6:	b2d2      	uxtb	r2, r2
 801fdd8:	fb19 f90a 	smulbb	r9, r9, sl
 801fddc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fde0:	fb07 9702 	mla	r7, r7, r2, r9
 801fde4:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801fde8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801fdec:	fb15 f50a 	smulbb	r5, r5, sl
 801fdf0:	fb09 5502 	mla	r5, r9, r2, r5
 801fdf4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fdf8:	b2ad      	uxth	r5, r5
 801fdfa:	fa5f fc8c 	uxtb.w	ip, ip
 801fdfe:	fb16 f60a 	smulbb	r6, r6, sl
 801fe02:	b2bf      	uxth	r7, r7
 801fe04:	fb0c 6602 	mla	r6, ip, r2, r6
 801fe08:	f105 0901 	add.w	r9, r5, #1
 801fe0c:	b2b6      	uxth	r6, r6
 801fe0e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fe12:	f107 0901 	add.w	r9, r7, #1
 801fe16:	096d      	lsrs	r5, r5, #5
 801fe18:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801fe1c:	1c72      	adds	r2, r6, #1
 801fe1e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fe22:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fe26:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801fe2a:	433d      	orrs	r5, r7
 801fe2c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fe30:	4335      	orrs	r5, r6
 801fe32:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801fe36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fe38:	4410      	add	r0, r2
 801fe3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe3c:	f10e 0e01 	add.w	lr, lr, #1
 801fe40:	4411      	add	r1, r2
 801fe42:	e79b      	b.n	801fd7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801fe44:	00ed      	lsls	r5, r5, #3
 801fe46:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801fe4a:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 801fe4e:	e7f0      	b.n	801fe32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 801fe50:	b007      	add	sp, #28
 801fe52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe56:	bf00      	nop
 801fe58:	2000b73c 	.word	0x2000b73c

0801fe5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801fe5c:	4770      	bx	lr

0801fe5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801fe5e:	4770      	bx	lr

0801fe60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801fe60:	4770      	bx	lr

0801fe62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801fe62:	4770      	bx	lr

0801fe64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fe64:	4770      	bx	lr

0801fe66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fe66:	4770      	bx	lr

0801fe68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fe68:	4770      	bx	lr

0801fe6a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fe6a:	4770      	bx	lr

0801fe6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fe6c:	4770      	bx	lr

0801fe6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801fe6e:	4770      	bx	lr

0801fe70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fe70:	4770      	bx	lr

0801fe72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fe72:	4770      	bx	lr

0801fe74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fe74:	4770      	bx	lr

0801fe76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801fe76:	4770      	bx	lr

0801fe78 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fe78:	4770      	bx	lr

0801fe7a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fe7a:	4770      	bx	lr

0801fe7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fe7c:	4770      	bx	lr

0801fe7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fe7e:	4770      	bx	lr

0801fe80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fe80:	4770      	bx	lr

0801fe82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fe82:	4770      	bx	lr

0801fe84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fe84:	4770      	bx	lr

0801fe86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801fe86:	4770      	bx	lr

0801fe88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fe88:	4770      	bx	lr

0801fe8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801fe8a:	4770      	bx	lr

0801fe8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fe8c:	4770      	bx	lr

0801fe8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801fe8e:	4770      	bx	lr

0801fe90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fe90:	4770      	bx	lr

0801fe92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801fe92:	4770      	bx	lr

0801fe94 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801fe94:	b508      	push	{r3, lr}
 801fe96:	4b06      	ldr	r3, [pc, #24]	; (801feb0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801fe98:	8818      	ldrh	r0, [r3, #0]
 801fe9a:	b928      	cbnz	r0, 801fea8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801fe9c:	4b05      	ldr	r3, [pc, #20]	; (801feb4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801fe9e:	4a06      	ldr	r2, [pc, #24]	; (801feb8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801fea0:	4806      	ldr	r0, [pc, #24]	; (801febc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801fea2:	2154      	movs	r1, #84	; 0x54
 801fea4:	f009 faa0 	bl	80293e8 <__assert_func>
 801fea8:	0040      	lsls	r0, r0, #1
 801feaa:	b280      	uxth	r0, r0
 801feac:	bd08      	pop	{r3, pc}
 801feae:	bf00      	nop
 801feb0:	2000b72e 	.word	0x2000b72e
 801feb4:	08030a21 	.word	0x08030a21
 801feb8:	08030fab 	.word	0x08030fab
 801febc:	08030a63 	.word	0x08030a63

0801fec0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801fec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fec4:	b08b      	sub	sp, #44	; 0x2c
 801fec6:	460f      	mov	r7, r1
 801fec8:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801fecc:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801fed0:	4616      	mov	r6, r2
 801fed2:	f1bb 0f00 	cmp.w	fp, #0
 801fed6:	d046      	beq.n	801ff66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801fed8:	6810      	ldr	r0, [r2, #0]
 801feda:	6851      	ldr	r1, [r2, #4]
 801fedc:	ad06      	add	r5, sp, #24
 801fede:	c503      	stmia	r5!, {r0, r1}
 801fee0:	6818      	ldr	r0, [r3, #0]
 801fee2:	6859      	ldr	r1, [r3, #4]
 801fee4:	ad08      	add	r5, sp, #32
 801fee6:	c503      	stmia	r5!, {r0, r1}
 801fee8:	a806      	add	r0, sp, #24
 801feea:	f7fa f9d7 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801feee:	4631      	mov	r1, r6
 801fef0:	a808      	add	r0, sp, #32
 801fef2:	f7fa f9bb 	bl	801a26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fef6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fefa:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801fefe:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801ff02:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801ff06:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801ff0a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801ff0e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801ff12:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ff16:	4f5d      	ldr	r7, [pc, #372]	; (802008c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801ff18:	440a      	add	r2, r1
 801ff1a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ff1e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ff22:	6838      	ldr	r0, [r7, #0]
 801ff24:	4413      	add	r3, r2
 801ff26:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ff2a:	6803      	ldr	r3, [r0, #0]
 801ff2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ff2e:	4798      	blx	r3
 801ff30:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ff34:	46b9      	mov	r9, r7
 801ff36:	d019      	beq.n	801ff6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ff38:	f010 0f04 	tst.w	r0, #4
 801ff3c:	d01a      	beq.n	801ff74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801ff3e:	f8d9 0000 	ldr.w	r0, [r9]
 801ff42:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ff46:	6801      	ldr	r1, [r0, #0]
 801ff48:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ff4c:	e9cd b403 	strd	fp, r4, [sp, #12]
 801ff50:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801ff54:	9402      	str	r4, [sp, #8]
 801ff56:	b2ad      	uxth	r5, r5
 801ff58:	fa1f f488 	uxth.w	r4, r8
 801ff5c:	9501      	str	r5, [sp, #4]
 801ff5e:	9400      	str	r4, [sp, #0]
 801ff60:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801ff62:	4631      	mov	r1, r6
 801ff64:	47a0      	blx	r4
 801ff66:	b00b      	add	sp, #44	; 0x2c
 801ff68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff6c:	b914      	cbnz	r4, 801ff74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801ff6e:	f010 0f01 	tst.w	r0, #1
 801ff72:	e7e3      	b.n	801ff3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801ff74:	f8d9 0000 	ldr.w	r0, [r9]
 801ff78:	6803      	ldr	r3, [r0, #0]
 801ff7a:	6a1b      	ldr	r3, [r3, #32]
 801ff7c:	4798      	blx	r3
 801ff7e:	4b44      	ldr	r3, [pc, #272]	; (8020090 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 801ff80:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801ff84:	881a      	ldrh	r2, [r3, #0]
 801ff86:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801ff8a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ff8e:	fb02 1404 	mla	r4, r2, r4, r1
 801ff92:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ff96:	469a      	mov	sl, r3
 801ff98:	fb05 f502 	mul.w	r5, r5, r2
 801ff9c:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801ffa0:	d058      	beq.n	8020054 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 801ffa2:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801ffa6:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801ffaa:	fa1f f28b 	uxth.w	r2, fp
 801ffae:	fa1f f989 	uxth.w	r9, r9
 801ffb2:	469e      	mov	lr, r3
 801ffb4:	42ac      	cmp	r4, r5
 801ffb6:	d263      	bcs.n	8020080 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801ffb8:	eb04 0a07 	add.w	sl, r4, r7
 801ffbc:	4554      	cmp	r4, sl
 801ffbe:	d23c      	bcs.n	802003a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 801ffc0:	8821      	ldrh	r1, [r4, #0]
 801ffc2:	f836 3b02 	ldrh.w	r3, [r6], #2
 801ffc6:	1208      	asrs	r0, r1, #8
 801ffc8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801ffcc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ffd0:	fb10 f009 	smulbb	r0, r0, r9
 801ffd4:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801ffd8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ffdc:	00c9      	lsls	r1, r1, #3
 801ffde:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ffe2:	b2c9      	uxtb	r1, r1
 801ffe4:	10d8      	asrs	r0, r3, #3
 801ffe6:	00db      	lsls	r3, r3, #3
 801ffe8:	fb11 f109 	smulbb	r1, r1, r9
 801ffec:	b2db      	uxtb	r3, r3
 801ffee:	fa1f fc8c 	uxth.w	ip, ip
 801fff2:	fb03 1302 	mla	r3, r3, r2, r1
 801fff6:	b29b      	uxth	r3, r3
 801fff8:	f10c 0101 	add.w	r1, ip, #1
 801fffc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020000:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8020004:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020008:	fb1b fb09 	smulbb	fp, fp, r9
 802000c:	1c59      	adds	r1, r3, #1
 802000e:	fb00 b002 	mla	r0, r0, r2, fp
 8020012:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020016:	b280      	uxth	r0, r0
 8020018:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802001c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020020:	ea4c 0c03 	orr.w	ip, ip, r3
 8020024:	1c43      	adds	r3, r0, #1
 8020026:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802002a:	0940      	lsrs	r0, r0, #5
 802002c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020030:	ea4c 0c00 	orr.w	ip, ip, r0
 8020034:	f824 cb02 	strh.w	ip, [r4], #2
 8020038:	e7c0      	b.n	801ffbc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 802003a:	f8be 3000 	ldrh.w	r3, [lr]
 802003e:	eba3 0308 	sub.w	r3, r3, r8
 8020042:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020046:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802004a:	eba3 0308 	sub.w	r3, r3, r8
 802004e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020052:	e7af      	b.n	801ffb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8020054:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020058:	f8d9 0000 	ldr.w	r0, [r9]
 802005c:	42ac      	cmp	r4, r5
 802005e:	6803      	ldr	r3, [r0, #0]
 8020060:	d20e      	bcs.n	8020080 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8020062:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 8020066:	4632      	mov	r2, r6
 8020068:	463b      	mov	r3, r7
 802006a:	4621      	mov	r1, r4
 802006c:	47c0      	blx	r8
 802006e:	f8ba 3000 	ldrh.w	r3, [sl]
 8020072:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020076:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802007a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802007e:	e7eb      	b.n	8020058 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8020080:	4b02      	ldr	r3, [pc, #8]	; (802008c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8020082:	6818      	ldr	r0, [r3, #0]
 8020084:	6803      	ldr	r3, [r0, #0]
 8020086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020088:	4798      	blx	r3
 802008a:	e76c      	b.n	801ff66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 802008c:	2000b734 	.word	0x2000b734
 8020090:	2000b72e 	.word	0x2000b72e

08020094 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020094:	b510      	push	{r4, lr}
 8020096:	2104      	movs	r1, #4
 8020098:	4604      	mov	r4, r0
 802009a:	f009 f87a 	bl	8029192 <_ZdlPvj>
 802009e:	4620      	mov	r0, r4
 80200a0:	bd10      	pop	{r4, pc}

080200a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80200a2:	b510      	push	{r4, lr}
 80200a4:	2104      	movs	r1, #4
 80200a6:	4604      	mov	r4, r0
 80200a8:	f009 f873 	bl	8029192 <_ZdlPvj>
 80200ac:	4620      	mov	r0, r4
 80200ae:	bd10      	pop	{r4, pc}

080200b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80200b0:	b510      	push	{r4, lr}
 80200b2:	2104      	movs	r1, #4
 80200b4:	4604      	mov	r4, r0
 80200b6:	f009 f86c 	bl	8029192 <_ZdlPvj>
 80200ba:	4620      	mov	r0, r4
 80200bc:	bd10      	pop	{r4, pc}

080200be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80200be:	b510      	push	{r4, lr}
 80200c0:	2104      	movs	r1, #4
 80200c2:	4604      	mov	r4, r0
 80200c4:	f009 f865 	bl	8029192 <_ZdlPvj>
 80200c8:	4620      	mov	r0, r4
 80200ca:	bd10      	pop	{r4, pc}

080200cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80200cc:	b510      	push	{r4, lr}
 80200ce:	2104      	movs	r1, #4
 80200d0:	4604      	mov	r4, r0
 80200d2:	f009 f85e 	bl	8029192 <_ZdlPvj>
 80200d6:	4620      	mov	r0, r4
 80200d8:	bd10      	pop	{r4, pc}

080200da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80200da:	b510      	push	{r4, lr}
 80200dc:	2104      	movs	r1, #4
 80200de:	4604      	mov	r4, r0
 80200e0:	f009 f857 	bl	8029192 <_ZdlPvj>
 80200e4:	4620      	mov	r0, r4
 80200e6:	bd10      	pop	{r4, pc}

080200e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80200e8:	b510      	push	{r4, lr}
 80200ea:	2104      	movs	r1, #4
 80200ec:	4604      	mov	r4, r0
 80200ee:	f009 f850 	bl	8029192 <_ZdlPvj>
 80200f2:	4620      	mov	r0, r4
 80200f4:	bd10      	pop	{r4, pc}

080200f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80200f6:	b510      	push	{r4, lr}
 80200f8:	2104      	movs	r1, #4
 80200fa:	4604      	mov	r4, r0
 80200fc:	f009 f849 	bl	8029192 <_ZdlPvj>
 8020100:	4620      	mov	r0, r4
 8020102:	bd10      	pop	{r4, pc}

08020104 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020104:	b510      	push	{r4, lr}
 8020106:	2104      	movs	r1, #4
 8020108:	4604      	mov	r4, r0
 802010a:	f009 f842 	bl	8029192 <_ZdlPvj>
 802010e:	4620      	mov	r0, r4
 8020110:	bd10      	pop	{r4, pc}

08020112 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020112:	b510      	push	{r4, lr}
 8020114:	2104      	movs	r1, #4
 8020116:	4604      	mov	r4, r0
 8020118:	f009 f83b 	bl	8029192 <_ZdlPvj>
 802011c:	4620      	mov	r0, r4
 802011e:	bd10      	pop	{r4, pc}

08020120 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020120:	b510      	push	{r4, lr}
 8020122:	2104      	movs	r1, #4
 8020124:	4604      	mov	r4, r0
 8020126:	f009 f834 	bl	8029192 <_ZdlPvj>
 802012a:	4620      	mov	r0, r4
 802012c:	bd10      	pop	{r4, pc}

0802012e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802012e:	b510      	push	{r4, lr}
 8020130:	2104      	movs	r1, #4
 8020132:	4604      	mov	r4, r0
 8020134:	f009 f82d 	bl	8029192 <_ZdlPvj>
 8020138:	4620      	mov	r0, r4
 802013a:	bd10      	pop	{r4, pc}

0802013c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802013c:	b510      	push	{r4, lr}
 802013e:	2104      	movs	r1, #4
 8020140:	4604      	mov	r4, r0
 8020142:	f009 f826 	bl	8029192 <_ZdlPvj>
 8020146:	4620      	mov	r0, r4
 8020148:	bd10      	pop	{r4, pc}

0802014a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802014a:	b510      	push	{r4, lr}
 802014c:	2104      	movs	r1, #4
 802014e:	4604      	mov	r4, r0
 8020150:	f009 f81f 	bl	8029192 <_ZdlPvj>
 8020154:	4620      	mov	r0, r4
 8020156:	bd10      	pop	{r4, pc}

08020158 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020158:	b510      	push	{r4, lr}
 802015a:	2104      	movs	r1, #4
 802015c:	4604      	mov	r4, r0
 802015e:	f009 f818 	bl	8029192 <_ZdlPvj>
 8020162:	4620      	mov	r0, r4
 8020164:	bd10      	pop	{r4, pc}

08020166 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020166:	b510      	push	{r4, lr}
 8020168:	2104      	movs	r1, #4
 802016a:	4604      	mov	r4, r0
 802016c:	f009 f811 	bl	8029192 <_ZdlPvj>
 8020170:	4620      	mov	r0, r4
 8020172:	bd10      	pop	{r4, pc}

08020174 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020174:	b510      	push	{r4, lr}
 8020176:	2104      	movs	r1, #4
 8020178:	4604      	mov	r4, r0
 802017a:	f009 f80a 	bl	8029192 <_ZdlPvj>
 802017e:	4620      	mov	r0, r4
 8020180:	bd10      	pop	{r4, pc}

08020182 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020182:	b510      	push	{r4, lr}
 8020184:	2104      	movs	r1, #4
 8020186:	4604      	mov	r4, r0
 8020188:	f009 f803 	bl	8029192 <_ZdlPvj>
 802018c:	4620      	mov	r0, r4
 802018e:	bd10      	pop	{r4, pc}

08020190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020190:	b510      	push	{r4, lr}
 8020192:	2104      	movs	r1, #4
 8020194:	4604      	mov	r4, r0
 8020196:	f008 fffc 	bl	8029192 <_ZdlPvj>
 802019a:	4620      	mov	r0, r4
 802019c:	bd10      	pop	{r4, pc}

0802019e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802019e:	b510      	push	{r4, lr}
 80201a0:	2104      	movs	r1, #4
 80201a2:	4604      	mov	r4, r0
 80201a4:	f008 fff5 	bl	8029192 <_ZdlPvj>
 80201a8:	4620      	mov	r0, r4
 80201aa:	bd10      	pop	{r4, pc}

080201ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80201ac:	b510      	push	{r4, lr}
 80201ae:	2104      	movs	r1, #4
 80201b0:	4604      	mov	r4, r0
 80201b2:	f008 ffee 	bl	8029192 <_ZdlPvj>
 80201b6:	4620      	mov	r0, r4
 80201b8:	bd10      	pop	{r4, pc}

080201ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80201ba:	b510      	push	{r4, lr}
 80201bc:	2104      	movs	r1, #4
 80201be:	4604      	mov	r4, r0
 80201c0:	f008 ffe7 	bl	8029192 <_ZdlPvj>
 80201c4:	4620      	mov	r0, r4
 80201c6:	bd10      	pop	{r4, pc}

080201c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80201c8:	b510      	push	{r4, lr}
 80201ca:	2104      	movs	r1, #4
 80201cc:	4604      	mov	r4, r0
 80201ce:	f008 ffe0 	bl	8029192 <_ZdlPvj>
 80201d2:	4620      	mov	r0, r4
 80201d4:	bd10      	pop	{r4, pc}

080201d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80201d6:	b510      	push	{r4, lr}
 80201d8:	2104      	movs	r1, #4
 80201da:	4604      	mov	r4, r0
 80201dc:	f008 ffd9 	bl	8029192 <_ZdlPvj>
 80201e0:	4620      	mov	r0, r4
 80201e2:	bd10      	pop	{r4, pc}

080201e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80201e4:	b510      	push	{r4, lr}
 80201e6:	2104      	movs	r1, #4
 80201e8:	4604      	mov	r4, r0
 80201ea:	f008 ffd2 	bl	8029192 <_ZdlPvj>
 80201ee:	4620      	mov	r0, r4
 80201f0:	bd10      	pop	{r4, pc}

080201f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80201f2:	b510      	push	{r4, lr}
 80201f4:	2104      	movs	r1, #4
 80201f6:	4604      	mov	r4, r0
 80201f8:	f008 ffcb 	bl	8029192 <_ZdlPvj>
 80201fc:	4620      	mov	r0, r4
 80201fe:	bd10      	pop	{r4, pc}

08020200 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020200:	b510      	push	{r4, lr}
 8020202:	2104      	movs	r1, #4
 8020204:	4604      	mov	r4, r0
 8020206:	f008 ffc4 	bl	8029192 <_ZdlPvj>
 802020a:	4620      	mov	r0, r4
 802020c:	bd10      	pop	{r4, pc}

0802020e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802020e:	b510      	push	{r4, lr}
 8020210:	2104      	movs	r1, #4
 8020212:	4604      	mov	r4, r0
 8020214:	f008 ffbd 	bl	8029192 <_ZdlPvj>
 8020218:	4620      	mov	r0, r4
 802021a:	bd10      	pop	{r4, pc}

0802021c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 802021c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020220:	460d      	mov	r5, r1
 8020222:	b087      	sub	sp, #28
 8020224:	4614      	mov	r4, r2
 8020226:	4698      	mov	r8, r3
 8020228:	b333      	cbz	r3, 8020278 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802022a:	4608      	mov	r0, r1
 802022c:	f7f7 f959 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020230:	bb10      	cbnz	r0, 8020278 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020232:	6828      	ldr	r0, [r5, #0]
 8020234:	6869      	ldr	r1, [r5, #4]
 8020236:	4e73      	ldr	r6, [pc, #460]	; (8020404 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 8020238:	ab04      	add	r3, sp, #16
 802023a:	c303      	stmia	r3!, {r0, r1}
 802023c:	a804      	add	r0, sp, #16
 802023e:	f7fa f82d 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020242:	6830      	ldr	r0, [r6, #0]
 8020244:	6803      	ldr	r3, [r0, #0]
 8020246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020248:	4798      	blx	r3
 802024a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802024e:	d016      	beq.n	802027e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020250:	f010 0f08 	tst.w	r0, #8
 8020254:	d016      	beq.n	8020284 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8020256:	6830      	ldr	r0, [r6, #0]
 8020258:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 802025c:	6801      	ldr	r1, [r0, #0]
 802025e:	9501      	str	r5, [sp, #4]
 8020260:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8020264:	f8cd 8008 	str.w	r8, [sp, #8]
 8020268:	9500      	str	r5, [sp, #0]
 802026a:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 802026c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020270:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020274:	4621      	mov	r1, r4
 8020276:	47a8      	blx	r5
 8020278:	b007      	add	sp, #28
 802027a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802027e:	f010 0f02 	tst.w	r0, #2
 8020282:	e7e7      	b.n	8020254 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 8020284:	6830      	ldr	r0, [r6, #0]
 8020286:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 802028a:	6803      	ldr	r3, [r0, #0]
 802028c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8020290:	6a1b      	ldr	r3, [r3, #32]
 8020292:	4798      	blx	r3
 8020294:	495c      	ldr	r1, [pc, #368]	; (8020408 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 8020296:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 802029a:	880b      	ldrh	r3, [r1, #0]
 802029c:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80202a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80202a4:	fb03 c202 	mla	r2, r3, r2, ip
 80202a8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80202ac:	468e      	mov	lr, r1
 80202ae:	fb07 f203 	mul.w	r2, r7, r3
 80202b2:	d053      	beq.n	802035c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 80202b4:	fa1f f388 	uxth.w	r3, r8
 80202b8:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 80202bc:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80202c0:	ea4f 2814 	mov.w	r8, r4, lsr #8
 80202c4:	00e4      	lsls	r4, r4, #3
 80202c6:	b2e4      	uxtb	r4, r4
 80202c8:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80202cc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80202d0:	fb08 f803 	mul.w	r8, r8, r3
 80202d4:	fb09 f903 	mul.w	r9, r9, r3
 80202d8:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 80202dc:	4363      	muls	r3, r4
 80202de:	006d      	lsls	r5, r5, #1
 80202e0:	b2bc      	uxth	r4, r7
 80202e2:	4288      	cmp	r0, r1
 80202e4:	f080 8088 	bcs.w	80203f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80202e8:	eb00 0a05 	add.w	sl, r0, r5
 80202ec:	4550      	cmp	r0, sl
 80202ee:	d22f      	bcs.n	8020350 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 80202f0:	8802      	ldrh	r2, [r0, #0]
 80202f2:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80202f6:	10d7      	asrs	r7, r2, #3
 80202f8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80202fc:	00d2      	lsls	r2, r2, #3
 80202fe:	fb1c fc04 	smulbb	ip, ip, r4
 8020302:	b2d2      	uxtb	r2, r2
 8020304:	44c4      	add	ip, r8
 8020306:	fb12 f204 	smulbb	r2, r2, r4
 802030a:	fa1f fc8c 	uxth.w	ip, ip
 802030e:	441a      	add	r2, r3
 8020310:	b292      	uxth	r2, r2
 8020312:	f10c 0b01 	add.w	fp, ip, #1
 8020316:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802031a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802031e:	fb17 f704 	smulbb	r7, r7, r4
 8020322:	f102 0b01 	add.w	fp, r2, #1
 8020326:	444f      	add	r7, r9
 8020328:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802032c:	b2bf      	uxth	r7, r7
 802032e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020332:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020336:	ea4c 0202 	orr.w	r2, ip, r2
 802033a:	f107 0c01 	add.w	ip, r7, #1
 802033e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8020342:	097f      	lsrs	r7, r7, #5
 8020344:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020348:	433a      	orrs	r2, r7
 802034a:	f820 2b02 	strh.w	r2, [r0], #2
 802034e:	e7cd      	b.n	80202ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 8020350:	f8be 2000 	ldrh.w	r2, [lr]
 8020354:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 8020358:	4410      	add	r0, r2
 802035a:	e7c2      	b.n	80202e2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 802035c:	07db      	lsls	r3, r3, #31
 802035e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020362:	d50e      	bpl.n	8020382 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 8020364:	006d      	lsls	r5, r5, #1
 8020366:	4290      	cmp	r0, r2
 8020368:	d246      	bcs.n	80203f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 802036a:	1943      	adds	r3, r0, r5
 802036c:	4298      	cmp	r0, r3
 802036e:	d202      	bcs.n	8020376 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 8020370:	f820 4b02 	strh.w	r4, [r0], #2
 8020374:	e7fa      	b.n	802036c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 8020376:	f8be 3000 	ldrh.w	r3, [lr]
 802037a:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 802037e:	4418      	add	r0, r3
 8020380:	e7f1      	b.n	8020366 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 8020382:	0787      	lsls	r7, r0, #30
 8020384:	462b      	mov	r3, r5
 8020386:	d00a      	beq.n	802039e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 8020388:	4603      	mov	r3, r0
 802038a:	4293      	cmp	r3, r2
 802038c:	d205      	bcs.n	802039a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 802038e:	801c      	strh	r4, [r3, #0]
 8020390:	f8be 1000 	ldrh.w	r1, [lr]
 8020394:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8020398:	e7f7      	b.n	802038a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 802039a:	3002      	adds	r0, #2
 802039c:	1e6b      	subs	r3, r5, #1
 802039e:	07dd      	lsls	r5, r3, #31
 80203a0:	d50d      	bpl.n	80203be <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 80203a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80203a6:	3901      	subs	r1, #1
 80203a8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80203ac:	4291      	cmp	r1, r2
 80203ae:	d205      	bcs.n	80203bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 80203b0:	800c      	strh	r4, [r1, #0]
 80203b2:	f8be 5000 	ldrh.w	r5, [lr]
 80203b6:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 80203ba:	e7f7      	b.n	80203ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 80203bc:	3b01      	subs	r3, #1
 80203be:	b1db      	cbz	r3, 80203f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80203c0:	b2a1      	uxth	r1, r4
 80203c2:	105b      	asrs	r3, r3, #1
 80203c4:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80203c8:	009b      	lsls	r3, r3, #2
 80203ca:	4290      	cmp	r0, r2
 80203cc:	d214      	bcs.n	80203f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80203ce:	0781      	lsls	r1, r0, #30
 80203d0:	d006      	beq.n	80203e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 80203d2:	4b0e      	ldr	r3, [pc, #56]	; (802040c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 80203d4:	4a0e      	ldr	r2, [pc, #56]	; (8020410 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 80203d6:	480f      	ldr	r0, [pc, #60]	; (8020414 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 80203d8:	f44f 7162 	mov.w	r1, #904	; 0x388
 80203dc:	f009 f804 	bl	80293e8 <__assert_func>
 80203e0:	18c5      	adds	r5, r0, r3
 80203e2:	4601      	mov	r1, r0
 80203e4:	42a9      	cmp	r1, r5
 80203e6:	d202      	bcs.n	80203ee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 80203e8:	f841 4b04 	str.w	r4, [r1], #4
 80203ec:	e7fa      	b.n	80203e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 80203ee:	f8be 1000 	ldrh.w	r1, [lr]
 80203f2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80203f6:	e7e8      	b.n	80203ca <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 80203f8:	6830      	ldr	r0, [r6, #0]
 80203fa:	6803      	ldr	r3, [r0, #0]
 80203fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203fe:	4798      	blx	r3
 8020400:	e73a      	b.n	8020278 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020402:	bf00      	nop
 8020404:	2000b734 	.word	0x2000b734
 8020408:	2000b72e 	.word	0x2000b72e
 802040c:	080309c0 	.word	0x080309c0
 8020410:	08031178 	.word	0x08031178
 8020414:	080309ef 	.word	0x080309ef

08020418 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802041c:	4f97      	ldr	r7, [pc, #604]	; (802067c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 802041e:	4616      	mov	r6, r2
 8020420:	683a      	ldr	r2, [r7, #0]
 8020422:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8020426:	2a02      	cmp	r2, #2
 8020428:	b08f      	sub	sp, #60	; 0x3c
 802042a:	4604      	mov	r4, r0
 802042c:	4689      	mov	r9, r1
 802042e:	d106      	bne.n	802043e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020430:	4b93      	ldr	r3, [pc, #588]	; (8020680 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8020432:	4a94      	ldr	r2, [pc, #592]	; (8020684 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020434:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8020438:	4893      	ldr	r0, [pc, #588]	; (8020688 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 802043a:	f008 ffd5 	bl	80293e8 <__assert_func>
 802043e:	ad0e      	add	r5, sp, #56	; 0x38
 8020440:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8020444:	4628      	mov	r0, r5
 8020446:	f7fd fa4f 	bl	801d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802044a:	6823      	ldr	r3, [r4, #0]
 802044c:	4680      	mov	r8, r0
 802044e:	6a1b      	ldr	r3, [r3, #32]
 8020450:	4620      	mov	r0, r4
 8020452:	4798      	blx	r3
 8020454:	4580      	cmp	r8, r0
 8020456:	d004      	beq.n	8020462 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020458:	4b8c      	ldr	r3, [pc, #560]	; (802068c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 802045a:	4a8a      	ldr	r2, [pc, #552]	; (8020684 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 802045c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8020460:	e7ea      	b.n	8020438 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020462:	4628      	mov	r0, r5
 8020464:	f7fd f9b6 	bl	801d7d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020468:	4680      	mov	r8, r0
 802046a:	b920      	cbnz	r0, 8020476 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 802046c:	4b88      	ldr	r3, [pc, #544]	; (8020690 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 802046e:	4a85      	ldr	r2, [pc, #532]	; (8020684 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020470:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020474:	e7e0      	b.n	8020438 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020476:	6830      	ldr	r0, [r6, #0]
 8020478:	6871      	ldr	r1, [r6, #4]
 802047a:	f9b6 a000 	ldrsh.w	sl, [r6]
 802047e:	ab06      	add	r3, sp, #24
 8020480:	c303      	stmia	r3!, {r0, r1}
 8020482:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020486:	f8d9 0000 	ldr.w	r0, [r9]
 802048a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 802048e:	ab08      	add	r3, sp, #32
 8020490:	c303      	stmia	r3!, {r0, r1}
 8020492:	4628      	mov	r0, r5
 8020494:	f7fd f896 	bl	801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020498:	4606      	mov	r6, r0
 802049a:	4628      	mov	r0, r5
 802049c:	f7fd f8cc 	bl	801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80204a0:	f10d 0b20 	add.w	fp, sp, #32
 80204a4:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80204a8:	a806      	add	r0, sp, #24
 80204aa:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80204ae:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80204b2:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 80204b6:	f7f9 fef1 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204ba:	4658      	mov	r0, fp
 80204bc:	f7f9 feee 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204c0:	a80a      	add	r0, sp, #40	; 0x28
 80204c2:	f7f9 feeb 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204c6:	4d73      	ldr	r5, [pc, #460]	; (8020694 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80204c8:	4b73      	ldr	r3, [pc, #460]	; (8020698 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80204ca:	f9b5 2000 	ldrsh.w	r2, [r5]
 80204ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80204d2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80204d6:	2100      	movs	r1, #0
 80204d8:	910c      	str	r1, [sp, #48]	; 0x30
 80204da:	4658      	mov	r0, fp
 80204dc:	a90c      	add	r1, sp, #48	; 0x30
 80204de:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80204e2:	f7f6 ffbb 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 80204e6:	4658      	mov	r0, fp
 80204e8:	f7f6 fffb 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80204ec:	2800      	cmp	r0, #0
 80204ee:	f040 8099 	bne.w	8020624 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80204f2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80204f6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80204fa:	4288      	cmp	r0, r1
 80204fc:	db37      	blt.n	802056e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 80204fe:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8020502:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020506:	429a      	cmp	r2, r3
 8020508:	db31      	blt.n	802056e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 802050a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 802050e:	4430      	add	r0, r6
 8020510:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020514:	4431      	add	r1, r6
 8020516:	b200      	sxth	r0, r0
 8020518:	b209      	sxth	r1, r1
 802051a:	4288      	cmp	r0, r1
 802051c:	dc27      	bgt.n	802056e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 802051e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8020522:	440a      	add	r2, r1
 8020524:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8020528:	440b      	add	r3, r1
 802052a:	b212      	sxth	r2, r2
 802052c:	b21b      	sxth	r3, r3
 802052e:	429a      	cmp	r2, r3
 8020530:	dc1d      	bgt.n	802056e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8020532:	6823      	ldr	r3, [r4, #0]
 8020534:	4620      	mov	r0, r4
 8020536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020538:	4798      	blx	r3
 802053a:	4682      	mov	sl, r0
 802053c:	6838      	ldr	r0, [r7, #0]
 802053e:	6803      	ldr	r3, [r0, #0]
 8020540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020542:	4798      	blx	r3
 8020544:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020548:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802054c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020550:	1a5b      	subs	r3, r3, r1
 8020552:	b29b      	uxth	r3, r3
 8020554:	b21c      	sxth	r4, r3
 8020556:	2c00      	cmp	r4, #0
 8020558:	dc0e      	bgt.n	8020578 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 802055a:	bf1f      	itttt	ne
 802055c:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8020560:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8020564:	185b      	addne	r3, r3, r1
 8020566:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 802056a:	4644      	mov	r4, r8
 802056c:	e009      	b.n	8020582 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 802056e:	4b4b      	ldr	r3, [pc, #300]	; (802069c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8020570:	4a44      	ldr	r2, [pc, #272]	; (8020684 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020572:	f240 21da 	movw	r1, #730	; 0x2da
 8020576:	e75f      	b.n	8020438 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020578:	1ad3      	subs	r3, r2, r3
 802057a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802057e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020582:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8020586:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802058a:	1b9b      	subs	r3, r3, r6
 802058c:	b29b      	uxth	r3, r3
 802058e:	b219      	sxth	r1, r3
 8020590:	2900      	cmp	r1, #0
 8020592:	dd4b      	ble.n	802062c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 8020594:	4351      	muls	r1, r2
 8020596:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802059a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 802059e:	1acb      	subs	r3, r1, r3
 80205a0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80205a4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80205a8:	2e00      	cmp	r6, #0
 80205aa:	dd3b      	ble.n	8020624 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80205ac:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	dd37      	ble.n	8020624 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80205b4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80205b8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80205bc:	fb0a f90c 	mul.w	r9, sl, ip
 80205c0:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 80205c4:	4481      	add	r9, r0
 80205c6:	8828      	ldrh	r0, [r5, #0]
 80205c8:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80205cc:	42ae      	cmp	r6, r5
 80205ce:	bfa8      	it	ge
 80205d0:	462e      	movge	r6, r5
 80205d2:	1a41      	subs	r1, r0, r1
 80205d4:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80205d8:	428e      	cmp	r6, r1
 80205da:	bfa8      	it	ge
 80205dc:	460e      	movge	r6, r1
 80205de:	429d      	cmp	r5, r3
 80205e0:	bfa8      	it	ge
 80205e2:	461d      	movge	r5, r3
 80205e4:	4b2c      	ldr	r3, [pc, #176]	; (8020698 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80205e6:	881b      	ldrh	r3, [r3, #0]
 80205e8:	eba3 030c 	sub.w	r3, r3, ip
 80205ec:	429d      	cmp	r5, r3
 80205ee:	bfa8      	it	ge
 80205f0:	461d      	movge	r5, r3
 80205f2:	42b0      	cmp	r0, r6
 80205f4:	d12c      	bne.n	8020650 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 80205f6:	4290      	cmp	r0, r2
 80205f8:	d12a      	bne.n	8020650 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 80205fa:	6838      	ldr	r0, [r7, #0]
 80205fc:	9203      	str	r2, [sp, #12]
 80205fe:	6803      	ldr	r3, [r0, #0]
 8020600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020602:	4798      	blx	r3
 8020604:	07c3      	lsls	r3, r0, #31
 8020606:	d51a      	bpl.n	802063e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 8020608:	9a03      	ldr	r2, [sp, #12]
 802060a:	6838      	ldr	r0, [r7, #0]
 802060c:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8020610:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8020614:	6803      	ldr	r3, [r0, #0]
 8020616:	9200      	str	r2, [sp, #0]
 8020618:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 802061a:	e89b 0006 	ldmia.w	fp, {r1, r2}
 802061e:	4623      	mov	r3, r4
 8020620:	47a8      	blx	r5
 8020622:	4680      	mov	r8, r0
 8020624:	4640      	mov	r0, r8
 8020626:	b00f      	add	sp, #60	; 0x3c
 8020628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802062c:	bf1f      	itttt	ne
 802062e:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8020632:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8020636:	185b      	addne	r3, r3, r1
 8020638:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 802063c:	e7b2      	b.n	80205a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 802063e:	6838      	ldr	r0, [r7, #0]
 8020640:	6803      	ldr	r3, [r0, #0]
 8020642:	464a      	mov	r2, r9
 8020644:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8020646:	4621      	mov	r1, r4
 8020648:	fb05 f30a 	mul.w	r3, r5, sl
 802064c:	47b0      	blx	r6
 802064e:	e7e9      	b.n	8020624 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8020650:	4355      	muls	r5, r2
 8020652:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8020656:	9303      	str	r3, [sp, #12]
 8020658:	0076      	lsls	r6, r6, #1
 802065a:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 802065e:	9b03      	ldr	r3, [sp, #12]
 8020660:	429c      	cmp	r4, r3
 8020662:	d2df      	bcs.n	8020624 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8020664:	6838      	ldr	r0, [r7, #0]
 8020666:	6803      	ldr	r3, [r0, #0]
 8020668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802066a:	464a      	mov	r2, r9
 802066c:	461d      	mov	r5, r3
 802066e:	4621      	mov	r1, r4
 8020670:	4633      	mov	r3, r6
 8020672:	47a8      	blx	r5
 8020674:	44d1      	add	r9, sl
 8020676:	445c      	add	r4, fp
 8020678:	e7f1      	b.n	802065e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 802067a:	bf00      	nop
 802067c:	2000b734 	.word	0x2000b734
 8020680:	080307e6 	.word	0x080307e6
 8020684:	0803105b 	.word	0x0803105b
 8020688:	080309ef 	.word	0x080309ef
 802068c:	08030898 	.word	0x08030898
 8020690:	080308ed 	.word	0x080308ed
 8020694:	2000b72e 	.word	0x2000b72e
 8020698:	2000b730 	.word	0x2000b730
 802069c:	0803092b 	.word	0x0803092b

080206a0 <_ZN8touchgfx8LCD16bppC1Ev>:
 80206a0:	2200      	movs	r2, #0
 80206a2:	4910      	ldr	r1, [pc, #64]	; (80206e4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 80206a4:	6042      	str	r2, [r0, #4]
 80206a6:	6001      	str	r1, [r0, #0]
 80206a8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80206ac:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80206b0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80206b4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80206b8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80206bc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80206c0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80206c4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80206c8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80206cc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80206d0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80206d4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80206d8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80206dc:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80206e0:	4770      	bx	lr
 80206e2:	bf00      	nop
 80206e4:	08030cd0 	.word	0x08030cd0

080206e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80206e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206ec:	460d      	mov	r5, r1
 80206ee:	b08b      	sub	sp, #44	; 0x2c
 80206f0:	4604      	mov	r4, r0
 80206f2:	6808      	ldr	r0, [r1, #0]
 80206f4:	6849      	ldr	r1, [r1, #4]
 80206f6:	4699      	mov	r9, r3
 80206f8:	ab06      	add	r3, sp, #24
 80206fa:	c303      	stmia	r3!, {r0, r1}
 80206fc:	6810      	ldr	r0, [r2, #0]
 80206fe:	6851      	ldr	r1, [r2, #4]
 8020700:	ab08      	add	r3, sp, #32
 8020702:	c303      	stmia	r3!, {r0, r1}
 8020704:	a806      	add	r0, sp, #24
 8020706:	f7f9 fdc9 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802070a:	4629      	mov	r1, r5
 802070c:	a808      	add	r0, sp, #32
 802070e:	f7f9 fdad 	bl	801a26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020712:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020716:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802071a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802071e:	4d5f      	ldr	r5, [pc, #380]	; (802089c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8020720:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020724:	6828      	ldr	r0, [r5, #0]
 8020726:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 802072a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802072e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020732:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020736:	440a      	add	r2, r1
 8020738:	f8ad 2020 	strh.w	r2, [sp, #32]
 802073c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020740:	4413      	add	r3, r2
 8020742:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020746:	6803      	ldr	r3, [r0, #0]
 8020748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802074a:	4798      	blx	r3
 802074c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020750:	d118      	bne.n	8020784 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8020752:	f010 0f20 	tst.w	r0, #32
 8020756:	6828      	ldr	r0, [r5, #0]
 8020758:	d017      	beq.n	802078a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 802075a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 802075e:	6801      	ldr	r1, [r0, #0]
 8020760:	9502      	str	r5, [sp, #8]
 8020762:	b2b6      	uxth	r6, r6
 8020764:	fa1f f588 	uxth.w	r5, r8
 8020768:	f8cd 900c 	str.w	r9, [sp, #12]
 802076c:	9601      	str	r6, [sp, #4]
 802076e:	9500      	str	r5, [sp, #0]
 8020770:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8020772:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020776:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802077a:	4621      	mov	r1, r4
 802077c:	47a8      	blx	r5
 802077e:	b00b      	add	sp, #44	; 0x2c
 8020780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020784:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020788:	e7e5      	b.n	8020756 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802078a:	6803      	ldr	r3, [r0, #0]
 802078c:	6a1b      	ldr	r3, [r3, #32]
 802078e:	4798      	blx	r3
 8020790:	4a43      	ldr	r2, [pc, #268]	; (80208a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8020792:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020796:	f8b2 e000 	ldrh.w	lr, [r2]
 802079a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802079e:	fb0e 1303 	mla	r3, lr, r3, r1
 80207a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80207a6:	fb0e fe06 	mul.w	lr, lr, r6
 80207aa:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80207ae:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 80207b2:	9305      	str	r3, [sp, #20]
 80207b4:	4692      	mov	sl, r2
 80207b6:	4570      	cmp	r0, lr
 80207b8:	d26a      	bcs.n	8020890 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 80207ba:	9b05      	ldr	r3, [sp, #20]
 80207bc:	4621      	mov	r1, r4
 80207be:	eb00 0b03 	add.w	fp, r0, r3
 80207c2:	4558      	cmp	r0, fp
 80207c4:	d257      	bcs.n	8020876 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 80207c6:	f851 4b04 	ldr.w	r4, [r1], #4
 80207ca:	0e22      	lsrs	r2, r4, #24
 80207cc:	d012      	beq.n	80207f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 80207ce:	2aff      	cmp	r2, #255	; 0xff
 80207d0:	ea4f 2714 	mov.w	r7, r4, lsr #8
 80207d4:	d110      	bne.n	80207f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80207d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80207da:	d10d      	bne.n	80207f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80207dc:	0963      	lsrs	r3, r4, #5
 80207de:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80207e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80207e6:	f027 0707 	bic.w	r7, r7, #7
 80207ea:	431f      	orrs	r7, r3
 80207ec:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80207f0:	433c      	orrs	r4, r7
 80207f2:	8004      	strh	r4, [r0, #0]
 80207f4:	3002      	adds	r0, #2
 80207f6:	e7e4      	b.n	80207c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 80207f8:	fb09 f302 	mul.w	r3, r9, r2
 80207fc:	1c5a      	adds	r2, r3, #1
 80207fe:	f8b0 c000 	ldrh.w	ip, [r0]
 8020802:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020806:	1212      	asrs	r2, r2, #8
 8020808:	b293      	uxth	r3, r2
 802080a:	ea4f 262c 	mov.w	r6, ip, asr #8
 802080e:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8020812:	43d2      	mvns	r2, r2
 8020814:	b2d2      	uxtb	r2, r2
 8020816:	fb15 f503 	smulbb	r5, r5, r3
 802081a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802081e:	fb06 5602 	mla	r6, r6, r2, r5
 8020822:	b2ff      	uxtb	r7, r7
 8020824:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020828:	b2e4      	uxtb	r4, r4
 802082a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802082e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020832:	fb17 f703 	smulbb	r7, r7, r3
 8020836:	fa5f fc8c 	uxtb.w	ip, ip
 802083a:	fb14 f403 	smulbb	r4, r4, r3
 802083e:	fb05 7702 	mla	r7, r5, r2, r7
 8020842:	fb0c 4202 	mla	r2, ip, r2, r4
 8020846:	b2b6      	uxth	r6, r6
 8020848:	b2bf      	uxth	r7, r7
 802084a:	b292      	uxth	r2, r2
 802084c:	1c73      	adds	r3, r6, #1
 802084e:	f102 0c01 	add.w	ip, r2, #1
 8020852:	1c7d      	adds	r5, r7, #1
 8020854:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020858:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802085c:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8020860:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020864:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020868:	097f      	lsrs	r7, r7, #5
 802086a:	4316      	orrs	r6, r2
 802086c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020870:	433e      	orrs	r6, r7
 8020872:	8006      	strh	r6, [r0, #0]
 8020874:	e7be      	b.n	80207f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8020876:	f8ba 3000 	ldrh.w	r3, [sl]
 802087a:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 802087e:	eba3 0308 	sub.w	r3, r3, r8
 8020882:	eba4 0408 	sub.w	r4, r4, r8
 8020886:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802088a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802088e:	e792      	b.n	80207b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8020890:	4b02      	ldr	r3, [pc, #8]	; (802089c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8020892:	6818      	ldr	r0, [r3, #0]
 8020894:	6803      	ldr	r3, [r0, #0]
 8020896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020898:	4798      	blx	r3
 802089a:	e770      	b.n	802077e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 802089c:	2000b734 	.word	0x2000b734
 80208a0:	2000b72e 	.word	0x2000b72e

080208a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80208a4:	b570      	push	{r4, r5, r6, lr}
 80208a6:	9d04      	ldr	r5, [sp, #16]
 80208a8:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80208ac:	460c      	mov	r4, r1
 80208ae:	4619      	mov	r1, r3
 80208b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80208b4:	2a0d      	cmp	r2, #13
 80208b6:	d820      	bhi.n	80208fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 80208b8:	e8df f002 	tbb	[pc, r2]
 80208bc:	18121807 	.word	0x18121807
 80208c0:	18181818 	.word	0x18181818
 80208c4:	18181818 	.word	0x18181818
 80208c8:	1818      	.short	0x1818
 80208ca:	6802      	ldr	r2, [r0, #0]
 80208cc:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80208d0:	68d6      	ldr	r6, [r2, #12]
 80208d2:	462b      	mov	r3, r5
 80208d4:	460a      	mov	r2, r1
 80208d6:	46b4      	mov	ip, r6
 80208d8:	4621      	mov	r1, r4
 80208da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80208de:	4760      	bx	ip
 80208e0:	462a      	mov	r2, r5
 80208e2:	4620      	mov	r0, r4
 80208e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80208e8:	f7ff befe 	b.w	80206e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80208ec:	4b03      	ldr	r3, [pc, #12]	; (80208fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 80208ee:	4a04      	ldr	r2, [pc, #16]	; (8020900 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 80208f0:	4804      	ldr	r0, [pc, #16]	; (8020904 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80208f2:	f240 21c1 	movw	r1, #705	; 0x2c1
 80208f6:	f008 fd77 	bl	80293e8 <__assert_func>
 80208fa:	bd70      	pop	{r4, r5, r6, pc}
 80208fc:	0803098b 	.word	0x0803098b
 8020900:	080310e1 	.word	0x080310e1
 8020904:	080309ef 	.word	0x080309ef

08020908 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802090c:	b093      	sub	sp, #76	; 0x4c
 802090e:	880f      	ldrh	r7, [r1, #0]
 8020910:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8020914:	4604      	mov	r4, r0
 8020916:	4688      	mov	r8, r1
 8020918:	4616      	mov	r6, r2
 802091a:	b12f      	cbz	r7, 8020928 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 802091c:	4b6f      	ldr	r3, [pc, #444]	; (8020adc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 802091e:	4a70      	ldr	r2, [pc, #448]	; (8020ae0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8020920:	4870      	ldr	r0, [pc, #448]	; (8020ae4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020922:	21e2      	movs	r1, #226	; 0xe2
 8020924:	f008 fd60 	bl	80293e8 <__assert_func>
 8020928:	6810      	ldr	r0, [r2, #0]
 802092a:	6851      	ldr	r1, [r2, #4]
 802092c:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8020aec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 8020930:	ad0e      	add	r5, sp, #56	; 0x38
 8020932:	c503      	stmia	r5!, {r0, r1}
 8020934:	6818      	ldr	r0, [r3, #0]
 8020936:	6859      	ldr	r1, [r3, #4]
 8020938:	ad10      	add	r5, sp, #64	; 0x40
 802093a:	c503      	stmia	r5!, {r0, r1}
 802093c:	a80e      	add	r0, sp, #56	; 0x38
 802093e:	f7f9 fcad 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020942:	4631      	mov	r1, r6
 8020944:	a810      	add	r0, sp, #64	; 0x40
 8020946:	f7f9 fc91 	bl	801a26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802094a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802094e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020952:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020956:	f8db 0000 	ldr.w	r0, [fp]
 802095a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 802095e:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8020962:	4e61      	ldr	r6, [pc, #388]	; (8020ae8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8020964:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020968:	440c      	add	r4, r1
 802096a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802096e:	440a      	add	r2, r1
 8020970:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020974:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020978:	4413      	add	r3, r2
 802097a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802097e:	6803      	ldr	r3, [r0, #0]
 8020980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020984:	4798      	blx	r3
 8020986:	2801      	cmp	r0, #1
 8020988:	d11d      	bne.n	80209c6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 802098a:	220b      	movs	r2, #11
 802098c:	9708      	str	r7, [sp, #32]
 802098e:	9207      	str	r2, [sp, #28]
 8020990:	8832      	ldrh	r2, [r6, #0]
 8020992:	f8cd a010 	str.w	sl, [sp, #16]
 8020996:	e9cd 0205 	strd	r0, r2, [sp, #20]
 802099a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 802099e:	9203      	str	r2, [sp, #12]
 80209a0:	fa1f f289 	uxth.w	r2, r9
 80209a4:	9201      	str	r2, [sp, #4]
 80209a6:	b2ad      	uxth	r5, r5
 80209a8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80209ac:	9200      	str	r2, [sp, #0]
 80209ae:	9502      	str	r5, [sp, #8]
 80209b0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80209b4:	f8db 0000 	ldr.w	r0, [fp]
 80209b8:	4642      	mov	r2, r8
 80209ba:	4621      	mov	r1, r4
 80209bc:	f7f7 f9b2 	bl	8017d24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80209c0:	b013      	add	sp, #76	; 0x4c
 80209c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209c6:	f8db 0000 	ldr.w	r0, [fp]
 80209ca:	6803      	ldr	r3, [r0, #0]
 80209cc:	6a1b      	ldr	r3, [r3, #32]
 80209ce:	4798      	blx	r3
 80209d0:	8832      	ldrh	r2, [r6, #0]
 80209d2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80209d6:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80209da:	960d      	str	r6, [sp, #52]	; 0x34
 80209dc:	fb02 1303 	mla	r3, r2, r3, r1
 80209e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80209e4:	4355      	muls	r5, r2
 80209e6:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 80209ea:	930c      	str	r3, [sp, #48]	; 0x30
 80209ec:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80209f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80209f2:	f04f 0e04 	mov.w	lr, #4
 80209f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209f8:	4298      	cmp	r0, r3
 80209fa:	d269      	bcs.n	8020ad0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 80209fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80209fe:	4621      	mov	r1, r4
 8020a00:	eb00 0b03 	add.w	fp, r0, r3
 8020a04:	4558      	cmp	r0, fp
 8020a06:	460b      	mov	r3, r1
 8020a08:	d256      	bcs.n	8020ab8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8020a0a:	781b      	ldrb	r3, [r3, #0]
 8020a0c:	fb1e e303 	smlabb	r3, lr, r3, lr
 8020a10:	3101      	adds	r1, #1
 8020a12:	f858 2003 	ldr.w	r2, [r8, r3]
 8020a16:	0e14      	lsrs	r4, r2, #24
 8020a18:	d012      	beq.n	8020a40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020a1a:	2cff      	cmp	r4, #255	; 0xff
 8020a1c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8020a20:	d110      	bne.n	8020a44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8020a22:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020a26:	d10d      	bne.n	8020a44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8020a28:	0953      	lsrs	r3, r2, #5
 8020a2a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020a2e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020a32:	f026 0607 	bic.w	r6, r6, #7
 8020a36:	431e      	orrs	r6, r3
 8020a38:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020a3c:	4332      	orrs	r2, r6
 8020a3e:	8002      	strh	r2, [r0, #0]
 8020a40:	3002      	adds	r0, #2
 8020a42:	e7df      	b.n	8020a04 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 8020a44:	fb0a f404 	mul.w	r4, sl, r4
 8020a48:	1c63      	adds	r3, r4, #1
 8020a4a:	8807      	ldrh	r7, [r0, #0]
 8020a4c:	eb03 2324 	add.w	r3, r3, r4, asr #8
 8020a50:	121b      	asrs	r3, r3, #8
 8020a52:	fa1f fc83 	uxth.w	ip, r3
 8020a56:	123d      	asrs	r5, r7, #8
 8020a58:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8020a5c:	43db      	mvns	r3, r3
 8020a5e:	b2db      	uxtb	r3, r3
 8020a60:	fb14 f40c 	smulbb	r4, r4, ip
 8020a64:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020a68:	fb05 4503 	mla	r5, r5, r3, r4
 8020a6c:	b2d2      	uxtb	r2, r2
 8020a6e:	10fc      	asrs	r4, r7, #3
 8020a70:	00ff      	lsls	r7, r7, #3
 8020a72:	b2ff      	uxtb	r7, r7
 8020a74:	fb12 f20c 	smulbb	r2, r2, ip
 8020a78:	fb07 2203 	mla	r2, r7, r3, r2
 8020a7c:	b2f6      	uxtb	r6, r6
 8020a7e:	b2ad      	uxth	r5, r5
 8020a80:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8020a84:	b292      	uxth	r2, r2
 8020a86:	fb16 f60c 	smulbb	r6, r6, ip
 8020a8a:	fb04 6603 	mla	r6, r4, r3, r6
 8020a8e:	1c6b      	adds	r3, r5, #1
 8020a90:	1c54      	adds	r4, r2, #1
 8020a92:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020a96:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020a9a:	b2b6      	uxth	r6, r6
 8020a9c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8020aa0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020aa4:	4325      	orrs	r5, r4
 8020aa6:	1c74      	adds	r4, r6, #1
 8020aa8:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020aac:	0976      	lsrs	r6, r6, #5
 8020aae:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020ab2:	4335      	orrs	r5, r6
 8020ab4:	8005      	strh	r5, [r0, #0]
 8020ab6:	e7c3      	b.n	8020a40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020aba:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8020abe:	881b      	ldrh	r3, [r3, #0]
 8020ac0:	eba4 0409 	sub.w	r4, r4, r9
 8020ac4:	eba3 0309 	sub.w	r3, r3, r9
 8020ac8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020acc:	440c      	add	r4, r1
 8020ace:	e792      	b.n	80209f6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8020ad0:	4b06      	ldr	r3, [pc, #24]	; (8020aec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8020ad2:	6818      	ldr	r0, [r3, #0]
 8020ad4:	6803      	ldr	r3, [r0, #0]
 8020ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ad8:	4798      	blx	r3
 8020ada:	e771      	b.n	80209c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020adc:	08030796 	.word	0x08030796
 8020ae0:	08030eb2 	.word	0x08030eb2
 8020ae4:	080309ef 	.word	0x080309ef
 8020ae8:	2000b72e 	.word	0x2000b72e
 8020aec:	2000b734 	.word	0x2000b734

08020af0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020af4:	4614      	mov	r4, r2
 8020af6:	880a      	ldrh	r2, [r1, #0]
 8020af8:	b091      	sub	sp, #68	; 0x44
 8020afa:	2a02      	cmp	r2, #2
 8020afc:	4607      	mov	r7, r0
 8020afe:	4689      	mov	r9, r1
 8020b00:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 8020b04:	d006      	beq.n	8020b14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8020b06:	4b77      	ldr	r3, [pc, #476]	; (8020ce4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 8020b08:	4a77      	ldr	r2, [pc, #476]	; (8020ce8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8020b0a:	4878      	ldr	r0, [pc, #480]	; (8020cec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 8020b0c:	f240 113b 	movw	r1, #315	; 0x13b
 8020b10:	f008 fc6a 	bl	80293e8 <__assert_func>
 8020b14:	2e00      	cmp	r6, #0
 8020b16:	d04b      	beq.n	8020bb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8020b18:	6820      	ldr	r0, [r4, #0]
 8020b1a:	6861      	ldr	r1, [r4, #4]
 8020b1c:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8020cf4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 8020b20:	ad0c      	add	r5, sp, #48	; 0x30
 8020b22:	c503      	stmia	r5!, {r0, r1}
 8020b24:	6818      	ldr	r0, [r3, #0]
 8020b26:	6859      	ldr	r1, [r3, #4]
 8020b28:	ad0e      	add	r5, sp, #56	; 0x38
 8020b2a:	c503      	stmia	r5!, {r0, r1}
 8020b2c:	a80c      	add	r0, sp, #48	; 0x30
 8020b2e:	f7f9 fbb5 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b32:	4621      	mov	r1, r4
 8020b34:	a80e      	add	r0, sp, #56	; 0x38
 8020b36:	f7f9 fb99 	bl	801a26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b3a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020b3e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020b42:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020b46:	f8da 0000 	ldr.w	r0, [sl]
 8020b4a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020b4e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8020b52:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020b56:	187c      	adds	r4, r7, r1
 8020b58:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020b5c:	4f64      	ldr	r7, [pc, #400]	; (8020cf0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 8020b5e:	440a      	add	r2, r1
 8020b60:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020b64:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020b68:	4413      	add	r3, r2
 8020b6a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020b6e:	6803      	ldr	r3, [r0, #0]
 8020b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020b74:	4798      	blx	r3
 8020b76:	2801      	cmp	r0, #1
 8020b78:	d11d      	bne.n	8020bb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8020b7a:	2200      	movs	r2, #0
 8020b7c:	210b      	movs	r1, #11
 8020b7e:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8020b82:	8839      	ldrh	r1, [r7, #0]
 8020b84:	9604      	str	r6, [sp, #16]
 8020b86:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8020b8a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020b8e:	9203      	str	r2, [sp, #12]
 8020b90:	fa1f f288 	uxth.w	r2, r8
 8020b94:	9201      	str	r2, [sp, #4]
 8020b96:	b2ad      	uxth	r5, r5
 8020b98:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020b9c:	9200      	str	r2, [sp, #0]
 8020b9e:	9502      	str	r5, [sp, #8]
 8020ba0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020ba4:	f8da 0000 	ldr.w	r0, [sl]
 8020ba8:	464a      	mov	r2, r9
 8020baa:	4621      	mov	r1, r4
 8020bac:	f7f7 f8ba 	bl	8017d24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020bb0:	b011      	add	sp, #68	; 0x44
 8020bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bb6:	f8da 0000 	ldr.w	r0, [sl]
 8020bba:	6803      	ldr	r3, [r0, #0]
 8020bbc:	6a1b      	ldr	r3, [r3, #32]
 8020bbe:	4798      	blx	r3
 8020bc0:	8839      	ldrh	r1, [r7, #0]
 8020bc2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020bc6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020bca:	2eff      	cmp	r6, #255	; 0xff
 8020bcc:	fb01 2303 	mla	r3, r1, r3, r2
 8020bd0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020bd4:	f109 0204 	add.w	r2, r9, #4
 8020bd8:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8020bdc:	fb05 f501 	mul.w	r5, r5, r1
 8020be0:	d05f      	beq.n	8020ca2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 8020be2:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 8020be6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020bea:	b2b6      	uxth	r6, r6
 8020bec:	fa1f f989 	uxth.w	r9, r9
 8020bf0:	970b      	str	r7, [sp, #44]	; 0x2c
 8020bf2:	42a8      	cmp	r0, r5
 8020bf4:	d26f      	bcs.n	8020cd6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 8020bf6:	eb00 010b 	add.w	r1, r0, fp
 8020bfa:	4288      	cmp	r0, r1
 8020bfc:	4623      	mov	r3, r4
 8020bfe:	d244      	bcs.n	8020c8a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 8020c00:	781b      	ldrb	r3, [r3, #0]
 8020c02:	8807      	ldrh	r7, [r0, #0]
 8020c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020c08:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8020c0c:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8020c10:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020c14:	fb1c fc09 	smulbb	ip, ip, r9
 8020c18:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 8020c1c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020c20:	00ff      	lsls	r7, r7, #3
 8020c22:	fb0e ce06 	mla	lr, lr, r6, ip
 8020c26:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020c2a:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 8020c2e:	b2ff      	uxtb	r7, r7
 8020c30:	00db      	lsls	r3, r3, #3
 8020c32:	fa1f fe8e 	uxth.w	lr, lr
 8020c36:	fb1a fa09 	smulbb	sl, sl, r9
 8020c3a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020c3e:	b2db      	uxtb	r3, r3
 8020c40:	fb17 f709 	smulbb	r7, r7, r9
 8020c44:	fb0c ac06 	mla	ip, ip, r6, sl
 8020c48:	fb03 7306 	mla	r3, r3, r6, r7
 8020c4c:	f10e 0a01 	add.w	sl, lr, #1
 8020c50:	b29b      	uxth	r3, r3
 8020c52:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8020c56:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 8020c5a:	f103 0e01 	add.w	lr, r3, #1
 8020c5e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8020c62:	fa1f fc8c 	uxth.w	ip, ip
 8020c66:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020c6a:	ea4a 0e03 	orr.w	lr, sl, r3
 8020c6e:	f10c 0a01 	add.w	sl, ip, #1
 8020c72:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8020c76:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020c7a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020c7e:	ea4e 0e0c 	orr.w	lr, lr, ip
 8020c82:	3401      	adds	r4, #1
 8020c84:	f820 eb02 	strh.w	lr, [r0], #2
 8020c88:	e7b7      	b.n	8020bfa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8020c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020c8c:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020c90:	881b      	ldrh	r3, [r3, #0]
 8020c92:	eba1 0108 	sub.w	r1, r1, r8
 8020c96:	eba3 0308 	sub.w	r3, r3, r8
 8020c9a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020c9e:	440c      	add	r4, r1
 8020ca0:	e7a7      	b.n	8020bf2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8020ca2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020ca6:	42a8      	cmp	r0, r5
 8020ca8:	d215      	bcs.n	8020cd6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 8020caa:	eb00 010b 	add.w	r1, r0, fp
 8020cae:	4288      	cmp	r0, r1
 8020cb0:	d206      	bcs.n	8020cc0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 8020cb2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020cba:	f820 3b02 	strh.w	r3, [r0], #2
 8020cbe:	e7f6      	b.n	8020cae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 8020cc0:	883b      	ldrh	r3, [r7, #0]
 8020cc2:	eba3 0308 	sub.w	r3, r3, r8
 8020cc6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020cca:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020cce:	eba3 0308 	sub.w	r3, r3, r8
 8020cd2:	441c      	add	r4, r3
 8020cd4:	e7e7      	b.n	8020ca6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 8020cd6:	4b07      	ldr	r3, [pc, #28]	; (8020cf4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8020cd8:	6818      	ldr	r0, [r3, #0]
 8020cda:	6803      	ldr	r3, [r0, #0]
 8020cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020cde:	4798      	blx	r3
 8020ce0:	e766      	b.n	8020bb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8020ce2:	bf00      	nop
 8020ce4:	08030654 	.word	0x08030654
 8020ce8:	08030d1c 	.word	0x08030d1c
 8020cec:	080309ef 	.word	0x080309ef
 8020cf0:	2000b72e 	.word	0x2000b72e
 8020cf4:	2000b734 	.word	0x2000b734

08020cf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cfc:	4614      	mov	r4, r2
 8020cfe:	880a      	ldrh	r2, [r1, #0]
 8020d00:	b091      	sub	sp, #68	; 0x44
 8020d02:	2a01      	cmp	r2, #1
 8020d04:	4606      	mov	r6, r0
 8020d06:	4688      	mov	r8, r1
 8020d08:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8020d0c:	d006      	beq.n	8020d1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8020d0e:	4b7c      	ldr	r3, [pc, #496]	; (8020f00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 8020d10:	4a7c      	ldr	r2, [pc, #496]	; (8020f04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 8020d12:	487d      	ldr	r0, [pc, #500]	; (8020f08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 8020d14:	f240 1197 	movw	r1, #407	; 0x197
 8020d18:	f008 fb66 	bl	80293e8 <__assert_func>
 8020d1c:	2f00      	cmp	r7, #0
 8020d1e:	d04b      	beq.n	8020db8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8020d20:	6820      	ldr	r0, [r4, #0]
 8020d22:	6861      	ldr	r1, [r4, #4]
 8020d24:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8020f14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8020d28:	ad0c      	add	r5, sp, #48	; 0x30
 8020d2a:	c503      	stmia	r5!, {r0, r1}
 8020d2c:	6818      	ldr	r0, [r3, #0]
 8020d2e:	6859      	ldr	r1, [r3, #4]
 8020d30:	ad0e      	add	r5, sp, #56	; 0x38
 8020d32:	c503      	stmia	r5!, {r0, r1}
 8020d34:	a80c      	add	r0, sp, #48	; 0x30
 8020d36:	f7f9 fab1 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d3a:	4621      	mov	r1, r4
 8020d3c:	a80e      	add	r0, sp, #56	; 0x38
 8020d3e:	f7f9 fa95 	bl	801a26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d42:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020d46:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020d4a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020d4e:	f8da 0000 	ldr.w	r0, [sl]
 8020d52:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8020d56:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 8020d5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020d5e:	1874      	adds	r4, r6, r1
 8020d60:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020d64:	4e69      	ldr	r6, [pc, #420]	; (8020f0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 8020d66:	440a      	add	r2, r1
 8020d68:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020d6c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020d70:	4413      	add	r3, r2
 8020d72:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020d76:	6803      	ldr	r3, [r0, #0]
 8020d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020d7c:	4798      	blx	r3
 8020d7e:	2801      	cmp	r0, #1
 8020d80:	d11d      	bne.n	8020dbe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8020d82:	220b      	movs	r2, #11
 8020d84:	2100      	movs	r1, #0
 8020d86:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8020d8a:	8832      	ldrh	r2, [r6, #0]
 8020d8c:	9704      	str	r7, [sp, #16]
 8020d8e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8020d92:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020d96:	9203      	str	r2, [sp, #12]
 8020d98:	fa1f f289 	uxth.w	r2, r9
 8020d9c:	9202      	str	r2, [sp, #8]
 8020d9e:	b2ad      	uxth	r5, r5
 8020da0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020da4:	9200      	str	r2, [sp, #0]
 8020da6:	9501      	str	r5, [sp, #4]
 8020da8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020dac:	f8da 0000 	ldr.w	r0, [sl]
 8020db0:	4642      	mov	r2, r8
 8020db2:	4621      	mov	r1, r4
 8020db4:	f7f6 ffb6 	bl	8017d24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020db8:	b011      	add	sp, #68	; 0x44
 8020dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dbe:	f8da 0000 	ldr.w	r0, [sl]
 8020dc2:	6803      	ldr	r3, [r0, #0]
 8020dc4:	6a1b      	ldr	r3, [r3, #32]
 8020dc6:	4798      	blx	r3
 8020dc8:	8832      	ldrh	r2, [r6, #0]
 8020dca:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020dce:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8020dd2:	2fff      	cmp	r7, #255	; 0xff
 8020dd4:	fb02 1303 	mla	r3, r2, r3, r1
 8020dd8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020ddc:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8020de0:	fb09 f902 	mul.w	r9, r9, r2
 8020de4:	d056      	beq.n	8020e94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 8020de6:	ea6f 0c07 	mvn.w	ip, r7
 8020dea:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8020dee:	b2bb      	uxth	r3, r7
 8020df0:	fa5f fc8c 	uxtb.w	ip, ip
 8020df4:	960b      	str	r6, [sp, #44]	; 0x2c
 8020df6:	4548      	cmp	r0, r9
 8020df8:	d27b      	bcs.n	8020ef2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8020dfa:	eb00 0a0e 	add.w	sl, r0, lr
 8020dfe:	4550      	cmp	r0, sl
 8020e00:	4622      	mov	r2, r4
 8020e02:	d23d      	bcs.n	8020e80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 8020e04:	7811      	ldrb	r1, [r2, #0]
 8020e06:	2604      	movs	r6, #4
 8020e08:	2203      	movs	r2, #3
 8020e0a:	fb12 6101 	smlabb	r1, r2, r1, r6
 8020e0e:	eb08 0b01 	add.w	fp, r8, r1
 8020e12:	8802      	ldrh	r2, [r0, #0]
 8020e14:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8020e18:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020e1c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020e20:	1217      	asrs	r7, r2, #8
 8020e22:	fb16 f603 	smulbb	r6, r6, r3
 8020e26:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020e2a:	fb07 670c 	mla	r7, r7, ip, r6
 8020e2e:	10d6      	asrs	r6, r2, #3
 8020e30:	00d2      	lsls	r2, r2, #3
 8020e32:	b2d2      	uxtb	r2, r2
 8020e34:	fb1b fb03 	smulbb	fp, fp, r3
 8020e38:	fb12 f20c 	smulbb	r2, r2, ip
 8020e3c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020e40:	b2bf      	uxth	r7, r7
 8020e42:	fb06 b60c 	mla	r6, r6, ip, fp
 8020e46:	fb01 2103 	mla	r1, r1, r3, r2
 8020e4a:	b2b6      	uxth	r6, r6
 8020e4c:	b289      	uxth	r1, r1
 8020e4e:	1c7a      	adds	r2, r7, #1
 8020e50:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020e54:	f106 0b01 	add.w	fp, r6, #1
 8020e58:	1c4a      	adds	r2, r1, #1
 8020e5a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020e5e:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8020e62:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020e66:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020e6a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020e6e:	4317      	orrs	r7, r2
 8020e70:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020e74:	ea47 070b 	orr.w	r7, r7, fp
 8020e78:	3401      	adds	r4, #1
 8020e7a:	f820 7b02 	strh.w	r7, [r0], #2
 8020e7e:	e7be      	b.n	8020dfe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8020e80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020e82:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020e86:	8812      	ldrh	r2, [r2, #0]
 8020e88:	1b49      	subs	r1, r1, r5
 8020e8a:	1b52      	subs	r2, r2, r5
 8020e8c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020e90:	440c      	add	r4, r1
 8020e92:	e7b0      	b.n	8020df6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 8020e94:	491e      	ldr	r1, [pc, #120]	; (8020f10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8020e96:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8020e9a:	2203      	movs	r2, #3
 8020e9c:	2704      	movs	r7, #4
 8020e9e:	4548      	cmp	r0, r9
 8020ea0:	d227      	bcs.n	8020ef2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8020ea2:	eb00 0c0e 	add.w	ip, r0, lr
 8020ea6:	4560      	cmp	r0, ip
 8020ea8:	4623      	mov	r3, r4
 8020eaa:	d219      	bcs.n	8020ee0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8020eac:	f893 a000 	ldrb.w	sl, [r3]
 8020eb0:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 8020eb4:	eb08 0b0a 	add.w	fp, r8, sl
 8020eb8:	f818 a00a 	ldrb.w	sl, [r8, sl]
 8020ebc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020ec0:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020ec4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020ec8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8020ecc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020ed0:	ea43 030b 	orr.w	r3, r3, fp
 8020ed4:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 8020ed8:	3401      	adds	r4, #1
 8020eda:	f820 3b02 	strh.w	r3, [r0], #2
 8020ede:	e7e2      	b.n	8020ea6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8020ee0:	8833      	ldrh	r3, [r6, #0]
 8020ee2:	1b5b      	subs	r3, r3, r5
 8020ee4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020ee8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020eec:	1b5b      	subs	r3, r3, r5
 8020eee:	441c      	add	r4, r3
 8020ef0:	e7d5      	b.n	8020e9e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8020ef2:	4b08      	ldr	r3, [pc, #32]	; (8020f14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8020ef4:	6818      	ldr	r0, [r3, #0]
 8020ef6:	6803      	ldr	r3, [r0, #0]
 8020ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020efa:	4798      	blx	r3
 8020efc:	e75c      	b.n	8020db8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8020efe:	bf00      	nop
 8020f00:	080306a2 	.word	0x080306a2
 8020f04:	08030da5 	.word	0x08030da5
 8020f08:	080309ef 	.word	0x080309ef
 8020f0c:	2000b72e 	.word	0x2000b72e
 8020f10:	fffff800 	.word	0xfffff800
 8020f14:	2000b734 	.word	0x2000b734

08020f18 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020f18:	b430      	push	{r4, r5}
 8020f1a:	780d      	ldrb	r5, [r1, #0]
 8020f1c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8020f20:	2d01      	cmp	r5, #1
 8020f22:	d00a      	beq.n	8020f3a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8020f24:	d305      	bcc.n	8020f32 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8020f26:	2d02      	cmp	r5, #2
 8020f28:	d10b      	bne.n	8020f42 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8020f2a:	9402      	str	r4, [sp, #8]
 8020f2c:	bc30      	pop	{r4, r5}
 8020f2e:	f7ff bddf 	b.w	8020af0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020f32:	9402      	str	r4, [sp, #8]
 8020f34:	bc30      	pop	{r4, r5}
 8020f36:	f7ff bce7 	b.w	8020908 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020f3a:	9402      	str	r4, [sp, #8]
 8020f3c:	bc30      	pop	{r4, r5}
 8020f3e:	f7ff bedb 	b.w	8020cf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020f42:	bc30      	pop	{r4, r5}
 8020f44:	4770      	bx	lr
	...

08020f48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8020f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f4c:	4604      	mov	r4, r0
 8020f4e:	b087      	sub	sp, #28
 8020f50:	6810      	ldr	r0, [r2, #0]
 8020f52:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020f56:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8021190 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8020f5a:	460e      	mov	r6, r1
 8020f5c:	6851      	ldr	r1, [r2, #4]
 8020f5e:	ad02      	add	r5, sp, #8
 8020f60:	c503      	stmia	r5!, {r0, r1}
 8020f62:	6818      	ldr	r0, [r3, #0]
 8020f64:	6859      	ldr	r1, [r3, #4]
 8020f66:	ad04      	add	r5, sp, #16
 8020f68:	4617      	mov	r7, r2
 8020f6a:	c503      	stmia	r5!, {r0, r1}
 8020f6c:	a802      	add	r0, sp, #8
 8020f6e:	f7f9 f995 	bl	801a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f72:	4639      	mov	r1, r7
 8020f74:	a804      	add	r0, sp, #16
 8020f76:	f7f9 f979 	bl	801a26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f7a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020f7e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020f82:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020f86:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020f8a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020f8e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020f92:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8020f96:	440e      	add	r6, r1
 8020f98:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020f9c:	440a      	add	r2, r1
 8020f9e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020fa2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020fa6:	4413      	add	r3, r2
 8020fa8:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020fac:	4b77      	ldr	r3, [pc, #476]	; (802118c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020fae:	6818      	ldr	r0, [r3, #0]
 8020fb0:	6803      	ldr	r3, [r0, #0]
 8020fb2:	6a1b      	ldr	r3, [r3, #32]
 8020fb4:	4798      	blx	r3
 8020fb6:	f8b9 b000 	ldrh.w	fp, [r9]
 8020fba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020fbe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020fc2:	fb0b 2303 	mla	r3, fp, r3, r2
 8020fc6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020fca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020fce:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020fd2:	fb05 f50b 	mul.w	r5, r5, fp
 8020fd6:	9300      	str	r3, [sp, #0]
 8020fd8:	d068      	beq.n	80210ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 8020fda:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8020fde:	4558      	cmp	r0, fp
 8020fe0:	f080 80cc 	bcs.w	802117c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020fe4:	9b00      	ldr	r3, [sp, #0]
 8020fe6:	18c3      	adds	r3, r0, r3
 8020fe8:	9301      	str	r3, [sp, #4]
 8020fea:	4631      	mov	r1, r6
 8020fec:	9b01      	ldr	r3, [sp, #4]
 8020fee:	4298      	cmp	r0, r3
 8020ff0:	d24e      	bcs.n	8021090 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 8020ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020ff6:	2a00      	cmp	r2, #0
 8020ff8:	d047      	beq.n	802108a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8020ffa:	fb0a f202 	mul.w	r2, sl, r2
 8020ffe:	1c53      	adds	r3, r2, #1
 8021000:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021004:	121b      	asrs	r3, r3, #8
 8021006:	d040      	beq.n	802108a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8021008:	8802      	ldrh	r2, [r0, #0]
 802100a:	f8b4 c000 	ldrh.w	ip, [r4]
 802100e:	b29e      	uxth	r6, r3
 8021010:	1215      	asrs	r5, r2, #8
 8021012:	43db      	mvns	r3, r3
 8021014:	b2db      	uxtb	r3, r3
 8021016:	ea4f 272c 	mov.w	r7, ip, asr #8
 802101a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802101e:	fb15 f503 	smulbb	r5, r5, r3
 8021022:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8021026:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802102a:	00d2      	lsls	r2, r2, #3
 802102c:	fb07 5706 	mla	r7, r7, r6, r5
 8021030:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021034:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021038:	b2d2      	uxtb	r2, r2
 802103a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802103e:	fb1e fe03 	smulbb	lr, lr, r3
 8021042:	fb12 f203 	smulbb	r2, r2, r3
 8021046:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802104a:	fa5f fc8c 	uxtb.w	ip, ip
 802104e:	fb05 e506 	mla	r5, r5, r6, lr
 8021052:	fb0c 2c06 	mla	ip, ip, r6, r2
 8021056:	b2bf      	uxth	r7, r7
 8021058:	b2ad      	uxth	r5, r5
 802105a:	fa1f fc8c 	uxth.w	ip, ip
 802105e:	1c7b      	adds	r3, r7, #1
 8021060:	f10c 0601 	add.w	r6, ip, #1
 8021064:	f105 0e01 	add.w	lr, r5, #1
 8021068:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802106c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021070:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021074:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021078:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802107c:	096d      	lsrs	r5, r5, #5
 802107e:	ea47 070c 	orr.w	r7, r7, ip
 8021082:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021086:	432f      	orrs	r7, r5
 8021088:	8007      	strh	r7, [r0, #0]
 802108a:	3002      	adds	r0, #2
 802108c:	3402      	adds	r4, #2
 802108e:	e7ad      	b.n	8020fec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021090:	f8b9 3000 	ldrh.w	r3, [r9]
 8021094:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021098:	eba3 0308 	sub.w	r3, r3, r8
 802109c:	eba6 0608 	sub.w	r6, r6, r8
 80210a0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80210a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80210a8:	440e      	add	r6, r1
 80210aa:	e798      	b.n	8020fde <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80210ac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80210b0:	42a8      	cmp	r0, r5
 80210b2:	d263      	bcs.n	802117c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80210b4:	9b00      	ldr	r3, [sp, #0]
 80210b6:	4631      	mov	r1, r6
 80210b8:	eb00 0b03 	add.w	fp, r0, r3
 80210bc:	4558      	cmp	r0, fp
 80210be:	d24f      	bcs.n	8021160 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80210c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80210c4:	b12b      	cbz	r3, 80210d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 80210c6:	2bff      	cmp	r3, #255	; 0xff
 80210c8:	f8b4 e000 	ldrh.w	lr, [r4]
 80210cc:	d104      	bne.n	80210d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 80210ce:	f8a0 e000 	strh.w	lr, [r0]
 80210d2:	3002      	adds	r0, #2
 80210d4:	3402      	adds	r4, #2
 80210d6:	e7f1      	b.n	80210bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 80210d8:	8802      	ldrh	r2, [r0, #0]
 80210da:	b29f      	uxth	r7, r3
 80210dc:	1216      	asrs	r6, r2, #8
 80210de:	43db      	mvns	r3, r3
 80210e0:	b2db      	uxtb	r3, r3
 80210e2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80210e6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80210ea:	fb16 f603 	smulbb	r6, r6, r3
 80210ee:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80210f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80210f6:	00d2      	lsls	r2, r2, #3
 80210f8:	fb0c 6c07 	mla	ip, ip, r7, r6
 80210fc:	b2d2      	uxtb	r2, r2
 80210fe:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021102:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021106:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802110a:	fb1a fa03 	smulbb	sl, sl, r3
 802110e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021112:	fb12 f303 	smulbb	r3, r2, r3
 8021116:	fa5f fe8e 	uxtb.w	lr, lr
 802111a:	fb06 a607 	mla	r6, r6, r7, sl
 802111e:	fb0e 3e07 	mla	lr, lr, r7, r3
 8021122:	fa1f fc8c 	uxth.w	ip, ip
 8021126:	b2b6      	uxth	r6, r6
 8021128:	fa1f fe8e 	uxth.w	lr, lr
 802112c:	f10c 0201 	add.w	r2, ip, #1
 8021130:	f10e 0301 	add.w	r3, lr, #1
 8021134:	f106 0a01 	add.w	sl, r6, #1
 8021138:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802113c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8021140:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021144:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021148:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802114c:	0976      	lsrs	r6, r6, #5
 802114e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8021152:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021156:	ea4c 0c06 	orr.w	ip, ip, r6
 802115a:	f8a0 c000 	strh.w	ip, [r0]
 802115e:	e7b8      	b.n	80210d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 8021160:	f8b9 3000 	ldrh.w	r3, [r9]
 8021164:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021168:	eba3 0308 	sub.w	r3, r3, r8
 802116c:	eba6 0608 	sub.w	r6, r6, r8
 8021170:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021174:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021178:	440e      	add	r6, r1
 802117a:	e799      	b.n	80210b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 802117c:	4b03      	ldr	r3, [pc, #12]	; (802118c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802117e:	6818      	ldr	r0, [r3, #0]
 8021180:	6803      	ldr	r3, [r0, #0]
 8021182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021184:	4798      	blx	r3
 8021186:	b007      	add	sp, #28
 8021188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802118c:	2000b734 	.word	0x2000b734
 8021190:	2000b72e 	.word	0x2000b72e

08021194 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021198:	b089      	sub	sp, #36	; 0x24
 802119a:	4682      	mov	sl, r0
 802119c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80211a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80211a2:	460d      	mov	r5, r1
 80211a4:	4691      	mov	r9, r2
 80211a6:	4698      	mov	r8, r3
 80211a8:	b3ae      	cbz	r6, 8021216 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80211aa:	4608      	mov	r0, r1
 80211ac:	f7fc fa0a 	bl	801d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80211b0:	4607      	mov	r7, r0
 80211b2:	4628      	mov	r0, r5
 80211b4:	f7fc fa40 	bl	801d638 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80211b8:	f8ad 000e 	strh.w	r0, [sp, #14]
 80211bc:	4628      	mov	r0, r5
 80211be:	f8ad 9008 	strh.w	r9, [sp, #8]
 80211c2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80211c6:	f8ad 700c 	strh.w	r7, [sp, #12]
 80211ca:	f7fc fb8d 	bl	801d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80211ce:	b178      	cbz	r0, 80211f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80211d0:	4628      	mov	r0, r5
 80211d2:	f7fc fb89 	bl	801d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80211d6:	2802      	cmp	r0, #2
 80211d8:	d00a      	beq.n	80211f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80211da:	4628      	mov	r0, r5
 80211dc:	f7fc fb84 	bl	801d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80211e0:	280b      	cmp	r0, #11
 80211e2:	d005      	beq.n	80211f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80211e4:	4b69      	ldr	r3, [pc, #420]	; (802138c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 80211e6:	4a6a      	ldr	r2, [pc, #424]	; (8021390 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 80211e8:	486a      	ldr	r0, [pc, #424]	; (8021394 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 80211ea:	214b      	movs	r1, #75	; 0x4b
 80211ec:	f008 f8fc 	bl	80293e8 <__assert_func>
 80211f0:	4628      	mov	r0, r5
 80211f2:	f7fc faef 	bl	801d7d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80211f6:	4607      	mov	r7, r0
 80211f8:	4628      	mov	r0, r5
 80211fa:	f7fc fb1d 	bl	801d838 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80211fe:	4681      	mov	r9, r0
 8021200:	4628      	mov	r0, r5
 8021202:	f7fc fb71 	bl	801d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021206:	2802      	cmp	r0, #2
 8021208:	d108      	bne.n	802121c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 802120a:	4633      	mov	r3, r6
 802120c:	4622      	mov	r2, r4
 802120e:	a902      	add	r1, sp, #8
 8021210:	4638      	mov	r0, r7
 8021212:	f7ff fa69 	bl	80206e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021216:	b009      	add	sp, #36	; 0x24
 8021218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802121c:	4628      	mov	r0, r5
 802121e:	f7fc fb63 	bl	801d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021222:	280b      	cmp	r0, #11
 8021224:	d107      	bne.n	8021236 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8021226:	9600      	str	r6, [sp, #0]
 8021228:	4623      	mov	r3, r4
 802122a:	aa02      	add	r2, sp, #8
 802122c:	4649      	mov	r1, r9
 802122e:	4638      	mov	r0, r7
 8021230:	f7ff fe72 	bl	8020f18 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021234:	e7ef      	b.n	8021216 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8021236:	4628      	mov	r0, r5
 8021238:	f7fc fa92 	bl	801d760 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802123c:	b950      	cbnz	r0, 8021254 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 802123e:	e9cd 6000 	strd	r6, r0, [sp]
 8021242:	f8da 3000 	ldr.w	r3, [sl]
 8021246:	aa02      	add	r2, sp, #8
 8021248:	68dd      	ldr	r5, [r3, #12]
 802124a:	4639      	mov	r1, r7
 802124c:	4623      	mov	r3, r4
 802124e:	4650      	mov	r0, sl
 8021250:	47a8      	blx	r5
 8021252:	e7e0      	b.n	8021216 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8021254:	f10d 0818 	add.w	r8, sp, #24
 8021258:	4629      	mov	r1, r5
 802125a:	4640      	mov	r0, r8
 802125c:	f7fc fa26 	bl	801d6ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021260:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021264:	ad04      	add	r5, sp, #16
 8021266:	e885 0003 	stmia.w	r5, {r0, r1}
 802126a:	4628      	mov	r0, r5
 802126c:	4621      	mov	r1, r4
 802126e:	f7f6 f8f5 	bl	801745c <_ZN8touchgfx4RectaNERKS0_>
 8021272:	4628      	mov	r0, r5
 8021274:	f7f6 f935 	bl	80174e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021278:	b138      	cbz	r0, 802128a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 802127a:	9600      	str	r6, [sp, #0]
 802127c:	4623      	mov	r3, r4
 802127e:	aa02      	add	r2, sp, #8
 8021280:	4649      	mov	r1, r9
 8021282:	4638      	mov	r0, r7
 8021284:	f7ff fe60 	bl	8020f48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021288:	e7c5      	b.n	8021216 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802128a:	e9cd 6000 	strd	r6, r0, [sp]
 802128e:	f8da 3000 	ldr.w	r3, [sl]
 8021292:	aa02      	add	r2, sp, #8
 8021294:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021298:	4639      	mov	r1, r7
 802129a:	462b      	mov	r3, r5
 802129c:	4650      	mov	r0, sl
 802129e:	47d8      	blx	fp
 80212a0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80212a4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80212a8:	4293      	cmp	r3, r2
 80212aa:	dd13      	ble.n	80212d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 80212ac:	f9b4 0000 	ldrsh.w	r0, [r4]
 80212b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80212b4:	f8ad 0018 	strh.w	r0, [sp, #24]
 80212b8:	1a9b      	subs	r3, r3, r2
 80212ba:	f8ad 201a 	strh.w	r2, [sp, #26]
 80212be:	f8ad 101c 	strh.w	r1, [sp, #28]
 80212c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80212c6:	9600      	str	r6, [sp, #0]
 80212c8:	4643      	mov	r3, r8
 80212ca:	aa02      	add	r2, sp, #8
 80212cc:	4649      	mov	r1, r9
 80212ce:	4638      	mov	r0, r7
 80212d0:	f7ff fe3a 	bl	8020f48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80212d4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80212d8:	f9b4 2000 	ldrsh.w	r2, [r4]
 80212dc:	4293      	cmp	r3, r2
 80212de:	dd13      	ble.n	8021308 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 80212e0:	1a9b      	subs	r3, r3, r2
 80212e2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80212e6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80212ea:	f8ad 2018 	strh.w	r2, [sp, #24]
 80212ee:	f8ad 001a 	strh.w	r0, [sp, #26]
 80212f2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80212f6:	f8ad 101e 	strh.w	r1, [sp, #30]
 80212fa:	9600      	str	r6, [sp, #0]
 80212fc:	4643      	mov	r3, r8
 80212fe:	aa02      	add	r2, sp, #8
 8021300:	4649      	mov	r1, r9
 8021302:	4638      	mov	r0, r7
 8021304:	f7ff fe20 	bl	8020f48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021308:	88a2      	ldrh	r2, [r4, #4]
 802130a:	8823      	ldrh	r3, [r4, #0]
 802130c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021310:	4413      	add	r3, r2
 8021312:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021316:	440a      	add	r2, r1
 8021318:	b29b      	uxth	r3, r3
 802131a:	b292      	uxth	r2, r2
 802131c:	b211      	sxth	r1, r2
 802131e:	b218      	sxth	r0, r3
 8021320:	4288      	cmp	r0, r1
 8021322:	dd13      	ble.n	802134c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 8021324:	1a9b      	subs	r3, r3, r2
 8021326:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802132a:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 802132e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021332:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021336:	f8ad 001e 	strh.w	r0, [sp, #30]
 802133a:	9600      	str	r6, [sp, #0]
 802133c:	4643      	mov	r3, r8
 802133e:	aa02      	add	r2, sp, #8
 8021340:	4649      	mov	r1, r9
 8021342:	4638      	mov	r0, r7
 8021344:	f8ad 501a 	strh.w	r5, [sp, #26]
 8021348:	f7ff fdfe 	bl	8020f48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802134c:	88e2      	ldrh	r2, [r4, #6]
 802134e:	8863      	ldrh	r3, [r4, #2]
 8021350:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021354:	4413      	add	r3, r2
 8021356:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802135a:	440a      	add	r2, r1
 802135c:	b29b      	uxth	r3, r3
 802135e:	b292      	uxth	r2, r2
 8021360:	b211      	sxth	r1, r2
 8021362:	b218      	sxth	r0, r3
 8021364:	4288      	cmp	r0, r1
 8021366:	f77f af56 	ble.w	8021216 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802136a:	f9b4 5000 	ldrsh.w	r5, [r4]
 802136e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021372:	f8ad 5018 	strh.w	r5, [sp, #24]
 8021376:	1a9b      	subs	r3, r3, r2
 8021378:	f8ad 301e 	strh.w	r3, [sp, #30]
 802137c:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021380:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021384:	9600      	str	r6, [sp, #0]
 8021386:	4643      	mov	r3, r8
 8021388:	e779      	b.n	802127e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 802138a:	bf00      	nop
 802138c:	080306f0 	.word	0x080306f0
 8021390:	08030e2e 	.word	0x08030e2e
 8021394:	080309ef 	.word	0x080309ef

08021398 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021398:	b508      	push	{r3, lr}
 802139a:	b180      	cbz	r0, 80213be <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 802139c:	2902      	cmp	r1, #2
 802139e:	d014      	beq.n	80213ca <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 80213a0:	2903      	cmp	r1, #3
 80213a2:	d01d      	beq.n	80213e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80213a4:	2901      	cmp	r1, #1
 80213a6:	d101      	bne.n	80213ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80213a8:	2001      	movs	r0, #1
 80213aa:	bd08      	pop	{r3, pc}
 80213ac:	4b0e      	ldr	r3, [pc, #56]	; (80213e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80213ae:	8818      	ldrh	r0, [r3, #0]
 80213b0:	b990      	cbnz	r0, 80213d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80213b2:	4b0e      	ldr	r3, [pc, #56]	; (80213ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 80213b4:	4a0e      	ldr	r2, [pc, #56]	; (80213f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 80213b6:	480f      	ldr	r0, [pc, #60]	; (80213f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 80213b8:	2154      	movs	r1, #84	; 0x54
 80213ba:	f008 f815 	bl	80293e8 <__assert_func>
 80213be:	2902      	cmp	r1, #2
 80213c0:	d00e      	beq.n	80213e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80213c2:	2903      	cmp	r1, #3
 80213c4:	d0f2      	beq.n	80213ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80213c6:	2901      	cmp	r1, #1
 80213c8:	d1ee      	bne.n	80213a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 80213ca:	4b07      	ldr	r3, [pc, #28]	; (80213e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80213cc:	8818      	ldrh	r0, [r3, #0]
 80213ce:	2800      	cmp	r0, #0
 80213d0:	d0ef      	beq.n	80213b2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80213d2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80213d6:	e7e8      	b.n	80213aa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80213d8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80213dc:	4240      	negs	r0, r0
 80213de:	e7e4      	b.n	80213aa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80213e0:	f04f 30ff 	mov.w	r0, #4294967295
 80213e4:	e7e1      	b.n	80213aa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80213e6:	bf00      	nop
 80213e8:	2000b72e 	.word	0x2000b72e
 80213ec:	08030a21 	.word	0x08030a21
 80213f0:	08030fab 	.word	0x08030fab
 80213f4:	08030a63 	.word	0x08030a63

080213f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80213f8:	b508      	push	{r3, lr}
 80213fa:	b180      	cbz	r0, 802141e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80213fc:	2902      	cmp	r1, #2
 80213fe:	d014      	beq.n	802142a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8021400:	2903      	cmp	r1, #3
 8021402:	d018      	beq.n	8021436 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8021404:	2901      	cmp	r1, #1
 8021406:	d001      	beq.n	802140c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8021408:	2001      	movs	r0, #1
 802140a:	e013      	b.n	8021434 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 802140c:	4b0e      	ldr	r3, [pc, #56]	; (8021448 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802140e:	8818      	ldrh	r0, [r3, #0]
 8021410:	b970      	cbnz	r0, 8021430 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8021412:	4b0e      	ldr	r3, [pc, #56]	; (802144c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8021414:	4a0e      	ldr	r2, [pc, #56]	; (8021450 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8021416:	480f      	ldr	r0, [pc, #60]	; (8021454 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8021418:	2154      	movs	r1, #84	; 0x54
 802141a:	f007 ffe5 	bl	80293e8 <__assert_func>
 802141e:	2902      	cmp	r1, #2
 8021420:	d009      	beq.n	8021436 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8021422:	2903      	cmp	r1, #3
 8021424:	d0f0      	beq.n	8021408 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8021426:	2901      	cmp	r1, #1
 8021428:	d1f0      	bne.n	802140c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 802142a:	f04f 30ff 	mov.w	r0, #4294967295
 802142e:	e001      	b.n	8021434 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8021430:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021434:	bd08      	pop	{r3, pc}
 8021436:	4b04      	ldr	r3, [pc, #16]	; (8021448 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021438:	8818      	ldrh	r0, [r3, #0]
 802143a:	2800      	cmp	r0, #0
 802143c:	d0e9      	beq.n	8021412 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 802143e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021442:	4240      	negs	r0, r0
 8021444:	e7f6      	b.n	8021434 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8021446:	bf00      	nop
 8021448:	2000b72e 	.word	0x2000b72e
 802144c:	08030a21 	.word	0x08030a21
 8021450:	08030fab 	.word	0x08030fab
 8021454:	08030a63 	.word	0x08030a63

08021458 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802145c:	b099      	sub	sp, #100	; 0x64
 802145e:	910b      	str	r1, [sp, #44]	; 0x2c
 8021460:	a914      	add	r1, sp, #80	; 0x50
 8021462:	e881 000c 	stmia.w	r1, {r2, r3}
 8021466:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 802146a:	9308      	str	r3, [sp, #32]
 802146c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8021470:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 8021474:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8021478:	910c      	str	r1, [sp, #48]	; 0x30
 802147a:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 802147e:	910d      	str	r1, [sp, #52]	; 0x34
 8021480:	7998      	ldrb	r0, [r3, #6]
 8021482:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8021486:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 802148a:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 802148e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8021492:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8021496:	ea4f 114b 	mov.w	r1, fp, lsl #5
 802149a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 802149e:	4301      	orrs	r1, r0
 80214a0:	9109      	str	r1, [sp, #36]	; 0x24
 80214a2:	f000 81e2 	beq.w	802186a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 80214a6:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 80214aa:	79d9      	ldrb	r1, [r3, #7]
 80214ac:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 80214b0:	ea51 0b0b 	orrs.w	fp, r1, fp
 80214b4:	f000 81d9 	beq.w	802186a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 80214b8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80214bc:	b29b      	uxth	r3, r3
 80214be:	2e00      	cmp	r6, #0
 80214c0:	f000 80fc 	beq.w	80216bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 80214c4:	1af6      	subs	r6, r6, r3
 80214c6:	b2b6      	uxth	r6, r6
 80214c8:	0433      	lsls	r3, r6, #16
 80214ca:	d502      	bpl.n	80214d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80214cc:	1bad      	subs	r5, r5, r6
 80214ce:	b22d      	sxth	r5, r5
 80214d0:	2600      	movs	r6, #0
 80214d2:	f9b2 1000 	ldrsh.w	r1, [r2]
 80214d6:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80214da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80214de:	428d      	cmp	r5, r1
 80214e0:	b28b      	uxth	r3, r1
 80214e2:	bfbf      	itttt	lt
 80214e4:	18f6      	addlt	r6, r6, r3
 80214e6:	1b75      	sublt	r5, r6, r5
 80214e8:	b2ae      	uxthlt	r6, r5
 80214ea:	460d      	movlt	r5, r1
 80214ec:	8891      	ldrh	r1, [r2, #4]
 80214ee:	440b      	add	r3, r1
 80214f0:	b21b      	sxth	r3, r3
 80214f2:	9311      	str	r3, [sp, #68]	; 0x44
 80214f4:	8853      	ldrh	r3, [r2, #2]
 80214f6:	88d2      	ldrh	r2, [r2, #6]
 80214f8:	4413      	add	r3, r2
 80214fa:	b21b      	sxth	r3, r3
 80214fc:	9310      	str	r3, [sp, #64]	; 0x40
 80214fe:	4bb2      	ldr	r3, [pc, #712]	; (80217c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 8021500:	9a08      	ldr	r2, [sp, #32]
 8021502:	f893 9000 	ldrb.w	r9, [r3]
 8021506:	f109 3cff 	add.w	ip, r9, #4294967295
 802150a:	f1dc 0300 	rsbs	r3, ip, #0
 802150e:	eb43 030c 	adc.w	r3, r3, ip
 8021512:	930f      	str	r3, [sp, #60]	; 0x3c
 8021514:	4629      	mov	r1, r5
 8021516:	4653      	mov	r3, sl
 8021518:	a814      	add	r0, sp, #80	; 0x50
 802151a:	f7f8 fd17 	bl	8019f4c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802151e:	4629      	mov	r1, r5
 8021520:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8021524:	4653      	mov	r3, sl
 8021526:	9a08      	ldr	r2, [sp, #32]
 8021528:	a814      	add	r0, sp, #80	; 0x50
 802152a:	f7f8 fd27 	bl	8019f7c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802152e:	a918      	add	r1, sp, #96	; 0x60
 8021530:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021534:	a817      	add	r0, sp, #92	; 0x5c
 8021536:	f7f8 fe83 	bl	801a240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802153a:	f1ba 0f00 	cmp.w	sl, #0
 802153e:	f040 80c0 	bne.w	80216c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 8021542:	f1b9 0f01 	cmp.w	r9, #1
 8021546:	f040 80c4 	bne.w	80216d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 802154a:	2301      	movs	r3, #1
 802154c:	fa03 f308 	lsl.w	r3, r3, r8
 8021550:	3b01      	subs	r3, #1
 8021552:	b2db      	uxtb	r3, r3
 8021554:	f1b8 0f01 	cmp.w	r8, #1
 8021558:	930a      	str	r3, [sp, #40]	; 0x28
 802155a:	f000 80e5 	beq.w	8021728 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 802155e:	f1b8 0f02 	cmp.w	r8, #2
 8021562:	f000 80e4 	beq.w	802172e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d6>
 8021566:	f1b8 0f04 	cmp.w	r8, #4
 802156a:	bf15      	itete	ne
 802156c:	46c1      	movne	r9, r8
 802156e:	f04f 0904 	moveq.w	r9, #4
 8021572:	2301      	movne	r3, #1
 8021574:	2311      	moveq	r3, #17
 8021576:	9307      	str	r3, [sp, #28]
 8021578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802157a:	b153      	cbz	r3, 8021592 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13a>
 802157c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802157e:	2408      	movs	r4, #8
 8021580:	fb94 f3f9 	sdiv	r3, r4, r9
 8021584:	1e5c      	subs	r4, r3, #1
 8021586:	4414      	add	r4, r2
 8021588:	fb94 f4f3 	sdiv	r4, r4, r3
 802158c:	fb14 f403 	smulbb	r4, r4, r3
 8021590:	b2a4      	uxth	r4, r4
 8021592:	b906      	cbnz	r6, 8021596 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021594:	b16f      	cbz	r7, 80215b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15a>
 8021596:	fb07 6304 	mla	r3, r7, r4, r6
 802159a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802159c:	fb08 f303 	mul.w	r3, r8, r3
 80215a0:	4639      	mov	r1, r7
 80215a2:	f003 0707 	and.w	r7, r3, #7
 80215a6:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 80215aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80215ac:	ebab 0301 	sub.w	r3, fp, r1
 80215b0:	930e      	str	r3, [sp, #56]	; 0x38
 80215b2:	4651      	mov	r1, sl
 80215b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80215b6:	f7ff feef 	bl	8021398 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80215ba:	4651      	mov	r1, sl
 80215bc:	4683      	mov	fp, r0
 80215be:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80215c0:	f7ff ff1a 	bl	80213f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80215c4:	9a08      	ldr	r2, [sp, #32]
 80215c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215c8:	1a9b      	subs	r3, r3, r2
 80215ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80215cc:	429a      	cmp	r2, r3
 80215ce:	bfa8      	it	ge
 80215d0:	461a      	movge	r2, r3
 80215d2:	2a00      	cmp	r2, #0
 80215d4:	4682      	mov	sl, r0
 80215d6:	9208      	str	r2, [sp, #32]
 80215d8:	f340 8147 	ble.w	802186a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 80215dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80215de:	1bad      	subs	r5, r5, r6
 80215e0:	1b5d      	subs	r5, r3, r5
 80215e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215e4:	429d      	cmp	r5, r3
 80215e6:	bfd4      	ite	le
 80215e8:	ebc6 0605 	rsble	r6, r6, r5
 80215ec:	ebc6 0603 	rsbgt	r6, r6, r3
 80215f0:	2e00      	cmp	r6, #0
 80215f2:	f340 813a 	ble.w	802186a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 80215f6:	1ba4      	subs	r4, r4, r6
 80215f8:	fb09 f304 	mul.w	r3, r9, r4
 80215fc:	930e      	str	r3, [sp, #56]	; 0x38
 80215fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021600:	2b00      	cmp	r3, #0
 8021602:	f040 809d 	bne.w	8021740 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8021606:	4b71      	ldr	r3, [pc, #452]	; (80217cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8021608:	6818      	ldr	r0, [r3, #0]
 802160a:	6803      	ldr	r3, [r0, #0]
 802160c:	6a1b      	ldr	r3, [r3, #32]
 802160e:	4798      	blx	r3
 8021610:	496f      	ldr	r1, [pc, #444]	; (80217d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8021612:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8021616:	880c      	ldrh	r4, [r1, #0]
 8021618:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 802161c:	fb04 1303 	mla	r3, r4, r3, r1
 8021620:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021624:	9309      	str	r3, [sp, #36]	; 0x24
 8021626:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021628:	7819      	ldrb	r1, [r3, #0]
 802162a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802162c:	0a1b      	lsrs	r3, r3, #8
 802162e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021632:	930f      	str	r3, [sp, #60]	; 0x3c
 8021634:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021636:	08db      	lsrs	r3, r3, #3
 8021638:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802163c:	9310      	str	r3, [sp, #64]	; 0x40
 802163e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021640:	00db      	lsls	r3, r3, #3
 8021642:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021646:	9311      	str	r3, [sp, #68]	; 0x44
 8021648:	ea4f 034b 	mov.w	r3, fp, lsl #1
 802164c:	fb0b ab16 	mls	fp, fp, r6, sl
 8021650:	fb03 fa06 	mul.w	sl, r3, r6
 8021654:	930c      	str	r3, [sp, #48]	; 0x30
 8021656:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 802165a:	9312      	str	r3, [sp, #72]	; 0x48
 802165c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802165e:	4139      	asrs	r1, r7
 8021660:	b29b      	uxth	r3, r3
 8021662:	b2c9      	uxtb	r1, r1
 8021664:	9313      	str	r3, [sp, #76]	; 0x4c
 8021666:	9b08      	ldr	r3, [sp, #32]
 8021668:	3b01      	subs	r3, #1
 802166a:	9308      	str	r3, [sp, #32]
 802166c:	3301      	adds	r3, #1
 802166e:	f000 80c3 	beq.w	80217f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8021672:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021676:	46b2      	mov	sl, r6
 8021678:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802167c:	f0c0 80aa 	bcc.w	80217d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8021680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021682:	400b      	ands	r3, r1
 8021684:	d00a      	beq.n	802169c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x244>
 8021686:	9807      	ldr	r0, [sp, #28]
 8021688:	fb13 f300 	smulbb	r3, r3, r0
 802168c:	2bfe      	cmp	r3, #254	; 0xfe
 802168e:	dd59      	ble.n	8021744 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 8021690:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021692:	28ff      	cmp	r0, #255	; 0xff
 8021694:	d156      	bne.n	8021744 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 8021696:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021698:	f8ae 4000 	strh.w	r4, [lr]
 802169c:	4447      	add	r7, r8
 802169e:	b2bf      	uxth	r7, r7
 80216a0:	2f07      	cmp	r7, #7
 80216a2:	bf81      	itttt	hi
 80216a4:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80216a6:	7859      	ldrbhi	r1, [r3, #1]
 80216a8:	3301      	addhi	r3, #1
 80216aa:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80216ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80216ae:	bf9a      	itte	ls
 80216b0:	fa41 f109 	asrls.w	r1, r1, r9
 80216b4:	b2c9      	uxtbls	r1, r1
 80216b6:	2700      	movhi	r7, #0
 80216b8:	449e      	add	lr, r3
 80216ba:	e7dd      	b.n	8021678 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 80216bc:	441d      	add	r5, r3
 80216be:	b22d      	sxth	r5, r5
 80216c0:	e707      	b.n	80214d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80216c2:	f1ba 0f01 	cmp.w	sl, #1
 80216c6:	f47f af40 	bne.w	802154a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80216ca:	f1b9 0f01 	cmp.w	r9, #1
 80216ce:	f47f af3c 	bne.w	802154a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80216d2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80217cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80216d6:	f8d9 0000 	ldr.w	r0, [r9]
 80216da:	6803      	ldr	r3, [r0, #0]
 80216dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216de:	4798      	blx	r3
 80216e0:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 80216e4:	464a      	mov	r2, r9
 80216e6:	d006      	beq.n	80216f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 80216e8:	f1b8 0f04 	cmp.w	r8, #4
 80216ec:	d11a      	bne.n	8021724 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80216ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80216f0:	3300      	adds	r3, #0
 80216f2:	bf18      	it	ne
 80216f4:	2301      	movne	r3, #1
 80216f6:	05c0      	lsls	r0, r0, #23
 80216f8:	f140 8087 	bpl.w	802180a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 80216fc:	f1b8 0f08 	cmp.w	r8, #8
 8021700:	f040 8083 	bne.w	802180a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 8021704:	2b00      	cmp	r3, #0
 8021706:	bf14      	ite	ne
 8021708:	2180      	movne	r1, #128	; 0x80
 802170a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 802170e:	2e00      	cmp	r6, #0
 8021710:	f040 80ae 	bne.w	8021870 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x418>
 8021714:	2f00      	cmp	r7, #0
 8021716:	f000 8082 	beq.w	802181e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 802171a:	23ff      	movs	r3, #255	; 0xff
 802171c:	930a      	str	r3, [sp, #40]	; 0x28
 802171e:	46c1      	mov	r9, r8
 8021720:	2301      	movs	r3, #1
 8021722:	e728      	b.n	8021576 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 8021724:	2300      	movs	r3, #0
 8021726:	e7e6      	b.n	80216f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 8021728:	46c1      	mov	r9, r8
 802172a:	23ff      	movs	r3, #255	; 0xff
 802172c:	e723      	b.n	8021576 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 802172e:	46c1      	mov	r9, r8
 8021730:	2355      	movs	r3, #85	; 0x55
 8021732:	e720      	b.n	8021576 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 8021734:	23ff      	movs	r3, #255	; 0xff
 8021736:	930a      	str	r3, [sp, #40]	; 0x28
 8021738:	2301      	movs	r3, #1
 802173a:	46c1      	mov	r9, r8
 802173c:	9307      	str	r3, [sp, #28]
 802173e:	e71d      	b.n	802157c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x124>
 8021740:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021742:	e765      	b.n	8021610 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1b8>
 8021744:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021746:	f8be 5000 	ldrh.w	r5, [lr]
 802174a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802174c:	fb10 f303 	smulbb	r3, r0, r3
 8021750:	b29b      	uxth	r3, r3
 8021752:	1c58      	adds	r0, r3, #1
 8021754:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021758:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802175c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802175e:	fa1f fc83 	uxth.w	ip, r3
 8021762:	122c      	asrs	r4, r5, #8
 8021764:	43db      	mvns	r3, r3
 8021766:	b2db      	uxtb	r3, r3
 8021768:	fb1c fb02 	smulbb	fp, ip, r2
 802176c:	fb10 f00c 	smulbb	r0, r0, ip
 8021770:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021774:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021776:	fb04 0403 	mla	r4, r4, r3, r0
 802177a:	10e8      	asrs	r0, r5, #3
 802177c:	00ed      	lsls	r5, r5, #3
 802177e:	b2ed      	uxtb	r5, r5
 8021780:	fb1c fc02 	smulbb	ip, ip, r2
 8021784:	fb05 cc03 	mla	ip, r5, r3, ip
 8021788:	b2a4      	uxth	r4, r4
 802178a:	fa1f fc8c 	uxth.w	ip, ip
 802178e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021792:	fb00 b003 	mla	r0, r0, r3, fp
 8021796:	1c63      	adds	r3, r4, #1
 8021798:	f10c 0b01 	add.w	fp, ip, #1
 802179c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80217a0:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 80217a4:	b280      	uxth	r0, r0
 80217a6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80217aa:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80217ae:	ea44 040b 	orr.w	r4, r4, fp
 80217b2:	f100 0b01 	add.w	fp, r0, #1
 80217b6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80217ba:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80217be:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80217c2:	ea44 040b 	orr.w	r4, r4, fp
 80217c6:	e767      	b.n	8021698 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x240>
 80217c8:	2000b72c 	.word	0x2000b72c
 80217cc:	2000b734 	.word	0x2000b734
 80217d0:	2000b72e 	.word	0x2000b72e
 80217d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217d6:	b153      	cbz	r3, 80217ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80217d8:	441f      	add	r7, r3
 80217da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217dc:	b2bf      	uxth	r7, r7
 80217de:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 80217e2:	f007 0707 	and.w	r7, r7, #7
 80217e6:	7819      	ldrb	r1, [r3, #0]
 80217e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80217ea:	4139      	asrs	r1, r7
 80217ec:	b2c9      	uxtb	r1, r1
 80217ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80217f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217f2:	441a      	add	r2, r3
 80217f4:	9209      	str	r2, [sp, #36]	; 0x24
 80217f6:	e736      	b.n	8021666 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20e>
 80217f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	d135      	bne.n	802186a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 80217fe:	4b21      	ldr	r3, [pc, #132]	; (8021884 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x42c>)
 8021800:	6818      	ldr	r0, [r3, #0]
 8021802:	6803      	ldr	r3, [r0, #0]
 8021804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021806:	4798      	blx	r3
 8021808:	e02f      	b.n	802186a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 802180a:	2b00      	cmp	r3, #0
 802180c:	f43f ae9d 	beq.w	802154a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021810:	2e00      	cmp	r6, #0
 8021812:	f47f ae9a 	bne.w	802154a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021816:	2f00      	cmp	r7, #0
 8021818:	f47f ae97 	bne.w	802154a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 802181c:	2180      	movs	r1, #128	; 0x80
 802181e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021820:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021822:	18eb      	adds	r3, r5, r3
 8021824:	4283      	cmp	r3, r0
 8021826:	f73f ae90 	bgt.w	802154a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 802182a:	9b08      	ldr	r3, [sp, #32]
 802182c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802182e:	445b      	add	r3, fp
 8021830:	4283      	cmp	r3, r0
 8021832:	f73f ae8a 	bgt.w	802154a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021836:	6810      	ldr	r0, [r2, #0]
 8021838:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 802183c:	6805      	ldr	r5, [r0, #0]
 802183e:	9105      	str	r1, [sp, #20]
 8021840:	f1b8 0f08 	cmp.w	r8, #8
 8021844:	bf18      	it	ne
 8021846:	3401      	addne	r4, #1
 8021848:	990d      	ldr	r1, [sp, #52]	; 0x34
 802184a:	9104      	str	r1, [sp, #16]
 802184c:	bf18      	it	ne
 802184e:	f024 0401 	bicne.w	r4, r4, #1
 8021852:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021854:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8021858:	bf18      	it	ne
 802185a:	b2a4      	uxthne	r4, r4
 802185c:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8021860:	e9cd 4b00 	strd	r4, fp, [sp]
 8021864:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021866:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8021868:	47a0      	blx	r4
 802186a:	b019      	add	sp, #100	; 0x64
 802186c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021872:	2b00      	cmp	r3, #0
 8021874:	f47f af5e 	bne.w	8021734 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8021878:	23ff      	movs	r3, #255	; 0xff
 802187a:	930a      	str	r3, [sp, #40]	; 0x28
 802187c:	2301      	movs	r3, #1
 802187e:	46c1      	mov	r9, r8
 8021880:	9307      	str	r3, [sp, #28]
 8021882:	e688      	b.n	8021596 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021884:	2000b734 	.word	0x2000b734

08021888 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8021888:	b538      	push	{r3, r4, r5, lr}
 802188a:	4c15      	ldr	r4, [pc, #84]	; (80218e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802188c:	7823      	ldrb	r3, [r4, #0]
 802188e:	f3bf 8f5b 	dmb	ish
 8021892:	07da      	lsls	r2, r3, #31
 8021894:	4605      	mov	r5, r0
 8021896:	d40b      	bmi.n	80218b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021898:	4620      	mov	r0, r4
 802189a:	f007 fc7c 	bl	8029196 <__cxa_guard_acquire>
 802189e:	b138      	cbz	r0, 80218b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80218a0:	4620      	mov	r0, r4
 80218a2:	f007 fc84 	bl	80291ae <__cxa_guard_release>
 80218a6:	4a0f      	ldr	r2, [pc, #60]	; (80218e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80218a8:	490f      	ldr	r1, [pc, #60]	; (80218e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80218aa:	4810      	ldr	r0, [pc, #64]	; (80218ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80218ac:	f007 fc6c 	bl	8029188 <__aeabi_atexit>
 80218b0:	4c0f      	ldr	r4, [pc, #60]	; (80218f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80218b2:	7823      	ldrb	r3, [r4, #0]
 80218b4:	f3bf 8f5b 	dmb	ish
 80218b8:	07db      	lsls	r3, r3, #31
 80218ba:	d40b      	bmi.n	80218d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80218bc:	4620      	mov	r0, r4
 80218be:	f007 fc6a 	bl	8029196 <__cxa_guard_acquire>
 80218c2:	b138      	cbz	r0, 80218d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80218c4:	4620      	mov	r0, r4
 80218c6:	f007 fc72 	bl	80291ae <__cxa_guard_release>
 80218ca:	4a06      	ldr	r2, [pc, #24]	; (80218e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80218cc:	4909      	ldr	r1, [pc, #36]	; (80218f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80218ce:	480a      	ldr	r0, [pc, #40]	; (80218f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80218d0:	f007 fc5a 	bl	8029188 <__aeabi_atexit>
 80218d4:	4b05      	ldr	r3, [pc, #20]	; (80218ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80218d6:	612b      	str	r3, [r5, #16]
 80218d8:	4b07      	ldr	r3, [pc, #28]	; (80218f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80218da:	616b      	str	r3, [r5, #20]
 80218dc:	bd38      	pop	{r3, r4, r5, pc}
 80218de:	bf00      	nop
 80218e0:	2000b800 	.word	0x2000b800
 80218e4:	20000000 	.word	0x20000000
 80218e8:	0801fe8f 	.word	0x0801fe8f
 80218ec:	200000d8 	.word	0x200000d8
 80218f0:	2000b804 	.word	0x2000b804
 80218f4:	0801fe8d 	.word	0x0801fe8d
 80218f8:	200000dc 	.word	0x200000dc

080218fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80218fc:	b538      	push	{r3, r4, r5, lr}
 80218fe:	4c15      	ldr	r4, [pc, #84]	; (8021954 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8021900:	7823      	ldrb	r3, [r4, #0]
 8021902:	f3bf 8f5b 	dmb	ish
 8021906:	07da      	lsls	r2, r3, #31
 8021908:	4605      	mov	r5, r0
 802190a:	d40b      	bmi.n	8021924 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802190c:	4620      	mov	r0, r4
 802190e:	f007 fc42 	bl	8029196 <__cxa_guard_acquire>
 8021912:	b138      	cbz	r0, 8021924 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021914:	4620      	mov	r0, r4
 8021916:	f007 fc4a 	bl	80291ae <__cxa_guard_release>
 802191a:	4a0f      	ldr	r2, [pc, #60]	; (8021958 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802191c:	490f      	ldr	r1, [pc, #60]	; (802195c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802191e:	4810      	ldr	r0, [pc, #64]	; (8021960 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021920:	f007 fc32 	bl	8029188 <__aeabi_atexit>
 8021924:	4c0f      	ldr	r4, [pc, #60]	; (8021964 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8021926:	7823      	ldrb	r3, [r4, #0]
 8021928:	f3bf 8f5b 	dmb	ish
 802192c:	07db      	lsls	r3, r3, #31
 802192e:	d40b      	bmi.n	8021948 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021930:	4620      	mov	r0, r4
 8021932:	f007 fc30 	bl	8029196 <__cxa_guard_acquire>
 8021936:	b138      	cbz	r0, 8021948 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021938:	4620      	mov	r0, r4
 802193a:	f007 fc38 	bl	80291ae <__cxa_guard_release>
 802193e:	4a06      	ldr	r2, [pc, #24]	; (8021958 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021940:	4909      	ldr	r1, [pc, #36]	; (8021968 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8021942:	480a      	ldr	r0, [pc, #40]	; (802196c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021944:	f007 fc20 	bl	8029188 <__aeabi_atexit>
 8021948:	4b05      	ldr	r3, [pc, #20]	; (8021960 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802194a:	60ab      	str	r3, [r5, #8]
 802194c:	4b07      	ldr	r3, [pc, #28]	; (802196c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802194e:	60eb      	str	r3, [r5, #12]
 8021950:	bd38      	pop	{r3, r4, r5, pc}
 8021952:	bf00      	nop
 8021954:	2000b7d8 	.word	0x2000b7d8
 8021958:	20000000 	.word	0x20000000
 802195c:	0801fe93 	.word	0x0801fe93
 8021960:	200000b0 	.word	0x200000b0
 8021964:	2000b7dc 	.word	0x2000b7dc
 8021968:	0801fe91 	.word	0x0801fe91
 802196c:	200000b4 	.word	0x200000b4

08021970 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8021970:	b510      	push	{r4, lr}
 8021972:	4604      	mov	r4, r0
 8021974:	f7ff ff88 	bl	8021888 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8021978:	4620      	mov	r0, r4
 802197a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802197e:	f7ff bfbd 	b.w	80218fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08021984 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021984:	b538      	push	{r3, r4, r5, lr}
 8021986:	4c15      	ldr	r4, [pc, #84]	; (80219dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021988:	7823      	ldrb	r3, [r4, #0]
 802198a:	f3bf 8f5b 	dmb	ish
 802198e:	07da      	lsls	r2, r3, #31
 8021990:	4605      	mov	r5, r0
 8021992:	d40b      	bmi.n	80219ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021994:	4620      	mov	r0, r4
 8021996:	f007 fbfe 	bl	8029196 <__cxa_guard_acquire>
 802199a:	b138      	cbz	r0, 80219ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802199c:	4620      	mov	r0, r4
 802199e:	f007 fc06 	bl	80291ae <__cxa_guard_release>
 80219a2:	4a0f      	ldr	r2, [pc, #60]	; (80219e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80219a4:	490f      	ldr	r1, [pc, #60]	; (80219e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80219a6:	4810      	ldr	r0, [pc, #64]	; (80219e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80219a8:	f007 fbee 	bl	8029188 <__aeabi_atexit>
 80219ac:	4c0f      	ldr	r4, [pc, #60]	; (80219ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80219ae:	7823      	ldrb	r3, [r4, #0]
 80219b0:	f3bf 8f5b 	dmb	ish
 80219b4:	07db      	lsls	r3, r3, #31
 80219b6:	d40b      	bmi.n	80219d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80219b8:	4620      	mov	r0, r4
 80219ba:	f007 fbec 	bl	8029196 <__cxa_guard_acquire>
 80219be:	b138      	cbz	r0, 80219d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80219c0:	4620      	mov	r0, r4
 80219c2:	f007 fbf4 	bl	80291ae <__cxa_guard_release>
 80219c6:	4a06      	ldr	r2, [pc, #24]	; (80219e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80219c8:	4909      	ldr	r1, [pc, #36]	; (80219f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80219ca:	480a      	ldr	r0, [pc, #40]	; (80219f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80219cc:	f007 fbdc 	bl	8029188 <__aeabi_atexit>
 80219d0:	4b05      	ldr	r3, [pc, #20]	; (80219e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80219d2:	622b      	str	r3, [r5, #32]
 80219d4:	4b07      	ldr	r3, [pc, #28]	; (80219f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80219d6:	626b      	str	r3, [r5, #36]	; 0x24
 80219d8:	bd38      	pop	{r3, r4, r5, pc}
 80219da:	bf00      	nop
 80219dc:	2000b808 	.word	0x2000b808
 80219e0:	20000000 	.word	0x20000000
 80219e4:	0801fe87 	.word	0x0801fe87
 80219e8:	200000e0 	.word	0x200000e0
 80219ec:	2000b80c 	.word	0x2000b80c
 80219f0:	0801fe85 	.word	0x0801fe85
 80219f4:	200000e4 	.word	0x200000e4

080219f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80219f8:	b538      	push	{r3, r4, r5, lr}
 80219fa:	4c15      	ldr	r4, [pc, #84]	; (8021a50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80219fc:	7823      	ldrb	r3, [r4, #0]
 80219fe:	f3bf 8f5b 	dmb	ish
 8021a02:	07da      	lsls	r2, r3, #31
 8021a04:	4605      	mov	r5, r0
 8021a06:	d40b      	bmi.n	8021a20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021a08:	4620      	mov	r0, r4
 8021a0a:	f007 fbc4 	bl	8029196 <__cxa_guard_acquire>
 8021a0e:	b138      	cbz	r0, 8021a20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021a10:	4620      	mov	r0, r4
 8021a12:	f007 fbcc 	bl	80291ae <__cxa_guard_release>
 8021a16:	4a0f      	ldr	r2, [pc, #60]	; (8021a54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021a18:	490f      	ldr	r1, [pc, #60]	; (8021a58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021a1a:	4810      	ldr	r0, [pc, #64]	; (8021a5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021a1c:	f007 fbb4 	bl	8029188 <__aeabi_atexit>
 8021a20:	4c0f      	ldr	r4, [pc, #60]	; (8021a60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021a22:	7823      	ldrb	r3, [r4, #0]
 8021a24:	f3bf 8f5b 	dmb	ish
 8021a28:	07db      	lsls	r3, r3, #31
 8021a2a:	d40b      	bmi.n	8021a44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021a2c:	4620      	mov	r0, r4
 8021a2e:	f007 fbb2 	bl	8029196 <__cxa_guard_acquire>
 8021a32:	b138      	cbz	r0, 8021a44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021a34:	4620      	mov	r0, r4
 8021a36:	f007 fbba 	bl	80291ae <__cxa_guard_release>
 8021a3a:	4a06      	ldr	r2, [pc, #24]	; (8021a54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021a3c:	4909      	ldr	r1, [pc, #36]	; (8021a64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021a3e:	480a      	ldr	r0, [pc, #40]	; (8021a68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021a40:	f007 fba2 	bl	8029188 <__aeabi_atexit>
 8021a44:	4b05      	ldr	r3, [pc, #20]	; (8021a5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021a46:	61ab      	str	r3, [r5, #24]
 8021a48:	4b07      	ldr	r3, [pc, #28]	; (8021a68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021a4a:	61eb      	str	r3, [r5, #28]
 8021a4c:	bd38      	pop	{r3, r4, r5, pc}
 8021a4e:	bf00      	nop
 8021a50:	2000b7e0 	.word	0x2000b7e0
 8021a54:	20000000 	.word	0x20000000
 8021a58:	0801fe8b 	.word	0x0801fe8b
 8021a5c:	200000b8 	.word	0x200000b8
 8021a60:	2000b7e4 	.word	0x2000b7e4
 8021a64:	0801fe89 	.word	0x0801fe89
 8021a68:	200000bc 	.word	0x200000bc

08021a6c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8021a6c:	b510      	push	{r4, lr}
 8021a6e:	4604      	mov	r4, r0
 8021a70:	f7ff ff88 	bl	8021984 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021a74:	4620      	mov	r0, r4
 8021a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a7a:	f7ff bfbd 	b.w	80219f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021a80 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021a80:	b538      	push	{r3, r4, r5, lr}
 8021a82:	4c15      	ldr	r4, [pc, #84]	; (8021ad8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021a84:	7823      	ldrb	r3, [r4, #0]
 8021a86:	f3bf 8f5b 	dmb	ish
 8021a8a:	07da      	lsls	r2, r3, #31
 8021a8c:	4605      	mov	r5, r0
 8021a8e:	d40b      	bmi.n	8021aa8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021a90:	4620      	mov	r0, r4
 8021a92:	f007 fb80 	bl	8029196 <__cxa_guard_acquire>
 8021a96:	b138      	cbz	r0, 8021aa8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021a98:	4620      	mov	r0, r4
 8021a9a:	f007 fb88 	bl	80291ae <__cxa_guard_release>
 8021a9e:	4a0f      	ldr	r2, [pc, #60]	; (8021adc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021aa0:	490f      	ldr	r1, [pc, #60]	; (8021ae0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021aa2:	4810      	ldr	r0, [pc, #64]	; (8021ae4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021aa4:	f007 fb70 	bl	8029188 <__aeabi_atexit>
 8021aa8:	4c0f      	ldr	r4, [pc, #60]	; (8021ae8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021aaa:	7823      	ldrb	r3, [r4, #0]
 8021aac:	f3bf 8f5b 	dmb	ish
 8021ab0:	07db      	lsls	r3, r3, #31
 8021ab2:	d40b      	bmi.n	8021acc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021ab4:	4620      	mov	r0, r4
 8021ab6:	f007 fb6e 	bl	8029196 <__cxa_guard_acquire>
 8021aba:	b138      	cbz	r0, 8021acc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021abc:	4620      	mov	r0, r4
 8021abe:	f007 fb76 	bl	80291ae <__cxa_guard_release>
 8021ac2:	4a06      	ldr	r2, [pc, #24]	; (8021adc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021ac4:	4909      	ldr	r1, [pc, #36]	; (8021aec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021ac6:	480a      	ldr	r0, [pc, #40]	; (8021af0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021ac8:	f007 fb5e 	bl	8029188 <__aeabi_atexit>
 8021acc:	4b05      	ldr	r3, [pc, #20]	; (8021ae4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021ace:	632b      	str	r3, [r5, #48]	; 0x30
 8021ad0:	4b07      	ldr	r3, [pc, #28]	; (8021af0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021ad2:	636b      	str	r3, [r5, #52]	; 0x34
 8021ad4:	bd38      	pop	{r3, r4, r5, pc}
 8021ad6:	bf00      	nop
 8021ad8:	2000b818 	.word	0x2000b818
 8021adc:	20000000 	.word	0x20000000
 8021ae0:	0801fe7f 	.word	0x0801fe7f
 8021ae4:	200000f0 	.word	0x200000f0
 8021ae8:	2000b81c 	.word	0x2000b81c
 8021aec:	0801fe7d 	.word	0x0801fe7d
 8021af0:	200000f4 	.word	0x200000f4

08021af4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021af4:	b538      	push	{r3, r4, r5, lr}
 8021af6:	4c15      	ldr	r4, [pc, #84]	; (8021b4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021af8:	7823      	ldrb	r3, [r4, #0]
 8021afa:	f3bf 8f5b 	dmb	ish
 8021afe:	07da      	lsls	r2, r3, #31
 8021b00:	4605      	mov	r5, r0
 8021b02:	d40b      	bmi.n	8021b1c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021b04:	4620      	mov	r0, r4
 8021b06:	f007 fb46 	bl	8029196 <__cxa_guard_acquire>
 8021b0a:	b138      	cbz	r0, 8021b1c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021b0c:	4620      	mov	r0, r4
 8021b0e:	f007 fb4e 	bl	80291ae <__cxa_guard_release>
 8021b12:	4a0f      	ldr	r2, [pc, #60]	; (8021b50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021b14:	490f      	ldr	r1, [pc, #60]	; (8021b54 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021b16:	4810      	ldr	r0, [pc, #64]	; (8021b58 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021b18:	f007 fb36 	bl	8029188 <__aeabi_atexit>
 8021b1c:	4c0f      	ldr	r4, [pc, #60]	; (8021b5c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021b1e:	7823      	ldrb	r3, [r4, #0]
 8021b20:	f3bf 8f5b 	dmb	ish
 8021b24:	07db      	lsls	r3, r3, #31
 8021b26:	d40b      	bmi.n	8021b40 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021b28:	4620      	mov	r0, r4
 8021b2a:	f007 fb34 	bl	8029196 <__cxa_guard_acquire>
 8021b2e:	b138      	cbz	r0, 8021b40 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021b30:	4620      	mov	r0, r4
 8021b32:	f007 fb3c 	bl	80291ae <__cxa_guard_release>
 8021b36:	4a06      	ldr	r2, [pc, #24]	; (8021b50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021b38:	4909      	ldr	r1, [pc, #36]	; (8021b60 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021b3a:	480a      	ldr	r0, [pc, #40]	; (8021b64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021b3c:	f007 fb24 	bl	8029188 <__aeabi_atexit>
 8021b40:	4b05      	ldr	r3, [pc, #20]	; (8021b58 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021b42:	62ab      	str	r3, [r5, #40]	; 0x28
 8021b44:	4b07      	ldr	r3, [pc, #28]	; (8021b64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021b46:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021b48:	bd38      	pop	{r3, r4, r5, pc}
 8021b4a:	bf00      	nop
 8021b4c:	2000b7e8 	.word	0x2000b7e8
 8021b50:	20000000 	.word	0x20000000
 8021b54:	0801fe83 	.word	0x0801fe83
 8021b58:	200000c0 	.word	0x200000c0
 8021b5c:	2000b7ec 	.word	0x2000b7ec
 8021b60:	0801fe81 	.word	0x0801fe81
 8021b64:	200000c4 	.word	0x200000c4

08021b68 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021b68:	b510      	push	{r4, lr}
 8021b6a:	4604      	mov	r4, r0
 8021b6c:	f7ff ff88 	bl	8021a80 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021b70:	4620      	mov	r0, r4
 8021b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b76:	f7ff bfbd 	b.w	8021af4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021b7c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021b7c:	b538      	push	{r3, r4, r5, lr}
 8021b7e:	4c15      	ldr	r4, [pc, #84]	; (8021bd4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021b80:	7823      	ldrb	r3, [r4, #0]
 8021b82:	f3bf 8f5b 	dmb	ish
 8021b86:	07da      	lsls	r2, r3, #31
 8021b88:	4605      	mov	r5, r0
 8021b8a:	d40b      	bmi.n	8021ba4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021b8c:	4620      	mov	r0, r4
 8021b8e:	f007 fb02 	bl	8029196 <__cxa_guard_acquire>
 8021b92:	b138      	cbz	r0, 8021ba4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021b94:	4620      	mov	r0, r4
 8021b96:	f007 fb0a 	bl	80291ae <__cxa_guard_release>
 8021b9a:	4a0f      	ldr	r2, [pc, #60]	; (8021bd8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021b9c:	490f      	ldr	r1, [pc, #60]	; (8021bdc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021b9e:	4810      	ldr	r0, [pc, #64]	; (8021be0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021ba0:	f007 faf2 	bl	8029188 <__aeabi_atexit>
 8021ba4:	4c0f      	ldr	r4, [pc, #60]	; (8021be4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8021ba6:	7823      	ldrb	r3, [r4, #0]
 8021ba8:	f3bf 8f5b 	dmb	ish
 8021bac:	07db      	lsls	r3, r3, #31
 8021bae:	d40b      	bmi.n	8021bc8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021bb0:	4620      	mov	r0, r4
 8021bb2:	f007 faf0 	bl	8029196 <__cxa_guard_acquire>
 8021bb6:	b138      	cbz	r0, 8021bc8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021bb8:	4620      	mov	r0, r4
 8021bba:	f007 faf8 	bl	80291ae <__cxa_guard_release>
 8021bbe:	4a06      	ldr	r2, [pc, #24]	; (8021bd8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021bc0:	4909      	ldr	r1, [pc, #36]	; (8021be8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8021bc2:	480a      	ldr	r0, [pc, #40]	; (8021bec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021bc4:	f007 fae0 	bl	8029188 <__aeabi_atexit>
 8021bc8:	4b05      	ldr	r3, [pc, #20]	; (8021be0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021bca:	652b      	str	r3, [r5, #80]	; 0x50
 8021bcc:	4b07      	ldr	r3, [pc, #28]	; (8021bec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021bce:	656b      	str	r3, [r5, #84]	; 0x54
 8021bd0:	bd38      	pop	{r3, r4, r5, pc}
 8021bd2:	bf00      	nop
 8021bd4:	2000b820 	.word	0x2000b820
 8021bd8:	20000000 	.word	0x20000000
 8021bdc:	0801fe6f 	.word	0x0801fe6f
 8021be0:	200000f8 	.word	0x200000f8
 8021be4:	2000b824 	.word	0x2000b824
 8021be8:	0801fe6d 	.word	0x0801fe6d
 8021bec:	200000fc 	.word	0x200000fc

08021bf0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8021bf0:	b538      	push	{r3, r4, r5, lr}
 8021bf2:	4c15      	ldr	r4, [pc, #84]	; (8021c48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8021bf4:	7823      	ldrb	r3, [r4, #0]
 8021bf6:	f3bf 8f5b 	dmb	ish
 8021bfa:	07da      	lsls	r2, r3, #31
 8021bfc:	4605      	mov	r5, r0
 8021bfe:	d40b      	bmi.n	8021c18 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021c00:	4620      	mov	r0, r4
 8021c02:	f007 fac8 	bl	8029196 <__cxa_guard_acquire>
 8021c06:	b138      	cbz	r0, 8021c18 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021c08:	4620      	mov	r0, r4
 8021c0a:	f007 fad0 	bl	80291ae <__cxa_guard_release>
 8021c0e:	4a0f      	ldr	r2, [pc, #60]	; (8021c4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021c10:	490f      	ldr	r1, [pc, #60]	; (8021c50 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8021c12:	4810      	ldr	r0, [pc, #64]	; (8021c54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021c14:	f007 fab8 	bl	8029188 <__aeabi_atexit>
 8021c18:	4c0f      	ldr	r4, [pc, #60]	; (8021c58 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8021c1a:	7823      	ldrb	r3, [r4, #0]
 8021c1c:	f3bf 8f5b 	dmb	ish
 8021c20:	07db      	lsls	r3, r3, #31
 8021c22:	d40b      	bmi.n	8021c3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021c24:	4620      	mov	r0, r4
 8021c26:	f007 fab6 	bl	8029196 <__cxa_guard_acquire>
 8021c2a:	b138      	cbz	r0, 8021c3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021c2c:	4620      	mov	r0, r4
 8021c2e:	f007 fabe 	bl	80291ae <__cxa_guard_release>
 8021c32:	4a06      	ldr	r2, [pc, #24]	; (8021c4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021c34:	4909      	ldr	r1, [pc, #36]	; (8021c5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8021c36:	480a      	ldr	r0, [pc, #40]	; (8021c60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021c38:	f007 faa6 	bl	8029188 <__aeabi_atexit>
 8021c3c:	4b05      	ldr	r3, [pc, #20]	; (8021c54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021c3e:	64ab      	str	r3, [r5, #72]	; 0x48
 8021c40:	4b07      	ldr	r3, [pc, #28]	; (8021c60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021c42:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021c44:	bd38      	pop	{r3, r4, r5, pc}
 8021c46:	bf00      	nop
 8021c48:	2000b828 	.word	0x2000b828
 8021c4c:	20000000 	.word	0x20000000
 8021c50:	0801fe73 	.word	0x0801fe73
 8021c54:	20000100 	.word	0x20000100
 8021c58:	2000b82c 	.word	0x2000b82c
 8021c5c:	0801fe71 	.word	0x0801fe71
 8021c60:	20000104 	.word	0x20000104

08021c64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8021c64:	b538      	push	{r3, r4, r5, lr}
 8021c66:	4c15      	ldr	r4, [pc, #84]	; (8021cbc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8021c68:	7823      	ldrb	r3, [r4, #0]
 8021c6a:	f3bf 8f5b 	dmb	ish
 8021c6e:	07da      	lsls	r2, r3, #31
 8021c70:	4605      	mov	r5, r0
 8021c72:	d40b      	bmi.n	8021c8c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021c74:	4620      	mov	r0, r4
 8021c76:	f007 fa8e 	bl	8029196 <__cxa_guard_acquire>
 8021c7a:	b138      	cbz	r0, 8021c8c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021c7c:	4620      	mov	r0, r4
 8021c7e:	f007 fa96 	bl	80291ae <__cxa_guard_release>
 8021c82:	4a0f      	ldr	r2, [pc, #60]	; (8021cc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021c84:	490f      	ldr	r1, [pc, #60]	; (8021cc4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8021c86:	4810      	ldr	r0, [pc, #64]	; (8021cc8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021c88:	f007 fa7e 	bl	8029188 <__aeabi_atexit>
 8021c8c:	4c0f      	ldr	r4, [pc, #60]	; (8021ccc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021c8e:	7823      	ldrb	r3, [r4, #0]
 8021c90:	f3bf 8f5b 	dmb	ish
 8021c94:	07db      	lsls	r3, r3, #31
 8021c96:	d40b      	bmi.n	8021cb0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021c98:	4620      	mov	r0, r4
 8021c9a:	f007 fa7c 	bl	8029196 <__cxa_guard_acquire>
 8021c9e:	b138      	cbz	r0, 8021cb0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021ca0:	4620      	mov	r0, r4
 8021ca2:	f007 fa84 	bl	80291ae <__cxa_guard_release>
 8021ca6:	4a06      	ldr	r2, [pc, #24]	; (8021cc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021ca8:	4909      	ldr	r1, [pc, #36]	; (8021cd0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8021caa:	480a      	ldr	r0, [pc, #40]	; (8021cd4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021cac:	f007 fa6c 	bl	8029188 <__aeabi_atexit>
 8021cb0:	4b05      	ldr	r3, [pc, #20]	; (8021cc8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021cb2:	642b      	str	r3, [r5, #64]	; 0x40
 8021cb4:	4b07      	ldr	r3, [pc, #28]	; (8021cd4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021cb6:	646b      	str	r3, [r5, #68]	; 0x44
 8021cb8:	bd38      	pop	{r3, r4, r5, pc}
 8021cba:	bf00      	nop
 8021cbc:	2000b7f0 	.word	0x2000b7f0
 8021cc0:	20000000 	.word	0x20000000
 8021cc4:	0801fe77 	.word	0x0801fe77
 8021cc8:	200000c8 	.word	0x200000c8
 8021ccc:	2000b7f4 	.word	0x2000b7f4
 8021cd0:	0801fe75 	.word	0x0801fe75
 8021cd4:	200000cc 	.word	0x200000cc

08021cd8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8021cd8:	b538      	push	{r3, r4, r5, lr}
 8021cda:	4c15      	ldr	r4, [pc, #84]	; (8021d30 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8021cdc:	7823      	ldrb	r3, [r4, #0]
 8021cde:	f3bf 8f5b 	dmb	ish
 8021ce2:	07da      	lsls	r2, r3, #31
 8021ce4:	4605      	mov	r5, r0
 8021ce6:	d40b      	bmi.n	8021d00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021ce8:	4620      	mov	r0, r4
 8021cea:	f007 fa54 	bl	8029196 <__cxa_guard_acquire>
 8021cee:	b138      	cbz	r0, 8021d00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021cf0:	4620      	mov	r0, r4
 8021cf2:	f007 fa5c 	bl	80291ae <__cxa_guard_release>
 8021cf6:	4a0f      	ldr	r2, [pc, #60]	; (8021d34 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021cf8:	490f      	ldr	r1, [pc, #60]	; (8021d38 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8021cfa:	4810      	ldr	r0, [pc, #64]	; (8021d3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021cfc:	f007 fa44 	bl	8029188 <__aeabi_atexit>
 8021d00:	4c0f      	ldr	r4, [pc, #60]	; (8021d40 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8021d02:	7823      	ldrb	r3, [r4, #0]
 8021d04:	f3bf 8f5b 	dmb	ish
 8021d08:	07db      	lsls	r3, r3, #31
 8021d0a:	d40b      	bmi.n	8021d24 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021d0c:	4620      	mov	r0, r4
 8021d0e:	f007 fa42 	bl	8029196 <__cxa_guard_acquire>
 8021d12:	b138      	cbz	r0, 8021d24 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021d14:	4620      	mov	r0, r4
 8021d16:	f007 fa4a 	bl	80291ae <__cxa_guard_release>
 8021d1a:	4a06      	ldr	r2, [pc, #24]	; (8021d34 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021d1c:	4909      	ldr	r1, [pc, #36]	; (8021d44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8021d1e:	480a      	ldr	r0, [pc, #40]	; (8021d48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021d20:	f007 fa32 	bl	8029188 <__aeabi_atexit>
 8021d24:	4b05      	ldr	r3, [pc, #20]	; (8021d3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021d26:	63ab      	str	r3, [r5, #56]	; 0x38
 8021d28:	4b07      	ldr	r3, [pc, #28]	; (8021d48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021d2a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021d2c:	bd38      	pop	{r3, r4, r5, pc}
 8021d2e:	bf00      	nop
 8021d30:	2000b810 	.word	0x2000b810
 8021d34:	20000000 	.word	0x20000000
 8021d38:	0801fe7b 	.word	0x0801fe7b
 8021d3c:	200000e8 	.word	0x200000e8
 8021d40:	2000b814 	.word	0x2000b814
 8021d44:	0801fe79 	.word	0x0801fe79
 8021d48:	200000ec 	.word	0x200000ec

08021d4c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8021d4c:	b510      	push	{r4, lr}
 8021d4e:	4604      	mov	r4, r0
 8021d50:	f7ff ff14 	bl	8021b7c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8021d54:	4620      	mov	r0, r4
 8021d56:	f7ff ff85 	bl	8021c64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8021d5a:	4620      	mov	r0, r4
 8021d5c:	f7ff ff48 	bl	8021bf0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8021d60:	4620      	mov	r0, r4
 8021d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d66:	f7ff bfb7 	b.w	8021cd8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08021d6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021d6c:	b538      	push	{r3, r4, r5, lr}
 8021d6e:	4c15      	ldr	r4, [pc, #84]	; (8021dc4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021d70:	7823      	ldrb	r3, [r4, #0]
 8021d72:	f3bf 8f5b 	dmb	ish
 8021d76:	07da      	lsls	r2, r3, #31
 8021d78:	4605      	mov	r5, r0
 8021d7a:	d40b      	bmi.n	8021d94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021d7c:	4620      	mov	r0, r4
 8021d7e:	f007 fa0a 	bl	8029196 <__cxa_guard_acquire>
 8021d82:	b138      	cbz	r0, 8021d94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021d84:	4620      	mov	r0, r4
 8021d86:	f007 fa12 	bl	80291ae <__cxa_guard_release>
 8021d8a:	4a0f      	ldr	r2, [pc, #60]	; (8021dc8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021d8c:	490f      	ldr	r1, [pc, #60]	; (8021dcc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021d8e:	4810      	ldr	r0, [pc, #64]	; (8021dd0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021d90:	f007 f9fa 	bl	8029188 <__aeabi_atexit>
 8021d94:	4c0f      	ldr	r4, [pc, #60]	; (8021dd4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021d96:	7823      	ldrb	r3, [r4, #0]
 8021d98:	f3bf 8f5b 	dmb	ish
 8021d9c:	07db      	lsls	r3, r3, #31
 8021d9e:	d40b      	bmi.n	8021db8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021da0:	4620      	mov	r0, r4
 8021da2:	f007 f9f8 	bl	8029196 <__cxa_guard_acquire>
 8021da6:	b138      	cbz	r0, 8021db8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021da8:	4620      	mov	r0, r4
 8021daa:	f007 fa00 	bl	80291ae <__cxa_guard_release>
 8021dae:	4a06      	ldr	r2, [pc, #24]	; (8021dc8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021db0:	4909      	ldr	r1, [pc, #36]	; (8021dd8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021db2:	480a      	ldr	r0, [pc, #40]	; (8021ddc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021db4:	f007 f9e8 	bl	8029188 <__aeabi_atexit>
 8021db8:	4b05      	ldr	r3, [pc, #20]	; (8021dd0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021dba:	662b      	str	r3, [r5, #96]	; 0x60
 8021dbc:	4b07      	ldr	r3, [pc, #28]	; (8021ddc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021dbe:	666b      	str	r3, [r5, #100]	; 0x64
 8021dc0:	bd38      	pop	{r3, r4, r5, pc}
 8021dc2:	bf00      	nop
 8021dc4:	2000b7f8 	.word	0x2000b7f8
 8021dc8:	20000000 	.word	0x20000000
 8021dcc:	0801fe67 	.word	0x0801fe67
 8021dd0:	200000d0 	.word	0x200000d0
 8021dd4:	2000b7fc 	.word	0x2000b7fc
 8021dd8:	0801fe65 	.word	0x0801fe65
 8021ddc:	200000d4 	.word	0x200000d4

08021de0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021de0:	b538      	push	{r3, r4, r5, lr}
 8021de2:	4c15      	ldr	r4, [pc, #84]	; (8021e38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021de4:	7823      	ldrb	r3, [r4, #0]
 8021de6:	f3bf 8f5b 	dmb	ish
 8021dea:	07da      	lsls	r2, r3, #31
 8021dec:	4605      	mov	r5, r0
 8021dee:	d40b      	bmi.n	8021e08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021df0:	4620      	mov	r0, r4
 8021df2:	f007 f9d0 	bl	8029196 <__cxa_guard_acquire>
 8021df6:	b138      	cbz	r0, 8021e08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021df8:	4620      	mov	r0, r4
 8021dfa:	f007 f9d8 	bl	80291ae <__cxa_guard_release>
 8021dfe:	4a0f      	ldr	r2, [pc, #60]	; (8021e3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021e00:	490f      	ldr	r1, [pc, #60]	; (8021e40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021e02:	4810      	ldr	r0, [pc, #64]	; (8021e44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021e04:	f007 f9c0 	bl	8029188 <__aeabi_atexit>
 8021e08:	4c0f      	ldr	r4, [pc, #60]	; (8021e48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021e0a:	7823      	ldrb	r3, [r4, #0]
 8021e0c:	f3bf 8f5b 	dmb	ish
 8021e10:	07db      	lsls	r3, r3, #31
 8021e12:	d40b      	bmi.n	8021e2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021e14:	4620      	mov	r0, r4
 8021e16:	f007 f9be 	bl	8029196 <__cxa_guard_acquire>
 8021e1a:	b138      	cbz	r0, 8021e2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021e1c:	4620      	mov	r0, r4
 8021e1e:	f007 f9c6 	bl	80291ae <__cxa_guard_release>
 8021e22:	4a06      	ldr	r2, [pc, #24]	; (8021e3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021e24:	4909      	ldr	r1, [pc, #36]	; (8021e4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8021e26:	480a      	ldr	r0, [pc, #40]	; (8021e50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021e28:	f007 f9ae 	bl	8029188 <__aeabi_atexit>
 8021e2c:	4b05      	ldr	r3, [pc, #20]	; (8021e44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021e2e:	65ab      	str	r3, [r5, #88]	; 0x58
 8021e30:	4b07      	ldr	r3, [pc, #28]	; (8021e50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021e32:	65eb      	str	r3, [r5, #92]	; 0x5c
 8021e34:	bd38      	pop	{r3, r4, r5, pc}
 8021e36:	bf00      	nop
 8021e38:	2000b7d0 	.word	0x2000b7d0
 8021e3c:	20000000 	.word	0x20000000
 8021e40:	0801fe6b 	.word	0x0801fe6b
 8021e44:	200000a8 	.word	0x200000a8
 8021e48:	2000b7d4 	.word	0x2000b7d4
 8021e4c:	0801fe69 	.word	0x0801fe69
 8021e50:	200000ac 	.word	0x200000ac

08021e54 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8021e54:	b510      	push	{r4, lr}
 8021e56:	4604      	mov	r4, r0
 8021e58:	f7ff ff88 	bl	8021d6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021e5c:	4620      	mov	r0, r4
 8021e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e62:	f7ff bfbd 	b.w	8021de0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021e68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021e68:	b538      	push	{r3, r4, r5, lr}
 8021e6a:	4c15      	ldr	r4, [pc, #84]	; (8021ec0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021e6c:	7823      	ldrb	r3, [r4, #0]
 8021e6e:	f3bf 8f5b 	dmb	ish
 8021e72:	07da      	lsls	r2, r3, #31
 8021e74:	4605      	mov	r5, r0
 8021e76:	d40b      	bmi.n	8021e90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021e78:	4620      	mov	r0, r4
 8021e7a:	f007 f98c 	bl	8029196 <__cxa_guard_acquire>
 8021e7e:	b138      	cbz	r0, 8021e90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021e80:	4620      	mov	r0, r4
 8021e82:	f007 f994 	bl	80291ae <__cxa_guard_release>
 8021e86:	4a0f      	ldr	r2, [pc, #60]	; (8021ec4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021e88:	490f      	ldr	r1, [pc, #60]	; (8021ec8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021e8a:	4810      	ldr	r0, [pc, #64]	; (8021ecc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021e8c:	f007 f97c 	bl	8029188 <__aeabi_atexit>
 8021e90:	4c0f      	ldr	r4, [pc, #60]	; (8021ed0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021e92:	7823      	ldrb	r3, [r4, #0]
 8021e94:	f3bf 8f5b 	dmb	ish
 8021e98:	07db      	lsls	r3, r3, #31
 8021e9a:	d40b      	bmi.n	8021eb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021e9c:	4620      	mov	r0, r4
 8021e9e:	f007 f97a 	bl	8029196 <__cxa_guard_acquire>
 8021ea2:	b138      	cbz	r0, 8021eb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021ea4:	4620      	mov	r0, r4
 8021ea6:	f007 f982 	bl	80291ae <__cxa_guard_release>
 8021eaa:	4a06      	ldr	r2, [pc, #24]	; (8021ec4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021eac:	4909      	ldr	r1, [pc, #36]	; (8021ed4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021eae:	480a      	ldr	r0, [pc, #40]	; (8021ed8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021eb0:	f007 f96a 	bl	8029188 <__aeabi_atexit>
 8021eb4:	4b05      	ldr	r3, [pc, #20]	; (8021ecc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021eb6:	672b      	str	r3, [r5, #112]	; 0x70
 8021eb8:	4b07      	ldr	r3, [pc, #28]	; (8021ed8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021eba:	676b      	str	r3, [r5, #116]	; 0x74
 8021ebc:	bd38      	pop	{r3, r4, r5, pc}
 8021ebe:	bf00      	nop
 8021ec0:	2000b7c8 	.word	0x2000b7c8
 8021ec4:	20000000 	.word	0x20000000
 8021ec8:	0801fe5f 	.word	0x0801fe5f
 8021ecc:	200000a0 	.word	0x200000a0
 8021ed0:	2000b7cc 	.word	0x2000b7cc
 8021ed4:	0801fe5d 	.word	0x0801fe5d
 8021ed8:	200000a4 	.word	0x200000a4

08021edc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021edc:	b538      	push	{r3, r4, r5, lr}
 8021ede:	4c15      	ldr	r4, [pc, #84]	; (8021f34 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021ee0:	7823      	ldrb	r3, [r4, #0]
 8021ee2:	f3bf 8f5b 	dmb	ish
 8021ee6:	07da      	lsls	r2, r3, #31
 8021ee8:	4605      	mov	r5, r0
 8021eea:	d40b      	bmi.n	8021f04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021eec:	4620      	mov	r0, r4
 8021eee:	f007 f952 	bl	8029196 <__cxa_guard_acquire>
 8021ef2:	b138      	cbz	r0, 8021f04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021ef4:	4620      	mov	r0, r4
 8021ef6:	f007 f95a 	bl	80291ae <__cxa_guard_release>
 8021efa:	4a0f      	ldr	r2, [pc, #60]	; (8021f38 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021efc:	490f      	ldr	r1, [pc, #60]	; (8021f3c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021efe:	4810      	ldr	r0, [pc, #64]	; (8021f40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021f00:	f007 f942 	bl	8029188 <__aeabi_atexit>
 8021f04:	4c0f      	ldr	r4, [pc, #60]	; (8021f44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8021f06:	7823      	ldrb	r3, [r4, #0]
 8021f08:	f3bf 8f5b 	dmb	ish
 8021f0c:	07db      	lsls	r3, r3, #31
 8021f0e:	d40b      	bmi.n	8021f28 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021f10:	4620      	mov	r0, r4
 8021f12:	f007 f940 	bl	8029196 <__cxa_guard_acquire>
 8021f16:	b138      	cbz	r0, 8021f28 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021f18:	4620      	mov	r0, r4
 8021f1a:	f007 f948 	bl	80291ae <__cxa_guard_release>
 8021f1e:	4a06      	ldr	r2, [pc, #24]	; (8021f38 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021f20:	4909      	ldr	r1, [pc, #36]	; (8021f48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021f22:	480a      	ldr	r0, [pc, #40]	; (8021f4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021f24:	f007 f930 	bl	8029188 <__aeabi_atexit>
 8021f28:	4b05      	ldr	r3, [pc, #20]	; (8021f40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021f2a:	66ab      	str	r3, [r5, #104]	; 0x68
 8021f2c:	4b07      	ldr	r3, [pc, #28]	; (8021f4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021f2e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8021f30:	bd38      	pop	{r3, r4, r5, pc}
 8021f32:	bf00      	nop
 8021f34:	2000b7c0 	.word	0x2000b7c0
 8021f38:	20000000 	.word	0x20000000
 8021f3c:	0801fe63 	.word	0x0801fe63
 8021f40:	20000098 	.word	0x20000098
 8021f44:	2000b7c4 	.word	0x2000b7c4
 8021f48:	0801fe61 	.word	0x0801fe61
 8021f4c:	2000009c 	.word	0x2000009c

08021f50 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8021f50:	b510      	push	{r4, lr}
 8021f52:	4604      	mov	r4, r0
 8021f54:	f7ff ff88 	bl	8021e68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021f58:	4620      	mov	r0, r4
 8021f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f5e:	f7ff bfbd 	b.w	8021edc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08021f62 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8021f62:	b510      	push	{r4, lr}
 8021f64:	4604      	mov	r4, r0
 8021f66:	f7ff fff3 	bl	8021f50 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8021f6a:	4620      	mov	r0, r4
 8021f6c:	f7ff ff72 	bl	8021e54 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8021f70:	4620      	mov	r0, r4
 8021f72:	f7ff fdf9 	bl	8021b68 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8021f76:	4620      	mov	r0, r4
 8021f78:	f7ff fcfa 	bl	8021970 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8021f7c:	4620      	mov	r0, r4
 8021f7e:	f7ff fd75 	bl	8021a6c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8021f82:	4620      	mov	r0, r4
 8021f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f88:	f7ff bee0 	b.w	8021d4c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8021f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f90:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8021f94:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021f98:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8021f9c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8021fa0:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8021fa4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8021fa8:	8808      	ldrh	r0, [r1, #0]
 8021faa:	fb0e 4708 	mla	r7, lr, r8, r4
 8021fae:	f1be 0f00 	cmp.w	lr, #0
 8021fb2:	eb02 0a07 	add.w	sl, r2, r7
 8021fb6:	db37      	blt.n	8022028 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8021fb8:	45f3      	cmp	fp, lr
 8021fba:	dd35      	ble.n	8022028 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8021fbc:	2c00      	cmp	r4, #0
 8021fbe:	db31      	blt.n	8022024 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8021fc0:	45a0      	cmp	r8, r4
 8021fc2:	dd2f      	ble.n	8022024 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8021fc4:	5dd2      	ldrb	r2, [r2, r7]
 8021fc6:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8021fca:	1c62      	adds	r2, r4, #1
 8021fcc:	d42f      	bmi.n	802202e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8021fce:	4590      	cmp	r8, r2
 8021fd0:	dd2d      	ble.n	802202e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8021fd2:	b366      	cbz	r6, 802202e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8021fd4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021fd8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8021fdc:	f11e 0e01 	adds.w	lr, lr, #1
 8021fe0:	d429      	bmi.n	8022036 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8021fe2:	45f3      	cmp	fp, lr
 8021fe4:	dd27      	ble.n	8022036 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8021fe6:	f1bc 0f00 	cmp.w	ip, #0
 8021fea:	f000 80a0 	beq.w	802212e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 8021fee:	2c00      	cmp	r4, #0
 8021ff0:	db1f      	blt.n	8022032 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8021ff2:	45a0      	cmp	r8, r4
 8021ff4:	dd1d      	ble.n	8022032 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8021ff6:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8021ffa:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8021ffe:	3401      	adds	r4, #1
 8022000:	d41c      	bmi.n	802203c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022002:	45a0      	cmp	r8, r4
 8022004:	dd1a      	ble.n	802203c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022006:	b1de      	cbz	r6, 8022040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8022008:	44d0      	add	r8, sl
 802200a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802200e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022012:	2e0f      	cmp	r6, #15
 8022014:	d915      	bls.n	8022042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8022016:	4b49      	ldr	r3, [pc, #292]	; (802213c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8022018:	4a49      	ldr	r2, [pc, #292]	; (8022140 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 802201a:	484a      	ldr	r0, [pc, #296]	; (8022144 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 802201c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8022020:	f007 f9e2 	bl	80293e8 <__assert_func>
 8022024:	4681      	mov	r9, r0
 8022026:	e7d0      	b.n	8021fca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8022028:	4607      	mov	r7, r0
 802202a:	4681      	mov	r9, r0
 802202c:	e7d6      	b.n	8021fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 802202e:	4607      	mov	r7, r0
 8022030:	e7d4      	b.n	8021fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022032:	4686      	mov	lr, r0
 8022034:	e7e3      	b.n	8021ffe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8022036:	4603      	mov	r3, r0
 8022038:	4686      	mov	lr, r0
 802203a:	e7ea      	b.n	8022012 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 802203c:	4603      	mov	r3, r0
 802203e:	e7e8      	b.n	8022012 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022040:	4603      	mov	r3, r0
 8022042:	f1bc 0f0f 	cmp.w	ip, #15
 8022046:	d8e6      	bhi.n	8022016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8022048:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802204c:	fb16 f80c 	smulbb	r8, r6, ip
 8022050:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022054:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022058:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802205c:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8022060:	ea44 0909 	orr.w	r9, r4, r9
 8022064:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022068:	f1cc 0410 	rsb	r4, ip, #16
 802206c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022070:	1ba4      	subs	r4, r4, r6
 8022072:	041a      	lsls	r2, r3, #16
 8022074:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8022078:	ea4a 0707 	orr.w	r7, sl, r7
 802207c:	4377      	muls	r7, r6
 802207e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022082:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022086:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802208a:	fb04 7409 	mla	r4, r4, r9, r7
 802208e:	4313      	orrs	r3, r2
 8022090:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8022094:	fb08 4303 	mla	r3, r8, r3, r4
 8022098:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802209c:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 80220a0:	4322      	orrs	r2, r4
 80220a2:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80220a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80220aa:	0d53      	lsrs	r3, r2, #21
 80220ac:	0952      	lsrs	r2, r2, #5
 80220ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80220b2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80220b6:	431a      	orrs	r2, r3
 80220b8:	b293      	uxth	r3, r2
 80220ba:	b2af      	uxth	r7, r5
 80220bc:	1202      	asrs	r2, r0, #8
 80220be:	43ed      	mvns	r5, r5
 80220c0:	b2ed      	uxtb	r5, r5
 80220c2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80220c6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80220ca:	fb12 f205 	smulbb	r2, r2, r5
 80220ce:	10c6      	asrs	r6, r0, #3
 80220d0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80220d4:	fb0c 2c07 	mla	ip, ip, r7, r2
 80220d8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80220dc:	10da      	asrs	r2, r3, #3
 80220de:	fb16 f605 	smulbb	r6, r6, r5
 80220e2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80220e6:	fb02 6207 	mla	r2, r2, r7, r6
 80220ea:	b296      	uxth	r6, r2
 80220ec:	00c2      	lsls	r2, r0, #3
 80220ee:	00dc      	lsls	r4, r3, #3
 80220f0:	b2d2      	uxtb	r2, r2
 80220f2:	b2e4      	uxtb	r4, r4
 80220f4:	fb12 f205 	smulbb	r2, r2, r5
 80220f8:	fb04 2207 	mla	r2, r4, r7, r2
 80220fc:	fa1f fc8c 	uxth.w	ip, ip
 8022100:	b292      	uxth	r2, r2
 8022102:	f10c 0301 	add.w	r3, ip, #1
 8022106:	1c50      	adds	r0, r2, #1
 8022108:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802210c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022110:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022114:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022118:	4313      	orrs	r3, r2
 802211a:	1c72      	adds	r2, r6, #1
 802211c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8022120:	0952      	lsrs	r2, r2, #5
 8022122:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022126:	4313      	orrs	r3, r2
 8022128:	800b      	strh	r3, [r1, #0]
 802212a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802212e:	2e0f      	cmp	r6, #15
 8022130:	f63f af71 	bhi.w	8022016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8022134:	4603      	mov	r3, r0
 8022136:	4686      	mov	lr, r0
 8022138:	e786      	b.n	8022048 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 802213a:	bf00      	nop
 802213c:	0803097a 	.word	0x0803097a
 8022140:	08030fe6 	.word	0x08030fe6
 8022144:	08030a63 	.word	0x08030a63

08022148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802214c:	ed2d 8b08 	vpush	{d8-d11}
 8022150:	b099      	sub	sp, #100	; 0x64
 8022152:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8022156:	9215      	str	r2, [sp, #84]	; 0x54
 8022158:	9309      	str	r3, [sp, #36]	; 0x24
 802215a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802215c:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022160:	930d      	str	r3, [sp, #52]	; 0x34
 8022162:	910c      	str	r1, [sp, #48]	; 0x30
 8022164:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022168:	9016      	str	r0, [sp, #88]	; 0x58
 802216a:	6850      	ldr	r0, [r2, #4]
 802216c:	6812      	ldr	r2, [r2, #0]
 802216e:	fb00 1303 	mla	r3, r0, r3, r1
 8022172:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022176:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022178:	681b      	ldr	r3, [r3, #0]
 802217a:	930b      	str	r3, [sp, #44]	; 0x2c
 802217c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802217e:	685e      	ldr	r6, [r3, #4]
 8022180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022182:	43db      	mvns	r3, r3
 8022184:	b2db      	uxtb	r3, r3
 8022186:	eeb0 aa40 	vmov.f32	s20, s0
 802218a:	eef0 9a60 	vmov.f32	s19, s1
 802218e:	eeb0 9a41 	vmov.f32	s18, s2
 8022192:	eeb0 8a62 	vmov.f32	s16, s5
 8022196:	eef0 8a43 	vmov.f32	s17, s6
 802219a:	eef0 ba44 	vmov.f32	s23, s8
 802219e:	eeb0 ba64 	vmov.f32	s22, s9
 80221a2:	eef0 aa45 	vmov.f32	s21, s10
 80221a6:	3604      	adds	r6, #4
 80221a8:	930a      	str	r3, [sp, #40]	; 0x28
 80221aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80221ac:	2b00      	cmp	r3, #0
 80221ae:	dc03      	bgt.n	80221b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80221b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80221b2:	2b00      	cmp	r3, #0
 80221b4:	f340 8226 	ble.w	8022604 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80221b8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80221ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80221c2:	1e48      	subs	r0, r1, #1
 80221c4:	1e57      	subs	r7, r2, #1
 80221c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	f340 80e4 	ble.w	8022396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80221ce:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80221d2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80221d6:	d406      	bmi.n	80221e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80221d8:	4584      	cmp	ip, r0
 80221da:	da04      	bge.n	80221e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80221dc:	2b00      	cmp	r3, #0
 80221de:	db02      	blt.n	80221e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80221e0:	42bb      	cmp	r3, r7
 80221e2:	f2c0 80d9 	blt.w	8022398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80221e6:	f11c 0c01 	adds.w	ip, ip, #1
 80221ea:	f100 80ca 	bmi.w	8022382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80221ee:	4561      	cmp	r1, ip
 80221f0:	f2c0 80c7 	blt.w	8022382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80221f4:	3301      	adds	r3, #1
 80221f6:	f100 80c4 	bmi.w	8022382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80221fa:	429a      	cmp	r2, r3
 80221fc:	f2c0 80c1 	blt.w	8022382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8022200:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022204:	4647      	mov	r7, r8
 8022206:	f1bb 0f00 	cmp.w	fp, #0
 802220a:	f340 80e4 	ble.w	80223d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 802220e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8022210:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022212:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022216:	689b      	ldr	r3, [r3, #8]
 8022218:	ea5f 422a 	movs.w	r2, sl, asr #16
 802221c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022220:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022224:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022228:	f100 8122 	bmi.w	8022470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 802222c:	f103 39ff 	add.w	r9, r3, #4294967295
 8022230:	454a      	cmp	r2, r9
 8022232:	f280 811d 	bge.w	8022470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8022236:	f1bc 0f00 	cmp.w	ip, #0
 802223a:	f2c0 8119 	blt.w	8022470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 802223e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022242:	45cc      	cmp	ip, r9
 8022244:	f280 8114 	bge.w	8022470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8022248:	b21b      	sxth	r3, r3
 802224a:	fb0c 2203 	mla	r2, ip, r3, r2
 802224e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022250:	eb04 0902 	add.w	r9, r4, r2
 8022254:	5ca2      	ldrb	r2, [r4, r2]
 8022256:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 802225a:	2800      	cmp	r0, #0
 802225c:	f000 80ff 	beq.w	802245e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022260:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022264:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022268:	9211      	str	r2, [sp, #68]	; 0x44
 802226a:	b151      	cbz	r1, 8022282 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802226c:	eb09 0203 	add.w	r2, r9, r3
 8022270:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022274:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022278:	930f      	str	r3, [sp, #60]	; 0x3c
 802227a:	7853      	ldrb	r3, [r2, #1]
 802227c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022280:	9312      	str	r3, [sp, #72]	; 0x48
 8022282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022284:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022286:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802228a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802228e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022292:	ea4c 0c03 	orr.w	ip, ip, r3
 8022296:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022298:	041b      	lsls	r3, r3, #16
 802229a:	fb10 f201 	smulbb	r2, r0, r1
 802229e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80222a2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80222a6:	10d2      	asrs	r2, r2, #3
 80222a8:	4323      	orrs	r3, r4
 80222aa:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80222ae:	4353      	muls	r3, r2
 80222b0:	fb09 330c 	mla	r3, r9, ip, r3
 80222b4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80222b8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80222bc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80222c0:	ea4c 0e0e 	orr.w	lr, ip, lr
 80222c4:	f1c1 0c10 	rsb	ip, r1, #16
 80222c8:	ebac 0c00 	sub.w	ip, ip, r0
 80222cc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80222d0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80222d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80222d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80222d8:	0418      	lsls	r0, r3, #16
 80222da:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80222de:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80222e2:	4318      	orrs	r0, r3
 80222e4:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80222e8:	fb02 c200 	mla	r2, r2, r0, ip
 80222ec:	0d53      	lsrs	r3, r2, #21
 80222ee:	0952      	lsrs	r2, r2, #5
 80222f0:	f8b7 c000 	ldrh.w	ip, [r7]
 80222f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80222f8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80222fc:	431a      	orrs	r2, r3
 80222fe:	b292      	uxth	r2, r2
 8022300:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022304:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8022308:	1210      	asrs	r0, r2, #8
 802230a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802230e:	fb11 f104 	smulbb	r1, r1, r4
 8022312:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8022316:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802231a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802231e:	fb00 1003 	mla	r0, r0, r3, r1
 8022322:	fa5f fc8c 	uxtb.w	ip, ip
 8022326:	10d1      	asrs	r1, r2, #3
 8022328:	00d2      	lsls	r2, r2, #3
 802232a:	fb1c fc04 	smulbb	ip, ip, r4
 802232e:	b2d2      	uxtb	r2, r2
 8022330:	fb02 c203 	mla	r2, r2, r3, ip
 8022334:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022338:	b280      	uxth	r0, r0
 802233a:	b292      	uxth	r2, r2
 802233c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022340:	fb1e fe04 	smulbb	lr, lr, r4
 8022344:	fb01 e103 	mla	r1, r1, r3, lr
 8022348:	f102 0c01 	add.w	ip, r2, #1
 802234c:	1c43      	adds	r3, r0, #1
 802234e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022352:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022356:	b289      	uxth	r1, r1
 8022358:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802235c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022360:	4313      	orrs	r3, r2
 8022362:	1c4a      	adds	r2, r1, #1
 8022364:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022368:	0949      	lsrs	r1, r1, #5
 802236a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802236e:	430b      	orrs	r3, r1
 8022370:	803b      	strh	r3, [r7, #0]
 8022372:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022374:	449a      	add	sl, r3
 8022376:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022378:	3702      	adds	r7, #2
 802237a:	441d      	add	r5, r3
 802237c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022380:	e741      	b.n	8022206 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022382:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022384:	449a      	add	sl, r3
 8022386:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022388:	441d      	add	r5, r3
 802238a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802238c:	3b01      	subs	r3, #1
 802238e:	9309      	str	r3, [sp, #36]	; 0x24
 8022390:	f108 0802 	add.w	r8, r8, #2
 8022394:	e717      	b.n	80221c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022396:	d023      	beq.n	80223e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8022398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802239a:	982d      	ldr	r0, [sp, #180]	; 0xb4
 802239c:	3b01      	subs	r3, #1
 802239e:	fb00 a003 	mla	r0, r0, r3, sl
 80223a2:	1400      	asrs	r0, r0, #16
 80223a4:	f53f af2c 	bmi.w	8022200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80223a8:	3901      	subs	r1, #1
 80223aa:	4288      	cmp	r0, r1
 80223ac:	f6bf af28 	bge.w	8022200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80223b0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80223b2:	fb01 5303 	mla	r3, r1, r3, r5
 80223b6:	141b      	asrs	r3, r3, #16
 80223b8:	f53f af22 	bmi.w	8022200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80223bc:	3a01      	subs	r2, #1
 80223be:	4293      	cmp	r3, r2
 80223c0:	f6bf af1e 	bge.w	8022200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80223c4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80223c8:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80223cc:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80223d0:	f1be 0f00 	cmp.w	lr, #0
 80223d4:	dc6c      	bgt.n	80224b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80223d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223d8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80223dc:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80223e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80223e2:	2b00      	cmp	r3, #0
 80223e4:	f340 810e 	ble.w	8022604 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80223e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80223ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80223f0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80223f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223f6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80223fa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80223fe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022402:	eef0 6a48 	vmov.f32	s13, s16
 8022406:	ee69 7a27 	vmul.f32	s15, s18, s15
 802240a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802240e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022412:	ee16 aa90 	vmov	sl, s13
 8022416:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802241a:	eef0 6a68 	vmov.f32	s13, s17
 802241e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022422:	ee18 2a10 	vmov	r2, s16
 8022426:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802242a:	fb92 f3f3 	sdiv	r3, r2, r3
 802242e:	ee18 2a90 	vmov	r2, s17
 8022432:	932d      	str	r3, [sp, #180]	; 0xb4
 8022434:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022436:	fb92 f3f3 	sdiv	r3, r2, r3
 802243a:	932e      	str	r3, [sp, #184]	; 0xb8
 802243c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802243e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022440:	3b01      	subs	r3, #1
 8022442:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022446:	930c      	str	r3, [sp, #48]	; 0x30
 8022448:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802244a:	bf08      	it	eq
 802244c:	4613      	moveq	r3, r2
 802244e:	ee16 5a90 	vmov	r5, s13
 8022452:	9309      	str	r3, [sp, #36]	; 0x24
 8022454:	eef0 8a67 	vmov.f32	s17, s15
 8022458:	eeb0 8a47 	vmov.f32	s16, s14
 802245c:	e6a5      	b.n	80221aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802245e:	2900      	cmp	r1, #0
 8022460:	f43f af0f 	beq.w	8022282 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022464:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022468:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802246c:	930f      	str	r3, [sp, #60]	; 0x3c
 802246e:	e708      	b.n	8022282 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022470:	f112 0901 	adds.w	r9, r2, #1
 8022474:	f53f af7d 	bmi.w	8022372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022478:	454b      	cmp	r3, r9
 802247a:	f6ff af7a 	blt.w	8022372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802247e:	f11c 0901 	adds.w	r9, ip, #1
 8022482:	f53f af76 	bmi.w	8022372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022486:	45ce      	cmp	lr, r9
 8022488:	f6ff af73 	blt.w	8022372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802248c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802248e:	9202      	str	r2, [sp, #8]
 8022490:	b21b      	sxth	r3, r3
 8022492:	fa0f f28e 	sxth.w	r2, lr
 8022496:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802249a:	e9cd c003 	strd	ip, r0, [sp, #12]
 802249e:	9201      	str	r2, [sp, #4]
 80224a0:	9300      	str	r3, [sp, #0]
 80224a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80224a4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80224a6:	4633      	mov	r3, r6
 80224a8:	4639      	mov	r1, r7
 80224aa:	f7ff fd6f 	bl	8021f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80224ae:	e760      	b.n	8022372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80224b0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80224b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80224b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80224b8:	ea4f 422a 	mov.w	r2, sl, asr #16
 80224bc:	1429      	asrs	r1, r5, #16
 80224be:	fb03 2101 	mla	r1, r3, r1, r2
 80224c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80224c4:	440a      	add	r2, r1
 80224c6:	5c61      	ldrb	r1, [r4, r1]
 80224c8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 80224cc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80224d0:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80224d4:	f1bc 0f00 	cmp.w	ip, #0
 80224d8:	f000 808c 	beq.w	80225f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80224dc:	7857      	ldrb	r7, [r2, #1]
 80224de:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80224e2:	9413      	str	r4, [sp, #76]	; 0x4c
 80224e4:	b140      	cbz	r0, 80224f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80224e6:	18d7      	adds	r7, r2, r3
 80224e8:	5cd3      	ldrb	r3, [r2, r3]
 80224ea:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80224ee:	9310      	str	r3, [sp, #64]	; 0x40
 80224f0:	787b      	ldrb	r3, [r7, #1]
 80224f2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80224f6:	9314      	str	r3, [sp, #80]	; 0x50
 80224f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80224fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80224fc:	fb1c f200 	smulbb	r2, ip, r0
 8022500:	041f      	lsls	r7, r3, #16
 8022502:	10d2      	asrs	r2, r2, #3
 8022504:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022508:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802250c:	431f      	orrs	r7, r3
 802250e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8022512:	9317      	str	r3, [sp, #92]	; 0x5c
 8022514:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022516:	041b      	lsls	r3, r3, #16
 8022518:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 802251c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022520:	ea43 030b 	orr.w	r3, r3, fp
 8022524:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022526:	4353      	muls	r3, r2
 8022528:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802252c:	fb04 3707 	mla	r7, r4, r7, r3
 8022530:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022534:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022538:	ea43 0b01 	orr.w	fp, r3, r1
 802253c:	f1c0 0110 	rsb	r1, r0, #16
 8022540:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022542:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022544:	eba1 0c0c 	sub.w	ip, r1, ip
 8022548:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802254c:	fb0c 770b 	mla	r7, ip, fp, r7
 8022550:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022554:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8022558:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802255c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022560:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022564:	fb02 770c 	mla	r7, r2, ip, r7
 8022568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802256a:	0d79      	lsrs	r1, r7, #21
 802256c:	097f      	lsrs	r7, r7, #5
 802256e:	8812      	ldrh	r2, [r2, #0]
 8022570:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022574:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022578:	430f      	orrs	r7, r1
 802257a:	b2bb      	uxth	r3, r7
 802257c:	1211      	asrs	r1, r2, #8
 802257e:	1218      	asrs	r0, r3, #8
 8022580:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022584:	fb11 f104 	smulbb	r1, r1, r4
 8022588:	10d7      	asrs	r7, r2, #3
 802258a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802258e:	00d2      	lsls	r2, r2, #3
 8022590:	fb00 1009 	mla	r0, r0, r9, r1
 8022594:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022598:	10d9      	asrs	r1, r3, #3
 802259a:	b2d2      	uxtb	r2, r2
 802259c:	00db      	lsls	r3, r3, #3
 802259e:	fb17 f704 	smulbb	r7, r7, r4
 80225a2:	fb12 f204 	smulbb	r2, r2, r4
 80225a6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80225aa:	b2db      	uxtb	r3, r3
 80225ac:	b280      	uxth	r0, r0
 80225ae:	fb01 7109 	mla	r1, r1, r9, r7
 80225b2:	fb03 2309 	mla	r3, r3, r9, r2
 80225b6:	b29b      	uxth	r3, r3
 80225b8:	b289      	uxth	r1, r1
 80225ba:	1c42      	adds	r2, r0, #1
 80225bc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80225c0:	1c4f      	adds	r7, r1, #1
 80225c2:	1c5a      	adds	r2, r3, #1
 80225c4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80225c8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80225cc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80225d0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80225d4:	0949      	lsrs	r1, r1, #5
 80225d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80225d8:	4310      	orrs	r0, r2
 80225da:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80225de:	4308      	orrs	r0, r1
 80225e0:	f823 0b02 	strh.w	r0, [r3], #2
 80225e4:	930e      	str	r3, [sp, #56]	; 0x38
 80225e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80225e8:	449a      	add	sl, r3
 80225ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80225ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 80225f0:	441d      	add	r5, r3
 80225f2:	e6ed      	b.n	80223d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80225f4:	2800      	cmp	r0, #0
 80225f6:	f43f af7f 	beq.w	80224f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80225fa:	5cd3      	ldrb	r3, [r2, r3]
 80225fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022600:	9310      	str	r3, [sp, #64]	; 0x40
 8022602:	e779      	b.n	80224f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8022604:	b019      	add	sp, #100	; 0x64
 8022606:	ecbd 8b08 	vpop	{d8-d11}
 802260a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022610 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022614:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8022618:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 802261c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022620:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8022624:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8022628:	8808      	ldrh	r0, [r1, #0]
 802262a:	fb06 570e 	mla	r7, r6, lr, r5
 802262e:	2e00      	cmp	r6, #0
 8022630:	eb02 0807 	add.w	r8, r2, r7
 8022634:	db38      	blt.n	80226a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8022636:	45b1      	cmp	r9, r6
 8022638:	dd36      	ble.n	80226a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 802263a:	2d00      	cmp	r5, #0
 802263c:	db32      	blt.n	80226a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 802263e:	45ae      	cmp	lr, r5
 8022640:	dd30      	ble.n	80226a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8022642:	5dd2      	ldrb	r2, [r2, r7]
 8022644:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022648:	1c6a      	adds	r2, r5, #1
 802264a:	d430      	bmi.n	80226ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802264c:	4596      	cmp	lr, r2
 802264e:	dd2e      	ble.n	80226ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8022650:	b36c      	cbz	r4, 80226ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8022652:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022656:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802265a:	3601      	adds	r6, #1
 802265c:	d42b      	bmi.n	80226b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 802265e:	45b1      	cmp	r9, r6
 8022660:	dd29      	ble.n	80226b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8022662:	f1bc 0f00 	cmp.w	ip, #0
 8022666:	d028      	beq.n	80226ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8022668:	2d00      	cmp	r5, #0
 802266a:	db22      	blt.n	80226b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 802266c:	45ae      	cmp	lr, r5
 802266e:	dd20      	ble.n	80226b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8022670:	f818 600e 	ldrb.w	r6, [r8, lr]
 8022674:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8022678:	3501      	adds	r5, #1
 802267a:	d407      	bmi.n	802268c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802267c:	45ae      	cmp	lr, r5
 802267e:	dd05      	ble.n	802268c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8022680:	b134      	cbz	r4, 8022690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022682:	44c6      	add	lr, r8
 8022684:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022688:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 802268c:	2c0f      	cmp	r4, #15
 802268e:	d802      	bhi.n	8022696 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8022690:	f1bc 0f0f 	cmp.w	ip, #15
 8022694:	d914      	bls.n	80226c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8022696:	4b26      	ldr	r3, [pc, #152]	; (8022730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8022698:	4a26      	ldr	r2, [pc, #152]	; (8022734 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 802269a:	4827      	ldr	r0, [pc, #156]	; (8022738 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 802269c:	f240 11ef 	movw	r1, #495	; 0x1ef
 80226a0:	f006 fea2 	bl	80293e8 <__assert_func>
 80226a4:	4607      	mov	r7, r0
 80226a6:	e7cf      	b.n	8022648 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80226a8:	4602      	mov	r2, r0
 80226aa:	4607      	mov	r7, r0
 80226ac:	e7d5      	b.n	802265a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80226ae:	4602      	mov	r2, r0
 80226b0:	e7d3      	b.n	802265a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80226b2:	4606      	mov	r6, r0
 80226b4:	e7e0      	b.n	8022678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80226b6:	4606      	mov	r6, r0
 80226b8:	e7e8      	b.n	802268c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80226ba:	2c0f      	cmp	r4, #15
 80226bc:	d8eb      	bhi.n	8022696 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80226be:	4606      	mov	r6, r0
 80226c0:	043d      	lsls	r5, r7, #16
 80226c2:	fb14 f30c 	smulbb	r3, r4, ip
 80226c6:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80226ca:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80226ce:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80226d2:	10db      	asrs	r3, r3, #3
 80226d4:	432f      	orrs	r7, r5
 80226d6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80226da:	f1cc 0510 	rsb	r5, ip, #16
 80226de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80226e2:	1b2d      	subs	r5, r5, r4
 80226e4:	ea4e 0202 	orr.w	r2, lr, r2
 80226e8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80226ec:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80226f0:	4354      	muls	r4, r2
 80226f2:	fb05 4507 	mla	r5, r5, r7, r4
 80226f6:	0404      	lsls	r4, r0, #16
 80226f8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80226fc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022700:	4320      	orrs	r0, r4
 8022702:	fb03 5400 	mla	r4, r3, r0, r5
 8022706:	0430      	lsls	r0, r6, #16
 8022708:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802270c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8022710:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022714:	4330      	orrs	r0, r6
 8022716:	fb03 4000 	mla	r0, r3, r0, r4
 802271a:	0d43      	lsrs	r3, r0, #21
 802271c:	0940      	lsrs	r0, r0, #5
 802271e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022722:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022726:	4318      	orrs	r0, r3
 8022728:	8008      	strh	r0, [r1, #0]
 802272a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802272e:	bf00      	nop
 8022730:	0803097a 	.word	0x0803097a
 8022734:	08030fe6 	.word	0x08030fe6
 8022738:	08030a63 	.word	0x08030a63

0802273c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022740:	ed2d 8b0a 	vpush	{d8-d12}
 8022744:	b093      	sub	sp, #76	; 0x4c
 8022746:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802274a:	920f      	str	r2, [sp, #60]	; 0x3c
 802274c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802274e:	9108      	str	r1, [sp, #32]
 8022750:	9306      	str	r3, [sp, #24]
 8022752:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022756:	9010      	str	r0, [sp, #64]	; 0x40
 8022758:	6850      	ldr	r0, [r2, #4]
 802275a:	6812      	ldr	r2, [r2, #0]
 802275c:	fb00 1303 	mla	r3, r0, r3, r1
 8022760:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022764:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	9307      	str	r3, [sp, #28]
 802276a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802276c:	685f      	ldr	r7, [r3, #4]
 802276e:	eeb0 aa40 	vmov.f32	s20, s0
 8022772:	eef0 9a60 	vmov.f32	s19, s1
 8022776:	eeb0 9a41 	vmov.f32	s18, s2
 802277a:	eeb0 8a62 	vmov.f32	s16, s5
 802277e:	eef0 8a43 	vmov.f32	s17, s6
 8022782:	eeb0 ca44 	vmov.f32	s24, s8
 8022786:	eef0 ba64 	vmov.f32	s23, s9
 802278a:	eeb0 ba45 	vmov.f32	s22, s10
 802278e:	3704      	adds	r7, #4
 8022790:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022794:	9b08      	ldr	r3, [sp, #32]
 8022796:	2b00      	cmp	r3, #0
 8022798:	dc03      	bgt.n	80227a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802279a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802279c:	2b00      	cmp	r3, #0
 802279e:	f340 81b2 	ble.w	8022b06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80227a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80227a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80227a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80227ac:	1e48      	subs	r0, r1, #1
 80227ae:	f102 3cff 	add.w	ip, r2, #4294967295
 80227b2:	9b06      	ldr	r3, [sp, #24]
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	f340 80a9 	ble.w	802290c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80227ba:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80227be:	ea4f 4326 	mov.w	r3, r6, asr #16
 80227c2:	d406      	bmi.n	80227d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227c4:	4586      	cmp	lr, r0
 80227c6:	da04      	bge.n	80227d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227c8:	2b00      	cmp	r3, #0
 80227ca:	db02      	blt.n	80227d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227cc:	4563      	cmp	r3, ip
 80227ce:	f2c0 809e 	blt.w	802290e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80227d2:	f11e 0e01 	adds.w	lr, lr, #1
 80227d6:	f100 808f 	bmi.w	80228f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80227da:	4571      	cmp	r1, lr
 80227dc:	f2c0 808c 	blt.w	80228f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80227e0:	3301      	adds	r3, #1
 80227e2:	f100 8089 	bmi.w	80228f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80227e6:	429a      	cmp	r2, r3
 80227e8:	f2c0 8086 	blt.w	80228f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80227ec:	f8dd b018 	ldr.w	fp, [sp, #24]
 80227f0:	46c8      	mov	r8, r9
 80227f2:	f1bb 0f00 	cmp.w	fp, #0
 80227f6:	f340 80a6 	ble.w	8022946 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80227fa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80227fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80227fe:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022802:	689b      	ldr	r3, [r3, #8]
 8022804:	1422      	asrs	r2, r4, #16
 8022806:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802280a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802280e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022812:	f100 80e3 	bmi.w	80229dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022816:	f103 3aff 	add.w	sl, r3, #4294967295
 802281a:	4552      	cmp	r2, sl
 802281c:	f280 80de 	bge.w	80229dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022820:	f1bc 0f00 	cmp.w	ip, #0
 8022824:	f2c0 80da 	blt.w	80229dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022828:	f10e 3aff 	add.w	sl, lr, #4294967295
 802282c:	45d4      	cmp	ip, sl
 802282e:	f280 80d5 	bge.w	80229dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022832:	b21b      	sxth	r3, r3
 8022834:	fb0c 2203 	mla	r2, ip, r3, r2
 8022838:	9d07      	ldr	r5, [sp, #28]
 802283a:	eb05 0a02 	add.w	sl, r5, r2
 802283e:	5caa      	ldrb	r2, [r5, r2]
 8022840:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022844:	2800      	cmp	r0, #0
 8022846:	f000 80c0 	beq.w	80229ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 802284a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802284e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022852:	920b      	str	r2, [sp, #44]	; 0x2c
 8022854:	b151      	cbz	r1, 802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8022856:	eb0a 0203 	add.w	r2, sl, r3
 802285a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802285e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022862:	9309      	str	r3, [sp, #36]	; 0x24
 8022864:	7853      	ldrb	r3, [r2, #1]
 8022866:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802286a:	930c      	str	r3, [sp, #48]	; 0x30
 802286c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802286e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022870:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022874:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022878:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802287c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022882:	041b      	lsls	r3, r3, #16
 8022884:	fb10 f201 	smulbb	r2, r0, r1
 8022888:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802288c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022890:	10d2      	asrs	r2, r2, #3
 8022892:	432b      	orrs	r3, r5
 8022894:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8022898:	4353      	muls	r3, r2
 802289a:	fb0a 330c 	mla	r3, sl, ip, r3
 802289e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80228a2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80228a6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80228aa:	ea4c 0e0e 	orr.w	lr, ip, lr
 80228ae:	f1c1 0c10 	rsb	ip, r1, #16
 80228b2:	ebac 0c00 	sub.w	ip, ip, r0
 80228b6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80228ba:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80228be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228c0:	0418      	lsls	r0, r3, #16
 80228c2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80228c6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80228ca:	4318      	orrs	r0, r3
 80228cc:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80228d0:	fb02 c200 	mla	r2, r2, r0, ip
 80228d4:	0d53      	lsrs	r3, r2, #21
 80228d6:	0952      	lsrs	r2, r2, #5
 80228d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80228dc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80228e0:	431a      	orrs	r2, r3
 80228e2:	f8a8 2000 	strh.w	r2, [r8]
 80228e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80228e8:	441c      	add	r4, r3
 80228ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80228ec:	f108 0802 	add.w	r8, r8, #2
 80228f0:	441e      	add	r6, r3
 80228f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80228f6:	e77c      	b.n	80227f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80228f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80228fa:	441c      	add	r4, r3
 80228fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80228fe:	441e      	add	r6, r3
 8022900:	9b06      	ldr	r3, [sp, #24]
 8022902:	3b01      	subs	r3, #1
 8022904:	9306      	str	r3, [sp, #24]
 8022906:	f109 0902 	add.w	r9, r9, #2
 802290a:	e752      	b.n	80227b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802290c:	d020      	beq.n	8022950 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802290e:	9b06      	ldr	r3, [sp, #24]
 8022910:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022912:	3b01      	subs	r3, #1
 8022914:	fb00 4003 	mla	r0, r0, r3, r4
 8022918:	1400      	asrs	r0, r0, #16
 802291a:	f53f af67 	bmi.w	80227ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802291e:	3901      	subs	r1, #1
 8022920:	4288      	cmp	r0, r1
 8022922:	f6bf af63 	bge.w	80227ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022926:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022928:	fb01 6303 	mla	r3, r1, r3, r6
 802292c:	141b      	asrs	r3, r3, #16
 802292e:	f53f af5d 	bmi.w	80227ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022932:	3a01      	subs	r2, #1
 8022934:	4293      	cmp	r3, r2
 8022936:	f6bf af59 	bge.w	80227ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802293a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802293e:	46ca      	mov	sl, r9
 8022940:	f1b8 0f00 	cmp.w	r8, #0
 8022944:	dc67      	bgt.n	8022a16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022946:	9b06      	ldr	r3, [sp, #24]
 8022948:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802294c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022950:	9b08      	ldr	r3, [sp, #32]
 8022952:	2b00      	cmp	r3, #0
 8022954:	f340 80d7 	ble.w	8022b06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8022958:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802295c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022960:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022964:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022966:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802296a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802296e:	eef0 6a48 	vmov.f32	s13, s16
 8022972:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022976:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802297a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802297e:	ee16 4a90 	vmov	r4, s13
 8022982:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022986:	eef0 6a68 	vmov.f32	s13, s17
 802298a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802298e:	ee18 2a10 	vmov	r2, s16
 8022992:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022996:	fb92 f3f3 	sdiv	r3, r2, r3
 802299a:	ee18 2a90 	vmov	r2, s17
 802299e:	9329      	str	r3, [sp, #164]	; 0xa4
 80229a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80229a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80229a6:	932a      	str	r3, [sp, #168]	; 0xa8
 80229a8:	9b08      	ldr	r3, [sp, #32]
 80229aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80229ac:	3b01      	subs	r3, #1
 80229ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229b2:	9308      	str	r3, [sp, #32]
 80229b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80229b6:	bf08      	it	eq
 80229b8:	4613      	moveq	r3, r2
 80229ba:	ee16 6a90 	vmov	r6, s13
 80229be:	9306      	str	r3, [sp, #24]
 80229c0:	eef0 8a67 	vmov.f32	s17, s15
 80229c4:	eeb0 8a47 	vmov.f32	s16, s14
 80229c8:	e6e4      	b.n	8022794 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80229ca:	2900      	cmp	r1, #0
 80229cc:	f43f af4e 	beq.w	802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80229d0:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80229d4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80229d8:	9309      	str	r3, [sp, #36]	; 0x24
 80229da:	e747      	b.n	802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80229dc:	f112 0a01 	adds.w	sl, r2, #1
 80229e0:	d481      	bmi.n	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80229e2:	4553      	cmp	r3, sl
 80229e4:	f6ff af7f 	blt.w	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80229e8:	f11c 0a01 	adds.w	sl, ip, #1
 80229ec:	f53f af7b 	bmi.w	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80229f0:	45d6      	cmp	lr, sl
 80229f2:	f6ff af78 	blt.w	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80229f6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80229fa:	b21b      	sxth	r3, r3
 80229fc:	fa0f f28e 	sxth.w	r2, lr
 8022a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022a04:	9201      	str	r2, [sp, #4]
 8022a06:	9300      	str	r3, [sp, #0]
 8022a08:	9a07      	ldr	r2, [sp, #28]
 8022a0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022a0c:	463b      	mov	r3, r7
 8022a0e:	4641      	mov	r1, r8
 8022a10:	f7ff fdfe 	bl	8022610 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022a14:	e767      	b.n	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022a16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022a18:	9d07      	ldr	r5, [sp, #28]
 8022a1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022a1e:	1422      	asrs	r2, r4, #16
 8022a20:	1431      	asrs	r1, r6, #16
 8022a22:	fb03 2101 	mla	r1, r3, r1, r2
 8022a26:	9a07      	ldr	r2, [sp, #28]
 8022a28:	440a      	add	r2, r1
 8022a2a:	5c69      	ldrb	r1, [r5, r1]
 8022a2c:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8022a30:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022a34:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8022a38:	f1be 0f00 	cmp.w	lr, #0
 8022a3c:	d05c      	beq.n	8022af8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8022a3e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8022a42:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8022a46:	950d      	str	r5, [sp, #52]	; 0x34
 8022a48:	b150      	cbz	r0, 8022a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8022a4a:	eb02 0c03 	add.w	ip, r2, r3
 8022a4e:	5cd3      	ldrb	r3, [r2, r3]
 8022a50:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022a54:	930a      	str	r3, [sp, #40]	; 0x28
 8022a56:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022a5a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022a5e:	930e      	str	r3, [sp, #56]	; 0x38
 8022a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022a64:	fb1e f200 	smulbb	r2, lr, r0
 8022a68:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022a6c:	10d2      	asrs	r2, r2, #3
 8022a6e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022a72:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022a76:	ea4c 0c03 	orr.w	ip, ip, r3
 8022a7a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8022a7e:	9311      	str	r3, [sp, #68]	; 0x44
 8022a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a82:	041b      	lsls	r3, r3, #16
 8022a84:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8022a88:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022a8c:	ea43 030b 	orr.w	r3, r3, fp
 8022a90:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022a92:	4353      	muls	r3, r2
 8022a94:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022a98:	fb05 3c0c 	mla	ip, r5, ip, r3
 8022a9c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022aa0:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022aa4:	ea43 0b01 	orr.w	fp, r3, r1
 8022aa8:	f1c0 0110 	rsb	r1, r0, #16
 8022aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022aae:	eba1 0e0e 	sub.w	lr, r1, lr
 8022ab2:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022ab6:	fb0e cc0b 	mla	ip, lr, fp, ip
 8022aba:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022abe:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8022ac2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022ac6:	ea4b 0e0e 	orr.w	lr, fp, lr
 8022aca:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022ace:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022ad2:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8022ad6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022ada:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022ade:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022ae2:	ea43 0c0c 	orr.w	ip, r3, ip
 8022ae6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022ae8:	f82a cb02 	strh.w	ip, [sl], #2
 8022aec:	441c      	add	r4, r3
 8022aee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022af0:	f108 38ff 	add.w	r8, r8, #4294967295
 8022af4:	441e      	add	r6, r3
 8022af6:	e723      	b.n	8022940 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022af8:	2800      	cmp	r0, #0
 8022afa:	d0b1      	beq.n	8022a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8022afc:	5cd3      	ldrb	r3, [r2, r3]
 8022afe:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022b02:	930a      	str	r3, [sp, #40]	; 0x28
 8022b04:	e7ac      	b.n	8022a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8022b06:	b013      	add	sp, #76	; 0x4c
 8022b08:	ecbd 8b0a 	vpop	{d8-d12}
 8022b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8022b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b14:	468b      	mov	fp, r1
 8022b16:	8809      	ldrh	r1, [r1, #0]
 8022b18:	b089      	sub	sp, #36	; 0x24
 8022b1a:	10cd      	asrs	r5, r1, #3
 8022b1c:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8022b20:	ea4f 2921 	mov.w	r9, r1, asr #8
 8022b24:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022b28:	00c9      	lsls	r1, r1, #3
 8022b2a:	9500      	str	r5, [sp, #0]
 8022b2c:	b2c9      	uxtb	r1, r1
 8022b2e:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8022b32:	9101      	str	r1, [sp, #4]
 8022b34:	9900      	ldr	r1, [sp, #0]
 8022b36:	9202      	str	r2, [sp, #8]
 8022b38:	fb04 650e 	mla	r5, r4, lr, r6
 8022b3c:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8022b40:	eb02 0805 	add.w	r8, r2, r5
 8022b44:	0209      	lsls	r1, r1, #8
 8022b46:	9a01      	ldr	r2, [sp, #4]
 8022b48:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8022b4c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8022b50:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8022b54:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8022b58:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8022b5c:	4311      	orrs	r1, r2
 8022b5e:	2c00      	cmp	r4, #0
 8022b60:	9107      	str	r1, [sp, #28]
 8022b62:	db43      	blt.n	8022bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8022b64:	45a2      	cmp	sl, r4
 8022b66:	dd41      	ble.n	8022bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8022b68:	2e00      	cmp	r6, #0
 8022b6a:	db3d      	blt.n	8022be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8022b6c:	45b6      	cmp	lr, r6
 8022b6e:	dd3b      	ble.n	8022be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8022b70:	9a02      	ldr	r2, [sp, #8]
 8022b72:	5d55      	ldrb	r5, [r2, r5]
 8022b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022b78:	441d      	add	r5, r3
 8022b7a:	1c72      	adds	r2, r6, #1
 8022b7c:	d439      	bmi.n	8022bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8022b7e:	4596      	cmp	lr, r2
 8022b80:	dd37      	ble.n	8022bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8022b82:	2f00      	cmp	r7, #0
 8022b84:	d035      	beq.n	8022bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8022b86:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022b8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022b8e:	4419      	add	r1, r3
 8022b90:	3401      	adds	r4, #1
 8022b92:	d432      	bmi.n	8022bfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8022b94:	45a2      	cmp	sl, r4
 8022b96:	dd30      	ble.n	8022bfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8022b98:	b378      	cbz	r0, 8022bfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8022b9a:	2e00      	cmp	r6, #0
 8022b9c:	db2b      	blt.n	8022bf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8022b9e:	45b6      	cmp	lr, r6
 8022ba0:	dd29      	ble.n	8022bf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8022ba2:	f818 400e 	ldrb.w	r4, [r8, lr]
 8022ba6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022baa:	441c      	add	r4, r3
 8022bac:	3601      	adds	r6, #1
 8022bae:	d427      	bmi.n	8022c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8022bb0:	45b6      	cmp	lr, r6
 8022bb2:	dd25      	ble.n	8022c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8022bb4:	b327      	cbz	r7, 8022c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8022bb6:	44c6      	add	lr, r8
 8022bb8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022bbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022bc0:	4413      	add	r3, r2
 8022bc2:	782a      	ldrb	r2, [r5, #0]
 8022bc4:	9202      	str	r2, [sp, #8]
 8022bc6:	780a      	ldrb	r2, [r1, #0]
 8022bc8:	9203      	str	r2, [sp, #12]
 8022bca:	7822      	ldrb	r2, [r4, #0]
 8022bcc:	9204      	str	r2, [sp, #16]
 8022bce:	2f0f      	cmp	r7, #15
 8022bd0:	781a      	ldrb	r2, [r3, #0]
 8022bd2:	9205      	str	r2, [sp, #20]
 8022bd4:	d801      	bhi.n	8022bda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8022bd6:	280f      	cmp	r0, #15
 8022bd8:	d914      	bls.n	8022c04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8022bda:	4b3f      	ldr	r3, [pc, #252]	; (8022cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8022bdc:	4a3f      	ldr	r2, [pc, #252]	; (8022cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8022bde:	4840      	ldr	r0, [pc, #256]	; (8022ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8022be0:	f240 210d 	movw	r1, #525	; 0x20d
 8022be4:	f006 fc00 	bl	80293e8 <__assert_func>
 8022be8:	ad07      	add	r5, sp, #28
 8022bea:	e7c6      	b.n	8022b7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8022bec:	a907      	add	r1, sp, #28
 8022bee:	460d      	mov	r5, r1
 8022bf0:	e7ce      	b.n	8022b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8022bf2:	a907      	add	r1, sp, #28
 8022bf4:	e7cc      	b.n	8022b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8022bf6:	ac07      	add	r4, sp, #28
 8022bf8:	e7d8      	b.n	8022bac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8022bfa:	ab07      	add	r3, sp, #28
 8022bfc:	461c      	mov	r4, r3
 8022bfe:	e7e0      	b.n	8022bc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8022c00:	ab07      	add	r3, sp, #28
 8022c02:	e7de      	b.n	8022bc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8022c04:	b2ba      	uxth	r2, r7
 8022c06:	b280      	uxth	r0, r0
 8022c08:	fb02 fa00 	mul.w	sl, r2, r0
 8022c0c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022c10:	0112      	lsls	r2, r2, #4
 8022c12:	b280      	uxth	r0, r0
 8022c14:	f891 8002 	ldrb.w	r8, [r1, #2]
 8022c18:	7849      	ldrb	r1, [r1, #1]
 8022c1a:	78ae      	ldrb	r6, [r5, #2]
 8022c1c:	786d      	ldrb	r5, [r5, #1]
 8022c1e:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8022c22:	eba2 020a 	sub.w	r2, r2, sl
 8022c26:	b292      	uxth	r2, r2
 8022c28:	ebae 0e00 	sub.w	lr, lr, r0
 8022c2c:	fa1f fe8e 	uxth.w	lr, lr
 8022c30:	4351      	muls	r1, r2
 8022c32:	fb02 f808 	mul.w	r8, r2, r8
 8022c36:	fb0e 8806 	mla	r8, lr, r6, r8
 8022c3a:	fb0e 1505 	mla	r5, lr, r5, r1
 8022c3e:	78a6      	ldrb	r6, [r4, #2]
 8022c40:	7861      	ldrb	r1, [r4, #1]
 8022c42:	fa1f f78c 	uxth.w	r7, ip
 8022c46:	fb00 8806 	mla	r8, r0, r6, r8
 8022c4a:	fb00 5501 	mla	r5, r0, r1, r5
 8022c4e:	789e      	ldrb	r6, [r3, #2]
 8022c50:	7859      	ldrb	r1, [r3, #1]
 8022c52:	9b00      	ldr	r3, [sp, #0]
 8022c54:	ea6f 0c0c 	mvn.w	ip, ip
 8022c58:	fa5f fc8c 	uxtb.w	ip, ip
 8022c5c:	fb0a 5101 	mla	r1, sl, r1, r5
 8022c60:	fb13 f50c 	smulbb	r5, r3, ip
 8022c64:	9b03      	ldr	r3, [sp, #12]
 8022c66:	435a      	muls	r2, r3
 8022c68:	9b02      	ldr	r3, [sp, #8]
 8022c6a:	fb0e 2203 	mla	r2, lr, r3, r2
 8022c6e:	9b04      	ldr	r3, [sp, #16]
 8022c70:	fb00 2003 	mla	r0, r0, r3, r2
 8022c74:	9b05      	ldr	r3, [sp, #20]
 8022c76:	fb0a 8606 	mla	r6, sl, r6, r8
 8022c7a:	fb0a 0a03 	mla	sl, sl, r3, r0
 8022c7e:	9b01      	ldr	r3, [sp, #4]
 8022c80:	fb19 f90c 	smulbb	r9, r9, ip
 8022c84:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8022c88:	fb13 fc0c 	smulbb	ip, r3, ip
 8022c8c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022c90:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022c94:	fb06 9607 	mla	r6, r6, r7, r9
 8022c98:	fb01 5107 	mla	r1, r1, r7, r5
 8022c9c:	fb0a c707 	mla	r7, sl, r7, ip
 8022ca0:	b2b6      	uxth	r6, r6
 8022ca2:	b289      	uxth	r1, r1
 8022ca4:	b2bf      	uxth	r7, r7
 8022ca6:	f106 0901 	add.w	r9, r6, #1
 8022caa:	f107 0c01 	add.w	ip, r7, #1
 8022cae:	1c4d      	adds	r5, r1, #1
 8022cb0:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8022cb4:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8022cb8:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8022cbc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022cc0:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8022cc4:	0949      	lsrs	r1, r1, #5
 8022cc6:	433e      	orrs	r6, r7
 8022cc8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022ccc:	430e      	orrs	r6, r1
 8022cce:	f8ab 6000 	strh.w	r6, [fp]
 8022cd2:	b009      	add	sp, #36	; 0x24
 8022cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cd8:	0803097a 	.word	0x0803097a
 8022cdc:	08030f3d 	.word	0x08030f3d
 8022ce0:	08030a63 	.word	0x08030a63

08022ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ce8:	ed2d 8b08 	vpush	{d8-d11}
 8022cec:	b095      	sub	sp, #84	; 0x54
 8022cee:	eeb0 aa40 	vmov.f32	s20, s0
 8022cf2:	9212      	str	r2, [sp, #72]	; 0x48
 8022cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8022cf6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022cf8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8022cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8022cfe:	910e      	str	r1, [sp, #56]	; 0x38
 8022d00:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022d04:	9013      	str	r0, [sp, #76]	; 0x4c
 8022d06:	6850      	ldr	r0, [r2, #4]
 8022d08:	6812      	ldr	r2, [r2, #0]
 8022d0a:	fb00 1303 	mla	r3, r0, r3, r1
 8022d0e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022d12:	930a      	str	r3, [sp, #40]	; 0x28
 8022d14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	930d      	str	r3, [sp, #52]	; 0x34
 8022d1a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022d1c:	685c      	ldr	r4, [r3, #4]
 8022d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d20:	43db      	mvns	r3, r3
 8022d22:	b2db      	uxtb	r3, r3
 8022d24:	eef0 9a60 	vmov.f32	s19, s1
 8022d28:	eeb0 9a41 	vmov.f32	s18, s2
 8022d2c:	eeb0 8a62 	vmov.f32	s16, s5
 8022d30:	eef0 8a43 	vmov.f32	s17, s6
 8022d34:	eef0 ba44 	vmov.f32	s23, s8
 8022d38:	eeb0 ba64 	vmov.f32	s22, s9
 8022d3c:	eef0 aa45 	vmov.f32	s21, s10
 8022d40:	3404      	adds	r4, #4
 8022d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	dc03      	bgt.n	8022d52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d4c:	2b00      	cmp	r3, #0
 8022d4e:	f340 8258 	ble.w	8023202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8022d52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022d54:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d58:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022d5c:	1e48      	subs	r0, r1, #1
 8022d5e:	1e55      	subs	r5, r2, #1
 8022d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d62:	2b00      	cmp	r3, #0
 8022d64:	f340 80fc 	ble.w	8022f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022d68:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8022d6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022d6c:	1436      	asrs	r6, r6, #16
 8022d6e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022d72:	d406      	bmi.n	8022d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022d74:	4286      	cmp	r6, r0
 8022d76:	da04      	bge.n	8022d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022d78:	2b00      	cmp	r3, #0
 8022d7a:	db02      	blt.n	8022d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022d7c:	42ab      	cmp	r3, r5
 8022d7e:	f2c0 80f0 	blt.w	8022f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022d82:	3601      	adds	r6, #1
 8022d84:	f100 80dd 	bmi.w	8022f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022d88:	42b1      	cmp	r1, r6
 8022d8a:	f2c0 80da 	blt.w	8022f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022d8e:	3301      	adds	r3, #1
 8022d90:	f100 80d7 	bmi.w	8022f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022d94:	429a      	cmp	r2, r3
 8022d96:	f2c0 80d4 	blt.w	8022f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d9c:	9311      	str	r3, [sp, #68]	; 0x44
 8022d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022da0:	930c      	str	r3, [sp, #48]	; 0x30
 8022da2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022da4:	2b00      	cmp	r3, #0
 8022da6:	f340 80fd 	ble.w	8022fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8022daa:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8022dac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022dae:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022db0:	68c6      	ldr	r6, [r0, #12]
 8022db2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022db4:	141d      	asrs	r5, r3, #16
 8022db6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022dba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022dbc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022dbe:	1400      	asrs	r0, r0, #16
 8022dc0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022dc4:	6892      	ldr	r2, [r2, #8]
 8022dc6:	f100 8141 	bmi.w	802304c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022dca:	1e57      	subs	r7, r2, #1
 8022dcc:	42b8      	cmp	r0, r7
 8022dce:	f280 813d 	bge.w	802304c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022dd2:	2d00      	cmp	r5, #0
 8022dd4:	f2c0 813a 	blt.w	802304c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022dd8:	1e77      	subs	r7, r6, #1
 8022dda:	42bd      	cmp	r5, r7
 8022ddc:	f280 8136 	bge.w	802304c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022de0:	b212      	sxth	r2, r2
 8022de2:	fb05 0002 	mla	r0, r5, r2, r0
 8022de6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022de8:	f815 a000 	ldrb.w	sl, [r5, r0]
 8022dec:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8022df0:	182e      	adds	r6, r5, r0
 8022df2:	eb04 050a 	add.w	r5, r4, sl
 8022df6:	2b00      	cmp	r3, #0
 8022df8:	f000 811a 	beq.w	8023030 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8022dfc:	f896 c001 	ldrb.w	ip, [r6, #1]
 8022e00:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022e04:	44a4      	add	ip, r4
 8022e06:	2900      	cmp	r1, #0
 8022e08:	f000 811a 	beq.w	8023040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8022e0c:	18b0      	adds	r0, r6, r2
 8022e0e:	5cb2      	ldrb	r2, [r6, r2]
 8022e10:	7840      	ldrb	r0, [r0, #1]
 8022e12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022e16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022e1a:	4422      	add	r2, r4
 8022e1c:	4420      	add	r0, r4
 8022e1e:	b29b      	uxth	r3, r3
 8022e20:	b289      	uxth	r1, r1
 8022e22:	fb03 f901 	mul.w	r9, r3, r1
 8022e26:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022e2a:	011b      	lsls	r3, r3, #4
 8022e2c:	b289      	uxth	r1, r1
 8022e2e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8022e32:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022e36:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022e38:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8022e3c:	f8b6 e000 	ldrh.w	lr, [r6]
 8022e40:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8022e44:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8022e48:	eba3 0309 	sub.w	r3, r3, r9
 8022e4c:	b29b      	uxth	r3, r3
 8022e4e:	eba8 0801 	sub.w	r8, r8, r1
 8022e52:	fa1f f888 	uxth.w	r8, r8
 8022e56:	435f      	muls	r7, r3
 8022e58:	fb08 770b 	mla	r7, r8, fp, r7
 8022e5c:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022e60:	9310      	str	r3, [sp, #64]	; 0x40
 8022e62:	fb01 770b 	mla	r7, r1, fp, r7
 8022e66:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e6c:	fb09 770b 	mla	r7, r9, fp, r7
 8022e70:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8022e74:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8022e78:	fb1b fb03 	smulbb	fp, fp, r3
 8022e7c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022e80:	fb07 b706 	mla	r7, r7, r6, fp
 8022e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022e86:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022e8a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022e8e:	f89c c000 	ldrb.w	ip, [ip]
 8022e92:	435d      	muls	r5, r3
 8022e94:	fb08 550b 	mla	r5, r8, fp, r5
 8022e98:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e9e:	fb01 550b 	mla	r5, r1, fp, r5
 8022ea2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022ea6:	fb09 550b 	mla	r5, r9, fp, r5
 8022eaa:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8022eae:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022eb2:	fb1b fb03 	smulbb	fp, fp, r3
 8022eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022eb8:	fb03 f30c 	mul.w	r3, r3, ip
 8022ebc:	f892 c000 	ldrb.w	ip, [r2]
 8022ec0:	fb08 330a 	mla	r3, r8, sl, r3
 8022ec4:	fb01 330c 	mla	r3, r1, ip, r3
 8022ec8:	f890 c000 	ldrb.w	ip, [r0]
 8022ecc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022ed0:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ed6:	fa5f fe8e 	uxtb.w	lr, lr
 8022eda:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022ede:	fb1e fe03 	smulbb	lr, lr, r3
 8022ee2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022ee6:	fb05 b506 	mla	r5, r5, r6, fp
 8022eea:	fb0c ee06 	mla	lr, ip, r6, lr
 8022eee:	b2bf      	uxth	r7, r7
 8022ef0:	b2ad      	uxth	r5, r5
 8022ef2:	fa1f fe8e 	uxth.w	lr, lr
 8022ef6:	1c7a      	adds	r2, r7, #1
 8022ef8:	f10e 0c01 	add.w	ip, lr, #1
 8022efc:	f105 0b01 	add.w	fp, r5, #1
 8022f00:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022f04:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 8022f08:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022f0c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022f10:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022f14:	096d      	lsrs	r5, r5, #5
 8022f16:	ea47 070e 	orr.w	r7, r7, lr
 8022f1a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f20:	433d      	orrs	r5, r7
 8022f22:	801d      	strh	r5, [r3, #0]
 8022f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f26:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022f28:	3302      	adds	r3, #2
 8022f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8022f2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022f2e:	4413      	add	r3, r2
 8022f30:	9327      	str	r3, [sp, #156]	; 0x9c
 8022f32:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022f34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022f36:	4413      	add	r3, r2
 8022f38:	9328      	str	r3, [sp, #160]	; 0xa0
 8022f3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022f3c:	3b01      	subs	r3, #1
 8022f3e:	9311      	str	r3, [sp, #68]	; 0x44
 8022f40:	e72f      	b.n	8022da2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022f42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022f44:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8022f46:	4433      	add	r3, r6
 8022f48:	9327      	str	r3, [sp, #156]	; 0x9c
 8022f4a:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8022f4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022f4e:	4433      	add	r3, r6
 8022f50:	9328      	str	r3, [sp, #160]	; 0xa0
 8022f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f54:	3b01      	subs	r3, #1
 8022f56:	9309      	str	r3, [sp, #36]	; 0x24
 8022f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f5a:	3302      	adds	r3, #2
 8022f5c:	930a      	str	r3, [sp, #40]	; 0x28
 8022f5e:	e6ff      	b.n	8022d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022f60:	d027      	beq.n	8022fb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 8022f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f64:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022f66:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8022f68:	3b01      	subs	r3, #1
 8022f6a:	fb00 5003 	mla	r0, r0, r3, r5
 8022f6e:	1400      	asrs	r0, r0, #16
 8022f70:	f53f af13 	bmi.w	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022f74:	3901      	subs	r1, #1
 8022f76:	4288      	cmp	r0, r1
 8022f78:	f6bf af0f 	bge.w	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022f7c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022f7e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8022f80:	fb01 0303 	mla	r3, r1, r3, r0
 8022f84:	141b      	asrs	r3, r3, #16
 8022f86:	f53f af08 	bmi.w	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022f8a:	3a01      	subs	r2, #1
 8022f8c:	4293      	cmp	r3, r2
 8022f8e:	f6bf af04 	bge.w	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f94:	9311      	str	r3, [sp, #68]	; 0x44
 8022f96:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8022f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f9c:	930c      	str	r3, [sp, #48]	; 0x30
 8022f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022fa0:	2b00      	cmp	r3, #0
 8022fa2:	dc70      	bgt.n	8023086 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8022fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022fa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022fac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022fb0:	930a      	str	r3, [sp, #40]	; 0x28
 8022fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022fb4:	2b00      	cmp	r3, #0
 8022fb6:	f340 8124 	ble.w	8023202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8022fba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022fc2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022fc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022fc8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022fcc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022fd0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022fd4:	eef0 6a48 	vmov.f32	s13, s16
 8022fd8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022fdc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fe0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022fe4:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8022fe8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022fec:	eef0 6a68 	vmov.f32	s13, s17
 8022ff0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ff4:	ee18 2a10 	vmov	r2, s16
 8022ff8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022ffc:	fb92 f3f3 	sdiv	r3, r2, r3
 8023000:	ee18 2a90 	vmov	r2, s17
 8023004:	9329      	str	r3, [sp, #164]	; 0xa4
 8023006:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023008:	fb92 f3f3 	sdiv	r3, r2, r3
 802300c:	932a      	str	r3, [sp, #168]	; 0xa8
 802300e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023010:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023012:	3b01      	subs	r3, #1
 8023014:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023018:	930e      	str	r3, [sp, #56]	; 0x38
 802301a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802301c:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8023020:	bf08      	it	eq
 8023022:	4613      	moveq	r3, r2
 8023024:	9309      	str	r3, [sp, #36]	; 0x24
 8023026:	eef0 8a67 	vmov.f32	s17, s15
 802302a:	eeb0 8a47 	vmov.f32	s16, s14
 802302e:	e689      	b.n	8022d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023030:	b149      	cbz	r1, 8023046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023032:	5cb2      	ldrb	r2, [r6, r2]
 8023034:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023038:	4422      	add	r2, r4
 802303a:	4628      	mov	r0, r5
 802303c:	46ac      	mov	ip, r5
 802303e:	e6ee      	b.n	8022e1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023040:	4628      	mov	r0, r5
 8023042:	462a      	mov	r2, r5
 8023044:	e6eb      	b.n	8022e1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023046:	4628      	mov	r0, r5
 8023048:	462a      	mov	r2, r5
 802304a:	e7f7      	b.n	802303c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802304c:	1c47      	adds	r7, r0, #1
 802304e:	f53f af69 	bmi.w	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023052:	42ba      	cmp	r2, r7
 8023054:	f6ff af66 	blt.w	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023058:	1c6f      	adds	r7, r5, #1
 802305a:	f53f af63 	bmi.w	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802305e:	42be      	cmp	r6, r7
 8023060:	f6ff af60 	blt.w	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023064:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023066:	9002      	str	r0, [sp, #8]
 8023068:	b236      	sxth	r6, r6
 802306a:	b212      	sxth	r2, r2
 802306c:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023070:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023074:	9200      	str	r2, [sp, #0]
 8023076:	9601      	str	r6, [sp, #4]
 8023078:	4623      	mov	r3, r4
 802307a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 802307e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023080:	f7ff fd46 	bl	8022b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023084:	e74e      	b.n	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023086:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023088:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802308a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802308c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802308e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023092:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023094:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023098:	142d      	asrs	r5, r5, #16
 802309a:	1400      	asrs	r0, r0, #16
 802309c:	fb02 5000 	mla	r0, r2, r0, r5
 80230a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80230a2:	f815 9000 	ldrb.w	r9, [r5, r0]
 80230a6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80230aa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80230ae:	182e      	adds	r6, r5, r0
 80230b0:	eb04 0509 	add.w	r5, r4, r9
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	f000 8096 	beq.w	80231e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 80230ba:	7877      	ldrb	r7, [r6, #1]
 80230bc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80230c0:	4427      	add	r7, r4
 80230c2:	2900      	cmp	r1, #0
 80230c4:	f000 8097 	beq.w	80231f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80230c8:	18b0      	adds	r0, r6, r2
 80230ca:	5cb2      	ldrb	r2, [r6, r2]
 80230cc:	7840      	ldrb	r0, [r0, #1]
 80230ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80230d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80230d6:	4422      	add	r2, r4
 80230d8:	4420      	add	r0, r4
 80230da:	b29b      	uxth	r3, r3
 80230dc:	b289      	uxth	r1, r1
 80230de:	fb03 f801 	mul.w	r8, r3, r1
 80230e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80230e4:	f895 b002 	ldrb.w	fp, [r5, #2]
 80230e8:	f8b6 c000 	ldrh.w	ip, [r6]
 80230ec:	78be      	ldrb	r6, [r7, #2]
 80230ee:	f814 9009 	ldrb.w	r9, [r4, r9]
 80230f2:	011b      	lsls	r3, r3, #4
 80230f4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80230f8:	b289      	uxth	r1, r1
 80230fa:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80230fe:	eba3 0308 	sub.w	r3, r3, r8
 8023102:	b29b      	uxth	r3, r3
 8023104:	ebae 0e01 	sub.w	lr, lr, r1
 8023108:	fa1f fe8e 	uxth.w	lr, lr
 802310c:	435e      	muls	r6, r3
 802310e:	fb0e 660b 	mla	r6, lr, fp, r6
 8023112:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023116:	9310      	str	r3, [sp, #64]	; 0x40
 8023118:	fb01 660b 	mla	r6, r1, fp, r6
 802311c:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023122:	fb08 660b 	mla	r6, r8, fp, r6
 8023126:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 802312a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802312e:	fb1b fb03 	smulbb	fp, fp, r3
 8023132:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023136:	fb06 b60a 	mla	r6, r6, sl, fp
 802313a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802313c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023140:	787d      	ldrb	r5, [r7, #1]
 8023142:	783f      	ldrb	r7, [r7, #0]
 8023144:	435d      	muls	r5, r3
 8023146:	fb0e 550b 	mla	r5, lr, fp, r5
 802314a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802314e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023150:	fb01 550b 	mla	r5, r1, fp, r5
 8023154:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023158:	fb08 550b 	mla	r5, r8, fp, r5
 802315c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023160:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023164:	fb1b fb03 	smulbb	fp, fp, r3
 8023168:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802316a:	437b      	muls	r3, r7
 802316c:	7817      	ldrb	r7, [r2, #0]
 802316e:	fb0e 3309 	mla	r3, lr, r9, r3
 8023172:	fb01 3307 	mla	r3, r1, r7, r3
 8023176:	7807      	ldrb	r7, [r0, #0]
 8023178:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802317c:	fb08 3707 	mla	r7, r8, r7, r3
 8023180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023182:	fa5f fc8c 	uxtb.w	ip, ip
 8023186:	fb1c fc03 	smulbb	ip, ip, r3
 802318a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802318e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023192:	fb05 b50a 	mla	r5, r5, sl, fp
 8023196:	fb07 c70a 	mla	r7, r7, sl, ip
 802319a:	b2b6      	uxth	r6, r6
 802319c:	b2ad      	uxth	r5, r5
 802319e:	b2bf      	uxth	r7, r7
 80231a0:	1c73      	adds	r3, r6, #1
 80231a2:	1c7a      	adds	r2, r7, #1
 80231a4:	f105 0b01 	add.w	fp, r5, #1
 80231a8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80231ac:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80231b0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80231b4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80231b8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80231bc:	096d      	lsrs	r5, r5, #5
 80231be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80231c0:	4316      	orrs	r6, r2
 80231c2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80231c6:	432e      	orrs	r6, r5
 80231c8:	f823 6b02 	strh.w	r6, [r3], #2
 80231cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80231ce:	930c      	str	r3, [sp, #48]	; 0x30
 80231d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80231d2:	4413      	add	r3, r2
 80231d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80231d6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80231d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80231da:	4413      	add	r3, r2
 80231dc:	9328      	str	r3, [sp, #160]	; 0xa0
 80231de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80231e0:	3b01      	subs	r3, #1
 80231e2:	9311      	str	r3, [sp, #68]	; 0x44
 80231e4:	e6db      	b.n	8022f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80231e6:	b149      	cbz	r1, 80231fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80231e8:	5cb2      	ldrb	r2, [r6, r2]
 80231ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80231ee:	4422      	add	r2, r4
 80231f0:	4628      	mov	r0, r5
 80231f2:	462f      	mov	r7, r5
 80231f4:	e771      	b.n	80230da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80231f6:	4628      	mov	r0, r5
 80231f8:	462a      	mov	r2, r5
 80231fa:	e76e      	b.n	80230da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80231fc:	4628      	mov	r0, r5
 80231fe:	462a      	mov	r2, r5
 8023200:	e7f7      	b.n	80231f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8023202:	b015      	add	sp, #84	; 0x54
 8023204:	ecbd 8b08 	vpop	{d8-d11}
 8023208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023210:	880e      	ldrh	r6, [r1, #0]
 8023212:	b085      	sub	sp, #20
 8023214:	0230      	lsls	r0, r6, #8
 8023216:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802321a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 802321e:	0170      	lsls	r0, r6, #5
 8023220:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8023224:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023228:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802322c:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8023230:	00f6      	lsls	r6, r6, #3
 8023232:	ea4b 0000 	orr.w	r0, fp, r0
 8023236:	b2f6      	uxtb	r6, r6
 8023238:	4691      	mov	r9, r2
 802323a:	fb05 7a0c 	mla	sl, r5, ip, r7
 802323e:	4306      	orrs	r6, r0
 8023240:	2d00      	cmp	r5, #0
 8023242:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8023246:	9603      	str	r6, [sp, #12]
 8023248:	eb09 0e0a 	add.w	lr, r9, sl
 802324c:	db42      	blt.n	80232d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 802324e:	45a8      	cmp	r8, r5
 8023250:	dd40      	ble.n	80232d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8023252:	2f00      	cmp	r7, #0
 8023254:	db3c      	blt.n	80232d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8023256:	45bc      	cmp	ip, r7
 8023258:	dd3a      	ble.n	80232d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 802325a:	f819 600a 	ldrb.w	r6, [r9, sl]
 802325e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023262:	441e      	add	r6, r3
 8023264:	1c78      	adds	r0, r7, #1
 8023266:	d438      	bmi.n	80232da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8023268:	4584      	cmp	ip, r0
 802326a:	dd36      	ble.n	80232da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 802326c:	b3aa      	cbz	r2, 80232da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 802326e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023272:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023276:	4418      	add	r0, r3
 8023278:	3501      	adds	r5, #1
 802327a:	d432      	bmi.n	80232e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 802327c:	45a8      	cmp	r8, r5
 802327e:	dd30      	ble.n	80232e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8023280:	b37c      	cbz	r4, 80232e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8023282:	2f00      	cmp	r7, #0
 8023284:	db2b      	blt.n	80232de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8023286:	45bc      	cmp	ip, r7
 8023288:	dd29      	ble.n	80232de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 802328a:	f81e 500c 	ldrb.w	r5, [lr, ip]
 802328e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023292:	441d      	add	r5, r3
 8023294:	3701      	adds	r7, #1
 8023296:	d427      	bmi.n	80232e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8023298:	45bc      	cmp	ip, r7
 802329a:	dd25      	ble.n	80232e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802329c:	b322      	cbz	r2, 80232e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802329e:	44f4      	add	ip, lr
 80232a0:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80232a4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80232a8:	443b      	add	r3, r7
 80232aa:	781f      	ldrb	r7, [r3, #0]
 80232ac:	f896 a000 	ldrb.w	sl, [r6]
 80232b0:	f890 b000 	ldrb.w	fp, [r0]
 80232b4:	f895 9000 	ldrb.w	r9, [r5]
 80232b8:	9700      	str	r7, [sp, #0]
 80232ba:	2a0f      	cmp	r2, #15
 80232bc:	d801      	bhi.n	80232c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 80232be:	2c0f      	cmp	r4, #15
 80232c0:	d914      	bls.n	80232ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 80232c2:	4b2c      	ldr	r3, [pc, #176]	; (8023374 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 80232c4:	4a2c      	ldr	r2, [pc, #176]	; (8023378 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 80232c6:	482d      	ldr	r0, [pc, #180]	; (802337c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 80232c8:	f240 210d 	movw	r1, #525	; 0x20d
 80232cc:	f006 f88c 	bl	80293e8 <__assert_func>
 80232d0:	ae03      	add	r6, sp, #12
 80232d2:	e7c7      	b.n	8023264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 80232d4:	a803      	add	r0, sp, #12
 80232d6:	4606      	mov	r6, r0
 80232d8:	e7ce      	b.n	8023278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80232da:	a803      	add	r0, sp, #12
 80232dc:	e7cc      	b.n	8023278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80232de:	ad03      	add	r5, sp, #12
 80232e0:	e7d8      	b.n	8023294 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 80232e2:	ab03      	add	r3, sp, #12
 80232e4:	461d      	mov	r5, r3
 80232e6:	e7e0      	b.n	80232aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 80232e8:	ab03      	add	r3, sp, #12
 80232ea:	e7de      	b.n	80232aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 80232ec:	b292      	uxth	r2, r2
 80232ee:	b2a4      	uxth	r4, r4
 80232f0:	fb02 f804 	mul.w	r8, r2, r4
 80232f4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80232f8:	0112      	lsls	r2, r2, #4
 80232fa:	b2a4      	uxth	r4, r4
 80232fc:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023300:	78b7      	ldrb	r7, [r6, #2]
 8023302:	7840      	ldrb	r0, [r0, #1]
 8023304:	7876      	ldrb	r6, [r6, #1]
 8023306:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802330a:	eba2 0208 	sub.w	r2, r2, r8
 802330e:	b292      	uxth	r2, r2
 8023310:	ebac 0c04 	sub.w	ip, ip, r4
 8023314:	fa1f fc8c 	uxth.w	ip, ip
 8023318:	fb02 fe0e 	mul.w	lr, r2, lr
 802331c:	fb0c ee07 	mla	lr, ip, r7, lr
 8023320:	78af      	ldrb	r7, [r5, #2]
 8023322:	fb04 ee07 	mla	lr, r4, r7, lr
 8023326:	789f      	ldrb	r7, [r3, #2]
 8023328:	785b      	ldrb	r3, [r3, #1]
 802332a:	fb08 e707 	mla	r7, r8, r7, lr
 802332e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023332:	fb02 fe0b 	mul.w	lr, r2, fp
 8023336:	4342      	muls	r2, r0
 8023338:	7868      	ldrb	r0, [r5, #1]
 802333a:	9701      	str	r7, [sp, #4]
 802333c:	fb0c ee0a 	mla	lr, ip, sl, lr
 8023340:	9f00      	ldr	r7, [sp, #0]
 8023342:	fb0c 2206 	mla	r2, ip, r6, r2
 8023346:	fb04 ee09 	mla	lr, r4, r9, lr
 802334a:	fb04 2400 	mla	r4, r4, r0, r2
 802334e:	fb08 ee07 	mla	lr, r8, r7, lr
 8023352:	9f01      	ldr	r7, [sp, #4]
 8023354:	fb08 4803 	mla	r8, r8, r3, r4
 8023358:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802335c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8023360:	ea47 070e 	orr.w	r7, r7, lr
 8023364:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023368:	ea47 0708 	orr.w	r7, r7, r8
 802336c:	800f      	strh	r7, [r1, #0]
 802336e:	b005      	add	sp, #20
 8023370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023374:	0803097a 	.word	0x0803097a
 8023378:	08030f3d 	.word	0x08030f3d
 802337c:	08030a63 	.word	0x08030a63

08023380 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023384:	ed2d 8b08 	vpush	{d8-d11}
 8023388:	b08f      	sub	sp, #60	; 0x3c
 802338a:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 802338e:	920c      	str	r2, [sp, #48]	; 0x30
 8023390:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023392:	910a      	str	r1, [sp, #40]	; 0x28
 8023394:	9306      	str	r3, [sp, #24]
 8023396:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802339a:	900d      	str	r0, [sp, #52]	; 0x34
 802339c:	6850      	ldr	r0, [r2, #4]
 802339e:	6812      	ldr	r2, [r2, #0]
 80233a0:	fb00 1303 	mla	r3, r0, r3, r1
 80233a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80233a8:	9307      	str	r3, [sp, #28]
 80233aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233ac:	681b      	ldr	r3, [r3, #0]
 80233ae:	9308      	str	r3, [sp, #32]
 80233b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233b2:	685c      	ldr	r4, [r3, #4]
 80233b4:	eeb0 aa40 	vmov.f32	s20, s0
 80233b8:	eef0 9a60 	vmov.f32	s19, s1
 80233bc:	eeb0 9a41 	vmov.f32	s18, s2
 80233c0:	eeb0 8a62 	vmov.f32	s16, s5
 80233c4:	eef0 8a43 	vmov.f32	s17, s6
 80233c8:	eef0 ba44 	vmov.f32	s23, s8
 80233cc:	eeb0 ba64 	vmov.f32	s22, s9
 80233d0:	eef0 aa45 	vmov.f32	s21, s10
 80233d4:	3404      	adds	r4, #4
 80233d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233d8:	2b00      	cmp	r3, #0
 80233da:	dc03      	bgt.n	80233e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80233dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233de:	2b00      	cmp	r3, #0
 80233e0:	f340 81d6 	ble.w	8023790 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80233e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80233ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80233ee:	1e48      	subs	r0, r1, #1
 80233f0:	1e56      	subs	r6, r2, #1
 80233f2:	9b06      	ldr	r3, [sp, #24]
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	f340 80b7 	ble.w	8023568 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80233fa:	ea5f 472b 	movs.w	r7, fp, asr #16
 80233fe:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023402:	d406      	bmi.n	8023412 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023404:	4287      	cmp	r7, r0
 8023406:	da04      	bge.n	8023412 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023408:	2b00      	cmp	r3, #0
 802340a:	db02      	blt.n	8023412 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802340c:	42b3      	cmp	r3, r6
 802340e:	f2c0 80ac 	blt.w	802356a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023412:	3701      	adds	r7, #1
 8023414:	f100 809d 	bmi.w	8023552 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023418:	42b9      	cmp	r1, r7
 802341a:	f2c0 809a 	blt.w	8023552 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802341e:	3301      	adds	r3, #1
 8023420:	f100 8097 	bmi.w	8023552 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023424:	429a      	cmp	r2, r3
 8023426:	f2c0 8094 	blt.w	8023552 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802342a:	9b06      	ldr	r3, [sp, #24]
 802342c:	930b      	str	r3, [sp, #44]	; 0x2c
 802342e:	9b07      	ldr	r3, [sp, #28]
 8023430:	9309      	str	r3, [sp, #36]	; 0x24
 8023432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023434:	2b00      	cmp	r3, #0
 8023436:	f340 80b5 	ble.w	80235a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802343a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802343c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802343e:	68c7      	ldr	r7, [r0, #12]
 8023440:	6892      	ldr	r2, [r2, #8]
 8023442:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023446:	ea4f 4625 	mov.w	r6, r5, asr #16
 802344a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802344e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023452:	f100 80fb 	bmi.w	802364c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8023456:	f102 3cff 	add.w	ip, r2, #4294967295
 802345a:	4560      	cmp	r0, ip
 802345c:	f280 80f6 	bge.w	802364c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8023460:	2e00      	cmp	r6, #0
 8023462:	f2c0 80f3 	blt.w	802364c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8023466:	f107 3cff 	add.w	ip, r7, #4294967295
 802346a:	4566      	cmp	r6, ip
 802346c:	f280 80ee 	bge.w	802364c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8023470:	b212      	sxth	r2, r2
 8023472:	fb06 0002 	mla	r0, r6, r2, r0
 8023476:	9e08      	ldr	r6, [sp, #32]
 8023478:	1837      	adds	r7, r6, r0
 802347a:	5c30      	ldrb	r0, [r6, r0]
 802347c:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8023480:	eb04 0c08 	add.w	ip, r4, r8
 8023484:	2b00      	cmp	r3, #0
 8023486:	f000 80d3 	beq.w	8023630 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802348a:	787e      	ldrb	r6, [r7, #1]
 802348c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023490:	4426      	add	r6, r4
 8023492:	2900      	cmp	r1, #0
 8023494:	f000 80d4 	beq.w	8023640 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8023498:	18b8      	adds	r0, r7, r2
 802349a:	5cba      	ldrb	r2, [r7, r2]
 802349c:	7840      	ldrb	r0, [r0, #1]
 802349e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80234a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80234a6:	4422      	add	r2, r4
 80234a8:	4420      	add	r0, r4
 80234aa:	b29b      	uxth	r3, r3
 80234ac:	b289      	uxth	r1, r1
 80234ae:	fb03 f901 	mul.w	r9, r3, r1
 80234b2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80234b6:	011b      	lsls	r3, r3, #4
 80234b8:	b289      	uxth	r1, r1
 80234ba:	78b7      	ldrb	r7, [r6, #2]
 80234bc:	f89c a002 	ldrb.w	sl, [ip, #2]
 80234c0:	f89c c001 	ldrb.w	ip, [ip, #1]
 80234c4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80234c8:	eba3 0309 	sub.w	r3, r3, r9
 80234cc:	b29b      	uxth	r3, r3
 80234ce:	ebae 0e01 	sub.w	lr, lr, r1
 80234d2:	fa1f fe8e 	uxth.w	lr, lr
 80234d6:	435f      	muls	r7, r3
 80234d8:	fb0e 770a 	mla	r7, lr, sl, r7
 80234dc:	f892 a002 	ldrb.w	sl, [r2, #2]
 80234e0:	fb01 770a 	mla	r7, r1, sl, r7
 80234e4:	f890 a002 	ldrb.w	sl, [r0, #2]
 80234e8:	fb09 7a0a 	mla	sl, r9, sl, r7
 80234ec:	f814 7008 	ldrb.w	r7, [r4, r8]
 80234f0:	f896 8000 	ldrb.w	r8, [r6]
 80234f4:	7876      	ldrb	r6, [r6, #1]
 80234f6:	fb03 f808 	mul.w	r8, r3, r8
 80234fa:	fb0e 8807 	mla	r8, lr, r7, r8
 80234fe:	7817      	ldrb	r7, [r2, #0]
 8023500:	fb01 8807 	mla	r8, r1, r7, r8
 8023504:	7807      	ldrb	r7, [r0, #0]
 8023506:	fb09 8707 	mla	r7, r9, r7, r8
 802350a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802350e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023512:	ea4a 0707 	orr.w	r7, sl, r7
 8023516:	4373      	muls	r3, r6
 8023518:	f892 a001 	ldrb.w	sl, [r2, #1]
 802351c:	fb0e 330c 	mla	r3, lr, ip, r3
 8023520:	fb01 310a 	mla	r1, r1, sl, r3
 8023524:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802352a:	fb09 1a0a 	mla	sl, r9, sl, r1
 802352e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023532:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023536:	ea47 070a 	orr.w	r7, r7, sl
 802353a:	801f      	strh	r7, [r3, #0]
 802353c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802353e:	3302      	adds	r3, #2
 8023540:	9309      	str	r3, [sp, #36]	; 0x24
 8023542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023544:	449b      	add	fp, r3
 8023546:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023548:	441d      	add	r5, r3
 802354a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802354c:	3b01      	subs	r3, #1
 802354e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023550:	e76f      	b.n	8023432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023552:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023554:	449b      	add	fp, r3
 8023556:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023558:	441d      	add	r5, r3
 802355a:	9b06      	ldr	r3, [sp, #24]
 802355c:	3b01      	subs	r3, #1
 802355e:	9306      	str	r3, [sp, #24]
 8023560:	9b07      	ldr	r3, [sp, #28]
 8023562:	3302      	adds	r3, #2
 8023564:	9307      	str	r3, [sp, #28]
 8023566:	e744      	b.n	80233f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023568:	d023      	beq.n	80235b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802356a:	9b06      	ldr	r3, [sp, #24]
 802356c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802356e:	3b01      	subs	r3, #1
 8023570:	fb00 b003 	mla	r0, r0, r3, fp
 8023574:	1400      	asrs	r0, r0, #16
 8023576:	f53f af58 	bmi.w	802342a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802357a:	3901      	subs	r1, #1
 802357c:	4288      	cmp	r0, r1
 802357e:	f6bf af54 	bge.w	802342a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023582:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023584:	fb01 5303 	mla	r3, r1, r3, r5
 8023588:	141b      	asrs	r3, r3, #16
 802358a:	f53f af4e 	bmi.w	802342a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802358e:	3a01      	subs	r2, #1
 8023590:	4293      	cmp	r3, r2
 8023592:	f6bf af4a 	bge.w	802342a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023596:	9b06      	ldr	r3, [sp, #24]
 8023598:	9309      	str	r3, [sp, #36]	; 0x24
 802359a:	9b07      	ldr	r3, [sp, #28]
 802359c:	930b      	str	r3, [sp, #44]	; 0x2c
 802359e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	dc70      	bgt.n	8023686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80235a4:	9b06      	ldr	r3, [sp, #24]
 80235a6:	9a07      	ldr	r2, [sp, #28]
 80235a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80235ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80235b0:	9307      	str	r3, [sp, #28]
 80235b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235b4:	2b00      	cmp	r3, #0
 80235b6:	f340 80eb 	ble.w	8023790 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80235ba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80235be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80235c2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80235c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235c8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80235cc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80235d0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80235d4:	eef0 6a48 	vmov.f32	s13, s16
 80235d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80235dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80235e0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80235e4:	ee16 ba90 	vmov	fp, s13
 80235e8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80235ec:	eef0 6a68 	vmov.f32	s13, s17
 80235f0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80235f4:	ee18 2a10 	vmov	r2, s16
 80235f8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80235fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8023600:	ee18 2a90 	vmov	r2, s17
 8023604:	9323      	str	r3, [sp, #140]	; 0x8c
 8023606:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023608:	fb92 f3f3 	sdiv	r3, r2, r3
 802360c:	9324      	str	r3, [sp, #144]	; 0x90
 802360e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023612:	3b01      	subs	r3, #1
 8023614:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023618:	930a      	str	r3, [sp, #40]	; 0x28
 802361a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802361c:	bf08      	it	eq
 802361e:	4613      	moveq	r3, r2
 8023620:	ee16 5a90 	vmov	r5, s13
 8023624:	9306      	str	r3, [sp, #24]
 8023626:	eef0 8a67 	vmov.f32	s17, s15
 802362a:	eeb0 8a47 	vmov.f32	s16, s14
 802362e:	e6d2      	b.n	80233d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023630:	b149      	cbz	r1, 8023646 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8023632:	5cba      	ldrb	r2, [r7, r2]
 8023634:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023638:	4422      	add	r2, r4
 802363a:	4660      	mov	r0, ip
 802363c:	4666      	mov	r6, ip
 802363e:	e734      	b.n	80234aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8023640:	4660      	mov	r0, ip
 8023642:	4662      	mov	r2, ip
 8023644:	e731      	b.n	80234aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8023646:	4660      	mov	r0, ip
 8023648:	4662      	mov	r2, ip
 802364a:	e7f7      	b.n	802363c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802364c:	f110 0c01 	adds.w	ip, r0, #1
 8023650:	f53f af74 	bmi.w	802353c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023654:	4562      	cmp	r2, ip
 8023656:	f6ff af71 	blt.w	802353c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802365a:	f116 0c01 	adds.w	ip, r6, #1
 802365e:	f53f af6d 	bmi.w	802353c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023662:	4567      	cmp	r7, ip
 8023664:	f6ff af6a 	blt.w	802353c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023668:	b23f      	sxth	r7, r7
 802366a:	b212      	sxth	r2, r2
 802366c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023670:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8023674:	9200      	str	r2, [sp, #0]
 8023676:	9701      	str	r7, [sp, #4]
 8023678:	4623      	mov	r3, r4
 802367a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802367e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023680:	f7ff fdc4 	bl	802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8023684:	e75a      	b.n	802353c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023686:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023688:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802368c:	ea4f 462b 	mov.w	r6, fp, asr #16
 8023690:	1428      	asrs	r0, r5, #16
 8023692:	fb02 6000 	mla	r0, r2, r0, r6
 8023696:	9e08      	ldr	r6, [sp, #32]
 8023698:	f816 8000 	ldrb.w	r8, [r6, r0]
 802369c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80236a0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80236a4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80236a8:	1837      	adds	r7, r6, r0
 80236aa:	eb04 0c08 	add.w	ip, r4, r8
 80236ae:	2b00      	cmp	r3, #0
 80236b0:	d060      	beq.n	8023774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80236b2:	787e      	ldrb	r6, [r7, #1]
 80236b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80236b8:	4426      	add	r6, r4
 80236ba:	2900      	cmp	r1, #0
 80236bc:	d062      	beq.n	8023784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80236be:	18b8      	adds	r0, r7, r2
 80236c0:	5cba      	ldrb	r2, [r7, r2]
 80236c2:	7840      	ldrb	r0, [r0, #1]
 80236c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80236c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80236cc:	4422      	add	r2, r4
 80236ce:	4420      	add	r0, r4
 80236d0:	b29b      	uxth	r3, r3
 80236d2:	b289      	uxth	r1, r1
 80236d4:	fb03 f901 	mul.w	r9, r3, r1
 80236d8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80236dc:	011b      	lsls	r3, r3, #4
 80236de:	b289      	uxth	r1, r1
 80236e0:	78b7      	ldrb	r7, [r6, #2]
 80236e2:	f89c a002 	ldrb.w	sl, [ip, #2]
 80236e6:	f89c c001 	ldrb.w	ip, [ip, #1]
 80236ea:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80236ee:	eba3 0309 	sub.w	r3, r3, r9
 80236f2:	b29b      	uxth	r3, r3
 80236f4:	ebae 0e01 	sub.w	lr, lr, r1
 80236f8:	fa1f fe8e 	uxth.w	lr, lr
 80236fc:	435f      	muls	r7, r3
 80236fe:	fb0e 770a 	mla	r7, lr, sl, r7
 8023702:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023706:	fb01 770a 	mla	r7, r1, sl, r7
 802370a:	f890 a002 	ldrb.w	sl, [r0, #2]
 802370e:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023712:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023716:	f896 8000 	ldrb.w	r8, [r6]
 802371a:	7876      	ldrb	r6, [r6, #1]
 802371c:	fb03 f808 	mul.w	r8, r3, r8
 8023720:	fb0e 8807 	mla	r8, lr, r7, r8
 8023724:	7817      	ldrb	r7, [r2, #0]
 8023726:	fb01 8807 	mla	r8, r1, r7, r8
 802372a:	7807      	ldrb	r7, [r0, #0]
 802372c:	fb09 8707 	mla	r7, r9, r7, r8
 8023730:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023734:	4373      	muls	r3, r6
 8023736:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802373a:	7856      	ldrb	r6, [r2, #1]
 802373c:	ea4a 0707 	orr.w	r7, sl, r7
 8023740:	fb0e 330c 	mla	r3, lr, ip, r3
 8023744:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023748:	fb01 3306 	mla	r3, r1, r6, r3
 802374c:	fb09 3a0a 	mla	sl, r9, sl, r3
 8023750:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023756:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802375a:	ea47 070a 	orr.w	r7, r7, sl
 802375e:	f823 7b02 	strh.w	r7, [r3], #2
 8023762:	930b      	str	r3, [sp, #44]	; 0x2c
 8023764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023766:	449b      	add	fp, r3
 8023768:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802376a:	441d      	add	r5, r3
 802376c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802376e:	3b01      	subs	r3, #1
 8023770:	9309      	str	r3, [sp, #36]	; 0x24
 8023772:	e714      	b.n	802359e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023774:	b149      	cbz	r1, 802378a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8023776:	5cba      	ldrb	r2, [r7, r2]
 8023778:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802377c:	4422      	add	r2, r4
 802377e:	4660      	mov	r0, ip
 8023780:	4666      	mov	r6, ip
 8023782:	e7a5      	b.n	80236d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023784:	4660      	mov	r0, ip
 8023786:	4662      	mov	r2, ip
 8023788:	e7a2      	b.n	80236d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802378a:	4660      	mov	r0, ip
 802378c:	4662      	mov	r2, ip
 802378e:	e7f7      	b.n	8023780 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8023790:	b00f      	add	sp, #60	; 0x3c
 8023792:	ecbd 8b08 	vpop	{d8-d11}
 8023796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802379c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802379c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237a0:	880e      	ldrh	r6, [r1, #0]
 80237a2:	b085      	sub	sp, #20
 80237a4:	ea4f 2e26 	mov.w	lr, r6, asr #8
 80237a8:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80237ac:	4691      	mov	r9, r2
 80237ae:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80237b2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80237b6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80237ba:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80237be:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 80237c2:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 80237c6:	9200      	str	r2, [sp, #0]
 80237c8:	00f6      	lsls	r6, r6, #3
 80237ca:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 80237ce:	9201      	str	r2, [sp, #4]
 80237d0:	2c00      	cmp	r4, #0
 80237d2:	b2f2      	uxtb	r2, r6
 80237d4:	fb04 560c 	mla	r6, r4, ip, r5
 80237d8:	9202      	str	r2, [sp, #8]
 80237da:	eb09 0e06 	add.w	lr, r9, r6
 80237de:	db3e      	blt.n	802385e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80237e0:	45a0      	cmp	r8, r4
 80237e2:	dd3c      	ble.n	802385e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80237e4:	2d00      	cmp	r5, #0
 80237e6:	db38      	blt.n	802385a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80237e8:	45ac      	cmp	ip, r5
 80237ea:	dd36      	ble.n	802385a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80237ec:	f819 2006 	ldrb.w	r2, [r9, r6]
 80237f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80237f4:	1c6e      	adds	r6, r5, #1
 80237f6:	d435      	bmi.n	8023864 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 80237f8:	45b4      	cmp	ip, r6
 80237fa:	dd33      	ble.n	8023864 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 80237fc:	b3a0      	cbz	r0, 8023868 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 80237fe:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8023802:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8023806:	3401      	adds	r4, #1
 8023808:	d432      	bmi.n	8023870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 802380a:	45a0      	cmp	r8, r4
 802380c:	dd30      	ble.n	8023870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 802380e:	b397      	cbz	r7, 8023876 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8023810:	2d00      	cmp	r5, #0
 8023812:	db2b      	blt.n	802386c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8023814:	45ac      	cmp	ip, r5
 8023816:	dd29      	ble.n	802386c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8023818:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802381c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8023820:	3501      	adds	r5, #1
 8023822:	d42b      	bmi.n	802387c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8023824:	45ac      	cmp	ip, r5
 8023826:	dd29      	ble.n	802387c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8023828:	b350      	cbz	r0, 8023880 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 802382a:	44f4      	add	ip, lr
 802382c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023830:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023834:	280f      	cmp	r0, #15
 8023836:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802383a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802383e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023842:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8023846:	d801      	bhi.n	802384c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 8023848:	2f0f      	cmp	r7, #15
 802384a:	d91b      	bls.n	8023884 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 802384c:	4b84      	ldr	r3, [pc, #528]	; (8023a60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 802384e:	4a85      	ldr	r2, [pc, #532]	; (8023a64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8023850:	4885      	ldr	r0, [pc, #532]	; (8023a68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8023852:	f240 210d 	movw	r1, #525	; 0x20d
 8023856:	f005 fdc7 	bl	80293e8 <__assert_func>
 802385a:	2200      	movs	r2, #0
 802385c:	e7ca      	b.n	80237f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 802385e:	2600      	movs	r6, #0
 8023860:	4632      	mov	r2, r6
 8023862:	e7d0      	b.n	8023806 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8023864:	2600      	movs	r6, #0
 8023866:	e7ce      	b.n	8023806 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8023868:	4606      	mov	r6, r0
 802386a:	e7cc      	b.n	8023806 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 802386c:	2400      	movs	r4, #0
 802386e:	e7d7      	b.n	8023820 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 8023870:	2300      	movs	r3, #0
 8023872:	461c      	mov	r4, r3
 8023874:	e7de      	b.n	8023834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023876:	463b      	mov	r3, r7
 8023878:	463c      	mov	r4, r7
 802387a:	e7db      	b.n	8023834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 802387c:	2300      	movs	r3, #0
 802387e:	e7d9      	b.n	8023834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023880:	4603      	mov	r3, r0
 8023882:	e7d7      	b.n	8023834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023884:	b280      	uxth	r0, r0
 8023886:	b2bf      	uxth	r7, r7
 8023888:	fb00 fe07 	mul.w	lr, r0, r7
 802388c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023890:	0100      	lsls	r0, r0, #4
 8023892:	eba0 0c0e 	sub.w	ip, r0, lr
 8023896:	b2bf      	uxth	r7, r7
 8023898:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802389c:	fa1f fc8c 	uxth.w	ip, ip
 80238a0:	1bed      	subs	r5, r5, r7
 80238a2:	b2ad      	uxth	r5, r5
 80238a4:	fb0c f00a 	mul.w	r0, ip, sl
 80238a8:	fb05 000b 	mla	r0, r5, fp, r0
 80238ac:	fb07 0009 	mla	r0, r7, r9, r0
 80238b0:	fb0e 0008 	mla	r0, lr, r8, r0
 80238b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80238b8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80238bc:	9003      	str	r0, [sp, #12]
 80238be:	d018      	beq.n	80238f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x156>
 80238c0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80238c4:	fb0b f000 	mul.w	r0, fp, r0
 80238c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80238cc:	fb0b fb02 	mul.w	fp, fp, r2
 80238d0:	0a02      	lsrs	r2, r0, #8
 80238d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80238d6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80238da:	4402      	add	r2, r0
 80238dc:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80238e0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80238e4:	0a12      	lsrs	r2, r2, #8
 80238e6:	0a00      	lsrs	r0, r0, #8
 80238e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80238ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80238f0:	4302      	orrs	r2, r0
 80238f2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80238f6:	d019      	beq.n	802392c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x190>
 80238f8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80238fc:	fb0a fb0b 	mul.w	fp, sl, fp
 8023900:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023904:	fb0a fa06 	mul.w	sl, sl, r6
 8023908:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802390c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023910:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023914:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8023918:	445e      	add	r6, fp
 802391a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802391e:	0a36      	lsrs	r6, r6, #8
 8023920:	0a00      	lsrs	r0, r0, #8
 8023922:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023926:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802392a:	4306      	orrs	r6, r0
 802392c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023930:	d019      	beq.n	8023966 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ca>
 8023932:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023936:	fb09 fa0a 	mul.w	sl, r9, sl
 802393a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802393e:	fb09 f904 	mul.w	r9, r9, r4
 8023942:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023946:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802394a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802394e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8023952:	4454      	add	r4, sl
 8023954:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8023958:	0a24      	lsrs	r4, r4, #8
 802395a:	0a00      	lsrs	r0, r0, #8
 802395c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023960:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023964:	4304      	orrs	r4, r0
 8023966:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802396a:	d019      	beq.n	80239a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x204>
 802396c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8023970:	fb08 f909 	mul.w	r9, r8, r9
 8023974:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023978:	fb08 f803 	mul.w	r8, r8, r3
 802397c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8023980:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023984:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023988:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802398c:	444b      	add	r3, r9
 802398e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023992:	0a1b      	lsrs	r3, r3, #8
 8023994:	0a00      	lsrs	r0, r0, #8
 8023996:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802399a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802399e:	4303      	orrs	r3, r0
 80239a0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80239a4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80239a8:	fb0c f808 	mul.w	r8, ip, r8
 80239ac:	fb05 8800 	mla	r8, r5, r0, r8
 80239b0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80239b4:	fb07 8800 	mla	r8, r7, r0, r8
 80239b8:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80239bc:	fb0e 8000 	mla	r0, lr, r0, r8
 80239c0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80239c4:	fb0c f606 	mul.w	r6, ip, r6
 80239c8:	0a00      	lsrs	r0, r0, #8
 80239ca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80239ce:	fb05 6202 	mla	r2, r5, r2, r6
 80239d2:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80239d6:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80239da:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80239de:	fb07 2700 	mla	r7, r7, r0, r2
 80239e2:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80239e6:	9b03      	ldr	r3, [sp, #12]
 80239e8:	9c00      	ldr	r4, [sp, #0]
 80239ea:	b2ad      	uxth	r5, r5
 80239ec:	436b      	muls	r3, r5
 80239ee:	fb0e 7000 	mla	r0, lr, r0, r7
 80239f2:	1c5a      	adds	r2, r3, #1
 80239f4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80239f8:	0a00      	lsrs	r0, r0, #8
 80239fa:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80239fe:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8023a02:	ea48 0000 	orr.w	r0, r8, r0
 8023a06:	b2d2      	uxtb	r2, r2
 8023a08:	fb14 f602 	smulbb	r6, r4, r2
 8023a0c:	0c03      	lsrs	r3, r0, #16
 8023a0e:	fb03 6305 	mla	r3, r3, r5, r6
 8023a12:	b29e      	uxth	r6, r3
 8023a14:	9b01      	ldr	r3, [sp, #4]
 8023a16:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8023a1a:	fb13 f302 	smulbb	r3, r3, r2
 8023a1e:	fb04 3405 	mla	r4, r4, r5, r3
 8023a22:	9b02      	ldr	r3, [sp, #8]
 8023a24:	b2c0      	uxtb	r0, r0
 8023a26:	fb13 f202 	smulbb	r2, r3, r2
 8023a2a:	fb00 2005 	mla	r0, r0, r5, r2
 8023a2e:	b280      	uxth	r0, r0
 8023a30:	b2a4      	uxth	r4, r4
 8023a32:	1c42      	adds	r2, r0, #1
 8023a34:	1c73      	adds	r3, r6, #1
 8023a36:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023a3a:	1c62      	adds	r2, r4, #1
 8023a3c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8023a40:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023a44:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8023a48:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023a4c:	0952      	lsrs	r2, r2, #5
 8023a4e:	4303      	orrs	r3, r0
 8023a50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a54:	4313      	orrs	r3, r2
 8023a56:	800b      	strh	r3, [r1, #0]
 8023a58:	b005      	add	sp, #20
 8023a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a5e:	bf00      	nop
 8023a60:	0803097a 	.word	0x0803097a
 8023a64:	08030f3d 	.word	0x08030f3d
 8023a68:	08030a63 	.word	0x08030a63

08023a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a70:	ed2d 8b08 	vpush	{d8-d11}
 8023a74:	b09f      	sub	sp, #124	; 0x7c
 8023a76:	eeb0 aa40 	vmov.f32	s20, s0
 8023a7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8023a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8023a7e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8023a80:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8023a84:	931c      	str	r3, [sp, #112]	; 0x70
 8023a86:	9119      	str	r1, [sp, #100]	; 0x64
 8023a88:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8023a8c:	901d      	str	r0, [sp, #116]	; 0x74
 8023a8e:	6850      	ldr	r0, [r2, #4]
 8023a90:	6812      	ldr	r2, [r2, #0]
 8023a92:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8023a94:	fb00 1303 	mla	r3, r0, r3, r1
 8023a98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023a9c:	930c      	str	r3, [sp, #48]	; 0x30
 8023a9e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8023aa4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023aa6:	685e      	ldr	r6, [r3, #4]
 8023aa8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8023aac:	930d      	str	r3, [sp, #52]	; 0x34
 8023aae:	eef0 9a60 	vmov.f32	s19, s1
 8023ab2:	eeb0 9a41 	vmov.f32	s18, s2
 8023ab6:	eeb0 8a62 	vmov.f32	s16, s5
 8023aba:	eef0 8a43 	vmov.f32	s17, s6
 8023abe:	eef0 ba44 	vmov.f32	s23, s8
 8023ac2:	eeb0 ba64 	vmov.f32	s22, s9
 8023ac6:	eef0 aa45 	vmov.f32	s21, s10
 8023aca:	3604      	adds	r6, #4
 8023acc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	dc03      	bgt.n	8023ada <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023ad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	f340 838e 	ble.w	80241f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78a>
 8023ada:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023adc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ae0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023ae4:	1e48      	subs	r0, r1, #1
 8023ae6:	1e57      	subs	r7, r2, #1
 8023ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023aea:	2b00      	cmp	r3, #0
 8023aec:	f340 819b 	ble.w	8023e26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8023af0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8023af2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023af6:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023afa:	d406      	bmi.n	8023b0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023afc:	4584      	cmp	ip, r0
 8023afe:	da04      	bge.n	8023b0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023b00:	2b00      	cmp	r3, #0
 8023b02:	db02      	blt.n	8023b0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023b04:	42bb      	cmp	r3, r7
 8023b06:	f2c0 818f 	blt.w	8023e28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8023b0a:	f11c 0c01 	adds.w	ip, ip, #1
 8023b0e:	f100 817d 	bmi.w	8023e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8023b12:	4561      	cmp	r1, ip
 8023b14:	f2c0 817a 	blt.w	8023e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8023b18:	3301      	adds	r3, #1
 8023b1a:	f100 8177 	bmi.w	8023e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8023b1e:	429a      	cmp	r2, r3
 8023b20:	f2c0 8174 	blt.w	8023e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8023b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023b28:	931a      	str	r3, [sp, #104]	; 0x68
 8023b2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023b2c:	2b00      	cmp	r3, #0
 8023b2e:	f340 8199 	ble.w	8023e64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8023b32:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023b34:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023b38:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023b3a:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023b3e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023b40:	141b      	asrs	r3, r3, #16
 8023b42:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023b46:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023b4a:	f100 81dc 	bmi.w	8023f06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023b4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8023b52:	4543      	cmp	r3, r8
 8023b54:	f280 81d7 	bge.w	8023f06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023b58:	f1bc 0f00 	cmp.w	ip, #0
 8023b5c:	f2c0 81d3 	blt.w	8023f06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023b60:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023b64:	45c4      	cmp	ip, r8
 8023b66:	f280 81ce 	bge.w	8023f06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023b6a:	b200      	sxth	r0, r0
 8023b6c:	fb0c 3300 	mla	r3, ip, r0, r3
 8023b70:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b72:	eb04 0803 	add.w	r8, r4, r3
 8023b76:	5ce3      	ldrb	r3, [r4, r3]
 8023b78:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023b7c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023b80:	2a00      	cmp	r2, #0
 8023b82:	f000 81b5 	beq.w	8023ef0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8023b86:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023b8a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023b8e:	940e      	str	r4, [sp, #56]	; 0x38
 8023b90:	0e24      	lsrs	r4, r4, #24
 8023b92:	9415      	str	r4, [sp, #84]	; 0x54
 8023b94:	b179      	cbz	r1, 8023bb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8023b96:	eb08 0c00 	add.w	ip, r8, r0
 8023b9a:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023b9e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023ba2:	900a      	str	r0, [sp, #40]	; 0x28
 8023ba4:	0e00      	lsrs	r0, r0, #24
 8023ba6:	9013      	str	r0, [sp, #76]	; 0x4c
 8023ba8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023bac:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023bb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8023bb2:	0e00      	lsrs	r0, r0, #24
 8023bb4:	9016      	str	r0, [sp, #88]	; 0x58
 8023bb6:	b292      	uxth	r2, r2
 8023bb8:	b289      	uxth	r1, r1
 8023bba:	fb02 f901 	mul.w	r9, r2, r1
 8023bbe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023bc2:	0112      	lsls	r2, r2, #4
 8023bc4:	eba2 0809 	sub.w	r8, r2, r9
 8023bc8:	b289      	uxth	r1, r1
 8023bca:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023bce:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023bd0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023bd2:	fa1f f888 	uxth.w	r8, r8
 8023bd6:	1a52      	subs	r2, r2, r1
 8023bd8:	b292      	uxth	r2, r2
 8023bda:	fb08 f000 	mul.w	r0, r8, r0
 8023bde:	fb02 000e 	mla	r0, r2, lr, r0
 8023be2:	fb01 0004 	mla	r0, r1, r4, r0
 8023be6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023be8:	fb09 0004 	mla	r0, r9, r4, r0
 8023bec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023bf0:	2800      	cmp	r0, #0
 8023bf2:	f000 8100 	beq.w	8023df6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023bf6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023bfa:	d01b      	beq.n	8023c34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8023bfc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023c00:	fb0e fa0a 	mul.w	sl, lr, sl
 8023c04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c08:	fb0e fe03 	mul.w	lr, lr, r3
 8023c0c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023c10:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c14:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023c18:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023c1c:	4453      	add	r3, sl
 8023c1e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023c22:	0a1b      	lsrs	r3, r3, #8
 8023c24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c2c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c30:	ea43 030c 	orr.w	r3, r3, ip
 8023c34:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023c36:	2cff      	cmp	r4, #255	; 0xff
 8023c38:	d021      	beq.n	8023c7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023c3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023c3c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023c40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023c42:	fb04 fb0b 	mul.w	fp, r4, fp
 8023c46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023c48:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023c4c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023c4e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c52:	fb04 fa0a 	mul.w	sl, r4, sl
 8023c56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c5a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c5e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c62:	44de      	add	lr, fp
 8023c64:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c74:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c78:	ea4e 040a 	orr.w	r4, lr, sl
 8023c7c:	940e      	str	r4, [sp, #56]	; 0x38
 8023c7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c80:	2cff      	cmp	r4, #255	; 0xff
 8023c82:	d021      	beq.n	8023cc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8023c84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023c86:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023c8a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c8c:	fb04 fb0b 	mul.w	fp, r4, fp
 8023c90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023c92:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023c96:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c98:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c9c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023ca0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ca4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023ca8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023cac:	44de      	add	lr, fp
 8023cae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cb2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cbe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023cc2:	ea4e 040a 	orr.w	r4, lr, sl
 8023cc6:	940a      	str	r4, [sp, #40]	; 0x28
 8023cc8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023cca:	2cff      	cmp	r4, #255	; 0xff
 8023ccc:	d021      	beq.n	8023d12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023cce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023cd0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023cd4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023cd6:	fb04 fb0b 	mul.w	fp, r4, fp
 8023cda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023cdc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023ce0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023ce2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ce6:	fb04 fa0a 	mul.w	sl, r4, sl
 8023cea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023cf2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023cf6:	44de      	add	lr, fp
 8023cf8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cfc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d0c:	ea4e 040a 	orr.w	r4, lr, sl
 8023d10:	940f      	str	r4, [sp, #60]	; 0x3c
 8023d12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023d14:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023d18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023d1a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023d1e:	fb08 fc0c 	mul.w	ip, r8, ip
 8023d22:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023d26:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023d2a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023d2c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023d30:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023d34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023d36:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023d3a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023d3e:	fb08 f80e 	mul.w	r8, r8, lr
 8023d42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023d46:	fb02 8303 	mla	r3, r2, r3, r8
 8023d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d4c:	f8b7 e000 	ldrh.w	lr, [r7]
 8023d50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023d52:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023d56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023d58:	fb01 330a 	mla	r3, r1, sl, r3
 8023d5c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023d60:	fb09 3901 	mla	r9, r9, r1, r3
 8023d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023d68:	4343      	muls	r3, r0
 8023d6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d6e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d72:	1c58      	adds	r0, r3, #1
 8023d74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d78:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023d7c:	ea4c 0c09 	orr.w	ip, ip, r9
 8023d80:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023d84:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023d88:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023d8c:	ea4f 232e 	mov.w	r3, lr, asr #8
 8023d90:	b2c0      	uxtb	r0, r0
 8023d92:	fb11 f102 	smulbb	r1, r1, r2
 8023d96:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023d9a:	fb03 1300 	mla	r3, r3, r0, r1
 8023d9e:	b299      	uxth	r1, r3
 8023da0:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8023da4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023da8:	fb13 f304 	smulbb	r3, r3, r4
 8023dac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023db0:	fb02 3200 	mla	r2, r2, r0, r3
 8023db4:	fa5f fc8c 	uxtb.w	ip, ip
 8023db8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8023dbc:	b2db      	uxtb	r3, r3
 8023dbe:	fb1c fc04 	smulbb	ip, ip, r4
 8023dc2:	fb03 cc00 	mla	ip, r3, r0, ip
 8023dc6:	b292      	uxth	r2, r2
 8023dc8:	fa1f fc8c 	uxth.w	ip, ip
 8023dcc:	1c4b      	adds	r3, r1, #1
 8023dce:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023dd2:	f10c 0001 	add.w	r0, ip, #1
 8023dd6:	1c51      	adds	r1, r2, #1
 8023dd8:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8023ddc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023de0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023de4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023de8:	0952      	lsrs	r2, r2, #5
 8023dea:	ea43 030c 	orr.w	r3, r3, ip
 8023dee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023df2:	4313      	orrs	r3, r2
 8023df4:	803b      	strh	r3, [r7, #0]
 8023df6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023df8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8023dfa:	441a      	add	r2, r3
 8023dfc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023dfe:	9231      	str	r2, [sp, #196]	; 0xc4
 8023e00:	441d      	add	r5, r3
 8023e02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023e04:	3b01      	subs	r3, #1
 8023e06:	3702      	adds	r7, #2
 8023e08:	931a      	str	r3, [sp, #104]	; 0x68
 8023e0a:	e68e      	b.n	8023b2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023e0c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023e0e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8023e10:	441c      	add	r4, r3
 8023e12:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023e14:	9431      	str	r4, [sp, #196]	; 0xc4
 8023e16:	441d      	add	r5, r3
 8023e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e1a:	3b01      	subs	r3, #1
 8023e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8023e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e20:	3302      	adds	r3, #2
 8023e22:	930c      	str	r3, [sp, #48]	; 0x30
 8023e24:	e660      	b.n	8023ae8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023e26:	d024      	beq.n	8023e72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8023e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e2a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8023e2c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8023e2e:	3b01      	subs	r3, #1
 8023e30:	fb00 4003 	mla	r0, r0, r3, r4
 8023e34:	1400      	asrs	r0, r0, #16
 8023e36:	f53f ae75 	bmi.w	8023b24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023e3a:	3901      	subs	r1, #1
 8023e3c:	4288      	cmp	r0, r1
 8023e3e:	f6bf ae71 	bge.w	8023b24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023e42:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8023e44:	fb01 5303 	mla	r3, r1, r3, r5
 8023e48:	141b      	asrs	r3, r3, #16
 8023e4a:	f53f ae6b 	bmi.w	8023b24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023e4e:	3a01      	subs	r2, #1
 8023e50:	4293      	cmp	r3, r2
 8023e52:	f6bf ae67 	bge.w	8023b24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023e56:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023e5a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8023e5e:	f1bb 0f00 	cmp.w	fp, #0
 8023e62:	dc70      	bgt.n	8023f46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8023e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e66:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e6c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023e70:	930c      	str	r3, [sp, #48]	; 0x30
 8023e72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023e74:	2b00      	cmp	r3, #0
 8023e76:	f340 81be 	ble.w	80241f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78a>
 8023e7a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e82:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023e86:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023e88:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023e8c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023e90:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023e94:	eef0 6a48 	vmov.f32	s13, s16
 8023e98:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023e9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ea0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023ea4:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8023ea8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023eac:	eef0 6a68 	vmov.f32	s13, s17
 8023eb0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023eb4:	ee18 2a10 	vmov	r2, s16
 8023eb8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023ebc:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ec0:	ee18 2a90 	vmov	r2, s17
 8023ec4:	9333      	str	r3, [sp, #204]	; 0xcc
 8023ec6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023ec8:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ecc:	9334      	str	r3, [sp, #208]	; 0xd0
 8023ece:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023ed0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023ed2:	3b01      	subs	r3, #1
 8023ed4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ed8:	9319      	str	r3, [sp, #100]	; 0x64
 8023eda:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023edc:	bf08      	it	eq
 8023ede:	4613      	moveq	r3, r2
 8023ee0:	ee16 5a90 	vmov	r5, s13
 8023ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8023ee6:	eef0 8a67 	vmov.f32	s17, s15
 8023eea:	eeb0 8a47 	vmov.f32	s16, s14
 8023eee:	e5ed      	b.n	8023acc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023ef0:	2900      	cmp	r1, #0
 8023ef2:	f43f ae60 	beq.w	8023bb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8023ef6:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023efa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023efe:	900a      	str	r0, [sp, #40]	; 0x28
 8023f00:	0e00      	lsrs	r0, r0, #24
 8023f02:	9013      	str	r0, [sp, #76]	; 0x4c
 8023f04:	e657      	b.n	8023bb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8023f06:	f113 0801 	adds.w	r8, r3, #1
 8023f0a:	f53f af74 	bmi.w	8023df6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023f0e:	4540      	cmp	r0, r8
 8023f10:	f6ff af71 	blt.w	8023df6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023f14:	f11c 0801 	adds.w	r8, ip, #1
 8023f18:	f53f af6d 	bmi.w	8023df6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023f1c:	45c6      	cmp	lr, r8
 8023f1e:	f6ff af6a 	blt.w	8023df6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023f22:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8023f24:	9302      	str	r3, [sp, #8]
 8023f26:	b200      	sxth	r0, r0
 8023f28:	fa0f f38e 	sxth.w	r3, lr
 8023f2c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023f30:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023f34:	9301      	str	r3, [sp, #4]
 8023f36:	9000      	str	r0, [sp, #0]
 8023f38:	4633      	mov	r3, r6
 8023f3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023f3c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023f3e:	4639      	mov	r1, r7
 8023f40:	f7ff fc2c 	bl	802379c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8023f44:	e757      	b.n	8023df6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023f46:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023f48:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8023f4a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023f4e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023f50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023f54:	1427      	asrs	r7, r4, #16
 8023f56:	142b      	asrs	r3, r5, #16
 8023f58:	fb01 7303 	mla	r3, r1, r3, r7
 8023f5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023f5e:	18e7      	adds	r7, r4, r3
 8023f60:	5ce3      	ldrb	r3, [r4, r3]
 8023f62:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023f66:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023f6a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023f6e:	2a00      	cmp	r2, #0
 8023f70:	f000 8137 	beq.w	80241e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x776>
 8023f74:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023f78:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023f7c:	9410      	str	r4, [sp, #64]	; 0x40
 8023f7e:	0e24      	lsrs	r4, r4, #24
 8023f80:	9417      	str	r4, [sp, #92]	; 0x5c
 8023f82:	b170      	cbz	r0, 8023fa2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 8023f84:	eb07 0e01 	add.w	lr, r7, r1
 8023f88:	5c79      	ldrb	r1, [r7, r1]
 8023f8a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f8e:	910b      	str	r1, [sp, #44]	; 0x2c
 8023f90:	0e09      	lsrs	r1, r1, #24
 8023f92:	9114      	str	r1, [sp, #80]	; 0x50
 8023f94:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023f98:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f9c:	9111      	str	r1, [sp, #68]	; 0x44
 8023f9e:	0e09      	lsrs	r1, r1, #24
 8023fa0:	9118      	str	r1, [sp, #96]	; 0x60
 8023fa2:	b292      	uxth	r2, r2
 8023fa4:	b280      	uxth	r0, r0
 8023fa6:	fb02 f800 	mul.w	r8, r2, r0
 8023faa:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023fae:	0112      	lsls	r2, r2, #4
 8023fb0:	eba2 0e08 	sub.w	lr, r2, r8
 8023fb4:	b280      	uxth	r0, r0
 8023fb6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023fba:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023fbc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023fbe:	fa1f fe8e 	uxth.w	lr, lr
 8023fc2:	1a12      	subs	r2, r2, r0
 8023fc4:	b292      	uxth	r2, r2
 8023fc6:	fb0e f101 	mul.w	r1, lr, r1
 8023fca:	fb02 110c 	mla	r1, r2, ip, r1
 8023fce:	fb00 1104 	mla	r1, r0, r4, r1
 8023fd2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023fd4:	fb08 1104 	mla	r1, r8, r4, r1
 8023fd8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023fdc:	2900      	cmp	r1, #0
 8023fde:	f000 80f5 	beq.w	80241cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8023fe2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023fe6:	d019      	beq.n	802401c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b0>
 8023fe8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023fec:	fb0c fa0a 	mul.w	sl, ip, sl
 8023ff0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ff4:	fb0c fc03 	mul.w	ip, ip, r3
 8023ff8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023ffc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024000:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024004:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024008:	4453      	add	r3, sl
 802400a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802400e:	0a1b      	lsrs	r3, r3, #8
 8024010:	0a3f      	lsrs	r7, r7, #8
 8024012:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024016:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802401a:	433b      	orrs	r3, r7
 802401c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802401e:	2cff      	cmp	r4, #255	; 0xff
 8024020:	d020      	beq.n	8024064 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f8>
 8024022:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024024:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024028:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802402a:	4367      	muls	r7, r4
 802402c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802402e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024032:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024034:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024038:	fb04 fa0a 	mul.w	sl, r4, sl
 802403c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024040:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024044:	44bc      	add	ip, r7
 8024046:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802404a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802404e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024052:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024056:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802405a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802405e:	ea4c 040a 	orr.w	r4, ip, sl
 8024062:	9410      	str	r4, [sp, #64]	; 0x40
 8024064:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024066:	2cff      	cmp	r4, #255	; 0xff
 8024068:	d020      	beq.n	80240ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 802406a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802406c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024070:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024072:	4367      	muls	r7, r4
 8024074:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024076:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802407a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802407c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024080:	fb04 fa0a 	mul.w	sl, r4, sl
 8024084:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024088:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802408c:	44bc      	add	ip, r7
 802408e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024092:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024096:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802409a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802409e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240a6:	ea4c 040a 	orr.w	r4, ip, sl
 80240aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80240ac:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80240ae:	2cff      	cmp	r4, #255	; 0xff
 80240b0:	d020      	beq.n	80240f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 80240b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80240b4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80240b8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80240ba:	4367      	muls	r7, r4
 80240bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80240be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80240c2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80240c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80240c8:	fb04 fa0a 	mul.w	sl, r4, sl
 80240cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80240d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240d4:	44bc      	add	ip, r7
 80240d6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80240da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80240de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240ee:	ea4c 040a 	orr.w	r4, ip, sl
 80240f2:	9411      	str	r4, [sp, #68]	; 0x44
 80240f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80240f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80240fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80240fc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024100:	fb0e f707 	mul.w	r7, lr, r7
 8024104:	fb02 770c 	mla	r7, r2, ip, r7
 8024108:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802410c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802410e:	fb00 770c 	mla	r7, r0, ip, r7
 8024112:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024116:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024118:	fb08 770c 	mla	r7, r8, ip, r7
 802411c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024120:	fb0e fe0c 	mul.w	lr, lr, ip
 8024124:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024128:	fb02 e303 	mla	r3, r2, r3, lr
 802412c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802412e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024130:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024134:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024136:	fb00 330a 	mla	r3, r0, sl, r3
 802413a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802413e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024144:	f8b9 0000 	ldrh.w	r0, [r9]
 8024148:	434b      	muls	r3, r1
 802414a:	0a3f      	lsrs	r7, r7, #8
 802414c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024150:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024154:	1c59      	adds	r1, r3, #1
 8024156:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802415a:	ea47 070c 	orr.w	r7, r7, ip
 802415e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024162:	1202      	asrs	r2, r0, #8
 8024164:	0c3b      	lsrs	r3, r7, #16
 8024166:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802416a:	b2c9      	uxtb	r1, r1
 802416c:	fb13 f304 	smulbb	r3, r3, r4
 8024170:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024174:	fb02 3201 	mla	r2, r2, r1, r3
 8024178:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802417c:	10c3      	asrs	r3, r0, #3
 802417e:	b2ff      	uxtb	r7, r7
 8024180:	00c0      	lsls	r0, r0, #3
 8024182:	b292      	uxth	r2, r2
 8024184:	fb1c fc04 	smulbb	ip, ip, r4
 8024188:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802418c:	b2c0      	uxtb	r0, r0
 802418e:	fb17 f704 	smulbb	r7, r7, r4
 8024192:	fb03 c301 	mla	r3, r3, r1, ip
 8024196:	fb00 7001 	mla	r0, r0, r1, r7
 802419a:	f102 0c01 	add.w	ip, r2, #1
 802419e:	b280      	uxth	r0, r0
 80241a0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80241a4:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80241a8:	1c42      	adds	r2, r0, #1
 80241aa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80241ae:	b29b      	uxth	r3, r3
 80241b0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80241b4:	ea4c 0200 	orr.w	r2, ip, r0
 80241b8:	f103 0c01 	add.w	ip, r3, #1
 80241bc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80241c0:	095b      	lsrs	r3, r3, #5
 80241c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80241c6:	431a      	orrs	r2, r3
 80241c8:	f8a9 2000 	strh.w	r2, [r9]
 80241cc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80241ce:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80241d0:	441a      	add	r2, r3
 80241d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80241d4:	9231      	str	r2, [sp, #196]	; 0xc4
 80241d6:	f109 0902 	add.w	r9, r9, #2
 80241da:	441d      	add	r5, r3
 80241dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80241e0:	e63d      	b.n	8023e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80241e2:	2800      	cmp	r0, #0
 80241e4:	f43f aedd 	beq.w	8023fa2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 80241e8:	5c79      	ldrb	r1, [r7, r1]
 80241ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80241ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80241f0:	0e09      	lsrs	r1, r1, #24
 80241f2:	9114      	str	r1, [sp, #80]	; 0x50
 80241f4:	e6d5      	b.n	8023fa2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 80241f6:	b01f      	add	sp, #124	; 0x7c
 80241f8:	ecbd 8b08 	vpop	{d8-d11}
 80241fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024200 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024204:	880e      	ldrh	r6, [r1, #0]
 8024206:	b085      	sub	sp, #20
 8024208:	ea4f 2e26 	mov.w	lr, r6, asr #8
 802420c:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8024210:	4691      	mov	r9, r2
 8024212:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024216:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802421a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802421e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8024222:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8024226:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 802422a:	9200      	str	r2, [sp, #0]
 802422c:	00f6      	lsls	r6, r6, #3
 802422e:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8024232:	9201      	str	r2, [sp, #4]
 8024234:	2c00      	cmp	r4, #0
 8024236:	b2f2      	uxtb	r2, r6
 8024238:	fb04 560c 	mla	r6, r4, ip, r5
 802423c:	9202      	str	r2, [sp, #8]
 802423e:	eb09 0e06 	add.w	lr, r9, r6
 8024242:	db3e      	blt.n	80242c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8024244:	45a0      	cmp	r8, r4
 8024246:	dd3c      	ble.n	80242c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8024248:	2d00      	cmp	r5, #0
 802424a:	db38      	blt.n	80242be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 802424c:	45ac      	cmp	ip, r5
 802424e:	dd36      	ble.n	80242be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8024250:	f819 2006 	ldrb.w	r2, [r9, r6]
 8024254:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024258:	1c6e      	adds	r6, r5, #1
 802425a:	d435      	bmi.n	80242c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 802425c:	45b4      	cmp	ip, r6
 802425e:	dd33      	ble.n	80242c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8024260:	b3a0      	cbz	r0, 80242cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 8024262:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024266:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 802426a:	3401      	adds	r4, #1
 802426c:	d432      	bmi.n	80242d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 802426e:	45a0      	cmp	r8, r4
 8024270:	dd30      	ble.n	80242d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 8024272:	b397      	cbz	r7, 80242da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8024274:	2d00      	cmp	r5, #0
 8024276:	db2b      	blt.n	80242d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8024278:	45ac      	cmp	ip, r5
 802427a:	dd29      	ble.n	80242d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 802427c:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8024280:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8024284:	3501      	adds	r5, #1
 8024286:	d42b      	bmi.n	80242e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8024288:	45ac      	cmp	ip, r5
 802428a:	dd29      	ble.n	80242e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 802428c:	b350      	cbz	r0, 80242e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 802428e:	44f4      	add	ip, lr
 8024290:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024294:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024298:	280f      	cmp	r0, #15
 802429a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802429e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80242a2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80242a6:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80242aa:	d801      	bhi.n	80242b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 80242ac:	2f0f      	cmp	r7, #15
 80242ae:	d91b      	bls.n	80242e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 80242b0:	4b7d      	ldr	r3, [pc, #500]	; (80244a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 80242b2:	4a7e      	ldr	r2, [pc, #504]	; (80244ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 80242b4:	487e      	ldr	r0, [pc, #504]	; (80244b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 80242b6:	f240 210d 	movw	r1, #525	; 0x20d
 80242ba:	f005 f895 	bl	80293e8 <__assert_func>
 80242be:	2200      	movs	r2, #0
 80242c0:	e7ca      	b.n	8024258 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 80242c2:	2600      	movs	r6, #0
 80242c4:	4632      	mov	r2, r6
 80242c6:	e7d0      	b.n	802426a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80242c8:	2600      	movs	r6, #0
 80242ca:	e7ce      	b.n	802426a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80242cc:	4606      	mov	r6, r0
 80242ce:	e7cc      	b.n	802426a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80242d0:	2400      	movs	r4, #0
 80242d2:	e7d7      	b.n	8024284 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 80242d4:	2300      	movs	r3, #0
 80242d6:	461c      	mov	r4, r3
 80242d8:	e7de      	b.n	8024298 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80242da:	463b      	mov	r3, r7
 80242dc:	463c      	mov	r4, r7
 80242de:	e7db      	b.n	8024298 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80242e0:	2300      	movs	r3, #0
 80242e2:	e7d9      	b.n	8024298 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80242e4:	4603      	mov	r3, r0
 80242e6:	e7d7      	b.n	8024298 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80242e8:	b280      	uxth	r0, r0
 80242ea:	b2bf      	uxth	r7, r7
 80242ec:	fb00 fe07 	mul.w	lr, r0, r7
 80242f0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80242f4:	0100      	lsls	r0, r0, #4
 80242f6:	eba0 0c0e 	sub.w	ip, r0, lr
 80242fa:	b2bf      	uxth	r7, r7
 80242fc:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024300:	fa1f fc8c 	uxth.w	ip, ip
 8024304:	1bed      	subs	r5, r5, r7
 8024306:	b2ad      	uxth	r5, r5
 8024308:	fb0c f00a 	mul.w	r0, ip, sl
 802430c:	fb05 000b 	mla	r0, r5, fp, r0
 8024310:	fb07 0009 	mla	r0, r7, r9, r0
 8024314:	fb0e 0008 	mla	r0, lr, r8, r0
 8024318:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802431c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024320:	9003      	str	r0, [sp, #12]
 8024322:	d018      	beq.n	8024356 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x156>
 8024324:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024328:	fb0b f000 	mul.w	r0, fp, r0
 802432c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024330:	fb0b fb02 	mul.w	fp, fp, r2
 8024334:	0a02      	lsrs	r2, r0, #8
 8024336:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802433a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802433e:	4402      	add	r2, r0
 8024340:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024344:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024348:	0a12      	lsrs	r2, r2, #8
 802434a:	0a00      	lsrs	r0, r0, #8
 802434c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024350:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024354:	4302      	orrs	r2, r0
 8024356:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802435a:	d019      	beq.n	8024390 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x190>
 802435c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024360:	fb0a fb0b 	mul.w	fp, sl, fp
 8024364:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024368:	fb0a fa06 	mul.w	sl, sl, r6
 802436c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024370:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024374:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024378:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802437c:	445e      	add	r6, fp
 802437e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024382:	0a36      	lsrs	r6, r6, #8
 8024384:	0a00      	lsrs	r0, r0, #8
 8024386:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802438a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802438e:	4306      	orrs	r6, r0
 8024390:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024394:	d019      	beq.n	80243ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ca>
 8024396:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802439a:	fb09 fa0a 	mul.w	sl, r9, sl
 802439e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80243a2:	fb09 f904 	mul.w	r9, r9, r4
 80243a6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80243aa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80243ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80243b2:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80243b6:	4454      	add	r4, sl
 80243b8:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80243bc:	0a24      	lsrs	r4, r4, #8
 80243be:	0a00      	lsrs	r0, r0, #8
 80243c0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80243c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80243c8:	4304      	orrs	r4, r0
 80243ca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80243ce:	d019      	beq.n	8024404 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x204>
 80243d0:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80243d4:	fb08 f909 	mul.w	r9, r8, r9
 80243d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80243dc:	fb08 f803 	mul.w	r8, r8, r3
 80243e0:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80243e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80243e8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80243ec:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80243f0:	444b      	add	r3, r9
 80243f2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80243f6:	0a1b      	lsrs	r3, r3, #8
 80243f8:	0a00      	lsrs	r0, r0, #8
 80243fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80243fe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024402:	4303      	orrs	r3, r0
 8024404:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024408:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802440c:	fb0c f808 	mul.w	r8, ip, r8
 8024410:	fb05 8800 	mla	r8, r5, r0, r8
 8024414:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024418:	fb07 8800 	mla	r8, r7, r0, r8
 802441c:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8024420:	fb0e 8000 	mla	r0, lr, r0, r8
 8024424:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024428:	0a00      	lsrs	r0, r0, #8
 802442a:	fb0c f606 	mul.w	r6, ip, r6
 802442e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024432:	fb05 6202 	mla	r2, r5, r2, r6
 8024436:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 802443a:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802443e:	fb07 2700 	mla	r7, r7, r0, r2
 8024442:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024446:	9b03      	ldr	r3, [sp, #12]
 8024448:	9c02      	ldr	r4, [sp, #8]
 802444a:	9d01      	ldr	r5, [sp, #4]
 802444c:	fb0e 7000 	mla	r0, lr, r0, r7
 8024450:	43da      	mvns	r2, r3
 8024452:	9b00      	ldr	r3, [sp, #0]
 8024454:	b2d2      	uxtb	r2, r2
 8024456:	0a00      	lsrs	r0, r0, #8
 8024458:	4353      	muls	r3, r2
 802445a:	4354      	muls	r4, r2
 802445c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024460:	ea48 0000 	orr.w	r0, r8, r0
 8024464:	4355      	muls	r5, r2
 8024466:	4622      	mov	r2, r4
 8024468:	1c5c      	adds	r4, r3, #1
 802446a:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 802446e:	0c03      	lsrs	r3, r0, #16
 8024470:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024474:	4b0f      	ldr	r3, [pc, #60]	; (80244b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8024476:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 802447a:	1c54      	adds	r4, r2, #1
 802447c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8024480:	b2c2      	uxtb	r2, r0
 8024482:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024486:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802448a:	1c6a      	adds	r2, r5, #1
 802448c:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8024490:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024494:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024498:	00c0      	lsls	r0, r0, #3
 802449a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802449e:	4318      	orrs	r0, r3
 80244a0:	8008      	strh	r0, [r1, #0]
 80244a2:	b005      	add	sp, #20
 80244a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244a8:	0803097a 	.word	0x0803097a
 80244ac:	08030f3d 	.word	0x08030f3d
 80244b0:	08030a63 	.word	0x08030a63
 80244b4:	fffff800 	.word	0xfffff800

080244b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80244b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244bc:	ed2d 8b08 	vpush	{d8-d11}
 80244c0:	b09b      	sub	sp, #108	; 0x6c
 80244c2:	eeb0 aa40 	vmov.f32	s20, s0
 80244c6:	9218      	str	r2, [sp, #96]	; 0x60
 80244c8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80244ca:	9116      	str	r1, [sp, #88]	; 0x58
 80244cc:	9307      	str	r3, [sp, #28]
 80244ce:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80244d2:	9019      	str	r0, [sp, #100]	; 0x64
 80244d4:	6850      	ldr	r0, [r2, #4]
 80244d6:	6812      	ldr	r2, [r2, #0]
 80244d8:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80244da:	fb00 1303 	mla	r3, r0, r3, r1
 80244de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80244e2:	930a      	str	r3, [sp, #40]	; 0x28
 80244e4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80244e6:	681b      	ldr	r3, [r3, #0]
 80244e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80244ea:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80244ec:	685e      	ldr	r6, [r3, #4]
 80244ee:	eef0 9a60 	vmov.f32	s19, s1
 80244f2:	eeb0 9a41 	vmov.f32	s18, s2
 80244f6:	eeb0 8a62 	vmov.f32	s16, s5
 80244fa:	eef0 8a43 	vmov.f32	s17, s6
 80244fe:	eef0 ba44 	vmov.f32	s23, s8
 8024502:	eeb0 ba64 	vmov.f32	s22, s9
 8024506:	eef0 aa45 	vmov.f32	s21, s10
 802450a:	3604      	adds	r6, #4
 802450c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802450e:	2b00      	cmp	r3, #0
 8024510:	dc03      	bgt.n	802451a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024512:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024514:	2b00      	cmp	r3, #0
 8024516:	f340 8371 	ble.w	8024bfc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 802451a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802451c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024520:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024524:	1e48      	subs	r0, r1, #1
 8024526:	1e57      	subs	r7, r2, #1
 8024528:	9b07      	ldr	r3, [sp, #28]
 802452a:	2b00      	cmp	r3, #0
 802452c:	f340 8189 	ble.w	8024842 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024530:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8024532:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024536:	ea4f 4325 	mov.w	r3, r5, asr #16
 802453a:	d406      	bmi.n	802454a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802453c:	4584      	cmp	ip, r0
 802453e:	da04      	bge.n	802454a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024540:	2b00      	cmp	r3, #0
 8024542:	db02      	blt.n	802454a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024544:	42bb      	cmp	r3, r7
 8024546:	f2c0 817d 	blt.w	8024844 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802454a:	f11c 0c01 	adds.w	ip, ip, #1
 802454e:	f100 816b 	bmi.w	8024828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024552:	4561      	cmp	r1, ip
 8024554:	f2c0 8168 	blt.w	8024828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024558:	3301      	adds	r3, #1
 802455a:	f100 8165 	bmi.w	8024828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802455e:	429a      	cmp	r2, r3
 8024560:	f2c0 8162 	blt.w	8024828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024564:	9b07      	ldr	r3, [sp, #28]
 8024566:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024568:	9317      	str	r3, [sp, #92]	; 0x5c
 802456a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802456c:	2b00      	cmp	r3, #0
 802456e:	f340 8187 	ble.w	8024880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8024572:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024574:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024578:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802457a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802457e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024580:	141b      	asrs	r3, r3, #16
 8024582:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024586:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802458a:	f100 81ca 	bmi.w	8024922 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802458e:	f101 38ff 	add.w	r8, r1, #4294967295
 8024592:	4543      	cmp	r3, r8
 8024594:	f280 81c5 	bge.w	8024922 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8024598:	f1bc 0f00 	cmp.w	ip, #0
 802459c:	f2c0 81c1 	blt.w	8024922 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 80245a0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80245a4:	45c4      	cmp	ip, r8
 80245a6:	f280 81bc 	bge.w	8024922 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 80245aa:	b209      	sxth	r1, r1
 80245ac:	fb0c 3301 	mla	r3, ip, r1, r3
 80245b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80245b2:	eb04 0803 	add.w	r8, r4, r3
 80245b6:	5ce3      	ldrb	r3, [r4, r3]
 80245b8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80245bc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80245c0:	2a00      	cmp	r2, #0
 80245c2:	f000 81a3 	beq.w	802490c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80245c6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80245ca:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80245ce:	940b      	str	r4, [sp, #44]	; 0x2c
 80245d0:	0e24      	lsrs	r4, r4, #24
 80245d2:	9412      	str	r4, [sp, #72]	; 0x48
 80245d4:	b178      	cbz	r0, 80245f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80245d6:	eb08 0c01 	add.w	ip, r8, r1
 80245da:	f818 1001 	ldrb.w	r1, [r8, r1]
 80245de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80245e2:	9108      	str	r1, [sp, #32]
 80245e4:	0e09      	lsrs	r1, r1, #24
 80245e6:	9110      	str	r1, [sp, #64]	; 0x40
 80245e8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80245ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80245f0:	910c      	str	r1, [sp, #48]	; 0x30
 80245f2:	0e09      	lsrs	r1, r1, #24
 80245f4:	9113      	str	r1, [sp, #76]	; 0x4c
 80245f6:	b292      	uxth	r2, r2
 80245f8:	b280      	uxth	r0, r0
 80245fa:	fb02 f900 	mul.w	r9, r2, r0
 80245fe:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024602:	0112      	lsls	r2, r2, #4
 8024604:	eba2 0809 	sub.w	r8, r2, r9
 8024608:	b280      	uxth	r0, r0
 802460a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802460e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024610:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024612:	fa1f f888 	uxth.w	r8, r8
 8024616:	1a12      	subs	r2, r2, r0
 8024618:	b292      	uxth	r2, r2
 802461a:	fb08 f101 	mul.w	r1, r8, r1
 802461e:	fb02 110e 	mla	r1, r2, lr, r1
 8024622:	fb00 1104 	mla	r1, r0, r4, r1
 8024626:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024628:	fb09 1104 	mla	r1, r9, r4, r1
 802462c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024630:	2900      	cmp	r1, #0
 8024632:	f000 80ee 	beq.w	8024812 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024636:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802463a:	d01b      	beq.n	8024674 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802463c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024640:	fb0e fa0a 	mul.w	sl, lr, sl
 8024644:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024648:	fb0e fe03 	mul.w	lr, lr, r3
 802464c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024650:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024654:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024658:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802465c:	4453      	add	r3, sl
 802465e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024662:	0a1b      	lsrs	r3, r3, #8
 8024664:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024668:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802466c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024670:	ea43 030c 	orr.w	r3, r3, ip
 8024674:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024676:	2cff      	cmp	r4, #255	; 0xff
 8024678:	d021      	beq.n	80246be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802467a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802467c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024680:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024682:	fb04 fb0b 	mul.w	fp, r4, fp
 8024686:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024688:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802468c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802468e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024692:	fb04 fa0a 	mul.w	sl, r4, sl
 8024696:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802469a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802469e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80246a2:	44de      	add	lr, fp
 80246a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246b8:	ea4e 040a 	orr.w	r4, lr, sl
 80246bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80246be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80246c0:	2cff      	cmp	r4, #255	; 0xff
 80246c2:	d021      	beq.n	8024708 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80246c4:	9c08      	ldr	r4, [sp, #32]
 80246c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80246ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80246cc:	fb04 fb0b 	mul.w	fp, r4, fp
 80246d0:	9c08      	ldr	r4, [sp, #32]
 80246d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80246d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80246d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80246dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80246e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80246e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80246ec:	44de      	add	lr, fp
 80246ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024702:	ea4e 040a 	orr.w	r4, lr, sl
 8024706:	9408      	str	r4, [sp, #32]
 8024708:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802470a:	2cff      	cmp	r4, #255	; 0xff
 802470c:	d021      	beq.n	8024752 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802470e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024710:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024714:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024716:	fb04 fb0b 	mul.w	fp, r4, fp
 802471a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802471c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024720:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024722:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024726:	fb04 fa0a 	mul.w	sl, r4, sl
 802472a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802472e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024732:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024736:	44de      	add	lr, fp
 8024738:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802473c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024740:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024744:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024748:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802474c:	ea4e 040a 	orr.w	r4, lr, sl
 8024750:	940c      	str	r4, [sp, #48]	; 0x30
 8024752:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024754:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024758:	9c08      	ldr	r4, [sp, #32]
 802475a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802475e:	fb08 fc0c 	mul.w	ip, r8, ip
 8024762:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024766:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802476a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802476c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024770:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024774:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024776:	fb09 cc0e 	mla	ip, r9, lr, ip
 802477a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802477e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024782:	fb08 f80e 	mul.w	r8, r8, lr
 8024786:	fb02 8303 	mla	r3, r2, r3, r8
 802478a:	9a08      	ldr	r2, [sp, #32]
 802478c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024792:	fb00 330a 	mla	r3, r0, sl, r3
 8024796:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802479a:	fb09 3900 	mla	r9, r9, r0, r3
 802479e:	883b      	ldrh	r3, [r7, #0]
 80247a0:	43c9      	mvns	r1, r1
 80247a2:	1218      	asrs	r0, r3, #8
 80247a4:	b2c9      	uxtb	r1, r1
 80247a6:	10da      	asrs	r2, r3, #3
 80247a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80247b0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80247b4:	00db      	lsls	r3, r3, #3
 80247b6:	4348      	muls	r0, r1
 80247b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247bc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80247c0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80247c4:	b2db      	uxtb	r3, r3
 80247c6:	434b      	muls	r3, r1
 80247c8:	ea4c 0c09 	orr.w	ip, ip, r9
 80247cc:	434a      	muls	r2, r1
 80247ce:	1c41      	adds	r1, r0, #1
 80247d0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80247d4:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80247d8:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80247dc:	4960      	ldr	r1, [pc, #384]	; (8024960 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 80247de:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 80247e2:	1c59      	adds	r1, r3, #1
 80247e4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80247e8:	fa5f f38c 	uxtb.w	r3, ip
 80247ec:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80247f0:	1c51      	adds	r1, r2, #1
 80247f2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80247f6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80247fa:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80247fe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024802:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 8024806:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802480a:	ea43 0c0c 	orr.w	ip, r3, ip
 802480e:	f8a7 c000 	strh.w	ip, [r7]
 8024812:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024814:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024816:	441a      	add	r2, r3
 8024818:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802481a:	922d      	str	r2, [sp, #180]	; 0xb4
 802481c:	441d      	add	r5, r3
 802481e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024820:	3b01      	subs	r3, #1
 8024822:	3702      	adds	r7, #2
 8024824:	9317      	str	r3, [sp, #92]	; 0x5c
 8024826:	e6a0      	b.n	802456a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024828:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802482a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 802482c:	441c      	add	r4, r3
 802482e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024830:	942d      	str	r4, [sp, #180]	; 0xb4
 8024832:	441d      	add	r5, r3
 8024834:	9b07      	ldr	r3, [sp, #28]
 8024836:	3b01      	subs	r3, #1
 8024838:	9307      	str	r3, [sp, #28]
 802483a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802483c:	3302      	adds	r3, #2
 802483e:	930a      	str	r3, [sp, #40]	; 0x28
 8024840:	e672      	b.n	8024528 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024842:	d024      	beq.n	802488e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8024844:	9b07      	ldr	r3, [sp, #28]
 8024846:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8024848:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 802484a:	3b01      	subs	r3, #1
 802484c:	fb00 4003 	mla	r0, r0, r3, r4
 8024850:	1400      	asrs	r0, r0, #16
 8024852:	f53f ae87 	bmi.w	8024564 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8024856:	3901      	subs	r1, #1
 8024858:	4288      	cmp	r0, r1
 802485a:	f6bf ae83 	bge.w	8024564 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802485e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8024860:	fb01 5303 	mla	r3, r1, r3, r5
 8024864:	141b      	asrs	r3, r3, #16
 8024866:	f53f ae7d 	bmi.w	8024564 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802486a:	3a01      	subs	r2, #1
 802486c:	4293      	cmp	r3, r2
 802486e:	f6bf ae79 	bge.w	8024564 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8024872:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024876:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802487a:	f1bb 0f00 	cmp.w	fp, #0
 802487e:	dc71      	bgt.n	8024964 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8024880:	9b07      	ldr	r3, [sp, #28]
 8024882:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024888:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802488c:	930a      	str	r3, [sp, #40]	; 0x28
 802488e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024890:	2b00      	cmp	r3, #0
 8024892:	f340 81b3 	ble.w	8024bfc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8024896:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802489a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802489e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80248a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248a4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80248a8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80248ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80248b0:	eef0 6a48 	vmov.f32	s13, s16
 80248b4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80248b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80248bc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80248c0:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80248c4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80248c8:	eef0 6a68 	vmov.f32	s13, s17
 80248cc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80248d0:	ee18 2a10 	vmov	r2, s16
 80248d4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80248d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80248dc:	ee18 2a90 	vmov	r2, s17
 80248e0:	932f      	str	r3, [sp, #188]	; 0xbc
 80248e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80248e8:	9330      	str	r3, [sp, #192]	; 0xc0
 80248ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80248ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80248ee:	3b01      	subs	r3, #1
 80248f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80248f4:	9316      	str	r3, [sp, #88]	; 0x58
 80248f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248f8:	bf08      	it	eq
 80248fa:	4613      	moveq	r3, r2
 80248fc:	ee16 5a90 	vmov	r5, s13
 8024900:	9307      	str	r3, [sp, #28]
 8024902:	eef0 8a67 	vmov.f32	s17, s15
 8024906:	eeb0 8a47 	vmov.f32	s16, s14
 802490a:	e5ff      	b.n	802450c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802490c:	2800      	cmp	r0, #0
 802490e:	f43f ae72 	beq.w	80245f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8024912:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024916:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802491a:	9108      	str	r1, [sp, #32]
 802491c:	0e09      	lsrs	r1, r1, #24
 802491e:	9110      	str	r1, [sp, #64]	; 0x40
 8024920:	e669      	b.n	80245f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8024922:	f113 0801 	adds.w	r8, r3, #1
 8024926:	f53f af74 	bmi.w	8024812 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802492a:	4541      	cmp	r1, r8
 802492c:	f6ff af71 	blt.w	8024812 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024930:	f11c 0801 	adds.w	r8, ip, #1
 8024934:	f53f af6d 	bmi.w	8024812 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024938:	45c6      	cmp	lr, r8
 802493a:	f6ff af6a 	blt.w	8024812 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802493e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024942:	b209      	sxth	r1, r1
 8024944:	fa0f f38e 	sxth.w	r3, lr
 8024948:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802494c:	9301      	str	r3, [sp, #4]
 802494e:	9100      	str	r1, [sp, #0]
 8024950:	4633      	mov	r3, r6
 8024952:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024954:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024956:	4639      	mov	r1, r7
 8024958:	f7ff fc52 	bl	8024200 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802495c:	e759      	b.n	8024812 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802495e:	bf00      	nop
 8024960:	fffff800 	.word	0xfffff800
 8024964:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024966:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8024968:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802496c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802496e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024972:	1427      	asrs	r7, r4, #16
 8024974:	142b      	asrs	r3, r5, #16
 8024976:	fb01 7303 	mla	r3, r1, r3, r7
 802497a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802497c:	18e7      	adds	r7, r4, r3
 802497e:	5ce3      	ldrb	r3, [r4, r3]
 8024980:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024984:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024988:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802498c:	2a00      	cmp	r2, #0
 802498e:	f000 812b 	beq.w	8024be8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8024992:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024996:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802499a:	940d      	str	r4, [sp, #52]	; 0x34
 802499c:	0e24      	lsrs	r4, r4, #24
 802499e:	9414      	str	r4, [sp, #80]	; 0x50
 80249a0:	b170      	cbz	r0, 80249c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80249a2:	eb07 0e01 	add.w	lr, r7, r1
 80249a6:	5c79      	ldrb	r1, [r7, r1]
 80249a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80249ac:	9109      	str	r1, [sp, #36]	; 0x24
 80249ae:	0e09      	lsrs	r1, r1, #24
 80249b0:	9111      	str	r1, [sp, #68]	; 0x44
 80249b2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80249b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80249ba:	910e      	str	r1, [sp, #56]	; 0x38
 80249bc:	0e09      	lsrs	r1, r1, #24
 80249be:	9115      	str	r1, [sp, #84]	; 0x54
 80249c0:	b292      	uxth	r2, r2
 80249c2:	b280      	uxth	r0, r0
 80249c4:	fb02 f800 	mul.w	r8, r2, r0
 80249c8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80249cc:	0112      	lsls	r2, r2, #4
 80249ce:	eba2 0e08 	sub.w	lr, r2, r8
 80249d2:	b280      	uxth	r0, r0
 80249d4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80249d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80249da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80249dc:	fa1f fe8e 	uxth.w	lr, lr
 80249e0:	1a09      	subs	r1, r1, r0
 80249e2:	b289      	uxth	r1, r1
 80249e4:	fb0e f202 	mul.w	r2, lr, r2
 80249e8:	fb01 220c 	mla	r2, r1, ip, r2
 80249ec:	fb00 2204 	mla	r2, r0, r4, r2
 80249f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80249f2:	fb08 2204 	mla	r2, r8, r4, r2
 80249f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80249fa:	2a00      	cmp	r2, #0
 80249fc:	f000 80e9 	beq.w	8024bd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71a>
 8024a00:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024a04:	d019      	beq.n	8024a3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8024a06:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024a0a:	fb0c fa0a 	mul.w	sl, ip, sl
 8024a0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a12:	fb0c fc03 	mul.w	ip, ip, r3
 8024a16:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024a1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024a1e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024a22:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024a26:	4453      	add	r3, sl
 8024a28:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024a2c:	0a1b      	lsrs	r3, r3, #8
 8024a2e:	0a3f      	lsrs	r7, r7, #8
 8024a30:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024a34:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024a38:	433b      	orrs	r3, r7
 8024a3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024a3c:	2cff      	cmp	r4, #255	; 0xff
 8024a3e:	d020      	beq.n	8024a82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8024a40:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024a42:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024a46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024a48:	4367      	muls	r7, r4
 8024a4a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024a4c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024a50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024a52:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a56:	fb04 fa0a 	mul.w	sl, r4, sl
 8024a5a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a62:	44bc      	add	ip, r7
 8024a64:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a7c:	ea4c 040a 	orr.w	r4, ip, sl
 8024a80:	940d      	str	r4, [sp, #52]	; 0x34
 8024a82:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024a84:	2cff      	cmp	r4, #255	; 0xff
 8024a86:	d020      	beq.n	8024aca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8024a88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024a8a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024a8e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024a90:	4367      	muls	r7, r4
 8024a92:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024a94:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024a98:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024a9a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a9e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024aa2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024aa6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024aaa:	44bc      	add	ip, r7
 8024aac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024ab0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ab4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ab8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024abc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ac0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ac4:	ea4c 040a 	orr.w	r4, ip, sl
 8024ac8:	9409      	str	r4, [sp, #36]	; 0x24
 8024aca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024acc:	2cff      	cmp	r4, #255	; 0xff
 8024ace:	d020      	beq.n	8024b12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8024ad0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024ad2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024ad6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024ad8:	4367      	muls	r7, r4
 8024ada:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024adc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024ae0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024ae2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024ae6:	fb04 fa0a 	mul.w	sl, r4, sl
 8024aea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024aee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024af2:	44bc      	add	ip, r7
 8024af4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024af8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024afc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b0c:	ea4c 040a 	orr.w	r4, ip, sl
 8024b10:	940e      	str	r4, [sp, #56]	; 0x38
 8024b12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024b14:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024b18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024b1a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024b1e:	fb0e f707 	mul.w	r7, lr, r7
 8024b22:	fb01 770c 	mla	r7, r1, ip, r7
 8024b26:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024b2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024b2c:	fb00 770c 	mla	r7, r0, ip, r7
 8024b30:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024b34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024b36:	fb08 770c 	mla	r7, r8, ip, r7
 8024b3a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024b3e:	fb0e fe0c 	mul.w	lr, lr, ip
 8024b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b46:	fb01 e303 	mla	r3, r1, r3, lr
 8024b4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024b4c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024b50:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024b52:	fb00 330a 	mla	r3, r0, sl, r3
 8024b56:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024b5a:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024b5e:	f8b9 3000 	ldrh.w	r3, [r9]
 8024b62:	43d2      	mvns	r2, r2
 8024b64:	1218      	asrs	r0, r3, #8
 8024b66:	b2d2      	uxtb	r2, r2
 8024b68:	0a3f      	lsrs	r7, r7, #8
 8024b6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b6e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024b72:	4350      	muls	r0, r2
 8024b74:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024b78:	10d9      	asrs	r1, r3, #3
 8024b7a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024b7e:	00db      	lsls	r3, r3, #3
 8024b80:	ea47 070c 	orr.w	r7, r7, ip
 8024b84:	b2db      	uxtb	r3, r3
 8024b86:	f100 0c01 	add.w	ip, r0, #1
 8024b8a:	4353      	muls	r3, r2
 8024b8c:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8024b90:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024b94:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8024b98:	4351      	muls	r1, r2
 8024b9a:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8024b9e:	4a1a      	ldr	r2, [pc, #104]	; (8024c08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8024ba0:	f103 0c01 	add.w	ip, r3, #1
 8024ba4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024ba8:	fa5f fc87 	uxtb.w	ip, r7
 8024bac:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024bb0:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024bb4:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8024bb8:	1c4b      	adds	r3, r1, #1
 8024bba:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024bbe:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024bc2:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8024bc6:	00ff      	lsls	r7, r7, #3
 8024bc8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024bcc:	4338      	orrs	r0, r7
 8024bce:	f8a9 0000 	strh.w	r0, [r9]
 8024bd2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024bd4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024bd6:	441a      	add	r2, r3
 8024bd8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024bda:	922d      	str	r2, [sp, #180]	; 0xb4
 8024bdc:	f109 0902 	add.w	r9, r9, #2
 8024be0:	441d      	add	r5, r3
 8024be2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024be6:	e648      	b.n	802487a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024be8:	2800      	cmp	r0, #0
 8024bea:	f43f aee9 	beq.w	80249c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024bee:	5c79      	ldrb	r1, [r7, r1]
 8024bf0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024bf4:	9109      	str	r1, [sp, #36]	; 0x24
 8024bf6:	0e09      	lsrs	r1, r1, #24
 8024bf8:	9111      	str	r1, [sp, #68]	; 0x44
 8024bfa:	e6e1      	b.n	80249c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024bfc:	b01b      	add	sp, #108	; 0x6c
 8024bfe:	ecbd 8b08 	vpop	{d8-d11}
 8024c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c06:	bf00      	nop
 8024c08:	fffff800 	.word	0xfffff800

08024c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8024c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c10:	b085      	sub	sp, #20
 8024c12:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8024c16:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8024c1a:	9103      	str	r1, [sp, #12]
 8024c1c:	fb05 7106 	mla	r1, r5, r6, r7
 8024c20:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8024c24:	2d00      	cmp	r5, #0
 8024c26:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8024c2a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024c2e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8024c32:	9401      	str	r4, [sp, #4]
 8024c34:	eb03 0901 	add.w	r9, r3, r1
 8024c38:	f2c0 80c0 	blt.w	8024dbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8024c3c:	45a8      	cmp	r8, r5
 8024c3e:	f340 80bd 	ble.w	8024dbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8024c42:	2f00      	cmp	r7, #0
 8024c44:	f2c0 80b6 	blt.w	8024db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8024c48:	42be      	cmp	r6, r7
 8024c4a:	f340 80b3 	ble.w	8024db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8024c4e:	f813 c001 	ldrb.w	ip, [r3, r1]
 8024c52:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8024c56:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024c5a:	d019      	beq.n	8024c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8024c5c:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8024c60:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024c64:	435a      	muls	r2, r3
 8024c66:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8024c6a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8024c6e:	fb0c f403 	mul.w	r4, ip, r3
 8024c72:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8024c76:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024c7a:	441a      	add	r2, r3
 8024c7c:	f104 0320 	add.w	r3, r4, #32
 8024c80:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8024c84:	0a1b      	lsrs	r3, r3, #8
 8024c86:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8024c8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c8e:	4319      	orrs	r1, r3
 8024c90:	b289      	uxth	r1, r1
 8024c92:	1c7b      	adds	r3, r7, #1
 8024c94:	f100 8097 	bmi.w	8024dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8024c98:	429e      	cmp	r6, r3
 8024c9a:	f340 8094 	ble.w	8024dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8024c9e:	2800      	cmp	r0, #0
 8024ca0:	f000 8094 	beq.w	8024dcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8024ca4:	f899 4001 	ldrb.w	r4, [r9, #1]
 8024ca8:	9b01      	ldr	r3, [sp, #4]
 8024caa:	2cff      	cmp	r4, #255	; 0xff
 8024cac:	885b      	ldrh	r3, [r3, #2]
 8024cae:	d01b      	beq.n	8024ce8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8024cb0:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8024cb4:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8024cb8:	fb0a f202 	mul.w	r2, sl, r2
 8024cbc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024cc0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024cc4:	fb04 fa03 	mul.w	sl, r4, r3
 8024cc8:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8024ccc:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024cd0:	441a      	add	r2, r3
 8024cd2:	f10a 0320 	add.w	r3, sl, #32
 8024cd6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024cda:	0a1b      	lsrs	r3, r3, #8
 8024cdc:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8024ce0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ce4:	ea4b 0303 	orr.w	r3, fp, r3
 8024ce8:	b29b      	uxth	r3, r3
 8024cea:	3501      	adds	r5, #1
 8024cec:	d474      	bmi.n	8024dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8024cee:	45a8      	cmp	r8, r5
 8024cf0:	dd72      	ble.n	8024dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8024cf2:	f1be 0f00 	cmp.w	lr, #0
 8024cf6:	f000 8120 	beq.w	8024f3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8024cfa:	2f00      	cmp	r7, #0
 8024cfc:	db69      	blt.n	8024dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8024cfe:	42be      	cmp	r6, r7
 8024d00:	dd67      	ble.n	8024dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8024d02:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024d06:	9a01      	ldr	r2, [sp, #4]
 8024d08:	2dff      	cmp	r5, #255	; 0xff
 8024d0a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8024d0e:	d01c      	beq.n	8024d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8024d10:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8024d14:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8024d18:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8024d1c:	fb05 fa0b 	mul.w	sl, r5, fp
 8024d20:	fb08 f802 	mul.w	r8, r8, r2
 8024d24:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024d28:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8024d2c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024d30:	4490      	add	r8, r2
 8024d32:	f10a 0220 	add.w	r2, sl, #32
 8024d36:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8024d3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d3e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8024d42:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024d46:	ea4b 0b0a 	orr.w	fp, fp, sl
 8024d4a:	fa1f fb8b 	uxth.w	fp, fp
 8024d4e:	3701      	adds	r7, #1
 8024d50:	d447      	bmi.n	8024de2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8024d52:	42be      	cmp	r6, r7
 8024d54:	dd45      	ble.n	8024de2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8024d56:	2800      	cmp	r0, #0
 8024d58:	d046      	beq.n	8024de8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8024d5a:	3601      	adds	r6, #1
 8024d5c:	9a01      	ldr	r2, [sp, #4]
 8024d5e:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024d62:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8024d66:	2fff      	cmp	r7, #255	; 0xff
 8024d68:	d01a      	beq.n	8024da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8024d6a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8024d6e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8024d72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024d76:	fb07 f902 	mul.w	r9, r7, r2
 8024d7a:	fb08 f806 	mul.w	r8, r8, r6
 8024d7e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8024d82:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8024d86:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024d8a:	44b0      	add	r8, r6
 8024d8c:	f109 0620 	add.w	r6, r9, #32
 8024d90:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8024d94:	0a36      	lsrs	r6, r6, #8
 8024d96:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024d9a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024d9e:	4332      	orrs	r2, r6
 8024da0:	b292      	uxth	r2, r2
 8024da2:	280f      	cmp	r0, #15
 8024da4:	d922      	bls.n	8024dec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8024da6:	4b69      	ldr	r3, [pc, #420]	; (8024f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8024da8:	4a69      	ldr	r2, [pc, #420]	; (8024f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8024daa:	486a      	ldr	r0, [pc, #424]	; (8024f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8024dac:	f240 210d 	movw	r1, #525	; 0x20d
 8024db0:	f004 fb1a 	bl	80293e8 <__assert_func>
 8024db4:	f04f 0c00 	mov.w	ip, #0
 8024db8:	4661      	mov	r1, ip
 8024dba:	e76a      	b.n	8024c92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8024dbc:	2400      	movs	r4, #0
 8024dbe:	46a4      	mov	ip, r4
 8024dc0:	4623      	mov	r3, r4
 8024dc2:	4621      	mov	r1, r4
 8024dc4:	e791      	b.n	8024cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024dc6:	2400      	movs	r4, #0
 8024dc8:	4623      	mov	r3, r4
 8024dca:	e78e      	b.n	8024cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024dcc:	4604      	mov	r4, r0
 8024dce:	4603      	mov	r3, r0
 8024dd0:	e78b      	b.n	8024cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024dd2:	2500      	movs	r5, #0
 8024dd4:	46ab      	mov	fp, r5
 8024dd6:	e7ba      	b.n	8024d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8024dd8:	2700      	movs	r7, #0
 8024dda:	463d      	mov	r5, r7
 8024ddc:	463a      	mov	r2, r7
 8024dde:	46bb      	mov	fp, r7
 8024de0:	e7df      	b.n	8024da2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8024de2:	2700      	movs	r7, #0
 8024de4:	463a      	mov	r2, r7
 8024de6:	e7dc      	b.n	8024da2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8024de8:	4607      	mov	r7, r0
 8024dea:	4602      	mov	r2, r0
 8024dec:	f1be 0f0f 	cmp.w	lr, #15
 8024df0:	d8d9      	bhi.n	8024da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8024df2:	b286      	uxth	r6, r0
 8024df4:	fa1f f98e 	uxth.w	r9, lr
 8024df8:	fb06 f809 	mul.w	r8, r6, r9
 8024dfc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024e00:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024e04:	0136      	lsls	r6, r6, #4
 8024e06:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e0a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024e0e:	9601      	str	r6, [sp, #4]
 8024e10:	ea4a 0101 	orr.w	r1, sl, r1
 8024e14:	fa1f f689 	uxth.w	r6, r9
 8024e18:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8024e1c:	fb10 f90e 	smulbb	r9, r0, lr
 8024e20:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8024e24:	9602      	str	r6, [sp, #8]
 8024e26:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e2a:	460e      	mov	r6, r1
 8024e2c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024e30:	f1ce 0110 	rsb	r1, lr, #16
 8024e34:	1a09      	subs	r1, r1, r0
 8024e36:	ea4a 0303 	orr.w	r3, sl, r3
 8024e3a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8024e3e:	4343      	muls	r3, r0
 8024e40:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8024e44:	9801      	ldr	r0, [sp, #4]
 8024e46:	fb01 3106 	mla	r1, r1, r6, r3
 8024e4a:	9e02      	ldr	r6, [sp, #8]
 8024e4c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8024e50:	1b80      	subs	r0, r0, r6
 8024e52:	9e01      	ldr	r6, [sp, #4]
 8024e54:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024e58:	eba6 0608 	sub.w	r6, r6, r8
 8024e5c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e60:	b2b6      	uxth	r6, r6
 8024e62:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024e66:	ea4a 0202 	orr.w	r2, sl, r2
 8024e6a:	b280      	uxth	r0, r0
 8024e6c:	4374      	muls	r4, r6
 8024e6e:	fb09 1302 	mla	r3, r9, r2, r1
 8024e72:	fb0c 4400 	mla	r4, ip, r0, r4
 8024e76:	9a03      	ldr	r2, [sp, #12]
 8024e78:	9802      	ldr	r0, [sp, #8]
 8024e7a:	8811      	ldrh	r1, [r2, #0]
 8024e7c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8024e80:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8024e84:	fb00 4505 	mla	r5, r0, r5, r4
 8024e88:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e8c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024e90:	fb08 5707 	mla	r7, r8, r7, r5
 8024e94:	ea4a 0b0b 	orr.w	fp, sl, fp
 8024e98:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024e9c:	b292      	uxth	r2, r2
 8024e9e:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8024ea2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024ea6:	4357      	muls	r7, r2
 8024ea8:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8024eac:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024eb0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024eb4:	f107 0801 	add.w	r8, r7, #1
 8024eb8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024ebc:	ea43 0e0e 	orr.w	lr, r3, lr
 8024ec0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8024ec4:	fa1f f38e 	uxth.w	r3, lr
 8024ec8:	1208      	asrs	r0, r1, #8
 8024eca:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8024ece:	b2ff      	uxtb	r7, r7
 8024ed0:	121c      	asrs	r4, r3, #8
 8024ed2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024ed6:	fb10 f007 	smulbb	r0, r0, r7
 8024eda:	10cd      	asrs	r5, r1, #3
 8024edc:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024ee0:	00c9      	lsls	r1, r1, #3
 8024ee2:	fb04 0402 	mla	r4, r4, r2, r0
 8024ee6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024eea:	10d8      	asrs	r0, r3, #3
 8024eec:	b2c9      	uxtb	r1, r1
 8024eee:	00db      	lsls	r3, r3, #3
 8024ef0:	fb11 f107 	smulbb	r1, r1, r7
 8024ef4:	fb15 f507 	smulbb	r5, r5, r7
 8024ef8:	b2db      	uxtb	r3, r3
 8024efa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024efe:	fb00 5002 	mla	r0, r0, r2, r5
 8024f02:	fb03 1202 	mla	r2, r3, r2, r1
 8024f06:	b2a4      	uxth	r4, r4
 8024f08:	b292      	uxth	r2, r2
 8024f0a:	1c63      	adds	r3, r4, #1
 8024f0c:	1c51      	adds	r1, r2, #1
 8024f0e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8024f12:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024f16:	b280      	uxth	r0, r0
 8024f18:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024f1c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024f20:	4313      	orrs	r3, r2
 8024f22:	1c42      	adds	r2, r0, #1
 8024f24:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024f28:	0940      	lsrs	r0, r0, #5
 8024f2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024f2e:	9a03      	ldr	r2, [sp, #12]
 8024f30:	4303      	orrs	r3, r0
 8024f32:	8013      	strh	r3, [r2, #0]
 8024f34:	b005      	add	sp, #20
 8024f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f3a:	280f      	cmp	r0, #15
 8024f3c:	f63f af33 	bhi.w	8024da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8024f40:	4677      	mov	r7, lr
 8024f42:	4675      	mov	r5, lr
 8024f44:	4672      	mov	r2, lr
 8024f46:	46f3      	mov	fp, lr
 8024f48:	e753      	b.n	8024df2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8024f4a:	bf00      	nop
 8024f4c:	0803097a 	.word	0x0803097a
 8024f50:	08030f3d 	.word	0x08030f3d
 8024f54:	08030a63 	.word	0x08030a63

08024f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f5c:	ed2d 8b08 	vpush	{d8-d11}
 8024f60:	b097      	sub	sp, #92	; 0x5c
 8024f62:	eeb0 aa40 	vmov.f32	s20, s0
 8024f66:	9214      	str	r2, [sp, #80]	; 0x50
 8024f68:	9308      	str	r3, [sp, #32]
 8024f6a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024f6c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024f70:	9312      	str	r3, [sp, #72]	; 0x48
 8024f72:	9111      	str	r1, [sp, #68]	; 0x44
 8024f74:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024f78:	9015      	str	r0, [sp, #84]	; 0x54
 8024f7a:	6850      	ldr	r0, [r2, #4]
 8024f7c:	6812      	ldr	r2, [r2, #0]
 8024f7e:	fb00 1303 	mla	r3, r0, r3, r1
 8024f82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f86:	9309      	str	r3, [sp, #36]	; 0x24
 8024f88:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024f8a:	681b      	ldr	r3, [r3, #0]
 8024f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f8e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024f90:	685b      	ldr	r3, [r3, #4]
 8024f92:	930c      	str	r3, [sp, #48]	; 0x30
 8024f94:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8024f98:	930a      	str	r3, [sp, #40]	; 0x28
 8024f9a:	eef0 9a60 	vmov.f32	s19, s1
 8024f9e:	eeb0 9a41 	vmov.f32	s18, s2
 8024fa2:	eeb0 8a62 	vmov.f32	s16, s5
 8024fa6:	eef0 8a43 	vmov.f32	s17, s6
 8024faa:	eef0 ba44 	vmov.f32	s23, s8
 8024fae:	eeb0 ba64 	vmov.f32	s22, s9
 8024fb2:	eef0 aa45 	vmov.f32	s21, s10
 8024fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024fb8:	2b00      	cmp	r3, #0
 8024fba:	dc03      	bgt.n	8024fc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024fbe:	2b00      	cmp	r3, #0
 8024fc0:	f340 83cb 	ble.w	802575a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8024fc4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024fc6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024fca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024fce:	1e48      	subs	r0, r1, #1
 8024fd0:	1e55      	subs	r5, r2, #1
 8024fd2:	9b08      	ldr	r3, [sp, #32]
 8024fd4:	2b00      	cmp	r3, #0
 8024fd6:	f340 81a3 	ble.w	8025320 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8024fda:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8024fdc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fde:	1436      	asrs	r6, r6, #16
 8024fe0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024fe4:	d406      	bmi.n	8024ff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024fe6:	4286      	cmp	r6, r0
 8024fe8:	da04      	bge.n	8024ff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024fea:	2b00      	cmp	r3, #0
 8024fec:	db02      	blt.n	8024ff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024fee:	42ab      	cmp	r3, r5
 8024ff0:	f2c0 8197 	blt.w	8025322 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024ff4:	3601      	adds	r6, #1
 8024ff6:	f100 8184 	bmi.w	8025302 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024ffa:	42b1      	cmp	r1, r6
 8024ffc:	f2c0 8181 	blt.w	8025302 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025000:	3301      	adds	r3, #1
 8025002:	f100 817e 	bmi.w	8025302 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025006:	429a      	cmp	r2, r3
 8025008:	f2c0 817b 	blt.w	8025302 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802500c:	9b08      	ldr	r3, [sp, #32]
 802500e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025010:	9313      	str	r3, [sp, #76]	; 0x4c
 8025012:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025018:	2b00      	cmp	r3, #0
 802501a:	f340 81a4 	ble.w	8025366 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 802501e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025020:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8025022:	1418      	asrs	r0, r3, #16
 8025024:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025026:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802502a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802502c:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025030:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025032:	142d      	asrs	r5, r5, #16
 8025034:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025038:	f100 81f8 	bmi.w	802542c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802503c:	f102 3eff 	add.w	lr, r2, #4294967295
 8025040:	4575      	cmp	r5, lr
 8025042:	f280 81f3 	bge.w	802542c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025046:	2800      	cmp	r0, #0
 8025048:	f2c0 81f0 	blt.w	802542c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802504c:	f103 3eff 	add.w	lr, r3, #4294967295
 8025050:	4570      	cmp	r0, lr
 8025052:	f280 81eb 	bge.w	802542c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025058:	b212      	sxth	r2, r2
 802505a:	fb00 5002 	mla	r0, r0, r2, r5
 802505e:	fa1f fe81 	uxth.w	lr, r1
 8025062:	eb03 0a00 	add.w	sl, r3, r0
 8025066:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802506a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802506e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025072:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025076:	b29b      	uxth	r3, r3
 8025078:	f1bc 0f00 	cmp.w	ip, #0
 802507c:	f000 81b9 	beq.w	80253f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8025080:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025084:	940d      	str	r4, [sp, #52]	; 0x34
 8025086:	eb0a 0b02 	add.w	fp, sl, r2
 802508a:	fa1f fa8c 	uxth.w	sl, ip
 802508e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025092:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025096:	fa1f fa8a 	uxth.w	sl, sl
 802509a:	eba5 050e 	sub.w	r5, r5, lr
 802509e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80250a2:	940e      	str	r4, [sp, #56]	; 0x38
 80250a4:	eba3 030a 	sub.w	r3, r3, sl
 80250a8:	b2ad      	uxth	r5, r5
 80250aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80250ac:	b29b      	uxth	r3, r3
 80250ae:	fb08 f505 	mul.w	r5, r8, r5
 80250b2:	fb09 5303 	mla	r3, r9, r3, r5
 80250b6:	fb0a 3304 	mla	r3, sl, r4, r3
 80250ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80250bc:	fb0e 3304 	mla	r3, lr, r4, r3
 80250c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80250c4:	2b00      	cmp	r3, #0
 80250c6:	f000 810f 	beq.w	80252e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80250ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80250cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80250d0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80250d4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80250d8:	f000 8190 	beq.w	80253fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 80250dc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80250e0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80250e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80250e8:	fb09 f000 	mul.w	r0, r9, r0
 80250ec:	fb0a fe0e 	mul.w	lr, sl, lr
 80250f0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80250f4:	f100 0b20 	add.w	fp, r0, #32
 80250f8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80250fc:	44ce      	add	lr, r9
 80250fe:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025102:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025106:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802510a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802510e:	ea4e 0909 	orr.w	r9, lr, r9
 8025112:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025116:	8868      	ldrh	r0, [r5, #2]
 8025118:	d019      	beq.n	802514e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802511a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802511e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025122:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025126:	fb08 f800 	mul.w	r8, r8, r0
 802512a:	fb0a fe0e 	mul.w	lr, sl, lr
 802512e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025132:	f108 0b20 	add.w	fp, r8, #32
 8025136:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802513a:	4486      	add	lr, r0
 802513c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025140:	0a00      	lsrs	r0, r0, #8
 8025142:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025146:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802514a:	ea4e 0000 	orr.w	r0, lr, r0
 802514e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025152:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025156:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802515a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802515e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025162:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025166:	ea4e 0909 	orr.w	r9, lr, r9
 802516a:	ea4a 0000 	orr.w	r0, sl, r0
 802516e:	f1bc 0f00 	cmp.w	ip, #0
 8025172:	f000 8145 	beq.w	8025400 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8025176:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802517a:	3a01      	subs	r2, #1
 802517c:	0052      	lsls	r2, r2, #1
 802517e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025180:	3202      	adds	r2, #2
 8025182:	2cff      	cmp	r4, #255	; 0xff
 8025184:	eb05 0e02 	add.w	lr, r5, r2
 8025188:	5aaa      	ldrh	r2, [r5, r2]
 802518a:	d018      	beq.n	80251be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802518c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025190:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025194:	fb04 fa02 	mul.w	sl, r4, r2
 8025198:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802519c:	fb08 f805 	mul.w	r8, r8, r5
 80251a0:	f10a 0520 	add.w	r5, sl, #32
 80251a4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80251a8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80251ac:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80251b0:	4442      	add	r2, r8
 80251b2:	0a2d      	lsrs	r5, r5, #8
 80251b4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80251b8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80251bc:	432a      	orrs	r2, r5
 80251be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80251c0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80251c4:	2cff      	cmp	r4, #255	; 0xff
 80251c6:	d01a      	beq.n	80251fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80251c8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80251cc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80251d0:	fb04 fa05 	mul.w	sl, r4, r5
 80251d4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80251d8:	fb08 f80e 	mul.w	r8, r8, lr
 80251dc:	f10a 0e20 	add.w	lr, sl, #32
 80251e0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80251e4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80251e8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80251ec:	4445      	add	r5, r8
 80251ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251f2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80251f6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80251fa:	ea45 050e 	orr.w	r5, r5, lr
 80251fe:	fb1c fe01 	smulbb	lr, ip, r1
 8025202:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025206:	f1cc 0810 	rsb	r8, ip, #16
 802520a:	eba8 0801 	sub.w	r8, r8, r1
 802520e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025212:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025216:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802521a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802521e:	4341      	muls	r1, r0
 8025220:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025224:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025228:	ea4a 0202 	orr.w	r2, sl, r2
 802522c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025230:	fb09 1108 	mla	r1, r9, r8, r1
 8025234:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025238:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802523c:	fb0c 1102 	mla	r1, ip, r2, r1
 8025240:	ea4b 0505 	orr.w	r5, fp, r5
 8025244:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025248:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802524c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025250:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025254:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025258:	ea42 0e0e 	orr.w	lr, r2, lr
 802525c:	fa1f f28e 	uxth.w	r2, lr
 8025260:	2bff      	cmp	r3, #255	; 0xff
 8025262:	d103      	bne.n	802526c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8025264:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025266:	29ff      	cmp	r1, #255	; 0xff
 8025268:	f000 80de 	beq.w	8025428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 802526c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802526e:	8838      	ldrh	r0, [r7, #0]
 8025270:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025272:	434b      	muls	r3, r1
 8025274:	f103 0c01 	add.w	ip, r3, #1
 8025278:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 802527c:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 8025280:	1205      	asrs	r5, r0, #8
 8025282:	fa5f fc8c 	uxtb.w	ip, ip
 8025286:	1213      	asrs	r3, r2, #8
 8025288:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802528c:	fb15 f50c 	smulbb	r5, r5, ip
 8025290:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025294:	fb03 5301 	mla	r3, r3, r1, r5
 8025298:	b29d      	uxth	r5, r3
 802529a:	10c3      	asrs	r3, r0, #3
 802529c:	00c0      	lsls	r0, r0, #3
 802529e:	10d1      	asrs	r1, r2, #3
 80252a0:	b2c0      	uxtb	r0, r0
 80252a2:	00d2      	lsls	r2, r2, #3
 80252a4:	fb10 f00c 	smulbb	r0, r0, ip
 80252a8:	b2d2      	uxtb	r2, r2
 80252aa:	fb02 0204 	mla	r2, r2, r4, r0
 80252ae:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80252b2:	fb13 f30c 	smulbb	r3, r3, ip
 80252b6:	b292      	uxth	r2, r2
 80252b8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80252bc:	fb01 3104 	mla	r1, r1, r4, r3
 80252c0:	1c50      	adds	r0, r2, #1
 80252c2:	1c6b      	adds	r3, r5, #1
 80252c4:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80252c8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80252cc:	b289      	uxth	r1, r1
 80252ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80252d2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80252d6:	4313      	orrs	r3, r2
 80252d8:	1c4a      	adds	r2, r1, #1
 80252da:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80252de:	0949      	lsrs	r1, r1, #5
 80252e0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80252e4:	430b      	orrs	r3, r1
 80252e6:	803b      	strh	r3, [r7, #0]
 80252e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80252ea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80252ec:	4413      	add	r3, r2
 80252ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80252f0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80252f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80252f4:	441a      	add	r2, r3
 80252f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80252f8:	922a      	str	r2, [sp, #168]	; 0xa8
 80252fa:	3b01      	subs	r3, #1
 80252fc:	3702      	adds	r7, #2
 80252fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8025300:	e689      	b.n	8025016 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025302:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025304:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8025306:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8025308:	4433      	add	r3, r6
 802530a:	9329      	str	r3, [sp, #164]	; 0xa4
 802530c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802530e:	441c      	add	r4, r3
 8025310:	9b08      	ldr	r3, [sp, #32]
 8025312:	942a      	str	r4, [sp, #168]	; 0xa8
 8025314:	3b01      	subs	r3, #1
 8025316:	9308      	str	r3, [sp, #32]
 8025318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802531a:	3302      	adds	r3, #2
 802531c:	9309      	str	r3, [sp, #36]	; 0x24
 802531e:	e658      	b.n	8024fd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025320:	d028      	beq.n	8025374 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8025322:	9b08      	ldr	r3, [sp, #32]
 8025324:	982b      	ldr	r0, [sp, #172]	; 0xac
 8025326:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8025328:	3b01      	subs	r3, #1
 802532a:	fb00 5003 	mla	r0, r0, r3, r5
 802532e:	1400      	asrs	r0, r0, #16
 8025330:	f53f ae6c 	bmi.w	802500c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025334:	3901      	subs	r1, #1
 8025336:	4288      	cmp	r0, r1
 8025338:	f6bf ae68 	bge.w	802500c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802533c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802533e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8025340:	fb01 0303 	mla	r3, r1, r3, r0
 8025344:	141b      	asrs	r3, r3, #16
 8025346:	f53f ae61 	bmi.w	802500c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802534a:	3a01      	subs	r2, #1
 802534c:	4293      	cmp	r3, r2
 802534e:	f6bf ae5d 	bge.w	802500c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025352:	9b08      	ldr	r3, [sp, #32]
 8025354:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025358:	9313      	str	r3, [sp, #76]	; 0x4c
 802535a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802535e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025360:	2b00      	cmp	r3, #0
 8025362:	f300 8082 	bgt.w	802546a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025366:	9b08      	ldr	r3, [sp, #32]
 8025368:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802536c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802536e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025372:	9309      	str	r3, [sp, #36]	; 0x24
 8025374:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025376:	2b00      	cmp	r3, #0
 8025378:	f340 81ef 	ble.w	802575a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 802537c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025384:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025388:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802538a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802538e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025392:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025396:	eef0 6a48 	vmov.f32	s13, s16
 802539a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802539e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253a2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80253a6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80253aa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80253ae:	eef0 6a68 	vmov.f32	s13, s17
 80253b2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80253b6:	ee18 2a10 	vmov	r2, s16
 80253ba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80253be:	fb92 f3f3 	sdiv	r3, r2, r3
 80253c2:	ee18 2a90 	vmov	r2, s17
 80253c6:	932b      	str	r3, [sp, #172]	; 0xac
 80253c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80253ce:	932c      	str	r3, [sp, #176]	; 0xb0
 80253d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80253d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80253d4:	3b01      	subs	r3, #1
 80253d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253da:	9311      	str	r3, [sp, #68]	; 0x44
 80253dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253de:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80253e2:	bf08      	it	eq
 80253e4:	4613      	moveq	r3, r2
 80253e6:	9308      	str	r3, [sp, #32]
 80253e8:	eef0 8a67 	vmov.f32	s17, s15
 80253ec:	eeb0 8a47 	vmov.f32	s16, s14
 80253f0:	e5e1      	b.n	8024fb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80253f2:	fb08 f505 	mul.w	r5, r8, r5
 80253f6:	fb09 5303 	mla	r3, r9, r3, r5
 80253fa:	e661      	b.n	80250c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 80253fc:	4681      	mov	r9, r0
 80253fe:	e688      	b.n	8025112 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025400:	f1c1 0210 	rsb	r2, r1, #16
 8025404:	4341      	muls	r1, r0
 8025406:	fb09 1902 	mla	r9, r9, r2, r1
 802540a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802540e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025412:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025416:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802541a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802541e:	ea42 0909 	orr.w	r9, r2, r9
 8025422:	fa1f f289 	uxth.w	r2, r9
 8025426:	e71b      	b.n	8025260 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8025428:	803a      	strh	r2, [r7, #0]
 802542a:	e75d      	b.n	80252e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802542c:	f115 0e01 	adds.w	lr, r5, #1
 8025430:	f53f af5a 	bmi.w	80252e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8025434:	4572      	cmp	r2, lr
 8025436:	f6ff af57 	blt.w	80252e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802543a:	f110 0e01 	adds.w	lr, r0, #1
 802543e:	f53f af53 	bmi.w	80252e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8025442:	4573      	cmp	r3, lr
 8025444:	f6ff af50 	blt.w	80252e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8025448:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802544a:	9502      	str	r5, [sp, #8]
 802544c:	b21b      	sxth	r3, r3
 802544e:	b212      	sxth	r2, r2
 8025450:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025454:	9301      	str	r3, [sp, #4]
 8025456:	9200      	str	r2, [sp, #0]
 8025458:	e9cd c405 	strd	ip, r4, [sp, #20]
 802545c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8025460:	4639      	mov	r1, r7
 8025462:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025464:	f7ff fbd2 	bl	8024c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8025468:	e73e      	b.n	80252e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802546a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802546c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025470:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025472:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025476:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025478:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802547c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802547e:	141f      	asrs	r7, r3, #16
 8025480:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025482:	141b      	asrs	r3, r3, #16
 8025484:	fb01 3707 	mla	r7, r1, r7, r3
 8025488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802548a:	fa1f fc82 	uxth.w	ip, r2
 802548e:	eb03 0a07 	add.w	sl, r3, r7
 8025492:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025496:	f813 9007 	ldrb.w	r9, [r3, r7]
 802549a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802549e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80254a2:	b29b      	uxth	r3, r3
 80254a4:	2d00      	cmp	r5, #0
 80254a6:	f000 813d 	beq.w	8025724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80254aa:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80254ae:	940f      	str	r4, [sp, #60]	; 0x3c
 80254b0:	eb0a 0b01 	add.w	fp, sl, r1
 80254b4:	fa1f fa85 	uxth.w	sl, r5
 80254b8:	fb0a fc0c 	mul.w	ip, sl, ip
 80254bc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80254c0:	fa1f fa8a 	uxth.w	sl, sl
 80254c4:	eba0 000c 	sub.w	r0, r0, ip
 80254c8:	eba3 030a 	sub.w	r3, r3, sl
 80254cc:	b280      	uxth	r0, r0
 80254ce:	fb08 f000 	mul.w	r0, r8, r0
 80254d2:	b29b      	uxth	r3, r3
 80254d4:	fb09 0303 	mla	r3, r9, r3, r0
 80254d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80254da:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80254de:	9410      	str	r4, [sp, #64]	; 0x40
 80254e0:	fb0a 3300 	mla	r3, sl, r0, r3
 80254e4:	fb0c 3304 	mla	r3, ip, r4, r3
 80254e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80254ec:	2b00      	cmp	r3, #0
 80254ee:	f000 810b 	beq.w	8025708 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 80254f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80254f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80254f6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80254fa:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80254fe:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025502:	f000 8114 	beq.w	802572e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8025506:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802550a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802550e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025512:	fb09 f707 	mul.w	r7, r9, r7
 8025516:	fb0a fc0c 	mul.w	ip, sl, ip
 802551a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802551e:	f107 0b20 	add.w	fp, r7, #32
 8025522:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025526:	44cc      	add	ip, r9
 8025528:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802552c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025530:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025534:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025538:	ea4c 0909 	orr.w	r9, ip, r9
 802553c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025540:	8847      	ldrh	r7, [r0, #2]
 8025542:	d019      	beq.n	8025578 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 8025544:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025548:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802554c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025550:	fb08 f807 	mul.w	r8, r8, r7
 8025554:	fb0a fc0c 	mul.w	ip, sl, ip
 8025558:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802555c:	f108 0b20 	add.w	fp, r8, #32
 8025560:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025564:	44bc      	add	ip, r7
 8025566:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802556a:	0a3f      	lsrs	r7, r7, #8
 802556c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025570:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025574:	ea4c 0707 	orr.w	r7, ip, r7
 8025578:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802557c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025580:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025584:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025588:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802558c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025590:	ea4c 0909 	orr.w	r9, ip, r9
 8025594:	ea4a 0707 	orr.w	r7, sl, r7
 8025598:	2d00      	cmp	r5, #0
 802559a:	f000 80ca 	beq.w	8025732 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 802559e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80255a2:	3901      	subs	r1, #1
 80255a4:	0049      	lsls	r1, r1, #1
 80255a6:	3102      	adds	r1, #2
 80255a8:	eb00 0c01 	add.w	ip, r0, r1
 80255ac:	5a41      	ldrh	r1, [r0, r1]
 80255ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80255b0:	28ff      	cmp	r0, #255	; 0xff
 80255b2:	d019      	beq.n	80255e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 80255b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80255b6:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80255ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80255be:	fb04 fa01 	mul.w	sl, r4, r1
 80255c2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80255c6:	fb08 f800 	mul.w	r8, r8, r0
 80255ca:	f10a 0020 	add.w	r0, sl, #32
 80255ce:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80255d2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80255d6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80255da:	4441      	add	r1, r8
 80255dc:	0a00      	lsrs	r0, r0, #8
 80255de:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80255e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80255e6:	4301      	orrs	r1, r0
 80255e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80255ea:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80255ee:	2cff      	cmp	r4, #255	; 0xff
 80255f0:	d01a      	beq.n	8025628 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80255f2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80255f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80255fa:	fb04 fa00 	mul.w	sl, r4, r0
 80255fe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025602:	fb08 f80c 	mul.w	r8, r8, ip
 8025606:	f10a 0c20 	add.w	ip, sl, #32
 802560a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802560e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025612:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025616:	4440      	add	r0, r8
 8025618:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802561c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025620:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025624:	ea40 000c 	orr.w	r0, r0, ip
 8025628:	fb15 fc02 	smulbb	ip, r5, r2
 802562c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025630:	f1c5 0810 	rsb	r8, r5, #16
 8025634:	eba8 0802 	sub.w	r8, r8, r2
 8025638:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802563c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025640:	437a      	muls	r2, r7
 8025642:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025646:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802564a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802564e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025652:	fb09 2208 	mla	r2, r9, r8, r2
 8025656:	ea4a 0101 	orr.w	r1, sl, r1
 802565a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802565e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025662:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025666:	fb05 2201 	mla	r2, r5, r1, r2
 802566a:	ea4b 0000 	orr.w	r0, fp, r0
 802566e:	fb0c 2200 	mla	r2, ip, r0, r2
 8025672:	0d57      	lsrs	r7, r2, #21
 8025674:	0952      	lsrs	r2, r2, #5
 8025676:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802567a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802567e:	433a      	orrs	r2, r7
 8025680:	2bff      	cmp	r3, #255	; 0xff
 8025682:	b292      	uxth	r2, r2
 8025684:	d102      	bne.n	802568c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8025686:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025688:	29ff      	cmp	r1, #255	; 0xff
 802568a:	d063      	beq.n	8025754 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 802568c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802568e:	f8be 1000 	ldrh.w	r1, [lr]
 8025692:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025694:	4343      	muls	r3, r0
 8025696:	1c58      	adds	r0, r3, #1
 8025698:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802569c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80256a0:	1208      	asrs	r0, r1, #8
 80256a2:	b2db      	uxtb	r3, r3
 80256a4:	1215      	asrs	r5, r2, #8
 80256a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80256aa:	fb10 f003 	smulbb	r0, r0, r3
 80256ae:	10cf      	asrs	r7, r1, #3
 80256b0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80256b4:	00c9      	lsls	r1, r1, #3
 80256b6:	fb05 0504 	mla	r5, r5, r4, r0
 80256ba:	b2c9      	uxtb	r1, r1
 80256bc:	10d0      	asrs	r0, r2, #3
 80256be:	00d2      	lsls	r2, r2, #3
 80256c0:	fb11 f103 	smulbb	r1, r1, r3
 80256c4:	b2d2      	uxtb	r2, r2
 80256c6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80256ca:	fb02 1204 	mla	r2, r2, r4, r1
 80256ce:	fb17 f703 	smulbb	r7, r7, r3
 80256d2:	b2ad      	uxth	r5, r5
 80256d4:	b292      	uxth	r2, r2
 80256d6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80256da:	fb00 7004 	mla	r0, r0, r4, r7
 80256de:	1c6b      	adds	r3, r5, #1
 80256e0:	1c57      	adds	r7, r2, #1
 80256e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80256e6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80256ea:	b280      	uxth	r0, r0
 80256ec:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80256f0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80256f4:	433d      	orrs	r5, r7
 80256f6:	1c47      	adds	r7, r0, #1
 80256f8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80256fc:	097f      	lsrs	r7, r7, #5
 80256fe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025702:	433d      	orrs	r5, r7
 8025704:	f8ae 5000 	strh.w	r5, [lr]
 8025708:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802570a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802570c:	4413      	add	r3, r2
 802570e:	9329      	str	r3, [sp, #164]	; 0xa4
 8025710:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025712:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025714:	441a      	add	r2, r3
 8025716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025718:	922a      	str	r2, [sp, #168]	; 0xa8
 802571a:	3b01      	subs	r3, #1
 802571c:	f10e 0e02 	add.w	lr, lr, #2
 8025720:	9313      	str	r3, [sp, #76]	; 0x4c
 8025722:	e61c      	b.n	802535e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8025724:	fb08 f000 	mul.w	r0, r8, r0
 8025728:	fb09 0303 	mla	r3, r9, r3, r0
 802572c:	e6dc      	b.n	80254e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 802572e:	46b9      	mov	r9, r7
 8025730:	e704      	b.n	802553c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 8025732:	f1c2 0110 	rsb	r1, r2, #16
 8025736:	437a      	muls	r2, r7
 8025738:	fb09 2901 	mla	r9, r9, r1, r2
 802573c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025740:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025744:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025748:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802574c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025750:	4302      	orrs	r2, r0
 8025752:	e795      	b.n	8025680 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8025754:	f8ae 2000 	strh.w	r2, [lr]
 8025758:	e7d6      	b.n	8025708 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 802575a:	b017      	add	sp, #92	; 0x5c
 802575c:	ecbd 8b08 	vpop	{d8-d11}
 8025760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025764 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025768:	b085      	sub	sp, #20
 802576a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802576e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025772:	9103      	str	r1, [sp, #12]
 8025774:	fb05 7106 	mla	r1, r5, r6, r7
 8025778:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 802577c:	2d00      	cmp	r5, #0
 802577e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025782:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025786:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802578a:	9401      	str	r4, [sp, #4]
 802578c:	eb02 0901 	add.w	r9, r2, r1
 8025790:	f2c0 80c0 	blt.w	8025914 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8025794:	45a8      	cmp	r8, r5
 8025796:	f340 80bd 	ble.w	8025914 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802579a:	2f00      	cmp	r7, #0
 802579c:	f2c0 80b6 	blt.w	802590c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80257a0:	42be      	cmp	r6, r7
 80257a2:	f340 80b3 	ble.w	802590c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80257a6:	f812 c001 	ldrb.w	ip, [r2, r1]
 80257aa:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80257ae:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80257b2:	d019      	beq.n	80257e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 80257b4:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80257b8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80257bc:	435a      	muls	r2, r3
 80257be:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80257c2:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80257c6:	fb0c f403 	mul.w	r4, ip, r3
 80257ca:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80257ce:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80257d2:	441a      	add	r2, r3
 80257d4:	f104 0320 	add.w	r3, r4, #32
 80257d8:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80257dc:	0a1b      	lsrs	r3, r3, #8
 80257de:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80257e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80257e6:	4319      	orrs	r1, r3
 80257e8:	b289      	uxth	r1, r1
 80257ea:	1c7b      	adds	r3, r7, #1
 80257ec:	f100 8097 	bmi.w	802591e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80257f0:	429e      	cmp	r6, r3
 80257f2:	f340 8094 	ble.w	802591e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80257f6:	2800      	cmp	r0, #0
 80257f8:	f000 8094 	beq.w	8025924 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 80257fc:	f899 4001 	ldrb.w	r4, [r9, #1]
 8025800:	9b01      	ldr	r3, [sp, #4]
 8025802:	2cff      	cmp	r4, #255	; 0xff
 8025804:	885b      	ldrh	r3, [r3, #2]
 8025806:	d01b      	beq.n	8025840 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8025808:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 802580c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8025810:	fb0a f202 	mul.w	r2, sl, r2
 8025814:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025818:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802581c:	fb04 fa03 	mul.w	sl, r4, r3
 8025820:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8025824:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025828:	441a      	add	r2, r3
 802582a:	f10a 0320 	add.w	r3, sl, #32
 802582e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025832:	0a1b      	lsrs	r3, r3, #8
 8025834:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8025838:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802583c:	ea4b 0303 	orr.w	r3, fp, r3
 8025840:	b29b      	uxth	r3, r3
 8025842:	3501      	adds	r5, #1
 8025844:	d474      	bmi.n	8025930 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8025846:	45a8      	cmp	r8, r5
 8025848:	dd72      	ble.n	8025930 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802584a:	f1be 0f00 	cmp.w	lr, #0
 802584e:	f000 8111 	beq.w	8025a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 8025852:	2f00      	cmp	r7, #0
 8025854:	db69      	blt.n	802592a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8025856:	42be      	cmp	r6, r7
 8025858:	dd67      	ble.n	802592a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802585a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802585e:	9a01      	ldr	r2, [sp, #4]
 8025860:	2dff      	cmp	r5, #255	; 0xff
 8025862:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8025866:	d01c      	beq.n	80258a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8025868:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 802586c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8025870:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025874:	fb05 fa0b 	mul.w	sl, r5, fp
 8025878:	fb08 f802 	mul.w	r8, r8, r2
 802587c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025880:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8025884:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025888:	4490      	add	r8, r2
 802588a:	f10a 0220 	add.w	r2, sl, #32
 802588e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8025892:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025896:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802589a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802589e:	ea4b 0b0a 	orr.w	fp, fp, sl
 80258a2:	fa1f fb8b 	uxth.w	fp, fp
 80258a6:	3701      	adds	r7, #1
 80258a8:	d447      	bmi.n	802593a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80258aa:	42be      	cmp	r6, r7
 80258ac:	dd45      	ble.n	802593a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80258ae:	2800      	cmp	r0, #0
 80258b0:	d046      	beq.n	8025940 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80258b2:	3601      	adds	r6, #1
 80258b4:	9a01      	ldr	r2, [sp, #4]
 80258b6:	f819 7006 	ldrb.w	r7, [r9, r6]
 80258ba:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80258be:	2fff      	cmp	r7, #255	; 0xff
 80258c0:	d01a      	beq.n	80258f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 80258c2:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80258c6:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80258ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80258ce:	fb07 f902 	mul.w	r9, r7, r2
 80258d2:	fb08 f806 	mul.w	r8, r8, r6
 80258d6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80258da:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80258de:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80258e2:	44b0      	add	r8, r6
 80258e4:	f109 0620 	add.w	r6, r9, #32
 80258e8:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80258ec:	0a36      	lsrs	r6, r6, #8
 80258ee:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80258f2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80258f6:	4332      	orrs	r2, r6
 80258f8:	b292      	uxth	r2, r2
 80258fa:	280f      	cmp	r0, #15
 80258fc:	d922      	bls.n	8025944 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80258fe:	4b61      	ldr	r3, [pc, #388]	; (8025a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8025900:	4a61      	ldr	r2, [pc, #388]	; (8025a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8025902:	4862      	ldr	r0, [pc, #392]	; (8025a8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8025904:	f240 210d 	movw	r1, #525	; 0x20d
 8025908:	f003 fd6e 	bl	80293e8 <__assert_func>
 802590c:	f04f 0c00 	mov.w	ip, #0
 8025910:	4661      	mov	r1, ip
 8025912:	e76a      	b.n	80257ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8025914:	2400      	movs	r4, #0
 8025916:	46a4      	mov	ip, r4
 8025918:	4623      	mov	r3, r4
 802591a:	4621      	mov	r1, r4
 802591c:	e791      	b.n	8025842 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802591e:	2400      	movs	r4, #0
 8025920:	4623      	mov	r3, r4
 8025922:	e78e      	b.n	8025842 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8025924:	4604      	mov	r4, r0
 8025926:	4603      	mov	r3, r0
 8025928:	e78b      	b.n	8025842 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802592a:	2500      	movs	r5, #0
 802592c:	46ab      	mov	fp, r5
 802592e:	e7ba      	b.n	80258a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8025930:	2700      	movs	r7, #0
 8025932:	463d      	mov	r5, r7
 8025934:	463a      	mov	r2, r7
 8025936:	46bb      	mov	fp, r7
 8025938:	e7df      	b.n	80258fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 802593a:	2700      	movs	r7, #0
 802593c:	463a      	mov	r2, r7
 802593e:	e7dc      	b.n	80258fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8025940:	4607      	mov	r7, r0
 8025942:	4602      	mov	r2, r0
 8025944:	f1be 0f0f 	cmp.w	lr, #15
 8025948:	d8d9      	bhi.n	80258fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802594a:	b286      	uxth	r6, r0
 802594c:	fa1f f98e 	uxth.w	r9, lr
 8025950:	fb06 f809 	mul.w	r8, r6, r9
 8025954:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025958:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802595c:	0136      	lsls	r6, r6, #4
 802595e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025962:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025966:	9601      	str	r6, [sp, #4]
 8025968:	ea4a 0101 	orr.w	r1, sl, r1
 802596c:	fa1f f689 	uxth.w	r6, r9
 8025970:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8025974:	fb10 f90e 	smulbb	r9, r0, lr
 8025978:	ea4f 09e9 	mov.w	r9, r9, asr #3
 802597c:	9602      	str	r6, [sp, #8]
 802597e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025982:	460e      	mov	r6, r1
 8025984:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025988:	f1ce 0110 	rsb	r1, lr, #16
 802598c:	1a09      	subs	r1, r1, r0
 802598e:	ea4a 0303 	orr.w	r3, sl, r3
 8025992:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8025996:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802599a:	4343      	muls	r3, r0
 802599c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80259a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80259a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80259a8:	fb01 3106 	mla	r1, r1, r6, r3
 80259ac:	ea4a 0202 	orr.w	r2, sl, r2
 80259b0:	fb09 1302 	mla	r3, r9, r2, r1
 80259b4:	9901      	ldr	r1, [sp, #4]
 80259b6:	9802      	ldr	r0, [sp, #8]
 80259b8:	9a03      	ldr	r2, [sp, #12]
 80259ba:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80259be:	1a09      	subs	r1, r1, r0
 80259c0:	9801      	ldr	r0, [sp, #4]
 80259c2:	8812      	ldrh	r2, [r2, #0]
 80259c4:	eba0 0608 	sub.w	r6, r0, r8
 80259c8:	b2b6      	uxth	r6, r6
 80259ca:	b289      	uxth	r1, r1
 80259cc:	4374      	muls	r4, r6
 80259ce:	fb0c 4401 	mla	r4, ip, r1, r4
 80259d2:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80259d6:	9902      	ldr	r1, [sp, #8]
 80259d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80259dc:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80259e0:	fb01 4505 	mla	r5, r1, r5, r4
 80259e4:	ea4a 0b0b 	orr.w	fp, sl, fp
 80259e8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80259ec:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80259f0:	fb08 5707 	mla	r7, r8, r7, r5
 80259f4:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80259f8:	1211      	asrs	r1, r2, #8
 80259fa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80259fe:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8025a02:	b2ff      	uxtb	r7, r7
 8025a04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a08:	10d0      	asrs	r0, r2, #3
 8025a0a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025a0e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025a12:	00d2      	lsls	r2, r2, #3
 8025a14:	4379      	muls	r1, r7
 8025a16:	ea43 0e0e 	orr.w	lr, r3, lr
 8025a1a:	b2d2      	uxtb	r2, r2
 8025a1c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025a20:	fa1f f38e 	uxth.w	r3, lr
 8025a24:	4378      	muls	r0, r7
 8025a26:	4357      	muls	r7, r2
 8025a28:	1c4a      	adds	r2, r1, #1
 8025a2a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8025a2e:	1219      	asrs	r1, r3, #8
 8025a30:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025a34:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8025a38:	4a15      	ldr	r2, [pc, #84]	; (8025a90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 8025a3a:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8025a3e:	1c42      	adds	r2, r0, #1
 8025a40:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025a44:	10da      	asrs	r2, r3, #3
 8025a46:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025a4a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025a4e:	00d2      	lsls	r2, r2, #3
 8025a50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025a54:	430a      	orrs	r2, r1
 8025a56:	00db      	lsls	r3, r3, #3
 8025a58:	1c79      	adds	r1, r7, #1
 8025a5a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8025a5e:	b2db      	uxtb	r3, r3
 8025a60:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025a64:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8025a68:	4313      	orrs	r3, r2
 8025a6a:	9a03      	ldr	r2, [sp, #12]
 8025a6c:	8013      	strh	r3, [r2, #0]
 8025a6e:	b005      	add	sp, #20
 8025a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a74:	280f      	cmp	r0, #15
 8025a76:	f63f af42 	bhi.w	80258fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8025a7a:	4677      	mov	r7, lr
 8025a7c:	4675      	mov	r5, lr
 8025a7e:	4672      	mov	r2, lr
 8025a80:	46f3      	mov	fp, lr
 8025a82:	e762      	b.n	802594a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8025a84:	0803097a 	.word	0x0803097a
 8025a88:	08030f3d 	.word	0x08030f3d
 8025a8c:	08030a63 	.word	0x08030a63
 8025a90:	fffff800 	.word	0xfffff800

08025a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a98:	ed2d 8b08 	vpush	{d8-d11}
 8025a9c:	b093      	sub	sp, #76	; 0x4c
 8025a9e:	eeb0 aa40 	vmov.f32	s20, s0
 8025aa2:	9210      	str	r2, [sp, #64]	; 0x40
 8025aa4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025aa6:	910e      	str	r1, [sp, #56]	; 0x38
 8025aa8:	9306      	str	r3, [sp, #24]
 8025aaa:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025aae:	9011      	str	r0, [sp, #68]	; 0x44
 8025ab0:	6850      	ldr	r0, [r2, #4]
 8025ab2:	6812      	ldr	r2, [r2, #0]
 8025ab4:	fb00 1303 	mla	r3, r0, r3, r1
 8025ab8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025abc:	9307      	str	r3, [sp, #28]
 8025abe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025ac0:	681b      	ldr	r3, [r3, #0]
 8025ac2:	9308      	str	r3, [sp, #32]
 8025ac4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025ac6:	685b      	ldr	r3, [r3, #4]
 8025ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8025aca:	eef0 9a60 	vmov.f32	s19, s1
 8025ace:	eeb0 9a41 	vmov.f32	s18, s2
 8025ad2:	eeb0 8a62 	vmov.f32	s16, s5
 8025ad6:	eef0 8a43 	vmov.f32	s17, s6
 8025ada:	eef0 ba44 	vmov.f32	s23, s8
 8025ade:	eeb0 ba64 	vmov.f32	s22, s9
 8025ae2:	eef0 aa45 	vmov.f32	s21, s10
 8025ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	dc03      	bgt.n	8025af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8025aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025aee:	2b00      	cmp	r3, #0
 8025af0:	f340 83b6 	ble.w	8026260 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8025af4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025af6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025afa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025afe:	1e48      	subs	r0, r1, #1
 8025b00:	1e55      	subs	r5, r2, #1
 8025b02:	9b06      	ldr	r3, [sp, #24]
 8025b04:	2b00      	cmp	r3, #0
 8025b06:	f340 8199 	ble.w	8025e3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8025b0a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8025b0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025b0e:	1436      	asrs	r6, r6, #16
 8025b10:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025b14:	d406      	bmi.n	8025b24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025b16:	4286      	cmp	r6, r0
 8025b18:	da04      	bge.n	8025b24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025b1a:	2b00      	cmp	r3, #0
 8025b1c:	db02      	blt.n	8025b24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025b1e:	42ab      	cmp	r3, r5
 8025b20:	f2c0 818d 	blt.w	8025e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025b24:	3601      	adds	r6, #1
 8025b26:	f100 817a 	bmi.w	8025e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025b2a:	42b1      	cmp	r1, r6
 8025b2c:	f2c0 8177 	blt.w	8025e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025b30:	3301      	adds	r3, #1
 8025b32:	f100 8174 	bmi.w	8025e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025b36:	429a      	cmp	r2, r3
 8025b38:	f2c0 8171 	blt.w	8025e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025b3c:	9b06      	ldr	r3, [sp, #24]
 8025b3e:	9f07      	ldr	r7, [sp, #28]
 8025b40:	930f      	str	r3, [sp, #60]	; 0x3c
 8025b42:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025b48:	2b00      	cmp	r3, #0
 8025b4a:	f340 819a 	ble.w	8025e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8025b4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025b50:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8025b52:	1418      	asrs	r0, r3, #16
 8025b54:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025b56:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025b5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025b5c:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025b60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025b62:	142d      	asrs	r5, r5, #16
 8025b64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025b68:	f100 81ee 	bmi.w	8025f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025b6c:	f102 3eff 	add.w	lr, r2, #4294967295
 8025b70:	4575      	cmp	r5, lr
 8025b72:	f280 81e9 	bge.w	8025f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025b76:	2800      	cmp	r0, #0
 8025b78:	f2c0 81e6 	blt.w	8025f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025b7c:	f103 3eff 	add.w	lr, r3, #4294967295
 8025b80:	4570      	cmp	r0, lr
 8025b82:	f280 81e1 	bge.w	8025f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b88:	b212      	sxth	r2, r2
 8025b8a:	fb00 5002 	mla	r0, r0, r2, r5
 8025b8e:	fa1f fe81 	uxth.w	lr, r1
 8025b92:	eb03 0a00 	add.w	sl, r3, r0
 8025b96:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025b9a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025b9e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025ba2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025ba6:	b29b      	uxth	r3, r3
 8025ba8:	f1bc 0f00 	cmp.w	ip, #0
 8025bac:	f000 81af 	beq.w	8025f0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8025bb0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025bb4:	940a      	str	r4, [sp, #40]	; 0x28
 8025bb6:	eb0a 0b02 	add.w	fp, sl, r2
 8025bba:	fa1f fa8c 	uxth.w	sl, ip
 8025bbe:	fb0a fe0e 	mul.w	lr, sl, lr
 8025bc2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025bc6:	fa1f fa8a 	uxth.w	sl, sl
 8025bca:	eba5 050e 	sub.w	r5, r5, lr
 8025bce:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025bd2:	940b      	str	r4, [sp, #44]	; 0x2c
 8025bd4:	eba3 030a 	sub.w	r3, r3, sl
 8025bd8:	b2ad      	uxth	r5, r5
 8025bda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025bdc:	b29b      	uxth	r3, r3
 8025bde:	fb08 f505 	mul.w	r5, r8, r5
 8025be2:	fb09 5303 	mla	r3, r9, r3, r5
 8025be6:	fb0a 3304 	mla	r3, sl, r4, r3
 8025bea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025bec:	fb0e 3304 	mla	r3, lr, r4, r3
 8025bf0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025bf4:	2b00      	cmp	r3, #0
 8025bf6:	f000 8105 	beq.w	8025e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025bfa:	9c08      	ldr	r4, [sp, #32]
 8025bfc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025c00:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025c04:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025c08:	f000 8186 	beq.w	8025f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8025c0c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025c10:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025c14:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025c18:	fb09 f000 	mul.w	r0, r9, r0
 8025c1c:	fb0a fe0e 	mul.w	lr, sl, lr
 8025c20:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025c24:	f100 0b20 	add.w	fp, r0, #32
 8025c28:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025c2c:	44ce      	add	lr, r9
 8025c2e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025c32:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025c36:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025c3a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025c3e:	ea4e 0909 	orr.w	r9, lr, r9
 8025c42:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025c46:	8868      	ldrh	r0, [r5, #2]
 8025c48:	d019      	beq.n	8025c7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025c4a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025c4e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025c52:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025c56:	fb08 f800 	mul.w	r8, r8, r0
 8025c5a:	fb0a fe0e 	mul.w	lr, sl, lr
 8025c5e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025c62:	f108 0b20 	add.w	fp, r8, #32
 8025c66:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025c6a:	4486      	add	lr, r0
 8025c6c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025c70:	0a00      	lsrs	r0, r0, #8
 8025c72:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025c76:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025c7a:	ea4e 0000 	orr.w	r0, lr, r0
 8025c7e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025c82:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025c86:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025c8a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025c8e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025c92:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025c96:	ea4e 0909 	orr.w	r9, lr, r9
 8025c9a:	ea4a 0000 	orr.w	r0, sl, r0
 8025c9e:	f1bc 0f00 	cmp.w	ip, #0
 8025ca2:	f000 813b 	beq.w	8025f1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025ca6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025caa:	3a01      	subs	r2, #1
 8025cac:	0052      	lsls	r2, r2, #1
 8025cae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025cb0:	3202      	adds	r2, #2
 8025cb2:	2cff      	cmp	r4, #255	; 0xff
 8025cb4:	eb05 0e02 	add.w	lr, r5, r2
 8025cb8:	5aaa      	ldrh	r2, [r5, r2]
 8025cba:	d018      	beq.n	8025cee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8025cbc:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025cc0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025cc4:	fb04 fa02 	mul.w	sl, r4, r2
 8025cc8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025ccc:	fb08 f805 	mul.w	r8, r8, r5
 8025cd0:	f10a 0520 	add.w	r5, sl, #32
 8025cd4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025cd8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025cdc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ce0:	4442      	add	r2, r8
 8025ce2:	0a2d      	lsrs	r5, r5, #8
 8025ce4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025ce8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025cec:	432a      	orrs	r2, r5
 8025cee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025cf0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025cf4:	2cff      	cmp	r4, #255	; 0xff
 8025cf6:	d01a      	beq.n	8025d2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8025cf8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025cfc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025d00:	fb04 fa05 	mul.w	sl, r4, r5
 8025d04:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025d08:	fb08 f80e 	mul.w	r8, r8, lr
 8025d0c:	f10a 0e20 	add.w	lr, sl, #32
 8025d10:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025d14:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025d18:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025d1c:	4445      	add	r5, r8
 8025d1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d22:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025d26:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025d2a:	ea45 050e 	orr.w	r5, r5, lr
 8025d2e:	fb1c fe01 	smulbb	lr, ip, r1
 8025d32:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025d36:	f1cc 0810 	rsb	r8, ip, #16
 8025d3a:	eba8 0801 	sub.w	r8, r8, r1
 8025d3e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025d42:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025d46:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025d4a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025d4e:	4341      	muls	r1, r0
 8025d50:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025d54:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025d58:	ea4a 0202 	orr.w	r2, sl, r2
 8025d5c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025d60:	fb09 1108 	mla	r1, r9, r8, r1
 8025d64:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025d68:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025d6c:	fb0c 1102 	mla	r1, ip, r2, r1
 8025d70:	ea4b 0505 	orr.w	r5, fp, r5
 8025d74:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025d78:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025d7c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025d80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025d84:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025d88:	ea42 0e0e 	orr.w	lr, r2, lr
 8025d8c:	fa1f f28e 	uxth.w	r2, lr
 8025d90:	2bff      	cmp	r3, #255	; 0xff
 8025d92:	f000 80d7 	beq.w	8025f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025d96:	f8b7 c000 	ldrh.w	ip, [r7]
 8025d9a:	43db      	mvns	r3, r3
 8025d9c:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025da0:	fa5f fe83 	uxtb.w	lr, r3
 8025da4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025da8:	fb00 f00e 	mul.w	r0, r0, lr
 8025dac:	1c41      	adds	r1, r0, #1
 8025dae:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025db2:	1210      	asrs	r0, r2, #8
 8025db4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8025db8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025dbc:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8025dc0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025dc4:	496f      	ldr	r1, [pc, #444]	; (8025f84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>)
 8025dc6:	fb05 f50e 	mul.w	r5, r5, lr
 8025dca:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8025dce:	1c69      	adds	r1, r5, #1
 8025dd0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025dd4:	10d1      	asrs	r1, r2, #3
 8025dd6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025dda:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025dde:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025de2:	b2db      	uxtb	r3, r3
 8025de4:	00c9      	lsls	r1, r1, #3
 8025de6:	fb03 f30e 	mul.w	r3, r3, lr
 8025dea:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025dee:	4301      	orrs	r1, r0
 8025df0:	1c58      	adds	r0, r3, #1
 8025df2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025df6:	00d3      	lsls	r3, r2, #3
 8025df8:	b2db      	uxtb	r3, r3
 8025dfa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025dfe:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8025e02:	803b      	strh	r3, [r7, #0]
 8025e04:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025e06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025e08:	4413      	add	r3, r2
 8025e0a:	9325      	str	r3, [sp, #148]	; 0x94
 8025e0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8025e0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e10:	441a      	add	r2, r3
 8025e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025e14:	9226      	str	r2, [sp, #152]	; 0x98
 8025e16:	3b01      	subs	r3, #1
 8025e18:	3702      	adds	r7, #2
 8025e1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8025e1c:	e693      	b.n	8025b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025e1e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025e20:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8025e22:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8025e24:	4433      	add	r3, r6
 8025e26:	9325      	str	r3, [sp, #148]	; 0x94
 8025e28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e2a:	441c      	add	r4, r3
 8025e2c:	9b06      	ldr	r3, [sp, #24]
 8025e2e:	9426      	str	r4, [sp, #152]	; 0x98
 8025e30:	3b01      	subs	r3, #1
 8025e32:	9306      	str	r3, [sp, #24]
 8025e34:	9b07      	ldr	r3, [sp, #28]
 8025e36:	3302      	adds	r3, #2
 8025e38:	9307      	str	r3, [sp, #28]
 8025e3a:	e662      	b.n	8025b02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025e3c:	d028      	beq.n	8025e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8025e3e:	9b06      	ldr	r3, [sp, #24]
 8025e40:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025e42:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8025e44:	3b01      	subs	r3, #1
 8025e46:	fb00 5003 	mla	r0, r0, r3, r5
 8025e4a:	1400      	asrs	r0, r0, #16
 8025e4c:	f53f ae76 	bmi.w	8025b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025e50:	3901      	subs	r1, #1
 8025e52:	4288      	cmp	r0, r1
 8025e54:	f6bf ae72 	bge.w	8025b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025e58:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025e5a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8025e5c:	fb01 0303 	mla	r3, r1, r3, r0
 8025e60:	141b      	asrs	r3, r3, #16
 8025e62:	f53f ae6b 	bmi.w	8025b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025e66:	3a01      	subs	r2, #1
 8025e68:	4293      	cmp	r3, r2
 8025e6a:	f6bf ae67 	bge.w	8025b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025e6e:	9b06      	ldr	r3, [sp, #24]
 8025e70:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8025e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8025e76:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025e7c:	2b00      	cmp	r3, #0
 8025e7e:	f300 8083 	bgt.w	8025f88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8025e82:	9b06      	ldr	r3, [sp, #24]
 8025e84:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025e88:	9b07      	ldr	r3, [sp, #28]
 8025e8a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025e8e:	9307      	str	r3, [sp, #28]
 8025e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025e92:	2b00      	cmp	r3, #0
 8025e94:	f340 81e4 	ble.w	8026260 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8025e98:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ea0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025ea4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ea6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025eaa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025eae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025eb2:	eef0 6a48 	vmov.f32	s13, s16
 8025eb6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025eba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ebe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025ec2:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8025ec6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025eca:	eef0 6a68 	vmov.f32	s13, s17
 8025ece:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025ed2:	ee18 2a10 	vmov	r2, s16
 8025ed6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025eda:	fb92 f3f3 	sdiv	r3, r2, r3
 8025ede:	ee18 2a90 	vmov	r2, s17
 8025ee2:	9327      	str	r3, [sp, #156]	; 0x9c
 8025ee4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ee6:	fb92 f3f3 	sdiv	r3, r2, r3
 8025eea:	9328      	str	r3, [sp, #160]	; 0xa0
 8025eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025eee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025ef0:	3b01      	subs	r3, #1
 8025ef2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ef6:	930e      	str	r3, [sp, #56]	; 0x38
 8025ef8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025efa:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8025efe:	bf08      	it	eq
 8025f00:	4613      	moveq	r3, r2
 8025f02:	9306      	str	r3, [sp, #24]
 8025f04:	eef0 8a67 	vmov.f32	s17, s15
 8025f08:	eeb0 8a47 	vmov.f32	s16, s14
 8025f0c:	e5eb      	b.n	8025ae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025f0e:	fb08 f505 	mul.w	r5, r8, r5
 8025f12:	fb09 5303 	mla	r3, r9, r3, r5
 8025f16:	e66b      	b.n	8025bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8025f18:	4681      	mov	r9, r0
 8025f1a:	e692      	b.n	8025c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025f1c:	f1c1 0210 	rsb	r2, r1, #16
 8025f20:	4341      	muls	r1, r0
 8025f22:	fb09 1902 	mla	r9, r9, r2, r1
 8025f26:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025f2a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025f2e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025f32:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025f36:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025f3a:	ea42 0909 	orr.w	r9, r2, r9
 8025f3e:	fa1f f289 	uxth.w	r2, r9
 8025f42:	e725      	b.n	8025d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8025f44:	803a      	strh	r2, [r7, #0]
 8025f46:	e75d      	b.n	8025e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025f48:	f115 0e01 	adds.w	lr, r5, #1
 8025f4c:	f53f af5a 	bmi.w	8025e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025f50:	4572      	cmp	r2, lr
 8025f52:	f6ff af57 	blt.w	8025e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025f56:	f110 0e01 	adds.w	lr, r0, #1
 8025f5a:	f53f af53 	bmi.w	8025e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025f5e:	4573      	cmp	r3, lr
 8025f60:	f6ff af50 	blt.w	8025e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025f64:	b21b      	sxth	r3, r3
 8025f66:	b212      	sxth	r2, r2
 8025f68:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025f6c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8025f70:	9301      	str	r3, [sp, #4]
 8025f72:	9200      	str	r2, [sp, #0]
 8025f74:	4639      	mov	r1, r7
 8025f76:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8025f7a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025f7c:	f7ff fbf2 	bl	8025764 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025f80:	e740      	b.n	8025e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025f82:	bf00      	nop
 8025f84:	fffff800 	.word	0xfffff800
 8025f88:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025f8a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025f8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025f90:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025f94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025f9c:	141f      	asrs	r7, r3, #16
 8025f9e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025fa0:	141b      	asrs	r3, r3, #16
 8025fa2:	fb01 3707 	mla	r7, r1, r7, r3
 8025fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025fa8:	fa1f fc82 	uxth.w	ip, r2
 8025fac:	eb03 0a07 	add.w	sl, r3, r7
 8025fb0:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025fb4:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025fb8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025fbc:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025fc0:	b29b      	uxth	r3, r3
 8025fc2:	2d00      	cmp	r5, #0
 8025fc4:	f000 8131 	beq.w	802622a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x796>
 8025fc8:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025fcc:	940c      	str	r4, [sp, #48]	; 0x30
 8025fce:	eb0a 0b01 	add.w	fp, sl, r1
 8025fd2:	fa1f fa85 	uxth.w	sl, r5
 8025fd6:	fb0a fc0c 	mul.w	ip, sl, ip
 8025fda:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025fde:	fa1f fa8a 	uxth.w	sl, sl
 8025fe2:	eba0 000c 	sub.w	r0, r0, ip
 8025fe6:	eba3 030a 	sub.w	r3, r3, sl
 8025fea:	b280      	uxth	r0, r0
 8025fec:	fb08 f000 	mul.w	r0, r8, r0
 8025ff0:	b29b      	uxth	r3, r3
 8025ff2:	fb09 0303 	mla	r3, r9, r3, r0
 8025ff6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025ff8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025ffc:	940d      	str	r4, [sp, #52]	; 0x34
 8025ffe:	fb0a 3300 	mla	r3, sl, r0, r3
 8026002:	fb0c 3304 	mla	r3, ip, r4, r3
 8026006:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802600a:	2b00      	cmp	r3, #0
 802600c:	f000 80ff 	beq.w	802620e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77a>
 8026010:	9808      	ldr	r0, [sp, #32]
 8026012:	9c08      	ldr	r4, [sp, #32]
 8026014:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026018:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802601c:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026020:	f000 8108 	beq.w	8026234 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a0>
 8026024:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026028:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802602c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026030:	fb09 f707 	mul.w	r7, r9, r7
 8026034:	fb0a fc0c 	mul.w	ip, sl, ip
 8026038:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802603c:	f107 0b20 	add.w	fp, r7, #32
 8026040:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026044:	44cc      	add	ip, r9
 8026046:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802604a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802604e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026052:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026056:	ea4c 0909 	orr.w	r9, ip, r9
 802605a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802605e:	8847      	ldrh	r7, [r0, #2]
 8026060:	d019      	beq.n	8026096 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x602>
 8026062:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026066:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802606a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802606e:	fb08 f807 	mul.w	r8, r8, r7
 8026072:	fb0a fc0c 	mul.w	ip, sl, ip
 8026076:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802607a:	f108 0b20 	add.w	fp, r8, #32
 802607e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026082:	44bc      	add	ip, r7
 8026084:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026088:	0a3f      	lsrs	r7, r7, #8
 802608a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802608e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026092:	ea4c 0707 	orr.w	r7, ip, r7
 8026096:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802609a:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802609e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80260a2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80260a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80260aa:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80260ae:	ea4c 0909 	orr.w	r9, ip, r9
 80260b2:	ea4a 0707 	orr.w	r7, sl, r7
 80260b6:	2d00      	cmp	r5, #0
 80260b8:	f000 80be 	beq.w	8026238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80260bc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80260c0:	3901      	subs	r1, #1
 80260c2:	0049      	lsls	r1, r1, #1
 80260c4:	3102      	adds	r1, #2
 80260c6:	eb00 0c01 	add.w	ip, r0, r1
 80260ca:	5a41      	ldrh	r1, [r0, r1]
 80260cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80260ce:	28ff      	cmp	r0, #255	; 0xff
 80260d0:	d019      	beq.n	8026106 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 80260d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80260d4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80260d8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80260dc:	fb04 fa01 	mul.w	sl, r4, r1
 80260e0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80260e4:	fb08 f800 	mul.w	r8, r8, r0
 80260e8:	f10a 0020 	add.w	r0, sl, #32
 80260ec:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80260f0:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80260f4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80260f8:	4441      	add	r1, r8
 80260fa:	0a00      	lsrs	r0, r0, #8
 80260fc:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026100:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026104:	4301      	orrs	r1, r0
 8026106:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026108:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802610c:	2cff      	cmp	r4, #255	; 0xff
 802610e:	d01a      	beq.n	8026146 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b2>
 8026110:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026114:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026118:	fb04 fa00 	mul.w	sl, r4, r0
 802611c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026120:	fb08 f80c 	mul.w	r8, r8, ip
 8026124:	f10a 0c20 	add.w	ip, sl, #32
 8026128:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802612c:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026130:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026134:	4440      	add	r0, r8
 8026136:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802613a:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802613e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026142:	ea40 000c 	orr.w	r0, r0, ip
 8026146:	fb15 fc02 	smulbb	ip, r5, r2
 802614a:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802614e:	f1c5 0810 	rsb	r8, r5, #16
 8026152:	eba8 0802 	sub.w	r8, r8, r2
 8026156:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802615a:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802615e:	437a      	muls	r2, r7
 8026160:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026164:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026168:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802616c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026170:	fb09 2208 	mla	r2, r9, r8, r2
 8026174:	ea4a 0101 	orr.w	r1, sl, r1
 8026178:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802617c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026180:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026184:	fb05 2201 	mla	r2, r5, r1, r2
 8026188:	ea4b 0000 	orr.w	r0, fp, r0
 802618c:	fb0c 2200 	mla	r2, ip, r0, r2
 8026190:	0d57      	lsrs	r7, r2, #21
 8026192:	0952      	lsrs	r2, r2, #5
 8026194:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026198:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802619c:	433a      	orrs	r2, r7
 802619e:	2bff      	cmp	r3, #255	; 0xff
 80261a0:	b292      	uxth	r2, r2
 80261a2:	d05a      	beq.n	802625a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c6>
 80261a4:	f8be 7000 	ldrh.w	r7, [lr]
 80261a8:	4c30      	ldr	r4, [pc, #192]	; (802626c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 80261aa:	43db      	mvns	r3, r3
 80261ac:	1238      	asrs	r0, r7, #8
 80261ae:	fa5f fc83 	uxtb.w	ip, r3
 80261b2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80261b6:	10fd      	asrs	r5, r7, #3
 80261b8:	fb00 f00c 	mul.w	r0, r0, ip
 80261bc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80261c0:	fb05 f10c 	mul.w	r1, r5, ip
 80261c4:	1c45      	adds	r5, r0, #1
 80261c6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80261ca:	1215      	asrs	r5, r2, #8
 80261cc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80261d0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80261d4:	1c4d      	adds	r5, r1, #1
 80261d6:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80261da:	10d1      	asrs	r1, r2, #3
 80261dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80261e0:	00fb      	lsls	r3, r7, #3
 80261e2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80261e6:	b2db      	uxtb	r3, r3
 80261e8:	00c9      	lsls	r1, r1, #3
 80261ea:	fb03 f30c 	mul.w	r3, r3, ip
 80261ee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80261f2:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80261f6:	4308      	orrs	r0, r1
 80261f8:	00d2      	lsls	r2, r2, #3
 80261fa:	1c59      	adds	r1, r3, #1
 80261fc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026200:	b2d1      	uxtb	r1, r2
 8026202:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026206:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 802620a:	f8ae 0000 	strh.w	r0, [lr]
 802620e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026210:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026212:	4413      	add	r3, r2
 8026214:	9325      	str	r3, [sp, #148]	; 0x94
 8026216:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026218:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802621a:	441a      	add	r2, r3
 802621c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802621e:	9226      	str	r2, [sp, #152]	; 0x98
 8026220:	3b01      	subs	r3, #1
 8026222:	f10e 0e02 	add.w	lr, lr, #2
 8026226:	930f      	str	r3, [sp, #60]	; 0x3c
 8026228:	e627      	b.n	8025e7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802622a:	fb08 f000 	mul.w	r0, r8, r0
 802622e:	fb09 0303 	mla	r3, r9, r3, r0
 8026232:	e6e8      	b.n	8026006 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x572>
 8026234:	46b9      	mov	r9, r7
 8026236:	e710      	b.n	802605a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8026238:	f1c2 0110 	rsb	r1, r2, #16
 802623c:	437a      	muls	r2, r7
 802623e:	fb09 2901 	mla	r9, r9, r1, r2
 8026242:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026246:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802624a:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802624e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026252:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026256:	4302      	orrs	r2, r0
 8026258:	e7a1      	b.n	802619e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802625a:	f8ae 2000 	strh.w	r2, [lr]
 802625e:	e7d6      	b.n	802620e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77a>
 8026260:	b013      	add	sp, #76	; 0x4c
 8026262:	ecbd 8b08 	vpop	{d8-d11}
 8026266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802626a:	bf00      	nop
 802626c:	fffff800 	.word	0xfffff800

08026270 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026274:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8026278:	fb0c 4e03 	mla	lr, ip, r3, r4
 802627c:	f1bc 0f00 	cmp.w	ip, #0
 8026280:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026284:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8026288:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802628c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8026290:	8808      	ldrh	r0, [r1, #0]
 8026292:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8026296:	db2f      	blt.n	80262f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8026298:	45e2      	cmp	sl, ip
 802629a:	dd2d      	ble.n	80262f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802629c:	2c00      	cmp	r4, #0
 802629e:	db29      	blt.n	80262f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80262a0:	42a3      	cmp	r3, r4
 80262a2:	dd27      	ble.n	80262f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80262a4:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 80262a8:	1c62      	adds	r2, r4, #1
 80262aa:	d428      	bmi.n	80262fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80262ac:	4293      	cmp	r3, r2
 80262ae:	dd26      	ble.n	80262fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80262b0:	b32f      	cbz	r7, 80262fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80262b2:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 80262b6:	f11c 0c01 	adds.w	ip, ip, #1
 80262ba:	d424      	bmi.n	8026306 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80262bc:	45e2      	cmp	sl, ip
 80262be:	dd22      	ble.n	8026306 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80262c0:	2e00      	cmp	r6, #0
 80262c2:	f000 809c 	beq.w	80263fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 80262c6:	2c00      	cmp	r4, #0
 80262c8:	db1b      	blt.n	8026302 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80262ca:	42a3      	cmp	r3, r4
 80262cc:	dd19      	ble.n	8026302 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80262ce:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 80262d2:	3401      	adds	r4, #1
 80262d4:	d41a      	bmi.n	802630c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80262d6:	42a3      	cmp	r3, r4
 80262d8:	dd18      	ble.n	802630c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80262da:	b1cf      	cbz	r7, 8026310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 80262dc:	3301      	adds	r3, #1
 80262de:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 80262e2:	2f0f      	cmp	r7, #15
 80262e4:	d915      	bls.n	8026312 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 80262e6:	4b49      	ldr	r3, [pc, #292]	; (802640c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 80262e8:	4a49      	ldr	r2, [pc, #292]	; (8026410 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 80262ea:	484a      	ldr	r0, [pc, #296]	; (8026414 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 80262ec:	f240 11ef 	movw	r1, #495	; 0x1ef
 80262f0:	f003 f87a 	bl	80293e8 <__assert_func>
 80262f4:	4681      	mov	r9, r0
 80262f6:	e7d7      	b.n	80262a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 80262f8:	4686      	mov	lr, r0
 80262fa:	4681      	mov	r9, r0
 80262fc:	e7db      	b.n	80262b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80262fe:	4686      	mov	lr, r0
 8026300:	e7d9      	b.n	80262b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8026302:	4684      	mov	ip, r0
 8026304:	e7e5      	b.n	80262d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8026306:	4603      	mov	r3, r0
 8026308:	4684      	mov	ip, r0
 802630a:	e7ea      	b.n	80262e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802630c:	4603      	mov	r3, r0
 802630e:	e7e8      	b.n	80262e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8026310:	4603      	mov	r3, r0
 8026312:	2e0f      	cmp	r6, #15
 8026314:	d8e7      	bhi.n	80262e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8026316:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802631a:	fb17 f806 	smulbb	r8, r7, r6
 802631e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026322:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8026326:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802632a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802632e:	ea44 0909 	orr.w	r9, r4, r9
 8026332:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026336:	f1c6 0410 	rsb	r4, r6, #16
 802633a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802633e:	1be4      	subs	r4, r4, r7
 8026340:	041a      	lsls	r2, r3, #16
 8026342:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8026346:	ea4a 0e0e 	orr.w	lr, sl, lr
 802634a:	fb07 fe0e 	mul.w	lr, r7, lr
 802634e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026352:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8026356:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802635a:	fb04 e409 	mla	r4, r4, r9, lr
 802635e:	4313      	orrs	r3, r2
 8026360:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8026364:	fb08 4303 	mla	r3, r8, r3, r4
 8026368:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802636c:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8026370:	4322      	orrs	r2, r4
 8026372:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8026376:	fb06 3202 	mla	r2, r6, r2, r3
 802637a:	0d53      	lsrs	r3, r2, #21
 802637c:	0952      	lsrs	r2, r2, #5
 802637e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026382:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026386:	431a      	orrs	r2, r3
 8026388:	b293      	uxth	r3, r2
 802638a:	b2af      	uxth	r7, r5
 802638c:	1202      	asrs	r2, r0, #8
 802638e:	43ed      	mvns	r5, r5
 8026390:	b2ed      	uxtb	r5, r5
 8026392:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026396:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802639a:	fb12 f205 	smulbb	r2, r2, r5
 802639e:	10c6      	asrs	r6, r0, #3
 80263a0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80263a4:	fb0c 2c07 	mla	ip, ip, r7, r2
 80263a8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80263ac:	10da      	asrs	r2, r3, #3
 80263ae:	fb16 f605 	smulbb	r6, r6, r5
 80263b2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80263b6:	fb02 6207 	mla	r2, r2, r7, r6
 80263ba:	b296      	uxth	r6, r2
 80263bc:	00c2      	lsls	r2, r0, #3
 80263be:	00dc      	lsls	r4, r3, #3
 80263c0:	b2d2      	uxtb	r2, r2
 80263c2:	b2e4      	uxtb	r4, r4
 80263c4:	fb12 f205 	smulbb	r2, r2, r5
 80263c8:	fb04 2207 	mla	r2, r4, r7, r2
 80263cc:	fa1f fc8c 	uxth.w	ip, ip
 80263d0:	b292      	uxth	r2, r2
 80263d2:	f10c 0301 	add.w	r3, ip, #1
 80263d6:	1c50      	adds	r0, r2, #1
 80263d8:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80263dc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80263e0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80263e4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80263e8:	4313      	orrs	r3, r2
 80263ea:	1c72      	adds	r2, r6, #1
 80263ec:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80263f0:	0952      	lsrs	r2, r2, #5
 80263f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80263f6:	4313      	orrs	r3, r2
 80263f8:	800b      	strh	r3, [r1, #0]
 80263fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80263fe:	2f0f      	cmp	r7, #15
 8026400:	f63f af71 	bhi.w	80262e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8026404:	4603      	mov	r3, r0
 8026406:	4684      	mov	ip, r0
 8026408:	e785      	b.n	8026316 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 802640a:	bf00      	nop
 802640c:	0803097a 	.word	0x0803097a
 8026410:	08030fe6 	.word	0x08030fe6
 8026414:	08030a63 	.word	0x08030a63

08026418 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802641c:	ed2d 8b08 	vpush	{d8-d11}
 8026420:	b093      	sub	sp, #76	; 0x4c
 8026422:	461d      	mov	r5, r3
 8026424:	9210      	str	r2, [sp, #64]	; 0x40
 8026426:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026428:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 802642c:	920b      	str	r2, [sp, #44]	; 0x2c
 802642e:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8026432:	910a      	str	r1, [sp, #40]	; 0x28
 8026434:	6859      	ldr	r1, [r3, #4]
 8026436:	681b      	ldr	r3, [r3, #0]
 8026438:	9011      	str	r0, [sp, #68]	; 0x44
 802643a:	fb01 2707 	mla	r7, r1, r7, r2
 802643e:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8026442:	9307      	str	r3, [sp, #28]
 8026444:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026446:	681b      	ldr	r3, [r3, #0]
 8026448:	9309      	str	r3, [sp, #36]	; 0x24
 802644a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802644c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8026450:	43db      	mvns	r3, r3
 8026452:	b2db      	uxtb	r3, r3
 8026454:	eeb0 aa40 	vmov.f32	s20, s0
 8026458:	eef0 9a60 	vmov.f32	s19, s1
 802645c:	eeb0 9a41 	vmov.f32	s18, s2
 8026460:	eeb0 8a62 	vmov.f32	s16, s5
 8026464:	eef0 8a43 	vmov.f32	s17, s6
 8026468:	eef0 ba44 	vmov.f32	s23, s8
 802646c:	eeb0 ba64 	vmov.f32	s22, s9
 8026470:	eef0 aa45 	vmov.f32	s21, s10
 8026474:	9308      	str	r3, [sp, #32]
 8026476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026478:	2b00      	cmp	r3, #0
 802647a:	dc03      	bgt.n	8026484 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802647c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802647e:	2b00      	cmp	r3, #0
 8026480:	f340 8203 	ble.w	802688a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8026484:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026486:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802648a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802648e:	1e48      	subs	r0, r1, #1
 8026490:	f102 3cff 	add.w	ip, r2, #4294967295
 8026494:	2d00      	cmp	r5, #0
 8026496:	f340 80da 	ble.w	802664e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802649a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802649e:	ea4f 4326 	mov.w	r3, r6, asr #16
 80264a2:	d406      	bmi.n	80264b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80264a4:	4586      	cmp	lr, r0
 80264a6:	da04      	bge.n	80264b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80264a8:	2b00      	cmp	r3, #0
 80264aa:	db02      	blt.n	80264b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80264ac:	4563      	cmp	r3, ip
 80264ae:	f2c0 80cf 	blt.w	8026650 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80264b2:	f11e 0e01 	adds.w	lr, lr, #1
 80264b6:	f100 80c1 	bmi.w	802663c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80264ba:	4571      	cmp	r1, lr
 80264bc:	f2c0 80be 	blt.w	802663c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80264c0:	3301      	adds	r3, #1
 80264c2:	f100 80bb 	bmi.w	802663c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80264c6:	429a      	cmp	r2, r3
 80264c8:	f2c0 80b8 	blt.w	802663c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80264cc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80264d0:	46a9      	mov	r9, r5
 80264d2:	f1b9 0f00 	cmp.w	r9, #0
 80264d6:	f340 80d8 	ble.w	802668a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80264da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264dc:	1421      	asrs	r1, r4, #16
 80264de:	ea4f 4026 	mov.w	r0, r6, asr #16
 80264e2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80264e6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80264ea:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80264ee:	f100 8111 	bmi.w	8026714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80264f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80264f6:	4551      	cmp	r1, sl
 80264f8:	f280 810c 	bge.w	8026714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80264fc:	2800      	cmp	r0, #0
 80264fe:	f2c0 8109 	blt.w	8026714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026502:	f103 3aff 	add.w	sl, r3, #4294967295
 8026506:	4550      	cmp	r0, sl
 8026508:	f280 8104 	bge.w	8026714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802650c:	fa0f f38e 	sxth.w	r3, lr
 8026510:	fb00 1103 	mla	r1, r0, r3, r1
 8026514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026516:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802651a:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802651e:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8026522:	f1bc 0f00 	cmp.w	ip, #0
 8026526:	d007      	beq.n	8026538 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8026528:	005b      	lsls	r3, r3, #1
 802652a:	eb0a 0003 	add.w	r0, sl, r3
 802652e:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026532:	930c      	str	r3, [sp, #48]	; 0x30
 8026534:	8843      	ldrh	r3, [r0, #2]
 8026536:	930d      	str	r3, [sp, #52]	; 0x34
 8026538:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802653c:	fb12 f30c 	smulbb	r3, r2, ip
 8026540:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026544:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026548:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802654c:	10db      	asrs	r3, r3, #3
 802654e:	ea40 000e 	orr.w	r0, r0, lr
 8026552:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026556:	f1cc 0e10 	rsb	lr, ip, #16
 802655a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802655e:	ebae 0e02 	sub.w	lr, lr, r2
 8026562:	ea4a 0101 	orr.w	r1, sl, r1
 8026566:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802656a:	4351      	muls	r1, r2
 802656c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802656e:	9f08      	ldr	r7, [sp, #32]
 8026570:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026574:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026578:	0410      	lsls	r0, r2, #16
 802657a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802657e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026582:	4310      	orrs	r0, r2
 8026584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026586:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026588:	0412      	lsls	r2, r2, #16
 802658a:	fb03 e000 	mla	r0, r3, r0, lr
 802658e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026592:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026596:	ea42 020e 	orr.w	r2, r2, lr
 802659a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802659e:	fb03 0302 	mla	r3, r3, r2, r0
 80265a2:	0d5a      	lsrs	r2, r3, #21
 80265a4:	095b      	lsrs	r3, r3, #5
 80265a6:	f8b8 c000 	ldrh.w	ip, [r8]
 80265aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80265ae:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80265b2:	4313      	orrs	r3, r2
 80265b4:	b29b      	uxth	r3, r3
 80265b6:	ea4f 212c 	mov.w	r1, ip, asr #8
 80265ba:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80265be:	1218      	asrs	r0, r3, #8
 80265c0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80265c4:	fb11 f107 	smulbb	r1, r1, r7
 80265c8:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80265cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80265d0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80265d4:	fb00 1002 	mla	r0, r0, r2, r1
 80265d8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80265dc:	10d9      	asrs	r1, r3, #3
 80265de:	fa5f fc8c 	uxtb.w	ip, ip
 80265e2:	00db      	lsls	r3, r3, #3
 80265e4:	b2db      	uxtb	r3, r3
 80265e6:	fb1c fc07 	smulbb	ip, ip, r7
 80265ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80265ee:	fb1e fe07 	smulbb	lr, lr, r7
 80265f2:	fb01 e102 	mla	r1, r1, r2, lr
 80265f6:	fb03 c202 	mla	r2, r3, r2, ip
 80265fa:	b280      	uxth	r0, r0
 80265fc:	b292      	uxth	r2, r2
 80265fe:	1c43      	adds	r3, r0, #1
 8026600:	f102 0c01 	add.w	ip, r2, #1
 8026604:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026608:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802660c:	b289      	uxth	r1, r1
 802660e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026612:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026616:	4313      	orrs	r3, r2
 8026618:	1c4a      	adds	r2, r1, #1
 802661a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802661e:	0949      	lsrs	r1, r1, #5
 8026620:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026624:	430b      	orrs	r3, r1
 8026626:	f8a8 3000 	strh.w	r3, [r8]
 802662a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802662c:	441c      	add	r4, r3
 802662e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026630:	f108 0802 	add.w	r8, r8, #2
 8026634:	441e      	add	r6, r3
 8026636:	f109 39ff 	add.w	r9, r9, #4294967295
 802663a:	e74a      	b.n	80264d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802663c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802663e:	441c      	add	r4, r3
 8026640:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026642:	441e      	add	r6, r3
 8026644:	9b07      	ldr	r3, [sp, #28]
 8026646:	3302      	adds	r3, #2
 8026648:	3d01      	subs	r5, #1
 802664a:	9307      	str	r3, [sp, #28]
 802664c:	e722      	b.n	8026494 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802664e:	d022      	beq.n	8026696 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026650:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026652:	1e6b      	subs	r3, r5, #1
 8026654:	fb00 4003 	mla	r0, r0, r3, r4
 8026658:	1400      	asrs	r0, r0, #16
 802665a:	f53f af37 	bmi.w	80264cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802665e:	3901      	subs	r1, #1
 8026660:	4288      	cmp	r0, r1
 8026662:	f6bf af33 	bge.w	80264cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026666:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026668:	fb01 6303 	mla	r3, r1, r3, r6
 802666c:	141b      	asrs	r3, r3, #16
 802666e:	f53f af2d 	bmi.w	80264cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026672:	3a01      	subs	r2, #1
 8026674:	4293      	cmp	r3, r2
 8026676:	f6bf af29 	bge.w	80264cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802667a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802667e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8026682:	46a8      	mov	r8, r5
 8026684:	f1b8 0f00 	cmp.w	r8, #0
 8026688:	dc5e      	bgt.n	8026748 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802668a:	9b07      	ldr	r3, [sp, #28]
 802668c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026690:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026694:	9307      	str	r3, [sp, #28]
 8026696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026698:	2b00      	cmp	r3, #0
 802669a:	f340 80f6 	ble.w	802688a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802669e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80266a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80266a6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80266aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80266ac:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80266b0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80266b4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80266b8:	eef0 6a48 	vmov.f32	s13, s16
 80266bc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80266c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266c4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80266c8:	ee16 4a90 	vmov	r4, s13
 80266cc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80266d0:	eef0 6a68 	vmov.f32	s13, s17
 80266d4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80266d8:	ee18 2a10 	vmov	r2, s16
 80266dc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80266e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80266e4:	ee18 2a90 	vmov	r2, s17
 80266e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80266ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80266ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80266f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80266f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80266f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80266f6:	3b01      	subs	r3, #1
 80266f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266fc:	930a      	str	r3, [sp, #40]	; 0x28
 80266fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026700:	ee16 6a90 	vmov	r6, s13
 8026704:	bf14      	ite	ne
 8026706:	461d      	movne	r5, r3
 8026708:	4615      	moveq	r5, r2
 802670a:	eef0 8a67 	vmov.f32	s17, s15
 802670e:	eeb0 8a47 	vmov.f32	s16, s14
 8026712:	e6b0      	b.n	8026476 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026714:	f111 0a01 	adds.w	sl, r1, #1
 8026718:	d487      	bmi.n	802662a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802671a:	45d6      	cmp	lr, sl
 802671c:	db85      	blt.n	802662a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802671e:	f110 0a01 	adds.w	sl, r0, #1
 8026722:	d482      	bmi.n	802662a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026724:	4553      	cmp	r3, sl
 8026726:	db80      	blt.n	802662a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026728:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802672a:	9101      	str	r1, [sp, #4]
 802672c:	b21b      	sxth	r3, r3
 802672e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026732:	9300      	str	r3, [sp, #0]
 8026734:	e9cd c704 	strd	ip, r7, [sp, #16]
 8026738:	fa0f f38e 	sxth.w	r3, lr
 802673c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802673e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026740:	4641      	mov	r1, r8
 8026742:	f7ff fd95 	bl	8026270 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8026746:	e770      	b.n	802662a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026748:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802674a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802674c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026750:	1430      	asrs	r0, r6, #16
 8026752:	1423      	asrs	r3, r4, #16
 8026754:	fb01 3000 	mla	r0, r1, r0, r3
 8026758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802675a:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802675e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8026762:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026766:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802676a:	8858      	ldrh	r0, [r3, #2]
 802676c:	f1be 0f00 	cmp.w	lr, #0
 8026770:	d00b      	beq.n	802678a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026772:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026776:	3901      	subs	r1, #1
 8026778:	0049      	lsls	r1, r1, #1
 802677a:	3102      	adds	r1, #2
 802677c:	eb03 0b01 	add.w	fp, r3, r1
 8026780:	5a5b      	ldrh	r3, [r3, r1]
 8026782:	930e      	str	r3, [sp, #56]	; 0x38
 8026784:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026788:	930f      	str	r3, [sp, #60]	; 0x3c
 802678a:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802678e:	fb12 f30e 	smulbb	r3, r2, lr
 8026792:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026796:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802679a:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802679e:	10db      	asrs	r3, r3, #3
 80267a0:	ea41 010c 	orr.w	r1, r1, ip
 80267a4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80267a8:	f1ce 0c10 	rsb	ip, lr, #16
 80267ac:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80267b0:	ebac 0c02 	sub.w	ip, ip, r2
 80267b4:	ea4b 0000 	orr.w	r0, fp, r0
 80267b8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80267bc:	4350      	muls	r0, r2
 80267be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80267c0:	9f08      	ldr	r7, [sp, #32]
 80267c2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80267c6:	fb0c 0c01 	mla	ip, ip, r1, r0
 80267ca:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80267ce:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80267d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80267d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80267d6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80267da:	0412      	lsls	r2, r2, #16
 80267dc:	ea4b 0101 	orr.w	r1, fp, r1
 80267e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80267e4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80267e8:	fb03 c101 	mla	r1, r3, r1, ip
 80267ec:	4302      	orrs	r2, r0
 80267ee:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80267f2:	fb03 1202 	mla	r2, r3, r2, r1
 80267f6:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80267fa:	0952      	lsrs	r2, r2, #5
 80267fc:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8026800:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026804:	f8b9 2000 	ldrh.w	r2, [r9]
 8026808:	ea4b 0303 	orr.w	r3, fp, r3
 802680c:	b29b      	uxth	r3, r3
 802680e:	1211      	asrs	r1, r2, #8
 8026810:	1218      	asrs	r0, r3, #8
 8026812:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026816:	fb11 f107 	smulbb	r1, r1, r7
 802681a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802681e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026822:	00d2      	lsls	r2, r2, #3
 8026824:	fb00 100a 	mla	r0, r0, sl, r1
 8026828:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802682c:	10d9      	asrs	r1, r3, #3
 802682e:	b2d2      	uxtb	r2, r2
 8026830:	00db      	lsls	r3, r3, #3
 8026832:	fb1c fc07 	smulbb	ip, ip, r7
 8026836:	fb12 f207 	smulbb	r2, r2, r7
 802683a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802683e:	b2db      	uxtb	r3, r3
 8026840:	b280      	uxth	r0, r0
 8026842:	fb01 c10a 	mla	r1, r1, sl, ip
 8026846:	fb03 230a 	mla	r3, r3, sl, r2
 802684a:	b29b      	uxth	r3, r3
 802684c:	b289      	uxth	r1, r1
 802684e:	1c42      	adds	r2, r0, #1
 8026850:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026854:	f101 0c01 	add.w	ip, r1, #1
 8026858:	1c5a      	adds	r2, r3, #1
 802685a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802685e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026862:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026864:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026868:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802686c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026870:	4310      	orrs	r0, r2
 8026872:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026876:	441c      	add	r4, r3
 8026878:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802687a:	ea40 000c 	orr.w	r0, r0, ip
 802687e:	f829 0b02 	strh.w	r0, [r9], #2
 8026882:	441e      	add	r6, r3
 8026884:	f108 38ff 	add.w	r8, r8, #4294967295
 8026888:	e6fc      	b.n	8026684 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802688a:	b013      	add	sp, #76	; 0x4c
 802688c:	ecbd 8b08 	vpop	{d8-d11}
 8026890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026894 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8026894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026898:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 802689c:	fb06 5c03 	mla	ip, r6, r3, r5
 80268a0:	2e00      	cmp	r6, #0
 80268a2:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80268a6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80268aa:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80268ae:	8808      	ldrh	r0, [r1, #0]
 80268b0:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80268b4:	db2e      	blt.n	8026914 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80268b6:	45b0      	cmp	r8, r6
 80268b8:	dd2c      	ble.n	8026914 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80268ba:	2d00      	cmp	r5, #0
 80268bc:	db28      	blt.n	8026910 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80268be:	42ab      	cmp	r3, r5
 80268c0:	dd26      	ble.n	8026910 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80268c2:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 80268c6:	1c6a      	adds	r2, r5, #1
 80268c8:	d427      	bmi.n	802691a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80268ca:	4293      	cmp	r3, r2
 80268cc:	dd25      	ble.n	802691a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80268ce:	b324      	cbz	r4, 802691a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80268d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80268d4:	3601      	adds	r6, #1
 80268d6:	d424      	bmi.n	8026922 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80268d8:	45b0      	cmp	r8, r6
 80268da:	dd22      	ble.n	8026922 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80268dc:	b31f      	cbz	r7, 8026926 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 80268de:	2d00      	cmp	r5, #0
 80268e0:	db1d      	blt.n	802691e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80268e2:	42ab      	cmp	r3, r5
 80268e4:	dd1b      	ble.n	802691e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80268e6:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 80268ea:	3501      	adds	r5, #1
 80268ec:	d405      	bmi.n	80268fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80268ee:	42ab      	cmp	r3, r5
 80268f0:	dd03      	ble.n	80268fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80268f2:	b124      	cbz	r4, 80268fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 80268f4:	3301      	adds	r3, #1
 80268f6:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 80268fa:	2c0f      	cmp	r4, #15
 80268fc:	d801      	bhi.n	8026902 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80268fe:	2f0f      	cmp	r7, #15
 8026900:	d914      	bls.n	802692c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8026902:	4b27      	ldr	r3, [pc, #156]	; (80269a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8026904:	4a27      	ldr	r2, [pc, #156]	; (80269a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8026906:	4828      	ldr	r0, [pc, #160]	; (80269a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8026908:	f240 11ef 	movw	r1, #495	; 0x1ef
 802690c:	f002 fd6c 	bl	80293e8 <__assert_func>
 8026910:	4684      	mov	ip, r0
 8026912:	e7d8      	b.n	80268c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8026914:	4602      	mov	r2, r0
 8026916:	4684      	mov	ip, r0
 8026918:	e7dc      	b.n	80268d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802691a:	4602      	mov	r2, r0
 802691c:	e7da      	b.n	80268d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802691e:	4606      	mov	r6, r0
 8026920:	e7e3      	b.n	80268ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8026922:	4606      	mov	r6, r0
 8026924:	e7e9      	b.n	80268fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8026926:	2c0f      	cmp	r4, #15
 8026928:	d8eb      	bhi.n	8026902 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802692a:	4606      	mov	r6, r0
 802692c:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8026930:	fb14 f307 	smulbb	r3, r4, r7
 8026934:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8026938:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802693c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026940:	10db      	asrs	r3, r3, #3
 8026942:	ea45 0c0c 	orr.w	ip, r5, ip
 8026946:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802694a:	f1c7 0510 	rsb	r5, r7, #16
 802694e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026952:	1b2d      	subs	r5, r5, r4
 8026954:	ea4e 0202 	orr.w	r2, lr, r2
 8026958:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 802695c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8026960:	4354      	muls	r4, r2
 8026962:	fb05 450c 	mla	r5, r5, ip, r4
 8026966:	0404      	lsls	r4, r0, #16
 8026968:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802696c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026970:	4320      	orrs	r0, r4
 8026972:	fb03 5400 	mla	r4, r3, r0, r5
 8026976:	0430      	lsls	r0, r6, #16
 8026978:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802697c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8026980:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8026984:	4330      	orrs	r0, r6
 8026986:	fb07 4000 	mla	r0, r7, r0, r4
 802698a:	0d43      	lsrs	r3, r0, #21
 802698c:	0940      	lsrs	r0, r0, #5
 802698e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026992:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026996:	4318      	orrs	r0, r3
 8026998:	8008      	strh	r0, [r1, #0]
 802699a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802699e:	bf00      	nop
 80269a0:	0803097a 	.word	0x0803097a
 80269a4:	08030fe6 	.word	0x08030fe6
 80269a8:	08030a63 	.word	0x08030a63

080269ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80269ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269b0:	ed2d 8b08 	vpush	{d8-d11}
 80269b4:	b08f      	sub	sp, #60	; 0x3c
 80269b6:	461d      	mov	r5, r3
 80269b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80269ba:	920c      	str	r2, [sp, #48]	; 0x30
 80269bc:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 80269c0:	9107      	str	r1, [sp, #28]
 80269c2:	6859      	ldr	r1, [r3, #4]
 80269c4:	681b      	ldr	r3, [r3, #0]
 80269c6:	900d      	str	r0, [sp, #52]	; 0x34
 80269c8:	fb01 2707 	mla	r7, r1, r7, r2
 80269cc:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80269d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80269d2:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80269d6:	f8d3 8000 	ldr.w	r8, [r3]
 80269da:	eeb0 aa40 	vmov.f32	s20, s0
 80269de:	eef0 9a60 	vmov.f32	s19, s1
 80269e2:	eeb0 9a41 	vmov.f32	s18, s2
 80269e6:	eeb0 8a62 	vmov.f32	s16, s5
 80269ea:	eef0 8a43 	vmov.f32	s17, s6
 80269ee:	eef0 ba44 	vmov.f32	s23, s8
 80269f2:	eeb0 ba64 	vmov.f32	s22, s9
 80269f6:	eef0 aa45 	vmov.f32	s21, s10
 80269fa:	9b07      	ldr	r3, [sp, #28]
 80269fc:	2b00      	cmp	r3, #0
 80269fe:	dc03      	bgt.n	8026a08 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8026a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026a02:	2b00      	cmp	r3, #0
 8026a04:	f340 8181 	ble.w	8026d0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8026a08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026a0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026a12:	1e48      	subs	r0, r1, #1
 8026a14:	f102 3cff 	add.w	ip, r2, #4294967295
 8026a18:	2d00      	cmp	r5, #0
 8026a1a:	f340 809b 	ble.w	8026b54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8026a1e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026a22:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026a26:	d406      	bmi.n	8026a36 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026a28:	4586      	cmp	lr, r0
 8026a2a:	da04      	bge.n	8026a36 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	db02      	blt.n	8026a36 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026a30:	4563      	cmp	r3, ip
 8026a32:	f2c0 8090 	blt.w	8026b56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026a36:	f11e 0e01 	adds.w	lr, lr, #1
 8026a3a:	f100 8084 	bmi.w	8026b46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026a3e:	4571      	cmp	r1, lr
 8026a40:	f2c0 8081 	blt.w	8026b46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026a44:	3301      	adds	r3, #1
 8026a46:	d47e      	bmi.n	8026b46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026a48:	429a      	cmp	r2, r3
 8026a4a:	db7c      	blt.n	8026b46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026a4c:	46aa      	mov	sl, r5
 8026a4e:	46b9      	mov	r9, r7
 8026a50:	f1ba 0f00 	cmp.w	sl, #0
 8026a54:	f340 8099 	ble.w	8026b8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8026a58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a5a:	1421      	asrs	r1, r4, #16
 8026a5c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026a60:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026a64:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026a68:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026a6c:	f100 80d0 	bmi.w	8026c10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8026a70:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026a74:	4559      	cmp	r1, fp
 8026a76:	f280 80cb 	bge.w	8026c10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8026a7a:	2800      	cmp	r0, #0
 8026a7c:	f2c0 80c8 	blt.w	8026c10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8026a80:	f103 3bff 	add.w	fp, r3, #4294967295
 8026a84:	4558      	cmp	r0, fp
 8026a86:	f280 80c3 	bge.w	8026c10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8026a8a:	fa0f fe8e 	sxth.w	lr, lr
 8026a8e:	fb00 110e 	mla	r1, r0, lr, r1
 8026a92:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026a96:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8026a9a:	8841      	ldrh	r1, [r0, #2]
 8026a9c:	f1bc 0f00 	cmp.w	ip, #0
 8026aa0:	d00b      	beq.n	8026aba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8026aa2:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8026aa6:	3b01      	subs	r3, #1
 8026aa8:	005b      	lsls	r3, r3, #1
 8026aaa:	3302      	adds	r3, #2
 8026aac:	eb00 0e03 	add.w	lr, r0, r3
 8026ab0:	5ac3      	ldrh	r3, [r0, r3]
 8026ab2:	9308      	str	r3, [sp, #32]
 8026ab4:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8026aba:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026abe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026ac2:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026ac6:	ea40 000b 	orr.w	r0, r0, fp
 8026aca:	fb12 f30c 	smulbb	r3, r2, ip
 8026ace:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026ad2:	10db      	asrs	r3, r3, #3
 8026ad4:	f1cc 0e10 	rsb	lr, ip, #16
 8026ad8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026adc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026ae0:	ebae 0e02 	sub.w	lr, lr, r2
 8026ae4:	ea4b 0101 	orr.w	r1, fp, r1
 8026ae8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026aec:	4351      	muls	r1, r2
 8026aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026af0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026af4:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026af8:	0410      	lsls	r0, r2, #16
 8026afa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026afe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026b02:	4310      	orrs	r0, r2
 8026b04:	9a08      	ldr	r2, [sp, #32]
 8026b06:	9908      	ldr	r1, [sp, #32]
 8026b08:	0412      	lsls	r2, r2, #16
 8026b0a:	fb03 e000 	mla	r0, r3, r0, lr
 8026b0e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026b12:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026b16:	ea42 020e 	orr.w	r2, r2, lr
 8026b1a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026b1e:	fb03 0302 	mla	r3, r3, r2, r0
 8026b22:	0d5a      	lsrs	r2, r3, #21
 8026b24:	095b      	lsrs	r3, r3, #5
 8026b26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026b2a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026b2e:	4313      	orrs	r3, r2
 8026b30:	f8a9 3000 	strh.w	r3, [r9]
 8026b34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026b36:	441c      	add	r4, r3
 8026b38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026b3a:	f109 0902 	add.w	r9, r9, #2
 8026b3e:	441e      	add	r6, r3
 8026b40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026b44:	e784      	b.n	8026a50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8026b46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026b48:	441c      	add	r4, r3
 8026b4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026b4c:	3d01      	subs	r5, #1
 8026b4e:	441e      	add	r6, r3
 8026b50:	3702      	adds	r7, #2
 8026b52:	e761      	b.n	8026a18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026b54:	d01d      	beq.n	8026b92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026b56:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8026b58:	1e6b      	subs	r3, r5, #1
 8026b5a:	fb00 4003 	mla	r0, r0, r3, r4
 8026b5e:	1400      	asrs	r0, r0, #16
 8026b60:	f53f af74 	bmi.w	8026a4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026b64:	3901      	subs	r1, #1
 8026b66:	4288      	cmp	r0, r1
 8026b68:	f6bf af70 	bge.w	8026a4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026b6c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8026b6e:	fb01 6303 	mla	r3, r1, r3, r6
 8026b72:	141b      	asrs	r3, r3, #16
 8026b74:	f53f af6a 	bmi.w	8026a4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026b78:	3a01      	subs	r2, #1
 8026b7a:	4293      	cmp	r3, r2
 8026b7c:	f6bf af66 	bge.w	8026a4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026b80:	46a9      	mov	r9, r5
 8026b82:	46ba      	mov	sl, r7
 8026b84:	f1b9 0f00 	cmp.w	r9, #0
 8026b88:	dc5a      	bgt.n	8026c40 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8026b8a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026b8e:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8026b92:	9b07      	ldr	r3, [sp, #28]
 8026b94:	2b00      	cmp	r3, #0
 8026b96:	f340 80b8 	ble.w	8026d0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8026b9a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026ba2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026ba6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026ba8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026bac:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026bb0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026bb4:	eef0 6a48 	vmov.f32	s13, s16
 8026bb8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026bbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026bc0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026bc4:	ee16 4a90 	vmov	r4, s13
 8026bc8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026bcc:	eef0 6a68 	vmov.f32	s13, s17
 8026bd0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026bd4:	ee18 2a10 	vmov	r2, s16
 8026bd8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026bdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8026be0:	ee18 2a90 	vmov	r2, s17
 8026be4:	9323      	str	r3, [sp, #140]	; 0x8c
 8026be6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026be8:	fb92 f3f3 	sdiv	r3, r2, r3
 8026bec:	9324      	str	r3, [sp, #144]	; 0x90
 8026bee:	9b07      	ldr	r3, [sp, #28]
 8026bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026bf2:	3b01      	subs	r3, #1
 8026bf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026bf8:	9307      	str	r3, [sp, #28]
 8026bfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026bfc:	ee16 6a90 	vmov	r6, s13
 8026c00:	bf14      	ite	ne
 8026c02:	461d      	movne	r5, r3
 8026c04:	4615      	moveq	r5, r2
 8026c06:	eef0 8a67 	vmov.f32	s17, s15
 8026c0a:	eeb0 8a47 	vmov.f32	s16, s14
 8026c0e:	e6f4      	b.n	80269fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8026c10:	f111 0b01 	adds.w	fp, r1, #1
 8026c14:	d48e      	bmi.n	8026b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8026c16:	45de      	cmp	lr, fp
 8026c18:	db8c      	blt.n	8026b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8026c1a:	f110 0b01 	adds.w	fp, r0, #1
 8026c1e:	d489      	bmi.n	8026b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8026c20:	455b      	cmp	r3, fp
 8026c22:	db87      	blt.n	8026b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8026c24:	b21b      	sxth	r3, r3
 8026c26:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8026c2a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8026c2e:	9300      	str	r3, [sp, #0]
 8026c30:	4642      	mov	r2, r8
 8026c32:	fa0f f38e 	sxth.w	r3, lr
 8026c36:	4649      	mov	r1, r9
 8026c38:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026c3a:	f7ff fe2b 	bl	8026894 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8026c3e:	e779      	b.n	8026b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8026c40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026c42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026c46:	1420      	asrs	r0, r4, #16
 8026c48:	1431      	asrs	r1, r6, #16
 8026c4a:	fb03 0101 	mla	r1, r3, r1, r0
 8026c4e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026c52:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026c56:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8026c5a:	8841      	ldrh	r1, [r0, #2]
 8026c5c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026c60:	f1be 0f00 	cmp.w	lr, #0
 8026c64:	d00b      	beq.n	8026c7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8026c66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026c6a:	3b01      	subs	r3, #1
 8026c6c:	005b      	lsls	r3, r3, #1
 8026c6e:	3302      	adds	r3, #2
 8026c70:	eb00 0b03 	add.w	fp, r0, r3
 8026c74:	5ac3      	ldrh	r3, [r0, r3]
 8026c76:	930a      	str	r3, [sp, #40]	; 0x28
 8026c78:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8026c7e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8026c82:	fb12 f30e 	smulbb	r3, r2, lr
 8026c86:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026c8a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026c8e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026c92:	10db      	asrs	r3, r3, #3
 8026c94:	ea40 000c 	orr.w	r0, r0, ip
 8026c98:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026c9c:	f1ce 0c10 	rsb	ip, lr, #16
 8026ca0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026ca4:	ebac 0c02 	sub.w	ip, ip, r2
 8026ca8:	ea4b 0101 	orr.w	r1, fp, r1
 8026cac:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026cb0:	4351      	muls	r1, r2
 8026cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026cb4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026cb8:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026cbc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026cc0:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8026cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026cc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026cc8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026ccc:	0412      	lsls	r2, r2, #16
 8026cce:	ea4b 0000 	orr.w	r0, fp, r0
 8026cd2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026cd6:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8026cda:	fb03 c000 	mla	r0, r3, r0, ip
 8026cde:	ea42 0b0b 	orr.w	fp, r2, fp
 8026ce2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026ce6:	fb03 000b 	mla	r0, r3, fp, r0
 8026cea:	0d43      	lsrs	r3, r0, #21
 8026cec:	0940      	lsrs	r0, r0, #5
 8026cee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026cf2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026cf6:	4318      	orrs	r0, r3
 8026cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026cfa:	f82a 0b02 	strh.w	r0, [sl], #2
 8026cfe:	441c      	add	r4, r3
 8026d00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026d02:	f109 39ff 	add.w	r9, r9, #4294967295
 8026d06:	441e      	add	r6, r3
 8026d08:	e73c      	b.n	8026b84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8026d0a:	b00f      	add	sp, #60	; 0x3c
 8026d0c:	ecbd 8b08 	vpop	{d8-d11}
 8026d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8026d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d18:	880e      	ldrh	r6, [r1, #0]
 8026d1a:	b085      	sub	sp, #20
 8026d1c:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8026d20:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8026d24:	4690      	mov	r8, r2
 8026d26:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8026d2a:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8026d2e:	9200      	str	r2, [sp, #0]
 8026d30:	00f6      	lsls	r6, r6, #3
 8026d32:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8026d36:	9201      	str	r2, [sp, #4]
 8026d38:	2c00      	cmp	r4, #0
 8026d3a:	b2f2      	uxtb	r2, r6
 8026d3c:	fb04 5603 	mla	r6, r4, r3, r5
 8026d40:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8026d44:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8026d48:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8026d4c:	9202      	str	r2, [sp, #8]
 8026d4e:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8026d52:	db36      	blt.n	8026dc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8026d54:	45a6      	cmp	lr, r4
 8026d56:	dd34      	ble.n	8026dc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8026d58:	2d00      	cmp	r5, #0
 8026d5a:	db30      	blt.n	8026dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8026d5c:	42ab      	cmp	r3, r5
 8026d5e:	dd2e      	ble.n	8026dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8026d60:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8026d64:	1c6e      	adds	r6, r5, #1
 8026d66:	d42f      	bmi.n	8026dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8026d68:	42b3      	cmp	r3, r6
 8026d6a:	dd2d      	ble.n	8026dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8026d6c:	b370      	cbz	r0, 8026dcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 8026d6e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8026d72:	3401      	adds	r4, #1
 8026d74:	d42e      	bmi.n	8026dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8026d76:	45a6      	cmp	lr, r4
 8026d78:	dd2c      	ble.n	8026dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8026d7a:	b377      	cbz	r7, 8026dda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8026d7c:	2d00      	cmp	r5, #0
 8026d7e:	db27      	blt.n	8026dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8026d80:	42ab      	cmp	r3, r5
 8026d82:	dd25      	ble.n	8026dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8026d84:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026d88:	3501      	adds	r5, #1
 8026d8a:	d429      	bmi.n	8026de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8026d8c:	42ab      	cmp	r3, r5
 8026d8e:	dd27      	ble.n	8026de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8026d90:	b340      	cbz	r0, 8026de4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8026d92:	3301      	adds	r3, #1
 8026d94:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8026d98:	280f      	cmp	r0, #15
 8026d9a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026d9e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026da2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026da6:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026daa:	d801      	bhi.n	8026db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8026dac:	2f0f      	cmp	r7, #15
 8026dae:	d91b      	bls.n	8026de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 8026db0:	4b84      	ldr	r3, [pc, #528]	; (8026fc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b0>)
 8026db2:	4a85      	ldr	r2, [pc, #532]	; (8026fc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8026db4:	4885      	ldr	r0, [pc, #532]	; (8026fcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8026db6:	f240 210d 	movw	r1, #525	; 0x20d
 8026dba:	f002 fb15 	bl	80293e8 <__assert_func>
 8026dbe:	2200      	movs	r2, #0
 8026dc0:	e7d0      	b.n	8026d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 8026dc2:	2600      	movs	r6, #0
 8026dc4:	4632      	mov	r2, r6
 8026dc6:	e7d4      	b.n	8026d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026dc8:	2600      	movs	r6, #0
 8026dca:	e7d2      	b.n	8026d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026dcc:	4606      	mov	r6, r0
 8026dce:	e7d0      	b.n	8026d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026dd0:	2400      	movs	r4, #0
 8026dd2:	e7d9      	b.n	8026d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8026dd4:	2300      	movs	r3, #0
 8026dd6:	461c      	mov	r4, r3
 8026dd8:	e7de      	b.n	8026d98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026dda:	463b      	mov	r3, r7
 8026ddc:	463c      	mov	r4, r7
 8026dde:	e7db      	b.n	8026d98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026de0:	2300      	movs	r3, #0
 8026de2:	e7d9      	b.n	8026d98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026de4:	4603      	mov	r3, r0
 8026de6:	e7d7      	b.n	8026d98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026de8:	b280      	uxth	r0, r0
 8026dea:	b2bf      	uxth	r7, r7
 8026dec:	fb00 fe07 	mul.w	lr, r0, r7
 8026df0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026df4:	0100      	lsls	r0, r0, #4
 8026df6:	eba0 0c0e 	sub.w	ip, r0, lr
 8026dfa:	b2bf      	uxth	r7, r7
 8026dfc:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8026e00:	fa1f fc8c 	uxth.w	ip, ip
 8026e04:	1bed      	subs	r5, r5, r7
 8026e06:	b2ad      	uxth	r5, r5
 8026e08:	fb0c f00a 	mul.w	r0, ip, sl
 8026e0c:	fb05 000b 	mla	r0, r5, fp, r0
 8026e10:	fb07 0009 	mla	r0, r7, r9, r0
 8026e14:	fb0e 0008 	mla	r0, lr, r8, r0
 8026e18:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026e1c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026e20:	9003      	str	r0, [sp, #12]
 8026e22:	d018      	beq.n	8026e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 8026e24:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026e28:	fb0b f000 	mul.w	r0, fp, r0
 8026e2c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026e30:	fb0b fb02 	mul.w	fp, fp, r2
 8026e34:	0a02      	lsrs	r2, r0, #8
 8026e36:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026e3a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026e3e:	4402      	add	r2, r0
 8026e40:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026e44:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026e48:	0a12      	lsrs	r2, r2, #8
 8026e4a:	0a00      	lsrs	r0, r0, #8
 8026e4c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026e50:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026e54:	4302      	orrs	r2, r0
 8026e56:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026e5a:	d019      	beq.n	8026e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 8026e5c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026e60:	fb0a fb0b 	mul.w	fp, sl, fp
 8026e64:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026e68:	fb0a fa06 	mul.w	sl, sl, r6
 8026e6c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026e70:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026e74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026e78:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026e7c:	445e      	add	r6, fp
 8026e7e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026e82:	0a36      	lsrs	r6, r6, #8
 8026e84:	0a00      	lsrs	r0, r0, #8
 8026e86:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026e8a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026e8e:	4306      	orrs	r6, r0
 8026e90:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026e94:	d019      	beq.n	8026eca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 8026e96:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026e9a:	fb09 fa0a 	mul.w	sl, r9, sl
 8026e9e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026ea2:	fb09 f904 	mul.w	r9, r9, r4
 8026ea6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026eaa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026eae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026eb2:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026eb6:	4454      	add	r4, sl
 8026eb8:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026ebc:	0a24      	lsrs	r4, r4, #8
 8026ebe:	0a00      	lsrs	r0, r0, #8
 8026ec0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026ec4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026ec8:	4304      	orrs	r4, r0
 8026eca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026ece:	d019      	beq.n	8026f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 8026ed0:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026ed4:	fb08 f909 	mul.w	r9, r8, r9
 8026ed8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026edc:	fb08 f803 	mul.w	r8, r8, r3
 8026ee0:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026ee4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026ee8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026eec:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026ef0:	444b      	add	r3, r9
 8026ef2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026ef6:	0a1b      	lsrs	r3, r3, #8
 8026ef8:	0a00      	lsrs	r0, r0, #8
 8026efa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026efe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026f02:	4303      	orrs	r3, r0
 8026f04:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026f08:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026f0c:	fb0c f808 	mul.w	r8, ip, r8
 8026f10:	fb05 8800 	mla	r8, r5, r0, r8
 8026f14:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026f18:	fb07 8800 	mla	r8, r7, r0, r8
 8026f1c:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026f20:	fb0e 8000 	mla	r0, lr, r0, r8
 8026f24:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026f28:	fb0c f606 	mul.w	r6, ip, r6
 8026f2c:	0a00      	lsrs	r0, r0, #8
 8026f2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026f32:	fb05 6202 	mla	r2, r5, r2, r6
 8026f36:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8026f3a:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8026f3e:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8026f42:	fb07 2700 	mla	r7, r7, r0, r2
 8026f46:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026f4a:	9b03      	ldr	r3, [sp, #12]
 8026f4c:	9c00      	ldr	r4, [sp, #0]
 8026f4e:	b2ad      	uxth	r5, r5
 8026f50:	436b      	muls	r3, r5
 8026f52:	fb0e 7000 	mla	r0, lr, r0, r7
 8026f56:	1c5a      	adds	r2, r3, #1
 8026f58:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026f5c:	0a00      	lsrs	r0, r0, #8
 8026f5e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026f62:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8026f66:	ea48 0000 	orr.w	r0, r8, r0
 8026f6a:	b2d2      	uxtb	r2, r2
 8026f6c:	fb14 f602 	smulbb	r6, r4, r2
 8026f70:	0c03      	lsrs	r3, r0, #16
 8026f72:	fb03 6305 	mla	r3, r3, r5, r6
 8026f76:	b29e      	uxth	r6, r3
 8026f78:	9b01      	ldr	r3, [sp, #4]
 8026f7a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8026f7e:	fb13 f302 	smulbb	r3, r3, r2
 8026f82:	fb04 3405 	mla	r4, r4, r5, r3
 8026f86:	9b02      	ldr	r3, [sp, #8]
 8026f88:	b2c0      	uxtb	r0, r0
 8026f8a:	fb13 f202 	smulbb	r2, r3, r2
 8026f8e:	fb00 2005 	mla	r0, r0, r5, r2
 8026f92:	b280      	uxth	r0, r0
 8026f94:	b2a4      	uxth	r4, r4
 8026f96:	1c42      	adds	r2, r0, #1
 8026f98:	1c73      	adds	r3, r6, #1
 8026f9a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026f9e:	1c62      	adds	r2, r4, #1
 8026fa0:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8026fa4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026fa8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026fac:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026fb0:	0952      	lsrs	r2, r2, #5
 8026fb2:	4303      	orrs	r3, r0
 8026fb4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026fb8:	4313      	orrs	r3, r2
 8026fba:	800b      	strh	r3, [r1, #0]
 8026fbc:	b005      	add	sp, #20
 8026fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fc2:	bf00      	nop
 8026fc4:	0803097a 	.word	0x0803097a
 8026fc8:	08030f3d 	.word	0x08030f3d
 8026fcc:	08030a63 	.word	0x08030a63

08026fd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fd4:	ed2d 8b08 	vpush	{d8-d11}
 8026fd8:	b09d      	sub	sp, #116	; 0x74
 8026fda:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8026fde:	9219      	str	r2, [sp, #100]	; 0x64
 8026fe0:	9307      	str	r3, [sp, #28]
 8026fe2:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8026fe4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8026fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8026fea:	9117      	str	r1, [sp, #92]	; 0x5c
 8026fec:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8026ff0:	901b      	str	r0, [sp, #108]	; 0x6c
 8026ff2:	6850      	ldr	r0, [r2, #4]
 8026ff4:	6812      	ldr	r2, [r2, #0]
 8026ff6:	fb00 1303 	mla	r3, r0, r3, r1
 8026ffa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8027000:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027002:	681b      	ldr	r3, [r3, #0]
 8027004:	9310      	str	r3, [sp, #64]	; 0x40
 8027006:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802700a:	930b      	str	r3, [sp, #44]	; 0x2c
 802700c:	eeb0 aa40 	vmov.f32	s20, s0
 8027010:	eef0 9a60 	vmov.f32	s19, s1
 8027014:	eeb0 9a41 	vmov.f32	s18, s2
 8027018:	eeb0 8a62 	vmov.f32	s16, s5
 802701c:	eef0 8a43 	vmov.f32	s17, s6
 8027020:	eef0 ba44 	vmov.f32	s23, s8
 8027024:	eeb0 ba64 	vmov.f32	s22, s9
 8027028:	eef0 aa45 	vmov.f32	s21, s10
 802702c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802702e:	2b00      	cmp	r3, #0
 8027030:	dc03      	bgt.n	802703a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027032:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027034:	2b00      	cmp	r3, #0
 8027036:	f340 837b 	ble.w	8027730 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 802703a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802703c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027040:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027044:	1e48      	subs	r0, r1, #1
 8027046:	1e57      	subs	r7, r2, #1
 8027048:	9b07      	ldr	r3, [sp, #28]
 802704a:	2b00      	cmp	r3, #0
 802704c:	f340 8194 	ble.w	8027378 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027050:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027054:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027058:	d406      	bmi.n	8027068 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802705a:	4584      	cmp	ip, r0
 802705c:	da04      	bge.n	8027068 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802705e:	2b00      	cmp	r3, #0
 8027060:	db02      	blt.n	8027068 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027062:	42bb      	cmp	r3, r7
 8027064:	f2c0 8189 	blt.w	802737a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027068:	f11c 0c01 	adds.w	ip, ip, #1
 802706c:	f100 8179 	bmi.w	8027362 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8027070:	4561      	cmp	r1, ip
 8027072:	f2c0 8176 	blt.w	8027362 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8027076:	3301      	adds	r3, #1
 8027078:	f100 8173 	bmi.w	8027362 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802707c:	429a      	cmp	r2, r3
 802707e:	f2c0 8170 	blt.w	8027362 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8027082:	9b07      	ldr	r3, [sp, #28]
 8027084:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027086:	9318      	str	r3, [sp, #96]	; 0x60
 8027088:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802708a:	2b00      	cmp	r3, #0
 802708c:	f340 8192 	ble.w	80273b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8027090:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8027092:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027094:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027098:	689b      	ldr	r3, [r3, #8]
 802709a:	1422      	asrs	r2, r4, #16
 802709c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80270a0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80270a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80270a8:	f100 81d3 	bmi.w	8027452 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80270ac:	f103 38ff 	add.w	r8, r3, #4294967295
 80270b0:	4542      	cmp	r2, r8
 80270b2:	f280 81ce 	bge.w	8027452 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80270b6:	f1bc 0f00 	cmp.w	ip, #0
 80270ba:	f2c0 81ca 	blt.w	8027452 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80270be:	f10e 38ff 	add.w	r8, lr, #4294967295
 80270c2:	45c4      	cmp	ip, r8
 80270c4:	f280 81c5 	bge.w	8027452 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80270c8:	b21b      	sxth	r3, r3
 80270ca:	fb0c 2203 	mla	r2, ip, r3, r2
 80270ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80270d0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80270d4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80270d8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80270dc:	2800      	cmp	r0, #0
 80270de:	f000 81af 	beq.w	8027440 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80270e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80270e6:	950c      	str	r5, [sp, #48]	; 0x30
 80270e8:	0e2d      	lsrs	r5, r5, #24
 80270ea:	9513      	str	r5, [sp, #76]	; 0x4c
 80270ec:	b181      	cbz	r1, 8027110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80270ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80270f2:	3b01      	subs	r3, #1
 80270f4:	009b      	lsls	r3, r3, #2
 80270f6:	3304      	adds	r3, #4
 80270f8:	eb08 0c03 	add.w	ip, r8, r3
 80270fc:	f858 3003 	ldr.w	r3, [r8, r3]
 8027100:	9308      	str	r3, [sp, #32]
 8027102:	0e1b      	lsrs	r3, r3, #24
 8027104:	9311      	str	r3, [sp, #68]	; 0x44
 8027106:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802710a:	930d      	str	r3, [sp, #52]	; 0x34
 802710c:	0e1b      	lsrs	r3, r3, #24
 802710e:	9314      	str	r3, [sp, #80]	; 0x50
 8027110:	b280      	uxth	r0, r0
 8027112:	b289      	uxth	r1, r1
 8027114:	fb00 f901 	mul.w	r9, r0, r1
 8027118:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802711c:	0100      	lsls	r0, r0, #4
 802711e:	eba0 0809 	sub.w	r8, r0, r9
 8027122:	b289      	uxth	r1, r1
 8027124:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027128:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802712a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802712c:	fa1f f888 	uxth.w	r8, r8
 8027130:	1a5b      	subs	r3, r3, r1
 8027132:	b29b      	uxth	r3, r3
 8027134:	fb08 f000 	mul.w	r0, r8, r0
 8027138:	fb03 000e 	mla	r0, r3, lr, r0
 802713c:	fb01 0005 	mla	r0, r1, r5, r0
 8027140:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027142:	fb09 0005 	mla	r0, r9, r5, r0
 8027146:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802714a:	2800      	cmp	r0, #0
 802714c:	f000 8100 	beq.w	8027350 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027150:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027154:	d01b      	beq.n	802718e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8027156:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802715a:	fb0e fa0a 	mul.w	sl, lr, sl
 802715e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027162:	fb0e fe02 	mul.w	lr, lr, r2
 8027166:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802716a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802716e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027172:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027176:	4452      	add	r2, sl
 8027178:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802717c:	0a12      	lsrs	r2, r2, #8
 802717e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027182:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027186:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802718a:	ea42 020c 	orr.w	r2, r2, ip
 802718e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027190:	2dff      	cmp	r5, #255	; 0xff
 8027192:	d021      	beq.n	80271d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8027194:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027196:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802719a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802719c:	fb05 fb0b 	mul.w	fp, r5, fp
 80271a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80271a2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80271a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80271a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80271ac:	fb05 fa0a 	mul.w	sl, r5, sl
 80271b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80271b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80271bc:	44de      	add	lr, fp
 80271be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80271c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80271d2:	ea4e 050a 	orr.w	r5, lr, sl
 80271d6:	950c      	str	r5, [sp, #48]	; 0x30
 80271d8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80271da:	2dff      	cmp	r5, #255	; 0xff
 80271dc:	d021      	beq.n	8027222 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80271de:	9d08      	ldr	r5, [sp, #32]
 80271e0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80271e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80271e6:	fb05 fb0b 	mul.w	fp, r5, fp
 80271ea:	9d08      	ldr	r5, [sp, #32]
 80271ec:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80271f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80271f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80271f6:	fb05 fa0a 	mul.w	sl, r5, sl
 80271fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271fe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027202:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027206:	44de      	add	lr, fp
 8027208:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802720c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027210:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027214:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027218:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802721c:	ea4e 050a 	orr.w	r5, lr, sl
 8027220:	9508      	str	r5, [sp, #32]
 8027222:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027224:	2dff      	cmp	r5, #255	; 0xff
 8027226:	d021      	beq.n	802726c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8027228:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802722a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802722e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027230:	fb05 fb0b 	mul.w	fp, r5, fp
 8027234:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027236:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802723a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802723c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027240:	fb05 fa0a 	mul.w	sl, r5, sl
 8027244:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027248:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802724c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027250:	44de      	add	lr, fp
 8027252:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027256:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802725a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802725e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027262:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027266:	ea4e 050a 	orr.w	r5, lr, sl
 802726a:	950d      	str	r5, [sp, #52]	; 0x34
 802726c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802726e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027272:	9d08      	ldr	r5, [sp, #32]
 8027274:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027278:	fb08 fc0c 	mul.w	ip, r8, ip
 802727c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027280:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027284:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027286:	fb01 cc0e 	mla	ip, r1, lr, ip
 802728a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802728e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027290:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027294:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027298:	fb08 f80e 	mul.w	r8, r8, lr
 802729c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80272a0:	fb03 8202 	mla	r2, r3, r2, r8
 80272a4:	9b08      	ldr	r3, [sp, #32]
 80272a6:	f8b7 e000 	ldrh.w	lr, [r7]
 80272aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80272ac:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80272b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80272b2:	fb01 220a 	mla	r2, r1, sl, r2
 80272b6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80272ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80272bc:	fb09 2901 	mla	r9, r9, r1, r2
 80272c0:	4343      	muls	r3, r0
 80272c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80272ca:	1c58      	adds	r0, r3, #1
 80272cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80272d0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80272d4:	ea4c 0c09 	orr.w	ip, ip, r9
 80272d8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80272dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80272de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80272e2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80272e6:	ea4f 232e 	mov.w	r3, lr, asr #8
 80272ea:	b2c0      	uxtb	r0, r0
 80272ec:	fb11 f102 	smulbb	r1, r1, r2
 80272f0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80272f4:	fb03 1300 	mla	r3, r3, r0, r1
 80272f8:	b299      	uxth	r1, r3
 80272fa:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80272fe:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8027302:	fb13 f305 	smulbb	r3, r3, r5
 8027306:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802730a:	fb02 3200 	mla	r2, r2, r0, r3
 802730e:	fa5f fc8c 	uxtb.w	ip, ip
 8027312:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8027316:	b2db      	uxtb	r3, r3
 8027318:	fb1c fc05 	smulbb	ip, ip, r5
 802731c:	fb03 cc00 	mla	ip, r3, r0, ip
 8027320:	b292      	uxth	r2, r2
 8027322:	fa1f fc8c 	uxth.w	ip, ip
 8027326:	1c4b      	adds	r3, r1, #1
 8027328:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802732c:	f10c 0001 	add.w	r0, ip, #1
 8027330:	1c51      	adds	r1, r2, #1
 8027332:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8027336:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802733a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802733e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027342:	0952      	lsrs	r2, r2, #5
 8027344:	ea43 030c 	orr.w	r3, r3, ip
 8027348:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802734c:	4313      	orrs	r3, r2
 802734e:	803b      	strh	r3, [r7, #0]
 8027350:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027352:	441c      	add	r4, r3
 8027354:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027356:	441e      	add	r6, r3
 8027358:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802735a:	3b01      	subs	r3, #1
 802735c:	3702      	adds	r7, #2
 802735e:	9318      	str	r3, [sp, #96]	; 0x60
 8027360:	e692      	b.n	8027088 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8027362:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027364:	441c      	add	r4, r3
 8027366:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027368:	441e      	add	r6, r3
 802736a:	9b07      	ldr	r3, [sp, #28]
 802736c:	3b01      	subs	r3, #1
 802736e:	9307      	str	r3, [sp, #28]
 8027370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027372:	3302      	adds	r3, #2
 8027374:	930a      	str	r3, [sp, #40]	; 0x28
 8027376:	e667      	b.n	8027048 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027378:	d023      	beq.n	80273c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802737a:	9b07      	ldr	r3, [sp, #28]
 802737c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802737e:	3b01      	subs	r3, #1
 8027380:	fb00 4003 	mla	r0, r0, r3, r4
 8027384:	1400      	asrs	r0, r0, #16
 8027386:	f53f ae7c 	bmi.w	8027082 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802738a:	3901      	subs	r1, #1
 802738c:	4288      	cmp	r0, r1
 802738e:	f6bf ae78 	bge.w	8027082 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027392:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8027394:	fb01 6303 	mla	r3, r1, r3, r6
 8027398:	141b      	asrs	r3, r3, #16
 802739a:	f53f ae72 	bmi.w	8027082 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802739e:	3a01      	subs	r2, #1
 80273a0:	4293      	cmp	r3, r2
 80273a2:	f6bf ae6e 	bge.w	8027082 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80273a6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80273aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80273ae:	f1bb 0f00 	cmp.w	fp, #0
 80273b2:	dc6c      	bgt.n	802748e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 80273b4:	9b07      	ldr	r3, [sp, #28]
 80273b6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80273ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80273bc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80273c0:	930a      	str	r3, [sp, #40]	; 0x28
 80273c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80273c4:	2b00      	cmp	r3, #0
 80273c6:	f340 81b3 	ble.w	8027730 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80273ca:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80273ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80273d2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80273d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80273d8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80273dc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80273e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80273e4:	eef0 6a48 	vmov.f32	s13, s16
 80273e8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80273ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80273f0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80273f4:	ee16 4a90 	vmov	r4, s13
 80273f8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80273fc:	eef0 6a68 	vmov.f32	s13, s17
 8027400:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027404:	ee18 2a10 	vmov	r2, s16
 8027408:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802740c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027410:	ee18 2a90 	vmov	r2, s17
 8027414:	9331      	str	r3, [sp, #196]	; 0xc4
 8027416:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027418:	fb92 f3f3 	sdiv	r3, r2, r3
 802741c:	9332      	str	r3, [sp, #200]	; 0xc8
 802741e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027420:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027422:	3b01      	subs	r3, #1
 8027424:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027428:	9317      	str	r3, [sp, #92]	; 0x5c
 802742a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802742c:	bf08      	it	eq
 802742e:	4613      	moveq	r3, r2
 8027430:	ee16 6a90 	vmov	r6, s13
 8027434:	9307      	str	r3, [sp, #28]
 8027436:	eef0 8a67 	vmov.f32	s17, s15
 802743a:	eeb0 8a47 	vmov.f32	s16, s14
 802743e:	e5f5      	b.n	802702c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8027440:	2900      	cmp	r1, #0
 8027442:	f43f ae65 	beq.w	8027110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027446:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802744a:	9308      	str	r3, [sp, #32]
 802744c:	0e1b      	lsrs	r3, r3, #24
 802744e:	9311      	str	r3, [sp, #68]	; 0x44
 8027450:	e65e      	b.n	8027110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027452:	f112 0801 	adds.w	r8, r2, #1
 8027456:	f53f af7b 	bmi.w	8027350 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802745a:	4543      	cmp	r3, r8
 802745c:	f6ff af78 	blt.w	8027350 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027460:	f11c 0801 	adds.w	r8, ip, #1
 8027464:	f53f af74 	bmi.w	8027350 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027468:	45c6      	cmp	lr, r8
 802746a:	f6ff af71 	blt.w	8027350 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802746e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8027470:	9201      	str	r2, [sp, #4]
 8027472:	fa0f f28e 	sxth.w	r2, lr
 8027476:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802747a:	e9cd c002 	strd	ip, r0, [sp, #8]
 802747e:	9200      	str	r2, [sp, #0]
 8027480:	b21b      	sxth	r3, r3
 8027482:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027484:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027486:	4639      	mov	r1, r7
 8027488:	f7ff fc44 	bl	8026d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802748c:	e760      	b.n	8027350 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802748e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027490:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027492:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027496:	1427      	asrs	r7, r4, #16
 8027498:	1433      	asrs	r3, r6, #16
 802749a:	fb01 7303 	mla	r3, r1, r3, r7
 802749e:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80274a2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80274a6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80274aa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80274ae:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80274b2:	2a00      	cmp	r2, #0
 80274b4:	f000 8133 	beq.w	802771e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 80274b8:	687d      	ldr	r5, [r7, #4]
 80274ba:	950e      	str	r5, [sp, #56]	; 0x38
 80274bc:	0e2d      	lsrs	r5, r5, #24
 80274be:	9515      	str	r5, [sp, #84]	; 0x54
 80274c0:	b178      	cbz	r0, 80274e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80274c2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80274c6:	3901      	subs	r1, #1
 80274c8:	0089      	lsls	r1, r1, #2
 80274ca:	3104      	adds	r1, #4
 80274cc:	eb07 0e01 	add.w	lr, r7, r1
 80274d0:	5879      	ldr	r1, [r7, r1]
 80274d2:	9109      	str	r1, [sp, #36]	; 0x24
 80274d4:	0e09      	lsrs	r1, r1, #24
 80274d6:	9112      	str	r1, [sp, #72]	; 0x48
 80274d8:	f8de 1004 	ldr.w	r1, [lr, #4]
 80274dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80274de:	0e09      	lsrs	r1, r1, #24
 80274e0:	9116      	str	r1, [sp, #88]	; 0x58
 80274e2:	b292      	uxth	r2, r2
 80274e4:	b280      	uxth	r0, r0
 80274e6:	fb02 f800 	mul.w	r8, r2, r0
 80274ea:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80274ee:	0112      	lsls	r2, r2, #4
 80274f0:	eba2 0e08 	sub.w	lr, r2, r8
 80274f4:	b280      	uxth	r0, r0
 80274f6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80274fa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80274fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80274fe:	fa1f fe8e 	uxth.w	lr, lr
 8027502:	1a12      	subs	r2, r2, r0
 8027504:	b292      	uxth	r2, r2
 8027506:	fb0e f101 	mul.w	r1, lr, r1
 802750a:	fb02 110c 	mla	r1, r2, ip, r1
 802750e:	fb00 1105 	mla	r1, r0, r5, r1
 8027512:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027514:	fb08 1105 	mla	r1, r8, r5, r1
 8027518:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802751c:	2900      	cmp	r1, #0
 802751e:	f000 80f5 	beq.w	802770c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8027522:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027526:	d019      	beq.n	802755c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8027528:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802752c:	fb0c fa0a 	mul.w	sl, ip, sl
 8027530:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027534:	fb0c fc03 	mul.w	ip, ip, r3
 8027538:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802753c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027540:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027544:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027548:	4453      	add	r3, sl
 802754a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802754e:	0a1b      	lsrs	r3, r3, #8
 8027550:	0a3f      	lsrs	r7, r7, #8
 8027552:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027556:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802755a:	433b      	orrs	r3, r7
 802755c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802755e:	2dff      	cmp	r5, #255	; 0xff
 8027560:	d020      	beq.n	80275a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8027562:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027564:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027568:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802756a:	436f      	muls	r7, r5
 802756c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802756e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027572:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027574:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027578:	fb05 fa0a 	mul.w	sl, r5, sl
 802757c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027580:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027584:	44bc      	add	ip, r7
 8027586:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802758a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802758e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027592:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027596:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802759a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802759e:	ea4c 050a 	orr.w	r5, ip, sl
 80275a2:	950e      	str	r5, [sp, #56]	; 0x38
 80275a4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80275a6:	2dff      	cmp	r5, #255	; 0xff
 80275a8:	d020      	beq.n	80275ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80275aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80275ac:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80275b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80275b2:	436f      	muls	r7, r5
 80275b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80275b6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80275ba:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80275bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80275c0:	fb05 fa0a 	mul.w	sl, r5, sl
 80275c4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80275c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80275cc:	44bc      	add	ip, r7
 80275ce:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80275d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80275d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80275de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80275e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80275e6:	ea4c 050a 	orr.w	r5, ip, sl
 80275ea:	9509      	str	r5, [sp, #36]	; 0x24
 80275ec:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80275ee:	2dff      	cmp	r5, #255	; 0xff
 80275f0:	d020      	beq.n	8027634 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 80275f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80275f4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80275f8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80275fa:	436f      	muls	r7, r5
 80275fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80275fe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027602:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027604:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027608:	fb05 fa0a 	mul.w	sl, r5, sl
 802760c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027610:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027614:	44bc      	add	ip, r7
 8027616:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802761a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802761e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027622:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027626:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802762a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802762e:	ea4c 050a 	orr.w	r5, ip, sl
 8027632:	950f      	str	r5, [sp, #60]	; 0x3c
 8027634:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027636:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802763a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802763c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027640:	fb0e f707 	mul.w	r7, lr, r7
 8027644:	fb02 770c 	mla	r7, r2, ip, r7
 8027648:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802764c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802764e:	fb00 770c 	mla	r7, r0, ip, r7
 8027652:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027656:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027658:	fb08 770c 	mla	r7, r8, ip, r7
 802765c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027660:	fb0e fe0c 	mul.w	lr, lr, ip
 8027664:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027668:	fb02 e303 	mla	r3, r2, r3, lr
 802766c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802766e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027670:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027674:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027676:	fb00 330a 	mla	r3, r0, sl, r3
 802767a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802767e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027684:	f8b9 0000 	ldrh.w	r0, [r9]
 8027688:	4359      	muls	r1, r3
 802768a:	0a3f      	lsrs	r7, r7, #8
 802768c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027690:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027694:	1c4b      	adds	r3, r1, #1
 8027696:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802769a:	ea47 070c 	orr.w	r7, r7, ip
 802769e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80276a2:	1202      	asrs	r2, r0, #8
 80276a4:	0c3b      	lsrs	r3, r7, #16
 80276a6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80276aa:	b2c9      	uxtb	r1, r1
 80276ac:	fb13 f305 	smulbb	r3, r3, r5
 80276b0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80276b4:	fb02 3201 	mla	r2, r2, r1, r3
 80276b8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80276bc:	10c3      	asrs	r3, r0, #3
 80276be:	b2ff      	uxtb	r7, r7
 80276c0:	00c0      	lsls	r0, r0, #3
 80276c2:	b2c0      	uxtb	r0, r0
 80276c4:	fb17 f705 	smulbb	r7, r7, r5
 80276c8:	fb00 7001 	mla	r0, r0, r1, r7
 80276cc:	b292      	uxth	r2, r2
 80276ce:	fb1c fc05 	smulbb	ip, ip, r5
 80276d2:	b280      	uxth	r0, r0
 80276d4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80276d8:	fb03 c301 	mla	r3, r3, r1, ip
 80276dc:	1c51      	adds	r1, r2, #1
 80276de:	f100 0c01 	add.w	ip, r0, #1
 80276e2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80276e6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80276ea:	b29b      	uxth	r3, r3
 80276ec:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80276f0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80276f4:	ea42 020c 	orr.w	r2, r2, ip
 80276f8:	f103 0c01 	add.w	ip, r3, #1
 80276fc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8027700:	095b      	lsrs	r3, r3, #5
 8027702:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027706:	431a      	orrs	r2, r3
 8027708:	f8a9 2000 	strh.w	r2, [r9]
 802770c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802770e:	441c      	add	r4, r3
 8027710:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027712:	f109 0902 	add.w	r9, r9, #2
 8027716:	441e      	add	r6, r3
 8027718:	f10b 3bff 	add.w	fp, fp, #4294967295
 802771c:	e647      	b.n	80273ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802771e:	2800      	cmp	r0, #0
 8027720:	f43f aedf 	beq.w	80274e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027724:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8027728:	9109      	str	r1, [sp, #36]	; 0x24
 802772a:	0e09      	lsrs	r1, r1, #24
 802772c:	9112      	str	r1, [sp, #72]	; 0x48
 802772e:	e6d8      	b.n	80274e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027730:	b01d      	add	sp, #116	; 0x74
 8027732:	ecbd 8b08 	vpop	{d8-d11}
 8027736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802773c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027740:	880e      	ldrh	r6, [r1, #0]
 8027742:	b085      	sub	sp, #20
 8027744:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8027748:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 802774c:	4690      	mov	r8, r2
 802774e:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8027752:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8027756:	9200      	str	r2, [sp, #0]
 8027758:	00f6      	lsls	r6, r6, #3
 802775a:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 802775e:	9201      	str	r2, [sp, #4]
 8027760:	2c00      	cmp	r4, #0
 8027762:	b2f2      	uxtb	r2, r6
 8027764:	fb04 5603 	mla	r6, r4, r3, r5
 8027768:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802776c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027770:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027774:	9202      	str	r2, [sp, #8]
 8027776:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 802777a:	db36      	blt.n	80277ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802777c:	45a6      	cmp	lr, r4
 802777e:	dd34      	ble.n	80277ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8027780:	2d00      	cmp	r5, #0
 8027782:	db30      	blt.n	80277e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8027784:	42ab      	cmp	r3, r5
 8027786:	dd2e      	ble.n	80277e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8027788:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 802778c:	1c6e      	adds	r6, r5, #1
 802778e:	d42f      	bmi.n	80277f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8027790:	42b3      	cmp	r3, r6
 8027792:	dd2d      	ble.n	80277f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8027794:	b370      	cbz	r0, 80277f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 8027796:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802779a:	3401      	adds	r4, #1
 802779c:	d42e      	bmi.n	80277fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 802779e:	45a6      	cmp	lr, r4
 80277a0:	dd2c      	ble.n	80277fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 80277a2:	b377      	cbz	r7, 8027802 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 80277a4:	2d00      	cmp	r5, #0
 80277a6:	db27      	blt.n	80277f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 80277a8:	42ab      	cmp	r3, r5
 80277aa:	dd25      	ble.n	80277f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 80277ac:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80277b0:	3501      	adds	r5, #1
 80277b2:	d429      	bmi.n	8027808 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 80277b4:	42ab      	cmp	r3, r5
 80277b6:	dd27      	ble.n	8027808 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 80277b8:	b340      	cbz	r0, 802780c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 80277ba:	3301      	adds	r3, #1
 80277bc:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80277c0:	280f      	cmp	r0, #15
 80277c2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80277c6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80277ca:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80277ce:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80277d2:	d801      	bhi.n	80277d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 80277d4:	2f0f      	cmp	r7, #15
 80277d6:	d91b      	bls.n	8027810 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 80277d8:	4b7d      	ldr	r3, [pc, #500]	; (80279d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>)
 80277da:	4a7e      	ldr	r2, [pc, #504]	; (80279d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 80277dc:	487e      	ldr	r0, [pc, #504]	; (80279d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 80277de:	f240 210d 	movw	r1, #525	; 0x20d
 80277e2:	f001 fe01 	bl	80293e8 <__assert_func>
 80277e6:	2200      	movs	r2, #0
 80277e8:	e7d0      	b.n	802778c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 80277ea:	2600      	movs	r6, #0
 80277ec:	4632      	mov	r2, r6
 80277ee:	e7d4      	b.n	802779a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80277f0:	2600      	movs	r6, #0
 80277f2:	e7d2      	b.n	802779a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80277f4:	4606      	mov	r6, r0
 80277f6:	e7d0      	b.n	802779a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80277f8:	2400      	movs	r4, #0
 80277fa:	e7d9      	b.n	80277b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 80277fc:	2300      	movs	r3, #0
 80277fe:	461c      	mov	r4, r3
 8027800:	e7de      	b.n	80277c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8027802:	463b      	mov	r3, r7
 8027804:	463c      	mov	r4, r7
 8027806:	e7db      	b.n	80277c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8027808:	2300      	movs	r3, #0
 802780a:	e7d9      	b.n	80277c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 802780c:	4603      	mov	r3, r0
 802780e:	e7d7      	b.n	80277c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8027810:	b280      	uxth	r0, r0
 8027812:	b2bf      	uxth	r7, r7
 8027814:	fb00 fe07 	mul.w	lr, r0, r7
 8027818:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802781c:	0100      	lsls	r0, r0, #4
 802781e:	eba0 0c0e 	sub.w	ip, r0, lr
 8027822:	b2bf      	uxth	r7, r7
 8027824:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8027828:	fa1f fc8c 	uxth.w	ip, ip
 802782c:	1bed      	subs	r5, r5, r7
 802782e:	b2ad      	uxth	r5, r5
 8027830:	fb0c f00a 	mul.w	r0, ip, sl
 8027834:	fb05 000b 	mla	r0, r5, fp, r0
 8027838:	fb07 0009 	mla	r0, r7, r9, r0
 802783c:	fb0e 0008 	mla	r0, lr, r8, r0
 8027840:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027844:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8027848:	9003      	str	r0, [sp, #12]
 802784a:	d018      	beq.n	802787e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 802784c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027850:	fb0b f000 	mul.w	r0, fp, r0
 8027854:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027858:	fb0b fb02 	mul.w	fp, fp, r2
 802785c:	0a02      	lsrs	r2, r0, #8
 802785e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027862:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027866:	4402      	add	r2, r0
 8027868:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802786c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027870:	0a12      	lsrs	r2, r2, #8
 8027872:	0a00      	lsrs	r0, r0, #8
 8027874:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027878:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802787c:	4302      	orrs	r2, r0
 802787e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027882:	d019      	beq.n	80278b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 8027884:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027888:	fb0a fb0b 	mul.w	fp, sl, fp
 802788c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027890:	fb0a fa06 	mul.w	sl, sl, r6
 8027894:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8027898:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802789c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80278a0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80278a4:	445e      	add	r6, fp
 80278a6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80278aa:	0a36      	lsrs	r6, r6, #8
 80278ac:	0a00      	lsrs	r0, r0, #8
 80278ae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80278b2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80278b6:	4306      	orrs	r6, r0
 80278b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80278bc:	d019      	beq.n	80278f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 80278be:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80278c2:	fb09 fa0a 	mul.w	sl, r9, sl
 80278c6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80278ca:	fb09 f904 	mul.w	r9, r9, r4
 80278ce:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80278d2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80278d6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80278da:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80278de:	4454      	add	r4, sl
 80278e0:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80278e4:	0a24      	lsrs	r4, r4, #8
 80278e6:	0a00      	lsrs	r0, r0, #8
 80278e8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80278ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80278f0:	4304      	orrs	r4, r0
 80278f2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80278f6:	d019      	beq.n	802792c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 80278f8:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80278fc:	fb08 f909 	mul.w	r9, r8, r9
 8027900:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027904:	fb08 f803 	mul.w	r8, r8, r3
 8027908:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802790c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027910:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027914:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8027918:	444b      	add	r3, r9
 802791a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802791e:	0a1b      	lsrs	r3, r3, #8
 8027920:	0a00      	lsrs	r0, r0, #8
 8027922:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027926:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802792a:	4303      	orrs	r3, r0
 802792c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027930:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027934:	fb0c f808 	mul.w	r8, ip, r8
 8027938:	fb05 8800 	mla	r8, r5, r0, r8
 802793c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027940:	fb07 8800 	mla	r8, r7, r0, r8
 8027944:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8027948:	fb0e 8000 	mla	r0, lr, r0, r8
 802794c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027950:	0a00      	lsrs	r0, r0, #8
 8027952:	fb0c f606 	mul.w	r6, ip, r6
 8027956:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802795a:	fb05 6202 	mla	r2, r5, r2, r6
 802795e:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8027962:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8027966:	fb07 2700 	mla	r7, r7, r0, r2
 802796a:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802796e:	9b03      	ldr	r3, [sp, #12]
 8027970:	9c02      	ldr	r4, [sp, #8]
 8027972:	9d01      	ldr	r5, [sp, #4]
 8027974:	fb0e 7000 	mla	r0, lr, r0, r7
 8027978:	43da      	mvns	r2, r3
 802797a:	9b00      	ldr	r3, [sp, #0]
 802797c:	b2d2      	uxtb	r2, r2
 802797e:	0a00      	lsrs	r0, r0, #8
 8027980:	4353      	muls	r3, r2
 8027982:	4354      	muls	r4, r2
 8027984:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027988:	ea48 0000 	orr.w	r0, r8, r0
 802798c:	4355      	muls	r5, r2
 802798e:	4622      	mov	r2, r4
 8027990:	1c5c      	adds	r4, r3, #1
 8027992:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8027996:	0c03      	lsrs	r3, r0, #16
 8027998:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802799c:	4b0f      	ldr	r3, [pc, #60]	; (80279dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 802799e:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 80279a2:	1c54      	adds	r4, r2, #1
 80279a4:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80279a8:	b2c2      	uxtb	r2, r0
 80279aa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80279ae:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80279b2:	1c6a      	adds	r2, r5, #1
 80279b4:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80279b8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80279bc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80279c0:	00c0      	lsls	r0, r0, #3
 80279c2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80279c6:	4318      	orrs	r0, r3
 80279c8:	8008      	strh	r0, [r1, #0]
 80279ca:	b005      	add	sp, #20
 80279cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279d0:	0803097a 	.word	0x0803097a
 80279d4:	08030f3d 	.word	0x08030f3d
 80279d8:	08030a63 	.word	0x08030a63
 80279dc:	fffff800 	.word	0xfffff800

080279e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80279e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279e4:	ed2d 8b08 	vpush	{d8-d11}
 80279e8:	b09b      	sub	sp, #108	; 0x6c
 80279ea:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 80279ee:	9218      	str	r2, [sp, #96]	; 0x60
 80279f0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80279f2:	9116      	str	r1, [sp, #88]	; 0x58
 80279f4:	9307      	str	r3, [sp, #28]
 80279f6:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80279fa:	9019      	str	r0, [sp, #100]	; 0x64
 80279fc:	6850      	ldr	r0, [r2, #4]
 80279fe:	6812      	ldr	r2, [r2, #0]
 8027a00:	fb00 1303 	mla	r3, r0, r3, r1
 8027a04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027a08:	930a      	str	r3, [sp, #40]	; 0x28
 8027a0a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027a0c:	681b      	ldr	r3, [r3, #0]
 8027a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027a10:	eeb0 aa40 	vmov.f32	s20, s0
 8027a14:	eef0 9a60 	vmov.f32	s19, s1
 8027a18:	eeb0 9a41 	vmov.f32	s18, s2
 8027a1c:	eeb0 8a62 	vmov.f32	s16, s5
 8027a20:	eef0 8a43 	vmov.f32	s17, s6
 8027a24:	eef0 ba44 	vmov.f32	s23, s8
 8027a28:	eeb0 ba64 	vmov.f32	s22, s9
 8027a2c:	eef0 aa45 	vmov.f32	s21, s10
 8027a30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027a32:	2b00      	cmp	r3, #0
 8027a34:	dc03      	bgt.n	8027a3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027a36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027a38:	2b00      	cmp	r3, #0
 8027a3a:	f340 838a 	ble.w	8028152 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x772>
 8027a3e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027a40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027a44:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027a48:	1e48      	subs	r0, r1, #1
 8027a4a:	1e57      	subs	r7, r2, #1
 8027a4c:	9b07      	ldr	r3, [sp, #28]
 8027a4e:	2b00      	cmp	r3, #0
 8027a50:	f340 818b 	ble.w	8027d6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8027a54:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027a58:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027a5c:	d406      	bmi.n	8027a6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027a5e:	4584      	cmp	ip, r0
 8027a60:	da04      	bge.n	8027a6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027a62:	2b00      	cmp	r3, #0
 8027a64:	db02      	blt.n	8027a6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027a66:	42bb      	cmp	r3, r7
 8027a68:	f2c0 8180 	blt.w	8027d6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8027a6c:	f11c 0c01 	adds.w	ip, ip, #1
 8027a70:	f100 8170 	bmi.w	8027d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027a74:	4561      	cmp	r1, ip
 8027a76:	f2c0 816d 	blt.w	8027d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027a7a:	3301      	adds	r3, #1
 8027a7c:	f100 816a 	bmi.w	8027d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027a80:	429a      	cmp	r2, r3
 8027a82:	f2c0 8167 	blt.w	8027d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027a86:	9b07      	ldr	r3, [sp, #28]
 8027a88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027a8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8027a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027a8e:	2b00      	cmp	r3, #0
 8027a90:	f340 8189 	ble.w	8027da6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8027a94:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8027a96:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027a98:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027a9c:	689b      	ldr	r3, [r3, #8]
 8027a9e:	1422      	asrs	r2, r4, #16
 8027aa0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027aa4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027aa8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027aac:	f100 81d8 	bmi.w	8027e60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027ab0:	f103 38ff 	add.w	r8, r3, #4294967295
 8027ab4:	4542      	cmp	r2, r8
 8027ab6:	f280 81d3 	bge.w	8027e60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027aba:	f1bc 0f00 	cmp.w	ip, #0
 8027abe:	f2c0 81cf 	blt.w	8027e60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027ac2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027ac6:	45c4      	cmp	ip, r8
 8027ac8:	f280 81ca 	bge.w	8027e60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027acc:	b21b      	sxth	r3, r3
 8027ace:	fb0c 2203 	mla	r2, ip, r3, r2
 8027ad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027ad4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027ad8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027adc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027ae0:	2900      	cmp	r1, #0
 8027ae2:	f000 81a6 	beq.w	8027e32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027ae6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027aea:	950b      	str	r5, [sp, #44]	; 0x2c
 8027aec:	0e2d      	lsrs	r5, r5, #24
 8027aee:	9512      	str	r5, [sp, #72]	; 0x48
 8027af0:	b180      	cbz	r0, 8027b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8027af2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027af6:	3b01      	subs	r3, #1
 8027af8:	009b      	lsls	r3, r3, #2
 8027afa:	3304      	adds	r3, #4
 8027afc:	eb08 0c03 	add.w	ip, r8, r3
 8027b00:	f858 3003 	ldr.w	r3, [r8, r3]
 8027b04:	9308      	str	r3, [sp, #32]
 8027b06:	0e1b      	lsrs	r3, r3, #24
 8027b08:	9310      	str	r3, [sp, #64]	; 0x40
 8027b0a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8027b10:	0e1b      	lsrs	r3, r3, #24
 8027b12:	9313      	str	r3, [sp, #76]	; 0x4c
 8027b14:	b289      	uxth	r1, r1
 8027b16:	b280      	uxth	r0, r0
 8027b18:	fb01 f900 	mul.w	r9, r1, r0
 8027b1c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027b20:	0109      	lsls	r1, r1, #4
 8027b22:	eba1 0809 	sub.w	r8, r1, r9
 8027b26:	b280      	uxth	r0, r0
 8027b28:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8027b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027b2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027b30:	fa1f f888 	uxth.w	r8, r8
 8027b34:	1a09      	subs	r1, r1, r0
 8027b36:	b289      	uxth	r1, r1
 8027b38:	fb08 f303 	mul.w	r3, r8, r3
 8027b3c:	fb01 330e 	mla	r3, r1, lr, r3
 8027b40:	fb00 3305 	mla	r3, r0, r5, r3
 8027b44:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027b46:	fb09 3305 	mla	r3, r9, r5, r3
 8027b4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027b4e:	2b00      	cmp	r3, #0
 8027b50:	f000 80f7 	beq.w	8027d42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027b54:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027b58:	d01b      	beq.n	8027b92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8027b5a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027b5e:	fb0e fa0a 	mul.w	sl, lr, sl
 8027b62:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027b66:	fb0e fe02 	mul.w	lr, lr, r2
 8027b6a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027b6e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027b72:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027b76:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027b7a:	4452      	add	r2, sl
 8027b7c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027b80:	0a12      	lsrs	r2, r2, #8
 8027b82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b86:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027b8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027b8e:	ea42 020c 	orr.w	r2, r2, ip
 8027b92:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027b94:	2dff      	cmp	r5, #255	; 0xff
 8027b96:	d021      	beq.n	8027bdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8027b98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027b9a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027b9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027ba0:	fb05 fb0b 	mul.w	fp, r5, fp
 8027ba4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027ba6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027baa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027bac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027bb0:	fb05 fa0a 	mul.w	sl, r5, sl
 8027bb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027bb8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027bbc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027bc0:	44de      	add	lr, fp
 8027bc2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027bc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027bca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027bce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027bd2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027bd6:	ea4e 050a 	orr.w	r5, lr, sl
 8027bda:	950b      	str	r5, [sp, #44]	; 0x2c
 8027bdc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027bde:	2dff      	cmp	r5, #255	; 0xff
 8027be0:	d021      	beq.n	8027c26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027be2:	9d08      	ldr	r5, [sp, #32]
 8027be4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027be8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027bea:	fb05 fb0b 	mul.w	fp, r5, fp
 8027bee:	9d08      	ldr	r5, [sp, #32]
 8027bf0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027bf4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027bf6:	fb05 fa0e 	mul.w	sl, r5, lr
 8027bfa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027bfe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027c02:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027c06:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027c0a:	44de      	add	lr, fp
 8027c0c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027c10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027c14:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027c1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c20:	ea4e 050a 	orr.w	r5, lr, sl
 8027c24:	9508      	str	r5, [sp, #32]
 8027c26:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027c28:	2dff      	cmp	r5, #255	; 0xff
 8027c2a:	d021      	beq.n	8027c70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8027c2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027c2e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027c32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027c34:	fb05 fb0b 	mul.w	fp, r5, fp
 8027c38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027c3a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027c3e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027c40:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027c44:	fb05 fa0a 	mul.w	sl, r5, sl
 8027c48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027c4c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027c50:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027c54:	44de      	add	lr, fp
 8027c56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027c5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027c5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027c66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c6a:	ea4e 050a 	orr.w	r5, lr, sl
 8027c6e:	950c      	str	r5, [sp, #48]	; 0x30
 8027c70:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027c72:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027c76:	9d08      	ldr	r5, [sp, #32]
 8027c78:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027c7c:	fb08 fc0c 	mul.w	ip, r8, ip
 8027c80:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027c84:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027c88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027c8a:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027c8e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027c92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027c94:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027c98:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027c9c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027ca0:	fb08 f80e 	mul.w	r8, r8, lr
 8027ca4:	fb01 8202 	mla	r2, r1, r2, r8
 8027ca8:	9908      	ldr	r1, [sp, #32]
 8027caa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027cae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027cb0:	fb00 220a 	mla	r2, r0, sl, r2
 8027cb4:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8027cb8:	fb09 2900 	mla	r9, r9, r0, r2
 8027cbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027cc0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027cc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027cc8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027ccc:	ea4c 0c09 	orr.w	ip, ip, r9
 8027cd0:	2bff      	cmp	r3, #255	; 0xff
 8027cd2:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8027cd6:	f000 80b5 	beq.w	8027e44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8027cda:	8839      	ldrh	r1, [r7, #0]
 8027cdc:	43db      	mvns	r3, r3
 8027cde:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8027ce2:	fa5f f883 	uxtb.w	r8, r3
 8027ce6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8027cea:	fb0e fe08 	mul.w	lr, lr, r8
 8027cee:	10c8      	asrs	r0, r1, #3
 8027cf0:	00cb      	lsls	r3, r1, #3
 8027cf2:	f10e 0101 	add.w	r1, lr, #1
 8027cf6:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8027cfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8027cfe:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 8027d02:	b2db      	uxtb	r3, r3
 8027d04:	4964      	ldr	r1, [pc, #400]	; (8027e98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 8027d06:	fb03 f308 	mul.w	r3, r3, r8
 8027d0a:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 8027d0e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027d12:	1c59      	adds	r1, r3, #1
 8027d14:	fb00 f008 	mul.w	r0, r0, r8
 8027d18:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027d1c:	fa5f fc8c 	uxtb.w	ip, ip
 8027d20:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027d24:	1c43      	adds	r3, r0, #1
 8027d26:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027d2a:	b2d3      	uxtb	r3, r2
 8027d2c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027d30:	00db      	lsls	r3, r3, #3
 8027d32:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 8027d36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8027d3e:	f8a7 c000 	strh.w	ip, [r7]
 8027d42:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027d44:	441c      	add	r4, r3
 8027d46:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027d48:	441e      	add	r6, r3
 8027d4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027d4c:	3b01      	subs	r3, #1
 8027d4e:	3702      	adds	r7, #2
 8027d50:	9317      	str	r3, [sp, #92]	; 0x5c
 8027d52:	e69b      	b.n	8027a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8027d54:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027d56:	441c      	add	r4, r3
 8027d58:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027d5a:	441e      	add	r6, r3
 8027d5c:	9b07      	ldr	r3, [sp, #28]
 8027d5e:	3b01      	subs	r3, #1
 8027d60:	9307      	str	r3, [sp, #28]
 8027d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027d64:	3302      	adds	r3, #2
 8027d66:	930a      	str	r3, [sp, #40]	; 0x28
 8027d68:	e670      	b.n	8027a4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027d6a:	d023      	beq.n	8027db4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8027d6c:	9b07      	ldr	r3, [sp, #28]
 8027d6e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8027d70:	3b01      	subs	r3, #1
 8027d72:	fb00 4003 	mla	r0, r0, r3, r4
 8027d76:	1400      	asrs	r0, r0, #16
 8027d78:	f53f ae85 	bmi.w	8027a86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027d7c:	3901      	subs	r1, #1
 8027d7e:	4288      	cmp	r0, r1
 8027d80:	f6bf ae81 	bge.w	8027a86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027d84:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8027d86:	fb01 6303 	mla	r3, r1, r3, r6
 8027d8a:	141b      	asrs	r3, r3, #16
 8027d8c:	f53f ae7b 	bmi.w	8027a86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027d90:	3a01      	subs	r2, #1
 8027d92:	4293      	cmp	r3, r2
 8027d94:	f6bf ae77 	bge.w	8027a86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027d98:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027d9c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8027da0:	f1bb 0f00 	cmp.w	fp, #0
 8027da4:	dc7a      	bgt.n	8027e9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8027da6:	9b07      	ldr	r3, [sp, #28]
 8027da8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027dae:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027db2:	930a      	str	r3, [sp, #40]	; 0x28
 8027db4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027db6:	2b00      	cmp	r3, #0
 8027db8:	f340 81cb 	ble.w	8028152 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x772>
 8027dbc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027dc4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027dc8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027dca:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027dce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027dd2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027dd6:	eef0 6a48 	vmov.f32	s13, s16
 8027dda:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027dde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027de2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027de6:	ee16 4a90 	vmov	r4, s13
 8027dea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027dee:	eef0 6a68 	vmov.f32	s13, s17
 8027df2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027df6:	ee18 2a10 	vmov	r2, s16
 8027dfa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027dfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027e02:	ee18 2a90 	vmov	r2, s17
 8027e06:	932f      	str	r3, [sp, #188]	; 0xbc
 8027e08:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027e0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027e0e:	9330      	str	r3, [sp, #192]	; 0xc0
 8027e10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027e12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027e14:	3b01      	subs	r3, #1
 8027e16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e1a:	9316      	str	r3, [sp, #88]	; 0x58
 8027e1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027e1e:	bf08      	it	eq
 8027e20:	4613      	moveq	r3, r2
 8027e22:	ee16 6a90 	vmov	r6, s13
 8027e26:	9307      	str	r3, [sp, #28]
 8027e28:	eef0 8a67 	vmov.f32	s17, s15
 8027e2c:	eeb0 8a47 	vmov.f32	s16, s14
 8027e30:	e5fe      	b.n	8027a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8027e32:	2800      	cmp	r0, #0
 8027e34:	f43f ae6e 	beq.w	8027b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8027e38:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027e3c:	9308      	str	r3, [sp, #32]
 8027e3e:	0e1b      	lsrs	r3, r3, #24
 8027e40:	9310      	str	r3, [sp, #64]	; 0x40
 8027e42:	e667      	b.n	8027b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8027e44:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8027e48:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8027e4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027e50:	f022 0207 	bic.w	r2, r2, #7
 8027e54:	431a      	orrs	r2, r3
 8027e56:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8027e5a:	ea42 0c0c 	orr.w	ip, r2, ip
 8027e5e:	e76e      	b.n	8027d3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027e60:	f112 0801 	adds.w	r8, r2, #1
 8027e64:	f53f af6d 	bmi.w	8027d42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027e68:	4543      	cmp	r3, r8
 8027e6a:	f6ff af6a 	blt.w	8027d42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027e6e:	f11c 0801 	adds.w	r8, ip, #1
 8027e72:	f53f af66 	bmi.w	8027d42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027e76:	45c6      	cmp	lr, r8
 8027e78:	f6ff af63 	blt.w	8027d42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027e7c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027e80:	fa0f f28e 	sxth.w	r2, lr
 8027e84:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027e88:	9200      	str	r2, [sp, #0]
 8027e8a:	b21b      	sxth	r3, r3
 8027e8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027e8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027e90:	4639      	mov	r1, r7
 8027e92:	f7ff fc53 	bl	802773c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8027e96:	e754      	b.n	8027d42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027e98:	fffff800 	.word	0xfffff800
 8027e9c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027e9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027ea0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8027ea4:	1421      	asrs	r1, r4, #16
 8027ea6:	1433      	asrs	r3, r6, #16
 8027ea8:	fb07 1303 	mla	r3, r7, r3, r1
 8027eac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027eae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8027eb2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027eb6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027eba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027ebe:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027ec2:	2a00      	cmp	r2, #0
 8027ec4:	f000 812e 	beq.w	8028124 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8027ec8:	684d      	ldr	r5, [r1, #4]
 8027eca:	950d      	str	r5, [sp, #52]	; 0x34
 8027ecc:	0e2d      	lsrs	r5, r5, #24
 8027ece:	9514      	str	r5, [sp, #80]	; 0x50
 8027ed0:	b178      	cbz	r0, 8027ef2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027ed2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8027ed6:	3f01      	subs	r7, #1
 8027ed8:	00bf      	lsls	r7, r7, #2
 8027eda:	3704      	adds	r7, #4
 8027edc:	eb01 0e07 	add.w	lr, r1, r7
 8027ee0:	59c9      	ldr	r1, [r1, r7]
 8027ee2:	9109      	str	r1, [sp, #36]	; 0x24
 8027ee4:	0e09      	lsrs	r1, r1, #24
 8027ee6:	9111      	str	r1, [sp, #68]	; 0x44
 8027ee8:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027eec:	910e      	str	r1, [sp, #56]	; 0x38
 8027eee:	0e09      	lsrs	r1, r1, #24
 8027ef0:	9115      	str	r1, [sp, #84]	; 0x54
 8027ef2:	b292      	uxth	r2, r2
 8027ef4:	b280      	uxth	r0, r0
 8027ef6:	fb02 f900 	mul.w	r9, r2, r0
 8027efa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027efe:	0112      	lsls	r2, r2, #4
 8027f00:	eba2 0e09 	sub.w	lr, r2, r9
 8027f04:	b280      	uxth	r0, r0
 8027f06:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027f0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027f0c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027f0e:	fa1f fe8e 	uxth.w	lr, lr
 8027f12:	1a09      	subs	r1, r1, r0
 8027f14:	b289      	uxth	r1, r1
 8027f16:	fb0e f202 	mul.w	r2, lr, r2
 8027f1a:	fb01 220c 	mla	r2, r1, ip, r2
 8027f1e:	fb00 2205 	mla	r2, r0, r5, r2
 8027f22:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027f24:	fb09 2205 	mla	r2, r9, r5, r2
 8027f28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027f2c:	2a00      	cmp	r2, #0
 8027f2e:	f000 80f0 	beq.w	8028112 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x732>
 8027f32:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027f36:	d019      	beq.n	8027f6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8027f38:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027f3c:	fb0c fa0a 	mul.w	sl, ip, sl
 8027f40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027f44:	fb0c fc03 	mul.w	ip, ip, r3
 8027f48:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027f4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027f50:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027f54:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027f58:	4453      	add	r3, sl
 8027f5a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027f5e:	0a1b      	lsrs	r3, r3, #8
 8027f60:	0a3f      	lsrs	r7, r7, #8
 8027f62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027f66:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027f6a:	433b      	orrs	r3, r7
 8027f6c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027f6e:	2dff      	cmp	r5, #255	; 0xff
 8027f70:	d020      	beq.n	8027fb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8027f72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027f74:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027f78:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027f7a:	436f      	muls	r7, r5
 8027f7c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027f7e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027f82:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027f84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027f88:	fb05 fa0a 	mul.w	sl, r5, sl
 8027f8c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027f90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027f94:	44bc      	add	ip, r7
 8027f96:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027f9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027f9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027fa2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027fa6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027faa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027fae:	ea4c 050a 	orr.w	r5, ip, sl
 8027fb2:	950d      	str	r5, [sp, #52]	; 0x34
 8027fb4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027fb6:	2dff      	cmp	r5, #255	; 0xff
 8027fb8:	d020      	beq.n	8027ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8027fba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027fbc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027fc0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027fc2:	436f      	muls	r7, r5
 8027fc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027fc6:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027fca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027fcc:	fb05 fa0c 	mul.w	sl, r5, ip
 8027fd0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027fd4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027fd8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027fdc:	44bc      	add	ip, r7
 8027fde:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027fe2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027fe6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027fea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027fee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ff2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027ff6:	ea4c 050a 	orr.w	r5, ip, sl
 8027ffa:	9509      	str	r5, [sp, #36]	; 0x24
 8027ffc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027ffe:	2dff      	cmp	r5, #255	; 0xff
 8028000:	d020      	beq.n	8028044 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8028002:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028004:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028008:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802800a:	436f      	muls	r7, r5
 802800c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802800e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028012:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028014:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028018:	fb05 fa0a 	mul.w	sl, r5, sl
 802801c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028020:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028024:	44bc      	add	ip, r7
 8028026:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802802a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802802e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028032:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028036:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802803a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802803e:	ea4c 050a 	orr.w	r5, ip, sl
 8028042:	950e      	str	r5, [sp, #56]	; 0x38
 8028044:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028046:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802804a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802804c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028050:	fb0e f707 	mul.w	r7, lr, r7
 8028054:	fb01 770c 	mla	r7, r1, ip, r7
 8028058:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802805c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802805e:	fb00 770c 	mla	r7, r0, ip, r7
 8028062:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028066:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028068:	fb09 770c 	mla	r7, r9, ip, r7
 802806c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028070:	fb0e fe0c 	mul.w	lr, lr, ip
 8028074:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028078:	fb01 e303 	mla	r3, r1, r3, lr
 802807c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802807e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028082:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028084:	fb00 330a 	mla	r3, r0, sl, r3
 8028088:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802808c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8028090:	0a3f      	lsrs	r7, r7, #8
 8028092:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028096:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802809a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802809e:	ea47 070c 	orr.w	r7, r7, ip
 80280a2:	2aff      	cmp	r2, #255	; 0xff
 80280a4:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80280a8:	d045      	beq.n	8028136 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 80280aa:	f8b8 1000 	ldrh.w	r1, [r8]
 80280ae:	43d2      	mvns	r2, r2
 80280b0:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80280b4:	fa5f fe82 	uxtb.w	lr, r2
 80280b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80280bc:	fb0c fc0e 	mul.w	ip, ip, lr
 80280c0:	10c8      	asrs	r0, r1, #3
 80280c2:	00ca      	lsls	r2, r1, #3
 80280c4:	f10c 0101 	add.w	r1, ip, #1
 80280c8:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 80280cc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80280d0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80280d4:	b2d2      	uxtb	r2, r2
 80280d6:	4921      	ldr	r1, [pc, #132]	; (802815c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>)
 80280d8:	fb02 f20e 	mul.w	r2, r2, lr
 80280dc:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80280e0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80280e4:	1c51      	adds	r1, r2, #1
 80280e6:	fb00 f00e 	mul.w	r0, r0, lr
 80280ea:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80280ee:	b2ff      	uxtb	r7, r7
 80280f0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80280f4:	1c42      	adds	r2, r0, #1
 80280f6:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 80280fa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80280fe:	b2df      	uxtb	r7, r3
 8028100:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8028104:	00ff      	lsls	r7, r7, #3
 8028106:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802810a:	ea4c 0c07 	orr.w	ip, ip, r7
 802810e:	f8a8 c000 	strh.w	ip, [r8]
 8028112:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028114:	441c      	add	r4, r3
 8028116:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028118:	f108 0802 	add.w	r8, r8, #2
 802811c:	441e      	add	r6, r3
 802811e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028122:	e63d      	b.n	8027da0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8028124:	2800      	cmp	r0, #0
 8028126:	f43f aee4 	beq.w	8027ef2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802812a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802812e:	9109      	str	r1, [sp, #36]	; 0x24
 8028130:	0e09      	lsrs	r1, r1, #24
 8028132:	9111      	str	r1, [sp, #68]	; 0x44
 8028134:	e6dd      	b.n	8027ef2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8028136:	097a      	lsrs	r2, r7, #5
 8028138:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802813c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028140:	f023 0307 	bic.w	r3, r3, #7
 8028144:	4313      	orrs	r3, r2
 8028146:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802814a:	431f      	orrs	r7, r3
 802814c:	f8a8 7000 	strh.w	r7, [r8]
 8028150:	e7df      	b.n	8028112 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x732>
 8028152:	b01b      	add	sp, #108	; 0x6c
 8028154:	ecbd 8b08 	vpop	{d8-d11}
 8028158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802815c:	fffff800 	.word	0xfffff800

08028160 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8028160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028164:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8028168:	2c00      	cmp	r4, #0
 802816a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802816e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028172:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8028176:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802817a:	fb04 ce03 	mla	lr, r4, r3, ip
 802817e:	db60      	blt.n	8028242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028180:	45a1      	cmp	r9, r4
 8028182:	dd5e      	ble.n	8028242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028184:	f1bc 0f00 	cmp.w	ip, #0
 8028188:	db59      	blt.n	802823e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802818a:	45e0      	cmp	r8, ip
 802818c:	dd57      	ble.n	802823e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802818e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8028192:	f01e 0f01 	tst.w	lr, #1
 8028196:	5c16      	ldrb	r6, [r2, r0]
 8028198:	bf0c      	ite	eq
 802819a:	f006 060f 	andeq.w	r6, r6, #15
 802819e:	1136      	asrne	r6, r6, #4
 80281a0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80281a4:	b2f6      	uxtb	r6, r6
 80281a6:	f11c 0001 	adds.w	r0, ip, #1
 80281aa:	d44d      	bmi.n	8028248 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80281ac:	4580      	cmp	r8, r0
 80281ae:	dd4b      	ble.n	8028248 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80281b0:	2d00      	cmp	r5, #0
 80281b2:	d04b      	beq.n	802824c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 80281b4:	f10e 0a01 	add.w	sl, lr, #1
 80281b8:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80281bc:	f01a 0f01 	tst.w	sl, #1
 80281c0:	5c10      	ldrb	r0, [r2, r0]
 80281c2:	bf0c      	ite	eq
 80281c4:	f000 000f 	andeq.w	r0, r0, #15
 80281c8:	1100      	asrne	r0, r0, #4
 80281ca:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80281ce:	b2c0      	uxtb	r0, r0
 80281d0:	3401      	adds	r4, #1
 80281d2:	d43f      	bmi.n	8028254 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80281d4:	45a1      	cmp	r9, r4
 80281d6:	dd3d      	ble.n	8028254 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80281d8:	2f00      	cmp	r7, #0
 80281da:	f000 809e 	beq.w	802831a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 80281de:	f1bc 0f00 	cmp.w	ip, #0
 80281e2:	db35      	blt.n	8028250 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80281e4:	45e0      	cmp	r8, ip
 80281e6:	dd33      	ble.n	8028250 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80281e8:	eb03 090e 	add.w	r9, r3, lr
 80281ec:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80281f0:	f019 0f01 	tst.w	r9, #1
 80281f4:	5d14      	ldrb	r4, [r2, r4]
 80281f6:	bf0c      	ite	eq
 80281f8:	f004 040f 	andeq.w	r4, r4, #15
 80281fc:	1124      	asrne	r4, r4, #4
 80281fe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028202:	b2e4      	uxtb	r4, r4
 8028204:	f11c 0c01 	adds.w	ip, ip, #1
 8028208:	d427      	bmi.n	802825a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802820a:	45e0      	cmp	r8, ip
 802820c:	dd25      	ble.n	802825a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802820e:	b335      	cbz	r5, 802825e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8028210:	3301      	adds	r3, #1
 8028212:	449e      	add	lr, r3
 8028214:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028218:	f01e 0f01 	tst.w	lr, #1
 802821c:	5cd2      	ldrb	r2, [r2, r3]
 802821e:	bf0c      	ite	eq
 8028220:	f002 020f 	andeq.w	r2, r2, #15
 8028224:	1112      	asrne	r2, r2, #4
 8028226:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802822a:	b2d3      	uxtb	r3, r2
 802822c:	2d0f      	cmp	r5, #15
 802822e:	d917      	bls.n	8028260 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8028230:	4b3c      	ldr	r3, [pc, #240]	; (8028324 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 8028232:	4a3d      	ldr	r2, [pc, #244]	; (8028328 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8028234:	483d      	ldr	r0, [pc, #244]	; (802832c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8028236:	f240 210d 	movw	r1, #525	; 0x20d
 802823a:	f001 f8d5 	bl	80293e8 <__assert_func>
 802823e:	2600      	movs	r6, #0
 8028240:	e7b1      	b.n	80281a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8028242:	2000      	movs	r0, #0
 8028244:	4606      	mov	r6, r0
 8028246:	e7c3      	b.n	80281d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028248:	2000      	movs	r0, #0
 802824a:	e7c1      	b.n	80281d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802824c:	4628      	mov	r0, r5
 802824e:	e7bf      	b.n	80281d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028250:	2400      	movs	r4, #0
 8028252:	e7d7      	b.n	8028204 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8028254:	2300      	movs	r3, #0
 8028256:	461c      	mov	r4, r3
 8028258:	e7e8      	b.n	802822c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802825a:	2300      	movs	r3, #0
 802825c:	e7e6      	b.n	802822c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802825e:	462b      	mov	r3, r5
 8028260:	2f0f      	cmp	r7, #15
 8028262:	d8e5      	bhi.n	8028230 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8028264:	b2ad      	uxth	r5, r5
 8028266:	b2bf      	uxth	r7, r7
 8028268:	fb05 fc07 	mul.w	ip, r5, r7
 802826c:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8028270:	012d      	lsls	r5, r5, #4
 8028272:	b2bf      	uxth	r7, r7
 8028274:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8028278:	eba5 050c 	sub.w	r5, r5, ip
 802827c:	1bd2      	subs	r2, r2, r7
 802827e:	b2ad      	uxth	r5, r5
 8028280:	b292      	uxth	r2, r2
 8028282:	4368      	muls	r0, r5
 8028284:	fb06 0002 	mla	r0, r6, r2, r0
 8028288:	fb07 0404 	mla	r4, r7, r4, r0
 802828c:	fb0c 4303 	mla	r3, ip, r3, r4
 8028290:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028294:	2b00      	cmp	r3, #0
 8028296:	d03e      	beq.n	8028316 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 8028298:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 802829c:	4a24      	ldr	r2, [pc, #144]	; (8028330 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 802829e:	4343      	muls	r3, r0
 80282a0:	1c58      	adds	r0, r3, #1
 80282a2:	6816      	ldr	r6, [r2, #0]
 80282a4:	880a      	ldrh	r2, [r1, #0]
 80282a6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80282aa:	1200      	asrs	r0, r0, #8
 80282ac:	b284      	uxth	r4, r0
 80282ae:	1215      	asrs	r5, r2, #8
 80282b0:	43c0      	mvns	r0, r0
 80282b2:	b2c3      	uxtb	r3, r0
 80282b4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80282b8:	0a30      	lsrs	r0, r6, #8
 80282ba:	fb15 f503 	smulbb	r5, r5, r3
 80282be:	10d7      	asrs	r7, r2, #3
 80282c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80282c4:	fb00 5004 	mla	r0, r0, r4, r5
 80282c8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80282cc:	08f5      	lsrs	r5, r6, #3
 80282ce:	00d2      	lsls	r2, r2, #3
 80282d0:	fb17 f703 	smulbb	r7, r7, r3
 80282d4:	b2d2      	uxtb	r2, r2
 80282d6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80282da:	00f6      	lsls	r6, r6, #3
 80282dc:	fb05 7504 	mla	r5, r5, r4, r7
 80282e0:	fb12 f303 	smulbb	r3, r2, r3
 80282e4:	b2f6      	uxtb	r6, r6
 80282e6:	fb06 3304 	mla	r3, r6, r4, r3
 80282ea:	b2ad      	uxth	r5, r5
 80282ec:	b29a      	uxth	r2, r3
 80282ee:	b280      	uxth	r0, r0
 80282f0:	1c6b      	adds	r3, r5, #1
 80282f2:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80282f6:	1c44      	adds	r4, r0, #1
 80282f8:	095b      	lsrs	r3, r3, #5
 80282fa:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80282fe:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028302:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028306:	4303      	orrs	r3, r0
 8028308:	1c50      	adds	r0, r2, #1
 802830a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802830e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028312:	4313      	orrs	r3, r2
 8028314:	800b      	strh	r3, [r1, #0]
 8028316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802831a:	2d0f      	cmp	r5, #15
 802831c:	d888      	bhi.n	8028230 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802831e:	463b      	mov	r3, r7
 8028320:	463c      	mov	r4, r7
 8028322:	e79f      	b.n	8028264 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8028324:	0803097a 	.word	0x0803097a
 8028328:	08030f3d 	.word	0x08030f3d
 802832c:	08030a63 	.word	0x08030a63
 8028330:	2000b73c 	.word	0x2000b73c

08028334 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028338:	ed2d 8b08 	vpush	{d8-d11}
 802833c:	b097      	sub	sp, #92	; 0x5c
 802833e:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8028342:	9214      	str	r2, [sp, #80]	; 0x50
 8028344:	9309      	str	r3, [sp, #36]	; 0x24
 8028346:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028348:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802834c:	910d      	str	r1, [sp, #52]	; 0x34
 802834e:	930e      	str	r3, [sp, #56]	; 0x38
 8028350:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8028354:	9015      	str	r0, [sp, #84]	; 0x54
 8028356:	6850      	ldr	r0, [r2, #4]
 8028358:	6812      	ldr	r2, [r2, #0]
 802835a:	fb00 1303 	mla	r3, r0, r3, r1
 802835e:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 8028362:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028364:	689b      	ldr	r3, [r3, #8]
 8028366:	3301      	adds	r3, #1
 8028368:	f023 0301 	bic.w	r3, r3, #1
 802836c:	930a      	str	r3, [sp, #40]	; 0x28
 802836e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028370:	681f      	ldr	r7, [r3, #0]
 8028372:	eeb0 aa40 	vmov.f32	s20, s0
 8028376:	eef0 9a60 	vmov.f32	s19, s1
 802837a:	eeb0 9a41 	vmov.f32	s18, s2
 802837e:	eeb0 8a62 	vmov.f32	s16, s5
 8028382:	eef0 8a43 	vmov.f32	s17, s6
 8028386:	eef0 ba44 	vmov.f32	s23, s8
 802838a:	eeb0 ba64 	vmov.f32	s22, s9
 802838e:	eef0 aa45 	vmov.f32	s21, s10
 8028392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028394:	2b00      	cmp	r3, #0
 8028396:	dc03      	bgt.n	80283a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028398:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802839a:	2b00      	cmp	r3, #0
 802839c:	f340 826a 	ble.w	8028874 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 80283a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80283a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80283a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80283aa:	1e48      	subs	r0, r1, #1
 80283ac:	f102 3cff 	add.w	ip, r2, #4294967295
 80283b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80283b2:	2b00      	cmp	r3, #0
 80283b4:	f340 80f3 	ble.w	802859e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80283b8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80283bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80283c0:	d406      	bmi.n	80283d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80283c2:	4586      	cmp	lr, r0
 80283c4:	da04      	bge.n	80283d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80283c6:	2b00      	cmp	r3, #0
 80283c8:	db02      	blt.n	80283d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80283ca:	4563      	cmp	r3, ip
 80283cc:	f2c0 80e8 	blt.w	80285a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80283d0:	f11e 0e01 	adds.w	lr, lr, #1
 80283d4:	f100 80d9 	bmi.w	802858a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80283d8:	4571      	cmp	r1, lr
 80283da:	f2c0 80d6 	blt.w	802858a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80283de:	3301      	adds	r3, #1
 80283e0:	f100 80d3 	bmi.w	802858a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80283e4:	429a      	cmp	r2, r3
 80283e6:	f2c0 80d0 	blt.w	802858a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80283ea:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80283ee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80283f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80283f4:	46d0      	mov	r8, sl
 80283f6:	f1b9 0f00 	cmp.w	r9, #0
 80283fa:	f340 80f0 	ble.w	80285de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 80283fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028400:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028404:	1423      	asrs	r3, r4, #16
 8028406:	ea4f 4026 	mov.w	r0, r6, asr #16
 802840a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802840e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028412:	f100 8139 	bmi.w	8028688 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8028416:	f10c 3bff 	add.w	fp, ip, #4294967295
 802841a:	455b      	cmp	r3, fp
 802841c:	f280 8134 	bge.w	8028688 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8028420:	2800      	cmp	r0, #0
 8028422:	f2c0 8131 	blt.w	8028688 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8028426:	f10e 3bff 	add.w	fp, lr, #4294967295
 802842a:	4558      	cmp	r0, fp
 802842c:	f280 812c 	bge.w	8028688 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8028430:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028432:	fb00 3305 	mla	r3, r0, r5, r3
 8028436:	0858      	lsrs	r0, r3, #1
 8028438:	07dd      	lsls	r5, r3, #31
 802843a:	f817 c000 	ldrb.w	ip, [r7, r0]
 802843e:	bf54      	ite	pl
 8028440:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028444:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028448:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802844c:	fa5f fc8c 	uxtb.w	ip, ip
 8028450:	2a00      	cmp	r2, #0
 8028452:	f000 8108 	beq.w	8028666 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8028456:	1c58      	adds	r0, r3, #1
 8028458:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802845c:	07c0      	lsls	r0, r0, #31
 802845e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028462:	bf54      	ite	pl
 8028464:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028468:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802846c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028470:	fa5f f08e 	uxtb.w	r0, lr
 8028474:	9010      	str	r0, [sp, #64]	; 0x40
 8028476:	b1d1      	cbz	r1, 80284ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8028478:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802847a:	4403      	add	r3, r0
 802847c:	0858      	lsrs	r0, r3, #1
 802847e:	07dd      	lsls	r5, r3, #31
 8028480:	5c38      	ldrb	r0, [r7, r0]
 8028482:	bf54      	ite	pl
 8028484:	f000 000f 	andpl.w	r0, r0, #15
 8028488:	1100      	asrmi	r0, r0, #4
 802848a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802848e:	3301      	adds	r3, #1
 8028490:	b2c0      	uxtb	r0, r0
 8028492:	900b      	str	r0, [sp, #44]	; 0x2c
 8028494:	0858      	lsrs	r0, r3, #1
 8028496:	07dd      	lsls	r5, r3, #31
 8028498:	f817 e000 	ldrb.w	lr, [r7, r0]
 802849c:	bf54      	ite	pl
 802849e:	f00e 030f 	andpl.w	r3, lr, #15
 80284a2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80284a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80284aa:	b2db      	uxtb	r3, r3
 80284ac:	9311      	str	r3, [sp, #68]	; 0x44
 80284ae:	b292      	uxth	r2, r2
 80284b0:	b289      	uxth	r1, r1
 80284b2:	fb02 f301 	mul.w	r3, r2, r1
 80284b6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80284ba:	0112      	lsls	r2, r2, #4
 80284bc:	b289      	uxth	r1, r1
 80284be:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80284c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80284c4:	1ad2      	subs	r2, r2, r3
 80284c6:	1a40      	subs	r0, r0, r1
 80284c8:	b292      	uxth	r2, r2
 80284ca:	436a      	muls	r2, r5
 80284cc:	b280      	uxth	r0, r0
 80284ce:	fb0c 2c00 	mla	ip, ip, r0, r2
 80284d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80284d4:	fb01 c102 	mla	r1, r1, r2, ip
 80284d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80284da:	fb03 1302 	mla	r3, r3, r2, r1
 80284de:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80284e2:	2b00      	cmp	r3, #0
 80284e4:	d048      	beq.n	8028578 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80284e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80284e8:	4a78      	ldr	r2, [pc, #480]	; (80286cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 80284ea:	434b      	muls	r3, r1
 80284ec:	1c59      	adds	r1, r3, #1
 80284ee:	f8d2 e000 	ldr.w	lr, [r2]
 80284f2:	f8b8 2000 	ldrh.w	r2, [r8]
 80284f6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80284fa:	121b      	asrs	r3, r3, #8
 80284fc:	b299      	uxth	r1, r3
 80284fe:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8028502:	43db      	mvns	r3, r3
 8028504:	b2db      	uxtb	r3, r3
 8028506:	ea4f 201e 	mov.w	r0, lr, lsr #8
 802850a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802850e:	fb1c fc03 	smulbb	ip, ip, r3
 8028512:	ea4f 0be2 	mov.w	fp, r2, asr #3
 8028516:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802851a:	fb00 c001 	mla	r0, r0, r1, ip
 802851e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8028522:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8028526:	fb1b fb03 	smulbb	fp, fp, r3
 802852a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802852e:	00d2      	lsls	r2, r2, #3
 8028530:	fb0c bc01 	mla	ip, ip, r1, fp
 8028534:	b2d2      	uxtb	r2, r2
 8028536:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802853a:	fb12 f303 	smulbb	r3, r2, r3
 802853e:	fa1f fc8c 	uxth.w	ip, ip
 8028542:	fa5f fe8e 	uxtb.w	lr, lr
 8028546:	b280      	uxth	r0, r0
 8028548:	fb0e 3101 	mla	r1, lr, r1, r3
 802854c:	f10c 0201 	add.w	r2, ip, #1
 8028550:	b289      	uxth	r1, r1
 8028552:	1c43      	adds	r3, r0, #1
 8028554:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8028558:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802855c:	0952      	lsrs	r2, r2, #5
 802855e:	1c4b      	adds	r3, r1, #1
 8028560:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028564:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028568:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802856c:	4310      	orrs	r0, r2
 802856e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028572:	4308      	orrs	r0, r1
 8028574:	f8a8 0000 	strh.w	r0, [r8]
 8028578:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802857a:	441c      	add	r4, r3
 802857c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802857e:	f108 0802 	add.w	r8, r8, #2
 8028582:	441e      	add	r6, r3
 8028584:	f109 39ff 	add.w	r9, r9, #4294967295
 8028588:	e735      	b.n	80283f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802858a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802858c:	441c      	add	r4, r3
 802858e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028590:	441e      	add	r6, r3
 8028592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028594:	3b01      	subs	r3, #1
 8028596:	9309      	str	r3, [sp, #36]	; 0x24
 8028598:	f10a 0a02 	add.w	sl, sl, #2
 802859c:	e708      	b.n	80283b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802859e:	d023      	beq.n	80285e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80285a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80285a2:	982b      	ldr	r0, [sp, #172]	; 0xac
 80285a4:	3b01      	subs	r3, #1
 80285a6:	fb00 4003 	mla	r0, r0, r3, r4
 80285aa:	1400      	asrs	r0, r0, #16
 80285ac:	f53f af1d 	bmi.w	80283ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80285b0:	3901      	subs	r1, #1
 80285b2:	4288      	cmp	r0, r1
 80285b4:	f6bf af19 	bge.w	80283ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80285b8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80285ba:	fb01 6303 	mla	r3, r1, r3, r6
 80285be:	141b      	asrs	r3, r3, #16
 80285c0:	f53f af13 	bmi.w	80283ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80285c4:	3a01      	subs	r2, #1
 80285c6:	4293      	cmp	r3, r2
 80285c8:	f6bf af0f 	bge.w	80283ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80285cc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80285d0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80285d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80285d6:	46d1      	mov	r9, sl
 80285d8:	f1bb 0f00 	cmp.w	fp, #0
 80285dc:	dc78      	bgt.n	80286d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80285de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80285e0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80285e4:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 80285e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80285ea:	2b00      	cmp	r3, #0
 80285ec:	f340 8142 	ble.w	8028874 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 80285f0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80285f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80285f8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80285fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80285fe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028602:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028606:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802860a:	eef0 6a48 	vmov.f32	s13, s16
 802860e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028612:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028616:	ee37 8a48 	vsub.f32	s16, s14, s16
 802861a:	ee16 4a90 	vmov	r4, s13
 802861e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028622:	eef0 6a68 	vmov.f32	s13, s17
 8028626:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802862a:	ee18 2a10 	vmov	r2, s16
 802862e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028632:	fb92 f3f3 	sdiv	r3, r2, r3
 8028636:	ee18 2a90 	vmov	r2, s17
 802863a:	932b      	str	r3, [sp, #172]	; 0xac
 802863c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802863e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028642:	932c      	str	r3, [sp, #176]	; 0xb0
 8028644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028646:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028648:	3b01      	subs	r3, #1
 802864a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802864e:	930d      	str	r3, [sp, #52]	; 0x34
 8028650:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028652:	bf08      	it	eq
 8028654:	4613      	moveq	r3, r2
 8028656:	ee16 6a90 	vmov	r6, s13
 802865a:	9309      	str	r3, [sp, #36]	; 0x24
 802865c:	eef0 8a67 	vmov.f32	s17, s15
 8028660:	eeb0 8a47 	vmov.f32	s16, s14
 8028664:	e695      	b.n	8028392 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8028666:	2900      	cmp	r1, #0
 8028668:	f43f af21 	beq.w	80284ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 802866c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802866e:	4418      	add	r0, r3
 8028670:	0843      	lsrs	r3, r0, #1
 8028672:	07c0      	lsls	r0, r0, #31
 8028674:	5cfb      	ldrb	r3, [r7, r3]
 8028676:	bf54      	ite	pl
 8028678:	f003 030f 	andpl.w	r3, r3, #15
 802867c:	111b      	asrmi	r3, r3, #4
 802867e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028682:	b2db      	uxtb	r3, r3
 8028684:	930b      	str	r3, [sp, #44]	; 0x2c
 8028686:	e712      	b.n	80284ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8028688:	f113 0b01 	adds.w	fp, r3, #1
 802868c:	f53f af74 	bmi.w	8028578 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8028690:	45dc      	cmp	ip, fp
 8028692:	f6ff af71 	blt.w	8028578 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8028696:	f110 0b01 	adds.w	fp, r0, #1
 802869a:	f53f af6d 	bmi.w	8028578 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802869e:	45de      	cmp	lr, fp
 80286a0:	f6ff af6a 	blt.w	8028578 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80286a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80286a6:	9302      	str	r3, [sp, #8]
 80286a8:	fa0f f38e 	sxth.w	r3, lr
 80286ac:	9301      	str	r3, [sp, #4]
 80286ae:	fa0f f38c 	sxth.w	r3, ip
 80286b2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80286b6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80286ba:	9300      	str	r3, [sp, #0]
 80286bc:	463a      	mov	r2, r7
 80286be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80286c0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80286c2:	4641      	mov	r1, r8
 80286c4:	f7ff fd4c 	bl	8028160 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80286c8:	e756      	b.n	8028578 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80286ca:	bf00      	nop
 80286cc:	2000b73c 	.word	0x2000b73c
 80286d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80286d2:	1422      	asrs	r2, r4, #16
 80286d4:	1433      	asrs	r3, r6, #16
 80286d6:	fb05 2303 	mla	r3, r5, r3, r2
 80286da:	085a      	lsrs	r2, r3, #1
 80286dc:	07dd      	lsls	r5, r3, #31
 80286de:	5cba      	ldrb	r2, [r7, r2]
 80286e0:	bf54      	ite	pl
 80286e2:	f002 020f 	andpl.w	r2, r2, #15
 80286e6:	1112      	asrmi	r2, r2, #4
 80286e8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80286ec:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80286f0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80286f4:	b2d2      	uxtb	r2, r2
 80286f6:	2900      	cmp	r1, #0
 80286f8:	f000 80a8 	beq.w	802884c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80286fc:	f103 0e01 	add.w	lr, r3, #1
 8028700:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028704:	f01e 0f01 	tst.w	lr, #1
 8028708:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802870c:	bf0c      	ite	eq
 802870e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028712:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028716:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802871a:	fa5f f58c 	uxtb.w	r5, ip
 802871e:	9512      	str	r5, [sp, #72]	; 0x48
 8028720:	b300      	cbz	r0, 8028764 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 8028722:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028724:	442b      	add	r3, r5
 8028726:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802872a:	07dd      	lsls	r5, r3, #31
 802872c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028730:	bf54      	ite	pl
 8028732:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028736:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802873a:	3301      	adds	r3, #1
 802873c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028740:	fa5f f58c 	uxtb.w	r5, ip
 8028744:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028748:	950c      	str	r5, [sp, #48]	; 0x30
 802874a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802874e:	07dd      	lsls	r5, r3, #31
 8028750:	bf54      	ite	pl
 8028752:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028756:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802875a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802875e:	fa5f f38c 	uxtb.w	r3, ip
 8028762:	9313      	str	r3, [sp, #76]	; 0x4c
 8028764:	b289      	uxth	r1, r1
 8028766:	b280      	uxth	r0, r0
 8028768:	fb01 f300 	mul.w	r3, r1, r0
 802876c:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028770:	0109      	lsls	r1, r1, #4
 8028772:	b280      	uxth	r0, r0
 8028774:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8028778:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802877a:	1ac9      	subs	r1, r1, r3
 802877c:	ebac 0c00 	sub.w	ip, ip, r0
 8028780:	b289      	uxth	r1, r1
 8028782:	4369      	muls	r1, r5
 8028784:	fa1f fc8c 	uxth.w	ip, ip
 8028788:	fb02 120c 	mla	r2, r2, ip, r1
 802878c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802878e:	fb00 2001 	mla	r0, r0, r1, r2
 8028792:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028794:	fb03 0302 	mla	r3, r3, r2, r0
 8028798:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802879c:	2b00      	cmp	r3, #0
 802879e:	d04c      	beq.n	802883a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80287a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80287a2:	4a37      	ldr	r2, [pc, #220]	; (8028880 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 80287a4:	434b      	muls	r3, r1
 80287a6:	1c59      	adds	r1, r3, #1
 80287a8:	f8d2 e000 	ldr.w	lr, [r2]
 80287ac:	f8b9 2000 	ldrh.w	r2, [r9]
 80287b0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80287b4:	121b      	asrs	r3, r3, #8
 80287b6:	b299      	uxth	r1, r3
 80287b8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80287bc:	43db      	mvns	r3, r3
 80287be:	b2db      	uxtb	r3, r3
 80287c0:	ea4f 201e 	mov.w	r0, lr, lsr #8
 80287c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80287c8:	fb1c fc03 	smulbb	ip, ip, r3
 80287cc:	ea4f 08e2 	mov.w	r8, r2, asr #3
 80287d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80287d4:	fb00 c001 	mla	r0, r0, r1, ip
 80287d8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80287dc:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 80287e0:	fb18 f803 	smulbb	r8, r8, r3
 80287e4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80287e8:	00d2      	lsls	r2, r2, #3
 80287ea:	fb0c 8c01 	mla	ip, ip, r1, r8
 80287ee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80287f2:	b2d2      	uxtb	r2, r2
 80287f4:	fa1f fc8c 	uxth.w	ip, ip
 80287f8:	fa5f fe8e 	uxtb.w	lr, lr
 80287fc:	fb12 f203 	smulbb	r2, r2, r3
 8028800:	b280      	uxth	r0, r0
 8028802:	fb0e 2201 	mla	r2, lr, r1, r2
 8028806:	f10c 0801 	add.w	r8, ip, #1
 802880a:	b292      	uxth	r2, r2
 802880c:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8028810:	f100 0801 	add.w	r8, r0, #1
 8028814:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028818:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 802881c:	1c51      	adds	r1, r2, #1
 802881e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028822:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028826:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802882a:	ea4c 0c00 	orr.w	ip, ip, r0
 802882e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028832:	ea4c 0c02 	orr.w	ip, ip, r2
 8028836:	f8a9 c000 	strh.w	ip, [r9]
 802883a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802883c:	441c      	add	r4, r3
 802883e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028840:	f109 0902 	add.w	r9, r9, #2
 8028844:	441e      	add	r6, r3
 8028846:	f10b 3bff 	add.w	fp, fp, #4294967295
 802884a:	e6c5      	b.n	80285d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802884c:	2800      	cmp	r0, #0
 802884e:	d089      	beq.n	8028764 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 8028850:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028852:	442b      	add	r3, r5
 8028854:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028858:	07db      	lsls	r3, r3, #31
 802885a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802885e:	bf54      	ite	pl
 8028860:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028864:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028868:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802886c:	fa5f f38c 	uxtb.w	r3, ip
 8028870:	930c      	str	r3, [sp, #48]	; 0x30
 8028872:	e777      	b.n	8028764 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 8028874:	b017      	add	sp, #92	; 0x5c
 8028876:	ecbd 8b08 	vpop	{d8-d11}
 802887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802887e:	bf00      	nop
 8028880:	2000b73c 	.word	0x2000b73c

08028884 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8028884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028888:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802888c:	2c00      	cmp	r4, #0
 802888e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028892:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028896:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802889a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802889e:	fb04 ce03 	mla	lr, r4, r3, ip
 80288a2:	db60      	blt.n	8028966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80288a4:	45a1      	cmp	r9, r4
 80288a6:	dd5e      	ble.n	8028966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80288a8:	f1bc 0f00 	cmp.w	ip, #0
 80288ac:	db59      	blt.n	8028962 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80288ae:	45e0      	cmp	r8, ip
 80288b0:	dd57      	ble.n	8028962 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80288b2:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80288b6:	f01e 0f01 	tst.w	lr, #1
 80288ba:	5c16      	ldrb	r6, [r2, r0]
 80288bc:	bf0c      	ite	eq
 80288be:	f006 060f 	andeq.w	r6, r6, #15
 80288c2:	1136      	asrne	r6, r6, #4
 80288c4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80288c8:	b2f6      	uxtb	r6, r6
 80288ca:	f11c 0001 	adds.w	r0, ip, #1
 80288ce:	d44d      	bmi.n	802896c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80288d0:	4580      	cmp	r8, r0
 80288d2:	dd4b      	ble.n	802896c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80288d4:	2d00      	cmp	r5, #0
 80288d6:	d04b      	beq.n	8028970 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 80288d8:	f10e 0a01 	add.w	sl, lr, #1
 80288dc:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80288e0:	f01a 0f01 	tst.w	sl, #1
 80288e4:	5c10      	ldrb	r0, [r2, r0]
 80288e6:	bf0c      	ite	eq
 80288e8:	f000 000f 	andeq.w	r0, r0, #15
 80288ec:	1100      	asrne	r0, r0, #4
 80288ee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80288f2:	b2c0      	uxtb	r0, r0
 80288f4:	3401      	adds	r4, #1
 80288f6:	d43f      	bmi.n	8028978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80288f8:	45a1      	cmp	r9, r4
 80288fa:	dd3d      	ble.n	8028978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80288fc:	2f00      	cmp	r7, #0
 80288fe:	f000 8097 	beq.w	8028a30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 8028902:	f1bc 0f00 	cmp.w	ip, #0
 8028906:	db35      	blt.n	8028974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8028908:	45e0      	cmp	r8, ip
 802890a:	dd33      	ble.n	8028974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802890c:	eb03 090e 	add.w	r9, r3, lr
 8028910:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8028914:	f019 0f01 	tst.w	r9, #1
 8028918:	5d14      	ldrb	r4, [r2, r4]
 802891a:	bf0c      	ite	eq
 802891c:	f004 040f 	andeq.w	r4, r4, #15
 8028920:	1124      	asrne	r4, r4, #4
 8028922:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028926:	b2e4      	uxtb	r4, r4
 8028928:	f11c 0c01 	adds.w	ip, ip, #1
 802892c:	d427      	bmi.n	802897e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802892e:	45e0      	cmp	r8, ip
 8028930:	dd25      	ble.n	802897e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8028932:	b335      	cbz	r5, 8028982 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8028934:	3301      	adds	r3, #1
 8028936:	449e      	add	lr, r3
 8028938:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802893c:	f01e 0f01 	tst.w	lr, #1
 8028940:	5cd2      	ldrb	r2, [r2, r3]
 8028942:	bf0c      	ite	eq
 8028944:	f002 020f 	andeq.w	r2, r2, #15
 8028948:	1112      	asrne	r2, r2, #4
 802894a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802894e:	b2d3      	uxtb	r3, r2
 8028950:	2d0f      	cmp	r5, #15
 8028952:	d917      	bls.n	8028984 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8028954:	4b39      	ldr	r3, [pc, #228]	; (8028a3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8028956:	4a3a      	ldr	r2, [pc, #232]	; (8028a40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8028958:	483a      	ldr	r0, [pc, #232]	; (8028a44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 802895a:	f240 210d 	movw	r1, #525	; 0x20d
 802895e:	f000 fd43 	bl	80293e8 <__assert_func>
 8028962:	2600      	movs	r6, #0
 8028964:	e7b1      	b.n	80288ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8028966:	2000      	movs	r0, #0
 8028968:	4606      	mov	r6, r0
 802896a:	e7c3      	b.n	80288f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802896c:	2000      	movs	r0, #0
 802896e:	e7c1      	b.n	80288f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8028970:	4628      	mov	r0, r5
 8028972:	e7bf      	b.n	80288f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8028974:	2400      	movs	r4, #0
 8028976:	e7d7      	b.n	8028928 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8028978:	2300      	movs	r3, #0
 802897a:	461c      	mov	r4, r3
 802897c:	e7e8      	b.n	8028950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802897e:	2300      	movs	r3, #0
 8028980:	e7e6      	b.n	8028950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8028982:	462b      	mov	r3, r5
 8028984:	2f0f      	cmp	r7, #15
 8028986:	d8e5      	bhi.n	8028954 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8028988:	b2ad      	uxth	r5, r5
 802898a:	b2bf      	uxth	r7, r7
 802898c:	fb05 fc07 	mul.w	ip, r5, r7
 8028990:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8028994:	012d      	lsls	r5, r5, #4
 8028996:	b2bf      	uxth	r7, r7
 8028998:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802899c:	eba5 050c 	sub.w	r5, r5, ip
 80289a0:	1bd2      	subs	r2, r2, r7
 80289a2:	b2ad      	uxth	r5, r5
 80289a4:	b292      	uxth	r2, r2
 80289a6:	4368      	muls	r0, r5
 80289a8:	fb06 0002 	mla	r0, r6, r2, r0
 80289ac:	fb07 0404 	mla	r4, r7, r4, r0
 80289b0:	fb0c 4303 	mla	r3, ip, r3, r4
 80289b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80289b8:	2b00      	cmp	r3, #0
 80289ba:	d037      	beq.n	8028a2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 80289bc:	4a22      	ldr	r2, [pc, #136]	; (8028a48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 80289be:	6816      	ldr	r6, [r2, #0]
 80289c0:	880a      	ldrh	r2, [r1, #0]
 80289c2:	b298      	uxth	r0, r3
 80289c4:	1215      	asrs	r5, r2, #8
 80289c6:	43db      	mvns	r3, r3
 80289c8:	b2db      	uxtb	r3, r3
 80289ca:	0a34      	lsrs	r4, r6, #8
 80289cc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80289d0:	fb15 f503 	smulbb	r5, r5, r3
 80289d4:	10d7      	asrs	r7, r2, #3
 80289d6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80289da:	fb04 5400 	mla	r4, r4, r0, r5
 80289de:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80289e2:	08f5      	lsrs	r5, r6, #3
 80289e4:	fb17 f703 	smulbb	r7, r7, r3
 80289e8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80289ec:	00d2      	lsls	r2, r2, #3
 80289ee:	fb05 7500 	mla	r5, r5, r0, r7
 80289f2:	b2d2      	uxtb	r2, r2
 80289f4:	00f6      	lsls	r6, r6, #3
 80289f6:	fb12 f303 	smulbb	r3, r2, r3
 80289fa:	b2ad      	uxth	r5, r5
 80289fc:	b2f6      	uxtb	r6, r6
 80289fe:	b2a4      	uxth	r4, r4
 8028a00:	fb06 3000 	mla	r0, r6, r0, r3
 8028a04:	1c6b      	adds	r3, r5, #1
 8028a06:	b280      	uxth	r0, r0
 8028a08:	1c62      	adds	r2, r4, #1
 8028a0a:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8028a0e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028a12:	095b      	lsrs	r3, r3, #5
 8028a14:	1c42      	adds	r2, r0, #1
 8028a16:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028a1a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028a1e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028a22:	4323      	orrs	r3, r4
 8028a24:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028a28:	4303      	orrs	r3, r0
 8028a2a:	800b      	strh	r3, [r1, #0]
 8028a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028a30:	2d0f      	cmp	r5, #15
 8028a32:	d88f      	bhi.n	8028954 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8028a34:	463b      	mov	r3, r7
 8028a36:	463c      	mov	r4, r7
 8028a38:	e7a6      	b.n	8028988 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8028a3a:	bf00      	nop
 8028a3c:	0803097a 	.word	0x0803097a
 8028a40:	08030f3d 	.word	0x08030f3d
 8028a44:	08030a63 	.word	0x08030a63
 8028a48:	2000b73c 	.word	0x2000b73c

08028a4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a50:	ed2d 8b08 	vpush	{d8-d11}
 8028a54:	b093      	sub	sp, #76	; 0x4c
 8028a56:	461d      	mov	r5, r3
 8028a58:	920c      	str	r2, [sp, #48]	; 0x30
 8028a5a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8028a5c:	9107      	str	r1, [sp, #28]
 8028a5e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8028a62:	9011      	str	r0, [sp, #68]	; 0x44
 8028a64:	6850      	ldr	r0, [r2, #4]
 8028a66:	6812      	ldr	r2, [r2, #0]
 8028a68:	fb00 1303 	mla	r3, r0, r3, r1
 8028a6c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028a70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028a72:	689b      	ldr	r3, [r3, #8]
 8028a74:	3301      	adds	r3, #1
 8028a76:	f023 0301 	bic.w	r3, r3, #1
 8028a7a:	9306      	str	r3, [sp, #24]
 8028a7c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028a7e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028a82:	681f      	ldr	r7, [r3, #0]
 8028a84:	eeb0 aa40 	vmov.f32	s20, s0
 8028a88:	eef0 9a60 	vmov.f32	s19, s1
 8028a8c:	eeb0 9a41 	vmov.f32	s18, s2
 8028a90:	eeb0 8a62 	vmov.f32	s16, s5
 8028a94:	eef0 8a43 	vmov.f32	s17, s6
 8028a98:	eef0 ba44 	vmov.f32	s23, s8
 8028a9c:	eeb0 ba64 	vmov.f32	s22, s9
 8028aa0:	eef0 aa45 	vmov.f32	s21, s10
 8028aa4:	9b07      	ldr	r3, [sp, #28]
 8028aa6:	2b00      	cmp	r3, #0
 8028aa8:	dc03      	bgt.n	8028ab2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028aac:	2b00      	cmp	r3, #0
 8028aae:	f340 8261 	ble.w	8028f74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8028ab2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028ab4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028ab8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028abc:	1e48      	subs	r0, r1, #1
 8028abe:	f102 3cff 	add.w	ip, r2, #4294967295
 8028ac2:	2d00      	cmp	r5, #0
 8028ac4:	f340 80ef 	ble.w	8028ca6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028ac8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028acc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028ad0:	d406      	bmi.n	8028ae0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028ad2:	4586      	cmp	lr, r0
 8028ad4:	da04      	bge.n	8028ae0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028ad6:	2b00      	cmp	r3, #0
 8028ad8:	db02      	blt.n	8028ae0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028ada:	4563      	cmp	r3, ip
 8028adc:	f2c0 80e4 	blt.w	8028ca8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8028ae0:	f11e 0e01 	adds.w	lr, lr, #1
 8028ae4:	f100 80d7 	bmi.w	8028c96 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8028ae8:	4571      	cmp	r1, lr
 8028aea:	f2c0 80d4 	blt.w	8028c96 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8028aee:	3301      	adds	r3, #1
 8028af0:	f100 80d1 	bmi.w	8028c96 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8028af4:	429a      	cmp	r2, r3
 8028af6:	f2c0 80ce 	blt.w	8028c96 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8028afa:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8028afe:	9509      	str	r5, [sp, #36]	; 0x24
 8028b00:	46c8      	mov	r8, r9
 8028b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b04:	2b00      	cmp	r3, #0
 8028b06:	f340 80ec 	ble.w	8028ce2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8028b0a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8028b0e:	9308      	str	r3, [sp, #32]
 8028b10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028b12:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028b16:	1423      	asrs	r3, r4, #16
 8028b18:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028b1c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028b20:	f100 813b 	bmi.w	8028d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028b24:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028b28:	455b      	cmp	r3, fp
 8028b2a:	f280 8136 	bge.w	8028d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028b2e:	2800      	cmp	r0, #0
 8028b30:	f2c0 8133 	blt.w	8028d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028b34:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028b38:	4558      	cmp	r0, fp
 8028b3a:	f280 812e 	bge.w	8028d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028b3e:	9a06      	ldr	r2, [sp, #24]
 8028b40:	fb00 3302 	mla	r3, r0, r2, r3
 8028b44:	0858      	lsrs	r0, r3, #1
 8028b46:	07da      	lsls	r2, r3, #31
 8028b48:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028b4c:	9a08      	ldr	r2, [sp, #32]
 8028b4e:	bf54      	ite	pl
 8028b50:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028b54:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028b58:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028b5c:	fa5f fc8c 	uxtb.w	ip, ip
 8028b60:	2a00      	cmp	r2, #0
 8028b62:	f000 8101 	beq.w	8028d68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8028b66:	1c58      	adds	r0, r3, #1
 8028b68:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028b6c:	07c0      	lsls	r0, r0, #31
 8028b6e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028b72:	bf54      	ite	pl
 8028b74:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028b78:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028b7c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028b80:	fa5f fe8e 	uxtb.w	lr, lr
 8028b84:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8028b88:	b1b9      	cbz	r1, 8028bba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8028b8a:	4453      	add	r3, sl
 8028b8c:	0858      	lsrs	r0, r3, #1
 8028b8e:	07da      	lsls	r2, r3, #31
 8028b90:	5c38      	ldrb	r0, [r7, r0]
 8028b92:	bf54      	ite	pl
 8028b94:	f000 000f 	andpl.w	r0, r0, #15
 8028b98:	1100      	asrmi	r0, r0, #4
 8028b9a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028b9e:	b2c0      	uxtb	r0, r0
 8028ba0:	900a      	str	r0, [sp, #40]	; 0x28
 8028ba2:	1c58      	adds	r0, r3, #1
 8028ba4:	0843      	lsrs	r3, r0, #1
 8028ba6:	07c2      	lsls	r2, r0, #31
 8028ba8:	5cfb      	ldrb	r3, [r7, r3]
 8028baa:	bf54      	ite	pl
 8028bac:	f003 030f 	andpl.w	r3, r3, #15
 8028bb0:	111b      	asrmi	r3, r3, #4
 8028bb2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028bb6:	b2db      	uxtb	r3, r3
 8028bb8:	930e      	str	r3, [sp, #56]	; 0x38
 8028bba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028bbe:	b289      	uxth	r1, r1
 8028bc0:	fb02 f301 	mul.w	r3, r2, r1
 8028bc4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028bc8:	0112      	lsls	r2, r2, #4
 8028bca:	b289      	uxth	r1, r1
 8028bcc:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028bd0:	1a40      	subs	r0, r0, r1
 8028bd2:	fa1f fe80 	uxth.w	lr, r0
 8028bd6:	1ad2      	subs	r2, r2, r3
 8028bd8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028bda:	b292      	uxth	r2, r2
 8028bdc:	4342      	muls	r2, r0
 8028bde:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028be4:	fb01 c102 	mla	r1, r1, r2, ip
 8028be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028bea:	fb03 1302 	mla	r3, r3, r2, r1
 8028bee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028bf2:	2b00      	cmp	r3, #0
 8028bf4:	d045      	beq.n	8028c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028bf6:	4a79      	ldr	r2, [pc, #484]	; (8028ddc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 8028bf8:	6811      	ldr	r1, [r2, #0]
 8028bfa:	2bff      	cmp	r3, #255	; 0xff
 8028bfc:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8028c00:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8028c04:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8028c08:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028c0c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028c10:	b2c9      	uxtb	r1, r1
 8028c12:	f000 80ba 	beq.w	8028d8a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028c16:	f8b8 c000 	ldrh.w	ip, [r8]
 8028c1a:	fa1f fb83 	uxth.w	fp, r3
 8028c1e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028c22:	43db      	mvns	r3, r3
 8028c24:	b2db      	uxtb	r3, r3
 8028c26:	fb1e fe0b 	smulbb	lr, lr, fp
 8028c2a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028c2e:	fb00 e003 	mla	r0, r0, r3, lr
 8028c32:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8028c36:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8028c3a:	fb12 f20b 	smulbb	r2, r2, fp
 8028c3e:	fb0e 2203 	mla	r2, lr, r3, r2
 8028c42:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028c46:	b292      	uxth	r2, r2
 8028c48:	fb11 f10b 	smulbb	r1, r1, fp
 8028c4c:	fa5f fc8c 	uxtb.w	ip, ip
 8028c50:	b280      	uxth	r0, r0
 8028c52:	fb0c 1303 	mla	r3, ip, r3, r1
 8028c56:	f102 0e01 	add.w	lr, r2, #1
 8028c5a:	b29b      	uxth	r3, r3
 8028c5c:	1c41      	adds	r1, r0, #1
 8028c5e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8028c62:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028c66:	0952      	lsrs	r2, r2, #5
 8028c68:	1c59      	adds	r1, r3, #1
 8028c6a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028c6e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028c72:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028c76:	4310      	orrs	r0, r2
 8028c78:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028c7c:	4318      	orrs	r0, r3
 8028c7e:	f8a8 0000 	strh.w	r0, [r8]
 8028c82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028c84:	441c      	add	r4, r3
 8028c86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028c88:	441e      	add	r6, r3
 8028c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028c8c:	3b01      	subs	r3, #1
 8028c8e:	f108 0802 	add.w	r8, r8, #2
 8028c92:	9309      	str	r3, [sp, #36]	; 0x24
 8028c94:	e735      	b.n	8028b02 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028c96:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028c98:	441c      	add	r4, r3
 8028c9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028c9c:	3d01      	subs	r5, #1
 8028c9e:	441e      	add	r6, r3
 8028ca0:	f109 0902 	add.w	r9, r9, #2
 8028ca4:	e70d      	b.n	8028ac2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028ca6:	d020      	beq.n	8028cea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8028ca8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028caa:	1e6b      	subs	r3, r5, #1
 8028cac:	fb00 4003 	mla	r0, r0, r3, r4
 8028cb0:	1400      	asrs	r0, r0, #16
 8028cb2:	f53f af22 	bmi.w	8028afa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028cb6:	3901      	subs	r1, #1
 8028cb8:	4288      	cmp	r0, r1
 8028cba:	f6bf af1e 	bge.w	8028afa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028cbe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028cc0:	fb01 6303 	mla	r3, r1, r3, r6
 8028cc4:	141b      	asrs	r3, r3, #16
 8028cc6:	f53f af18 	bmi.w	8028afa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028cca:	3a01      	subs	r2, #1
 8028ccc:	4293      	cmp	r3, r2
 8028cce:	f6bf af14 	bge.w	8028afa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028cd2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8028cd6:	9308      	str	r3, [sp, #32]
 8028cd8:	46aa      	mov	sl, r5
 8028cda:	46c8      	mov	r8, r9
 8028cdc:	f1ba 0f00 	cmp.w	sl, #0
 8028ce0:	dc7e      	bgt.n	8028de0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028ce2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028ce6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028cea:	9b07      	ldr	r3, [sp, #28]
 8028cec:	2b00      	cmp	r3, #0
 8028cee:	f340 8141 	ble.w	8028f74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8028cf2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028cfa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028d00:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028d04:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028d08:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028d0c:	eef0 6a48 	vmov.f32	s13, s16
 8028d10:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028d14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d18:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028d1c:	ee16 4a90 	vmov	r4, s13
 8028d20:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028d24:	eef0 6a68 	vmov.f32	s13, s17
 8028d28:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028d2c:	ee18 2a10 	vmov	r2, s16
 8028d30:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028d34:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d38:	ee18 2a90 	vmov	r2, s17
 8028d3c:	9327      	str	r3, [sp, #156]	; 0x9c
 8028d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028d40:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d44:	9328      	str	r3, [sp, #160]	; 0xa0
 8028d46:	9b07      	ldr	r3, [sp, #28]
 8028d48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028d4a:	3b01      	subs	r3, #1
 8028d4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d50:	9307      	str	r3, [sp, #28]
 8028d52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028d54:	ee16 6a90 	vmov	r6, s13
 8028d58:	bf14      	ite	ne
 8028d5a:	461d      	movne	r5, r3
 8028d5c:	4615      	moveq	r5, r2
 8028d5e:	eef0 8a67 	vmov.f32	s17, s15
 8028d62:	eeb0 8a47 	vmov.f32	s16, s14
 8028d66:	e69d      	b.n	8028aa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028d68:	2900      	cmp	r1, #0
 8028d6a:	f43f af26 	beq.w	8028bba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8028d6e:	eb0a 0003 	add.w	r0, sl, r3
 8028d72:	0843      	lsrs	r3, r0, #1
 8028d74:	07c0      	lsls	r0, r0, #31
 8028d76:	5cfb      	ldrb	r3, [r7, r3]
 8028d78:	bf54      	ite	pl
 8028d7a:	f003 030f 	andpl.w	r3, r3, #15
 8028d7e:	111b      	asrmi	r3, r3, #4
 8028d80:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028d84:	b2db      	uxtb	r3, r3
 8028d86:	930a      	str	r3, [sp, #40]	; 0x28
 8028d88:	e717      	b.n	8028bba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8028d8a:	00d2      	lsls	r2, r2, #3
 8028d8c:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8028d90:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8028d94:	f8a8 1000 	strh.w	r1, [r8]
 8028d98:	e773      	b.n	8028c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028d9a:	f113 0b01 	adds.w	fp, r3, #1
 8028d9e:	f53f af70 	bmi.w	8028c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028da2:	45dc      	cmp	ip, fp
 8028da4:	f6ff af6d 	blt.w	8028c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028da8:	f110 0b01 	adds.w	fp, r0, #1
 8028dac:	f53f af69 	bmi.w	8028c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028db0:	45de      	cmp	lr, fp
 8028db2:	f6ff af66 	blt.w	8028c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028db6:	9a08      	ldr	r2, [sp, #32]
 8028db8:	9302      	str	r3, [sp, #8]
 8028dba:	fa0f f38e 	sxth.w	r3, lr
 8028dbe:	9301      	str	r3, [sp, #4]
 8028dc0:	fa0f f38c 	sxth.w	r3, ip
 8028dc4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028dc8:	9105      	str	r1, [sp, #20]
 8028dca:	9300      	str	r3, [sp, #0]
 8028dcc:	463a      	mov	r2, r7
 8028dce:	4653      	mov	r3, sl
 8028dd0:	4641      	mov	r1, r8
 8028dd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028dd4:	f7ff fd56 	bl	8028884 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028dd8:	e753      	b.n	8028c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028dda:	bf00      	nop
 8028ddc:	2000b73c 	.word	0x2000b73c
 8028de0:	9906      	ldr	r1, [sp, #24]
 8028de2:	1422      	asrs	r2, r4, #16
 8028de4:	1433      	asrs	r3, r6, #16
 8028de6:	fb01 2303 	mla	r3, r1, r3, r2
 8028dea:	085a      	lsrs	r2, r3, #1
 8028dec:	07d9      	lsls	r1, r3, #31
 8028dee:	5cba      	ldrb	r2, [r7, r2]
 8028df0:	bf54      	ite	pl
 8028df2:	f002 020f 	andpl.w	r2, r2, #15
 8028df6:	1112      	asrmi	r2, r2, #4
 8028df8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028dfc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028e00:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028e04:	b2d2      	uxtb	r2, r2
 8028e06:	2800      	cmp	r0, #0
 8028e08:	f000 809b 	beq.w	8028f42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f6>
 8028e0c:	f103 0e01 	add.w	lr, r3, #1
 8028e10:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8028e14:	f01e 0f01 	tst.w	lr, #1
 8028e18:	5c79      	ldrb	r1, [r7, r1]
 8028e1a:	bf0c      	ite	eq
 8028e1c:	f001 010f 	andeq.w	r1, r1, #15
 8028e20:	1109      	asrne	r1, r1, #4
 8028e22:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028e26:	b2c9      	uxtb	r1, r1
 8028e28:	910f      	str	r1, [sp, #60]	; 0x3c
 8028e2a:	f1bc 0f00 	cmp.w	ip, #0
 8028e2e:	d019      	beq.n	8028e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8028e30:	9908      	ldr	r1, [sp, #32]
 8028e32:	440b      	add	r3, r1
 8028e34:	0859      	lsrs	r1, r3, #1
 8028e36:	f013 0f01 	tst.w	r3, #1
 8028e3a:	5c79      	ldrb	r1, [r7, r1]
 8028e3c:	bf0c      	ite	eq
 8028e3e:	f001 010f 	andeq.w	r1, r1, #15
 8028e42:	1109      	asrne	r1, r1, #4
 8028e44:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028e48:	b2c9      	uxtb	r1, r1
 8028e4a:	3301      	adds	r3, #1
 8028e4c:	910b      	str	r1, [sp, #44]	; 0x2c
 8028e4e:	0859      	lsrs	r1, r3, #1
 8028e50:	07db      	lsls	r3, r3, #31
 8028e52:	5c79      	ldrb	r1, [r7, r1]
 8028e54:	bf54      	ite	pl
 8028e56:	f001 010f 	andpl.w	r1, r1, #15
 8028e5a:	1109      	asrmi	r1, r1, #4
 8028e5c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028e60:	b2c9      	uxtb	r1, r1
 8028e62:	9110      	str	r1, [sp, #64]	; 0x40
 8028e64:	b280      	uxth	r0, r0
 8028e66:	fa1f fc8c 	uxth.w	ip, ip
 8028e6a:	fb00 f30c 	mul.w	r3, r0, ip
 8028e6e:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8028e72:	0100      	lsls	r0, r0, #4
 8028e74:	fa1f fc8c 	uxth.w	ip, ip
 8028e78:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8028e7c:	eba1 010c 	sub.w	r1, r1, ip
 8028e80:	fa1f fe81 	uxth.w	lr, r1
 8028e84:	1ac0      	subs	r0, r0, r3
 8028e86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028e88:	b280      	uxth	r0, r0
 8028e8a:	4348      	muls	r0, r1
 8028e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028e8e:	fb02 020e 	mla	r2, r2, lr, r0
 8028e92:	fb0c 2c01 	mla	ip, ip, r1, r2
 8028e96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028e98:	fb03 c302 	mla	r3, r3, r2, ip
 8028e9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028ea0:	2b00      	cmp	r3, #0
 8028ea2:	d045      	beq.n	8028f30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028ea4:	4a36      	ldr	r2, [pc, #216]	; (8028f80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 8028ea6:	6811      	ldr	r1, [r2, #0]
 8028ea8:	2bff      	cmp	r3, #255	; 0xff
 8028eaa:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8028eae:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8028eb2:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8028eb6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028eba:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028ebe:	b2c9      	uxtb	r1, r1
 8028ec0:	d050      	beq.n	8028f64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8028ec2:	f8b8 c000 	ldrh.w	ip, [r8]
 8028ec6:	fa1f fb83 	uxth.w	fp, r3
 8028eca:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028ece:	43db      	mvns	r3, r3
 8028ed0:	b2db      	uxtb	r3, r3
 8028ed2:	fb1e fe0b 	smulbb	lr, lr, fp
 8028ed6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028eda:	fb00 e003 	mla	r0, r0, r3, lr
 8028ede:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8028ee2:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8028ee6:	fb12 f20b 	smulbb	r2, r2, fp
 8028eea:	fb0e 2203 	mla	r2, lr, r3, r2
 8028eee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028ef2:	b292      	uxth	r2, r2
 8028ef4:	fa5f fc8c 	uxtb.w	ip, ip
 8028ef8:	fb11 f10b 	smulbb	r1, r1, fp
 8028efc:	b280      	uxth	r0, r0
 8028efe:	fb0c 1103 	mla	r1, ip, r3, r1
 8028f02:	f102 0e01 	add.w	lr, r2, #1
 8028f06:	b289      	uxth	r1, r1
 8028f08:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8028f0c:	f100 0e01 	add.w	lr, r0, #1
 8028f10:	0952      	lsrs	r2, r2, #5
 8028f12:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8028f16:	1c4b      	adds	r3, r1, #1
 8028f18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028f1c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028f20:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028f24:	4302      	orrs	r2, r0
 8028f26:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028f2a:	430a      	orrs	r2, r1
 8028f2c:	f8a8 2000 	strh.w	r2, [r8]
 8028f30:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028f32:	441c      	add	r4, r3
 8028f34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028f36:	f108 0802 	add.w	r8, r8, #2
 8028f3a:	441e      	add	r6, r3
 8028f3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028f40:	e6cc      	b.n	8028cdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8028f42:	f1bc 0f00 	cmp.w	ip, #0
 8028f46:	d08d      	beq.n	8028e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8028f48:	9908      	ldr	r1, [sp, #32]
 8028f4a:	440b      	add	r3, r1
 8028f4c:	0859      	lsrs	r1, r3, #1
 8028f4e:	07db      	lsls	r3, r3, #31
 8028f50:	5c79      	ldrb	r1, [r7, r1]
 8028f52:	bf54      	ite	pl
 8028f54:	f001 010f 	andpl.w	r1, r1, #15
 8028f58:	1109      	asrmi	r1, r1, #4
 8028f5a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028f5e:	b2c9      	uxtb	r1, r1
 8028f60:	910b      	str	r1, [sp, #44]	; 0x2c
 8028f62:	e77f      	b.n	8028e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8028f64:	00d2      	lsls	r2, r2, #3
 8028f66:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8028f6a:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8028f6e:	f8a8 1000 	strh.w	r1, [r8]
 8028f72:	e7dd      	b.n	8028f30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028f74:	b013      	add	sp, #76	; 0x4c
 8028f76:	ecbd 8b08 	vpop	{d8-d11}
 8028f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f7e:	bf00      	nop
 8028f80:	2000b73c 	.word	0x2000b73c

08028f84 <CRC_Lock>:
 8028f84:	b530      	push	{r4, r5, lr}
 8028f86:	4a1d      	ldr	r2, [pc, #116]	; (8028ffc <CRC_Lock+0x78>)
 8028f88:	6813      	ldr	r3, [r2, #0]
 8028f8a:	f023 0301 	bic.w	r3, r3, #1
 8028f8e:	6013      	str	r3, [r2, #0]
 8028f90:	4b1b      	ldr	r3, [pc, #108]	; (8029000 <CRC_Lock+0x7c>)
 8028f92:	681a      	ldr	r2, [r3, #0]
 8028f94:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028f98:	4022      	ands	r2, r4
 8028f9a:	f24c 2540 	movw	r5, #49728	; 0xc240
 8028f9e:	42aa      	cmp	r2, r5
 8028fa0:	d005      	beq.n	8028fae <CRC_Lock+0x2a>
 8028fa2:	681b      	ldr	r3, [r3, #0]
 8028fa4:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028fa8:	4023      	ands	r3, r4
 8028faa:	4293      	cmp	r3, r2
 8028fac:	d11d      	bne.n	8028fea <CRC_Lock+0x66>
 8028fae:	4b15      	ldr	r3, [pc, #84]	; (8029004 <CRC_Lock+0x80>)
 8028fb0:	681b      	ldr	r3, [r3, #0]
 8028fb2:	b9d3      	cbnz	r3, 8028fea <CRC_Lock+0x66>
 8028fb4:	4a14      	ldr	r2, [pc, #80]	; (8029008 <CRC_Lock+0x84>)
 8028fb6:	6813      	ldr	r3, [r2, #0]
 8028fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028fbc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8028fc0:	d006      	beq.n	8028fd0 <CRC_Lock+0x4c>
 8028fc2:	6813      	ldr	r3, [r2, #0]
 8028fc4:	f240 4283 	movw	r2, #1155	; 0x483
 8028fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028fcc:	4293      	cmp	r3, r2
 8028fce:	d10c      	bne.n	8028fea <CRC_Lock+0x66>
 8028fd0:	4b0e      	ldr	r3, [pc, #56]	; (802900c <CRC_Lock+0x88>)
 8028fd2:	2201      	movs	r2, #1
 8028fd4:	601a      	str	r2, [r3, #0]
 8028fd6:	681a      	ldr	r2, [r3, #0]
 8028fd8:	2a00      	cmp	r2, #0
 8028fda:	d1fc      	bne.n	8028fd6 <CRC_Lock+0x52>
 8028fdc:	4b0c      	ldr	r3, [pc, #48]	; (8029010 <CRC_Lock+0x8c>)
 8028fde:	6018      	str	r0, [r3, #0]
 8028fe0:	6818      	ldr	r0, [r3, #0]
 8028fe2:	1a43      	subs	r3, r0, r1
 8028fe4:	4258      	negs	r0, r3
 8028fe6:	4158      	adcs	r0, r3
 8028fe8:	bd30      	pop	{r4, r5, pc}
 8028fea:	4b0a      	ldr	r3, [pc, #40]	; (8029014 <CRC_Lock+0x90>)
 8028fec:	2201      	movs	r2, #1
 8028fee:	601a      	str	r2, [r3, #0]
 8028ff0:	681a      	ldr	r2, [r3, #0]
 8028ff2:	2a00      	cmp	r2, #0
 8028ff4:	d1fc      	bne.n	8028ff0 <CRC_Lock+0x6c>
 8028ff6:	4b08      	ldr	r3, [pc, #32]	; (8029018 <CRC_Lock+0x94>)
 8028ff8:	e7f1      	b.n	8028fde <CRC_Lock+0x5a>
 8028ffa:	bf00      	nop
 8028ffc:	e0002000 	.word	0xe0002000
 8029000:	e000ed00 	.word	0xe000ed00
 8029004:	e0042000 	.word	0xe0042000
 8029008:	5c001000 	.word	0x5c001000
 802900c:	58024c08 	.word	0x58024c08
 8029010:	58024c00 	.word	0x58024c00
 8029014:	40023008 	.word	0x40023008
 8029018:	40023000 	.word	0x40023000

0802901c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802901c:	6101      	str	r1, [r0, #16]
 802901e:	4770      	bx	lr

08029020 <_ZN8touchgfx8Gestures4tickEv>:
 8029020:	7b83      	ldrb	r3, [r0, #14]
 8029022:	b14b      	cbz	r3, 8029038 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029024:	8903      	ldrh	r3, [r0, #8]
 8029026:	3301      	adds	r3, #1
 8029028:	b29b      	uxth	r3, r3
 802902a:	2b07      	cmp	r3, #7
 802902c:	8103      	strh	r3, [r0, #8]
 802902e:	bf81      	itttt	hi
 8029030:	2300      	movhi	r3, #0
 8029032:	8143      	strhhi	r3, [r0, #10]
 8029034:	8183      	strhhi	r3, [r0, #12]
 8029036:	7383      	strbhi	r3, [r0, #14]
 8029038:	4770      	bx	lr
	...

0802903c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802903c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029040:	4604      	mov	r4, r0
 8029042:	8880      	ldrh	r0, [r0, #4]
 8029044:	f8ad 0006 	strh.w	r0, [sp, #6]
 8029048:	4698      	mov	r8, r3
 802904a:	eba8 0000 	sub.w	r0, r8, r0
 802904e:	4b1c      	ldr	r3, [pc, #112]	; (80290c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029050:	9300      	str	r3, [sp, #0]
 8029052:	b280      	uxth	r0, r0
 8029054:	2300      	movs	r3, #0
 8029056:	f88d 3004 	strb.w	r3, [sp, #4]
 802905a:	b203      	sxth	r3, r0
 802905c:	2b00      	cmp	r3, #0
 802905e:	bfb8      	it	lt
 8029060:	4240      	neglt	r0, r0
 8029062:	4617      	mov	r7, r2
 8029064:	8aa2      	ldrh	r2, [r4, #20]
 8029066:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802906a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802906e:	bfb8      	it	lt
 8029070:	b203      	sxthlt	r3, r0
 8029072:	460e      	mov	r6, r1
 8029074:	4293      	cmp	r3, r2
 8029076:	88e1      	ldrh	r1, [r4, #6]
 8029078:	f8ad 1008 	strh.w	r1, [sp, #8]
 802907c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029080:	dc08      	bgt.n	8029094 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8029082:	1a69      	subs	r1, r5, r1
 8029084:	b289      	uxth	r1, r1
 8029086:	b20b      	sxth	r3, r1
 8029088:	2b00      	cmp	r3, #0
 802908a:	bfbc      	itt	lt
 802908c:	4249      	neglt	r1, r1
 802908e:	b20b      	sxthlt	r3, r1
 8029090:	429a      	cmp	r2, r3
 8029092:	da13      	bge.n	80290bc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8029094:	6920      	ldr	r0, [r4, #16]
 8029096:	6803      	ldr	r3, [r0, #0]
 8029098:	4669      	mov	r1, sp
 802909a:	685b      	ldr	r3, [r3, #4]
 802909c:	4798      	blx	r3
 802909e:	eba8 0606 	sub.w	r6, r8, r6
 80290a2:	2300      	movs	r3, #0
 80290a4:	1bef      	subs	r7, r5, r7
 80290a6:	2001      	movs	r0, #1
 80290a8:	8123      	strh	r3, [r4, #8]
 80290aa:	8166      	strh	r6, [r4, #10]
 80290ac:	81a7      	strh	r7, [r4, #12]
 80290ae:	f8a4 8004 	strh.w	r8, [r4, #4]
 80290b2:	80e5      	strh	r5, [r4, #6]
 80290b4:	73a0      	strb	r0, [r4, #14]
 80290b6:	b004      	add	sp, #16
 80290b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80290bc:	2000      	movs	r0, #0
 80290be:	e7fa      	b.n	80290b6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80290c0:	0802fdf8 	.word	0x0802fdf8

080290c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80290c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80290c6:	461e      	mov	r6, r3
 80290c8:	1e4b      	subs	r3, r1, #1
 80290ca:	2b01      	cmp	r3, #1
 80290cc:	b085      	sub	sp, #20
 80290ce:	4604      	mov	r4, r0
 80290d0:	460d      	mov	r5, r1
 80290d2:	4617      	mov	r7, r2
 80290d4:	d84b      	bhi.n	802916e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80290d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80290da:	1cd3      	adds	r3, r2, #3
 80290dc:	b29b      	uxth	r3, r3
 80290de:	2b06      	cmp	r3, #6
 80290e0:	d916      	bls.n	8029110 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80290e2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8029184 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80290e6:	f8cd c004 	str.w	ip, [sp, #4]
 80290ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80290ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80290f2:	6900      	ldr	r0, [r0, #16]
 80290f4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80290f8:	f04f 0c00 	mov.w	ip, #0
 80290fc:	f88d c008 	strb.w	ip, [sp, #8]
 8029100:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029104:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029108:	6803      	ldr	r3, [r0, #0]
 802910a:	a901      	add	r1, sp, #4
 802910c:	689b      	ldr	r3, [r3, #8]
 802910e:	4798      	blx	r3
 8029110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029114:	1cd3      	adds	r3, r2, #3
 8029116:	b29b      	uxth	r3, r3
 8029118:	2b06      	cmp	r3, #6
 802911a:	d916      	bls.n	802914a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802911c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8029184 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029120:	f8cd c004 	str.w	ip, [sp, #4]
 8029124:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029128:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802912c:	6920      	ldr	r0, [r4, #16]
 802912e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029132:	f04f 0c01 	mov.w	ip, #1
 8029136:	f88d c008 	strb.w	ip, [sp, #8]
 802913a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802913e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029142:	6803      	ldr	r3, [r0, #0]
 8029144:	a901      	add	r1, sp, #4
 8029146:	689b      	ldr	r3, [r3, #8]
 8029148:	4798      	blx	r3
 802914a:	4b0d      	ldr	r3, [pc, #52]	; (8029180 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802914c:	9301      	str	r3, [sp, #4]
 802914e:	6920      	ldr	r0, [r4, #16]
 8029150:	f88d 5008 	strb.w	r5, [sp, #8]
 8029154:	2300      	movs	r3, #0
 8029156:	f8ad 700a 	strh.w	r7, [sp, #10]
 802915a:	f8ad 600c 	strh.w	r6, [sp, #12]
 802915e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029162:	6803      	ldr	r3, [r0, #0]
 8029164:	a901      	add	r1, sp, #4
 8029166:	681b      	ldr	r3, [r3, #0]
 8029168:	4798      	blx	r3
 802916a:	b005      	add	sp, #20
 802916c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802916e:	2900      	cmp	r1, #0
 8029170:	d1eb      	bne.n	802914a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029172:	80a2      	strh	r2, [r4, #4]
 8029174:	80c6      	strh	r6, [r0, #6]
 8029176:	60a1      	str	r1, [r4, #8]
 8029178:	81a1      	strh	r1, [r4, #12]
 802917a:	73a1      	strb	r1, [r4, #14]
 802917c:	e7e5      	b.n	802914a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802917e:	bf00      	nop
 8029180:	0802fde4 	.word	0x0802fde4
 8029184:	0802fe0c 	.word	0x0802fe0c

08029188 <__aeabi_atexit>:
 8029188:	460b      	mov	r3, r1
 802918a:	4601      	mov	r1, r0
 802918c:	4618      	mov	r0, r3
 802918e:	f000 b953 	b.w	8029438 <__cxa_atexit>

08029192 <_ZdlPvj>:
 8029192:	f000 b8f5 	b.w	8029380 <_ZdlPv>

08029196 <__cxa_guard_acquire>:
 8029196:	6803      	ldr	r3, [r0, #0]
 8029198:	07db      	lsls	r3, r3, #31
 802919a:	d406      	bmi.n	80291aa <__cxa_guard_acquire+0x14>
 802919c:	7843      	ldrb	r3, [r0, #1]
 802919e:	b103      	cbz	r3, 80291a2 <__cxa_guard_acquire+0xc>
 80291a0:	deff      	udf	#255	; 0xff
 80291a2:	2301      	movs	r3, #1
 80291a4:	7043      	strb	r3, [r0, #1]
 80291a6:	4618      	mov	r0, r3
 80291a8:	4770      	bx	lr
 80291aa:	2000      	movs	r0, #0
 80291ac:	4770      	bx	lr

080291ae <__cxa_guard_release>:
 80291ae:	2301      	movs	r3, #1
 80291b0:	6003      	str	r3, [r0, #0]
 80291b2:	4770      	bx	lr

080291b4 <__cxa_pure_virtual>:
 80291b4:	b508      	push	{r3, lr}
 80291b6:	f000 f8f1 	bl	802939c <_ZSt9terminatev>

080291ba <_ZNSaIcEC1Ev>:
 80291ba:	4770      	bx	lr

080291bc <_ZNSaIcED1Ev>:
 80291bc:	4770      	bx	lr

080291be <_ZSt17__throw_bad_allocv>:
 80291be:	b508      	push	{r3, lr}
 80291c0:	f000 f90a 	bl	80293d8 <abort>

080291c4 <_ZSt19__throw_logic_errorPKc>:
 80291c4:	b508      	push	{r3, lr}
 80291c6:	f000 f907 	bl	80293d8 <abort>

080291ca <_ZSt20__throw_length_errorPKc>:
 80291ca:	b508      	push	{r3, lr}
 80291cc:	f000 f904 	bl	80293d8 <abort>

080291d0 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80291d0:	b10a      	cbz	r2, 80291d6 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80291d2:	f000 b98b 	b.w	80294ec <memcpy>
 80291d6:	4770      	bx	lr

080291d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80291d8:	6001      	str	r1, [r0, #0]
 80291da:	4770      	bx	lr

080291dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80291dc:	6800      	ldr	r0, [r0, #0]
 80291de:	4770      	bx	lr

080291e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80291e0:	3008      	adds	r0, #8
 80291e2:	4770      	bx	lr

080291e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80291e4:	6081      	str	r1, [r0, #8]
 80291e6:	4770      	bx	lr

080291e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80291e8:	6803      	ldr	r3, [r0, #0]
 80291ea:	6041      	str	r1, [r0, #4]
 80291ec:	2200      	movs	r2, #0
 80291ee:	545a      	strb	r2, [r3, r1]
 80291f0:	4770      	bx	lr
	...

080291f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80291f4:	b508      	push	{r3, lr}
 80291f6:	680b      	ldr	r3, [r1, #0]
 80291f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80291fc:	d302      	bcc.n	8029204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80291fe:	480d      	ldr	r0, [pc, #52]	; (8029234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8029200:	f7ff ffe3 	bl	80291ca <_ZSt20__throw_length_errorPKc>
 8029204:	4293      	cmp	r3, r2
 8029206:	d90b      	bls.n	8029220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8029208:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 802920c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8029210:	d206      	bcs.n	8029220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8029212:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8029216:	bf2a      	itet	cs
 8029218:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 802921c:	6008      	strcc	r0, [r1, #0]
 802921e:	600b      	strcs	r3, [r1, #0]
 8029220:	6808      	ldr	r0, [r1, #0]
 8029222:	3001      	adds	r0, #1
 8029224:	d501      	bpl.n	802922a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8029226:	f7ff ffca 	bl	80291be <_ZSt17__throw_bad_allocv>
 802922a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802922e:	f000 b8ba 	b.w	80293a6 <_Znwj>
 8029232:	bf00      	nop
 8029234:	080311d7 	.word	0x080311d7

08029238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8029238:	f850 3b08 	ldr.w	r3, [r0], #8
 802923c:	4283      	cmp	r3, r0
 802923e:	d002      	beq.n	8029246 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8029240:	4618      	mov	r0, r3
 8029242:	f000 b89d 	b.w	8029380 <_ZdlPv>
 8029246:	4770      	bx	lr

08029248 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8029248:	6840      	ldr	r0, [r0, #4]
 802924a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802924e:	3901      	subs	r1, #1
 8029250:	1a09      	subs	r1, r1, r0
 8029252:	4291      	cmp	r1, r2
 8029254:	b508      	push	{r3, lr}
 8029256:	d202      	bcs.n	802925e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8029258:	4618      	mov	r0, r3
 802925a:	f7ff ffb6 	bl	80291ca <_ZSt20__throw_length_errorPKc>
 802925e:	bd08      	pop	{r3, pc}

08029260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8029260:	2a01      	cmp	r2, #1
 8029262:	b510      	push	{r4, lr}
 8029264:	d102      	bne.n	802926c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8029266:	780a      	ldrb	r2, [r1, #0]
 8029268:	7002      	strb	r2, [r0, #0]
 802926a:	bd10      	pop	{r4, pc}
 802926c:	f7ff ffb0 	bl	80291d0 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8029270:	e7fb      	b.n	802926a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08029272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8029272:	b508      	push	{r3, lr}
 8029274:	1a52      	subs	r2, r2, r1
 8029276:	f7ff fff3 	bl	8029260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802927a:	bd08      	pop	{r3, pc}

0802927c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 802927c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8029280:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8029282:	461f      	mov	r7, r3
 8029284:	6843      	ldr	r3, [r0, #4]
 8029286:	eb01 0802 	add.w	r8, r1, r2
 802928a:	1ab2      	subs	r2, r6, r2
 802928c:	441a      	add	r2, r3
 802928e:	eba3 0908 	sub.w	r9, r3, r8
 8029292:	4603      	mov	r3, r0
 8029294:	9201      	str	r2, [sp, #4]
 8029296:	f853 2b08 	ldr.w	r2, [r3], #8
 802929a:	429a      	cmp	r2, r3
 802929c:	bf18      	it	ne
 802929e:	6882      	ldrne	r2, [r0, #8]
 80292a0:	460d      	mov	r5, r1
 80292a2:	bf08      	it	eq
 80292a4:	220f      	moveq	r2, #15
 80292a6:	a901      	add	r1, sp, #4
 80292a8:	4604      	mov	r4, r0
 80292aa:	f7ff ffa3 	bl	80291f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80292ae:	4682      	mov	sl, r0
 80292b0:	b11d      	cbz	r5, 80292ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80292b2:	6821      	ldr	r1, [r4, #0]
 80292b4:	462a      	mov	r2, r5
 80292b6:	f7ff ffd3 	bl	8029260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80292ba:	b137      	cbz	r7, 80292ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80292bc:	b12e      	cbz	r6, 80292ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80292be:	4632      	mov	r2, r6
 80292c0:	4639      	mov	r1, r7
 80292c2:	eb0a 0005 	add.w	r0, sl, r5
 80292c6:	f7ff ffcb 	bl	8029260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80292ca:	f1b9 0f00 	cmp.w	r9, #0
 80292ce:	d007      	beq.n	80292e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80292d0:	6821      	ldr	r1, [r4, #0]
 80292d2:	4435      	add	r5, r6
 80292d4:	464a      	mov	r2, r9
 80292d6:	4441      	add	r1, r8
 80292d8:	eb0a 0005 	add.w	r0, sl, r5
 80292dc:	f7ff ffc0 	bl	8029260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80292e0:	4620      	mov	r0, r4
 80292e2:	f7ff ffa9 	bl	8029238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80292e6:	9b01      	ldr	r3, [sp, #4]
 80292e8:	f8c4 a000 	str.w	sl, [r4]
 80292ec:	60a3      	str	r3, [r4, #8]
 80292ee:	b002      	add	sp, #8
 80292f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080292f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80292f4:	b510      	push	{r4, lr}
 80292f6:	4604      	mov	r4, r0
 80292f8:	f7ff ff9e 	bl	8029238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80292fc:	4620      	mov	r0, r4
 80292fe:	bd10      	pop	{r4, pc}

08029300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8029300:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029302:	4604      	mov	r4, r0
 8029304:	4623      	mov	r3, r4
 8029306:	6840      	ldr	r0, [r0, #4]
 8029308:	f853 6b08 	ldr.w	r6, [r3], #8
 802930c:	429e      	cmp	r6, r3
 802930e:	bf18      	it	ne
 8029310:	68a3      	ldrne	r3, [r4, #8]
 8029312:	eb00 0502 	add.w	r5, r0, r2
 8029316:	bf08      	it	eq
 8029318:	230f      	moveq	r3, #15
 802931a:	429d      	cmp	r5, r3
 802931c:	d80a      	bhi.n	8029334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 802931e:	b112      	cbz	r2, 8029326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8029320:	4430      	add	r0, r6
 8029322:	f7ff ff9d 	bl	8029260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8029326:	6823      	ldr	r3, [r4, #0]
 8029328:	6065      	str	r5, [r4, #4]
 802932a:	2200      	movs	r2, #0
 802932c:	4620      	mov	r0, r4
 802932e:	555a      	strb	r2, [r3, r5]
 8029330:	b002      	add	sp, #8
 8029332:	bd70      	pop	{r4, r5, r6, pc}
 8029334:	9200      	str	r2, [sp, #0]
 8029336:	460b      	mov	r3, r1
 8029338:	2200      	movs	r2, #0
 802933a:	4601      	mov	r1, r0
 802933c:	4620      	mov	r0, r4
 802933e:	f7ff ff9d 	bl	802927c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8029342:	e7f0      	b.n	8029326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08029344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8029344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029346:	4604      	mov	r4, r0
 8029348:	4608      	mov	r0, r1
 802934a:	460d      	mov	r5, r1
 802934c:	f7d6 ffaa 	bl	80002a4 <strlen>
 8029350:	4b06      	ldr	r3, [pc, #24]	; (802936c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8029352:	9001      	str	r0, [sp, #4]
 8029354:	4602      	mov	r2, r0
 8029356:	2100      	movs	r1, #0
 8029358:	4620      	mov	r0, r4
 802935a:	f7ff ff75 	bl	8029248 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 802935e:	9a01      	ldr	r2, [sp, #4]
 8029360:	4629      	mov	r1, r5
 8029362:	4620      	mov	r0, r4
 8029364:	f7ff ffcc 	bl	8029300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8029368:	b003      	add	sp, #12
 802936a:	bd30      	pop	{r4, r5, pc}
 802936c:	080311ef 	.word	0x080311ef

08029370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8029370:	b508      	push	{r3, lr}
 8029372:	f7ff ffe7 	bl	8029344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8029376:	bd08      	pop	{r3, pc}

08029378 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8029378:	6800      	ldr	r0, [r0, #0]
 802937a:	4770      	bx	lr

0802937c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 802937c:	6001      	str	r1, [r0, #0]
 802937e:	4770      	bx	lr

08029380 <_ZdlPv>:
 8029380:	f000 b8ac 	b.w	80294dc <free>

08029384 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029384:	b508      	push	{r3, lr}
 8029386:	4780      	blx	r0
 8029388:	f000 f826 	bl	80293d8 <abort>

0802938c <_ZSt13get_terminatev>:
 802938c:	4b02      	ldr	r3, [pc, #8]	; (8029398 <_ZSt13get_terminatev+0xc>)
 802938e:	6818      	ldr	r0, [r3, #0]
 8029390:	f3bf 8f5b 	dmb	ish
 8029394:	4770      	bx	lr
 8029396:	bf00      	nop
 8029398:	20000108 	.word	0x20000108

0802939c <_ZSt9terminatev>:
 802939c:	b508      	push	{r3, lr}
 802939e:	f7ff fff5 	bl	802938c <_ZSt13get_terminatev>
 80293a2:	f7ff ffef 	bl	8029384 <_ZN10__cxxabiv111__terminateEPFvvE>

080293a6 <_Znwj>:
 80293a6:	2801      	cmp	r0, #1
 80293a8:	bf38      	it	cc
 80293aa:	2001      	movcc	r0, #1
 80293ac:	b510      	push	{r4, lr}
 80293ae:	4604      	mov	r4, r0
 80293b0:	4620      	mov	r0, r4
 80293b2:	f000 f88b 	bl	80294cc <malloc>
 80293b6:	b930      	cbnz	r0, 80293c6 <_Znwj+0x20>
 80293b8:	f000 f806 	bl	80293c8 <_ZSt15get_new_handlerv>
 80293bc:	b908      	cbnz	r0, 80293c2 <_Znwj+0x1c>
 80293be:	f000 f80b 	bl	80293d8 <abort>
 80293c2:	4780      	blx	r0
 80293c4:	e7f4      	b.n	80293b0 <_Znwj+0xa>
 80293c6:	bd10      	pop	{r4, pc}

080293c8 <_ZSt15get_new_handlerv>:
 80293c8:	4b02      	ldr	r3, [pc, #8]	; (80293d4 <_ZSt15get_new_handlerv+0xc>)
 80293ca:	6818      	ldr	r0, [r3, #0]
 80293cc:	f3bf 8f5b 	dmb	ish
 80293d0:	4770      	bx	lr
 80293d2:	bf00      	nop
 80293d4:	2000b830 	.word	0x2000b830

080293d8 <abort>:
 80293d8:	b508      	push	{r3, lr}
 80293da:	2006      	movs	r0, #6
 80293dc:	f000 ff64 	bl	802a2a8 <raise>
 80293e0:	2001      	movs	r0, #1
 80293e2:	f7db fd23 	bl	8004e2c <_exit>
	...

080293e8 <__assert_func>:
 80293e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80293ea:	4614      	mov	r4, r2
 80293ec:	461a      	mov	r2, r3
 80293ee:	4b09      	ldr	r3, [pc, #36]	; (8029414 <__assert_func+0x2c>)
 80293f0:	681b      	ldr	r3, [r3, #0]
 80293f2:	4605      	mov	r5, r0
 80293f4:	68d8      	ldr	r0, [r3, #12]
 80293f6:	b14c      	cbz	r4, 802940c <__assert_func+0x24>
 80293f8:	4b07      	ldr	r3, [pc, #28]	; (8029418 <__assert_func+0x30>)
 80293fa:	9100      	str	r1, [sp, #0]
 80293fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029400:	4906      	ldr	r1, [pc, #24]	; (802941c <__assert_func+0x34>)
 8029402:	462b      	mov	r3, r5
 8029404:	f000 f82c 	bl	8029460 <fiprintf>
 8029408:	f7ff ffe6 	bl	80293d8 <abort>
 802940c:	4b04      	ldr	r3, [pc, #16]	; (8029420 <__assert_func+0x38>)
 802940e:	461c      	mov	r4, r3
 8029410:	e7f3      	b.n	80293fa <__assert_func+0x12>
 8029412:	bf00      	nop
 8029414:	2000010c 	.word	0x2000010c
 8029418:	08031204 	.word	0x08031204
 802941c:	08031211 	.word	0x08031211
 8029420:	0803123f 	.word	0x0803123f

08029424 <atexit>:
 8029424:	2300      	movs	r3, #0
 8029426:	4601      	mov	r1, r0
 8029428:	461a      	mov	r2, r3
 802942a:	4618      	mov	r0, r3
 802942c:	f001 ba34 	b.w	802a898 <__register_exitproc>

08029430 <atoi>:
 8029430:	220a      	movs	r2, #10
 8029432:	2100      	movs	r1, #0
 8029434:	f001 b91a 	b.w	802a66c <strtol>

08029438 <__cxa_atexit>:
 8029438:	b510      	push	{r4, lr}
 802943a:	4c05      	ldr	r4, [pc, #20]	; (8029450 <__cxa_atexit+0x18>)
 802943c:	4613      	mov	r3, r2
 802943e:	b12c      	cbz	r4, 802944c <__cxa_atexit+0x14>
 8029440:	460a      	mov	r2, r1
 8029442:	4601      	mov	r1, r0
 8029444:	2002      	movs	r0, #2
 8029446:	f001 fa27 	bl	802a898 <__register_exitproc>
 802944a:	bd10      	pop	{r4, pc}
 802944c:	4620      	mov	r0, r4
 802944e:	e7fc      	b.n	802944a <__cxa_atexit+0x12>
 8029450:	0802a899 	.word	0x0802a899

08029454 <__errno>:
 8029454:	4b01      	ldr	r3, [pc, #4]	; (802945c <__errno+0x8>)
 8029456:	6818      	ldr	r0, [r3, #0]
 8029458:	4770      	bx	lr
 802945a:	bf00      	nop
 802945c:	2000010c 	.word	0x2000010c

08029460 <fiprintf>:
 8029460:	b40e      	push	{r1, r2, r3}
 8029462:	b503      	push	{r0, r1, lr}
 8029464:	4601      	mov	r1, r0
 8029466:	ab03      	add	r3, sp, #12
 8029468:	4805      	ldr	r0, [pc, #20]	; (8029480 <fiprintf+0x20>)
 802946a:	f853 2b04 	ldr.w	r2, [r3], #4
 802946e:	6800      	ldr	r0, [r0, #0]
 8029470:	9301      	str	r3, [sp, #4]
 8029472:	f000 f93f 	bl	80296f4 <_vfiprintf_r>
 8029476:	b002      	add	sp, #8
 8029478:	f85d eb04 	ldr.w	lr, [sp], #4
 802947c:	b003      	add	sp, #12
 802947e:	4770      	bx	lr
 8029480:	2000010c 	.word	0x2000010c

08029484 <__libc_init_array>:
 8029484:	b570      	push	{r4, r5, r6, lr}
 8029486:	4d0d      	ldr	r5, [pc, #52]	; (80294bc <__libc_init_array+0x38>)
 8029488:	4c0d      	ldr	r4, [pc, #52]	; (80294c0 <__libc_init_array+0x3c>)
 802948a:	1b64      	subs	r4, r4, r5
 802948c:	10a4      	asrs	r4, r4, #2
 802948e:	2600      	movs	r6, #0
 8029490:	42a6      	cmp	r6, r4
 8029492:	d109      	bne.n	80294a8 <__libc_init_array+0x24>
 8029494:	4d0b      	ldr	r5, [pc, #44]	; (80294c4 <__libc_init_array+0x40>)
 8029496:	4c0c      	ldr	r4, [pc, #48]	; (80294c8 <__libc_init_array+0x44>)
 8029498:	f003 fca6 	bl	802cde8 <_init>
 802949c:	1b64      	subs	r4, r4, r5
 802949e:	10a4      	asrs	r4, r4, #2
 80294a0:	2600      	movs	r6, #0
 80294a2:	42a6      	cmp	r6, r4
 80294a4:	d105      	bne.n	80294b2 <__libc_init_array+0x2e>
 80294a6:	bd70      	pop	{r4, r5, r6, pc}
 80294a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80294ac:	4798      	blx	r3
 80294ae:	3601      	adds	r6, #1
 80294b0:	e7ee      	b.n	8029490 <__libc_init_array+0xc>
 80294b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80294b6:	4798      	blx	r3
 80294b8:	3601      	adds	r6, #1
 80294ba:	e7f2      	b.n	80294a2 <__libc_init_array+0x1e>
 80294bc:	0806a578 	.word	0x0806a578
 80294c0:	0806a578 	.word	0x0806a578
 80294c4:	0806a578 	.word	0x0806a578
 80294c8:	0806a58c 	.word	0x0806a58c

080294cc <malloc>:
 80294cc:	4b02      	ldr	r3, [pc, #8]	; (80294d8 <malloc+0xc>)
 80294ce:	4601      	mov	r1, r0
 80294d0:	6818      	ldr	r0, [r3, #0]
 80294d2:	f000 b88b 	b.w	80295ec <_malloc_r>
 80294d6:	bf00      	nop
 80294d8:	2000010c 	.word	0x2000010c

080294dc <free>:
 80294dc:	4b02      	ldr	r3, [pc, #8]	; (80294e8 <free+0xc>)
 80294de:	4601      	mov	r1, r0
 80294e0:	6818      	ldr	r0, [r3, #0]
 80294e2:	f000 b833 	b.w	802954c <_free_r>
 80294e6:	bf00      	nop
 80294e8:	2000010c 	.word	0x2000010c

080294ec <memcpy>:
 80294ec:	440a      	add	r2, r1
 80294ee:	4291      	cmp	r1, r2
 80294f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80294f4:	d100      	bne.n	80294f8 <memcpy+0xc>
 80294f6:	4770      	bx	lr
 80294f8:	b510      	push	{r4, lr}
 80294fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80294fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029502:	4291      	cmp	r1, r2
 8029504:	d1f9      	bne.n	80294fa <memcpy+0xe>
 8029506:	bd10      	pop	{r4, pc}

08029508 <memmove>:
 8029508:	4288      	cmp	r0, r1
 802950a:	b510      	push	{r4, lr}
 802950c:	eb01 0402 	add.w	r4, r1, r2
 8029510:	d902      	bls.n	8029518 <memmove+0x10>
 8029512:	4284      	cmp	r4, r0
 8029514:	4623      	mov	r3, r4
 8029516:	d807      	bhi.n	8029528 <memmove+0x20>
 8029518:	1e43      	subs	r3, r0, #1
 802951a:	42a1      	cmp	r1, r4
 802951c:	d008      	beq.n	8029530 <memmove+0x28>
 802951e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029526:	e7f8      	b.n	802951a <memmove+0x12>
 8029528:	4402      	add	r2, r0
 802952a:	4601      	mov	r1, r0
 802952c:	428a      	cmp	r2, r1
 802952e:	d100      	bne.n	8029532 <memmove+0x2a>
 8029530:	bd10      	pop	{r4, pc}
 8029532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802953a:	e7f7      	b.n	802952c <memmove+0x24>

0802953c <memset>:
 802953c:	4402      	add	r2, r0
 802953e:	4603      	mov	r3, r0
 8029540:	4293      	cmp	r3, r2
 8029542:	d100      	bne.n	8029546 <memset+0xa>
 8029544:	4770      	bx	lr
 8029546:	f803 1b01 	strb.w	r1, [r3], #1
 802954a:	e7f9      	b.n	8029540 <memset+0x4>

0802954c <_free_r>:
 802954c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802954e:	2900      	cmp	r1, #0
 8029550:	d048      	beq.n	80295e4 <_free_r+0x98>
 8029552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029556:	9001      	str	r0, [sp, #4]
 8029558:	2b00      	cmp	r3, #0
 802955a:	f1a1 0404 	sub.w	r4, r1, #4
 802955e:	bfb8      	it	lt
 8029560:	18e4      	addlt	r4, r4, r3
 8029562:	f002 facd 	bl	802bb00 <__malloc_lock>
 8029566:	4a20      	ldr	r2, [pc, #128]	; (80295e8 <_free_r+0x9c>)
 8029568:	9801      	ldr	r0, [sp, #4]
 802956a:	6813      	ldr	r3, [r2, #0]
 802956c:	4615      	mov	r5, r2
 802956e:	b933      	cbnz	r3, 802957e <_free_r+0x32>
 8029570:	6063      	str	r3, [r4, #4]
 8029572:	6014      	str	r4, [r2, #0]
 8029574:	b003      	add	sp, #12
 8029576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802957a:	f002 bac7 	b.w	802bb0c <__malloc_unlock>
 802957e:	42a3      	cmp	r3, r4
 8029580:	d90b      	bls.n	802959a <_free_r+0x4e>
 8029582:	6821      	ldr	r1, [r4, #0]
 8029584:	1862      	adds	r2, r4, r1
 8029586:	4293      	cmp	r3, r2
 8029588:	bf04      	itt	eq
 802958a:	681a      	ldreq	r2, [r3, #0]
 802958c:	685b      	ldreq	r3, [r3, #4]
 802958e:	6063      	str	r3, [r4, #4]
 8029590:	bf04      	itt	eq
 8029592:	1852      	addeq	r2, r2, r1
 8029594:	6022      	streq	r2, [r4, #0]
 8029596:	602c      	str	r4, [r5, #0]
 8029598:	e7ec      	b.n	8029574 <_free_r+0x28>
 802959a:	461a      	mov	r2, r3
 802959c:	685b      	ldr	r3, [r3, #4]
 802959e:	b10b      	cbz	r3, 80295a4 <_free_r+0x58>
 80295a0:	42a3      	cmp	r3, r4
 80295a2:	d9fa      	bls.n	802959a <_free_r+0x4e>
 80295a4:	6811      	ldr	r1, [r2, #0]
 80295a6:	1855      	adds	r5, r2, r1
 80295a8:	42a5      	cmp	r5, r4
 80295aa:	d10b      	bne.n	80295c4 <_free_r+0x78>
 80295ac:	6824      	ldr	r4, [r4, #0]
 80295ae:	4421      	add	r1, r4
 80295b0:	1854      	adds	r4, r2, r1
 80295b2:	42a3      	cmp	r3, r4
 80295b4:	6011      	str	r1, [r2, #0]
 80295b6:	d1dd      	bne.n	8029574 <_free_r+0x28>
 80295b8:	681c      	ldr	r4, [r3, #0]
 80295ba:	685b      	ldr	r3, [r3, #4]
 80295bc:	6053      	str	r3, [r2, #4]
 80295be:	4421      	add	r1, r4
 80295c0:	6011      	str	r1, [r2, #0]
 80295c2:	e7d7      	b.n	8029574 <_free_r+0x28>
 80295c4:	d902      	bls.n	80295cc <_free_r+0x80>
 80295c6:	230c      	movs	r3, #12
 80295c8:	6003      	str	r3, [r0, #0]
 80295ca:	e7d3      	b.n	8029574 <_free_r+0x28>
 80295cc:	6825      	ldr	r5, [r4, #0]
 80295ce:	1961      	adds	r1, r4, r5
 80295d0:	428b      	cmp	r3, r1
 80295d2:	bf04      	itt	eq
 80295d4:	6819      	ldreq	r1, [r3, #0]
 80295d6:	685b      	ldreq	r3, [r3, #4]
 80295d8:	6063      	str	r3, [r4, #4]
 80295da:	bf04      	itt	eq
 80295dc:	1949      	addeq	r1, r1, r5
 80295de:	6021      	streq	r1, [r4, #0]
 80295e0:	6054      	str	r4, [r2, #4]
 80295e2:	e7c7      	b.n	8029574 <_free_r+0x28>
 80295e4:	b003      	add	sp, #12
 80295e6:	bd30      	pop	{r4, r5, pc}
 80295e8:	2000b834 	.word	0x2000b834

080295ec <_malloc_r>:
 80295ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80295ee:	1ccd      	adds	r5, r1, #3
 80295f0:	f025 0503 	bic.w	r5, r5, #3
 80295f4:	3508      	adds	r5, #8
 80295f6:	2d0c      	cmp	r5, #12
 80295f8:	bf38      	it	cc
 80295fa:	250c      	movcc	r5, #12
 80295fc:	2d00      	cmp	r5, #0
 80295fe:	4606      	mov	r6, r0
 8029600:	db01      	blt.n	8029606 <_malloc_r+0x1a>
 8029602:	42a9      	cmp	r1, r5
 8029604:	d903      	bls.n	802960e <_malloc_r+0x22>
 8029606:	230c      	movs	r3, #12
 8029608:	6033      	str	r3, [r6, #0]
 802960a:	2000      	movs	r0, #0
 802960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802960e:	f002 fa77 	bl	802bb00 <__malloc_lock>
 8029612:	4921      	ldr	r1, [pc, #132]	; (8029698 <_malloc_r+0xac>)
 8029614:	680a      	ldr	r2, [r1, #0]
 8029616:	4614      	mov	r4, r2
 8029618:	b99c      	cbnz	r4, 8029642 <_malloc_r+0x56>
 802961a:	4f20      	ldr	r7, [pc, #128]	; (802969c <_malloc_r+0xb0>)
 802961c:	683b      	ldr	r3, [r7, #0]
 802961e:	b923      	cbnz	r3, 802962a <_malloc_r+0x3e>
 8029620:	4621      	mov	r1, r4
 8029622:	4630      	mov	r0, r6
 8029624:	f000 fe08 	bl	802a238 <_sbrk_r>
 8029628:	6038      	str	r0, [r7, #0]
 802962a:	4629      	mov	r1, r5
 802962c:	4630      	mov	r0, r6
 802962e:	f000 fe03 	bl	802a238 <_sbrk_r>
 8029632:	1c43      	adds	r3, r0, #1
 8029634:	d123      	bne.n	802967e <_malloc_r+0x92>
 8029636:	230c      	movs	r3, #12
 8029638:	6033      	str	r3, [r6, #0]
 802963a:	4630      	mov	r0, r6
 802963c:	f002 fa66 	bl	802bb0c <__malloc_unlock>
 8029640:	e7e3      	b.n	802960a <_malloc_r+0x1e>
 8029642:	6823      	ldr	r3, [r4, #0]
 8029644:	1b5b      	subs	r3, r3, r5
 8029646:	d417      	bmi.n	8029678 <_malloc_r+0x8c>
 8029648:	2b0b      	cmp	r3, #11
 802964a:	d903      	bls.n	8029654 <_malloc_r+0x68>
 802964c:	6023      	str	r3, [r4, #0]
 802964e:	441c      	add	r4, r3
 8029650:	6025      	str	r5, [r4, #0]
 8029652:	e004      	b.n	802965e <_malloc_r+0x72>
 8029654:	6863      	ldr	r3, [r4, #4]
 8029656:	42a2      	cmp	r2, r4
 8029658:	bf0c      	ite	eq
 802965a:	600b      	streq	r3, [r1, #0]
 802965c:	6053      	strne	r3, [r2, #4]
 802965e:	4630      	mov	r0, r6
 8029660:	f002 fa54 	bl	802bb0c <__malloc_unlock>
 8029664:	f104 000b 	add.w	r0, r4, #11
 8029668:	1d23      	adds	r3, r4, #4
 802966a:	f020 0007 	bic.w	r0, r0, #7
 802966e:	1ac2      	subs	r2, r0, r3
 8029670:	d0cc      	beq.n	802960c <_malloc_r+0x20>
 8029672:	1a1b      	subs	r3, r3, r0
 8029674:	50a3      	str	r3, [r4, r2]
 8029676:	e7c9      	b.n	802960c <_malloc_r+0x20>
 8029678:	4622      	mov	r2, r4
 802967a:	6864      	ldr	r4, [r4, #4]
 802967c:	e7cc      	b.n	8029618 <_malloc_r+0x2c>
 802967e:	1cc4      	adds	r4, r0, #3
 8029680:	f024 0403 	bic.w	r4, r4, #3
 8029684:	42a0      	cmp	r0, r4
 8029686:	d0e3      	beq.n	8029650 <_malloc_r+0x64>
 8029688:	1a21      	subs	r1, r4, r0
 802968a:	4630      	mov	r0, r6
 802968c:	f000 fdd4 	bl	802a238 <_sbrk_r>
 8029690:	3001      	adds	r0, #1
 8029692:	d1dd      	bne.n	8029650 <_malloc_r+0x64>
 8029694:	e7cf      	b.n	8029636 <_malloc_r+0x4a>
 8029696:	bf00      	nop
 8029698:	2000b834 	.word	0x2000b834
 802969c:	2000b838 	.word	0x2000b838

080296a0 <__sfputc_r>:
 80296a0:	6893      	ldr	r3, [r2, #8]
 80296a2:	3b01      	subs	r3, #1
 80296a4:	2b00      	cmp	r3, #0
 80296a6:	b410      	push	{r4}
 80296a8:	6093      	str	r3, [r2, #8]
 80296aa:	da08      	bge.n	80296be <__sfputc_r+0x1e>
 80296ac:	6994      	ldr	r4, [r2, #24]
 80296ae:	42a3      	cmp	r3, r4
 80296b0:	db01      	blt.n	80296b6 <__sfputc_r+0x16>
 80296b2:	290a      	cmp	r1, #10
 80296b4:	d103      	bne.n	80296be <__sfputc_r+0x1e>
 80296b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80296ba:	f001 b81b 	b.w	802a6f4 <__swbuf_r>
 80296be:	6813      	ldr	r3, [r2, #0]
 80296c0:	1c58      	adds	r0, r3, #1
 80296c2:	6010      	str	r0, [r2, #0]
 80296c4:	7019      	strb	r1, [r3, #0]
 80296c6:	4608      	mov	r0, r1
 80296c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80296cc:	4770      	bx	lr

080296ce <__sfputs_r>:
 80296ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80296d0:	4606      	mov	r6, r0
 80296d2:	460f      	mov	r7, r1
 80296d4:	4614      	mov	r4, r2
 80296d6:	18d5      	adds	r5, r2, r3
 80296d8:	42ac      	cmp	r4, r5
 80296da:	d101      	bne.n	80296e0 <__sfputs_r+0x12>
 80296dc:	2000      	movs	r0, #0
 80296de:	e007      	b.n	80296f0 <__sfputs_r+0x22>
 80296e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80296e4:	463a      	mov	r2, r7
 80296e6:	4630      	mov	r0, r6
 80296e8:	f7ff ffda 	bl	80296a0 <__sfputc_r>
 80296ec:	1c43      	adds	r3, r0, #1
 80296ee:	d1f3      	bne.n	80296d8 <__sfputs_r+0xa>
 80296f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080296f4 <_vfiprintf_r>:
 80296f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296f8:	460d      	mov	r5, r1
 80296fa:	b09d      	sub	sp, #116	; 0x74
 80296fc:	4614      	mov	r4, r2
 80296fe:	4698      	mov	r8, r3
 8029700:	4606      	mov	r6, r0
 8029702:	b118      	cbz	r0, 802970c <_vfiprintf_r+0x18>
 8029704:	6983      	ldr	r3, [r0, #24]
 8029706:	b90b      	cbnz	r3, 802970c <_vfiprintf_r+0x18>
 8029708:	f002 f8cc 	bl	802b8a4 <__sinit>
 802970c:	4b89      	ldr	r3, [pc, #548]	; (8029934 <_vfiprintf_r+0x240>)
 802970e:	429d      	cmp	r5, r3
 8029710:	d11b      	bne.n	802974a <_vfiprintf_r+0x56>
 8029712:	6875      	ldr	r5, [r6, #4]
 8029714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029716:	07d9      	lsls	r1, r3, #31
 8029718:	d405      	bmi.n	8029726 <_vfiprintf_r+0x32>
 802971a:	89ab      	ldrh	r3, [r5, #12]
 802971c:	059a      	lsls	r2, r3, #22
 802971e:	d402      	bmi.n	8029726 <_vfiprintf_r+0x32>
 8029720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029722:	f002 f962 	bl	802b9ea <__retarget_lock_acquire_recursive>
 8029726:	89ab      	ldrh	r3, [r5, #12]
 8029728:	071b      	lsls	r3, r3, #28
 802972a:	d501      	bpl.n	8029730 <_vfiprintf_r+0x3c>
 802972c:	692b      	ldr	r3, [r5, #16]
 802972e:	b9eb      	cbnz	r3, 802976c <_vfiprintf_r+0x78>
 8029730:	4629      	mov	r1, r5
 8029732:	4630      	mov	r0, r6
 8029734:	f001 f842 	bl	802a7bc <__swsetup_r>
 8029738:	b1c0      	cbz	r0, 802976c <_vfiprintf_r+0x78>
 802973a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802973c:	07dc      	lsls	r4, r3, #31
 802973e:	d50e      	bpl.n	802975e <_vfiprintf_r+0x6a>
 8029740:	f04f 30ff 	mov.w	r0, #4294967295
 8029744:	b01d      	add	sp, #116	; 0x74
 8029746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802974a:	4b7b      	ldr	r3, [pc, #492]	; (8029938 <_vfiprintf_r+0x244>)
 802974c:	429d      	cmp	r5, r3
 802974e:	d101      	bne.n	8029754 <_vfiprintf_r+0x60>
 8029750:	68b5      	ldr	r5, [r6, #8]
 8029752:	e7df      	b.n	8029714 <_vfiprintf_r+0x20>
 8029754:	4b79      	ldr	r3, [pc, #484]	; (802993c <_vfiprintf_r+0x248>)
 8029756:	429d      	cmp	r5, r3
 8029758:	bf08      	it	eq
 802975a:	68f5      	ldreq	r5, [r6, #12]
 802975c:	e7da      	b.n	8029714 <_vfiprintf_r+0x20>
 802975e:	89ab      	ldrh	r3, [r5, #12]
 8029760:	0598      	lsls	r0, r3, #22
 8029762:	d4ed      	bmi.n	8029740 <_vfiprintf_r+0x4c>
 8029764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029766:	f002 f942 	bl	802b9ee <__retarget_lock_release_recursive>
 802976a:	e7e9      	b.n	8029740 <_vfiprintf_r+0x4c>
 802976c:	2300      	movs	r3, #0
 802976e:	9309      	str	r3, [sp, #36]	; 0x24
 8029770:	2320      	movs	r3, #32
 8029772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029776:	f8cd 800c 	str.w	r8, [sp, #12]
 802977a:	2330      	movs	r3, #48	; 0x30
 802977c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8029940 <_vfiprintf_r+0x24c>
 8029780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029784:	f04f 0901 	mov.w	r9, #1
 8029788:	4623      	mov	r3, r4
 802978a:	469a      	mov	sl, r3
 802978c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029790:	b10a      	cbz	r2, 8029796 <_vfiprintf_r+0xa2>
 8029792:	2a25      	cmp	r2, #37	; 0x25
 8029794:	d1f9      	bne.n	802978a <_vfiprintf_r+0x96>
 8029796:	ebba 0b04 	subs.w	fp, sl, r4
 802979a:	d00b      	beq.n	80297b4 <_vfiprintf_r+0xc0>
 802979c:	465b      	mov	r3, fp
 802979e:	4622      	mov	r2, r4
 80297a0:	4629      	mov	r1, r5
 80297a2:	4630      	mov	r0, r6
 80297a4:	f7ff ff93 	bl	80296ce <__sfputs_r>
 80297a8:	3001      	adds	r0, #1
 80297aa:	f000 80aa 	beq.w	8029902 <_vfiprintf_r+0x20e>
 80297ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80297b0:	445a      	add	r2, fp
 80297b2:	9209      	str	r2, [sp, #36]	; 0x24
 80297b4:	f89a 3000 	ldrb.w	r3, [sl]
 80297b8:	2b00      	cmp	r3, #0
 80297ba:	f000 80a2 	beq.w	8029902 <_vfiprintf_r+0x20e>
 80297be:	2300      	movs	r3, #0
 80297c0:	f04f 32ff 	mov.w	r2, #4294967295
 80297c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80297c8:	f10a 0a01 	add.w	sl, sl, #1
 80297cc:	9304      	str	r3, [sp, #16]
 80297ce:	9307      	str	r3, [sp, #28]
 80297d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80297d4:	931a      	str	r3, [sp, #104]	; 0x68
 80297d6:	4654      	mov	r4, sl
 80297d8:	2205      	movs	r2, #5
 80297da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80297de:	4858      	ldr	r0, [pc, #352]	; (8029940 <_vfiprintf_r+0x24c>)
 80297e0:	f7d6 fd06 	bl	80001f0 <memchr>
 80297e4:	9a04      	ldr	r2, [sp, #16]
 80297e6:	b9d8      	cbnz	r0, 8029820 <_vfiprintf_r+0x12c>
 80297e8:	06d1      	lsls	r1, r2, #27
 80297ea:	bf44      	itt	mi
 80297ec:	2320      	movmi	r3, #32
 80297ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80297f2:	0713      	lsls	r3, r2, #28
 80297f4:	bf44      	itt	mi
 80297f6:	232b      	movmi	r3, #43	; 0x2b
 80297f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80297fc:	f89a 3000 	ldrb.w	r3, [sl]
 8029800:	2b2a      	cmp	r3, #42	; 0x2a
 8029802:	d015      	beq.n	8029830 <_vfiprintf_r+0x13c>
 8029804:	9a07      	ldr	r2, [sp, #28]
 8029806:	4654      	mov	r4, sl
 8029808:	2000      	movs	r0, #0
 802980a:	f04f 0c0a 	mov.w	ip, #10
 802980e:	4621      	mov	r1, r4
 8029810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029814:	3b30      	subs	r3, #48	; 0x30
 8029816:	2b09      	cmp	r3, #9
 8029818:	d94e      	bls.n	80298b8 <_vfiprintf_r+0x1c4>
 802981a:	b1b0      	cbz	r0, 802984a <_vfiprintf_r+0x156>
 802981c:	9207      	str	r2, [sp, #28]
 802981e:	e014      	b.n	802984a <_vfiprintf_r+0x156>
 8029820:	eba0 0308 	sub.w	r3, r0, r8
 8029824:	fa09 f303 	lsl.w	r3, r9, r3
 8029828:	4313      	orrs	r3, r2
 802982a:	9304      	str	r3, [sp, #16]
 802982c:	46a2      	mov	sl, r4
 802982e:	e7d2      	b.n	80297d6 <_vfiprintf_r+0xe2>
 8029830:	9b03      	ldr	r3, [sp, #12]
 8029832:	1d19      	adds	r1, r3, #4
 8029834:	681b      	ldr	r3, [r3, #0]
 8029836:	9103      	str	r1, [sp, #12]
 8029838:	2b00      	cmp	r3, #0
 802983a:	bfbb      	ittet	lt
 802983c:	425b      	neglt	r3, r3
 802983e:	f042 0202 	orrlt.w	r2, r2, #2
 8029842:	9307      	strge	r3, [sp, #28]
 8029844:	9307      	strlt	r3, [sp, #28]
 8029846:	bfb8      	it	lt
 8029848:	9204      	strlt	r2, [sp, #16]
 802984a:	7823      	ldrb	r3, [r4, #0]
 802984c:	2b2e      	cmp	r3, #46	; 0x2e
 802984e:	d10c      	bne.n	802986a <_vfiprintf_r+0x176>
 8029850:	7863      	ldrb	r3, [r4, #1]
 8029852:	2b2a      	cmp	r3, #42	; 0x2a
 8029854:	d135      	bne.n	80298c2 <_vfiprintf_r+0x1ce>
 8029856:	9b03      	ldr	r3, [sp, #12]
 8029858:	1d1a      	adds	r2, r3, #4
 802985a:	681b      	ldr	r3, [r3, #0]
 802985c:	9203      	str	r2, [sp, #12]
 802985e:	2b00      	cmp	r3, #0
 8029860:	bfb8      	it	lt
 8029862:	f04f 33ff 	movlt.w	r3, #4294967295
 8029866:	3402      	adds	r4, #2
 8029868:	9305      	str	r3, [sp, #20]
 802986a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029950 <_vfiprintf_r+0x25c>
 802986e:	7821      	ldrb	r1, [r4, #0]
 8029870:	2203      	movs	r2, #3
 8029872:	4650      	mov	r0, sl
 8029874:	f7d6 fcbc 	bl	80001f0 <memchr>
 8029878:	b140      	cbz	r0, 802988c <_vfiprintf_r+0x198>
 802987a:	2340      	movs	r3, #64	; 0x40
 802987c:	eba0 000a 	sub.w	r0, r0, sl
 8029880:	fa03 f000 	lsl.w	r0, r3, r0
 8029884:	9b04      	ldr	r3, [sp, #16]
 8029886:	4303      	orrs	r3, r0
 8029888:	3401      	adds	r4, #1
 802988a:	9304      	str	r3, [sp, #16]
 802988c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029890:	482c      	ldr	r0, [pc, #176]	; (8029944 <_vfiprintf_r+0x250>)
 8029892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029896:	2206      	movs	r2, #6
 8029898:	f7d6 fcaa 	bl	80001f0 <memchr>
 802989c:	2800      	cmp	r0, #0
 802989e:	d03f      	beq.n	8029920 <_vfiprintf_r+0x22c>
 80298a0:	4b29      	ldr	r3, [pc, #164]	; (8029948 <_vfiprintf_r+0x254>)
 80298a2:	bb1b      	cbnz	r3, 80298ec <_vfiprintf_r+0x1f8>
 80298a4:	9b03      	ldr	r3, [sp, #12]
 80298a6:	3307      	adds	r3, #7
 80298a8:	f023 0307 	bic.w	r3, r3, #7
 80298ac:	3308      	adds	r3, #8
 80298ae:	9303      	str	r3, [sp, #12]
 80298b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80298b2:	443b      	add	r3, r7
 80298b4:	9309      	str	r3, [sp, #36]	; 0x24
 80298b6:	e767      	b.n	8029788 <_vfiprintf_r+0x94>
 80298b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80298bc:	460c      	mov	r4, r1
 80298be:	2001      	movs	r0, #1
 80298c0:	e7a5      	b.n	802980e <_vfiprintf_r+0x11a>
 80298c2:	2300      	movs	r3, #0
 80298c4:	3401      	adds	r4, #1
 80298c6:	9305      	str	r3, [sp, #20]
 80298c8:	4619      	mov	r1, r3
 80298ca:	f04f 0c0a 	mov.w	ip, #10
 80298ce:	4620      	mov	r0, r4
 80298d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80298d4:	3a30      	subs	r2, #48	; 0x30
 80298d6:	2a09      	cmp	r2, #9
 80298d8:	d903      	bls.n	80298e2 <_vfiprintf_r+0x1ee>
 80298da:	2b00      	cmp	r3, #0
 80298dc:	d0c5      	beq.n	802986a <_vfiprintf_r+0x176>
 80298de:	9105      	str	r1, [sp, #20]
 80298e0:	e7c3      	b.n	802986a <_vfiprintf_r+0x176>
 80298e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80298e6:	4604      	mov	r4, r0
 80298e8:	2301      	movs	r3, #1
 80298ea:	e7f0      	b.n	80298ce <_vfiprintf_r+0x1da>
 80298ec:	ab03      	add	r3, sp, #12
 80298ee:	9300      	str	r3, [sp, #0]
 80298f0:	462a      	mov	r2, r5
 80298f2:	4b16      	ldr	r3, [pc, #88]	; (802994c <_vfiprintf_r+0x258>)
 80298f4:	a904      	add	r1, sp, #16
 80298f6:	4630      	mov	r0, r6
 80298f8:	f000 f8cc 	bl	8029a94 <_printf_float>
 80298fc:	4607      	mov	r7, r0
 80298fe:	1c78      	adds	r0, r7, #1
 8029900:	d1d6      	bne.n	80298b0 <_vfiprintf_r+0x1bc>
 8029902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029904:	07d9      	lsls	r1, r3, #31
 8029906:	d405      	bmi.n	8029914 <_vfiprintf_r+0x220>
 8029908:	89ab      	ldrh	r3, [r5, #12]
 802990a:	059a      	lsls	r2, r3, #22
 802990c:	d402      	bmi.n	8029914 <_vfiprintf_r+0x220>
 802990e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029910:	f002 f86d 	bl	802b9ee <__retarget_lock_release_recursive>
 8029914:	89ab      	ldrh	r3, [r5, #12]
 8029916:	065b      	lsls	r3, r3, #25
 8029918:	f53f af12 	bmi.w	8029740 <_vfiprintf_r+0x4c>
 802991c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802991e:	e711      	b.n	8029744 <_vfiprintf_r+0x50>
 8029920:	ab03      	add	r3, sp, #12
 8029922:	9300      	str	r3, [sp, #0]
 8029924:	462a      	mov	r2, r5
 8029926:	4b09      	ldr	r3, [pc, #36]	; (802994c <_vfiprintf_r+0x258>)
 8029928:	a904      	add	r1, sp, #16
 802992a:	4630      	mov	r0, r6
 802992c:	f000 fb56 	bl	8029fdc <_printf_i>
 8029930:	e7e4      	b.n	80298fc <_vfiprintf_r+0x208>
 8029932:	bf00      	nop
 8029934:	080314a8 	.word	0x080314a8
 8029938:	080314c8 	.word	0x080314c8
 802993c:	08031488 	.word	0x08031488
 8029940:	08031348 	.word	0x08031348
 8029944:	08031352 	.word	0x08031352
 8029948:	08029a95 	.word	0x08029a95
 802994c:	080296cf 	.word	0x080296cf
 8029950:	0803134e 	.word	0x0803134e

08029954 <__cvt>:
 8029954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029958:	ec55 4b10 	vmov	r4, r5, d0
 802995c:	2d00      	cmp	r5, #0
 802995e:	460e      	mov	r6, r1
 8029960:	4619      	mov	r1, r3
 8029962:	462b      	mov	r3, r5
 8029964:	bfbb      	ittet	lt
 8029966:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802996a:	461d      	movlt	r5, r3
 802996c:	2300      	movge	r3, #0
 802996e:	232d      	movlt	r3, #45	; 0x2d
 8029970:	700b      	strb	r3, [r1, #0]
 8029972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029974:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8029978:	4691      	mov	r9, r2
 802997a:	f023 0820 	bic.w	r8, r3, #32
 802997e:	bfbc      	itt	lt
 8029980:	4622      	movlt	r2, r4
 8029982:	4614      	movlt	r4, r2
 8029984:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8029988:	d005      	beq.n	8029996 <__cvt+0x42>
 802998a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802998e:	d100      	bne.n	8029992 <__cvt+0x3e>
 8029990:	3601      	adds	r6, #1
 8029992:	2102      	movs	r1, #2
 8029994:	e000      	b.n	8029998 <__cvt+0x44>
 8029996:	2103      	movs	r1, #3
 8029998:	ab03      	add	r3, sp, #12
 802999a:	9301      	str	r3, [sp, #4]
 802999c:	ab02      	add	r3, sp, #8
 802999e:	9300      	str	r3, [sp, #0]
 80299a0:	ec45 4b10 	vmov	d0, r4, r5
 80299a4:	4653      	mov	r3, sl
 80299a6:	4632      	mov	r2, r6
 80299a8:	f001 f876 	bl	802aa98 <_dtoa_r>
 80299ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80299b0:	4607      	mov	r7, r0
 80299b2:	d102      	bne.n	80299ba <__cvt+0x66>
 80299b4:	f019 0f01 	tst.w	r9, #1
 80299b8:	d022      	beq.n	8029a00 <__cvt+0xac>
 80299ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80299be:	eb07 0906 	add.w	r9, r7, r6
 80299c2:	d110      	bne.n	80299e6 <__cvt+0x92>
 80299c4:	783b      	ldrb	r3, [r7, #0]
 80299c6:	2b30      	cmp	r3, #48	; 0x30
 80299c8:	d10a      	bne.n	80299e0 <__cvt+0x8c>
 80299ca:	2200      	movs	r2, #0
 80299cc:	2300      	movs	r3, #0
 80299ce:	4620      	mov	r0, r4
 80299d0:	4629      	mov	r1, r5
 80299d2:	f7d7 f893 	bl	8000afc <__aeabi_dcmpeq>
 80299d6:	b918      	cbnz	r0, 80299e0 <__cvt+0x8c>
 80299d8:	f1c6 0601 	rsb	r6, r6, #1
 80299dc:	f8ca 6000 	str.w	r6, [sl]
 80299e0:	f8da 3000 	ldr.w	r3, [sl]
 80299e4:	4499      	add	r9, r3
 80299e6:	2200      	movs	r2, #0
 80299e8:	2300      	movs	r3, #0
 80299ea:	4620      	mov	r0, r4
 80299ec:	4629      	mov	r1, r5
 80299ee:	f7d7 f885 	bl	8000afc <__aeabi_dcmpeq>
 80299f2:	b108      	cbz	r0, 80299f8 <__cvt+0xa4>
 80299f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80299f8:	2230      	movs	r2, #48	; 0x30
 80299fa:	9b03      	ldr	r3, [sp, #12]
 80299fc:	454b      	cmp	r3, r9
 80299fe:	d307      	bcc.n	8029a10 <__cvt+0xbc>
 8029a00:	9b03      	ldr	r3, [sp, #12]
 8029a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029a04:	1bdb      	subs	r3, r3, r7
 8029a06:	4638      	mov	r0, r7
 8029a08:	6013      	str	r3, [r2, #0]
 8029a0a:	b004      	add	sp, #16
 8029a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029a10:	1c59      	adds	r1, r3, #1
 8029a12:	9103      	str	r1, [sp, #12]
 8029a14:	701a      	strb	r2, [r3, #0]
 8029a16:	e7f0      	b.n	80299fa <__cvt+0xa6>

08029a18 <__exponent>:
 8029a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029a1a:	4603      	mov	r3, r0
 8029a1c:	2900      	cmp	r1, #0
 8029a1e:	bfb8      	it	lt
 8029a20:	4249      	neglt	r1, r1
 8029a22:	f803 2b02 	strb.w	r2, [r3], #2
 8029a26:	bfb4      	ite	lt
 8029a28:	222d      	movlt	r2, #45	; 0x2d
 8029a2a:	222b      	movge	r2, #43	; 0x2b
 8029a2c:	2909      	cmp	r1, #9
 8029a2e:	7042      	strb	r2, [r0, #1]
 8029a30:	dd2a      	ble.n	8029a88 <__exponent+0x70>
 8029a32:	f10d 0407 	add.w	r4, sp, #7
 8029a36:	46a4      	mov	ip, r4
 8029a38:	270a      	movs	r7, #10
 8029a3a:	46a6      	mov	lr, r4
 8029a3c:	460a      	mov	r2, r1
 8029a3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8029a42:	fb07 1516 	mls	r5, r7, r6, r1
 8029a46:	3530      	adds	r5, #48	; 0x30
 8029a48:	2a63      	cmp	r2, #99	; 0x63
 8029a4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8029a4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8029a52:	4631      	mov	r1, r6
 8029a54:	dcf1      	bgt.n	8029a3a <__exponent+0x22>
 8029a56:	3130      	adds	r1, #48	; 0x30
 8029a58:	f1ae 0502 	sub.w	r5, lr, #2
 8029a5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8029a60:	1c44      	adds	r4, r0, #1
 8029a62:	4629      	mov	r1, r5
 8029a64:	4561      	cmp	r1, ip
 8029a66:	d30a      	bcc.n	8029a7e <__exponent+0x66>
 8029a68:	f10d 0209 	add.w	r2, sp, #9
 8029a6c:	eba2 020e 	sub.w	r2, r2, lr
 8029a70:	4565      	cmp	r5, ip
 8029a72:	bf88      	it	hi
 8029a74:	2200      	movhi	r2, #0
 8029a76:	4413      	add	r3, r2
 8029a78:	1a18      	subs	r0, r3, r0
 8029a7a:	b003      	add	sp, #12
 8029a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029a82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8029a86:	e7ed      	b.n	8029a64 <__exponent+0x4c>
 8029a88:	2330      	movs	r3, #48	; 0x30
 8029a8a:	3130      	adds	r1, #48	; 0x30
 8029a8c:	7083      	strb	r3, [r0, #2]
 8029a8e:	70c1      	strb	r1, [r0, #3]
 8029a90:	1d03      	adds	r3, r0, #4
 8029a92:	e7f1      	b.n	8029a78 <__exponent+0x60>

08029a94 <_printf_float>:
 8029a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a98:	ed2d 8b02 	vpush	{d8}
 8029a9c:	b08d      	sub	sp, #52	; 0x34
 8029a9e:	460c      	mov	r4, r1
 8029aa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8029aa4:	4616      	mov	r6, r2
 8029aa6:	461f      	mov	r7, r3
 8029aa8:	4605      	mov	r5, r0
 8029aaa:	f001 ff99 	bl	802b9e0 <_localeconv_r>
 8029aae:	f8d0 a000 	ldr.w	sl, [r0]
 8029ab2:	4650      	mov	r0, sl
 8029ab4:	f7d6 fbf6 	bl	80002a4 <strlen>
 8029ab8:	2300      	movs	r3, #0
 8029aba:	930a      	str	r3, [sp, #40]	; 0x28
 8029abc:	6823      	ldr	r3, [r4, #0]
 8029abe:	9305      	str	r3, [sp, #20]
 8029ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8029ac4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8029ac8:	3307      	adds	r3, #7
 8029aca:	f023 0307 	bic.w	r3, r3, #7
 8029ace:	f103 0208 	add.w	r2, r3, #8
 8029ad2:	f8c8 2000 	str.w	r2, [r8]
 8029ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029ada:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8029ade:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8029ae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8029ae6:	9307      	str	r3, [sp, #28]
 8029ae8:	f8cd 8018 	str.w	r8, [sp, #24]
 8029aec:	ee08 0a10 	vmov	s16, r0
 8029af0:	4b9f      	ldr	r3, [pc, #636]	; (8029d70 <_printf_float+0x2dc>)
 8029af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029af6:	f04f 32ff 	mov.w	r2, #4294967295
 8029afa:	f7d7 f831 	bl	8000b60 <__aeabi_dcmpun>
 8029afe:	bb88      	cbnz	r0, 8029b64 <_printf_float+0xd0>
 8029b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029b04:	4b9a      	ldr	r3, [pc, #616]	; (8029d70 <_printf_float+0x2dc>)
 8029b06:	f04f 32ff 	mov.w	r2, #4294967295
 8029b0a:	f7d7 f80b 	bl	8000b24 <__aeabi_dcmple>
 8029b0e:	bb48      	cbnz	r0, 8029b64 <_printf_float+0xd0>
 8029b10:	2200      	movs	r2, #0
 8029b12:	2300      	movs	r3, #0
 8029b14:	4640      	mov	r0, r8
 8029b16:	4649      	mov	r1, r9
 8029b18:	f7d6 fffa 	bl	8000b10 <__aeabi_dcmplt>
 8029b1c:	b110      	cbz	r0, 8029b24 <_printf_float+0x90>
 8029b1e:	232d      	movs	r3, #45	; 0x2d
 8029b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029b24:	4b93      	ldr	r3, [pc, #588]	; (8029d74 <_printf_float+0x2e0>)
 8029b26:	4894      	ldr	r0, [pc, #592]	; (8029d78 <_printf_float+0x2e4>)
 8029b28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8029b2c:	bf94      	ite	ls
 8029b2e:	4698      	movls	r8, r3
 8029b30:	4680      	movhi	r8, r0
 8029b32:	2303      	movs	r3, #3
 8029b34:	6123      	str	r3, [r4, #16]
 8029b36:	9b05      	ldr	r3, [sp, #20]
 8029b38:	f023 0204 	bic.w	r2, r3, #4
 8029b3c:	6022      	str	r2, [r4, #0]
 8029b3e:	f04f 0900 	mov.w	r9, #0
 8029b42:	9700      	str	r7, [sp, #0]
 8029b44:	4633      	mov	r3, r6
 8029b46:	aa0b      	add	r2, sp, #44	; 0x2c
 8029b48:	4621      	mov	r1, r4
 8029b4a:	4628      	mov	r0, r5
 8029b4c:	f000 f9d8 	bl	8029f00 <_printf_common>
 8029b50:	3001      	adds	r0, #1
 8029b52:	f040 8090 	bne.w	8029c76 <_printf_float+0x1e2>
 8029b56:	f04f 30ff 	mov.w	r0, #4294967295
 8029b5a:	b00d      	add	sp, #52	; 0x34
 8029b5c:	ecbd 8b02 	vpop	{d8}
 8029b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b64:	4642      	mov	r2, r8
 8029b66:	464b      	mov	r3, r9
 8029b68:	4640      	mov	r0, r8
 8029b6a:	4649      	mov	r1, r9
 8029b6c:	f7d6 fff8 	bl	8000b60 <__aeabi_dcmpun>
 8029b70:	b140      	cbz	r0, 8029b84 <_printf_float+0xf0>
 8029b72:	464b      	mov	r3, r9
 8029b74:	2b00      	cmp	r3, #0
 8029b76:	bfbc      	itt	lt
 8029b78:	232d      	movlt	r3, #45	; 0x2d
 8029b7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8029b7e:	487f      	ldr	r0, [pc, #508]	; (8029d7c <_printf_float+0x2e8>)
 8029b80:	4b7f      	ldr	r3, [pc, #508]	; (8029d80 <_printf_float+0x2ec>)
 8029b82:	e7d1      	b.n	8029b28 <_printf_float+0x94>
 8029b84:	6863      	ldr	r3, [r4, #4]
 8029b86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8029b8a:	9206      	str	r2, [sp, #24]
 8029b8c:	1c5a      	adds	r2, r3, #1
 8029b8e:	d13f      	bne.n	8029c10 <_printf_float+0x17c>
 8029b90:	2306      	movs	r3, #6
 8029b92:	6063      	str	r3, [r4, #4]
 8029b94:	9b05      	ldr	r3, [sp, #20]
 8029b96:	6861      	ldr	r1, [r4, #4]
 8029b98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8029b9c:	2300      	movs	r3, #0
 8029b9e:	9303      	str	r3, [sp, #12]
 8029ba0:	ab0a      	add	r3, sp, #40	; 0x28
 8029ba2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8029ba6:	ab09      	add	r3, sp, #36	; 0x24
 8029ba8:	ec49 8b10 	vmov	d0, r8, r9
 8029bac:	9300      	str	r3, [sp, #0]
 8029bae:	6022      	str	r2, [r4, #0]
 8029bb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8029bb4:	4628      	mov	r0, r5
 8029bb6:	f7ff fecd 	bl	8029954 <__cvt>
 8029bba:	9b06      	ldr	r3, [sp, #24]
 8029bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029bbe:	2b47      	cmp	r3, #71	; 0x47
 8029bc0:	4680      	mov	r8, r0
 8029bc2:	d108      	bne.n	8029bd6 <_printf_float+0x142>
 8029bc4:	1cc8      	adds	r0, r1, #3
 8029bc6:	db02      	blt.n	8029bce <_printf_float+0x13a>
 8029bc8:	6863      	ldr	r3, [r4, #4]
 8029bca:	4299      	cmp	r1, r3
 8029bcc:	dd41      	ble.n	8029c52 <_printf_float+0x1be>
 8029bce:	f1ab 0b02 	sub.w	fp, fp, #2
 8029bd2:	fa5f fb8b 	uxtb.w	fp, fp
 8029bd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8029bda:	d820      	bhi.n	8029c1e <_printf_float+0x18a>
 8029bdc:	3901      	subs	r1, #1
 8029bde:	465a      	mov	r2, fp
 8029be0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8029be4:	9109      	str	r1, [sp, #36]	; 0x24
 8029be6:	f7ff ff17 	bl	8029a18 <__exponent>
 8029bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029bec:	1813      	adds	r3, r2, r0
 8029bee:	2a01      	cmp	r2, #1
 8029bf0:	4681      	mov	r9, r0
 8029bf2:	6123      	str	r3, [r4, #16]
 8029bf4:	dc02      	bgt.n	8029bfc <_printf_float+0x168>
 8029bf6:	6822      	ldr	r2, [r4, #0]
 8029bf8:	07d2      	lsls	r2, r2, #31
 8029bfa:	d501      	bpl.n	8029c00 <_printf_float+0x16c>
 8029bfc:	3301      	adds	r3, #1
 8029bfe:	6123      	str	r3, [r4, #16]
 8029c00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8029c04:	2b00      	cmp	r3, #0
 8029c06:	d09c      	beq.n	8029b42 <_printf_float+0xae>
 8029c08:	232d      	movs	r3, #45	; 0x2d
 8029c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029c0e:	e798      	b.n	8029b42 <_printf_float+0xae>
 8029c10:	9a06      	ldr	r2, [sp, #24]
 8029c12:	2a47      	cmp	r2, #71	; 0x47
 8029c14:	d1be      	bne.n	8029b94 <_printf_float+0x100>
 8029c16:	2b00      	cmp	r3, #0
 8029c18:	d1bc      	bne.n	8029b94 <_printf_float+0x100>
 8029c1a:	2301      	movs	r3, #1
 8029c1c:	e7b9      	b.n	8029b92 <_printf_float+0xfe>
 8029c1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8029c22:	d118      	bne.n	8029c56 <_printf_float+0x1c2>
 8029c24:	2900      	cmp	r1, #0
 8029c26:	6863      	ldr	r3, [r4, #4]
 8029c28:	dd0b      	ble.n	8029c42 <_printf_float+0x1ae>
 8029c2a:	6121      	str	r1, [r4, #16]
 8029c2c:	b913      	cbnz	r3, 8029c34 <_printf_float+0x1a0>
 8029c2e:	6822      	ldr	r2, [r4, #0]
 8029c30:	07d0      	lsls	r0, r2, #31
 8029c32:	d502      	bpl.n	8029c3a <_printf_float+0x1a6>
 8029c34:	3301      	adds	r3, #1
 8029c36:	440b      	add	r3, r1
 8029c38:	6123      	str	r3, [r4, #16]
 8029c3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8029c3c:	f04f 0900 	mov.w	r9, #0
 8029c40:	e7de      	b.n	8029c00 <_printf_float+0x16c>
 8029c42:	b913      	cbnz	r3, 8029c4a <_printf_float+0x1b6>
 8029c44:	6822      	ldr	r2, [r4, #0]
 8029c46:	07d2      	lsls	r2, r2, #31
 8029c48:	d501      	bpl.n	8029c4e <_printf_float+0x1ba>
 8029c4a:	3302      	adds	r3, #2
 8029c4c:	e7f4      	b.n	8029c38 <_printf_float+0x1a4>
 8029c4e:	2301      	movs	r3, #1
 8029c50:	e7f2      	b.n	8029c38 <_printf_float+0x1a4>
 8029c52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8029c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029c58:	4299      	cmp	r1, r3
 8029c5a:	db05      	blt.n	8029c68 <_printf_float+0x1d4>
 8029c5c:	6823      	ldr	r3, [r4, #0]
 8029c5e:	6121      	str	r1, [r4, #16]
 8029c60:	07d8      	lsls	r0, r3, #31
 8029c62:	d5ea      	bpl.n	8029c3a <_printf_float+0x1a6>
 8029c64:	1c4b      	adds	r3, r1, #1
 8029c66:	e7e7      	b.n	8029c38 <_printf_float+0x1a4>
 8029c68:	2900      	cmp	r1, #0
 8029c6a:	bfd4      	ite	le
 8029c6c:	f1c1 0202 	rsble	r2, r1, #2
 8029c70:	2201      	movgt	r2, #1
 8029c72:	4413      	add	r3, r2
 8029c74:	e7e0      	b.n	8029c38 <_printf_float+0x1a4>
 8029c76:	6823      	ldr	r3, [r4, #0]
 8029c78:	055a      	lsls	r2, r3, #21
 8029c7a:	d407      	bmi.n	8029c8c <_printf_float+0x1f8>
 8029c7c:	6923      	ldr	r3, [r4, #16]
 8029c7e:	4642      	mov	r2, r8
 8029c80:	4631      	mov	r1, r6
 8029c82:	4628      	mov	r0, r5
 8029c84:	47b8      	blx	r7
 8029c86:	3001      	adds	r0, #1
 8029c88:	d12c      	bne.n	8029ce4 <_printf_float+0x250>
 8029c8a:	e764      	b.n	8029b56 <_printf_float+0xc2>
 8029c8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8029c90:	f240 80e0 	bls.w	8029e54 <_printf_float+0x3c0>
 8029c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8029c98:	2200      	movs	r2, #0
 8029c9a:	2300      	movs	r3, #0
 8029c9c:	f7d6 ff2e 	bl	8000afc <__aeabi_dcmpeq>
 8029ca0:	2800      	cmp	r0, #0
 8029ca2:	d034      	beq.n	8029d0e <_printf_float+0x27a>
 8029ca4:	4a37      	ldr	r2, [pc, #220]	; (8029d84 <_printf_float+0x2f0>)
 8029ca6:	2301      	movs	r3, #1
 8029ca8:	4631      	mov	r1, r6
 8029caa:	4628      	mov	r0, r5
 8029cac:	47b8      	blx	r7
 8029cae:	3001      	adds	r0, #1
 8029cb0:	f43f af51 	beq.w	8029b56 <_printf_float+0xc2>
 8029cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029cb8:	429a      	cmp	r2, r3
 8029cba:	db02      	blt.n	8029cc2 <_printf_float+0x22e>
 8029cbc:	6823      	ldr	r3, [r4, #0]
 8029cbe:	07d8      	lsls	r0, r3, #31
 8029cc0:	d510      	bpl.n	8029ce4 <_printf_float+0x250>
 8029cc2:	ee18 3a10 	vmov	r3, s16
 8029cc6:	4652      	mov	r2, sl
 8029cc8:	4631      	mov	r1, r6
 8029cca:	4628      	mov	r0, r5
 8029ccc:	47b8      	blx	r7
 8029cce:	3001      	adds	r0, #1
 8029cd0:	f43f af41 	beq.w	8029b56 <_printf_float+0xc2>
 8029cd4:	f04f 0800 	mov.w	r8, #0
 8029cd8:	f104 091a 	add.w	r9, r4, #26
 8029cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029cde:	3b01      	subs	r3, #1
 8029ce0:	4543      	cmp	r3, r8
 8029ce2:	dc09      	bgt.n	8029cf8 <_printf_float+0x264>
 8029ce4:	6823      	ldr	r3, [r4, #0]
 8029ce6:	079b      	lsls	r3, r3, #30
 8029ce8:	f100 8105 	bmi.w	8029ef6 <_printf_float+0x462>
 8029cec:	68e0      	ldr	r0, [r4, #12]
 8029cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029cf0:	4298      	cmp	r0, r3
 8029cf2:	bfb8      	it	lt
 8029cf4:	4618      	movlt	r0, r3
 8029cf6:	e730      	b.n	8029b5a <_printf_float+0xc6>
 8029cf8:	2301      	movs	r3, #1
 8029cfa:	464a      	mov	r2, r9
 8029cfc:	4631      	mov	r1, r6
 8029cfe:	4628      	mov	r0, r5
 8029d00:	47b8      	blx	r7
 8029d02:	3001      	adds	r0, #1
 8029d04:	f43f af27 	beq.w	8029b56 <_printf_float+0xc2>
 8029d08:	f108 0801 	add.w	r8, r8, #1
 8029d0c:	e7e6      	b.n	8029cdc <_printf_float+0x248>
 8029d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029d10:	2b00      	cmp	r3, #0
 8029d12:	dc39      	bgt.n	8029d88 <_printf_float+0x2f4>
 8029d14:	4a1b      	ldr	r2, [pc, #108]	; (8029d84 <_printf_float+0x2f0>)
 8029d16:	2301      	movs	r3, #1
 8029d18:	4631      	mov	r1, r6
 8029d1a:	4628      	mov	r0, r5
 8029d1c:	47b8      	blx	r7
 8029d1e:	3001      	adds	r0, #1
 8029d20:	f43f af19 	beq.w	8029b56 <_printf_float+0xc2>
 8029d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029d28:	4313      	orrs	r3, r2
 8029d2a:	d102      	bne.n	8029d32 <_printf_float+0x29e>
 8029d2c:	6823      	ldr	r3, [r4, #0]
 8029d2e:	07d9      	lsls	r1, r3, #31
 8029d30:	d5d8      	bpl.n	8029ce4 <_printf_float+0x250>
 8029d32:	ee18 3a10 	vmov	r3, s16
 8029d36:	4652      	mov	r2, sl
 8029d38:	4631      	mov	r1, r6
 8029d3a:	4628      	mov	r0, r5
 8029d3c:	47b8      	blx	r7
 8029d3e:	3001      	adds	r0, #1
 8029d40:	f43f af09 	beq.w	8029b56 <_printf_float+0xc2>
 8029d44:	f04f 0900 	mov.w	r9, #0
 8029d48:	f104 0a1a 	add.w	sl, r4, #26
 8029d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029d4e:	425b      	negs	r3, r3
 8029d50:	454b      	cmp	r3, r9
 8029d52:	dc01      	bgt.n	8029d58 <_printf_float+0x2c4>
 8029d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029d56:	e792      	b.n	8029c7e <_printf_float+0x1ea>
 8029d58:	2301      	movs	r3, #1
 8029d5a:	4652      	mov	r2, sl
 8029d5c:	4631      	mov	r1, r6
 8029d5e:	4628      	mov	r0, r5
 8029d60:	47b8      	blx	r7
 8029d62:	3001      	adds	r0, #1
 8029d64:	f43f aef7 	beq.w	8029b56 <_printf_float+0xc2>
 8029d68:	f109 0901 	add.w	r9, r9, #1
 8029d6c:	e7ee      	b.n	8029d4c <_printf_float+0x2b8>
 8029d6e:	bf00      	nop
 8029d70:	7fefffff 	.word	0x7fefffff
 8029d74:	08031359 	.word	0x08031359
 8029d78:	0803135d 	.word	0x0803135d
 8029d7c:	08031365 	.word	0x08031365
 8029d80:	08031361 	.word	0x08031361
 8029d84:	080309ed 	.word	0x080309ed
 8029d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8029d8c:	429a      	cmp	r2, r3
 8029d8e:	bfa8      	it	ge
 8029d90:	461a      	movge	r2, r3
 8029d92:	2a00      	cmp	r2, #0
 8029d94:	4691      	mov	r9, r2
 8029d96:	dc37      	bgt.n	8029e08 <_printf_float+0x374>
 8029d98:	f04f 0b00 	mov.w	fp, #0
 8029d9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8029da0:	f104 021a 	add.w	r2, r4, #26
 8029da4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8029da6:	9305      	str	r3, [sp, #20]
 8029da8:	eba3 0309 	sub.w	r3, r3, r9
 8029dac:	455b      	cmp	r3, fp
 8029dae:	dc33      	bgt.n	8029e18 <_printf_float+0x384>
 8029db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029db4:	429a      	cmp	r2, r3
 8029db6:	db3b      	blt.n	8029e30 <_printf_float+0x39c>
 8029db8:	6823      	ldr	r3, [r4, #0]
 8029dba:	07da      	lsls	r2, r3, #31
 8029dbc:	d438      	bmi.n	8029e30 <_printf_float+0x39c>
 8029dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029dc0:	9b05      	ldr	r3, [sp, #20]
 8029dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029dc4:	1ad3      	subs	r3, r2, r3
 8029dc6:	eba2 0901 	sub.w	r9, r2, r1
 8029dca:	4599      	cmp	r9, r3
 8029dcc:	bfa8      	it	ge
 8029dce:	4699      	movge	r9, r3
 8029dd0:	f1b9 0f00 	cmp.w	r9, #0
 8029dd4:	dc35      	bgt.n	8029e42 <_printf_float+0x3ae>
 8029dd6:	f04f 0800 	mov.w	r8, #0
 8029dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8029dde:	f104 0a1a 	add.w	sl, r4, #26
 8029de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029de6:	1a9b      	subs	r3, r3, r2
 8029de8:	eba3 0309 	sub.w	r3, r3, r9
 8029dec:	4543      	cmp	r3, r8
 8029dee:	f77f af79 	ble.w	8029ce4 <_printf_float+0x250>
 8029df2:	2301      	movs	r3, #1
 8029df4:	4652      	mov	r2, sl
 8029df6:	4631      	mov	r1, r6
 8029df8:	4628      	mov	r0, r5
 8029dfa:	47b8      	blx	r7
 8029dfc:	3001      	adds	r0, #1
 8029dfe:	f43f aeaa 	beq.w	8029b56 <_printf_float+0xc2>
 8029e02:	f108 0801 	add.w	r8, r8, #1
 8029e06:	e7ec      	b.n	8029de2 <_printf_float+0x34e>
 8029e08:	4613      	mov	r3, r2
 8029e0a:	4631      	mov	r1, r6
 8029e0c:	4642      	mov	r2, r8
 8029e0e:	4628      	mov	r0, r5
 8029e10:	47b8      	blx	r7
 8029e12:	3001      	adds	r0, #1
 8029e14:	d1c0      	bne.n	8029d98 <_printf_float+0x304>
 8029e16:	e69e      	b.n	8029b56 <_printf_float+0xc2>
 8029e18:	2301      	movs	r3, #1
 8029e1a:	4631      	mov	r1, r6
 8029e1c:	4628      	mov	r0, r5
 8029e1e:	9205      	str	r2, [sp, #20]
 8029e20:	47b8      	blx	r7
 8029e22:	3001      	adds	r0, #1
 8029e24:	f43f ae97 	beq.w	8029b56 <_printf_float+0xc2>
 8029e28:	9a05      	ldr	r2, [sp, #20]
 8029e2a:	f10b 0b01 	add.w	fp, fp, #1
 8029e2e:	e7b9      	b.n	8029da4 <_printf_float+0x310>
 8029e30:	ee18 3a10 	vmov	r3, s16
 8029e34:	4652      	mov	r2, sl
 8029e36:	4631      	mov	r1, r6
 8029e38:	4628      	mov	r0, r5
 8029e3a:	47b8      	blx	r7
 8029e3c:	3001      	adds	r0, #1
 8029e3e:	d1be      	bne.n	8029dbe <_printf_float+0x32a>
 8029e40:	e689      	b.n	8029b56 <_printf_float+0xc2>
 8029e42:	9a05      	ldr	r2, [sp, #20]
 8029e44:	464b      	mov	r3, r9
 8029e46:	4442      	add	r2, r8
 8029e48:	4631      	mov	r1, r6
 8029e4a:	4628      	mov	r0, r5
 8029e4c:	47b8      	blx	r7
 8029e4e:	3001      	adds	r0, #1
 8029e50:	d1c1      	bne.n	8029dd6 <_printf_float+0x342>
 8029e52:	e680      	b.n	8029b56 <_printf_float+0xc2>
 8029e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029e56:	2a01      	cmp	r2, #1
 8029e58:	dc01      	bgt.n	8029e5e <_printf_float+0x3ca>
 8029e5a:	07db      	lsls	r3, r3, #31
 8029e5c:	d538      	bpl.n	8029ed0 <_printf_float+0x43c>
 8029e5e:	2301      	movs	r3, #1
 8029e60:	4642      	mov	r2, r8
 8029e62:	4631      	mov	r1, r6
 8029e64:	4628      	mov	r0, r5
 8029e66:	47b8      	blx	r7
 8029e68:	3001      	adds	r0, #1
 8029e6a:	f43f ae74 	beq.w	8029b56 <_printf_float+0xc2>
 8029e6e:	ee18 3a10 	vmov	r3, s16
 8029e72:	4652      	mov	r2, sl
 8029e74:	4631      	mov	r1, r6
 8029e76:	4628      	mov	r0, r5
 8029e78:	47b8      	blx	r7
 8029e7a:	3001      	adds	r0, #1
 8029e7c:	f43f ae6b 	beq.w	8029b56 <_printf_float+0xc2>
 8029e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8029e84:	2200      	movs	r2, #0
 8029e86:	2300      	movs	r3, #0
 8029e88:	f7d6 fe38 	bl	8000afc <__aeabi_dcmpeq>
 8029e8c:	b9d8      	cbnz	r0, 8029ec6 <_printf_float+0x432>
 8029e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029e90:	f108 0201 	add.w	r2, r8, #1
 8029e94:	3b01      	subs	r3, #1
 8029e96:	4631      	mov	r1, r6
 8029e98:	4628      	mov	r0, r5
 8029e9a:	47b8      	blx	r7
 8029e9c:	3001      	adds	r0, #1
 8029e9e:	d10e      	bne.n	8029ebe <_printf_float+0x42a>
 8029ea0:	e659      	b.n	8029b56 <_printf_float+0xc2>
 8029ea2:	2301      	movs	r3, #1
 8029ea4:	4652      	mov	r2, sl
 8029ea6:	4631      	mov	r1, r6
 8029ea8:	4628      	mov	r0, r5
 8029eaa:	47b8      	blx	r7
 8029eac:	3001      	adds	r0, #1
 8029eae:	f43f ae52 	beq.w	8029b56 <_printf_float+0xc2>
 8029eb2:	f108 0801 	add.w	r8, r8, #1
 8029eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029eb8:	3b01      	subs	r3, #1
 8029eba:	4543      	cmp	r3, r8
 8029ebc:	dcf1      	bgt.n	8029ea2 <_printf_float+0x40e>
 8029ebe:	464b      	mov	r3, r9
 8029ec0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8029ec4:	e6dc      	b.n	8029c80 <_printf_float+0x1ec>
 8029ec6:	f04f 0800 	mov.w	r8, #0
 8029eca:	f104 0a1a 	add.w	sl, r4, #26
 8029ece:	e7f2      	b.n	8029eb6 <_printf_float+0x422>
 8029ed0:	2301      	movs	r3, #1
 8029ed2:	4642      	mov	r2, r8
 8029ed4:	e7df      	b.n	8029e96 <_printf_float+0x402>
 8029ed6:	2301      	movs	r3, #1
 8029ed8:	464a      	mov	r2, r9
 8029eda:	4631      	mov	r1, r6
 8029edc:	4628      	mov	r0, r5
 8029ede:	47b8      	blx	r7
 8029ee0:	3001      	adds	r0, #1
 8029ee2:	f43f ae38 	beq.w	8029b56 <_printf_float+0xc2>
 8029ee6:	f108 0801 	add.w	r8, r8, #1
 8029eea:	68e3      	ldr	r3, [r4, #12]
 8029eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029eee:	1a5b      	subs	r3, r3, r1
 8029ef0:	4543      	cmp	r3, r8
 8029ef2:	dcf0      	bgt.n	8029ed6 <_printf_float+0x442>
 8029ef4:	e6fa      	b.n	8029cec <_printf_float+0x258>
 8029ef6:	f04f 0800 	mov.w	r8, #0
 8029efa:	f104 0919 	add.w	r9, r4, #25
 8029efe:	e7f4      	b.n	8029eea <_printf_float+0x456>

08029f00 <_printf_common>:
 8029f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029f04:	4616      	mov	r6, r2
 8029f06:	4699      	mov	r9, r3
 8029f08:	688a      	ldr	r2, [r1, #8]
 8029f0a:	690b      	ldr	r3, [r1, #16]
 8029f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029f10:	4293      	cmp	r3, r2
 8029f12:	bfb8      	it	lt
 8029f14:	4613      	movlt	r3, r2
 8029f16:	6033      	str	r3, [r6, #0]
 8029f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8029f1c:	4607      	mov	r7, r0
 8029f1e:	460c      	mov	r4, r1
 8029f20:	b10a      	cbz	r2, 8029f26 <_printf_common+0x26>
 8029f22:	3301      	adds	r3, #1
 8029f24:	6033      	str	r3, [r6, #0]
 8029f26:	6823      	ldr	r3, [r4, #0]
 8029f28:	0699      	lsls	r1, r3, #26
 8029f2a:	bf42      	ittt	mi
 8029f2c:	6833      	ldrmi	r3, [r6, #0]
 8029f2e:	3302      	addmi	r3, #2
 8029f30:	6033      	strmi	r3, [r6, #0]
 8029f32:	6825      	ldr	r5, [r4, #0]
 8029f34:	f015 0506 	ands.w	r5, r5, #6
 8029f38:	d106      	bne.n	8029f48 <_printf_common+0x48>
 8029f3a:	f104 0a19 	add.w	sl, r4, #25
 8029f3e:	68e3      	ldr	r3, [r4, #12]
 8029f40:	6832      	ldr	r2, [r6, #0]
 8029f42:	1a9b      	subs	r3, r3, r2
 8029f44:	42ab      	cmp	r3, r5
 8029f46:	dc26      	bgt.n	8029f96 <_printf_common+0x96>
 8029f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8029f4c:	1e13      	subs	r3, r2, #0
 8029f4e:	6822      	ldr	r2, [r4, #0]
 8029f50:	bf18      	it	ne
 8029f52:	2301      	movne	r3, #1
 8029f54:	0692      	lsls	r2, r2, #26
 8029f56:	d42b      	bmi.n	8029fb0 <_printf_common+0xb0>
 8029f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029f5c:	4649      	mov	r1, r9
 8029f5e:	4638      	mov	r0, r7
 8029f60:	47c0      	blx	r8
 8029f62:	3001      	adds	r0, #1
 8029f64:	d01e      	beq.n	8029fa4 <_printf_common+0xa4>
 8029f66:	6823      	ldr	r3, [r4, #0]
 8029f68:	68e5      	ldr	r5, [r4, #12]
 8029f6a:	6832      	ldr	r2, [r6, #0]
 8029f6c:	f003 0306 	and.w	r3, r3, #6
 8029f70:	2b04      	cmp	r3, #4
 8029f72:	bf08      	it	eq
 8029f74:	1aad      	subeq	r5, r5, r2
 8029f76:	68a3      	ldr	r3, [r4, #8]
 8029f78:	6922      	ldr	r2, [r4, #16]
 8029f7a:	bf0c      	ite	eq
 8029f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029f80:	2500      	movne	r5, #0
 8029f82:	4293      	cmp	r3, r2
 8029f84:	bfc4      	itt	gt
 8029f86:	1a9b      	subgt	r3, r3, r2
 8029f88:	18ed      	addgt	r5, r5, r3
 8029f8a:	2600      	movs	r6, #0
 8029f8c:	341a      	adds	r4, #26
 8029f8e:	42b5      	cmp	r5, r6
 8029f90:	d11a      	bne.n	8029fc8 <_printf_common+0xc8>
 8029f92:	2000      	movs	r0, #0
 8029f94:	e008      	b.n	8029fa8 <_printf_common+0xa8>
 8029f96:	2301      	movs	r3, #1
 8029f98:	4652      	mov	r2, sl
 8029f9a:	4649      	mov	r1, r9
 8029f9c:	4638      	mov	r0, r7
 8029f9e:	47c0      	blx	r8
 8029fa0:	3001      	adds	r0, #1
 8029fa2:	d103      	bne.n	8029fac <_printf_common+0xac>
 8029fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8029fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029fac:	3501      	adds	r5, #1
 8029fae:	e7c6      	b.n	8029f3e <_printf_common+0x3e>
 8029fb0:	18e1      	adds	r1, r4, r3
 8029fb2:	1c5a      	adds	r2, r3, #1
 8029fb4:	2030      	movs	r0, #48	; 0x30
 8029fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029fba:	4422      	add	r2, r4
 8029fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029fc4:	3302      	adds	r3, #2
 8029fc6:	e7c7      	b.n	8029f58 <_printf_common+0x58>
 8029fc8:	2301      	movs	r3, #1
 8029fca:	4622      	mov	r2, r4
 8029fcc:	4649      	mov	r1, r9
 8029fce:	4638      	mov	r0, r7
 8029fd0:	47c0      	blx	r8
 8029fd2:	3001      	adds	r0, #1
 8029fd4:	d0e6      	beq.n	8029fa4 <_printf_common+0xa4>
 8029fd6:	3601      	adds	r6, #1
 8029fd8:	e7d9      	b.n	8029f8e <_printf_common+0x8e>
	...

08029fdc <_printf_i>:
 8029fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029fe0:	460c      	mov	r4, r1
 8029fe2:	4691      	mov	r9, r2
 8029fe4:	7e27      	ldrb	r7, [r4, #24]
 8029fe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029fe8:	2f78      	cmp	r7, #120	; 0x78
 8029fea:	4680      	mov	r8, r0
 8029fec:	469a      	mov	sl, r3
 8029fee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029ff2:	d807      	bhi.n	802a004 <_printf_i+0x28>
 8029ff4:	2f62      	cmp	r7, #98	; 0x62
 8029ff6:	d80a      	bhi.n	802a00e <_printf_i+0x32>
 8029ff8:	2f00      	cmp	r7, #0
 8029ffa:	f000 80d8 	beq.w	802a1ae <_printf_i+0x1d2>
 8029ffe:	2f58      	cmp	r7, #88	; 0x58
 802a000:	f000 80a3 	beq.w	802a14a <_printf_i+0x16e>
 802a004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802a008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802a00c:	e03a      	b.n	802a084 <_printf_i+0xa8>
 802a00e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802a012:	2b15      	cmp	r3, #21
 802a014:	d8f6      	bhi.n	802a004 <_printf_i+0x28>
 802a016:	a001      	add	r0, pc, #4	; (adr r0, 802a01c <_printf_i+0x40>)
 802a018:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802a01c:	0802a075 	.word	0x0802a075
 802a020:	0802a089 	.word	0x0802a089
 802a024:	0802a005 	.word	0x0802a005
 802a028:	0802a005 	.word	0x0802a005
 802a02c:	0802a005 	.word	0x0802a005
 802a030:	0802a005 	.word	0x0802a005
 802a034:	0802a089 	.word	0x0802a089
 802a038:	0802a005 	.word	0x0802a005
 802a03c:	0802a005 	.word	0x0802a005
 802a040:	0802a005 	.word	0x0802a005
 802a044:	0802a005 	.word	0x0802a005
 802a048:	0802a195 	.word	0x0802a195
 802a04c:	0802a0b9 	.word	0x0802a0b9
 802a050:	0802a177 	.word	0x0802a177
 802a054:	0802a005 	.word	0x0802a005
 802a058:	0802a005 	.word	0x0802a005
 802a05c:	0802a1b7 	.word	0x0802a1b7
 802a060:	0802a005 	.word	0x0802a005
 802a064:	0802a0b9 	.word	0x0802a0b9
 802a068:	0802a005 	.word	0x0802a005
 802a06c:	0802a005 	.word	0x0802a005
 802a070:	0802a17f 	.word	0x0802a17f
 802a074:	680b      	ldr	r3, [r1, #0]
 802a076:	1d1a      	adds	r2, r3, #4
 802a078:	681b      	ldr	r3, [r3, #0]
 802a07a:	600a      	str	r2, [r1, #0]
 802a07c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802a080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a084:	2301      	movs	r3, #1
 802a086:	e0a3      	b.n	802a1d0 <_printf_i+0x1f4>
 802a088:	6825      	ldr	r5, [r4, #0]
 802a08a:	6808      	ldr	r0, [r1, #0]
 802a08c:	062e      	lsls	r6, r5, #24
 802a08e:	f100 0304 	add.w	r3, r0, #4
 802a092:	d50a      	bpl.n	802a0aa <_printf_i+0xce>
 802a094:	6805      	ldr	r5, [r0, #0]
 802a096:	600b      	str	r3, [r1, #0]
 802a098:	2d00      	cmp	r5, #0
 802a09a:	da03      	bge.n	802a0a4 <_printf_i+0xc8>
 802a09c:	232d      	movs	r3, #45	; 0x2d
 802a09e:	426d      	negs	r5, r5
 802a0a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a0a4:	485e      	ldr	r0, [pc, #376]	; (802a220 <_printf_i+0x244>)
 802a0a6:	230a      	movs	r3, #10
 802a0a8:	e019      	b.n	802a0de <_printf_i+0x102>
 802a0aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 802a0ae:	6805      	ldr	r5, [r0, #0]
 802a0b0:	600b      	str	r3, [r1, #0]
 802a0b2:	bf18      	it	ne
 802a0b4:	b22d      	sxthne	r5, r5
 802a0b6:	e7ef      	b.n	802a098 <_printf_i+0xbc>
 802a0b8:	680b      	ldr	r3, [r1, #0]
 802a0ba:	6825      	ldr	r5, [r4, #0]
 802a0bc:	1d18      	adds	r0, r3, #4
 802a0be:	6008      	str	r0, [r1, #0]
 802a0c0:	0628      	lsls	r0, r5, #24
 802a0c2:	d501      	bpl.n	802a0c8 <_printf_i+0xec>
 802a0c4:	681d      	ldr	r5, [r3, #0]
 802a0c6:	e002      	b.n	802a0ce <_printf_i+0xf2>
 802a0c8:	0669      	lsls	r1, r5, #25
 802a0ca:	d5fb      	bpl.n	802a0c4 <_printf_i+0xe8>
 802a0cc:	881d      	ldrh	r5, [r3, #0]
 802a0ce:	4854      	ldr	r0, [pc, #336]	; (802a220 <_printf_i+0x244>)
 802a0d0:	2f6f      	cmp	r7, #111	; 0x6f
 802a0d2:	bf0c      	ite	eq
 802a0d4:	2308      	moveq	r3, #8
 802a0d6:	230a      	movne	r3, #10
 802a0d8:	2100      	movs	r1, #0
 802a0da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a0de:	6866      	ldr	r6, [r4, #4]
 802a0e0:	60a6      	str	r6, [r4, #8]
 802a0e2:	2e00      	cmp	r6, #0
 802a0e4:	bfa2      	ittt	ge
 802a0e6:	6821      	ldrge	r1, [r4, #0]
 802a0e8:	f021 0104 	bicge.w	r1, r1, #4
 802a0ec:	6021      	strge	r1, [r4, #0]
 802a0ee:	b90d      	cbnz	r5, 802a0f4 <_printf_i+0x118>
 802a0f0:	2e00      	cmp	r6, #0
 802a0f2:	d04d      	beq.n	802a190 <_printf_i+0x1b4>
 802a0f4:	4616      	mov	r6, r2
 802a0f6:	fbb5 f1f3 	udiv	r1, r5, r3
 802a0fa:	fb03 5711 	mls	r7, r3, r1, r5
 802a0fe:	5dc7      	ldrb	r7, [r0, r7]
 802a100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802a104:	462f      	mov	r7, r5
 802a106:	42bb      	cmp	r3, r7
 802a108:	460d      	mov	r5, r1
 802a10a:	d9f4      	bls.n	802a0f6 <_printf_i+0x11a>
 802a10c:	2b08      	cmp	r3, #8
 802a10e:	d10b      	bne.n	802a128 <_printf_i+0x14c>
 802a110:	6823      	ldr	r3, [r4, #0]
 802a112:	07df      	lsls	r7, r3, #31
 802a114:	d508      	bpl.n	802a128 <_printf_i+0x14c>
 802a116:	6923      	ldr	r3, [r4, #16]
 802a118:	6861      	ldr	r1, [r4, #4]
 802a11a:	4299      	cmp	r1, r3
 802a11c:	bfde      	ittt	le
 802a11e:	2330      	movle	r3, #48	; 0x30
 802a120:	f806 3c01 	strble.w	r3, [r6, #-1]
 802a124:	f106 36ff 	addle.w	r6, r6, #4294967295
 802a128:	1b92      	subs	r2, r2, r6
 802a12a:	6122      	str	r2, [r4, #16]
 802a12c:	f8cd a000 	str.w	sl, [sp]
 802a130:	464b      	mov	r3, r9
 802a132:	aa03      	add	r2, sp, #12
 802a134:	4621      	mov	r1, r4
 802a136:	4640      	mov	r0, r8
 802a138:	f7ff fee2 	bl	8029f00 <_printf_common>
 802a13c:	3001      	adds	r0, #1
 802a13e:	d14c      	bne.n	802a1da <_printf_i+0x1fe>
 802a140:	f04f 30ff 	mov.w	r0, #4294967295
 802a144:	b004      	add	sp, #16
 802a146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a14a:	4835      	ldr	r0, [pc, #212]	; (802a220 <_printf_i+0x244>)
 802a14c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802a150:	6823      	ldr	r3, [r4, #0]
 802a152:	680e      	ldr	r6, [r1, #0]
 802a154:	061f      	lsls	r7, r3, #24
 802a156:	f856 5b04 	ldr.w	r5, [r6], #4
 802a15a:	600e      	str	r6, [r1, #0]
 802a15c:	d514      	bpl.n	802a188 <_printf_i+0x1ac>
 802a15e:	07d9      	lsls	r1, r3, #31
 802a160:	bf44      	itt	mi
 802a162:	f043 0320 	orrmi.w	r3, r3, #32
 802a166:	6023      	strmi	r3, [r4, #0]
 802a168:	b91d      	cbnz	r5, 802a172 <_printf_i+0x196>
 802a16a:	6823      	ldr	r3, [r4, #0]
 802a16c:	f023 0320 	bic.w	r3, r3, #32
 802a170:	6023      	str	r3, [r4, #0]
 802a172:	2310      	movs	r3, #16
 802a174:	e7b0      	b.n	802a0d8 <_printf_i+0xfc>
 802a176:	6823      	ldr	r3, [r4, #0]
 802a178:	f043 0320 	orr.w	r3, r3, #32
 802a17c:	6023      	str	r3, [r4, #0]
 802a17e:	2378      	movs	r3, #120	; 0x78
 802a180:	4828      	ldr	r0, [pc, #160]	; (802a224 <_printf_i+0x248>)
 802a182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a186:	e7e3      	b.n	802a150 <_printf_i+0x174>
 802a188:	065e      	lsls	r6, r3, #25
 802a18a:	bf48      	it	mi
 802a18c:	b2ad      	uxthmi	r5, r5
 802a18e:	e7e6      	b.n	802a15e <_printf_i+0x182>
 802a190:	4616      	mov	r6, r2
 802a192:	e7bb      	b.n	802a10c <_printf_i+0x130>
 802a194:	680b      	ldr	r3, [r1, #0]
 802a196:	6826      	ldr	r6, [r4, #0]
 802a198:	6960      	ldr	r0, [r4, #20]
 802a19a:	1d1d      	adds	r5, r3, #4
 802a19c:	600d      	str	r5, [r1, #0]
 802a19e:	0635      	lsls	r5, r6, #24
 802a1a0:	681b      	ldr	r3, [r3, #0]
 802a1a2:	d501      	bpl.n	802a1a8 <_printf_i+0x1cc>
 802a1a4:	6018      	str	r0, [r3, #0]
 802a1a6:	e002      	b.n	802a1ae <_printf_i+0x1d2>
 802a1a8:	0671      	lsls	r1, r6, #25
 802a1aa:	d5fb      	bpl.n	802a1a4 <_printf_i+0x1c8>
 802a1ac:	8018      	strh	r0, [r3, #0]
 802a1ae:	2300      	movs	r3, #0
 802a1b0:	6123      	str	r3, [r4, #16]
 802a1b2:	4616      	mov	r6, r2
 802a1b4:	e7ba      	b.n	802a12c <_printf_i+0x150>
 802a1b6:	680b      	ldr	r3, [r1, #0]
 802a1b8:	1d1a      	adds	r2, r3, #4
 802a1ba:	600a      	str	r2, [r1, #0]
 802a1bc:	681e      	ldr	r6, [r3, #0]
 802a1be:	6862      	ldr	r2, [r4, #4]
 802a1c0:	2100      	movs	r1, #0
 802a1c2:	4630      	mov	r0, r6
 802a1c4:	f7d6 f814 	bl	80001f0 <memchr>
 802a1c8:	b108      	cbz	r0, 802a1ce <_printf_i+0x1f2>
 802a1ca:	1b80      	subs	r0, r0, r6
 802a1cc:	6060      	str	r0, [r4, #4]
 802a1ce:	6863      	ldr	r3, [r4, #4]
 802a1d0:	6123      	str	r3, [r4, #16]
 802a1d2:	2300      	movs	r3, #0
 802a1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a1d8:	e7a8      	b.n	802a12c <_printf_i+0x150>
 802a1da:	6923      	ldr	r3, [r4, #16]
 802a1dc:	4632      	mov	r2, r6
 802a1de:	4649      	mov	r1, r9
 802a1e0:	4640      	mov	r0, r8
 802a1e2:	47d0      	blx	sl
 802a1e4:	3001      	adds	r0, #1
 802a1e6:	d0ab      	beq.n	802a140 <_printf_i+0x164>
 802a1e8:	6823      	ldr	r3, [r4, #0]
 802a1ea:	079b      	lsls	r3, r3, #30
 802a1ec:	d413      	bmi.n	802a216 <_printf_i+0x23a>
 802a1ee:	68e0      	ldr	r0, [r4, #12]
 802a1f0:	9b03      	ldr	r3, [sp, #12]
 802a1f2:	4298      	cmp	r0, r3
 802a1f4:	bfb8      	it	lt
 802a1f6:	4618      	movlt	r0, r3
 802a1f8:	e7a4      	b.n	802a144 <_printf_i+0x168>
 802a1fa:	2301      	movs	r3, #1
 802a1fc:	4632      	mov	r2, r6
 802a1fe:	4649      	mov	r1, r9
 802a200:	4640      	mov	r0, r8
 802a202:	47d0      	blx	sl
 802a204:	3001      	adds	r0, #1
 802a206:	d09b      	beq.n	802a140 <_printf_i+0x164>
 802a208:	3501      	adds	r5, #1
 802a20a:	68e3      	ldr	r3, [r4, #12]
 802a20c:	9903      	ldr	r1, [sp, #12]
 802a20e:	1a5b      	subs	r3, r3, r1
 802a210:	42ab      	cmp	r3, r5
 802a212:	dcf2      	bgt.n	802a1fa <_printf_i+0x21e>
 802a214:	e7eb      	b.n	802a1ee <_printf_i+0x212>
 802a216:	2500      	movs	r5, #0
 802a218:	f104 0619 	add.w	r6, r4, #25
 802a21c:	e7f5      	b.n	802a20a <_printf_i+0x22e>
 802a21e:	bf00      	nop
 802a220:	08031369 	.word	0x08031369
 802a224:	0803137a 	.word	0x0803137a

0802a228 <realloc>:
 802a228:	4b02      	ldr	r3, [pc, #8]	; (802a234 <realloc+0xc>)
 802a22a:	460a      	mov	r2, r1
 802a22c:	4601      	mov	r1, r0
 802a22e:	6818      	ldr	r0, [r3, #0]
 802a230:	f001 bfff 	b.w	802c232 <_realloc_r>
 802a234:	2000010c 	.word	0x2000010c

0802a238 <_sbrk_r>:
 802a238:	b538      	push	{r3, r4, r5, lr}
 802a23a:	4d06      	ldr	r5, [pc, #24]	; (802a254 <_sbrk_r+0x1c>)
 802a23c:	2300      	movs	r3, #0
 802a23e:	4604      	mov	r4, r0
 802a240:	4608      	mov	r0, r1
 802a242:	602b      	str	r3, [r5, #0]
 802a244:	f7da fe6a 	bl	8004f1c <_sbrk>
 802a248:	1c43      	adds	r3, r0, #1
 802a24a:	d102      	bne.n	802a252 <_sbrk_r+0x1a>
 802a24c:	682b      	ldr	r3, [r5, #0]
 802a24e:	b103      	cbz	r3, 802a252 <_sbrk_r+0x1a>
 802a250:	6023      	str	r3, [r4, #0]
 802a252:	bd38      	pop	{r3, r4, r5, pc}
 802a254:	2000c650 	.word	0x2000c650

0802a258 <_raise_r>:
 802a258:	291f      	cmp	r1, #31
 802a25a:	b538      	push	{r3, r4, r5, lr}
 802a25c:	4604      	mov	r4, r0
 802a25e:	460d      	mov	r5, r1
 802a260:	d904      	bls.n	802a26c <_raise_r+0x14>
 802a262:	2316      	movs	r3, #22
 802a264:	6003      	str	r3, [r0, #0]
 802a266:	f04f 30ff 	mov.w	r0, #4294967295
 802a26a:	bd38      	pop	{r3, r4, r5, pc}
 802a26c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a26e:	b112      	cbz	r2, 802a276 <_raise_r+0x1e>
 802a270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a274:	b94b      	cbnz	r3, 802a28a <_raise_r+0x32>
 802a276:	4620      	mov	r0, r4
 802a278:	f000 f830 	bl	802a2dc <_getpid_r>
 802a27c:	462a      	mov	r2, r5
 802a27e:	4601      	mov	r1, r0
 802a280:	4620      	mov	r0, r4
 802a282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a286:	f000 b817 	b.w	802a2b8 <_kill_r>
 802a28a:	2b01      	cmp	r3, #1
 802a28c:	d00a      	beq.n	802a2a4 <_raise_r+0x4c>
 802a28e:	1c59      	adds	r1, r3, #1
 802a290:	d103      	bne.n	802a29a <_raise_r+0x42>
 802a292:	2316      	movs	r3, #22
 802a294:	6003      	str	r3, [r0, #0]
 802a296:	2001      	movs	r0, #1
 802a298:	e7e7      	b.n	802a26a <_raise_r+0x12>
 802a29a:	2400      	movs	r4, #0
 802a29c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a2a0:	4628      	mov	r0, r5
 802a2a2:	4798      	blx	r3
 802a2a4:	2000      	movs	r0, #0
 802a2a6:	e7e0      	b.n	802a26a <_raise_r+0x12>

0802a2a8 <raise>:
 802a2a8:	4b02      	ldr	r3, [pc, #8]	; (802a2b4 <raise+0xc>)
 802a2aa:	4601      	mov	r1, r0
 802a2ac:	6818      	ldr	r0, [r3, #0]
 802a2ae:	f7ff bfd3 	b.w	802a258 <_raise_r>
 802a2b2:	bf00      	nop
 802a2b4:	2000010c 	.word	0x2000010c

0802a2b8 <_kill_r>:
 802a2b8:	b538      	push	{r3, r4, r5, lr}
 802a2ba:	4d07      	ldr	r5, [pc, #28]	; (802a2d8 <_kill_r+0x20>)
 802a2bc:	2300      	movs	r3, #0
 802a2be:	4604      	mov	r4, r0
 802a2c0:	4608      	mov	r0, r1
 802a2c2:	4611      	mov	r1, r2
 802a2c4:	602b      	str	r3, [r5, #0]
 802a2c6:	f7da fda1 	bl	8004e0c <_kill>
 802a2ca:	1c43      	adds	r3, r0, #1
 802a2cc:	d102      	bne.n	802a2d4 <_kill_r+0x1c>
 802a2ce:	682b      	ldr	r3, [r5, #0]
 802a2d0:	b103      	cbz	r3, 802a2d4 <_kill_r+0x1c>
 802a2d2:	6023      	str	r3, [r4, #0]
 802a2d4:	bd38      	pop	{r3, r4, r5, pc}
 802a2d6:	bf00      	nop
 802a2d8:	2000c650 	.word	0x2000c650

0802a2dc <_getpid_r>:
 802a2dc:	f7da bd8e 	b.w	8004dfc <_getpid>

0802a2e0 <sniprintf>:
 802a2e0:	b40c      	push	{r2, r3}
 802a2e2:	b530      	push	{r4, r5, lr}
 802a2e4:	4b17      	ldr	r3, [pc, #92]	; (802a344 <sniprintf+0x64>)
 802a2e6:	1e0c      	subs	r4, r1, #0
 802a2e8:	681d      	ldr	r5, [r3, #0]
 802a2ea:	b09d      	sub	sp, #116	; 0x74
 802a2ec:	da08      	bge.n	802a300 <sniprintf+0x20>
 802a2ee:	238b      	movs	r3, #139	; 0x8b
 802a2f0:	602b      	str	r3, [r5, #0]
 802a2f2:	f04f 30ff 	mov.w	r0, #4294967295
 802a2f6:	b01d      	add	sp, #116	; 0x74
 802a2f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a2fc:	b002      	add	sp, #8
 802a2fe:	4770      	bx	lr
 802a300:	f44f 7302 	mov.w	r3, #520	; 0x208
 802a304:	f8ad 3014 	strh.w	r3, [sp, #20]
 802a308:	bf14      	ite	ne
 802a30a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802a30e:	4623      	moveq	r3, r4
 802a310:	9304      	str	r3, [sp, #16]
 802a312:	9307      	str	r3, [sp, #28]
 802a314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a318:	9002      	str	r0, [sp, #8]
 802a31a:	9006      	str	r0, [sp, #24]
 802a31c:	f8ad 3016 	strh.w	r3, [sp, #22]
 802a320:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802a322:	ab21      	add	r3, sp, #132	; 0x84
 802a324:	a902      	add	r1, sp, #8
 802a326:	4628      	mov	r0, r5
 802a328:	9301      	str	r3, [sp, #4]
 802a32a:	f002 f803 	bl	802c334 <_svfiprintf_r>
 802a32e:	1c43      	adds	r3, r0, #1
 802a330:	bfbc      	itt	lt
 802a332:	238b      	movlt	r3, #139	; 0x8b
 802a334:	602b      	strlt	r3, [r5, #0]
 802a336:	2c00      	cmp	r4, #0
 802a338:	d0dd      	beq.n	802a2f6 <sniprintf+0x16>
 802a33a:	9b02      	ldr	r3, [sp, #8]
 802a33c:	2200      	movs	r2, #0
 802a33e:	701a      	strb	r2, [r3, #0]
 802a340:	e7d9      	b.n	802a2f6 <sniprintf+0x16>
 802a342:	bf00      	nop
 802a344:	2000010c 	.word	0x2000010c

0802a348 <siprintf>:
 802a348:	b40e      	push	{r1, r2, r3}
 802a34a:	b500      	push	{lr}
 802a34c:	b09c      	sub	sp, #112	; 0x70
 802a34e:	ab1d      	add	r3, sp, #116	; 0x74
 802a350:	9002      	str	r0, [sp, #8]
 802a352:	9006      	str	r0, [sp, #24]
 802a354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802a358:	4809      	ldr	r0, [pc, #36]	; (802a380 <siprintf+0x38>)
 802a35a:	9107      	str	r1, [sp, #28]
 802a35c:	9104      	str	r1, [sp, #16]
 802a35e:	4909      	ldr	r1, [pc, #36]	; (802a384 <siprintf+0x3c>)
 802a360:	f853 2b04 	ldr.w	r2, [r3], #4
 802a364:	9105      	str	r1, [sp, #20]
 802a366:	6800      	ldr	r0, [r0, #0]
 802a368:	9301      	str	r3, [sp, #4]
 802a36a:	a902      	add	r1, sp, #8
 802a36c:	f001 ffe2 	bl	802c334 <_svfiprintf_r>
 802a370:	9b02      	ldr	r3, [sp, #8]
 802a372:	2200      	movs	r2, #0
 802a374:	701a      	strb	r2, [r3, #0]
 802a376:	b01c      	add	sp, #112	; 0x70
 802a378:	f85d eb04 	ldr.w	lr, [sp], #4
 802a37c:	b003      	add	sp, #12
 802a37e:	4770      	bx	lr
 802a380:	2000010c 	.word	0x2000010c
 802a384:	ffff0208 	.word	0xffff0208

0802a388 <siscanf>:
 802a388:	b40e      	push	{r1, r2, r3}
 802a38a:	b510      	push	{r4, lr}
 802a38c:	b09f      	sub	sp, #124	; 0x7c
 802a38e:	ac21      	add	r4, sp, #132	; 0x84
 802a390:	f44f 7101 	mov.w	r1, #516	; 0x204
 802a394:	f854 2b04 	ldr.w	r2, [r4], #4
 802a398:	9201      	str	r2, [sp, #4]
 802a39a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802a39e:	9004      	str	r0, [sp, #16]
 802a3a0:	9008      	str	r0, [sp, #32]
 802a3a2:	f7d5 ff7f 	bl	80002a4 <strlen>
 802a3a6:	4b0c      	ldr	r3, [pc, #48]	; (802a3d8 <siscanf+0x50>)
 802a3a8:	9005      	str	r0, [sp, #20]
 802a3aa:	9009      	str	r0, [sp, #36]	; 0x24
 802a3ac:	930d      	str	r3, [sp, #52]	; 0x34
 802a3ae:	480b      	ldr	r0, [pc, #44]	; (802a3dc <siscanf+0x54>)
 802a3b0:	9a01      	ldr	r2, [sp, #4]
 802a3b2:	6800      	ldr	r0, [r0, #0]
 802a3b4:	9403      	str	r4, [sp, #12]
 802a3b6:	2300      	movs	r3, #0
 802a3b8:	9311      	str	r3, [sp, #68]	; 0x44
 802a3ba:	9316      	str	r3, [sp, #88]	; 0x58
 802a3bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a3c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 802a3c4:	a904      	add	r1, sp, #16
 802a3c6:	4623      	mov	r3, r4
 802a3c8:	f002 f90e 	bl	802c5e8 <__ssvfiscanf_r>
 802a3cc:	b01f      	add	sp, #124	; 0x7c
 802a3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a3d2:	b003      	add	sp, #12
 802a3d4:	4770      	bx	lr
 802a3d6:	bf00      	nop
 802a3d8:	0802a403 	.word	0x0802a403
 802a3dc:	2000010c 	.word	0x2000010c

0802a3e0 <__sread>:
 802a3e0:	b510      	push	{r4, lr}
 802a3e2:	460c      	mov	r4, r1
 802a3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a3e8:	f002 fbc2 	bl	802cb70 <_read_r>
 802a3ec:	2800      	cmp	r0, #0
 802a3ee:	bfab      	itete	ge
 802a3f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a3f2:	89a3      	ldrhlt	r3, [r4, #12]
 802a3f4:	181b      	addge	r3, r3, r0
 802a3f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a3fa:	bfac      	ite	ge
 802a3fc:	6563      	strge	r3, [r4, #84]	; 0x54
 802a3fe:	81a3      	strhlt	r3, [r4, #12]
 802a400:	bd10      	pop	{r4, pc}

0802a402 <__seofread>:
 802a402:	2000      	movs	r0, #0
 802a404:	4770      	bx	lr

0802a406 <__swrite>:
 802a406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a40a:	461f      	mov	r7, r3
 802a40c:	898b      	ldrh	r3, [r1, #12]
 802a40e:	05db      	lsls	r3, r3, #23
 802a410:	4605      	mov	r5, r0
 802a412:	460c      	mov	r4, r1
 802a414:	4616      	mov	r6, r2
 802a416:	d505      	bpl.n	802a424 <__swrite+0x1e>
 802a418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a41c:	2302      	movs	r3, #2
 802a41e:	2200      	movs	r2, #0
 802a420:	f001 fae6 	bl	802b9f0 <_lseek_r>
 802a424:	89a3      	ldrh	r3, [r4, #12]
 802a426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a42a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a42e:	81a3      	strh	r3, [r4, #12]
 802a430:	4632      	mov	r2, r6
 802a432:	463b      	mov	r3, r7
 802a434:	4628      	mov	r0, r5
 802a436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a43a:	f000 b9ad 	b.w	802a798 <_write_r>

0802a43e <__sseek>:
 802a43e:	b510      	push	{r4, lr}
 802a440:	460c      	mov	r4, r1
 802a442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a446:	f001 fad3 	bl	802b9f0 <_lseek_r>
 802a44a:	1c43      	adds	r3, r0, #1
 802a44c:	89a3      	ldrh	r3, [r4, #12]
 802a44e:	bf15      	itete	ne
 802a450:	6560      	strne	r0, [r4, #84]	; 0x54
 802a452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a45a:	81a3      	strheq	r3, [r4, #12]
 802a45c:	bf18      	it	ne
 802a45e:	81a3      	strhne	r3, [r4, #12]
 802a460:	bd10      	pop	{r4, pc}

0802a462 <__sclose>:
 802a462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a466:	f000 ba79 	b.w	802a95c <_close_r>

0802a46a <strcpy>:
 802a46a:	4603      	mov	r3, r0
 802a46c:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a470:	f803 2b01 	strb.w	r2, [r3], #1
 802a474:	2a00      	cmp	r2, #0
 802a476:	d1f9      	bne.n	802a46c <strcpy+0x2>
 802a478:	4770      	bx	lr

0802a47a <strstr>:
 802a47a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a47c:	780c      	ldrb	r4, [r1, #0]
 802a47e:	b164      	cbz	r4, 802a49a <strstr+0x20>
 802a480:	4603      	mov	r3, r0
 802a482:	781a      	ldrb	r2, [r3, #0]
 802a484:	4618      	mov	r0, r3
 802a486:	1c5e      	adds	r6, r3, #1
 802a488:	b90a      	cbnz	r2, 802a48e <strstr+0x14>
 802a48a:	4610      	mov	r0, r2
 802a48c:	e005      	b.n	802a49a <strstr+0x20>
 802a48e:	4294      	cmp	r4, r2
 802a490:	d108      	bne.n	802a4a4 <strstr+0x2a>
 802a492:	460d      	mov	r5, r1
 802a494:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802a498:	b902      	cbnz	r2, 802a49c <strstr+0x22>
 802a49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a49c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 802a4a0:	4297      	cmp	r7, r2
 802a4a2:	d0f7      	beq.n	802a494 <strstr+0x1a>
 802a4a4:	4633      	mov	r3, r6
 802a4a6:	e7ec      	b.n	802a482 <strstr+0x8>

0802a4a8 <strtok>:
 802a4a8:	4b16      	ldr	r3, [pc, #88]	; (802a504 <strtok+0x5c>)
 802a4aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a4ac:	681e      	ldr	r6, [r3, #0]
 802a4ae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 802a4b0:	4605      	mov	r5, r0
 802a4b2:	b9fc      	cbnz	r4, 802a4f4 <strtok+0x4c>
 802a4b4:	2050      	movs	r0, #80	; 0x50
 802a4b6:	9101      	str	r1, [sp, #4]
 802a4b8:	f7ff f808 	bl	80294cc <malloc>
 802a4bc:	9901      	ldr	r1, [sp, #4]
 802a4be:	65b0      	str	r0, [r6, #88]	; 0x58
 802a4c0:	4602      	mov	r2, r0
 802a4c2:	b920      	cbnz	r0, 802a4ce <strtok+0x26>
 802a4c4:	4b10      	ldr	r3, [pc, #64]	; (802a508 <strtok+0x60>)
 802a4c6:	4811      	ldr	r0, [pc, #68]	; (802a50c <strtok+0x64>)
 802a4c8:	2157      	movs	r1, #87	; 0x57
 802a4ca:	f7fe ff8d 	bl	80293e8 <__assert_func>
 802a4ce:	e9c0 4400 	strd	r4, r4, [r0]
 802a4d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802a4d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802a4da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802a4de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802a4e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802a4e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802a4ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 802a4ee:	6184      	str	r4, [r0, #24]
 802a4f0:	7704      	strb	r4, [r0, #28]
 802a4f2:	6244      	str	r4, [r0, #36]	; 0x24
 802a4f4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 802a4f6:	2301      	movs	r3, #1
 802a4f8:	4628      	mov	r0, r5
 802a4fa:	b002      	add	sp, #8
 802a4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a500:	f000 b806 	b.w	802a510 <__strtok_r>
 802a504:	2000010c 	.word	0x2000010c
 802a508:	08031390 	.word	0x08031390
 802a50c:	080313a7 	.word	0x080313a7

0802a510 <__strtok_r>:
 802a510:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a512:	b908      	cbnz	r0, 802a518 <__strtok_r+0x8>
 802a514:	6810      	ldr	r0, [r2, #0]
 802a516:	b188      	cbz	r0, 802a53c <__strtok_r+0x2c>
 802a518:	4604      	mov	r4, r0
 802a51a:	4620      	mov	r0, r4
 802a51c:	f814 5b01 	ldrb.w	r5, [r4], #1
 802a520:	460f      	mov	r7, r1
 802a522:	f817 6b01 	ldrb.w	r6, [r7], #1
 802a526:	b91e      	cbnz	r6, 802a530 <__strtok_r+0x20>
 802a528:	b965      	cbnz	r5, 802a544 <__strtok_r+0x34>
 802a52a:	6015      	str	r5, [r2, #0]
 802a52c:	4628      	mov	r0, r5
 802a52e:	e005      	b.n	802a53c <__strtok_r+0x2c>
 802a530:	42b5      	cmp	r5, r6
 802a532:	d1f6      	bne.n	802a522 <__strtok_r+0x12>
 802a534:	2b00      	cmp	r3, #0
 802a536:	d1f0      	bne.n	802a51a <__strtok_r+0xa>
 802a538:	6014      	str	r4, [r2, #0]
 802a53a:	7003      	strb	r3, [r0, #0]
 802a53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a53e:	461c      	mov	r4, r3
 802a540:	e00c      	b.n	802a55c <__strtok_r+0x4c>
 802a542:	b915      	cbnz	r5, 802a54a <__strtok_r+0x3a>
 802a544:	f814 3b01 	ldrb.w	r3, [r4], #1
 802a548:	460e      	mov	r6, r1
 802a54a:	f816 5b01 	ldrb.w	r5, [r6], #1
 802a54e:	42ab      	cmp	r3, r5
 802a550:	d1f7      	bne.n	802a542 <__strtok_r+0x32>
 802a552:	2b00      	cmp	r3, #0
 802a554:	d0f3      	beq.n	802a53e <__strtok_r+0x2e>
 802a556:	2300      	movs	r3, #0
 802a558:	f804 3c01 	strb.w	r3, [r4, #-1]
 802a55c:	6014      	str	r4, [r2, #0]
 802a55e:	e7ed      	b.n	802a53c <__strtok_r+0x2c>

0802a560 <_strtol_l.isra.0>:
 802a560:	2b01      	cmp	r3, #1
 802a562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a566:	d001      	beq.n	802a56c <_strtol_l.isra.0+0xc>
 802a568:	2b24      	cmp	r3, #36	; 0x24
 802a56a:	d906      	bls.n	802a57a <_strtol_l.isra.0+0x1a>
 802a56c:	f7fe ff72 	bl	8029454 <__errno>
 802a570:	2316      	movs	r3, #22
 802a572:	6003      	str	r3, [r0, #0]
 802a574:	2000      	movs	r0, #0
 802a576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a57a:	4f3a      	ldr	r7, [pc, #232]	; (802a664 <_strtol_l.isra.0+0x104>)
 802a57c:	468e      	mov	lr, r1
 802a57e:	4676      	mov	r6, lr
 802a580:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802a584:	5de5      	ldrb	r5, [r4, r7]
 802a586:	f015 0508 	ands.w	r5, r5, #8
 802a58a:	d1f8      	bne.n	802a57e <_strtol_l.isra.0+0x1e>
 802a58c:	2c2d      	cmp	r4, #45	; 0x2d
 802a58e:	d134      	bne.n	802a5fa <_strtol_l.isra.0+0x9a>
 802a590:	f89e 4000 	ldrb.w	r4, [lr]
 802a594:	f04f 0801 	mov.w	r8, #1
 802a598:	f106 0e02 	add.w	lr, r6, #2
 802a59c:	2b00      	cmp	r3, #0
 802a59e:	d05c      	beq.n	802a65a <_strtol_l.isra.0+0xfa>
 802a5a0:	2b10      	cmp	r3, #16
 802a5a2:	d10c      	bne.n	802a5be <_strtol_l.isra.0+0x5e>
 802a5a4:	2c30      	cmp	r4, #48	; 0x30
 802a5a6:	d10a      	bne.n	802a5be <_strtol_l.isra.0+0x5e>
 802a5a8:	f89e 4000 	ldrb.w	r4, [lr]
 802a5ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802a5b0:	2c58      	cmp	r4, #88	; 0x58
 802a5b2:	d14d      	bne.n	802a650 <_strtol_l.isra.0+0xf0>
 802a5b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 802a5b8:	2310      	movs	r3, #16
 802a5ba:	f10e 0e02 	add.w	lr, lr, #2
 802a5be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802a5c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 802a5c6:	2600      	movs	r6, #0
 802a5c8:	fbbc f9f3 	udiv	r9, ip, r3
 802a5cc:	4635      	mov	r5, r6
 802a5ce:	fb03 ca19 	mls	sl, r3, r9, ip
 802a5d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802a5d6:	2f09      	cmp	r7, #9
 802a5d8:	d818      	bhi.n	802a60c <_strtol_l.isra.0+0xac>
 802a5da:	463c      	mov	r4, r7
 802a5dc:	42a3      	cmp	r3, r4
 802a5de:	dd24      	ble.n	802a62a <_strtol_l.isra.0+0xca>
 802a5e0:	2e00      	cmp	r6, #0
 802a5e2:	db1f      	blt.n	802a624 <_strtol_l.isra.0+0xc4>
 802a5e4:	45a9      	cmp	r9, r5
 802a5e6:	d31d      	bcc.n	802a624 <_strtol_l.isra.0+0xc4>
 802a5e8:	d101      	bne.n	802a5ee <_strtol_l.isra.0+0x8e>
 802a5ea:	45a2      	cmp	sl, r4
 802a5ec:	db1a      	blt.n	802a624 <_strtol_l.isra.0+0xc4>
 802a5ee:	fb05 4503 	mla	r5, r5, r3, r4
 802a5f2:	2601      	movs	r6, #1
 802a5f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802a5f8:	e7eb      	b.n	802a5d2 <_strtol_l.isra.0+0x72>
 802a5fa:	2c2b      	cmp	r4, #43	; 0x2b
 802a5fc:	bf08      	it	eq
 802a5fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 802a602:	46a8      	mov	r8, r5
 802a604:	bf08      	it	eq
 802a606:	f106 0e02 	addeq.w	lr, r6, #2
 802a60a:	e7c7      	b.n	802a59c <_strtol_l.isra.0+0x3c>
 802a60c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802a610:	2f19      	cmp	r7, #25
 802a612:	d801      	bhi.n	802a618 <_strtol_l.isra.0+0xb8>
 802a614:	3c37      	subs	r4, #55	; 0x37
 802a616:	e7e1      	b.n	802a5dc <_strtol_l.isra.0+0x7c>
 802a618:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802a61c:	2f19      	cmp	r7, #25
 802a61e:	d804      	bhi.n	802a62a <_strtol_l.isra.0+0xca>
 802a620:	3c57      	subs	r4, #87	; 0x57
 802a622:	e7db      	b.n	802a5dc <_strtol_l.isra.0+0x7c>
 802a624:	f04f 36ff 	mov.w	r6, #4294967295
 802a628:	e7e4      	b.n	802a5f4 <_strtol_l.isra.0+0x94>
 802a62a:	2e00      	cmp	r6, #0
 802a62c:	da05      	bge.n	802a63a <_strtol_l.isra.0+0xda>
 802a62e:	2322      	movs	r3, #34	; 0x22
 802a630:	6003      	str	r3, [r0, #0]
 802a632:	4665      	mov	r5, ip
 802a634:	b942      	cbnz	r2, 802a648 <_strtol_l.isra.0+0xe8>
 802a636:	4628      	mov	r0, r5
 802a638:	e79d      	b.n	802a576 <_strtol_l.isra.0+0x16>
 802a63a:	f1b8 0f00 	cmp.w	r8, #0
 802a63e:	d000      	beq.n	802a642 <_strtol_l.isra.0+0xe2>
 802a640:	426d      	negs	r5, r5
 802a642:	2a00      	cmp	r2, #0
 802a644:	d0f7      	beq.n	802a636 <_strtol_l.isra.0+0xd6>
 802a646:	b10e      	cbz	r6, 802a64c <_strtol_l.isra.0+0xec>
 802a648:	f10e 31ff 	add.w	r1, lr, #4294967295
 802a64c:	6011      	str	r1, [r2, #0]
 802a64e:	e7f2      	b.n	802a636 <_strtol_l.isra.0+0xd6>
 802a650:	2430      	movs	r4, #48	; 0x30
 802a652:	2b00      	cmp	r3, #0
 802a654:	d1b3      	bne.n	802a5be <_strtol_l.isra.0+0x5e>
 802a656:	2308      	movs	r3, #8
 802a658:	e7b1      	b.n	802a5be <_strtol_l.isra.0+0x5e>
 802a65a:	2c30      	cmp	r4, #48	; 0x30
 802a65c:	d0a4      	beq.n	802a5a8 <_strtol_l.isra.0+0x48>
 802a65e:	230a      	movs	r3, #10
 802a660:	e7ad      	b.n	802a5be <_strtol_l.isra.0+0x5e>
 802a662:	bf00      	nop
 802a664:	08031241 	.word	0x08031241

0802a668 <_strtol_r>:
 802a668:	f7ff bf7a 	b.w	802a560 <_strtol_l.isra.0>

0802a66c <strtol>:
 802a66c:	4613      	mov	r3, r2
 802a66e:	460a      	mov	r2, r1
 802a670:	4601      	mov	r1, r0
 802a672:	4802      	ldr	r0, [pc, #8]	; (802a67c <strtol+0x10>)
 802a674:	6800      	ldr	r0, [r0, #0]
 802a676:	f7ff bf73 	b.w	802a560 <_strtol_l.isra.0>
 802a67a:	bf00      	nop
 802a67c:	2000010c 	.word	0x2000010c

0802a680 <_vsniprintf_r>:
 802a680:	b530      	push	{r4, r5, lr}
 802a682:	1e14      	subs	r4, r2, #0
 802a684:	4605      	mov	r5, r0
 802a686:	b09b      	sub	sp, #108	; 0x6c
 802a688:	4618      	mov	r0, r3
 802a68a:	da05      	bge.n	802a698 <_vsniprintf_r+0x18>
 802a68c:	238b      	movs	r3, #139	; 0x8b
 802a68e:	602b      	str	r3, [r5, #0]
 802a690:	f04f 30ff 	mov.w	r0, #4294967295
 802a694:	b01b      	add	sp, #108	; 0x6c
 802a696:	bd30      	pop	{r4, r5, pc}
 802a698:	f44f 7302 	mov.w	r3, #520	; 0x208
 802a69c:	f8ad 300c 	strh.w	r3, [sp, #12]
 802a6a0:	bf14      	ite	ne
 802a6a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 802a6a6:	4623      	moveq	r3, r4
 802a6a8:	9302      	str	r3, [sp, #8]
 802a6aa:	9305      	str	r3, [sp, #20]
 802a6ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a6b0:	9100      	str	r1, [sp, #0]
 802a6b2:	9104      	str	r1, [sp, #16]
 802a6b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a6b8:	4602      	mov	r2, r0
 802a6ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802a6bc:	4669      	mov	r1, sp
 802a6be:	4628      	mov	r0, r5
 802a6c0:	f001 fe38 	bl	802c334 <_svfiprintf_r>
 802a6c4:	1c43      	adds	r3, r0, #1
 802a6c6:	bfbc      	itt	lt
 802a6c8:	238b      	movlt	r3, #139	; 0x8b
 802a6ca:	602b      	strlt	r3, [r5, #0]
 802a6cc:	2c00      	cmp	r4, #0
 802a6ce:	d0e1      	beq.n	802a694 <_vsniprintf_r+0x14>
 802a6d0:	9b00      	ldr	r3, [sp, #0]
 802a6d2:	2200      	movs	r2, #0
 802a6d4:	701a      	strb	r2, [r3, #0]
 802a6d6:	e7dd      	b.n	802a694 <_vsniprintf_r+0x14>

0802a6d8 <vsniprintf>:
 802a6d8:	b507      	push	{r0, r1, r2, lr}
 802a6da:	9300      	str	r3, [sp, #0]
 802a6dc:	4613      	mov	r3, r2
 802a6de:	460a      	mov	r2, r1
 802a6e0:	4601      	mov	r1, r0
 802a6e2:	4803      	ldr	r0, [pc, #12]	; (802a6f0 <vsniprintf+0x18>)
 802a6e4:	6800      	ldr	r0, [r0, #0]
 802a6e6:	f7ff ffcb 	bl	802a680 <_vsniprintf_r>
 802a6ea:	b003      	add	sp, #12
 802a6ec:	f85d fb04 	ldr.w	pc, [sp], #4
 802a6f0:	2000010c 	.word	0x2000010c

0802a6f4 <__swbuf_r>:
 802a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a6f6:	460e      	mov	r6, r1
 802a6f8:	4614      	mov	r4, r2
 802a6fa:	4605      	mov	r5, r0
 802a6fc:	b118      	cbz	r0, 802a706 <__swbuf_r+0x12>
 802a6fe:	6983      	ldr	r3, [r0, #24]
 802a700:	b90b      	cbnz	r3, 802a706 <__swbuf_r+0x12>
 802a702:	f001 f8cf 	bl	802b8a4 <__sinit>
 802a706:	4b21      	ldr	r3, [pc, #132]	; (802a78c <__swbuf_r+0x98>)
 802a708:	429c      	cmp	r4, r3
 802a70a:	d12b      	bne.n	802a764 <__swbuf_r+0x70>
 802a70c:	686c      	ldr	r4, [r5, #4]
 802a70e:	69a3      	ldr	r3, [r4, #24]
 802a710:	60a3      	str	r3, [r4, #8]
 802a712:	89a3      	ldrh	r3, [r4, #12]
 802a714:	071a      	lsls	r2, r3, #28
 802a716:	d52f      	bpl.n	802a778 <__swbuf_r+0x84>
 802a718:	6923      	ldr	r3, [r4, #16]
 802a71a:	b36b      	cbz	r3, 802a778 <__swbuf_r+0x84>
 802a71c:	6923      	ldr	r3, [r4, #16]
 802a71e:	6820      	ldr	r0, [r4, #0]
 802a720:	1ac0      	subs	r0, r0, r3
 802a722:	6963      	ldr	r3, [r4, #20]
 802a724:	b2f6      	uxtb	r6, r6
 802a726:	4283      	cmp	r3, r0
 802a728:	4637      	mov	r7, r6
 802a72a:	dc04      	bgt.n	802a736 <__swbuf_r+0x42>
 802a72c:	4621      	mov	r1, r4
 802a72e:	4628      	mov	r0, r5
 802a730:	f001 f824 	bl	802b77c <_fflush_r>
 802a734:	bb30      	cbnz	r0, 802a784 <__swbuf_r+0x90>
 802a736:	68a3      	ldr	r3, [r4, #8]
 802a738:	3b01      	subs	r3, #1
 802a73a:	60a3      	str	r3, [r4, #8]
 802a73c:	6823      	ldr	r3, [r4, #0]
 802a73e:	1c5a      	adds	r2, r3, #1
 802a740:	6022      	str	r2, [r4, #0]
 802a742:	701e      	strb	r6, [r3, #0]
 802a744:	6963      	ldr	r3, [r4, #20]
 802a746:	3001      	adds	r0, #1
 802a748:	4283      	cmp	r3, r0
 802a74a:	d004      	beq.n	802a756 <__swbuf_r+0x62>
 802a74c:	89a3      	ldrh	r3, [r4, #12]
 802a74e:	07db      	lsls	r3, r3, #31
 802a750:	d506      	bpl.n	802a760 <__swbuf_r+0x6c>
 802a752:	2e0a      	cmp	r6, #10
 802a754:	d104      	bne.n	802a760 <__swbuf_r+0x6c>
 802a756:	4621      	mov	r1, r4
 802a758:	4628      	mov	r0, r5
 802a75a:	f001 f80f 	bl	802b77c <_fflush_r>
 802a75e:	b988      	cbnz	r0, 802a784 <__swbuf_r+0x90>
 802a760:	4638      	mov	r0, r7
 802a762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a764:	4b0a      	ldr	r3, [pc, #40]	; (802a790 <__swbuf_r+0x9c>)
 802a766:	429c      	cmp	r4, r3
 802a768:	d101      	bne.n	802a76e <__swbuf_r+0x7a>
 802a76a:	68ac      	ldr	r4, [r5, #8]
 802a76c:	e7cf      	b.n	802a70e <__swbuf_r+0x1a>
 802a76e:	4b09      	ldr	r3, [pc, #36]	; (802a794 <__swbuf_r+0xa0>)
 802a770:	429c      	cmp	r4, r3
 802a772:	bf08      	it	eq
 802a774:	68ec      	ldreq	r4, [r5, #12]
 802a776:	e7ca      	b.n	802a70e <__swbuf_r+0x1a>
 802a778:	4621      	mov	r1, r4
 802a77a:	4628      	mov	r0, r5
 802a77c:	f000 f81e 	bl	802a7bc <__swsetup_r>
 802a780:	2800      	cmp	r0, #0
 802a782:	d0cb      	beq.n	802a71c <__swbuf_r+0x28>
 802a784:	f04f 37ff 	mov.w	r7, #4294967295
 802a788:	e7ea      	b.n	802a760 <__swbuf_r+0x6c>
 802a78a:	bf00      	nop
 802a78c:	080314a8 	.word	0x080314a8
 802a790:	080314c8 	.word	0x080314c8
 802a794:	08031488 	.word	0x08031488

0802a798 <_write_r>:
 802a798:	b538      	push	{r3, r4, r5, lr}
 802a79a:	4d07      	ldr	r5, [pc, #28]	; (802a7b8 <_write_r+0x20>)
 802a79c:	4604      	mov	r4, r0
 802a79e:	4608      	mov	r0, r1
 802a7a0:	4611      	mov	r1, r2
 802a7a2:	2200      	movs	r2, #0
 802a7a4:	602a      	str	r2, [r5, #0]
 802a7a6:	461a      	mov	r2, r3
 802a7a8:	f7da fb67 	bl	8004e7a <_write>
 802a7ac:	1c43      	adds	r3, r0, #1
 802a7ae:	d102      	bne.n	802a7b6 <_write_r+0x1e>
 802a7b0:	682b      	ldr	r3, [r5, #0]
 802a7b2:	b103      	cbz	r3, 802a7b6 <_write_r+0x1e>
 802a7b4:	6023      	str	r3, [r4, #0]
 802a7b6:	bd38      	pop	{r3, r4, r5, pc}
 802a7b8:	2000c650 	.word	0x2000c650

0802a7bc <__swsetup_r>:
 802a7bc:	4b32      	ldr	r3, [pc, #200]	; (802a888 <__swsetup_r+0xcc>)
 802a7be:	b570      	push	{r4, r5, r6, lr}
 802a7c0:	681d      	ldr	r5, [r3, #0]
 802a7c2:	4606      	mov	r6, r0
 802a7c4:	460c      	mov	r4, r1
 802a7c6:	b125      	cbz	r5, 802a7d2 <__swsetup_r+0x16>
 802a7c8:	69ab      	ldr	r3, [r5, #24]
 802a7ca:	b913      	cbnz	r3, 802a7d2 <__swsetup_r+0x16>
 802a7cc:	4628      	mov	r0, r5
 802a7ce:	f001 f869 	bl	802b8a4 <__sinit>
 802a7d2:	4b2e      	ldr	r3, [pc, #184]	; (802a88c <__swsetup_r+0xd0>)
 802a7d4:	429c      	cmp	r4, r3
 802a7d6:	d10f      	bne.n	802a7f8 <__swsetup_r+0x3c>
 802a7d8:	686c      	ldr	r4, [r5, #4]
 802a7da:	89a3      	ldrh	r3, [r4, #12]
 802a7dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a7e0:	0719      	lsls	r1, r3, #28
 802a7e2:	d42c      	bmi.n	802a83e <__swsetup_r+0x82>
 802a7e4:	06dd      	lsls	r5, r3, #27
 802a7e6:	d411      	bmi.n	802a80c <__swsetup_r+0x50>
 802a7e8:	2309      	movs	r3, #9
 802a7ea:	6033      	str	r3, [r6, #0]
 802a7ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802a7f0:	81a3      	strh	r3, [r4, #12]
 802a7f2:	f04f 30ff 	mov.w	r0, #4294967295
 802a7f6:	e03e      	b.n	802a876 <__swsetup_r+0xba>
 802a7f8:	4b25      	ldr	r3, [pc, #148]	; (802a890 <__swsetup_r+0xd4>)
 802a7fa:	429c      	cmp	r4, r3
 802a7fc:	d101      	bne.n	802a802 <__swsetup_r+0x46>
 802a7fe:	68ac      	ldr	r4, [r5, #8]
 802a800:	e7eb      	b.n	802a7da <__swsetup_r+0x1e>
 802a802:	4b24      	ldr	r3, [pc, #144]	; (802a894 <__swsetup_r+0xd8>)
 802a804:	429c      	cmp	r4, r3
 802a806:	bf08      	it	eq
 802a808:	68ec      	ldreq	r4, [r5, #12]
 802a80a:	e7e6      	b.n	802a7da <__swsetup_r+0x1e>
 802a80c:	0758      	lsls	r0, r3, #29
 802a80e:	d512      	bpl.n	802a836 <__swsetup_r+0x7a>
 802a810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a812:	b141      	cbz	r1, 802a826 <__swsetup_r+0x6a>
 802a814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a818:	4299      	cmp	r1, r3
 802a81a:	d002      	beq.n	802a822 <__swsetup_r+0x66>
 802a81c:	4630      	mov	r0, r6
 802a81e:	f7fe fe95 	bl	802954c <_free_r>
 802a822:	2300      	movs	r3, #0
 802a824:	6363      	str	r3, [r4, #52]	; 0x34
 802a826:	89a3      	ldrh	r3, [r4, #12]
 802a828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a82c:	81a3      	strh	r3, [r4, #12]
 802a82e:	2300      	movs	r3, #0
 802a830:	6063      	str	r3, [r4, #4]
 802a832:	6923      	ldr	r3, [r4, #16]
 802a834:	6023      	str	r3, [r4, #0]
 802a836:	89a3      	ldrh	r3, [r4, #12]
 802a838:	f043 0308 	orr.w	r3, r3, #8
 802a83c:	81a3      	strh	r3, [r4, #12]
 802a83e:	6923      	ldr	r3, [r4, #16]
 802a840:	b94b      	cbnz	r3, 802a856 <__swsetup_r+0x9a>
 802a842:	89a3      	ldrh	r3, [r4, #12]
 802a844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a84c:	d003      	beq.n	802a856 <__swsetup_r+0x9a>
 802a84e:	4621      	mov	r1, r4
 802a850:	4630      	mov	r0, r6
 802a852:	f001 f903 	bl	802ba5c <__smakebuf_r>
 802a856:	89a0      	ldrh	r0, [r4, #12]
 802a858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a85c:	f010 0301 	ands.w	r3, r0, #1
 802a860:	d00a      	beq.n	802a878 <__swsetup_r+0xbc>
 802a862:	2300      	movs	r3, #0
 802a864:	60a3      	str	r3, [r4, #8]
 802a866:	6963      	ldr	r3, [r4, #20]
 802a868:	425b      	negs	r3, r3
 802a86a:	61a3      	str	r3, [r4, #24]
 802a86c:	6923      	ldr	r3, [r4, #16]
 802a86e:	b943      	cbnz	r3, 802a882 <__swsetup_r+0xc6>
 802a870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802a874:	d1ba      	bne.n	802a7ec <__swsetup_r+0x30>
 802a876:	bd70      	pop	{r4, r5, r6, pc}
 802a878:	0781      	lsls	r1, r0, #30
 802a87a:	bf58      	it	pl
 802a87c:	6963      	ldrpl	r3, [r4, #20]
 802a87e:	60a3      	str	r3, [r4, #8]
 802a880:	e7f4      	b.n	802a86c <__swsetup_r+0xb0>
 802a882:	2000      	movs	r0, #0
 802a884:	e7f7      	b.n	802a876 <__swsetup_r+0xba>
 802a886:	bf00      	nop
 802a888:	2000010c 	.word	0x2000010c
 802a88c:	080314a8 	.word	0x080314a8
 802a890:	080314c8 	.word	0x080314c8
 802a894:	08031488 	.word	0x08031488

0802a898 <__register_exitproc>:
 802a898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a89c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802a958 <__register_exitproc+0xc0>
 802a8a0:	4606      	mov	r6, r0
 802a8a2:	f8d8 0000 	ldr.w	r0, [r8]
 802a8a6:	461f      	mov	r7, r3
 802a8a8:	460d      	mov	r5, r1
 802a8aa:	4691      	mov	r9, r2
 802a8ac:	f001 f89d 	bl	802b9ea <__retarget_lock_acquire_recursive>
 802a8b0:	4b25      	ldr	r3, [pc, #148]	; (802a948 <__register_exitproc+0xb0>)
 802a8b2:	681c      	ldr	r4, [r3, #0]
 802a8b4:	b934      	cbnz	r4, 802a8c4 <__register_exitproc+0x2c>
 802a8b6:	4c25      	ldr	r4, [pc, #148]	; (802a94c <__register_exitproc+0xb4>)
 802a8b8:	601c      	str	r4, [r3, #0]
 802a8ba:	4b25      	ldr	r3, [pc, #148]	; (802a950 <__register_exitproc+0xb8>)
 802a8bc:	b113      	cbz	r3, 802a8c4 <__register_exitproc+0x2c>
 802a8be:	681b      	ldr	r3, [r3, #0]
 802a8c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802a8c4:	6863      	ldr	r3, [r4, #4]
 802a8c6:	2b1f      	cmp	r3, #31
 802a8c8:	dd07      	ble.n	802a8da <__register_exitproc+0x42>
 802a8ca:	f8d8 0000 	ldr.w	r0, [r8]
 802a8ce:	f001 f88e 	bl	802b9ee <__retarget_lock_release_recursive>
 802a8d2:	f04f 30ff 	mov.w	r0, #4294967295
 802a8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a8da:	b34e      	cbz	r6, 802a930 <__register_exitproc+0x98>
 802a8dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a8e0:	b988      	cbnz	r0, 802a906 <__register_exitproc+0x6e>
 802a8e2:	4b1c      	ldr	r3, [pc, #112]	; (802a954 <__register_exitproc+0xbc>)
 802a8e4:	b923      	cbnz	r3, 802a8f0 <__register_exitproc+0x58>
 802a8e6:	f8d8 0000 	ldr.w	r0, [r8]
 802a8ea:	f001 f87f 	bl	802b9ec <__retarget_lock_release>
 802a8ee:	e7f0      	b.n	802a8d2 <__register_exitproc+0x3a>
 802a8f0:	f44f 7084 	mov.w	r0, #264	; 0x108
 802a8f4:	f7fe fdea 	bl	80294cc <malloc>
 802a8f8:	2800      	cmp	r0, #0
 802a8fa:	d0f4      	beq.n	802a8e6 <__register_exitproc+0x4e>
 802a8fc:	2300      	movs	r3, #0
 802a8fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802a902:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802a906:	6863      	ldr	r3, [r4, #4]
 802a908:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a90c:	2201      	movs	r2, #1
 802a90e:	409a      	lsls	r2, r3
 802a910:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a914:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802a918:	4313      	orrs	r3, r2
 802a91a:	2e02      	cmp	r6, #2
 802a91c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802a920:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802a924:	bf02      	ittt	eq
 802a926:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802a92a:	431a      	orreq	r2, r3
 802a92c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802a930:	6863      	ldr	r3, [r4, #4]
 802a932:	f8d8 0000 	ldr.w	r0, [r8]
 802a936:	1c5a      	adds	r2, r3, #1
 802a938:	3302      	adds	r3, #2
 802a93a:	6062      	str	r2, [r4, #4]
 802a93c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802a940:	f001 f855 	bl	802b9ee <__retarget_lock_release_recursive>
 802a944:	2000      	movs	r0, #0
 802a946:	e7c6      	b.n	802a8d6 <__register_exitproc+0x3e>
 802a948:	2000b9d0 	.word	0x2000b9d0
 802a94c:	2000b944 	.word	0x2000b944
 802a950:	0803138c 	.word	0x0803138c
 802a954:	080294cd 	.word	0x080294cd
 802a958:	20000170 	.word	0x20000170

0802a95c <_close_r>:
 802a95c:	b538      	push	{r3, r4, r5, lr}
 802a95e:	4d06      	ldr	r5, [pc, #24]	; (802a978 <_close_r+0x1c>)
 802a960:	2300      	movs	r3, #0
 802a962:	4604      	mov	r4, r0
 802a964:	4608      	mov	r0, r1
 802a966:	602b      	str	r3, [r5, #0]
 802a968:	f7da faa3 	bl	8004eb2 <_close>
 802a96c:	1c43      	adds	r3, r0, #1
 802a96e:	d102      	bne.n	802a976 <_close_r+0x1a>
 802a970:	682b      	ldr	r3, [r5, #0]
 802a972:	b103      	cbz	r3, 802a976 <_close_r+0x1a>
 802a974:	6023      	str	r3, [r4, #0]
 802a976:	bd38      	pop	{r3, r4, r5, pc}
 802a978:	2000c650 	.word	0x2000c650

0802a97c <quorem>:
 802a97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a980:	6903      	ldr	r3, [r0, #16]
 802a982:	690c      	ldr	r4, [r1, #16]
 802a984:	42a3      	cmp	r3, r4
 802a986:	4607      	mov	r7, r0
 802a988:	f2c0 8081 	blt.w	802aa8e <quorem+0x112>
 802a98c:	3c01      	subs	r4, #1
 802a98e:	f101 0814 	add.w	r8, r1, #20
 802a992:	f100 0514 	add.w	r5, r0, #20
 802a996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802a99a:	9301      	str	r3, [sp, #4]
 802a99c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802a9a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802a9a4:	3301      	adds	r3, #1
 802a9a6:	429a      	cmp	r2, r3
 802a9a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802a9ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802a9b0:	fbb2 f6f3 	udiv	r6, r2, r3
 802a9b4:	d331      	bcc.n	802aa1a <quorem+0x9e>
 802a9b6:	f04f 0e00 	mov.w	lr, #0
 802a9ba:	4640      	mov	r0, r8
 802a9bc:	46ac      	mov	ip, r5
 802a9be:	46f2      	mov	sl, lr
 802a9c0:	f850 2b04 	ldr.w	r2, [r0], #4
 802a9c4:	b293      	uxth	r3, r2
 802a9c6:	fb06 e303 	mla	r3, r6, r3, lr
 802a9ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802a9ce:	b29b      	uxth	r3, r3
 802a9d0:	ebaa 0303 	sub.w	r3, sl, r3
 802a9d4:	0c12      	lsrs	r2, r2, #16
 802a9d6:	f8dc a000 	ldr.w	sl, [ip]
 802a9da:	fb06 e202 	mla	r2, r6, r2, lr
 802a9de:	fa13 f38a 	uxtah	r3, r3, sl
 802a9e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802a9e6:	fa1f fa82 	uxth.w	sl, r2
 802a9ea:	f8dc 2000 	ldr.w	r2, [ip]
 802a9ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 802a9f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802a9f6:	b29b      	uxth	r3, r3
 802a9f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802a9fc:	4581      	cmp	r9, r0
 802a9fe:	f84c 3b04 	str.w	r3, [ip], #4
 802aa02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802aa06:	d2db      	bcs.n	802a9c0 <quorem+0x44>
 802aa08:	f855 300b 	ldr.w	r3, [r5, fp]
 802aa0c:	b92b      	cbnz	r3, 802aa1a <quorem+0x9e>
 802aa0e:	9b01      	ldr	r3, [sp, #4]
 802aa10:	3b04      	subs	r3, #4
 802aa12:	429d      	cmp	r5, r3
 802aa14:	461a      	mov	r2, r3
 802aa16:	d32e      	bcc.n	802aa76 <quorem+0xfa>
 802aa18:	613c      	str	r4, [r7, #16]
 802aa1a:	4638      	mov	r0, r7
 802aa1c:	f001 fafa 	bl	802c014 <__mcmp>
 802aa20:	2800      	cmp	r0, #0
 802aa22:	db24      	blt.n	802aa6e <quorem+0xf2>
 802aa24:	3601      	adds	r6, #1
 802aa26:	4628      	mov	r0, r5
 802aa28:	f04f 0c00 	mov.w	ip, #0
 802aa2c:	f858 2b04 	ldr.w	r2, [r8], #4
 802aa30:	f8d0 e000 	ldr.w	lr, [r0]
 802aa34:	b293      	uxth	r3, r2
 802aa36:	ebac 0303 	sub.w	r3, ip, r3
 802aa3a:	0c12      	lsrs	r2, r2, #16
 802aa3c:	fa13 f38e 	uxtah	r3, r3, lr
 802aa40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802aa44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802aa48:	b29b      	uxth	r3, r3
 802aa4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802aa4e:	45c1      	cmp	r9, r8
 802aa50:	f840 3b04 	str.w	r3, [r0], #4
 802aa54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802aa58:	d2e8      	bcs.n	802aa2c <quorem+0xb0>
 802aa5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802aa5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802aa62:	b922      	cbnz	r2, 802aa6e <quorem+0xf2>
 802aa64:	3b04      	subs	r3, #4
 802aa66:	429d      	cmp	r5, r3
 802aa68:	461a      	mov	r2, r3
 802aa6a:	d30a      	bcc.n	802aa82 <quorem+0x106>
 802aa6c:	613c      	str	r4, [r7, #16]
 802aa6e:	4630      	mov	r0, r6
 802aa70:	b003      	add	sp, #12
 802aa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa76:	6812      	ldr	r2, [r2, #0]
 802aa78:	3b04      	subs	r3, #4
 802aa7a:	2a00      	cmp	r2, #0
 802aa7c:	d1cc      	bne.n	802aa18 <quorem+0x9c>
 802aa7e:	3c01      	subs	r4, #1
 802aa80:	e7c7      	b.n	802aa12 <quorem+0x96>
 802aa82:	6812      	ldr	r2, [r2, #0]
 802aa84:	3b04      	subs	r3, #4
 802aa86:	2a00      	cmp	r2, #0
 802aa88:	d1f0      	bne.n	802aa6c <quorem+0xf0>
 802aa8a:	3c01      	subs	r4, #1
 802aa8c:	e7eb      	b.n	802aa66 <quorem+0xea>
 802aa8e:	2000      	movs	r0, #0
 802aa90:	e7ee      	b.n	802aa70 <quorem+0xf4>
 802aa92:	0000      	movs	r0, r0
 802aa94:	0000      	movs	r0, r0
	...

0802aa98 <_dtoa_r>:
 802aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa9c:	ed2d 8b02 	vpush	{d8}
 802aaa0:	ec57 6b10 	vmov	r6, r7, d0
 802aaa4:	b095      	sub	sp, #84	; 0x54
 802aaa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802aaa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802aaac:	9105      	str	r1, [sp, #20]
 802aaae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 802aab2:	4604      	mov	r4, r0
 802aab4:	9209      	str	r2, [sp, #36]	; 0x24
 802aab6:	930f      	str	r3, [sp, #60]	; 0x3c
 802aab8:	b975      	cbnz	r5, 802aad8 <_dtoa_r+0x40>
 802aaba:	2010      	movs	r0, #16
 802aabc:	f7fe fd06 	bl	80294cc <malloc>
 802aac0:	4602      	mov	r2, r0
 802aac2:	6260      	str	r0, [r4, #36]	; 0x24
 802aac4:	b920      	cbnz	r0, 802aad0 <_dtoa_r+0x38>
 802aac6:	4bb2      	ldr	r3, [pc, #712]	; (802ad90 <_dtoa_r+0x2f8>)
 802aac8:	21ea      	movs	r1, #234	; 0xea
 802aaca:	48b2      	ldr	r0, [pc, #712]	; (802ad94 <_dtoa_r+0x2fc>)
 802aacc:	f7fe fc8c 	bl	80293e8 <__assert_func>
 802aad0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802aad4:	6005      	str	r5, [r0, #0]
 802aad6:	60c5      	str	r5, [r0, #12]
 802aad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802aada:	6819      	ldr	r1, [r3, #0]
 802aadc:	b151      	cbz	r1, 802aaf4 <_dtoa_r+0x5c>
 802aade:	685a      	ldr	r2, [r3, #4]
 802aae0:	604a      	str	r2, [r1, #4]
 802aae2:	2301      	movs	r3, #1
 802aae4:	4093      	lsls	r3, r2
 802aae6:	608b      	str	r3, [r1, #8]
 802aae8:	4620      	mov	r0, r4
 802aaea:	f001 f855 	bl	802bb98 <_Bfree>
 802aaee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802aaf0:	2200      	movs	r2, #0
 802aaf2:	601a      	str	r2, [r3, #0]
 802aaf4:	1e3b      	subs	r3, r7, #0
 802aaf6:	bfb9      	ittee	lt
 802aaf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802aafc:	9303      	strlt	r3, [sp, #12]
 802aafe:	2300      	movge	r3, #0
 802ab00:	f8c8 3000 	strge.w	r3, [r8]
 802ab04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 802ab08:	4ba3      	ldr	r3, [pc, #652]	; (802ad98 <_dtoa_r+0x300>)
 802ab0a:	bfbc      	itt	lt
 802ab0c:	2201      	movlt	r2, #1
 802ab0e:	f8c8 2000 	strlt.w	r2, [r8]
 802ab12:	ea33 0309 	bics.w	r3, r3, r9
 802ab16:	d11b      	bne.n	802ab50 <_dtoa_r+0xb8>
 802ab18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ab1a:	f242 730f 	movw	r3, #9999	; 0x270f
 802ab1e:	6013      	str	r3, [r2, #0]
 802ab20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802ab24:	4333      	orrs	r3, r6
 802ab26:	f000 857a 	beq.w	802b61e <_dtoa_r+0xb86>
 802ab2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802ab2c:	b963      	cbnz	r3, 802ab48 <_dtoa_r+0xb0>
 802ab2e:	4b9b      	ldr	r3, [pc, #620]	; (802ad9c <_dtoa_r+0x304>)
 802ab30:	e024      	b.n	802ab7c <_dtoa_r+0xe4>
 802ab32:	4b9b      	ldr	r3, [pc, #620]	; (802ada0 <_dtoa_r+0x308>)
 802ab34:	9300      	str	r3, [sp, #0]
 802ab36:	3308      	adds	r3, #8
 802ab38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802ab3a:	6013      	str	r3, [r2, #0]
 802ab3c:	9800      	ldr	r0, [sp, #0]
 802ab3e:	b015      	add	sp, #84	; 0x54
 802ab40:	ecbd 8b02 	vpop	{d8}
 802ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab48:	4b94      	ldr	r3, [pc, #592]	; (802ad9c <_dtoa_r+0x304>)
 802ab4a:	9300      	str	r3, [sp, #0]
 802ab4c:	3303      	adds	r3, #3
 802ab4e:	e7f3      	b.n	802ab38 <_dtoa_r+0xa0>
 802ab50:	ed9d 7b02 	vldr	d7, [sp, #8]
 802ab54:	2200      	movs	r2, #0
 802ab56:	ec51 0b17 	vmov	r0, r1, d7
 802ab5a:	2300      	movs	r3, #0
 802ab5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 802ab60:	f7d5 ffcc 	bl	8000afc <__aeabi_dcmpeq>
 802ab64:	4680      	mov	r8, r0
 802ab66:	b158      	cbz	r0, 802ab80 <_dtoa_r+0xe8>
 802ab68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ab6a:	2301      	movs	r3, #1
 802ab6c:	6013      	str	r3, [r2, #0]
 802ab6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802ab70:	2b00      	cmp	r3, #0
 802ab72:	f000 8551 	beq.w	802b618 <_dtoa_r+0xb80>
 802ab76:	488b      	ldr	r0, [pc, #556]	; (802ada4 <_dtoa_r+0x30c>)
 802ab78:	6018      	str	r0, [r3, #0]
 802ab7a:	1e43      	subs	r3, r0, #1
 802ab7c:	9300      	str	r3, [sp, #0]
 802ab7e:	e7dd      	b.n	802ab3c <_dtoa_r+0xa4>
 802ab80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 802ab84:	aa12      	add	r2, sp, #72	; 0x48
 802ab86:	a913      	add	r1, sp, #76	; 0x4c
 802ab88:	4620      	mov	r0, r4
 802ab8a:	f001 fae7 	bl	802c15c <__d2b>
 802ab8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802ab92:	4683      	mov	fp, r0
 802ab94:	2d00      	cmp	r5, #0
 802ab96:	d07c      	beq.n	802ac92 <_dtoa_r+0x1fa>
 802ab98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ab9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802ab9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802aba2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 802aba6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802abaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802abae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802abb2:	4b7d      	ldr	r3, [pc, #500]	; (802ada8 <_dtoa_r+0x310>)
 802abb4:	2200      	movs	r2, #0
 802abb6:	4630      	mov	r0, r6
 802abb8:	4639      	mov	r1, r7
 802abba:	f7d5 fb7f 	bl	80002bc <__aeabi_dsub>
 802abbe:	a36e      	add	r3, pc, #440	; (adr r3, 802ad78 <_dtoa_r+0x2e0>)
 802abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802abc4:	f7d5 fd32 	bl	800062c <__aeabi_dmul>
 802abc8:	a36d      	add	r3, pc, #436	; (adr r3, 802ad80 <_dtoa_r+0x2e8>)
 802abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 802abce:	f7d5 fb77 	bl	80002c0 <__adddf3>
 802abd2:	4606      	mov	r6, r0
 802abd4:	4628      	mov	r0, r5
 802abd6:	460f      	mov	r7, r1
 802abd8:	f7d5 fcbe 	bl	8000558 <__aeabi_i2d>
 802abdc:	a36a      	add	r3, pc, #424	; (adr r3, 802ad88 <_dtoa_r+0x2f0>)
 802abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 802abe2:	f7d5 fd23 	bl	800062c <__aeabi_dmul>
 802abe6:	4602      	mov	r2, r0
 802abe8:	460b      	mov	r3, r1
 802abea:	4630      	mov	r0, r6
 802abec:	4639      	mov	r1, r7
 802abee:	f7d5 fb67 	bl	80002c0 <__adddf3>
 802abf2:	4606      	mov	r6, r0
 802abf4:	460f      	mov	r7, r1
 802abf6:	f7d5 ffc9 	bl	8000b8c <__aeabi_d2iz>
 802abfa:	2200      	movs	r2, #0
 802abfc:	4682      	mov	sl, r0
 802abfe:	2300      	movs	r3, #0
 802ac00:	4630      	mov	r0, r6
 802ac02:	4639      	mov	r1, r7
 802ac04:	f7d5 ff84 	bl	8000b10 <__aeabi_dcmplt>
 802ac08:	b148      	cbz	r0, 802ac1e <_dtoa_r+0x186>
 802ac0a:	4650      	mov	r0, sl
 802ac0c:	f7d5 fca4 	bl	8000558 <__aeabi_i2d>
 802ac10:	4632      	mov	r2, r6
 802ac12:	463b      	mov	r3, r7
 802ac14:	f7d5 ff72 	bl	8000afc <__aeabi_dcmpeq>
 802ac18:	b908      	cbnz	r0, 802ac1e <_dtoa_r+0x186>
 802ac1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ac1e:	f1ba 0f16 	cmp.w	sl, #22
 802ac22:	d854      	bhi.n	802acce <_dtoa_r+0x236>
 802ac24:	4b61      	ldr	r3, [pc, #388]	; (802adac <_dtoa_r+0x314>)
 802ac26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ac2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802ac32:	f7d5 ff6d 	bl	8000b10 <__aeabi_dcmplt>
 802ac36:	2800      	cmp	r0, #0
 802ac38:	d04b      	beq.n	802acd2 <_dtoa_r+0x23a>
 802ac3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ac3e:	2300      	movs	r3, #0
 802ac40:	930e      	str	r3, [sp, #56]	; 0x38
 802ac42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802ac44:	1b5d      	subs	r5, r3, r5
 802ac46:	1e6b      	subs	r3, r5, #1
 802ac48:	9304      	str	r3, [sp, #16]
 802ac4a:	bf43      	ittte	mi
 802ac4c:	2300      	movmi	r3, #0
 802ac4e:	f1c5 0801 	rsbmi	r8, r5, #1
 802ac52:	9304      	strmi	r3, [sp, #16]
 802ac54:	f04f 0800 	movpl.w	r8, #0
 802ac58:	f1ba 0f00 	cmp.w	sl, #0
 802ac5c:	db3b      	blt.n	802acd6 <_dtoa_r+0x23e>
 802ac5e:	9b04      	ldr	r3, [sp, #16]
 802ac60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802ac64:	4453      	add	r3, sl
 802ac66:	9304      	str	r3, [sp, #16]
 802ac68:	2300      	movs	r3, #0
 802ac6a:	9306      	str	r3, [sp, #24]
 802ac6c:	9b05      	ldr	r3, [sp, #20]
 802ac6e:	2b09      	cmp	r3, #9
 802ac70:	d869      	bhi.n	802ad46 <_dtoa_r+0x2ae>
 802ac72:	2b05      	cmp	r3, #5
 802ac74:	bfc4      	itt	gt
 802ac76:	3b04      	subgt	r3, #4
 802ac78:	9305      	strgt	r3, [sp, #20]
 802ac7a:	9b05      	ldr	r3, [sp, #20]
 802ac7c:	f1a3 0302 	sub.w	r3, r3, #2
 802ac80:	bfcc      	ite	gt
 802ac82:	2500      	movgt	r5, #0
 802ac84:	2501      	movle	r5, #1
 802ac86:	2b03      	cmp	r3, #3
 802ac88:	d869      	bhi.n	802ad5e <_dtoa_r+0x2c6>
 802ac8a:	e8df f003 	tbb	[pc, r3]
 802ac8e:	4e2c      	.short	0x4e2c
 802ac90:	5a4c      	.short	0x5a4c
 802ac92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 802ac96:	441d      	add	r5, r3
 802ac98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802ac9c:	2b20      	cmp	r3, #32
 802ac9e:	bfc1      	itttt	gt
 802aca0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802aca4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 802aca8:	fa09 f303 	lslgt.w	r3, r9, r3
 802acac:	fa26 f000 	lsrgt.w	r0, r6, r0
 802acb0:	bfda      	itte	le
 802acb2:	f1c3 0320 	rsble	r3, r3, #32
 802acb6:	fa06 f003 	lslle.w	r0, r6, r3
 802acba:	4318      	orrgt	r0, r3
 802acbc:	f7d5 fc3c 	bl	8000538 <__aeabi_ui2d>
 802acc0:	2301      	movs	r3, #1
 802acc2:	4606      	mov	r6, r0
 802acc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 802acc8:	3d01      	subs	r5, #1
 802acca:	9310      	str	r3, [sp, #64]	; 0x40
 802accc:	e771      	b.n	802abb2 <_dtoa_r+0x11a>
 802acce:	2301      	movs	r3, #1
 802acd0:	e7b6      	b.n	802ac40 <_dtoa_r+0x1a8>
 802acd2:	900e      	str	r0, [sp, #56]	; 0x38
 802acd4:	e7b5      	b.n	802ac42 <_dtoa_r+0x1aa>
 802acd6:	f1ca 0300 	rsb	r3, sl, #0
 802acda:	9306      	str	r3, [sp, #24]
 802acdc:	2300      	movs	r3, #0
 802acde:	eba8 080a 	sub.w	r8, r8, sl
 802ace2:	930d      	str	r3, [sp, #52]	; 0x34
 802ace4:	e7c2      	b.n	802ac6c <_dtoa_r+0x1d4>
 802ace6:	2300      	movs	r3, #0
 802ace8:	9308      	str	r3, [sp, #32]
 802acea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802acec:	2b00      	cmp	r3, #0
 802acee:	dc39      	bgt.n	802ad64 <_dtoa_r+0x2cc>
 802acf0:	f04f 0901 	mov.w	r9, #1
 802acf4:	f8cd 9004 	str.w	r9, [sp, #4]
 802acf8:	464b      	mov	r3, r9
 802acfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 802acfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802ad00:	2200      	movs	r2, #0
 802ad02:	6042      	str	r2, [r0, #4]
 802ad04:	2204      	movs	r2, #4
 802ad06:	f102 0614 	add.w	r6, r2, #20
 802ad0a:	429e      	cmp	r6, r3
 802ad0c:	6841      	ldr	r1, [r0, #4]
 802ad0e:	d92f      	bls.n	802ad70 <_dtoa_r+0x2d8>
 802ad10:	4620      	mov	r0, r4
 802ad12:	f000 ff01 	bl	802bb18 <_Balloc>
 802ad16:	9000      	str	r0, [sp, #0]
 802ad18:	2800      	cmp	r0, #0
 802ad1a:	d14b      	bne.n	802adb4 <_dtoa_r+0x31c>
 802ad1c:	4b24      	ldr	r3, [pc, #144]	; (802adb0 <_dtoa_r+0x318>)
 802ad1e:	4602      	mov	r2, r0
 802ad20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802ad24:	e6d1      	b.n	802aaca <_dtoa_r+0x32>
 802ad26:	2301      	movs	r3, #1
 802ad28:	e7de      	b.n	802ace8 <_dtoa_r+0x250>
 802ad2a:	2300      	movs	r3, #0
 802ad2c:	9308      	str	r3, [sp, #32]
 802ad2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ad30:	eb0a 0903 	add.w	r9, sl, r3
 802ad34:	f109 0301 	add.w	r3, r9, #1
 802ad38:	2b01      	cmp	r3, #1
 802ad3a:	9301      	str	r3, [sp, #4]
 802ad3c:	bfb8      	it	lt
 802ad3e:	2301      	movlt	r3, #1
 802ad40:	e7dd      	b.n	802acfe <_dtoa_r+0x266>
 802ad42:	2301      	movs	r3, #1
 802ad44:	e7f2      	b.n	802ad2c <_dtoa_r+0x294>
 802ad46:	2501      	movs	r5, #1
 802ad48:	2300      	movs	r3, #0
 802ad4a:	9305      	str	r3, [sp, #20]
 802ad4c:	9508      	str	r5, [sp, #32]
 802ad4e:	f04f 39ff 	mov.w	r9, #4294967295
 802ad52:	2200      	movs	r2, #0
 802ad54:	f8cd 9004 	str.w	r9, [sp, #4]
 802ad58:	2312      	movs	r3, #18
 802ad5a:	9209      	str	r2, [sp, #36]	; 0x24
 802ad5c:	e7cf      	b.n	802acfe <_dtoa_r+0x266>
 802ad5e:	2301      	movs	r3, #1
 802ad60:	9308      	str	r3, [sp, #32]
 802ad62:	e7f4      	b.n	802ad4e <_dtoa_r+0x2b6>
 802ad64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802ad68:	f8cd 9004 	str.w	r9, [sp, #4]
 802ad6c:	464b      	mov	r3, r9
 802ad6e:	e7c6      	b.n	802acfe <_dtoa_r+0x266>
 802ad70:	3101      	adds	r1, #1
 802ad72:	6041      	str	r1, [r0, #4]
 802ad74:	0052      	lsls	r2, r2, #1
 802ad76:	e7c6      	b.n	802ad06 <_dtoa_r+0x26e>
 802ad78:	636f4361 	.word	0x636f4361
 802ad7c:	3fd287a7 	.word	0x3fd287a7
 802ad80:	8b60c8b3 	.word	0x8b60c8b3
 802ad84:	3fc68a28 	.word	0x3fc68a28
 802ad88:	509f79fb 	.word	0x509f79fb
 802ad8c:	3fd34413 	.word	0x3fd34413
 802ad90:	08031390 	.word	0x08031390
 802ad94:	08031415 	.word	0x08031415
 802ad98:	7ff00000 	.word	0x7ff00000
 802ad9c:	08031411 	.word	0x08031411
 802ada0:	08031408 	.word	0x08031408
 802ada4:	080309ee 	.word	0x080309ee
 802ada8:	3ff80000 	.word	0x3ff80000
 802adac:	08031580 	.word	0x08031580
 802adb0:	08031474 	.word	0x08031474
 802adb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802adb6:	9a00      	ldr	r2, [sp, #0]
 802adb8:	601a      	str	r2, [r3, #0]
 802adba:	9b01      	ldr	r3, [sp, #4]
 802adbc:	2b0e      	cmp	r3, #14
 802adbe:	f200 80ad 	bhi.w	802af1c <_dtoa_r+0x484>
 802adc2:	2d00      	cmp	r5, #0
 802adc4:	f000 80aa 	beq.w	802af1c <_dtoa_r+0x484>
 802adc8:	f1ba 0f00 	cmp.w	sl, #0
 802adcc:	dd36      	ble.n	802ae3c <_dtoa_r+0x3a4>
 802adce:	4ac3      	ldr	r2, [pc, #780]	; (802b0dc <_dtoa_r+0x644>)
 802add0:	f00a 030f 	and.w	r3, sl, #15
 802add4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802add8:	ed93 7b00 	vldr	d7, [r3]
 802addc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 802ade0:	ea4f 172a 	mov.w	r7, sl, asr #4
 802ade4:	eeb0 8a47 	vmov.f32	s16, s14
 802ade8:	eef0 8a67 	vmov.f32	s17, s15
 802adec:	d016      	beq.n	802ae1c <_dtoa_r+0x384>
 802adee:	4bbc      	ldr	r3, [pc, #752]	; (802b0e0 <_dtoa_r+0x648>)
 802adf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802adf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802adf8:	f7d5 fd42 	bl	8000880 <__aeabi_ddiv>
 802adfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ae00:	f007 070f 	and.w	r7, r7, #15
 802ae04:	2503      	movs	r5, #3
 802ae06:	4eb6      	ldr	r6, [pc, #728]	; (802b0e0 <_dtoa_r+0x648>)
 802ae08:	b957      	cbnz	r7, 802ae20 <_dtoa_r+0x388>
 802ae0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ae0e:	ec53 2b18 	vmov	r2, r3, d8
 802ae12:	f7d5 fd35 	bl	8000880 <__aeabi_ddiv>
 802ae16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ae1a:	e029      	b.n	802ae70 <_dtoa_r+0x3d8>
 802ae1c:	2502      	movs	r5, #2
 802ae1e:	e7f2      	b.n	802ae06 <_dtoa_r+0x36e>
 802ae20:	07f9      	lsls	r1, r7, #31
 802ae22:	d508      	bpl.n	802ae36 <_dtoa_r+0x39e>
 802ae24:	ec51 0b18 	vmov	r0, r1, d8
 802ae28:	e9d6 2300 	ldrd	r2, r3, [r6]
 802ae2c:	f7d5 fbfe 	bl	800062c <__aeabi_dmul>
 802ae30:	ec41 0b18 	vmov	d8, r0, r1
 802ae34:	3501      	adds	r5, #1
 802ae36:	107f      	asrs	r7, r7, #1
 802ae38:	3608      	adds	r6, #8
 802ae3a:	e7e5      	b.n	802ae08 <_dtoa_r+0x370>
 802ae3c:	f000 80a6 	beq.w	802af8c <_dtoa_r+0x4f4>
 802ae40:	f1ca 0600 	rsb	r6, sl, #0
 802ae44:	4ba5      	ldr	r3, [pc, #660]	; (802b0dc <_dtoa_r+0x644>)
 802ae46:	4fa6      	ldr	r7, [pc, #664]	; (802b0e0 <_dtoa_r+0x648>)
 802ae48:	f006 020f 	and.w	r2, r6, #15
 802ae4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ae54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802ae58:	f7d5 fbe8 	bl	800062c <__aeabi_dmul>
 802ae5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ae60:	1136      	asrs	r6, r6, #4
 802ae62:	2300      	movs	r3, #0
 802ae64:	2502      	movs	r5, #2
 802ae66:	2e00      	cmp	r6, #0
 802ae68:	f040 8085 	bne.w	802af76 <_dtoa_r+0x4de>
 802ae6c:	2b00      	cmp	r3, #0
 802ae6e:	d1d2      	bne.n	802ae16 <_dtoa_r+0x37e>
 802ae70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ae72:	2b00      	cmp	r3, #0
 802ae74:	f000 808c 	beq.w	802af90 <_dtoa_r+0x4f8>
 802ae78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802ae7c:	4b99      	ldr	r3, [pc, #612]	; (802b0e4 <_dtoa_r+0x64c>)
 802ae7e:	2200      	movs	r2, #0
 802ae80:	4630      	mov	r0, r6
 802ae82:	4639      	mov	r1, r7
 802ae84:	f7d5 fe44 	bl	8000b10 <__aeabi_dcmplt>
 802ae88:	2800      	cmp	r0, #0
 802ae8a:	f000 8081 	beq.w	802af90 <_dtoa_r+0x4f8>
 802ae8e:	9b01      	ldr	r3, [sp, #4]
 802ae90:	2b00      	cmp	r3, #0
 802ae92:	d07d      	beq.n	802af90 <_dtoa_r+0x4f8>
 802ae94:	f1b9 0f00 	cmp.w	r9, #0
 802ae98:	dd3c      	ble.n	802af14 <_dtoa_r+0x47c>
 802ae9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 802ae9e:	9307      	str	r3, [sp, #28]
 802aea0:	2200      	movs	r2, #0
 802aea2:	4b91      	ldr	r3, [pc, #580]	; (802b0e8 <_dtoa_r+0x650>)
 802aea4:	4630      	mov	r0, r6
 802aea6:	4639      	mov	r1, r7
 802aea8:	f7d5 fbc0 	bl	800062c <__aeabi_dmul>
 802aeac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802aeb0:	3501      	adds	r5, #1
 802aeb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 802aeb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802aeba:	4628      	mov	r0, r5
 802aebc:	f7d5 fb4c 	bl	8000558 <__aeabi_i2d>
 802aec0:	4632      	mov	r2, r6
 802aec2:	463b      	mov	r3, r7
 802aec4:	f7d5 fbb2 	bl	800062c <__aeabi_dmul>
 802aec8:	4b88      	ldr	r3, [pc, #544]	; (802b0ec <_dtoa_r+0x654>)
 802aeca:	2200      	movs	r2, #0
 802aecc:	f7d5 f9f8 	bl	80002c0 <__adddf3>
 802aed0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802aed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802aed8:	9303      	str	r3, [sp, #12]
 802aeda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aedc:	2b00      	cmp	r3, #0
 802aede:	d15c      	bne.n	802af9a <_dtoa_r+0x502>
 802aee0:	4b83      	ldr	r3, [pc, #524]	; (802b0f0 <_dtoa_r+0x658>)
 802aee2:	2200      	movs	r2, #0
 802aee4:	4630      	mov	r0, r6
 802aee6:	4639      	mov	r1, r7
 802aee8:	f7d5 f9e8 	bl	80002bc <__aeabi_dsub>
 802aeec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802aef0:	4606      	mov	r6, r0
 802aef2:	460f      	mov	r7, r1
 802aef4:	f7d5 fe2a 	bl	8000b4c <__aeabi_dcmpgt>
 802aef8:	2800      	cmp	r0, #0
 802aefa:	f040 8296 	bne.w	802b42a <_dtoa_r+0x992>
 802aefe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802af02:	4630      	mov	r0, r6
 802af04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802af08:	4639      	mov	r1, r7
 802af0a:	f7d5 fe01 	bl	8000b10 <__aeabi_dcmplt>
 802af0e:	2800      	cmp	r0, #0
 802af10:	f040 8288 	bne.w	802b424 <_dtoa_r+0x98c>
 802af14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802af18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802af1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802af1e:	2b00      	cmp	r3, #0
 802af20:	f2c0 8158 	blt.w	802b1d4 <_dtoa_r+0x73c>
 802af24:	f1ba 0f0e 	cmp.w	sl, #14
 802af28:	f300 8154 	bgt.w	802b1d4 <_dtoa_r+0x73c>
 802af2c:	4b6b      	ldr	r3, [pc, #428]	; (802b0dc <_dtoa_r+0x644>)
 802af2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802af32:	e9d3 8900 	ldrd	r8, r9, [r3]
 802af36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802af38:	2b00      	cmp	r3, #0
 802af3a:	f280 80e3 	bge.w	802b104 <_dtoa_r+0x66c>
 802af3e:	9b01      	ldr	r3, [sp, #4]
 802af40:	2b00      	cmp	r3, #0
 802af42:	f300 80df 	bgt.w	802b104 <_dtoa_r+0x66c>
 802af46:	f040 826d 	bne.w	802b424 <_dtoa_r+0x98c>
 802af4a:	4b69      	ldr	r3, [pc, #420]	; (802b0f0 <_dtoa_r+0x658>)
 802af4c:	2200      	movs	r2, #0
 802af4e:	4640      	mov	r0, r8
 802af50:	4649      	mov	r1, r9
 802af52:	f7d5 fb6b 	bl	800062c <__aeabi_dmul>
 802af56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802af5a:	f7d5 fded 	bl	8000b38 <__aeabi_dcmpge>
 802af5e:	9e01      	ldr	r6, [sp, #4]
 802af60:	4637      	mov	r7, r6
 802af62:	2800      	cmp	r0, #0
 802af64:	f040 8243 	bne.w	802b3ee <_dtoa_r+0x956>
 802af68:	9d00      	ldr	r5, [sp, #0]
 802af6a:	2331      	movs	r3, #49	; 0x31
 802af6c:	f805 3b01 	strb.w	r3, [r5], #1
 802af70:	f10a 0a01 	add.w	sl, sl, #1
 802af74:	e23f      	b.n	802b3f6 <_dtoa_r+0x95e>
 802af76:	07f2      	lsls	r2, r6, #31
 802af78:	d505      	bpl.n	802af86 <_dtoa_r+0x4ee>
 802af7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802af7e:	f7d5 fb55 	bl	800062c <__aeabi_dmul>
 802af82:	3501      	adds	r5, #1
 802af84:	2301      	movs	r3, #1
 802af86:	1076      	asrs	r6, r6, #1
 802af88:	3708      	adds	r7, #8
 802af8a:	e76c      	b.n	802ae66 <_dtoa_r+0x3ce>
 802af8c:	2502      	movs	r5, #2
 802af8e:	e76f      	b.n	802ae70 <_dtoa_r+0x3d8>
 802af90:	9b01      	ldr	r3, [sp, #4]
 802af92:	f8cd a01c 	str.w	sl, [sp, #28]
 802af96:	930c      	str	r3, [sp, #48]	; 0x30
 802af98:	e78d      	b.n	802aeb6 <_dtoa_r+0x41e>
 802af9a:	9900      	ldr	r1, [sp, #0]
 802af9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802af9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802afa0:	4b4e      	ldr	r3, [pc, #312]	; (802b0dc <_dtoa_r+0x644>)
 802afa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 802afa6:	4401      	add	r1, r0
 802afa8:	9102      	str	r1, [sp, #8]
 802afaa:	9908      	ldr	r1, [sp, #32]
 802afac:	eeb0 8a47 	vmov.f32	s16, s14
 802afb0:	eef0 8a67 	vmov.f32	s17, s15
 802afb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802afb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802afbc:	2900      	cmp	r1, #0
 802afbe:	d045      	beq.n	802b04c <_dtoa_r+0x5b4>
 802afc0:	494c      	ldr	r1, [pc, #304]	; (802b0f4 <_dtoa_r+0x65c>)
 802afc2:	2000      	movs	r0, #0
 802afc4:	f7d5 fc5c 	bl	8000880 <__aeabi_ddiv>
 802afc8:	ec53 2b18 	vmov	r2, r3, d8
 802afcc:	f7d5 f976 	bl	80002bc <__aeabi_dsub>
 802afd0:	9d00      	ldr	r5, [sp, #0]
 802afd2:	ec41 0b18 	vmov	d8, r0, r1
 802afd6:	4639      	mov	r1, r7
 802afd8:	4630      	mov	r0, r6
 802afda:	f7d5 fdd7 	bl	8000b8c <__aeabi_d2iz>
 802afde:	900c      	str	r0, [sp, #48]	; 0x30
 802afe0:	f7d5 faba 	bl	8000558 <__aeabi_i2d>
 802afe4:	4602      	mov	r2, r0
 802afe6:	460b      	mov	r3, r1
 802afe8:	4630      	mov	r0, r6
 802afea:	4639      	mov	r1, r7
 802afec:	f7d5 f966 	bl	80002bc <__aeabi_dsub>
 802aff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aff2:	3330      	adds	r3, #48	; 0x30
 802aff4:	f805 3b01 	strb.w	r3, [r5], #1
 802aff8:	ec53 2b18 	vmov	r2, r3, d8
 802affc:	4606      	mov	r6, r0
 802affe:	460f      	mov	r7, r1
 802b000:	f7d5 fd86 	bl	8000b10 <__aeabi_dcmplt>
 802b004:	2800      	cmp	r0, #0
 802b006:	d165      	bne.n	802b0d4 <_dtoa_r+0x63c>
 802b008:	4632      	mov	r2, r6
 802b00a:	463b      	mov	r3, r7
 802b00c:	4935      	ldr	r1, [pc, #212]	; (802b0e4 <_dtoa_r+0x64c>)
 802b00e:	2000      	movs	r0, #0
 802b010:	f7d5 f954 	bl	80002bc <__aeabi_dsub>
 802b014:	ec53 2b18 	vmov	r2, r3, d8
 802b018:	f7d5 fd7a 	bl	8000b10 <__aeabi_dcmplt>
 802b01c:	2800      	cmp	r0, #0
 802b01e:	f040 80b9 	bne.w	802b194 <_dtoa_r+0x6fc>
 802b022:	9b02      	ldr	r3, [sp, #8]
 802b024:	429d      	cmp	r5, r3
 802b026:	f43f af75 	beq.w	802af14 <_dtoa_r+0x47c>
 802b02a:	4b2f      	ldr	r3, [pc, #188]	; (802b0e8 <_dtoa_r+0x650>)
 802b02c:	ec51 0b18 	vmov	r0, r1, d8
 802b030:	2200      	movs	r2, #0
 802b032:	f7d5 fafb 	bl	800062c <__aeabi_dmul>
 802b036:	4b2c      	ldr	r3, [pc, #176]	; (802b0e8 <_dtoa_r+0x650>)
 802b038:	ec41 0b18 	vmov	d8, r0, r1
 802b03c:	2200      	movs	r2, #0
 802b03e:	4630      	mov	r0, r6
 802b040:	4639      	mov	r1, r7
 802b042:	f7d5 faf3 	bl	800062c <__aeabi_dmul>
 802b046:	4606      	mov	r6, r0
 802b048:	460f      	mov	r7, r1
 802b04a:	e7c4      	b.n	802afd6 <_dtoa_r+0x53e>
 802b04c:	ec51 0b17 	vmov	r0, r1, d7
 802b050:	f7d5 faec 	bl	800062c <__aeabi_dmul>
 802b054:	9b02      	ldr	r3, [sp, #8]
 802b056:	9d00      	ldr	r5, [sp, #0]
 802b058:	930c      	str	r3, [sp, #48]	; 0x30
 802b05a:	ec41 0b18 	vmov	d8, r0, r1
 802b05e:	4639      	mov	r1, r7
 802b060:	4630      	mov	r0, r6
 802b062:	f7d5 fd93 	bl	8000b8c <__aeabi_d2iz>
 802b066:	9011      	str	r0, [sp, #68]	; 0x44
 802b068:	f7d5 fa76 	bl	8000558 <__aeabi_i2d>
 802b06c:	4602      	mov	r2, r0
 802b06e:	460b      	mov	r3, r1
 802b070:	4630      	mov	r0, r6
 802b072:	4639      	mov	r1, r7
 802b074:	f7d5 f922 	bl	80002bc <__aeabi_dsub>
 802b078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b07a:	3330      	adds	r3, #48	; 0x30
 802b07c:	f805 3b01 	strb.w	r3, [r5], #1
 802b080:	9b02      	ldr	r3, [sp, #8]
 802b082:	429d      	cmp	r5, r3
 802b084:	4606      	mov	r6, r0
 802b086:	460f      	mov	r7, r1
 802b088:	f04f 0200 	mov.w	r2, #0
 802b08c:	d134      	bne.n	802b0f8 <_dtoa_r+0x660>
 802b08e:	4b19      	ldr	r3, [pc, #100]	; (802b0f4 <_dtoa_r+0x65c>)
 802b090:	ec51 0b18 	vmov	r0, r1, d8
 802b094:	f7d5 f914 	bl	80002c0 <__adddf3>
 802b098:	4602      	mov	r2, r0
 802b09a:	460b      	mov	r3, r1
 802b09c:	4630      	mov	r0, r6
 802b09e:	4639      	mov	r1, r7
 802b0a0:	f7d5 fd54 	bl	8000b4c <__aeabi_dcmpgt>
 802b0a4:	2800      	cmp	r0, #0
 802b0a6:	d175      	bne.n	802b194 <_dtoa_r+0x6fc>
 802b0a8:	ec53 2b18 	vmov	r2, r3, d8
 802b0ac:	4911      	ldr	r1, [pc, #68]	; (802b0f4 <_dtoa_r+0x65c>)
 802b0ae:	2000      	movs	r0, #0
 802b0b0:	f7d5 f904 	bl	80002bc <__aeabi_dsub>
 802b0b4:	4602      	mov	r2, r0
 802b0b6:	460b      	mov	r3, r1
 802b0b8:	4630      	mov	r0, r6
 802b0ba:	4639      	mov	r1, r7
 802b0bc:	f7d5 fd28 	bl	8000b10 <__aeabi_dcmplt>
 802b0c0:	2800      	cmp	r0, #0
 802b0c2:	f43f af27 	beq.w	802af14 <_dtoa_r+0x47c>
 802b0c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b0c8:	1e6b      	subs	r3, r5, #1
 802b0ca:	930c      	str	r3, [sp, #48]	; 0x30
 802b0cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b0d0:	2b30      	cmp	r3, #48	; 0x30
 802b0d2:	d0f8      	beq.n	802b0c6 <_dtoa_r+0x62e>
 802b0d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 802b0d8:	e04a      	b.n	802b170 <_dtoa_r+0x6d8>
 802b0da:	bf00      	nop
 802b0dc:	08031580 	.word	0x08031580
 802b0e0:	08031558 	.word	0x08031558
 802b0e4:	3ff00000 	.word	0x3ff00000
 802b0e8:	40240000 	.word	0x40240000
 802b0ec:	401c0000 	.word	0x401c0000
 802b0f0:	40140000 	.word	0x40140000
 802b0f4:	3fe00000 	.word	0x3fe00000
 802b0f8:	4baf      	ldr	r3, [pc, #700]	; (802b3b8 <_dtoa_r+0x920>)
 802b0fa:	f7d5 fa97 	bl	800062c <__aeabi_dmul>
 802b0fe:	4606      	mov	r6, r0
 802b100:	460f      	mov	r7, r1
 802b102:	e7ac      	b.n	802b05e <_dtoa_r+0x5c6>
 802b104:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802b108:	9d00      	ldr	r5, [sp, #0]
 802b10a:	4642      	mov	r2, r8
 802b10c:	464b      	mov	r3, r9
 802b10e:	4630      	mov	r0, r6
 802b110:	4639      	mov	r1, r7
 802b112:	f7d5 fbb5 	bl	8000880 <__aeabi_ddiv>
 802b116:	f7d5 fd39 	bl	8000b8c <__aeabi_d2iz>
 802b11a:	9002      	str	r0, [sp, #8]
 802b11c:	f7d5 fa1c 	bl	8000558 <__aeabi_i2d>
 802b120:	4642      	mov	r2, r8
 802b122:	464b      	mov	r3, r9
 802b124:	f7d5 fa82 	bl	800062c <__aeabi_dmul>
 802b128:	4602      	mov	r2, r0
 802b12a:	460b      	mov	r3, r1
 802b12c:	4630      	mov	r0, r6
 802b12e:	4639      	mov	r1, r7
 802b130:	f7d5 f8c4 	bl	80002bc <__aeabi_dsub>
 802b134:	9e02      	ldr	r6, [sp, #8]
 802b136:	9f01      	ldr	r7, [sp, #4]
 802b138:	3630      	adds	r6, #48	; 0x30
 802b13a:	f805 6b01 	strb.w	r6, [r5], #1
 802b13e:	9e00      	ldr	r6, [sp, #0]
 802b140:	1bae      	subs	r6, r5, r6
 802b142:	42b7      	cmp	r7, r6
 802b144:	4602      	mov	r2, r0
 802b146:	460b      	mov	r3, r1
 802b148:	d137      	bne.n	802b1ba <_dtoa_r+0x722>
 802b14a:	f7d5 f8b9 	bl	80002c0 <__adddf3>
 802b14e:	4642      	mov	r2, r8
 802b150:	464b      	mov	r3, r9
 802b152:	4606      	mov	r6, r0
 802b154:	460f      	mov	r7, r1
 802b156:	f7d5 fcf9 	bl	8000b4c <__aeabi_dcmpgt>
 802b15a:	b9c8      	cbnz	r0, 802b190 <_dtoa_r+0x6f8>
 802b15c:	4642      	mov	r2, r8
 802b15e:	464b      	mov	r3, r9
 802b160:	4630      	mov	r0, r6
 802b162:	4639      	mov	r1, r7
 802b164:	f7d5 fcca 	bl	8000afc <__aeabi_dcmpeq>
 802b168:	b110      	cbz	r0, 802b170 <_dtoa_r+0x6d8>
 802b16a:	9b02      	ldr	r3, [sp, #8]
 802b16c:	07d9      	lsls	r1, r3, #31
 802b16e:	d40f      	bmi.n	802b190 <_dtoa_r+0x6f8>
 802b170:	4620      	mov	r0, r4
 802b172:	4659      	mov	r1, fp
 802b174:	f000 fd10 	bl	802bb98 <_Bfree>
 802b178:	2300      	movs	r3, #0
 802b17a:	702b      	strb	r3, [r5, #0]
 802b17c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b17e:	f10a 0001 	add.w	r0, sl, #1
 802b182:	6018      	str	r0, [r3, #0]
 802b184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b186:	2b00      	cmp	r3, #0
 802b188:	f43f acd8 	beq.w	802ab3c <_dtoa_r+0xa4>
 802b18c:	601d      	str	r5, [r3, #0]
 802b18e:	e4d5      	b.n	802ab3c <_dtoa_r+0xa4>
 802b190:	f8cd a01c 	str.w	sl, [sp, #28]
 802b194:	462b      	mov	r3, r5
 802b196:	461d      	mov	r5, r3
 802b198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802b19c:	2a39      	cmp	r2, #57	; 0x39
 802b19e:	d108      	bne.n	802b1b2 <_dtoa_r+0x71a>
 802b1a0:	9a00      	ldr	r2, [sp, #0]
 802b1a2:	429a      	cmp	r2, r3
 802b1a4:	d1f7      	bne.n	802b196 <_dtoa_r+0x6fe>
 802b1a6:	9a07      	ldr	r2, [sp, #28]
 802b1a8:	9900      	ldr	r1, [sp, #0]
 802b1aa:	3201      	adds	r2, #1
 802b1ac:	9207      	str	r2, [sp, #28]
 802b1ae:	2230      	movs	r2, #48	; 0x30
 802b1b0:	700a      	strb	r2, [r1, #0]
 802b1b2:	781a      	ldrb	r2, [r3, #0]
 802b1b4:	3201      	adds	r2, #1
 802b1b6:	701a      	strb	r2, [r3, #0]
 802b1b8:	e78c      	b.n	802b0d4 <_dtoa_r+0x63c>
 802b1ba:	4b7f      	ldr	r3, [pc, #508]	; (802b3b8 <_dtoa_r+0x920>)
 802b1bc:	2200      	movs	r2, #0
 802b1be:	f7d5 fa35 	bl	800062c <__aeabi_dmul>
 802b1c2:	2200      	movs	r2, #0
 802b1c4:	2300      	movs	r3, #0
 802b1c6:	4606      	mov	r6, r0
 802b1c8:	460f      	mov	r7, r1
 802b1ca:	f7d5 fc97 	bl	8000afc <__aeabi_dcmpeq>
 802b1ce:	2800      	cmp	r0, #0
 802b1d0:	d09b      	beq.n	802b10a <_dtoa_r+0x672>
 802b1d2:	e7cd      	b.n	802b170 <_dtoa_r+0x6d8>
 802b1d4:	9a08      	ldr	r2, [sp, #32]
 802b1d6:	2a00      	cmp	r2, #0
 802b1d8:	f000 80c4 	beq.w	802b364 <_dtoa_r+0x8cc>
 802b1dc:	9a05      	ldr	r2, [sp, #20]
 802b1de:	2a01      	cmp	r2, #1
 802b1e0:	f300 80a8 	bgt.w	802b334 <_dtoa_r+0x89c>
 802b1e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b1e6:	2a00      	cmp	r2, #0
 802b1e8:	f000 80a0 	beq.w	802b32c <_dtoa_r+0x894>
 802b1ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802b1f0:	9e06      	ldr	r6, [sp, #24]
 802b1f2:	4645      	mov	r5, r8
 802b1f4:	9a04      	ldr	r2, [sp, #16]
 802b1f6:	2101      	movs	r1, #1
 802b1f8:	441a      	add	r2, r3
 802b1fa:	4620      	mov	r0, r4
 802b1fc:	4498      	add	r8, r3
 802b1fe:	9204      	str	r2, [sp, #16]
 802b200:	f000 fd86 	bl	802bd10 <__i2b>
 802b204:	4607      	mov	r7, r0
 802b206:	2d00      	cmp	r5, #0
 802b208:	dd0b      	ble.n	802b222 <_dtoa_r+0x78a>
 802b20a:	9b04      	ldr	r3, [sp, #16]
 802b20c:	2b00      	cmp	r3, #0
 802b20e:	dd08      	ble.n	802b222 <_dtoa_r+0x78a>
 802b210:	42ab      	cmp	r3, r5
 802b212:	9a04      	ldr	r2, [sp, #16]
 802b214:	bfa8      	it	ge
 802b216:	462b      	movge	r3, r5
 802b218:	eba8 0803 	sub.w	r8, r8, r3
 802b21c:	1aed      	subs	r5, r5, r3
 802b21e:	1ad3      	subs	r3, r2, r3
 802b220:	9304      	str	r3, [sp, #16]
 802b222:	9b06      	ldr	r3, [sp, #24]
 802b224:	b1fb      	cbz	r3, 802b266 <_dtoa_r+0x7ce>
 802b226:	9b08      	ldr	r3, [sp, #32]
 802b228:	2b00      	cmp	r3, #0
 802b22a:	f000 809f 	beq.w	802b36c <_dtoa_r+0x8d4>
 802b22e:	2e00      	cmp	r6, #0
 802b230:	dd11      	ble.n	802b256 <_dtoa_r+0x7be>
 802b232:	4639      	mov	r1, r7
 802b234:	4632      	mov	r2, r6
 802b236:	4620      	mov	r0, r4
 802b238:	f000 fe26 	bl	802be88 <__pow5mult>
 802b23c:	465a      	mov	r2, fp
 802b23e:	4601      	mov	r1, r0
 802b240:	4607      	mov	r7, r0
 802b242:	4620      	mov	r0, r4
 802b244:	f000 fd7a 	bl	802bd3c <__multiply>
 802b248:	4659      	mov	r1, fp
 802b24a:	9007      	str	r0, [sp, #28]
 802b24c:	4620      	mov	r0, r4
 802b24e:	f000 fca3 	bl	802bb98 <_Bfree>
 802b252:	9b07      	ldr	r3, [sp, #28]
 802b254:	469b      	mov	fp, r3
 802b256:	9b06      	ldr	r3, [sp, #24]
 802b258:	1b9a      	subs	r2, r3, r6
 802b25a:	d004      	beq.n	802b266 <_dtoa_r+0x7ce>
 802b25c:	4659      	mov	r1, fp
 802b25e:	4620      	mov	r0, r4
 802b260:	f000 fe12 	bl	802be88 <__pow5mult>
 802b264:	4683      	mov	fp, r0
 802b266:	2101      	movs	r1, #1
 802b268:	4620      	mov	r0, r4
 802b26a:	f000 fd51 	bl	802bd10 <__i2b>
 802b26e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b270:	2b00      	cmp	r3, #0
 802b272:	4606      	mov	r6, r0
 802b274:	dd7c      	ble.n	802b370 <_dtoa_r+0x8d8>
 802b276:	461a      	mov	r2, r3
 802b278:	4601      	mov	r1, r0
 802b27a:	4620      	mov	r0, r4
 802b27c:	f000 fe04 	bl	802be88 <__pow5mult>
 802b280:	9b05      	ldr	r3, [sp, #20]
 802b282:	2b01      	cmp	r3, #1
 802b284:	4606      	mov	r6, r0
 802b286:	dd76      	ble.n	802b376 <_dtoa_r+0x8de>
 802b288:	2300      	movs	r3, #0
 802b28a:	9306      	str	r3, [sp, #24]
 802b28c:	6933      	ldr	r3, [r6, #16]
 802b28e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802b292:	6918      	ldr	r0, [r3, #16]
 802b294:	f000 fcec 	bl	802bc70 <__hi0bits>
 802b298:	f1c0 0020 	rsb	r0, r0, #32
 802b29c:	9b04      	ldr	r3, [sp, #16]
 802b29e:	4418      	add	r0, r3
 802b2a0:	f010 001f 	ands.w	r0, r0, #31
 802b2a4:	f000 8086 	beq.w	802b3b4 <_dtoa_r+0x91c>
 802b2a8:	f1c0 0320 	rsb	r3, r0, #32
 802b2ac:	2b04      	cmp	r3, #4
 802b2ae:	dd7f      	ble.n	802b3b0 <_dtoa_r+0x918>
 802b2b0:	f1c0 001c 	rsb	r0, r0, #28
 802b2b4:	9b04      	ldr	r3, [sp, #16]
 802b2b6:	4403      	add	r3, r0
 802b2b8:	4480      	add	r8, r0
 802b2ba:	4405      	add	r5, r0
 802b2bc:	9304      	str	r3, [sp, #16]
 802b2be:	f1b8 0f00 	cmp.w	r8, #0
 802b2c2:	dd05      	ble.n	802b2d0 <_dtoa_r+0x838>
 802b2c4:	4659      	mov	r1, fp
 802b2c6:	4642      	mov	r2, r8
 802b2c8:	4620      	mov	r0, r4
 802b2ca:	f000 fe37 	bl	802bf3c <__lshift>
 802b2ce:	4683      	mov	fp, r0
 802b2d0:	9b04      	ldr	r3, [sp, #16]
 802b2d2:	2b00      	cmp	r3, #0
 802b2d4:	dd05      	ble.n	802b2e2 <_dtoa_r+0x84a>
 802b2d6:	4631      	mov	r1, r6
 802b2d8:	461a      	mov	r2, r3
 802b2da:	4620      	mov	r0, r4
 802b2dc:	f000 fe2e 	bl	802bf3c <__lshift>
 802b2e0:	4606      	mov	r6, r0
 802b2e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b2e4:	2b00      	cmp	r3, #0
 802b2e6:	d069      	beq.n	802b3bc <_dtoa_r+0x924>
 802b2e8:	4631      	mov	r1, r6
 802b2ea:	4658      	mov	r0, fp
 802b2ec:	f000 fe92 	bl	802c014 <__mcmp>
 802b2f0:	2800      	cmp	r0, #0
 802b2f2:	da63      	bge.n	802b3bc <_dtoa_r+0x924>
 802b2f4:	2300      	movs	r3, #0
 802b2f6:	4659      	mov	r1, fp
 802b2f8:	220a      	movs	r2, #10
 802b2fa:	4620      	mov	r0, r4
 802b2fc:	f000 fc6e 	bl	802bbdc <__multadd>
 802b300:	9b08      	ldr	r3, [sp, #32]
 802b302:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b306:	4683      	mov	fp, r0
 802b308:	2b00      	cmp	r3, #0
 802b30a:	f000 818f 	beq.w	802b62c <_dtoa_r+0xb94>
 802b30e:	4639      	mov	r1, r7
 802b310:	2300      	movs	r3, #0
 802b312:	220a      	movs	r2, #10
 802b314:	4620      	mov	r0, r4
 802b316:	f000 fc61 	bl	802bbdc <__multadd>
 802b31a:	f1b9 0f00 	cmp.w	r9, #0
 802b31e:	4607      	mov	r7, r0
 802b320:	f300 808e 	bgt.w	802b440 <_dtoa_r+0x9a8>
 802b324:	9b05      	ldr	r3, [sp, #20]
 802b326:	2b02      	cmp	r3, #2
 802b328:	dc50      	bgt.n	802b3cc <_dtoa_r+0x934>
 802b32a:	e089      	b.n	802b440 <_dtoa_r+0x9a8>
 802b32c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802b32e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802b332:	e75d      	b.n	802b1f0 <_dtoa_r+0x758>
 802b334:	9b01      	ldr	r3, [sp, #4]
 802b336:	1e5e      	subs	r6, r3, #1
 802b338:	9b06      	ldr	r3, [sp, #24]
 802b33a:	42b3      	cmp	r3, r6
 802b33c:	bfbf      	itttt	lt
 802b33e:	9b06      	ldrlt	r3, [sp, #24]
 802b340:	9606      	strlt	r6, [sp, #24]
 802b342:	1af2      	sublt	r2, r6, r3
 802b344:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 802b346:	bfb6      	itet	lt
 802b348:	189b      	addlt	r3, r3, r2
 802b34a:	1b9e      	subge	r6, r3, r6
 802b34c:	930d      	strlt	r3, [sp, #52]	; 0x34
 802b34e:	9b01      	ldr	r3, [sp, #4]
 802b350:	bfb8      	it	lt
 802b352:	2600      	movlt	r6, #0
 802b354:	2b00      	cmp	r3, #0
 802b356:	bfb5      	itete	lt
 802b358:	eba8 0503 	sublt.w	r5, r8, r3
 802b35c:	9b01      	ldrge	r3, [sp, #4]
 802b35e:	2300      	movlt	r3, #0
 802b360:	4645      	movge	r5, r8
 802b362:	e747      	b.n	802b1f4 <_dtoa_r+0x75c>
 802b364:	9e06      	ldr	r6, [sp, #24]
 802b366:	9f08      	ldr	r7, [sp, #32]
 802b368:	4645      	mov	r5, r8
 802b36a:	e74c      	b.n	802b206 <_dtoa_r+0x76e>
 802b36c:	9a06      	ldr	r2, [sp, #24]
 802b36e:	e775      	b.n	802b25c <_dtoa_r+0x7c4>
 802b370:	9b05      	ldr	r3, [sp, #20]
 802b372:	2b01      	cmp	r3, #1
 802b374:	dc18      	bgt.n	802b3a8 <_dtoa_r+0x910>
 802b376:	9b02      	ldr	r3, [sp, #8]
 802b378:	b9b3      	cbnz	r3, 802b3a8 <_dtoa_r+0x910>
 802b37a:	9b03      	ldr	r3, [sp, #12]
 802b37c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b380:	b9a3      	cbnz	r3, 802b3ac <_dtoa_r+0x914>
 802b382:	9b03      	ldr	r3, [sp, #12]
 802b384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b388:	0d1b      	lsrs	r3, r3, #20
 802b38a:	051b      	lsls	r3, r3, #20
 802b38c:	b12b      	cbz	r3, 802b39a <_dtoa_r+0x902>
 802b38e:	9b04      	ldr	r3, [sp, #16]
 802b390:	3301      	adds	r3, #1
 802b392:	9304      	str	r3, [sp, #16]
 802b394:	f108 0801 	add.w	r8, r8, #1
 802b398:	2301      	movs	r3, #1
 802b39a:	9306      	str	r3, [sp, #24]
 802b39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b39e:	2b00      	cmp	r3, #0
 802b3a0:	f47f af74 	bne.w	802b28c <_dtoa_r+0x7f4>
 802b3a4:	2001      	movs	r0, #1
 802b3a6:	e779      	b.n	802b29c <_dtoa_r+0x804>
 802b3a8:	2300      	movs	r3, #0
 802b3aa:	e7f6      	b.n	802b39a <_dtoa_r+0x902>
 802b3ac:	9b02      	ldr	r3, [sp, #8]
 802b3ae:	e7f4      	b.n	802b39a <_dtoa_r+0x902>
 802b3b0:	d085      	beq.n	802b2be <_dtoa_r+0x826>
 802b3b2:	4618      	mov	r0, r3
 802b3b4:	301c      	adds	r0, #28
 802b3b6:	e77d      	b.n	802b2b4 <_dtoa_r+0x81c>
 802b3b8:	40240000 	.word	0x40240000
 802b3bc:	9b01      	ldr	r3, [sp, #4]
 802b3be:	2b00      	cmp	r3, #0
 802b3c0:	dc38      	bgt.n	802b434 <_dtoa_r+0x99c>
 802b3c2:	9b05      	ldr	r3, [sp, #20]
 802b3c4:	2b02      	cmp	r3, #2
 802b3c6:	dd35      	ble.n	802b434 <_dtoa_r+0x99c>
 802b3c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802b3cc:	f1b9 0f00 	cmp.w	r9, #0
 802b3d0:	d10d      	bne.n	802b3ee <_dtoa_r+0x956>
 802b3d2:	4631      	mov	r1, r6
 802b3d4:	464b      	mov	r3, r9
 802b3d6:	2205      	movs	r2, #5
 802b3d8:	4620      	mov	r0, r4
 802b3da:	f000 fbff 	bl	802bbdc <__multadd>
 802b3de:	4601      	mov	r1, r0
 802b3e0:	4606      	mov	r6, r0
 802b3e2:	4658      	mov	r0, fp
 802b3e4:	f000 fe16 	bl	802c014 <__mcmp>
 802b3e8:	2800      	cmp	r0, #0
 802b3ea:	f73f adbd 	bgt.w	802af68 <_dtoa_r+0x4d0>
 802b3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b3f0:	9d00      	ldr	r5, [sp, #0]
 802b3f2:	ea6f 0a03 	mvn.w	sl, r3
 802b3f6:	f04f 0800 	mov.w	r8, #0
 802b3fa:	4631      	mov	r1, r6
 802b3fc:	4620      	mov	r0, r4
 802b3fe:	f000 fbcb 	bl	802bb98 <_Bfree>
 802b402:	2f00      	cmp	r7, #0
 802b404:	f43f aeb4 	beq.w	802b170 <_dtoa_r+0x6d8>
 802b408:	f1b8 0f00 	cmp.w	r8, #0
 802b40c:	d005      	beq.n	802b41a <_dtoa_r+0x982>
 802b40e:	45b8      	cmp	r8, r7
 802b410:	d003      	beq.n	802b41a <_dtoa_r+0x982>
 802b412:	4641      	mov	r1, r8
 802b414:	4620      	mov	r0, r4
 802b416:	f000 fbbf 	bl	802bb98 <_Bfree>
 802b41a:	4639      	mov	r1, r7
 802b41c:	4620      	mov	r0, r4
 802b41e:	f000 fbbb 	bl	802bb98 <_Bfree>
 802b422:	e6a5      	b.n	802b170 <_dtoa_r+0x6d8>
 802b424:	2600      	movs	r6, #0
 802b426:	4637      	mov	r7, r6
 802b428:	e7e1      	b.n	802b3ee <_dtoa_r+0x956>
 802b42a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802b42c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 802b430:	4637      	mov	r7, r6
 802b432:	e599      	b.n	802af68 <_dtoa_r+0x4d0>
 802b434:	9b08      	ldr	r3, [sp, #32]
 802b436:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802b43a:	2b00      	cmp	r3, #0
 802b43c:	f000 80fd 	beq.w	802b63a <_dtoa_r+0xba2>
 802b440:	2d00      	cmp	r5, #0
 802b442:	dd05      	ble.n	802b450 <_dtoa_r+0x9b8>
 802b444:	4639      	mov	r1, r7
 802b446:	462a      	mov	r2, r5
 802b448:	4620      	mov	r0, r4
 802b44a:	f000 fd77 	bl	802bf3c <__lshift>
 802b44e:	4607      	mov	r7, r0
 802b450:	9b06      	ldr	r3, [sp, #24]
 802b452:	2b00      	cmp	r3, #0
 802b454:	d05c      	beq.n	802b510 <_dtoa_r+0xa78>
 802b456:	6879      	ldr	r1, [r7, #4]
 802b458:	4620      	mov	r0, r4
 802b45a:	f000 fb5d 	bl	802bb18 <_Balloc>
 802b45e:	4605      	mov	r5, r0
 802b460:	b928      	cbnz	r0, 802b46e <_dtoa_r+0x9d6>
 802b462:	4b80      	ldr	r3, [pc, #512]	; (802b664 <_dtoa_r+0xbcc>)
 802b464:	4602      	mov	r2, r0
 802b466:	f240 21ea 	movw	r1, #746	; 0x2ea
 802b46a:	f7ff bb2e 	b.w	802aaca <_dtoa_r+0x32>
 802b46e:	693a      	ldr	r2, [r7, #16]
 802b470:	3202      	adds	r2, #2
 802b472:	0092      	lsls	r2, r2, #2
 802b474:	f107 010c 	add.w	r1, r7, #12
 802b478:	300c      	adds	r0, #12
 802b47a:	f7fe f837 	bl	80294ec <memcpy>
 802b47e:	2201      	movs	r2, #1
 802b480:	4629      	mov	r1, r5
 802b482:	4620      	mov	r0, r4
 802b484:	f000 fd5a 	bl	802bf3c <__lshift>
 802b488:	9b00      	ldr	r3, [sp, #0]
 802b48a:	3301      	adds	r3, #1
 802b48c:	9301      	str	r3, [sp, #4]
 802b48e:	9b00      	ldr	r3, [sp, #0]
 802b490:	444b      	add	r3, r9
 802b492:	9307      	str	r3, [sp, #28]
 802b494:	9b02      	ldr	r3, [sp, #8]
 802b496:	f003 0301 	and.w	r3, r3, #1
 802b49a:	46b8      	mov	r8, r7
 802b49c:	9306      	str	r3, [sp, #24]
 802b49e:	4607      	mov	r7, r0
 802b4a0:	9b01      	ldr	r3, [sp, #4]
 802b4a2:	4631      	mov	r1, r6
 802b4a4:	3b01      	subs	r3, #1
 802b4a6:	4658      	mov	r0, fp
 802b4a8:	9302      	str	r3, [sp, #8]
 802b4aa:	f7ff fa67 	bl	802a97c <quorem>
 802b4ae:	4603      	mov	r3, r0
 802b4b0:	3330      	adds	r3, #48	; 0x30
 802b4b2:	9004      	str	r0, [sp, #16]
 802b4b4:	4641      	mov	r1, r8
 802b4b6:	4658      	mov	r0, fp
 802b4b8:	9308      	str	r3, [sp, #32]
 802b4ba:	f000 fdab 	bl	802c014 <__mcmp>
 802b4be:	463a      	mov	r2, r7
 802b4c0:	4681      	mov	r9, r0
 802b4c2:	4631      	mov	r1, r6
 802b4c4:	4620      	mov	r0, r4
 802b4c6:	f000 fdc1 	bl	802c04c <__mdiff>
 802b4ca:	68c2      	ldr	r2, [r0, #12]
 802b4cc:	9b08      	ldr	r3, [sp, #32]
 802b4ce:	4605      	mov	r5, r0
 802b4d0:	bb02      	cbnz	r2, 802b514 <_dtoa_r+0xa7c>
 802b4d2:	4601      	mov	r1, r0
 802b4d4:	4658      	mov	r0, fp
 802b4d6:	f000 fd9d 	bl	802c014 <__mcmp>
 802b4da:	9b08      	ldr	r3, [sp, #32]
 802b4dc:	4602      	mov	r2, r0
 802b4de:	4629      	mov	r1, r5
 802b4e0:	4620      	mov	r0, r4
 802b4e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 802b4e6:	f000 fb57 	bl	802bb98 <_Bfree>
 802b4ea:	9b05      	ldr	r3, [sp, #20]
 802b4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b4ee:	9d01      	ldr	r5, [sp, #4]
 802b4f0:	ea43 0102 	orr.w	r1, r3, r2
 802b4f4:	9b06      	ldr	r3, [sp, #24]
 802b4f6:	430b      	orrs	r3, r1
 802b4f8:	9b08      	ldr	r3, [sp, #32]
 802b4fa:	d10d      	bne.n	802b518 <_dtoa_r+0xa80>
 802b4fc:	2b39      	cmp	r3, #57	; 0x39
 802b4fe:	d029      	beq.n	802b554 <_dtoa_r+0xabc>
 802b500:	f1b9 0f00 	cmp.w	r9, #0
 802b504:	dd01      	ble.n	802b50a <_dtoa_r+0xa72>
 802b506:	9b04      	ldr	r3, [sp, #16]
 802b508:	3331      	adds	r3, #49	; 0x31
 802b50a:	9a02      	ldr	r2, [sp, #8]
 802b50c:	7013      	strb	r3, [r2, #0]
 802b50e:	e774      	b.n	802b3fa <_dtoa_r+0x962>
 802b510:	4638      	mov	r0, r7
 802b512:	e7b9      	b.n	802b488 <_dtoa_r+0x9f0>
 802b514:	2201      	movs	r2, #1
 802b516:	e7e2      	b.n	802b4de <_dtoa_r+0xa46>
 802b518:	f1b9 0f00 	cmp.w	r9, #0
 802b51c:	db06      	blt.n	802b52c <_dtoa_r+0xa94>
 802b51e:	9905      	ldr	r1, [sp, #20]
 802b520:	ea41 0909 	orr.w	r9, r1, r9
 802b524:	9906      	ldr	r1, [sp, #24]
 802b526:	ea59 0101 	orrs.w	r1, r9, r1
 802b52a:	d120      	bne.n	802b56e <_dtoa_r+0xad6>
 802b52c:	2a00      	cmp	r2, #0
 802b52e:	ddec      	ble.n	802b50a <_dtoa_r+0xa72>
 802b530:	4659      	mov	r1, fp
 802b532:	2201      	movs	r2, #1
 802b534:	4620      	mov	r0, r4
 802b536:	9301      	str	r3, [sp, #4]
 802b538:	f000 fd00 	bl	802bf3c <__lshift>
 802b53c:	4631      	mov	r1, r6
 802b53e:	4683      	mov	fp, r0
 802b540:	f000 fd68 	bl	802c014 <__mcmp>
 802b544:	2800      	cmp	r0, #0
 802b546:	9b01      	ldr	r3, [sp, #4]
 802b548:	dc02      	bgt.n	802b550 <_dtoa_r+0xab8>
 802b54a:	d1de      	bne.n	802b50a <_dtoa_r+0xa72>
 802b54c:	07da      	lsls	r2, r3, #31
 802b54e:	d5dc      	bpl.n	802b50a <_dtoa_r+0xa72>
 802b550:	2b39      	cmp	r3, #57	; 0x39
 802b552:	d1d8      	bne.n	802b506 <_dtoa_r+0xa6e>
 802b554:	9a02      	ldr	r2, [sp, #8]
 802b556:	2339      	movs	r3, #57	; 0x39
 802b558:	7013      	strb	r3, [r2, #0]
 802b55a:	462b      	mov	r3, r5
 802b55c:	461d      	mov	r5, r3
 802b55e:	3b01      	subs	r3, #1
 802b560:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802b564:	2a39      	cmp	r2, #57	; 0x39
 802b566:	d050      	beq.n	802b60a <_dtoa_r+0xb72>
 802b568:	3201      	adds	r2, #1
 802b56a:	701a      	strb	r2, [r3, #0]
 802b56c:	e745      	b.n	802b3fa <_dtoa_r+0x962>
 802b56e:	2a00      	cmp	r2, #0
 802b570:	dd03      	ble.n	802b57a <_dtoa_r+0xae2>
 802b572:	2b39      	cmp	r3, #57	; 0x39
 802b574:	d0ee      	beq.n	802b554 <_dtoa_r+0xabc>
 802b576:	3301      	adds	r3, #1
 802b578:	e7c7      	b.n	802b50a <_dtoa_r+0xa72>
 802b57a:	9a01      	ldr	r2, [sp, #4]
 802b57c:	9907      	ldr	r1, [sp, #28]
 802b57e:	f802 3c01 	strb.w	r3, [r2, #-1]
 802b582:	428a      	cmp	r2, r1
 802b584:	d02a      	beq.n	802b5dc <_dtoa_r+0xb44>
 802b586:	4659      	mov	r1, fp
 802b588:	2300      	movs	r3, #0
 802b58a:	220a      	movs	r2, #10
 802b58c:	4620      	mov	r0, r4
 802b58e:	f000 fb25 	bl	802bbdc <__multadd>
 802b592:	45b8      	cmp	r8, r7
 802b594:	4683      	mov	fp, r0
 802b596:	f04f 0300 	mov.w	r3, #0
 802b59a:	f04f 020a 	mov.w	r2, #10
 802b59e:	4641      	mov	r1, r8
 802b5a0:	4620      	mov	r0, r4
 802b5a2:	d107      	bne.n	802b5b4 <_dtoa_r+0xb1c>
 802b5a4:	f000 fb1a 	bl	802bbdc <__multadd>
 802b5a8:	4680      	mov	r8, r0
 802b5aa:	4607      	mov	r7, r0
 802b5ac:	9b01      	ldr	r3, [sp, #4]
 802b5ae:	3301      	adds	r3, #1
 802b5b0:	9301      	str	r3, [sp, #4]
 802b5b2:	e775      	b.n	802b4a0 <_dtoa_r+0xa08>
 802b5b4:	f000 fb12 	bl	802bbdc <__multadd>
 802b5b8:	4639      	mov	r1, r7
 802b5ba:	4680      	mov	r8, r0
 802b5bc:	2300      	movs	r3, #0
 802b5be:	220a      	movs	r2, #10
 802b5c0:	4620      	mov	r0, r4
 802b5c2:	f000 fb0b 	bl	802bbdc <__multadd>
 802b5c6:	4607      	mov	r7, r0
 802b5c8:	e7f0      	b.n	802b5ac <_dtoa_r+0xb14>
 802b5ca:	f1b9 0f00 	cmp.w	r9, #0
 802b5ce:	9a00      	ldr	r2, [sp, #0]
 802b5d0:	bfcc      	ite	gt
 802b5d2:	464d      	movgt	r5, r9
 802b5d4:	2501      	movle	r5, #1
 802b5d6:	4415      	add	r5, r2
 802b5d8:	f04f 0800 	mov.w	r8, #0
 802b5dc:	4659      	mov	r1, fp
 802b5de:	2201      	movs	r2, #1
 802b5e0:	4620      	mov	r0, r4
 802b5e2:	9301      	str	r3, [sp, #4]
 802b5e4:	f000 fcaa 	bl	802bf3c <__lshift>
 802b5e8:	4631      	mov	r1, r6
 802b5ea:	4683      	mov	fp, r0
 802b5ec:	f000 fd12 	bl	802c014 <__mcmp>
 802b5f0:	2800      	cmp	r0, #0
 802b5f2:	dcb2      	bgt.n	802b55a <_dtoa_r+0xac2>
 802b5f4:	d102      	bne.n	802b5fc <_dtoa_r+0xb64>
 802b5f6:	9b01      	ldr	r3, [sp, #4]
 802b5f8:	07db      	lsls	r3, r3, #31
 802b5fa:	d4ae      	bmi.n	802b55a <_dtoa_r+0xac2>
 802b5fc:	462b      	mov	r3, r5
 802b5fe:	461d      	mov	r5, r3
 802b600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802b604:	2a30      	cmp	r2, #48	; 0x30
 802b606:	d0fa      	beq.n	802b5fe <_dtoa_r+0xb66>
 802b608:	e6f7      	b.n	802b3fa <_dtoa_r+0x962>
 802b60a:	9a00      	ldr	r2, [sp, #0]
 802b60c:	429a      	cmp	r2, r3
 802b60e:	d1a5      	bne.n	802b55c <_dtoa_r+0xac4>
 802b610:	f10a 0a01 	add.w	sl, sl, #1
 802b614:	2331      	movs	r3, #49	; 0x31
 802b616:	e779      	b.n	802b50c <_dtoa_r+0xa74>
 802b618:	4b13      	ldr	r3, [pc, #76]	; (802b668 <_dtoa_r+0xbd0>)
 802b61a:	f7ff baaf 	b.w	802ab7c <_dtoa_r+0xe4>
 802b61e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b620:	2b00      	cmp	r3, #0
 802b622:	f47f aa86 	bne.w	802ab32 <_dtoa_r+0x9a>
 802b626:	4b11      	ldr	r3, [pc, #68]	; (802b66c <_dtoa_r+0xbd4>)
 802b628:	f7ff baa8 	b.w	802ab7c <_dtoa_r+0xe4>
 802b62c:	f1b9 0f00 	cmp.w	r9, #0
 802b630:	dc03      	bgt.n	802b63a <_dtoa_r+0xba2>
 802b632:	9b05      	ldr	r3, [sp, #20]
 802b634:	2b02      	cmp	r3, #2
 802b636:	f73f aec9 	bgt.w	802b3cc <_dtoa_r+0x934>
 802b63a:	9d00      	ldr	r5, [sp, #0]
 802b63c:	4631      	mov	r1, r6
 802b63e:	4658      	mov	r0, fp
 802b640:	f7ff f99c 	bl	802a97c <quorem>
 802b644:	f100 0330 	add.w	r3, r0, #48	; 0x30
 802b648:	f805 3b01 	strb.w	r3, [r5], #1
 802b64c:	9a00      	ldr	r2, [sp, #0]
 802b64e:	1aaa      	subs	r2, r5, r2
 802b650:	4591      	cmp	r9, r2
 802b652:	ddba      	ble.n	802b5ca <_dtoa_r+0xb32>
 802b654:	4659      	mov	r1, fp
 802b656:	2300      	movs	r3, #0
 802b658:	220a      	movs	r2, #10
 802b65a:	4620      	mov	r0, r4
 802b65c:	f000 fabe 	bl	802bbdc <__multadd>
 802b660:	4683      	mov	fp, r0
 802b662:	e7eb      	b.n	802b63c <_dtoa_r+0xba4>
 802b664:	08031474 	.word	0x08031474
 802b668:	080309ed 	.word	0x080309ed
 802b66c:	08031408 	.word	0x08031408

0802b670 <__sflush_r>:
 802b670:	898a      	ldrh	r2, [r1, #12]
 802b672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b676:	4605      	mov	r5, r0
 802b678:	0710      	lsls	r0, r2, #28
 802b67a:	460c      	mov	r4, r1
 802b67c:	d458      	bmi.n	802b730 <__sflush_r+0xc0>
 802b67e:	684b      	ldr	r3, [r1, #4]
 802b680:	2b00      	cmp	r3, #0
 802b682:	dc05      	bgt.n	802b690 <__sflush_r+0x20>
 802b684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b686:	2b00      	cmp	r3, #0
 802b688:	dc02      	bgt.n	802b690 <__sflush_r+0x20>
 802b68a:	2000      	movs	r0, #0
 802b68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b692:	2e00      	cmp	r6, #0
 802b694:	d0f9      	beq.n	802b68a <__sflush_r+0x1a>
 802b696:	2300      	movs	r3, #0
 802b698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b69c:	682f      	ldr	r7, [r5, #0]
 802b69e:	602b      	str	r3, [r5, #0]
 802b6a0:	d032      	beq.n	802b708 <__sflush_r+0x98>
 802b6a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b6a4:	89a3      	ldrh	r3, [r4, #12]
 802b6a6:	075a      	lsls	r2, r3, #29
 802b6a8:	d505      	bpl.n	802b6b6 <__sflush_r+0x46>
 802b6aa:	6863      	ldr	r3, [r4, #4]
 802b6ac:	1ac0      	subs	r0, r0, r3
 802b6ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b6b0:	b10b      	cbz	r3, 802b6b6 <__sflush_r+0x46>
 802b6b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b6b4:	1ac0      	subs	r0, r0, r3
 802b6b6:	2300      	movs	r3, #0
 802b6b8:	4602      	mov	r2, r0
 802b6ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b6bc:	6a21      	ldr	r1, [r4, #32]
 802b6be:	4628      	mov	r0, r5
 802b6c0:	47b0      	blx	r6
 802b6c2:	1c43      	adds	r3, r0, #1
 802b6c4:	89a3      	ldrh	r3, [r4, #12]
 802b6c6:	d106      	bne.n	802b6d6 <__sflush_r+0x66>
 802b6c8:	6829      	ldr	r1, [r5, #0]
 802b6ca:	291d      	cmp	r1, #29
 802b6cc:	d82c      	bhi.n	802b728 <__sflush_r+0xb8>
 802b6ce:	4a2a      	ldr	r2, [pc, #168]	; (802b778 <__sflush_r+0x108>)
 802b6d0:	40ca      	lsrs	r2, r1
 802b6d2:	07d6      	lsls	r6, r2, #31
 802b6d4:	d528      	bpl.n	802b728 <__sflush_r+0xb8>
 802b6d6:	2200      	movs	r2, #0
 802b6d8:	6062      	str	r2, [r4, #4]
 802b6da:	04d9      	lsls	r1, r3, #19
 802b6dc:	6922      	ldr	r2, [r4, #16]
 802b6de:	6022      	str	r2, [r4, #0]
 802b6e0:	d504      	bpl.n	802b6ec <__sflush_r+0x7c>
 802b6e2:	1c42      	adds	r2, r0, #1
 802b6e4:	d101      	bne.n	802b6ea <__sflush_r+0x7a>
 802b6e6:	682b      	ldr	r3, [r5, #0]
 802b6e8:	b903      	cbnz	r3, 802b6ec <__sflush_r+0x7c>
 802b6ea:	6560      	str	r0, [r4, #84]	; 0x54
 802b6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b6ee:	602f      	str	r7, [r5, #0]
 802b6f0:	2900      	cmp	r1, #0
 802b6f2:	d0ca      	beq.n	802b68a <__sflush_r+0x1a>
 802b6f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b6f8:	4299      	cmp	r1, r3
 802b6fa:	d002      	beq.n	802b702 <__sflush_r+0x92>
 802b6fc:	4628      	mov	r0, r5
 802b6fe:	f7fd ff25 	bl	802954c <_free_r>
 802b702:	2000      	movs	r0, #0
 802b704:	6360      	str	r0, [r4, #52]	; 0x34
 802b706:	e7c1      	b.n	802b68c <__sflush_r+0x1c>
 802b708:	6a21      	ldr	r1, [r4, #32]
 802b70a:	2301      	movs	r3, #1
 802b70c:	4628      	mov	r0, r5
 802b70e:	47b0      	blx	r6
 802b710:	1c41      	adds	r1, r0, #1
 802b712:	d1c7      	bne.n	802b6a4 <__sflush_r+0x34>
 802b714:	682b      	ldr	r3, [r5, #0]
 802b716:	2b00      	cmp	r3, #0
 802b718:	d0c4      	beq.n	802b6a4 <__sflush_r+0x34>
 802b71a:	2b1d      	cmp	r3, #29
 802b71c:	d001      	beq.n	802b722 <__sflush_r+0xb2>
 802b71e:	2b16      	cmp	r3, #22
 802b720:	d101      	bne.n	802b726 <__sflush_r+0xb6>
 802b722:	602f      	str	r7, [r5, #0]
 802b724:	e7b1      	b.n	802b68a <__sflush_r+0x1a>
 802b726:	89a3      	ldrh	r3, [r4, #12]
 802b728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b72c:	81a3      	strh	r3, [r4, #12]
 802b72e:	e7ad      	b.n	802b68c <__sflush_r+0x1c>
 802b730:	690f      	ldr	r7, [r1, #16]
 802b732:	2f00      	cmp	r7, #0
 802b734:	d0a9      	beq.n	802b68a <__sflush_r+0x1a>
 802b736:	0793      	lsls	r3, r2, #30
 802b738:	680e      	ldr	r6, [r1, #0]
 802b73a:	bf08      	it	eq
 802b73c:	694b      	ldreq	r3, [r1, #20]
 802b73e:	600f      	str	r7, [r1, #0]
 802b740:	bf18      	it	ne
 802b742:	2300      	movne	r3, #0
 802b744:	eba6 0807 	sub.w	r8, r6, r7
 802b748:	608b      	str	r3, [r1, #8]
 802b74a:	f1b8 0f00 	cmp.w	r8, #0
 802b74e:	dd9c      	ble.n	802b68a <__sflush_r+0x1a>
 802b750:	6a21      	ldr	r1, [r4, #32]
 802b752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b754:	4643      	mov	r3, r8
 802b756:	463a      	mov	r2, r7
 802b758:	4628      	mov	r0, r5
 802b75a:	47b0      	blx	r6
 802b75c:	2800      	cmp	r0, #0
 802b75e:	dc06      	bgt.n	802b76e <__sflush_r+0xfe>
 802b760:	89a3      	ldrh	r3, [r4, #12]
 802b762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b766:	81a3      	strh	r3, [r4, #12]
 802b768:	f04f 30ff 	mov.w	r0, #4294967295
 802b76c:	e78e      	b.n	802b68c <__sflush_r+0x1c>
 802b76e:	4407      	add	r7, r0
 802b770:	eba8 0800 	sub.w	r8, r8, r0
 802b774:	e7e9      	b.n	802b74a <__sflush_r+0xda>
 802b776:	bf00      	nop
 802b778:	20400001 	.word	0x20400001

0802b77c <_fflush_r>:
 802b77c:	b538      	push	{r3, r4, r5, lr}
 802b77e:	690b      	ldr	r3, [r1, #16]
 802b780:	4605      	mov	r5, r0
 802b782:	460c      	mov	r4, r1
 802b784:	b913      	cbnz	r3, 802b78c <_fflush_r+0x10>
 802b786:	2500      	movs	r5, #0
 802b788:	4628      	mov	r0, r5
 802b78a:	bd38      	pop	{r3, r4, r5, pc}
 802b78c:	b118      	cbz	r0, 802b796 <_fflush_r+0x1a>
 802b78e:	6983      	ldr	r3, [r0, #24]
 802b790:	b90b      	cbnz	r3, 802b796 <_fflush_r+0x1a>
 802b792:	f000 f887 	bl	802b8a4 <__sinit>
 802b796:	4b14      	ldr	r3, [pc, #80]	; (802b7e8 <_fflush_r+0x6c>)
 802b798:	429c      	cmp	r4, r3
 802b79a:	d11b      	bne.n	802b7d4 <_fflush_r+0x58>
 802b79c:	686c      	ldr	r4, [r5, #4]
 802b79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b7a2:	2b00      	cmp	r3, #0
 802b7a4:	d0ef      	beq.n	802b786 <_fflush_r+0xa>
 802b7a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b7a8:	07d0      	lsls	r0, r2, #31
 802b7aa:	d404      	bmi.n	802b7b6 <_fflush_r+0x3a>
 802b7ac:	0599      	lsls	r1, r3, #22
 802b7ae:	d402      	bmi.n	802b7b6 <_fflush_r+0x3a>
 802b7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b7b2:	f000 f91a 	bl	802b9ea <__retarget_lock_acquire_recursive>
 802b7b6:	4628      	mov	r0, r5
 802b7b8:	4621      	mov	r1, r4
 802b7ba:	f7ff ff59 	bl	802b670 <__sflush_r>
 802b7be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b7c0:	07da      	lsls	r2, r3, #31
 802b7c2:	4605      	mov	r5, r0
 802b7c4:	d4e0      	bmi.n	802b788 <_fflush_r+0xc>
 802b7c6:	89a3      	ldrh	r3, [r4, #12]
 802b7c8:	059b      	lsls	r3, r3, #22
 802b7ca:	d4dd      	bmi.n	802b788 <_fflush_r+0xc>
 802b7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b7ce:	f000 f90e 	bl	802b9ee <__retarget_lock_release_recursive>
 802b7d2:	e7d9      	b.n	802b788 <_fflush_r+0xc>
 802b7d4:	4b05      	ldr	r3, [pc, #20]	; (802b7ec <_fflush_r+0x70>)
 802b7d6:	429c      	cmp	r4, r3
 802b7d8:	d101      	bne.n	802b7de <_fflush_r+0x62>
 802b7da:	68ac      	ldr	r4, [r5, #8]
 802b7dc:	e7df      	b.n	802b79e <_fflush_r+0x22>
 802b7de:	4b04      	ldr	r3, [pc, #16]	; (802b7f0 <_fflush_r+0x74>)
 802b7e0:	429c      	cmp	r4, r3
 802b7e2:	bf08      	it	eq
 802b7e4:	68ec      	ldreq	r4, [r5, #12]
 802b7e6:	e7da      	b.n	802b79e <_fflush_r+0x22>
 802b7e8:	080314a8 	.word	0x080314a8
 802b7ec:	080314c8 	.word	0x080314c8
 802b7f0:	08031488 	.word	0x08031488

0802b7f4 <std>:
 802b7f4:	2300      	movs	r3, #0
 802b7f6:	b510      	push	{r4, lr}
 802b7f8:	4604      	mov	r4, r0
 802b7fa:	e9c0 3300 	strd	r3, r3, [r0]
 802b7fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b802:	6083      	str	r3, [r0, #8]
 802b804:	8181      	strh	r1, [r0, #12]
 802b806:	6643      	str	r3, [r0, #100]	; 0x64
 802b808:	81c2      	strh	r2, [r0, #14]
 802b80a:	6183      	str	r3, [r0, #24]
 802b80c:	4619      	mov	r1, r3
 802b80e:	2208      	movs	r2, #8
 802b810:	305c      	adds	r0, #92	; 0x5c
 802b812:	f7fd fe93 	bl	802953c <memset>
 802b816:	4b05      	ldr	r3, [pc, #20]	; (802b82c <std+0x38>)
 802b818:	6263      	str	r3, [r4, #36]	; 0x24
 802b81a:	4b05      	ldr	r3, [pc, #20]	; (802b830 <std+0x3c>)
 802b81c:	62a3      	str	r3, [r4, #40]	; 0x28
 802b81e:	4b05      	ldr	r3, [pc, #20]	; (802b834 <std+0x40>)
 802b820:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b822:	4b05      	ldr	r3, [pc, #20]	; (802b838 <std+0x44>)
 802b824:	6224      	str	r4, [r4, #32]
 802b826:	6323      	str	r3, [r4, #48]	; 0x30
 802b828:	bd10      	pop	{r4, pc}
 802b82a:	bf00      	nop
 802b82c:	0802a3e1 	.word	0x0802a3e1
 802b830:	0802a407 	.word	0x0802a407
 802b834:	0802a43f 	.word	0x0802a43f
 802b838:	0802a463 	.word	0x0802a463

0802b83c <_cleanup_r>:
 802b83c:	4901      	ldr	r1, [pc, #4]	; (802b844 <_cleanup_r+0x8>)
 802b83e:	f000 b8af 	b.w	802b9a0 <_fwalk_reent>
 802b842:	bf00      	nop
 802b844:	0802b77d 	.word	0x0802b77d

0802b848 <__sfmoreglue>:
 802b848:	b570      	push	{r4, r5, r6, lr}
 802b84a:	1e4a      	subs	r2, r1, #1
 802b84c:	2568      	movs	r5, #104	; 0x68
 802b84e:	4355      	muls	r5, r2
 802b850:	460e      	mov	r6, r1
 802b852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802b856:	f7fd fec9 	bl	80295ec <_malloc_r>
 802b85a:	4604      	mov	r4, r0
 802b85c:	b140      	cbz	r0, 802b870 <__sfmoreglue+0x28>
 802b85e:	2100      	movs	r1, #0
 802b860:	e9c0 1600 	strd	r1, r6, [r0]
 802b864:	300c      	adds	r0, #12
 802b866:	60a0      	str	r0, [r4, #8]
 802b868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802b86c:	f7fd fe66 	bl	802953c <memset>
 802b870:	4620      	mov	r0, r4
 802b872:	bd70      	pop	{r4, r5, r6, pc}

0802b874 <__sfp_lock_acquire>:
 802b874:	4801      	ldr	r0, [pc, #4]	; (802b87c <__sfp_lock_acquire+0x8>)
 802b876:	f000 b8b8 	b.w	802b9ea <__retarget_lock_acquire_recursive>
 802b87a:	bf00      	nop
 802b87c:	2000c648 	.word	0x2000c648

0802b880 <__sfp_lock_release>:
 802b880:	4801      	ldr	r0, [pc, #4]	; (802b888 <__sfp_lock_release+0x8>)
 802b882:	f000 b8b4 	b.w	802b9ee <__retarget_lock_release_recursive>
 802b886:	bf00      	nop
 802b888:	2000c648 	.word	0x2000c648

0802b88c <__sinit_lock_acquire>:
 802b88c:	4801      	ldr	r0, [pc, #4]	; (802b894 <__sinit_lock_acquire+0x8>)
 802b88e:	f000 b8ac 	b.w	802b9ea <__retarget_lock_acquire_recursive>
 802b892:	bf00      	nop
 802b894:	2000c647 	.word	0x2000c647

0802b898 <__sinit_lock_release>:
 802b898:	4801      	ldr	r0, [pc, #4]	; (802b8a0 <__sinit_lock_release+0x8>)
 802b89a:	f000 b8a8 	b.w	802b9ee <__retarget_lock_release_recursive>
 802b89e:	bf00      	nop
 802b8a0:	2000c647 	.word	0x2000c647

0802b8a4 <__sinit>:
 802b8a4:	b510      	push	{r4, lr}
 802b8a6:	4604      	mov	r4, r0
 802b8a8:	f7ff fff0 	bl	802b88c <__sinit_lock_acquire>
 802b8ac:	69a3      	ldr	r3, [r4, #24]
 802b8ae:	b11b      	cbz	r3, 802b8b8 <__sinit+0x14>
 802b8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b8b4:	f7ff bff0 	b.w	802b898 <__sinit_lock_release>
 802b8b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802b8bc:	6523      	str	r3, [r4, #80]	; 0x50
 802b8be:	4b13      	ldr	r3, [pc, #76]	; (802b90c <__sinit+0x68>)
 802b8c0:	4a13      	ldr	r2, [pc, #76]	; (802b910 <__sinit+0x6c>)
 802b8c2:	681b      	ldr	r3, [r3, #0]
 802b8c4:	62a2      	str	r2, [r4, #40]	; 0x28
 802b8c6:	42a3      	cmp	r3, r4
 802b8c8:	bf04      	itt	eq
 802b8ca:	2301      	moveq	r3, #1
 802b8cc:	61a3      	streq	r3, [r4, #24]
 802b8ce:	4620      	mov	r0, r4
 802b8d0:	f000 f820 	bl	802b914 <__sfp>
 802b8d4:	6060      	str	r0, [r4, #4]
 802b8d6:	4620      	mov	r0, r4
 802b8d8:	f000 f81c 	bl	802b914 <__sfp>
 802b8dc:	60a0      	str	r0, [r4, #8]
 802b8de:	4620      	mov	r0, r4
 802b8e0:	f000 f818 	bl	802b914 <__sfp>
 802b8e4:	2200      	movs	r2, #0
 802b8e6:	60e0      	str	r0, [r4, #12]
 802b8e8:	2104      	movs	r1, #4
 802b8ea:	6860      	ldr	r0, [r4, #4]
 802b8ec:	f7ff ff82 	bl	802b7f4 <std>
 802b8f0:	68a0      	ldr	r0, [r4, #8]
 802b8f2:	2201      	movs	r2, #1
 802b8f4:	2109      	movs	r1, #9
 802b8f6:	f7ff ff7d 	bl	802b7f4 <std>
 802b8fa:	68e0      	ldr	r0, [r4, #12]
 802b8fc:	2202      	movs	r2, #2
 802b8fe:	2112      	movs	r1, #18
 802b900:	f7ff ff78 	bl	802b7f4 <std>
 802b904:	2301      	movs	r3, #1
 802b906:	61a3      	str	r3, [r4, #24]
 802b908:	e7d2      	b.n	802b8b0 <__sinit+0xc>
 802b90a:	bf00      	nop
 802b90c:	08031344 	.word	0x08031344
 802b910:	0802b83d 	.word	0x0802b83d

0802b914 <__sfp>:
 802b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b916:	4607      	mov	r7, r0
 802b918:	f7ff ffac 	bl	802b874 <__sfp_lock_acquire>
 802b91c:	4b1e      	ldr	r3, [pc, #120]	; (802b998 <__sfp+0x84>)
 802b91e:	681e      	ldr	r6, [r3, #0]
 802b920:	69b3      	ldr	r3, [r6, #24]
 802b922:	b913      	cbnz	r3, 802b92a <__sfp+0x16>
 802b924:	4630      	mov	r0, r6
 802b926:	f7ff ffbd 	bl	802b8a4 <__sinit>
 802b92a:	3648      	adds	r6, #72	; 0x48
 802b92c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802b930:	3b01      	subs	r3, #1
 802b932:	d503      	bpl.n	802b93c <__sfp+0x28>
 802b934:	6833      	ldr	r3, [r6, #0]
 802b936:	b30b      	cbz	r3, 802b97c <__sfp+0x68>
 802b938:	6836      	ldr	r6, [r6, #0]
 802b93a:	e7f7      	b.n	802b92c <__sfp+0x18>
 802b93c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802b940:	b9d5      	cbnz	r5, 802b978 <__sfp+0x64>
 802b942:	4b16      	ldr	r3, [pc, #88]	; (802b99c <__sfp+0x88>)
 802b944:	60e3      	str	r3, [r4, #12]
 802b946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802b94a:	6665      	str	r5, [r4, #100]	; 0x64
 802b94c:	f000 f84c 	bl	802b9e8 <__retarget_lock_init_recursive>
 802b950:	f7ff ff96 	bl	802b880 <__sfp_lock_release>
 802b954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802b958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802b95c:	6025      	str	r5, [r4, #0]
 802b95e:	61a5      	str	r5, [r4, #24]
 802b960:	2208      	movs	r2, #8
 802b962:	4629      	mov	r1, r5
 802b964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b968:	f7fd fde8 	bl	802953c <memset>
 802b96c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b974:	4620      	mov	r0, r4
 802b976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b978:	3468      	adds	r4, #104	; 0x68
 802b97a:	e7d9      	b.n	802b930 <__sfp+0x1c>
 802b97c:	2104      	movs	r1, #4
 802b97e:	4638      	mov	r0, r7
 802b980:	f7ff ff62 	bl	802b848 <__sfmoreglue>
 802b984:	4604      	mov	r4, r0
 802b986:	6030      	str	r0, [r6, #0]
 802b988:	2800      	cmp	r0, #0
 802b98a:	d1d5      	bne.n	802b938 <__sfp+0x24>
 802b98c:	f7ff ff78 	bl	802b880 <__sfp_lock_release>
 802b990:	230c      	movs	r3, #12
 802b992:	603b      	str	r3, [r7, #0]
 802b994:	e7ee      	b.n	802b974 <__sfp+0x60>
 802b996:	bf00      	nop
 802b998:	08031344 	.word	0x08031344
 802b99c:	ffff0001 	.word	0xffff0001

0802b9a0 <_fwalk_reent>:
 802b9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b9a4:	4606      	mov	r6, r0
 802b9a6:	4688      	mov	r8, r1
 802b9a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b9ac:	2700      	movs	r7, #0
 802b9ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b9b2:	f1b9 0901 	subs.w	r9, r9, #1
 802b9b6:	d505      	bpl.n	802b9c4 <_fwalk_reent+0x24>
 802b9b8:	6824      	ldr	r4, [r4, #0]
 802b9ba:	2c00      	cmp	r4, #0
 802b9bc:	d1f7      	bne.n	802b9ae <_fwalk_reent+0xe>
 802b9be:	4638      	mov	r0, r7
 802b9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b9c4:	89ab      	ldrh	r3, [r5, #12]
 802b9c6:	2b01      	cmp	r3, #1
 802b9c8:	d907      	bls.n	802b9da <_fwalk_reent+0x3a>
 802b9ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b9ce:	3301      	adds	r3, #1
 802b9d0:	d003      	beq.n	802b9da <_fwalk_reent+0x3a>
 802b9d2:	4629      	mov	r1, r5
 802b9d4:	4630      	mov	r0, r6
 802b9d6:	47c0      	blx	r8
 802b9d8:	4307      	orrs	r7, r0
 802b9da:	3568      	adds	r5, #104	; 0x68
 802b9dc:	e7e9      	b.n	802b9b2 <_fwalk_reent+0x12>
	...

0802b9e0 <_localeconv_r>:
 802b9e0:	4800      	ldr	r0, [pc, #0]	; (802b9e4 <_localeconv_r+0x4>)
 802b9e2:	4770      	bx	lr
 802b9e4:	20000264 	.word	0x20000264

0802b9e8 <__retarget_lock_init_recursive>:
 802b9e8:	4770      	bx	lr

0802b9ea <__retarget_lock_acquire_recursive>:
 802b9ea:	4770      	bx	lr

0802b9ec <__retarget_lock_release>:
 802b9ec:	4770      	bx	lr

0802b9ee <__retarget_lock_release_recursive>:
 802b9ee:	4770      	bx	lr

0802b9f0 <_lseek_r>:
 802b9f0:	b538      	push	{r3, r4, r5, lr}
 802b9f2:	4d07      	ldr	r5, [pc, #28]	; (802ba10 <_lseek_r+0x20>)
 802b9f4:	4604      	mov	r4, r0
 802b9f6:	4608      	mov	r0, r1
 802b9f8:	4611      	mov	r1, r2
 802b9fa:	2200      	movs	r2, #0
 802b9fc:	602a      	str	r2, [r5, #0]
 802b9fe:	461a      	mov	r2, r3
 802ba00:	f7d9 fa7e 	bl	8004f00 <_lseek>
 802ba04:	1c43      	adds	r3, r0, #1
 802ba06:	d102      	bne.n	802ba0e <_lseek_r+0x1e>
 802ba08:	682b      	ldr	r3, [r5, #0]
 802ba0a:	b103      	cbz	r3, 802ba0e <_lseek_r+0x1e>
 802ba0c:	6023      	str	r3, [r4, #0]
 802ba0e:	bd38      	pop	{r3, r4, r5, pc}
 802ba10:	2000c650 	.word	0x2000c650

0802ba14 <__swhatbuf_r>:
 802ba14:	b570      	push	{r4, r5, r6, lr}
 802ba16:	460e      	mov	r6, r1
 802ba18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ba1c:	2900      	cmp	r1, #0
 802ba1e:	b096      	sub	sp, #88	; 0x58
 802ba20:	4614      	mov	r4, r2
 802ba22:	461d      	mov	r5, r3
 802ba24:	da07      	bge.n	802ba36 <__swhatbuf_r+0x22>
 802ba26:	2300      	movs	r3, #0
 802ba28:	602b      	str	r3, [r5, #0]
 802ba2a:	89b3      	ldrh	r3, [r6, #12]
 802ba2c:	061a      	lsls	r2, r3, #24
 802ba2e:	d410      	bmi.n	802ba52 <__swhatbuf_r+0x3e>
 802ba30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802ba34:	e00e      	b.n	802ba54 <__swhatbuf_r+0x40>
 802ba36:	466a      	mov	r2, sp
 802ba38:	f001 f9ac 	bl	802cd94 <_fstat_r>
 802ba3c:	2800      	cmp	r0, #0
 802ba3e:	dbf2      	blt.n	802ba26 <__swhatbuf_r+0x12>
 802ba40:	9a01      	ldr	r2, [sp, #4]
 802ba42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802ba46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802ba4a:	425a      	negs	r2, r3
 802ba4c:	415a      	adcs	r2, r3
 802ba4e:	602a      	str	r2, [r5, #0]
 802ba50:	e7ee      	b.n	802ba30 <__swhatbuf_r+0x1c>
 802ba52:	2340      	movs	r3, #64	; 0x40
 802ba54:	2000      	movs	r0, #0
 802ba56:	6023      	str	r3, [r4, #0]
 802ba58:	b016      	add	sp, #88	; 0x58
 802ba5a:	bd70      	pop	{r4, r5, r6, pc}

0802ba5c <__smakebuf_r>:
 802ba5c:	898b      	ldrh	r3, [r1, #12]
 802ba5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ba60:	079d      	lsls	r5, r3, #30
 802ba62:	4606      	mov	r6, r0
 802ba64:	460c      	mov	r4, r1
 802ba66:	d507      	bpl.n	802ba78 <__smakebuf_r+0x1c>
 802ba68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802ba6c:	6023      	str	r3, [r4, #0]
 802ba6e:	6123      	str	r3, [r4, #16]
 802ba70:	2301      	movs	r3, #1
 802ba72:	6163      	str	r3, [r4, #20]
 802ba74:	b002      	add	sp, #8
 802ba76:	bd70      	pop	{r4, r5, r6, pc}
 802ba78:	ab01      	add	r3, sp, #4
 802ba7a:	466a      	mov	r2, sp
 802ba7c:	f7ff ffca 	bl	802ba14 <__swhatbuf_r>
 802ba80:	9900      	ldr	r1, [sp, #0]
 802ba82:	4605      	mov	r5, r0
 802ba84:	4630      	mov	r0, r6
 802ba86:	f7fd fdb1 	bl	80295ec <_malloc_r>
 802ba8a:	b948      	cbnz	r0, 802baa0 <__smakebuf_r+0x44>
 802ba8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ba90:	059a      	lsls	r2, r3, #22
 802ba92:	d4ef      	bmi.n	802ba74 <__smakebuf_r+0x18>
 802ba94:	f023 0303 	bic.w	r3, r3, #3
 802ba98:	f043 0302 	orr.w	r3, r3, #2
 802ba9c:	81a3      	strh	r3, [r4, #12]
 802ba9e:	e7e3      	b.n	802ba68 <__smakebuf_r+0xc>
 802baa0:	4b0d      	ldr	r3, [pc, #52]	; (802bad8 <__smakebuf_r+0x7c>)
 802baa2:	62b3      	str	r3, [r6, #40]	; 0x28
 802baa4:	89a3      	ldrh	r3, [r4, #12]
 802baa6:	6020      	str	r0, [r4, #0]
 802baa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802baac:	81a3      	strh	r3, [r4, #12]
 802baae:	9b00      	ldr	r3, [sp, #0]
 802bab0:	6163      	str	r3, [r4, #20]
 802bab2:	9b01      	ldr	r3, [sp, #4]
 802bab4:	6120      	str	r0, [r4, #16]
 802bab6:	b15b      	cbz	r3, 802bad0 <__smakebuf_r+0x74>
 802bab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802babc:	4630      	mov	r0, r6
 802babe:	f001 f97b 	bl	802cdb8 <_isatty_r>
 802bac2:	b128      	cbz	r0, 802bad0 <__smakebuf_r+0x74>
 802bac4:	89a3      	ldrh	r3, [r4, #12]
 802bac6:	f023 0303 	bic.w	r3, r3, #3
 802baca:	f043 0301 	orr.w	r3, r3, #1
 802bace:	81a3      	strh	r3, [r4, #12]
 802bad0:	89a0      	ldrh	r0, [r4, #12]
 802bad2:	4305      	orrs	r5, r0
 802bad4:	81a5      	strh	r5, [r4, #12]
 802bad6:	e7cd      	b.n	802ba74 <__smakebuf_r+0x18>
 802bad8:	0802b83d 	.word	0x0802b83d

0802badc <__ascii_mbtowc>:
 802badc:	b082      	sub	sp, #8
 802bade:	b901      	cbnz	r1, 802bae2 <__ascii_mbtowc+0x6>
 802bae0:	a901      	add	r1, sp, #4
 802bae2:	b142      	cbz	r2, 802baf6 <__ascii_mbtowc+0x1a>
 802bae4:	b14b      	cbz	r3, 802bafa <__ascii_mbtowc+0x1e>
 802bae6:	7813      	ldrb	r3, [r2, #0]
 802bae8:	600b      	str	r3, [r1, #0]
 802baea:	7812      	ldrb	r2, [r2, #0]
 802baec:	1e10      	subs	r0, r2, #0
 802baee:	bf18      	it	ne
 802baf0:	2001      	movne	r0, #1
 802baf2:	b002      	add	sp, #8
 802baf4:	4770      	bx	lr
 802baf6:	4610      	mov	r0, r2
 802baf8:	e7fb      	b.n	802baf2 <__ascii_mbtowc+0x16>
 802bafa:	f06f 0001 	mvn.w	r0, #1
 802bafe:	e7f8      	b.n	802baf2 <__ascii_mbtowc+0x16>

0802bb00 <__malloc_lock>:
 802bb00:	4801      	ldr	r0, [pc, #4]	; (802bb08 <__malloc_lock+0x8>)
 802bb02:	f7ff bf72 	b.w	802b9ea <__retarget_lock_acquire_recursive>
 802bb06:	bf00      	nop
 802bb08:	2000c644 	.word	0x2000c644

0802bb0c <__malloc_unlock>:
 802bb0c:	4801      	ldr	r0, [pc, #4]	; (802bb14 <__malloc_unlock+0x8>)
 802bb0e:	f7ff bf6e 	b.w	802b9ee <__retarget_lock_release_recursive>
 802bb12:	bf00      	nop
 802bb14:	2000c644 	.word	0x2000c644

0802bb18 <_Balloc>:
 802bb18:	b570      	push	{r4, r5, r6, lr}
 802bb1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802bb1c:	4604      	mov	r4, r0
 802bb1e:	460d      	mov	r5, r1
 802bb20:	b976      	cbnz	r6, 802bb40 <_Balloc+0x28>
 802bb22:	2010      	movs	r0, #16
 802bb24:	f7fd fcd2 	bl	80294cc <malloc>
 802bb28:	4602      	mov	r2, r0
 802bb2a:	6260      	str	r0, [r4, #36]	; 0x24
 802bb2c:	b920      	cbnz	r0, 802bb38 <_Balloc+0x20>
 802bb2e:	4b18      	ldr	r3, [pc, #96]	; (802bb90 <_Balloc+0x78>)
 802bb30:	4818      	ldr	r0, [pc, #96]	; (802bb94 <_Balloc+0x7c>)
 802bb32:	2166      	movs	r1, #102	; 0x66
 802bb34:	f7fd fc58 	bl	80293e8 <__assert_func>
 802bb38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802bb3c:	6006      	str	r6, [r0, #0]
 802bb3e:	60c6      	str	r6, [r0, #12]
 802bb40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802bb42:	68f3      	ldr	r3, [r6, #12]
 802bb44:	b183      	cbz	r3, 802bb68 <_Balloc+0x50>
 802bb46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802bb48:	68db      	ldr	r3, [r3, #12]
 802bb4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802bb4e:	b9b8      	cbnz	r0, 802bb80 <_Balloc+0x68>
 802bb50:	2101      	movs	r1, #1
 802bb52:	fa01 f605 	lsl.w	r6, r1, r5
 802bb56:	1d72      	adds	r2, r6, #5
 802bb58:	0092      	lsls	r2, r2, #2
 802bb5a:	4620      	mov	r0, r4
 802bb5c:	f000 fb5a 	bl	802c214 <_calloc_r>
 802bb60:	b160      	cbz	r0, 802bb7c <_Balloc+0x64>
 802bb62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802bb66:	e00e      	b.n	802bb86 <_Balloc+0x6e>
 802bb68:	2221      	movs	r2, #33	; 0x21
 802bb6a:	2104      	movs	r1, #4
 802bb6c:	4620      	mov	r0, r4
 802bb6e:	f000 fb51 	bl	802c214 <_calloc_r>
 802bb72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802bb74:	60f0      	str	r0, [r6, #12]
 802bb76:	68db      	ldr	r3, [r3, #12]
 802bb78:	2b00      	cmp	r3, #0
 802bb7a:	d1e4      	bne.n	802bb46 <_Balloc+0x2e>
 802bb7c:	2000      	movs	r0, #0
 802bb7e:	bd70      	pop	{r4, r5, r6, pc}
 802bb80:	6802      	ldr	r2, [r0, #0]
 802bb82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802bb86:	2300      	movs	r3, #0
 802bb88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802bb8c:	e7f7      	b.n	802bb7e <_Balloc+0x66>
 802bb8e:	bf00      	nop
 802bb90:	08031390 	.word	0x08031390
 802bb94:	080314f2 	.word	0x080314f2

0802bb98 <_Bfree>:
 802bb98:	b570      	push	{r4, r5, r6, lr}
 802bb9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802bb9c:	4605      	mov	r5, r0
 802bb9e:	460c      	mov	r4, r1
 802bba0:	b976      	cbnz	r6, 802bbc0 <_Bfree+0x28>
 802bba2:	2010      	movs	r0, #16
 802bba4:	f7fd fc92 	bl	80294cc <malloc>
 802bba8:	4602      	mov	r2, r0
 802bbaa:	6268      	str	r0, [r5, #36]	; 0x24
 802bbac:	b920      	cbnz	r0, 802bbb8 <_Bfree+0x20>
 802bbae:	4b09      	ldr	r3, [pc, #36]	; (802bbd4 <_Bfree+0x3c>)
 802bbb0:	4809      	ldr	r0, [pc, #36]	; (802bbd8 <_Bfree+0x40>)
 802bbb2:	218a      	movs	r1, #138	; 0x8a
 802bbb4:	f7fd fc18 	bl	80293e8 <__assert_func>
 802bbb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802bbbc:	6006      	str	r6, [r0, #0]
 802bbbe:	60c6      	str	r6, [r0, #12]
 802bbc0:	b13c      	cbz	r4, 802bbd2 <_Bfree+0x3a>
 802bbc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802bbc4:	6862      	ldr	r2, [r4, #4]
 802bbc6:	68db      	ldr	r3, [r3, #12]
 802bbc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802bbcc:	6021      	str	r1, [r4, #0]
 802bbce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802bbd2:	bd70      	pop	{r4, r5, r6, pc}
 802bbd4:	08031390 	.word	0x08031390
 802bbd8:	080314f2 	.word	0x080314f2

0802bbdc <__multadd>:
 802bbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bbe0:	690e      	ldr	r6, [r1, #16]
 802bbe2:	4607      	mov	r7, r0
 802bbe4:	4698      	mov	r8, r3
 802bbe6:	460c      	mov	r4, r1
 802bbe8:	f101 0014 	add.w	r0, r1, #20
 802bbec:	2300      	movs	r3, #0
 802bbee:	6805      	ldr	r5, [r0, #0]
 802bbf0:	b2a9      	uxth	r1, r5
 802bbf2:	fb02 8101 	mla	r1, r2, r1, r8
 802bbf6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802bbfa:	0c2d      	lsrs	r5, r5, #16
 802bbfc:	fb02 c505 	mla	r5, r2, r5, ip
 802bc00:	b289      	uxth	r1, r1
 802bc02:	3301      	adds	r3, #1
 802bc04:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802bc08:	429e      	cmp	r6, r3
 802bc0a:	f840 1b04 	str.w	r1, [r0], #4
 802bc0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802bc12:	dcec      	bgt.n	802bbee <__multadd+0x12>
 802bc14:	f1b8 0f00 	cmp.w	r8, #0
 802bc18:	d022      	beq.n	802bc60 <__multadd+0x84>
 802bc1a:	68a3      	ldr	r3, [r4, #8]
 802bc1c:	42b3      	cmp	r3, r6
 802bc1e:	dc19      	bgt.n	802bc54 <__multadd+0x78>
 802bc20:	6861      	ldr	r1, [r4, #4]
 802bc22:	4638      	mov	r0, r7
 802bc24:	3101      	adds	r1, #1
 802bc26:	f7ff ff77 	bl	802bb18 <_Balloc>
 802bc2a:	4605      	mov	r5, r0
 802bc2c:	b928      	cbnz	r0, 802bc3a <__multadd+0x5e>
 802bc2e:	4602      	mov	r2, r0
 802bc30:	4b0d      	ldr	r3, [pc, #52]	; (802bc68 <__multadd+0x8c>)
 802bc32:	480e      	ldr	r0, [pc, #56]	; (802bc6c <__multadd+0x90>)
 802bc34:	21b5      	movs	r1, #181	; 0xb5
 802bc36:	f7fd fbd7 	bl	80293e8 <__assert_func>
 802bc3a:	6922      	ldr	r2, [r4, #16]
 802bc3c:	3202      	adds	r2, #2
 802bc3e:	f104 010c 	add.w	r1, r4, #12
 802bc42:	0092      	lsls	r2, r2, #2
 802bc44:	300c      	adds	r0, #12
 802bc46:	f7fd fc51 	bl	80294ec <memcpy>
 802bc4a:	4621      	mov	r1, r4
 802bc4c:	4638      	mov	r0, r7
 802bc4e:	f7ff ffa3 	bl	802bb98 <_Bfree>
 802bc52:	462c      	mov	r4, r5
 802bc54:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802bc58:	3601      	adds	r6, #1
 802bc5a:	f8c3 8014 	str.w	r8, [r3, #20]
 802bc5e:	6126      	str	r6, [r4, #16]
 802bc60:	4620      	mov	r0, r4
 802bc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bc66:	bf00      	nop
 802bc68:	08031474 	.word	0x08031474
 802bc6c:	080314f2 	.word	0x080314f2

0802bc70 <__hi0bits>:
 802bc70:	0c03      	lsrs	r3, r0, #16
 802bc72:	041b      	lsls	r3, r3, #16
 802bc74:	b9d3      	cbnz	r3, 802bcac <__hi0bits+0x3c>
 802bc76:	0400      	lsls	r0, r0, #16
 802bc78:	2310      	movs	r3, #16
 802bc7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802bc7e:	bf04      	itt	eq
 802bc80:	0200      	lsleq	r0, r0, #8
 802bc82:	3308      	addeq	r3, #8
 802bc84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802bc88:	bf04      	itt	eq
 802bc8a:	0100      	lsleq	r0, r0, #4
 802bc8c:	3304      	addeq	r3, #4
 802bc8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802bc92:	bf04      	itt	eq
 802bc94:	0080      	lsleq	r0, r0, #2
 802bc96:	3302      	addeq	r3, #2
 802bc98:	2800      	cmp	r0, #0
 802bc9a:	db05      	blt.n	802bca8 <__hi0bits+0x38>
 802bc9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802bca0:	f103 0301 	add.w	r3, r3, #1
 802bca4:	bf08      	it	eq
 802bca6:	2320      	moveq	r3, #32
 802bca8:	4618      	mov	r0, r3
 802bcaa:	4770      	bx	lr
 802bcac:	2300      	movs	r3, #0
 802bcae:	e7e4      	b.n	802bc7a <__hi0bits+0xa>

0802bcb0 <__lo0bits>:
 802bcb0:	6803      	ldr	r3, [r0, #0]
 802bcb2:	f013 0207 	ands.w	r2, r3, #7
 802bcb6:	4601      	mov	r1, r0
 802bcb8:	d00b      	beq.n	802bcd2 <__lo0bits+0x22>
 802bcba:	07da      	lsls	r2, r3, #31
 802bcbc:	d424      	bmi.n	802bd08 <__lo0bits+0x58>
 802bcbe:	0798      	lsls	r0, r3, #30
 802bcc0:	bf49      	itett	mi
 802bcc2:	085b      	lsrmi	r3, r3, #1
 802bcc4:	089b      	lsrpl	r3, r3, #2
 802bcc6:	2001      	movmi	r0, #1
 802bcc8:	600b      	strmi	r3, [r1, #0]
 802bcca:	bf5c      	itt	pl
 802bccc:	600b      	strpl	r3, [r1, #0]
 802bcce:	2002      	movpl	r0, #2
 802bcd0:	4770      	bx	lr
 802bcd2:	b298      	uxth	r0, r3
 802bcd4:	b9b0      	cbnz	r0, 802bd04 <__lo0bits+0x54>
 802bcd6:	0c1b      	lsrs	r3, r3, #16
 802bcd8:	2010      	movs	r0, #16
 802bcda:	f013 0fff 	tst.w	r3, #255	; 0xff
 802bcde:	bf04      	itt	eq
 802bce0:	0a1b      	lsreq	r3, r3, #8
 802bce2:	3008      	addeq	r0, #8
 802bce4:	071a      	lsls	r2, r3, #28
 802bce6:	bf04      	itt	eq
 802bce8:	091b      	lsreq	r3, r3, #4
 802bcea:	3004      	addeq	r0, #4
 802bcec:	079a      	lsls	r2, r3, #30
 802bcee:	bf04      	itt	eq
 802bcf0:	089b      	lsreq	r3, r3, #2
 802bcf2:	3002      	addeq	r0, #2
 802bcf4:	07da      	lsls	r2, r3, #31
 802bcf6:	d403      	bmi.n	802bd00 <__lo0bits+0x50>
 802bcf8:	085b      	lsrs	r3, r3, #1
 802bcfa:	f100 0001 	add.w	r0, r0, #1
 802bcfe:	d005      	beq.n	802bd0c <__lo0bits+0x5c>
 802bd00:	600b      	str	r3, [r1, #0]
 802bd02:	4770      	bx	lr
 802bd04:	4610      	mov	r0, r2
 802bd06:	e7e8      	b.n	802bcda <__lo0bits+0x2a>
 802bd08:	2000      	movs	r0, #0
 802bd0a:	4770      	bx	lr
 802bd0c:	2020      	movs	r0, #32
 802bd0e:	4770      	bx	lr

0802bd10 <__i2b>:
 802bd10:	b510      	push	{r4, lr}
 802bd12:	460c      	mov	r4, r1
 802bd14:	2101      	movs	r1, #1
 802bd16:	f7ff feff 	bl	802bb18 <_Balloc>
 802bd1a:	4602      	mov	r2, r0
 802bd1c:	b928      	cbnz	r0, 802bd2a <__i2b+0x1a>
 802bd1e:	4b05      	ldr	r3, [pc, #20]	; (802bd34 <__i2b+0x24>)
 802bd20:	4805      	ldr	r0, [pc, #20]	; (802bd38 <__i2b+0x28>)
 802bd22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802bd26:	f7fd fb5f 	bl	80293e8 <__assert_func>
 802bd2a:	2301      	movs	r3, #1
 802bd2c:	6144      	str	r4, [r0, #20]
 802bd2e:	6103      	str	r3, [r0, #16]
 802bd30:	bd10      	pop	{r4, pc}
 802bd32:	bf00      	nop
 802bd34:	08031474 	.word	0x08031474
 802bd38:	080314f2 	.word	0x080314f2

0802bd3c <__multiply>:
 802bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bd40:	4614      	mov	r4, r2
 802bd42:	690a      	ldr	r2, [r1, #16]
 802bd44:	6923      	ldr	r3, [r4, #16]
 802bd46:	429a      	cmp	r2, r3
 802bd48:	bfb8      	it	lt
 802bd4a:	460b      	movlt	r3, r1
 802bd4c:	460d      	mov	r5, r1
 802bd4e:	bfbc      	itt	lt
 802bd50:	4625      	movlt	r5, r4
 802bd52:	461c      	movlt	r4, r3
 802bd54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802bd58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802bd5c:	68ab      	ldr	r3, [r5, #8]
 802bd5e:	6869      	ldr	r1, [r5, #4]
 802bd60:	eb0a 0709 	add.w	r7, sl, r9
 802bd64:	42bb      	cmp	r3, r7
 802bd66:	b085      	sub	sp, #20
 802bd68:	bfb8      	it	lt
 802bd6a:	3101      	addlt	r1, #1
 802bd6c:	f7ff fed4 	bl	802bb18 <_Balloc>
 802bd70:	b930      	cbnz	r0, 802bd80 <__multiply+0x44>
 802bd72:	4602      	mov	r2, r0
 802bd74:	4b42      	ldr	r3, [pc, #264]	; (802be80 <__multiply+0x144>)
 802bd76:	4843      	ldr	r0, [pc, #268]	; (802be84 <__multiply+0x148>)
 802bd78:	f240 115d 	movw	r1, #349	; 0x15d
 802bd7c:	f7fd fb34 	bl	80293e8 <__assert_func>
 802bd80:	f100 0614 	add.w	r6, r0, #20
 802bd84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802bd88:	4633      	mov	r3, r6
 802bd8a:	2200      	movs	r2, #0
 802bd8c:	4543      	cmp	r3, r8
 802bd8e:	d31e      	bcc.n	802bdce <__multiply+0x92>
 802bd90:	f105 0c14 	add.w	ip, r5, #20
 802bd94:	f104 0314 	add.w	r3, r4, #20
 802bd98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802bd9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 802bda0:	9202      	str	r2, [sp, #8]
 802bda2:	ebac 0205 	sub.w	r2, ip, r5
 802bda6:	3a15      	subs	r2, #21
 802bda8:	f022 0203 	bic.w	r2, r2, #3
 802bdac:	3204      	adds	r2, #4
 802bdae:	f105 0115 	add.w	r1, r5, #21
 802bdb2:	458c      	cmp	ip, r1
 802bdb4:	bf38      	it	cc
 802bdb6:	2204      	movcc	r2, #4
 802bdb8:	9201      	str	r2, [sp, #4]
 802bdba:	9a02      	ldr	r2, [sp, #8]
 802bdbc:	9303      	str	r3, [sp, #12]
 802bdbe:	429a      	cmp	r2, r3
 802bdc0:	d808      	bhi.n	802bdd4 <__multiply+0x98>
 802bdc2:	2f00      	cmp	r7, #0
 802bdc4:	dc55      	bgt.n	802be72 <__multiply+0x136>
 802bdc6:	6107      	str	r7, [r0, #16]
 802bdc8:	b005      	add	sp, #20
 802bdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bdce:	f843 2b04 	str.w	r2, [r3], #4
 802bdd2:	e7db      	b.n	802bd8c <__multiply+0x50>
 802bdd4:	f8b3 a000 	ldrh.w	sl, [r3]
 802bdd8:	f1ba 0f00 	cmp.w	sl, #0
 802bddc:	d020      	beq.n	802be20 <__multiply+0xe4>
 802bdde:	f105 0e14 	add.w	lr, r5, #20
 802bde2:	46b1      	mov	r9, r6
 802bde4:	2200      	movs	r2, #0
 802bde6:	f85e 4b04 	ldr.w	r4, [lr], #4
 802bdea:	f8d9 b000 	ldr.w	fp, [r9]
 802bdee:	b2a1      	uxth	r1, r4
 802bdf0:	fa1f fb8b 	uxth.w	fp, fp
 802bdf4:	fb0a b101 	mla	r1, sl, r1, fp
 802bdf8:	4411      	add	r1, r2
 802bdfa:	f8d9 2000 	ldr.w	r2, [r9]
 802bdfe:	0c24      	lsrs	r4, r4, #16
 802be00:	0c12      	lsrs	r2, r2, #16
 802be02:	fb0a 2404 	mla	r4, sl, r4, r2
 802be06:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802be0a:	b289      	uxth	r1, r1
 802be0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802be10:	45f4      	cmp	ip, lr
 802be12:	f849 1b04 	str.w	r1, [r9], #4
 802be16:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802be1a:	d8e4      	bhi.n	802bde6 <__multiply+0xaa>
 802be1c:	9901      	ldr	r1, [sp, #4]
 802be1e:	5072      	str	r2, [r6, r1]
 802be20:	9a03      	ldr	r2, [sp, #12]
 802be22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802be26:	3304      	adds	r3, #4
 802be28:	f1b9 0f00 	cmp.w	r9, #0
 802be2c:	d01f      	beq.n	802be6e <__multiply+0x132>
 802be2e:	6834      	ldr	r4, [r6, #0]
 802be30:	f105 0114 	add.w	r1, r5, #20
 802be34:	46b6      	mov	lr, r6
 802be36:	f04f 0a00 	mov.w	sl, #0
 802be3a:	880a      	ldrh	r2, [r1, #0]
 802be3c:	f8be b002 	ldrh.w	fp, [lr, #2]
 802be40:	fb09 b202 	mla	r2, r9, r2, fp
 802be44:	4492      	add	sl, r2
 802be46:	b2a4      	uxth	r4, r4
 802be48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802be4c:	f84e 4b04 	str.w	r4, [lr], #4
 802be50:	f851 4b04 	ldr.w	r4, [r1], #4
 802be54:	f8be 2000 	ldrh.w	r2, [lr]
 802be58:	0c24      	lsrs	r4, r4, #16
 802be5a:	fb09 2404 	mla	r4, r9, r4, r2
 802be5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802be62:	458c      	cmp	ip, r1
 802be64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802be68:	d8e7      	bhi.n	802be3a <__multiply+0xfe>
 802be6a:	9a01      	ldr	r2, [sp, #4]
 802be6c:	50b4      	str	r4, [r6, r2]
 802be6e:	3604      	adds	r6, #4
 802be70:	e7a3      	b.n	802bdba <__multiply+0x7e>
 802be72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802be76:	2b00      	cmp	r3, #0
 802be78:	d1a5      	bne.n	802bdc6 <__multiply+0x8a>
 802be7a:	3f01      	subs	r7, #1
 802be7c:	e7a1      	b.n	802bdc2 <__multiply+0x86>
 802be7e:	bf00      	nop
 802be80:	08031474 	.word	0x08031474
 802be84:	080314f2 	.word	0x080314f2

0802be88 <__pow5mult>:
 802be88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802be8c:	4615      	mov	r5, r2
 802be8e:	f012 0203 	ands.w	r2, r2, #3
 802be92:	4606      	mov	r6, r0
 802be94:	460f      	mov	r7, r1
 802be96:	d007      	beq.n	802bea8 <__pow5mult+0x20>
 802be98:	4c25      	ldr	r4, [pc, #148]	; (802bf30 <__pow5mult+0xa8>)
 802be9a:	3a01      	subs	r2, #1
 802be9c:	2300      	movs	r3, #0
 802be9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802bea2:	f7ff fe9b 	bl	802bbdc <__multadd>
 802bea6:	4607      	mov	r7, r0
 802bea8:	10ad      	asrs	r5, r5, #2
 802beaa:	d03d      	beq.n	802bf28 <__pow5mult+0xa0>
 802beac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802beae:	b97c      	cbnz	r4, 802bed0 <__pow5mult+0x48>
 802beb0:	2010      	movs	r0, #16
 802beb2:	f7fd fb0b 	bl	80294cc <malloc>
 802beb6:	4602      	mov	r2, r0
 802beb8:	6270      	str	r0, [r6, #36]	; 0x24
 802beba:	b928      	cbnz	r0, 802bec8 <__pow5mult+0x40>
 802bebc:	4b1d      	ldr	r3, [pc, #116]	; (802bf34 <__pow5mult+0xac>)
 802bebe:	481e      	ldr	r0, [pc, #120]	; (802bf38 <__pow5mult+0xb0>)
 802bec0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802bec4:	f7fd fa90 	bl	80293e8 <__assert_func>
 802bec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802becc:	6004      	str	r4, [r0, #0]
 802bece:	60c4      	str	r4, [r0, #12]
 802bed0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802bed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802bed8:	b94c      	cbnz	r4, 802beee <__pow5mult+0x66>
 802beda:	f240 2171 	movw	r1, #625	; 0x271
 802bede:	4630      	mov	r0, r6
 802bee0:	f7ff ff16 	bl	802bd10 <__i2b>
 802bee4:	2300      	movs	r3, #0
 802bee6:	f8c8 0008 	str.w	r0, [r8, #8]
 802beea:	4604      	mov	r4, r0
 802beec:	6003      	str	r3, [r0, #0]
 802beee:	f04f 0900 	mov.w	r9, #0
 802bef2:	07eb      	lsls	r3, r5, #31
 802bef4:	d50a      	bpl.n	802bf0c <__pow5mult+0x84>
 802bef6:	4639      	mov	r1, r7
 802bef8:	4622      	mov	r2, r4
 802befa:	4630      	mov	r0, r6
 802befc:	f7ff ff1e 	bl	802bd3c <__multiply>
 802bf00:	4639      	mov	r1, r7
 802bf02:	4680      	mov	r8, r0
 802bf04:	4630      	mov	r0, r6
 802bf06:	f7ff fe47 	bl	802bb98 <_Bfree>
 802bf0a:	4647      	mov	r7, r8
 802bf0c:	106d      	asrs	r5, r5, #1
 802bf0e:	d00b      	beq.n	802bf28 <__pow5mult+0xa0>
 802bf10:	6820      	ldr	r0, [r4, #0]
 802bf12:	b938      	cbnz	r0, 802bf24 <__pow5mult+0x9c>
 802bf14:	4622      	mov	r2, r4
 802bf16:	4621      	mov	r1, r4
 802bf18:	4630      	mov	r0, r6
 802bf1a:	f7ff ff0f 	bl	802bd3c <__multiply>
 802bf1e:	6020      	str	r0, [r4, #0]
 802bf20:	f8c0 9000 	str.w	r9, [r0]
 802bf24:	4604      	mov	r4, r0
 802bf26:	e7e4      	b.n	802bef2 <__pow5mult+0x6a>
 802bf28:	4638      	mov	r0, r7
 802bf2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bf2e:	bf00      	nop
 802bf30:	08031648 	.word	0x08031648
 802bf34:	08031390 	.word	0x08031390
 802bf38:	080314f2 	.word	0x080314f2

0802bf3c <__lshift>:
 802bf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bf40:	460c      	mov	r4, r1
 802bf42:	6849      	ldr	r1, [r1, #4]
 802bf44:	6923      	ldr	r3, [r4, #16]
 802bf46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802bf4a:	68a3      	ldr	r3, [r4, #8]
 802bf4c:	4607      	mov	r7, r0
 802bf4e:	4691      	mov	r9, r2
 802bf50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802bf54:	f108 0601 	add.w	r6, r8, #1
 802bf58:	42b3      	cmp	r3, r6
 802bf5a:	db0b      	blt.n	802bf74 <__lshift+0x38>
 802bf5c:	4638      	mov	r0, r7
 802bf5e:	f7ff fddb 	bl	802bb18 <_Balloc>
 802bf62:	4605      	mov	r5, r0
 802bf64:	b948      	cbnz	r0, 802bf7a <__lshift+0x3e>
 802bf66:	4602      	mov	r2, r0
 802bf68:	4b28      	ldr	r3, [pc, #160]	; (802c00c <__lshift+0xd0>)
 802bf6a:	4829      	ldr	r0, [pc, #164]	; (802c010 <__lshift+0xd4>)
 802bf6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 802bf70:	f7fd fa3a 	bl	80293e8 <__assert_func>
 802bf74:	3101      	adds	r1, #1
 802bf76:	005b      	lsls	r3, r3, #1
 802bf78:	e7ee      	b.n	802bf58 <__lshift+0x1c>
 802bf7a:	2300      	movs	r3, #0
 802bf7c:	f100 0114 	add.w	r1, r0, #20
 802bf80:	f100 0210 	add.w	r2, r0, #16
 802bf84:	4618      	mov	r0, r3
 802bf86:	4553      	cmp	r3, sl
 802bf88:	db33      	blt.n	802bff2 <__lshift+0xb6>
 802bf8a:	6920      	ldr	r0, [r4, #16]
 802bf8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802bf90:	f104 0314 	add.w	r3, r4, #20
 802bf94:	f019 091f 	ands.w	r9, r9, #31
 802bf98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802bf9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802bfa0:	d02b      	beq.n	802bffa <__lshift+0xbe>
 802bfa2:	f1c9 0e20 	rsb	lr, r9, #32
 802bfa6:	468a      	mov	sl, r1
 802bfa8:	2200      	movs	r2, #0
 802bfaa:	6818      	ldr	r0, [r3, #0]
 802bfac:	fa00 f009 	lsl.w	r0, r0, r9
 802bfb0:	4302      	orrs	r2, r0
 802bfb2:	f84a 2b04 	str.w	r2, [sl], #4
 802bfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 802bfba:	459c      	cmp	ip, r3
 802bfbc:	fa22 f20e 	lsr.w	r2, r2, lr
 802bfc0:	d8f3      	bhi.n	802bfaa <__lshift+0x6e>
 802bfc2:	ebac 0304 	sub.w	r3, ip, r4
 802bfc6:	3b15      	subs	r3, #21
 802bfc8:	f023 0303 	bic.w	r3, r3, #3
 802bfcc:	3304      	adds	r3, #4
 802bfce:	f104 0015 	add.w	r0, r4, #21
 802bfd2:	4584      	cmp	ip, r0
 802bfd4:	bf38      	it	cc
 802bfd6:	2304      	movcc	r3, #4
 802bfd8:	50ca      	str	r2, [r1, r3]
 802bfda:	b10a      	cbz	r2, 802bfe0 <__lshift+0xa4>
 802bfdc:	f108 0602 	add.w	r6, r8, #2
 802bfe0:	3e01      	subs	r6, #1
 802bfe2:	4638      	mov	r0, r7
 802bfe4:	612e      	str	r6, [r5, #16]
 802bfe6:	4621      	mov	r1, r4
 802bfe8:	f7ff fdd6 	bl	802bb98 <_Bfree>
 802bfec:	4628      	mov	r0, r5
 802bfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bff2:	f842 0f04 	str.w	r0, [r2, #4]!
 802bff6:	3301      	adds	r3, #1
 802bff8:	e7c5      	b.n	802bf86 <__lshift+0x4a>
 802bffa:	3904      	subs	r1, #4
 802bffc:	f853 2b04 	ldr.w	r2, [r3], #4
 802c000:	f841 2f04 	str.w	r2, [r1, #4]!
 802c004:	459c      	cmp	ip, r3
 802c006:	d8f9      	bhi.n	802bffc <__lshift+0xc0>
 802c008:	e7ea      	b.n	802bfe0 <__lshift+0xa4>
 802c00a:	bf00      	nop
 802c00c:	08031474 	.word	0x08031474
 802c010:	080314f2 	.word	0x080314f2

0802c014 <__mcmp>:
 802c014:	b530      	push	{r4, r5, lr}
 802c016:	6902      	ldr	r2, [r0, #16]
 802c018:	690c      	ldr	r4, [r1, #16]
 802c01a:	1b12      	subs	r2, r2, r4
 802c01c:	d10e      	bne.n	802c03c <__mcmp+0x28>
 802c01e:	f100 0314 	add.w	r3, r0, #20
 802c022:	3114      	adds	r1, #20
 802c024:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802c028:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802c02c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802c030:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802c034:	42a5      	cmp	r5, r4
 802c036:	d003      	beq.n	802c040 <__mcmp+0x2c>
 802c038:	d305      	bcc.n	802c046 <__mcmp+0x32>
 802c03a:	2201      	movs	r2, #1
 802c03c:	4610      	mov	r0, r2
 802c03e:	bd30      	pop	{r4, r5, pc}
 802c040:	4283      	cmp	r3, r0
 802c042:	d3f3      	bcc.n	802c02c <__mcmp+0x18>
 802c044:	e7fa      	b.n	802c03c <__mcmp+0x28>
 802c046:	f04f 32ff 	mov.w	r2, #4294967295
 802c04a:	e7f7      	b.n	802c03c <__mcmp+0x28>

0802c04c <__mdiff>:
 802c04c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c050:	460c      	mov	r4, r1
 802c052:	4606      	mov	r6, r0
 802c054:	4611      	mov	r1, r2
 802c056:	4620      	mov	r0, r4
 802c058:	4617      	mov	r7, r2
 802c05a:	f7ff ffdb 	bl	802c014 <__mcmp>
 802c05e:	1e05      	subs	r5, r0, #0
 802c060:	d110      	bne.n	802c084 <__mdiff+0x38>
 802c062:	4629      	mov	r1, r5
 802c064:	4630      	mov	r0, r6
 802c066:	f7ff fd57 	bl	802bb18 <_Balloc>
 802c06a:	b930      	cbnz	r0, 802c07a <__mdiff+0x2e>
 802c06c:	4b39      	ldr	r3, [pc, #228]	; (802c154 <__mdiff+0x108>)
 802c06e:	4602      	mov	r2, r0
 802c070:	f240 2132 	movw	r1, #562	; 0x232
 802c074:	4838      	ldr	r0, [pc, #224]	; (802c158 <__mdiff+0x10c>)
 802c076:	f7fd f9b7 	bl	80293e8 <__assert_func>
 802c07a:	2301      	movs	r3, #1
 802c07c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802c080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c084:	bfa4      	itt	ge
 802c086:	463b      	movge	r3, r7
 802c088:	4627      	movge	r7, r4
 802c08a:	4630      	mov	r0, r6
 802c08c:	6879      	ldr	r1, [r7, #4]
 802c08e:	bfa6      	itte	ge
 802c090:	461c      	movge	r4, r3
 802c092:	2500      	movge	r5, #0
 802c094:	2501      	movlt	r5, #1
 802c096:	f7ff fd3f 	bl	802bb18 <_Balloc>
 802c09a:	b920      	cbnz	r0, 802c0a6 <__mdiff+0x5a>
 802c09c:	4b2d      	ldr	r3, [pc, #180]	; (802c154 <__mdiff+0x108>)
 802c09e:	4602      	mov	r2, r0
 802c0a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 802c0a4:	e7e6      	b.n	802c074 <__mdiff+0x28>
 802c0a6:	693e      	ldr	r6, [r7, #16]
 802c0a8:	60c5      	str	r5, [r0, #12]
 802c0aa:	6925      	ldr	r5, [r4, #16]
 802c0ac:	f107 0114 	add.w	r1, r7, #20
 802c0b0:	f104 0914 	add.w	r9, r4, #20
 802c0b4:	f100 0e14 	add.w	lr, r0, #20
 802c0b8:	f107 0210 	add.w	r2, r7, #16
 802c0bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802c0c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802c0c4:	46f2      	mov	sl, lr
 802c0c6:	2700      	movs	r7, #0
 802c0c8:	f859 3b04 	ldr.w	r3, [r9], #4
 802c0cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802c0d0:	fa1f f883 	uxth.w	r8, r3
 802c0d4:	fa17 f78b 	uxtah	r7, r7, fp
 802c0d8:	0c1b      	lsrs	r3, r3, #16
 802c0da:	eba7 0808 	sub.w	r8, r7, r8
 802c0de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802c0e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802c0e6:	fa1f f888 	uxth.w	r8, r8
 802c0ea:	141f      	asrs	r7, r3, #16
 802c0ec:	454d      	cmp	r5, r9
 802c0ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802c0f2:	f84a 3b04 	str.w	r3, [sl], #4
 802c0f6:	d8e7      	bhi.n	802c0c8 <__mdiff+0x7c>
 802c0f8:	1b2b      	subs	r3, r5, r4
 802c0fa:	3b15      	subs	r3, #21
 802c0fc:	f023 0303 	bic.w	r3, r3, #3
 802c100:	3304      	adds	r3, #4
 802c102:	3415      	adds	r4, #21
 802c104:	42a5      	cmp	r5, r4
 802c106:	bf38      	it	cc
 802c108:	2304      	movcc	r3, #4
 802c10a:	4419      	add	r1, r3
 802c10c:	4473      	add	r3, lr
 802c10e:	469e      	mov	lr, r3
 802c110:	460d      	mov	r5, r1
 802c112:	4565      	cmp	r5, ip
 802c114:	d30e      	bcc.n	802c134 <__mdiff+0xe8>
 802c116:	f10c 0203 	add.w	r2, ip, #3
 802c11a:	1a52      	subs	r2, r2, r1
 802c11c:	f022 0203 	bic.w	r2, r2, #3
 802c120:	3903      	subs	r1, #3
 802c122:	458c      	cmp	ip, r1
 802c124:	bf38      	it	cc
 802c126:	2200      	movcc	r2, #0
 802c128:	441a      	add	r2, r3
 802c12a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802c12e:	b17b      	cbz	r3, 802c150 <__mdiff+0x104>
 802c130:	6106      	str	r6, [r0, #16]
 802c132:	e7a5      	b.n	802c080 <__mdiff+0x34>
 802c134:	f855 8b04 	ldr.w	r8, [r5], #4
 802c138:	fa17 f488 	uxtah	r4, r7, r8
 802c13c:	1422      	asrs	r2, r4, #16
 802c13e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802c142:	b2a4      	uxth	r4, r4
 802c144:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802c148:	f84e 4b04 	str.w	r4, [lr], #4
 802c14c:	1417      	asrs	r7, r2, #16
 802c14e:	e7e0      	b.n	802c112 <__mdiff+0xc6>
 802c150:	3e01      	subs	r6, #1
 802c152:	e7ea      	b.n	802c12a <__mdiff+0xde>
 802c154:	08031474 	.word	0x08031474
 802c158:	080314f2 	.word	0x080314f2

0802c15c <__d2b>:
 802c15c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c160:	4689      	mov	r9, r1
 802c162:	2101      	movs	r1, #1
 802c164:	ec57 6b10 	vmov	r6, r7, d0
 802c168:	4690      	mov	r8, r2
 802c16a:	f7ff fcd5 	bl	802bb18 <_Balloc>
 802c16e:	4604      	mov	r4, r0
 802c170:	b930      	cbnz	r0, 802c180 <__d2b+0x24>
 802c172:	4602      	mov	r2, r0
 802c174:	4b25      	ldr	r3, [pc, #148]	; (802c20c <__d2b+0xb0>)
 802c176:	4826      	ldr	r0, [pc, #152]	; (802c210 <__d2b+0xb4>)
 802c178:	f240 310a 	movw	r1, #778	; 0x30a
 802c17c:	f7fd f934 	bl	80293e8 <__assert_func>
 802c180:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802c184:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802c188:	bb35      	cbnz	r5, 802c1d8 <__d2b+0x7c>
 802c18a:	2e00      	cmp	r6, #0
 802c18c:	9301      	str	r3, [sp, #4]
 802c18e:	d028      	beq.n	802c1e2 <__d2b+0x86>
 802c190:	4668      	mov	r0, sp
 802c192:	9600      	str	r6, [sp, #0]
 802c194:	f7ff fd8c 	bl	802bcb0 <__lo0bits>
 802c198:	9900      	ldr	r1, [sp, #0]
 802c19a:	b300      	cbz	r0, 802c1de <__d2b+0x82>
 802c19c:	9a01      	ldr	r2, [sp, #4]
 802c19e:	f1c0 0320 	rsb	r3, r0, #32
 802c1a2:	fa02 f303 	lsl.w	r3, r2, r3
 802c1a6:	430b      	orrs	r3, r1
 802c1a8:	40c2      	lsrs	r2, r0
 802c1aa:	6163      	str	r3, [r4, #20]
 802c1ac:	9201      	str	r2, [sp, #4]
 802c1ae:	9b01      	ldr	r3, [sp, #4]
 802c1b0:	61a3      	str	r3, [r4, #24]
 802c1b2:	2b00      	cmp	r3, #0
 802c1b4:	bf14      	ite	ne
 802c1b6:	2202      	movne	r2, #2
 802c1b8:	2201      	moveq	r2, #1
 802c1ba:	6122      	str	r2, [r4, #16]
 802c1bc:	b1d5      	cbz	r5, 802c1f4 <__d2b+0x98>
 802c1be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802c1c2:	4405      	add	r5, r0
 802c1c4:	f8c9 5000 	str.w	r5, [r9]
 802c1c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802c1cc:	f8c8 0000 	str.w	r0, [r8]
 802c1d0:	4620      	mov	r0, r4
 802c1d2:	b003      	add	sp, #12
 802c1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c1d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802c1dc:	e7d5      	b.n	802c18a <__d2b+0x2e>
 802c1de:	6161      	str	r1, [r4, #20]
 802c1e0:	e7e5      	b.n	802c1ae <__d2b+0x52>
 802c1e2:	a801      	add	r0, sp, #4
 802c1e4:	f7ff fd64 	bl	802bcb0 <__lo0bits>
 802c1e8:	9b01      	ldr	r3, [sp, #4]
 802c1ea:	6163      	str	r3, [r4, #20]
 802c1ec:	2201      	movs	r2, #1
 802c1ee:	6122      	str	r2, [r4, #16]
 802c1f0:	3020      	adds	r0, #32
 802c1f2:	e7e3      	b.n	802c1bc <__d2b+0x60>
 802c1f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802c1f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802c1fc:	f8c9 0000 	str.w	r0, [r9]
 802c200:	6918      	ldr	r0, [r3, #16]
 802c202:	f7ff fd35 	bl	802bc70 <__hi0bits>
 802c206:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802c20a:	e7df      	b.n	802c1cc <__d2b+0x70>
 802c20c:	08031474 	.word	0x08031474
 802c210:	080314f2 	.word	0x080314f2

0802c214 <_calloc_r>:
 802c214:	b513      	push	{r0, r1, r4, lr}
 802c216:	434a      	muls	r2, r1
 802c218:	4611      	mov	r1, r2
 802c21a:	9201      	str	r2, [sp, #4]
 802c21c:	f7fd f9e6 	bl	80295ec <_malloc_r>
 802c220:	4604      	mov	r4, r0
 802c222:	b118      	cbz	r0, 802c22c <_calloc_r+0x18>
 802c224:	9a01      	ldr	r2, [sp, #4]
 802c226:	2100      	movs	r1, #0
 802c228:	f7fd f988 	bl	802953c <memset>
 802c22c:	4620      	mov	r0, r4
 802c22e:	b002      	add	sp, #8
 802c230:	bd10      	pop	{r4, pc}

0802c232 <_realloc_r>:
 802c232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c234:	4607      	mov	r7, r0
 802c236:	4614      	mov	r4, r2
 802c238:	460e      	mov	r6, r1
 802c23a:	b921      	cbnz	r1, 802c246 <_realloc_r+0x14>
 802c23c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802c240:	4611      	mov	r1, r2
 802c242:	f7fd b9d3 	b.w	80295ec <_malloc_r>
 802c246:	b922      	cbnz	r2, 802c252 <_realloc_r+0x20>
 802c248:	f7fd f980 	bl	802954c <_free_r>
 802c24c:	4625      	mov	r5, r4
 802c24e:	4628      	mov	r0, r5
 802c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c252:	f000 fdc1 	bl	802cdd8 <_malloc_usable_size_r>
 802c256:	42a0      	cmp	r0, r4
 802c258:	d20f      	bcs.n	802c27a <_realloc_r+0x48>
 802c25a:	4621      	mov	r1, r4
 802c25c:	4638      	mov	r0, r7
 802c25e:	f7fd f9c5 	bl	80295ec <_malloc_r>
 802c262:	4605      	mov	r5, r0
 802c264:	2800      	cmp	r0, #0
 802c266:	d0f2      	beq.n	802c24e <_realloc_r+0x1c>
 802c268:	4631      	mov	r1, r6
 802c26a:	4622      	mov	r2, r4
 802c26c:	f7fd f93e 	bl	80294ec <memcpy>
 802c270:	4631      	mov	r1, r6
 802c272:	4638      	mov	r0, r7
 802c274:	f7fd f96a 	bl	802954c <_free_r>
 802c278:	e7e9      	b.n	802c24e <_realloc_r+0x1c>
 802c27a:	4635      	mov	r5, r6
 802c27c:	e7e7      	b.n	802c24e <_realloc_r+0x1c>

0802c27e <__ssputs_r>:
 802c27e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c282:	688e      	ldr	r6, [r1, #8]
 802c284:	429e      	cmp	r6, r3
 802c286:	4682      	mov	sl, r0
 802c288:	460c      	mov	r4, r1
 802c28a:	4690      	mov	r8, r2
 802c28c:	461f      	mov	r7, r3
 802c28e:	d838      	bhi.n	802c302 <__ssputs_r+0x84>
 802c290:	898a      	ldrh	r2, [r1, #12]
 802c292:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802c296:	d032      	beq.n	802c2fe <__ssputs_r+0x80>
 802c298:	6825      	ldr	r5, [r4, #0]
 802c29a:	6909      	ldr	r1, [r1, #16]
 802c29c:	eba5 0901 	sub.w	r9, r5, r1
 802c2a0:	6965      	ldr	r5, [r4, #20]
 802c2a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c2a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802c2aa:	3301      	adds	r3, #1
 802c2ac:	444b      	add	r3, r9
 802c2ae:	106d      	asrs	r5, r5, #1
 802c2b0:	429d      	cmp	r5, r3
 802c2b2:	bf38      	it	cc
 802c2b4:	461d      	movcc	r5, r3
 802c2b6:	0553      	lsls	r3, r2, #21
 802c2b8:	d531      	bpl.n	802c31e <__ssputs_r+0xa0>
 802c2ba:	4629      	mov	r1, r5
 802c2bc:	f7fd f996 	bl	80295ec <_malloc_r>
 802c2c0:	4606      	mov	r6, r0
 802c2c2:	b950      	cbnz	r0, 802c2da <__ssputs_r+0x5c>
 802c2c4:	230c      	movs	r3, #12
 802c2c6:	f8ca 3000 	str.w	r3, [sl]
 802c2ca:	89a3      	ldrh	r3, [r4, #12]
 802c2cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c2d0:	81a3      	strh	r3, [r4, #12]
 802c2d2:	f04f 30ff 	mov.w	r0, #4294967295
 802c2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c2da:	6921      	ldr	r1, [r4, #16]
 802c2dc:	464a      	mov	r2, r9
 802c2de:	f7fd f905 	bl	80294ec <memcpy>
 802c2e2:	89a3      	ldrh	r3, [r4, #12]
 802c2e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802c2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c2ec:	81a3      	strh	r3, [r4, #12]
 802c2ee:	6126      	str	r6, [r4, #16]
 802c2f0:	6165      	str	r5, [r4, #20]
 802c2f2:	444e      	add	r6, r9
 802c2f4:	eba5 0509 	sub.w	r5, r5, r9
 802c2f8:	6026      	str	r6, [r4, #0]
 802c2fa:	60a5      	str	r5, [r4, #8]
 802c2fc:	463e      	mov	r6, r7
 802c2fe:	42be      	cmp	r6, r7
 802c300:	d900      	bls.n	802c304 <__ssputs_r+0x86>
 802c302:	463e      	mov	r6, r7
 802c304:	4632      	mov	r2, r6
 802c306:	6820      	ldr	r0, [r4, #0]
 802c308:	4641      	mov	r1, r8
 802c30a:	f7fd f8fd 	bl	8029508 <memmove>
 802c30e:	68a3      	ldr	r3, [r4, #8]
 802c310:	6822      	ldr	r2, [r4, #0]
 802c312:	1b9b      	subs	r3, r3, r6
 802c314:	4432      	add	r2, r6
 802c316:	60a3      	str	r3, [r4, #8]
 802c318:	6022      	str	r2, [r4, #0]
 802c31a:	2000      	movs	r0, #0
 802c31c:	e7db      	b.n	802c2d6 <__ssputs_r+0x58>
 802c31e:	462a      	mov	r2, r5
 802c320:	f7ff ff87 	bl	802c232 <_realloc_r>
 802c324:	4606      	mov	r6, r0
 802c326:	2800      	cmp	r0, #0
 802c328:	d1e1      	bne.n	802c2ee <__ssputs_r+0x70>
 802c32a:	6921      	ldr	r1, [r4, #16]
 802c32c:	4650      	mov	r0, sl
 802c32e:	f7fd f90d 	bl	802954c <_free_r>
 802c332:	e7c7      	b.n	802c2c4 <__ssputs_r+0x46>

0802c334 <_svfiprintf_r>:
 802c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c338:	4698      	mov	r8, r3
 802c33a:	898b      	ldrh	r3, [r1, #12]
 802c33c:	061b      	lsls	r3, r3, #24
 802c33e:	b09d      	sub	sp, #116	; 0x74
 802c340:	4607      	mov	r7, r0
 802c342:	460d      	mov	r5, r1
 802c344:	4614      	mov	r4, r2
 802c346:	d50e      	bpl.n	802c366 <_svfiprintf_r+0x32>
 802c348:	690b      	ldr	r3, [r1, #16]
 802c34a:	b963      	cbnz	r3, 802c366 <_svfiprintf_r+0x32>
 802c34c:	2140      	movs	r1, #64	; 0x40
 802c34e:	f7fd f94d 	bl	80295ec <_malloc_r>
 802c352:	6028      	str	r0, [r5, #0]
 802c354:	6128      	str	r0, [r5, #16]
 802c356:	b920      	cbnz	r0, 802c362 <_svfiprintf_r+0x2e>
 802c358:	230c      	movs	r3, #12
 802c35a:	603b      	str	r3, [r7, #0]
 802c35c:	f04f 30ff 	mov.w	r0, #4294967295
 802c360:	e0d1      	b.n	802c506 <_svfiprintf_r+0x1d2>
 802c362:	2340      	movs	r3, #64	; 0x40
 802c364:	616b      	str	r3, [r5, #20]
 802c366:	2300      	movs	r3, #0
 802c368:	9309      	str	r3, [sp, #36]	; 0x24
 802c36a:	2320      	movs	r3, #32
 802c36c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802c370:	f8cd 800c 	str.w	r8, [sp, #12]
 802c374:	2330      	movs	r3, #48	; 0x30
 802c376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802c520 <_svfiprintf_r+0x1ec>
 802c37a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802c37e:	f04f 0901 	mov.w	r9, #1
 802c382:	4623      	mov	r3, r4
 802c384:	469a      	mov	sl, r3
 802c386:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c38a:	b10a      	cbz	r2, 802c390 <_svfiprintf_r+0x5c>
 802c38c:	2a25      	cmp	r2, #37	; 0x25
 802c38e:	d1f9      	bne.n	802c384 <_svfiprintf_r+0x50>
 802c390:	ebba 0b04 	subs.w	fp, sl, r4
 802c394:	d00b      	beq.n	802c3ae <_svfiprintf_r+0x7a>
 802c396:	465b      	mov	r3, fp
 802c398:	4622      	mov	r2, r4
 802c39a:	4629      	mov	r1, r5
 802c39c:	4638      	mov	r0, r7
 802c39e:	f7ff ff6e 	bl	802c27e <__ssputs_r>
 802c3a2:	3001      	adds	r0, #1
 802c3a4:	f000 80aa 	beq.w	802c4fc <_svfiprintf_r+0x1c8>
 802c3a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c3aa:	445a      	add	r2, fp
 802c3ac:	9209      	str	r2, [sp, #36]	; 0x24
 802c3ae:	f89a 3000 	ldrb.w	r3, [sl]
 802c3b2:	2b00      	cmp	r3, #0
 802c3b4:	f000 80a2 	beq.w	802c4fc <_svfiprintf_r+0x1c8>
 802c3b8:	2300      	movs	r3, #0
 802c3ba:	f04f 32ff 	mov.w	r2, #4294967295
 802c3be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c3c2:	f10a 0a01 	add.w	sl, sl, #1
 802c3c6:	9304      	str	r3, [sp, #16]
 802c3c8:	9307      	str	r3, [sp, #28]
 802c3ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802c3ce:	931a      	str	r3, [sp, #104]	; 0x68
 802c3d0:	4654      	mov	r4, sl
 802c3d2:	2205      	movs	r2, #5
 802c3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c3d8:	4851      	ldr	r0, [pc, #324]	; (802c520 <_svfiprintf_r+0x1ec>)
 802c3da:	f7d3 ff09 	bl	80001f0 <memchr>
 802c3de:	9a04      	ldr	r2, [sp, #16]
 802c3e0:	b9d8      	cbnz	r0, 802c41a <_svfiprintf_r+0xe6>
 802c3e2:	06d0      	lsls	r0, r2, #27
 802c3e4:	bf44      	itt	mi
 802c3e6:	2320      	movmi	r3, #32
 802c3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802c3ec:	0711      	lsls	r1, r2, #28
 802c3ee:	bf44      	itt	mi
 802c3f0:	232b      	movmi	r3, #43	; 0x2b
 802c3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802c3f6:	f89a 3000 	ldrb.w	r3, [sl]
 802c3fa:	2b2a      	cmp	r3, #42	; 0x2a
 802c3fc:	d015      	beq.n	802c42a <_svfiprintf_r+0xf6>
 802c3fe:	9a07      	ldr	r2, [sp, #28]
 802c400:	4654      	mov	r4, sl
 802c402:	2000      	movs	r0, #0
 802c404:	f04f 0c0a 	mov.w	ip, #10
 802c408:	4621      	mov	r1, r4
 802c40a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c40e:	3b30      	subs	r3, #48	; 0x30
 802c410:	2b09      	cmp	r3, #9
 802c412:	d94e      	bls.n	802c4b2 <_svfiprintf_r+0x17e>
 802c414:	b1b0      	cbz	r0, 802c444 <_svfiprintf_r+0x110>
 802c416:	9207      	str	r2, [sp, #28]
 802c418:	e014      	b.n	802c444 <_svfiprintf_r+0x110>
 802c41a:	eba0 0308 	sub.w	r3, r0, r8
 802c41e:	fa09 f303 	lsl.w	r3, r9, r3
 802c422:	4313      	orrs	r3, r2
 802c424:	9304      	str	r3, [sp, #16]
 802c426:	46a2      	mov	sl, r4
 802c428:	e7d2      	b.n	802c3d0 <_svfiprintf_r+0x9c>
 802c42a:	9b03      	ldr	r3, [sp, #12]
 802c42c:	1d19      	adds	r1, r3, #4
 802c42e:	681b      	ldr	r3, [r3, #0]
 802c430:	9103      	str	r1, [sp, #12]
 802c432:	2b00      	cmp	r3, #0
 802c434:	bfbb      	ittet	lt
 802c436:	425b      	neglt	r3, r3
 802c438:	f042 0202 	orrlt.w	r2, r2, #2
 802c43c:	9307      	strge	r3, [sp, #28]
 802c43e:	9307      	strlt	r3, [sp, #28]
 802c440:	bfb8      	it	lt
 802c442:	9204      	strlt	r2, [sp, #16]
 802c444:	7823      	ldrb	r3, [r4, #0]
 802c446:	2b2e      	cmp	r3, #46	; 0x2e
 802c448:	d10c      	bne.n	802c464 <_svfiprintf_r+0x130>
 802c44a:	7863      	ldrb	r3, [r4, #1]
 802c44c:	2b2a      	cmp	r3, #42	; 0x2a
 802c44e:	d135      	bne.n	802c4bc <_svfiprintf_r+0x188>
 802c450:	9b03      	ldr	r3, [sp, #12]
 802c452:	1d1a      	adds	r2, r3, #4
 802c454:	681b      	ldr	r3, [r3, #0]
 802c456:	9203      	str	r2, [sp, #12]
 802c458:	2b00      	cmp	r3, #0
 802c45a:	bfb8      	it	lt
 802c45c:	f04f 33ff 	movlt.w	r3, #4294967295
 802c460:	3402      	adds	r4, #2
 802c462:	9305      	str	r3, [sp, #20]
 802c464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802c530 <_svfiprintf_r+0x1fc>
 802c468:	7821      	ldrb	r1, [r4, #0]
 802c46a:	2203      	movs	r2, #3
 802c46c:	4650      	mov	r0, sl
 802c46e:	f7d3 febf 	bl	80001f0 <memchr>
 802c472:	b140      	cbz	r0, 802c486 <_svfiprintf_r+0x152>
 802c474:	2340      	movs	r3, #64	; 0x40
 802c476:	eba0 000a 	sub.w	r0, r0, sl
 802c47a:	fa03 f000 	lsl.w	r0, r3, r0
 802c47e:	9b04      	ldr	r3, [sp, #16]
 802c480:	4303      	orrs	r3, r0
 802c482:	3401      	adds	r4, #1
 802c484:	9304      	str	r3, [sp, #16]
 802c486:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c48a:	4826      	ldr	r0, [pc, #152]	; (802c524 <_svfiprintf_r+0x1f0>)
 802c48c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802c490:	2206      	movs	r2, #6
 802c492:	f7d3 fead 	bl	80001f0 <memchr>
 802c496:	2800      	cmp	r0, #0
 802c498:	d038      	beq.n	802c50c <_svfiprintf_r+0x1d8>
 802c49a:	4b23      	ldr	r3, [pc, #140]	; (802c528 <_svfiprintf_r+0x1f4>)
 802c49c:	bb1b      	cbnz	r3, 802c4e6 <_svfiprintf_r+0x1b2>
 802c49e:	9b03      	ldr	r3, [sp, #12]
 802c4a0:	3307      	adds	r3, #7
 802c4a2:	f023 0307 	bic.w	r3, r3, #7
 802c4a6:	3308      	adds	r3, #8
 802c4a8:	9303      	str	r3, [sp, #12]
 802c4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c4ac:	4433      	add	r3, r6
 802c4ae:	9309      	str	r3, [sp, #36]	; 0x24
 802c4b0:	e767      	b.n	802c382 <_svfiprintf_r+0x4e>
 802c4b2:	fb0c 3202 	mla	r2, ip, r2, r3
 802c4b6:	460c      	mov	r4, r1
 802c4b8:	2001      	movs	r0, #1
 802c4ba:	e7a5      	b.n	802c408 <_svfiprintf_r+0xd4>
 802c4bc:	2300      	movs	r3, #0
 802c4be:	3401      	adds	r4, #1
 802c4c0:	9305      	str	r3, [sp, #20]
 802c4c2:	4619      	mov	r1, r3
 802c4c4:	f04f 0c0a 	mov.w	ip, #10
 802c4c8:	4620      	mov	r0, r4
 802c4ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c4ce:	3a30      	subs	r2, #48	; 0x30
 802c4d0:	2a09      	cmp	r2, #9
 802c4d2:	d903      	bls.n	802c4dc <_svfiprintf_r+0x1a8>
 802c4d4:	2b00      	cmp	r3, #0
 802c4d6:	d0c5      	beq.n	802c464 <_svfiprintf_r+0x130>
 802c4d8:	9105      	str	r1, [sp, #20]
 802c4da:	e7c3      	b.n	802c464 <_svfiprintf_r+0x130>
 802c4dc:	fb0c 2101 	mla	r1, ip, r1, r2
 802c4e0:	4604      	mov	r4, r0
 802c4e2:	2301      	movs	r3, #1
 802c4e4:	e7f0      	b.n	802c4c8 <_svfiprintf_r+0x194>
 802c4e6:	ab03      	add	r3, sp, #12
 802c4e8:	9300      	str	r3, [sp, #0]
 802c4ea:	462a      	mov	r2, r5
 802c4ec:	4b0f      	ldr	r3, [pc, #60]	; (802c52c <_svfiprintf_r+0x1f8>)
 802c4ee:	a904      	add	r1, sp, #16
 802c4f0:	4638      	mov	r0, r7
 802c4f2:	f7fd facf 	bl	8029a94 <_printf_float>
 802c4f6:	1c42      	adds	r2, r0, #1
 802c4f8:	4606      	mov	r6, r0
 802c4fa:	d1d6      	bne.n	802c4aa <_svfiprintf_r+0x176>
 802c4fc:	89ab      	ldrh	r3, [r5, #12]
 802c4fe:	065b      	lsls	r3, r3, #25
 802c500:	f53f af2c 	bmi.w	802c35c <_svfiprintf_r+0x28>
 802c504:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c506:	b01d      	add	sp, #116	; 0x74
 802c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c50c:	ab03      	add	r3, sp, #12
 802c50e:	9300      	str	r3, [sp, #0]
 802c510:	462a      	mov	r2, r5
 802c512:	4b06      	ldr	r3, [pc, #24]	; (802c52c <_svfiprintf_r+0x1f8>)
 802c514:	a904      	add	r1, sp, #16
 802c516:	4638      	mov	r0, r7
 802c518:	f7fd fd60 	bl	8029fdc <_printf_i>
 802c51c:	e7eb      	b.n	802c4f6 <_svfiprintf_r+0x1c2>
 802c51e:	bf00      	nop
 802c520:	08031348 	.word	0x08031348
 802c524:	08031352 	.word	0x08031352
 802c528:	08029a95 	.word	0x08029a95
 802c52c:	0802c27f 	.word	0x0802c27f
 802c530:	0803134e 	.word	0x0803134e

0802c534 <_sungetc_r>:
 802c534:	b538      	push	{r3, r4, r5, lr}
 802c536:	1c4b      	adds	r3, r1, #1
 802c538:	4614      	mov	r4, r2
 802c53a:	d103      	bne.n	802c544 <_sungetc_r+0x10>
 802c53c:	f04f 35ff 	mov.w	r5, #4294967295
 802c540:	4628      	mov	r0, r5
 802c542:	bd38      	pop	{r3, r4, r5, pc}
 802c544:	8993      	ldrh	r3, [r2, #12]
 802c546:	f023 0320 	bic.w	r3, r3, #32
 802c54a:	8193      	strh	r3, [r2, #12]
 802c54c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c54e:	6852      	ldr	r2, [r2, #4]
 802c550:	b2cd      	uxtb	r5, r1
 802c552:	b18b      	cbz	r3, 802c578 <_sungetc_r+0x44>
 802c554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c556:	4293      	cmp	r3, r2
 802c558:	dd08      	ble.n	802c56c <_sungetc_r+0x38>
 802c55a:	6823      	ldr	r3, [r4, #0]
 802c55c:	1e5a      	subs	r2, r3, #1
 802c55e:	6022      	str	r2, [r4, #0]
 802c560:	f803 5c01 	strb.w	r5, [r3, #-1]
 802c564:	6863      	ldr	r3, [r4, #4]
 802c566:	3301      	adds	r3, #1
 802c568:	6063      	str	r3, [r4, #4]
 802c56a:	e7e9      	b.n	802c540 <_sungetc_r+0xc>
 802c56c:	4621      	mov	r1, r4
 802c56e:	f000 fbc9 	bl	802cd04 <__submore>
 802c572:	2800      	cmp	r0, #0
 802c574:	d0f1      	beq.n	802c55a <_sungetc_r+0x26>
 802c576:	e7e1      	b.n	802c53c <_sungetc_r+0x8>
 802c578:	6921      	ldr	r1, [r4, #16]
 802c57a:	6823      	ldr	r3, [r4, #0]
 802c57c:	b151      	cbz	r1, 802c594 <_sungetc_r+0x60>
 802c57e:	4299      	cmp	r1, r3
 802c580:	d208      	bcs.n	802c594 <_sungetc_r+0x60>
 802c582:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802c586:	42a9      	cmp	r1, r5
 802c588:	d104      	bne.n	802c594 <_sungetc_r+0x60>
 802c58a:	3b01      	subs	r3, #1
 802c58c:	3201      	adds	r2, #1
 802c58e:	6023      	str	r3, [r4, #0]
 802c590:	6062      	str	r2, [r4, #4]
 802c592:	e7d5      	b.n	802c540 <_sungetc_r+0xc>
 802c594:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802c598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c59c:	6363      	str	r3, [r4, #52]	; 0x34
 802c59e:	2303      	movs	r3, #3
 802c5a0:	63a3      	str	r3, [r4, #56]	; 0x38
 802c5a2:	4623      	mov	r3, r4
 802c5a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 802c5a8:	6023      	str	r3, [r4, #0]
 802c5aa:	2301      	movs	r3, #1
 802c5ac:	e7dc      	b.n	802c568 <_sungetc_r+0x34>

0802c5ae <__ssrefill_r>:
 802c5ae:	b510      	push	{r4, lr}
 802c5b0:	460c      	mov	r4, r1
 802c5b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802c5b4:	b169      	cbz	r1, 802c5d2 <__ssrefill_r+0x24>
 802c5b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c5ba:	4299      	cmp	r1, r3
 802c5bc:	d001      	beq.n	802c5c2 <__ssrefill_r+0x14>
 802c5be:	f7fc ffc5 	bl	802954c <_free_r>
 802c5c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c5c4:	6063      	str	r3, [r4, #4]
 802c5c6:	2000      	movs	r0, #0
 802c5c8:	6360      	str	r0, [r4, #52]	; 0x34
 802c5ca:	b113      	cbz	r3, 802c5d2 <__ssrefill_r+0x24>
 802c5cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c5ce:	6023      	str	r3, [r4, #0]
 802c5d0:	bd10      	pop	{r4, pc}
 802c5d2:	6923      	ldr	r3, [r4, #16]
 802c5d4:	6023      	str	r3, [r4, #0]
 802c5d6:	2300      	movs	r3, #0
 802c5d8:	6063      	str	r3, [r4, #4]
 802c5da:	89a3      	ldrh	r3, [r4, #12]
 802c5dc:	f043 0320 	orr.w	r3, r3, #32
 802c5e0:	81a3      	strh	r3, [r4, #12]
 802c5e2:	f04f 30ff 	mov.w	r0, #4294967295
 802c5e6:	e7f3      	b.n	802c5d0 <__ssrefill_r+0x22>

0802c5e8 <__ssvfiscanf_r>:
 802c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c5ec:	460c      	mov	r4, r1
 802c5ee:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802c5f2:	2100      	movs	r1, #0
 802c5f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802c5f8:	49b2      	ldr	r1, [pc, #712]	; (802c8c4 <__ssvfiscanf_r+0x2dc>)
 802c5fa:	91a0      	str	r1, [sp, #640]	; 0x280
 802c5fc:	f10d 0804 	add.w	r8, sp, #4
 802c600:	49b1      	ldr	r1, [pc, #708]	; (802c8c8 <__ssvfiscanf_r+0x2e0>)
 802c602:	4fb2      	ldr	r7, [pc, #712]	; (802c8cc <__ssvfiscanf_r+0x2e4>)
 802c604:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802c8d0 <__ssvfiscanf_r+0x2e8>
 802c608:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802c60c:	4606      	mov	r6, r0
 802c60e:	91a1      	str	r1, [sp, #644]	; 0x284
 802c610:	9300      	str	r3, [sp, #0]
 802c612:	f892 a000 	ldrb.w	sl, [r2]
 802c616:	f1ba 0f00 	cmp.w	sl, #0
 802c61a:	f000 8151 	beq.w	802c8c0 <__ssvfiscanf_r+0x2d8>
 802c61e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802c622:	f013 0308 	ands.w	r3, r3, #8
 802c626:	f102 0501 	add.w	r5, r2, #1
 802c62a:	d019      	beq.n	802c660 <__ssvfiscanf_r+0x78>
 802c62c:	6863      	ldr	r3, [r4, #4]
 802c62e:	2b00      	cmp	r3, #0
 802c630:	dd0f      	ble.n	802c652 <__ssvfiscanf_r+0x6a>
 802c632:	6823      	ldr	r3, [r4, #0]
 802c634:	781a      	ldrb	r2, [r3, #0]
 802c636:	5cba      	ldrb	r2, [r7, r2]
 802c638:	0712      	lsls	r2, r2, #28
 802c63a:	d401      	bmi.n	802c640 <__ssvfiscanf_r+0x58>
 802c63c:	462a      	mov	r2, r5
 802c63e:	e7e8      	b.n	802c612 <__ssvfiscanf_r+0x2a>
 802c640:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c642:	3201      	adds	r2, #1
 802c644:	9245      	str	r2, [sp, #276]	; 0x114
 802c646:	6862      	ldr	r2, [r4, #4]
 802c648:	3301      	adds	r3, #1
 802c64a:	3a01      	subs	r2, #1
 802c64c:	6062      	str	r2, [r4, #4]
 802c64e:	6023      	str	r3, [r4, #0]
 802c650:	e7ec      	b.n	802c62c <__ssvfiscanf_r+0x44>
 802c652:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c654:	4621      	mov	r1, r4
 802c656:	4630      	mov	r0, r6
 802c658:	4798      	blx	r3
 802c65a:	2800      	cmp	r0, #0
 802c65c:	d0e9      	beq.n	802c632 <__ssvfiscanf_r+0x4a>
 802c65e:	e7ed      	b.n	802c63c <__ssvfiscanf_r+0x54>
 802c660:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 802c664:	f040 8083 	bne.w	802c76e <__ssvfiscanf_r+0x186>
 802c668:	9341      	str	r3, [sp, #260]	; 0x104
 802c66a:	9343      	str	r3, [sp, #268]	; 0x10c
 802c66c:	7853      	ldrb	r3, [r2, #1]
 802c66e:	2b2a      	cmp	r3, #42	; 0x2a
 802c670:	bf02      	ittt	eq
 802c672:	2310      	moveq	r3, #16
 802c674:	1c95      	addeq	r5, r2, #2
 802c676:	9341      	streq	r3, [sp, #260]	; 0x104
 802c678:	220a      	movs	r2, #10
 802c67a:	46ab      	mov	fp, r5
 802c67c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 802c680:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802c684:	2b09      	cmp	r3, #9
 802c686:	d91d      	bls.n	802c6c4 <__ssvfiscanf_r+0xdc>
 802c688:	4891      	ldr	r0, [pc, #580]	; (802c8d0 <__ssvfiscanf_r+0x2e8>)
 802c68a:	2203      	movs	r2, #3
 802c68c:	f7d3 fdb0 	bl	80001f0 <memchr>
 802c690:	b140      	cbz	r0, 802c6a4 <__ssvfiscanf_r+0xbc>
 802c692:	2301      	movs	r3, #1
 802c694:	eba0 0009 	sub.w	r0, r0, r9
 802c698:	fa03 f000 	lsl.w	r0, r3, r0
 802c69c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c69e:	4318      	orrs	r0, r3
 802c6a0:	9041      	str	r0, [sp, #260]	; 0x104
 802c6a2:	465d      	mov	r5, fp
 802c6a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 802c6a8:	2b78      	cmp	r3, #120	; 0x78
 802c6aa:	d806      	bhi.n	802c6ba <__ssvfiscanf_r+0xd2>
 802c6ac:	2b57      	cmp	r3, #87	; 0x57
 802c6ae:	d810      	bhi.n	802c6d2 <__ssvfiscanf_r+0xea>
 802c6b0:	2b25      	cmp	r3, #37	; 0x25
 802c6b2:	d05c      	beq.n	802c76e <__ssvfiscanf_r+0x186>
 802c6b4:	d856      	bhi.n	802c764 <__ssvfiscanf_r+0x17c>
 802c6b6:	2b00      	cmp	r3, #0
 802c6b8:	d074      	beq.n	802c7a4 <__ssvfiscanf_r+0x1bc>
 802c6ba:	2303      	movs	r3, #3
 802c6bc:	9347      	str	r3, [sp, #284]	; 0x11c
 802c6be:	230a      	movs	r3, #10
 802c6c0:	9342      	str	r3, [sp, #264]	; 0x108
 802c6c2:	e081      	b.n	802c7c8 <__ssvfiscanf_r+0x1e0>
 802c6c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802c6c6:	fb02 1303 	mla	r3, r2, r3, r1
 802c6ca:	3b30      	subs	r3, #48	; 0x30
 802c6cc:	9343      	str	r3, [sp, #268]	; 0x10c
 802c6ce:	465d      	mov	r5, fp
 802c6d0:	e7d3      	b.n	802c67a <__ssvfiscanf_r+0x92>
 802c6d2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802c6d6:	2a20      	cmp	r2, #32
 802c6d8:	d8ef      	bhi.n	802c6ba <__ssvfiscanf_r+0xd2>
 802c6da:	a101      	add	r1, pc, #4	; (adr r1, 802c6e0 <__ssvfiscanf_r+0xf8>)
 802c6dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802c6e0:	0802c7b3 	.word	0x0802c7b3
 802c6e4:	0802c6bb 	.word	0x0802c6bb
 802c6e8:	0802c6bb 	.word	0x0802c6bb
 802c6ec:	0802c811 	.word	0x0802c811
 802c6f0:	0802c6bb 	.word	0x0802c6bb
 802c6f4:	0802c6bb 	.word	0x0802c6bb
 802c6f8:	0802c6bb 	.word	0x0802c6bb
 802c6fc:	0802c6bb 	.word	0x0802c6bb
 802c700:	0802c6bb 	.word	0x0802c6bb
 802c704:	0802c6bb 	.word	0x0802c6bb
 802c708:	0802c6bb 	.word	0x0802c6bb
 802c70c:	0802c827 	.word	0x0802c827
 802c710:	0802c7fd 	.word	0x0802c7fd
 802c714:	0802c76b 	.word	0x0802c76b
 802c718:	0802c76b 	.word	0x0802c76b
 802c71c:	0802c76b 	.word	0x0802c76b
 802c720:	0802c6bb 	.word	0x0802c6bb
 802c724:	0802c801 	.word	0x0802c801
 802c728:	0802c6bb 	.word	0x0802c6bb
 802c72c:	0802c6bb 	.word	0x0802c6bb
 802c730:	0802c6bb 	.word	0x0802c6bb
 802c734:	0802c6bb 	.word	0x0802c6bb
 802c738:	0802c837 	.word	0x0802c837
 802c73c:	0802c809 	.word	0x0802c809
 802c740:	0802c7ab 	.word	0x0802c7ab
 802c744:	0802c6bb 	.word	0x0802c6bb
 802c748:	0802c6bb 	.word	0x0802c6bb
 802c74c:	0802c833 	.word	0x0802c833
 802c750:	0802c6bb 	.word	0x0802c6bb
 802c754:	0802c7fd 	.word	0x0802c7fd
 802c758:	0802c6bb 	.word	0x0802c6bb
 802c75c:	0802c6bb 	.word	0x0802c6bb
 802c760:	0802c7b3 	.word	0x0802c7b3
 802c764:	3b45      	subs	r3, #69	; 0x45
 802c766:	2b02      	cmp	r3, #2
 802c768:	d8a7      	bhi.n	802c6ba <__ssvfiscanf_r+0xd2>
 802c76a:	2305      	movs	r3, #5
 802c76c:	e02b      	b.n	802c7c6 <__ssvfiscanf_r+0x1de>
 802c76e:	6863      	ldr	r3, [r4, #4]
 802c770:	2b00      	cmp	r3, #0
 802c772:	dd0d      	ble.n	802c790 <__ssvfiscanf_r+0x1a8>
 802c774:	6823      	ldr	r3, [r4, #0]
 802c776:	781a      	ldrb	r2, [r3, #0]
 802c778:	4552      	cmp	r2, sl
 802c77a:	f040 80a1 	bne.w	802c8c0 <__ssvfiscanf_r+0x2d8>
 802c77e:	3301      	adds	r3, #1
 802c780:	6862      	ldr	r2, [r4, #4]
 802c782:	6023      	str	r3, [r4, #0]
 802c784:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802c786:	3a01      	subs	r2, #1
 802c788:	3301      	adds	r3, #1
 802c78a:	6062      	str	r2, [r4, #4]
 802c78c:	9345      	str	r3, [sp, #276]	; 0x114
 802c78e:	e755      	b.n	802c63c <__ssvfiscanf_r+0x54>
 802c790:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c792:	4621      	mov	r1, r4
 802c794:	4630      	mov	r0, r6
 802c796:	4798      	blx	r3
 802c798:	2800      	cmp	r0, #0
 802c79a:	d0eb      	beq.n	802c774 <__ssvfiscanf_r+0x18c>
 802c79c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802c79e:	2800      	cmp	r0, #0
 802c7a0:	f040 8084 	bne.w	802c8ac <__ssvfiscanf_r+0x2c4>
 802c7a4:	f04f 30ff 	mov.w	r0, #4294967295
 802c7a8:	e086      	b.n	802c8b8 <__ssvfiscanf_r+0x2d0>
 802c7aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802c7ac:	f042 0220 	orr.w	r2, r2, #32
 802c7b0:	9241      	str	r2, [sp, #260]	; 0x104
 802c7b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802c7b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802c7b8:	9241      	str	r2, [sp, #260]	; 0x104
 802c7ba:	2210      	movs	r2, #16
 802c7bc:	2b6f      	cmp	r3, #111	; 0x6f
 802c7be:	9242      	str	r2, [sp, #264]	; 0x108
 802c7c0:	bf34      	ite	cc
 802c7c2:	2303      	movcc	r3, #3
 802c7c4:	2304      	movcs	r3, #4
 802c7c6:	9347      	str	r3, [sp, #284]	; 0x11c
 802c7c8:	6863      	ldr	r3, [r4, #4]
 802c7ca:	2b00      	cmp	r3, #0
 802c7cc:	dd41      	ble.n	802c852 <__ssvfiscanf_r+0x26a>
 802c7ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c7d0:	0659      	lsls	r1, r3, #25
 802c7d2:	d404      	bmi.n	802c7de <__ssvfiscanf_r+0x1f6>
 802c7d4:	6823      	ldr	r3, [r4, #0]
 802c7d6:	781a      	ldrb	r2, [r3, #0]
 802c7d8:	5cba      	ldrb	r2, [r7, r2]
 802c7da:	0712      	lsls	r2, r2, #28
 802c7dc:	d440      	bmi.n	802c860 <__ssvfiscanf_r+0x278>
 802c7de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802c7e0:	2b02      	cmp	r3, #2
 802c7e2:	dc4f      	bgt.n	802c884 <__ssvfiscanf_r+0x29c>
 802c7e4:	466b      	mov	r3, sp
 802c7e6:	4622      	mov	r2, r4
 802c7e8:	a941      	add	r1, sp, #260	; 0x104
 802c7ea:	4630      	mov	r0, r6
 802c7ec:	f000 f874 	bl	802c8d8 <_scanf_chars>
 802c7f0:	2801      	cmp	r0, #1
 802c7f2:	d065      	beq.n	802c8c0 <__ssvfiscanf_r+0x2d8>
 802c7f4:	2802      	cmp	r0, #2
 802c7f6:	f47f af21 	bne.w	802c63c <__ssvfiscanf_r+0x54>
 802c7fa:	e7cf      	b.n	802c79c <__ssvfiscanf_r+0x1b4>
 802c7fc:	220a      	movs	r2, #10
 802c7fe:	e7dd      	b.n	802c7bc <__ssvfiscanf_r+0x1d4>
 802c800:	2300      	movs	r3, #0
 802c802:	9342      	str	r3, [sp, #264]	; 0x108
 802c804:	2303      	movs	r3, #3
 802c806:	e7de      	b.n	802c7c6 <__ssvfiscanf_r+0x1de>
 802c808:	2308      	movs	r3, #8
 802c80a:	9342      	str	r3, [sp, #264]	; 0x108
 802c80c:	2304      	movs	r3, #4
 802c80e:	e7da      	b.n	802c7c6 <__ssvfiscanf_r+0x1de>
 802c810:	4629      	mov	r1, r5
 802c812:	4640      	mov	r0, r8
 802c814:	f000 f9be 	bl	802cb94 <__sccl>
 802c818:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c81e:	9341      	str	r3, [sp, #260]	; 0x104
 802c820:	4605      	mov	r5, r0
 802c822:	2301      	movs	r3, #1
 802c824:	e7cf      	b.n	802c7c6 <__ssvfiscanf_r+0x1de>
 802c826:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c82c:	9341      	str	r3, [sp, #260]	; 0x104
 802c82e:	2300      	movs	r3, #0
 802c830:	e7c9      	b.n	802c7c6 <__ssvfiscanf_r+0x1de>
 802c832:	2302      	movs	r3, #2
 802c834:	e7c7      	b.n	802c7c6 <__ssvfiscanf_r+0x1de>
 802c836:	9841      	ldr	r0, [sp, #260]	; 0x104
 802c838:	06c3      	lsls	r3, r0, #27
 802c83a:	f53f aeff 	bmi.w	802c63c <__ssvfiscanf_r+0x54>
 802c83e:	9b00      	ldr	r3, [sp, #0]
 802c840:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c842:	1d19      	adds	r1, r3, #4
 802c844:	9100      	str	r1, [sp, #0]
 802c846:	681b      	ldr	r3, [r3, #0]
 802c848:	07c0      	lsls	r0, r0, #31
 802c84a:	bf4c      	ite	mi
 802c84c:	801a      	strhmi	r2, [r3, #0]
 802c84e:	601a      	strpl	r2, [r3, #0]
 802c850:	e6f4      	b.n	802c63c <__ssvfiscanf_r+0x54>
 802c852:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c854:	4621      	mov	r1, r4
 802c856:	4630      	mov	r0, r6
 802c858:	4798      	blx	r3
 802c85a:	2800      	cmp	r0, #0
 802c85c:	d0b7      	beq.n	802c7ce <__ssvfiscanf_r+0x1e6>
 802c85e:	e79d      	b.n	802c79c <__ssvfiscanf_r+0x1b4>
 802c860:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c862:	3201      	adds	r2, #1
 802c864:	9245      	str	r2, [sp, #276]	; 0x114
 802c866:	6862      	ldr	r2, [r4, #4]
 802c868:	3a01      	subs	r2, #1
 802c86a:	2a00      	cmp	r2, #0
 802c86c:	6062      	str	r2, [r4, #4]
 802c86e:	dd02      	ble.n	802c876 <__ssvfiscanf_r+0x28e>
 802c870:	3301      	adds	r3, #1
 802c872:	6023      	str	r3, [r4, #0]
 802c874:	e7ae      	b.n	802c7d4 <__ssvfiscanf_r+0x1ec>
 802c876:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c878:	4621      	mov	r1, r4
 802c87a:	4630      	mov	r0, r6
 802c87c:	4798      	blx	r3
 802c87e:	2800      	cmp	r0, #0
 802c880:	d0a8      	beq.n	802c7d4 <__ssvfiscanf_r+0x1ec>
 802c882:	e78b      	b.n	802c79c <__ssvfiscanf_r+0x1b4>
 802c884:	2b04      	cmp	r3, #4
 802c886:	dc06      	bgt.n	802c896 <__ssvfiscanf_r+0x2ae>
 802c888:	466b      	mov	r3, sp
 802c88a:	4622      	mov	r2, r4
 802c88c:	a941      	add	r1, sp, #260	; 0x104
 802c88e:	4630      	mov	r0, r6
 802c890:	f000 f87a 	bl	802c988 <_scanf_i>
 802c894:	e7ac      	b.n	802c7f0 <__ssvfiscanf_r+0x208>
 802c896:	4b0f      	ldr	r3, [pc, #60]	; (802c8d4 <__ssvfiscanf_r+0x2ec>)
 802c898:	2b00      	cmp	r3, #0
 802c89a:	f43f aecf 	beq.w	802c63c <__ssvfiscanf_r+0x54>
 802c89e:	466b      	mov	r3, sp
 802c8a0:	4622      	mov	r2, r4
 802c8a2:	a941      	add	r1, sp, #260	; 0x104
 802c8a4:	4630      	mov	r0, r6
 802c8a6:	f3af 8000 	nop.w
 802c8aa:	e7a1      	b.n	802c7f0 <__ssvfiscanf_r+0x208>
 802c8ac:	89a3      	ldrh	r3, [r4, #12]
 802c8ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 802c8b2:	bf18      	it	ne
 802c8b4:	f04f 30ff 	movne.w	r0, #4294967295
 802c8b8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 802c8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c8c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 802c8c2:	e7f9      	b.n	802c8b8 <__ssvfiscanf_r+0x2d0>
 802c8c4:	0802c535 	.word	0x0802c535
 802c8c8:	0802c5af 	.word	0x0802c5af
 802c8cc:	08031241 	.word	0x08031241
 802c8d0:	0803134e 	.word	0x0803134e
 802c8d4:	00000000 	.word	0x00000000

0802c8d8 <_scanf_chars>:
 802c8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c8dc:	4615      	mov	r5, r2
 802c8de:	688a      	ldr	r2, [r1, #8]
 802c8e0:	4680      	mov	r8, r0
 802c8e2:	460c      	mov	r4, r1
 802c8e4:	b932      	cbnz	r2, 802c8f4 <_scanf_chars+0x1c>
 802c8e6:	698a      	ldr	r2, [r1, #24]
 802c8e8:	2a00      	cmp	r2, #0
 802c8ea:	bf0c      	ite	eq
 802c8ec:	2201      	moveq	r2, #1
 802c8ee:	f04f 32ff 	movne.w	r2, #4294967295
 802c8f2:	608a      	str	r2, [r1, #8]
 802c8f4:	6822      	ldr	r2, [r4, #0]
 802c8f6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 802c984 <_scanf_chars+0xac>
 802c8fa:	06d1      	lsls	r1, r2, #27
 802c8fc:	bf5f      	itttt	pl
 802c8fe:	681a      	ldrpl	r2, [r3, #0]
 802c900:	1d11      	addpl	r1, r2, #4
 802c902:	6019      	strpl	r1, [r3, #0]
 802c904:	6816      	ldrpl	r6, [r2, #0]
 802c906:	2700      	movs	r7, #0
 802c908:	69a0      	ldr	r0, [r4, #24]
 802c90a:	b188      	cbz	r0, 802c930 <_scanf_chars+0x58>
 802c90c:	2801      	cmp	r0, #1
 802c90e:	d107      	bne.n	802c920 <_scanf_chars+0x48>
 802c910:	682b      	ldr	r3, [r5, #0]
 802c912:	781a      	ldrb	r2, [r3, #0]
 802c914:	6963      	ldr	r3, [r4, #20]
 802c916:	5c9b      	ldrb	r3, [r3, r2]
 802c918:	b953      	cbnz	r3, 802c930 <_scanf_chars+0x58>
 802c91a:	bb27      	cbnz	r7, 802c966 <_scanf_chars+0x8e>
 802c91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c920:	2802      	cmp	r0, #2
 802c922:	d120      	bne.n	802c966 <_scanf_chars+0x8e>
 802c924:	682b      	ldr	r3, [r5, #0]
 802c926:	781b      	ldrb	r3, [r3, #0]
 802c928:	f813 3009 	ldrb.w	r3, [r3, r9]
 802c92c:	071b      	lsls	r3, r3, #28
 802c92e:	d41a      	bmi.n	802c966 <_scanf_chars+0x8e>
 802c930:	6823      	ldr	r3, [r4, #0]
 802c932:	06da      	lsls	r2, r3, #27
 802c934:	bf5e      	ittt	pl
 802c936:	682b      	ldrpl	r3, [r5, #0]
 802c938:	781b      	ldrbpl	r3, [r3, #0]
 802c93a:	f806 3b01 	strbpl.w	r3, [r6], #1
 802c93e:	682a      	ldr	r2, [r5, #0]
 802c940:	686b      	ldr	r3, [r5, #4]
 802c942:	3201      	adds	r2, #1
 802c944:	602a      	str	r2, [r5, #0]
 802c946:	68a2      	ldr	r2, [r4, #8]
 802c948:	3b01      	subs	r3, #1
 802c94a:	3a01      	subs	r2, #1
 802c94c:	606b      	str	r3, [r5, #4]
 802c94e:	3701      	adds	r7, #1
 802c950:	60a2      	str	r2, [r4, #8]
 802c952:	b142      	cbz	r2, 802c966 <_scanf_chars+0x8e>
 802c954:	2b00      	cmp	r3, #0
 802c956:	dcd7      	bgt.n	802c908 <_scanf_chars+0x30>
 802c958:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802c95c:	4629      	mov	r1, r5
 802c95e:	4640      	mov	r0, r8
 802c960:	4798      	blx	r3
 802c962:	2800      	cmp	r0, #0
 802c964:	d0d0      	beq.n	802c908 <_scanf_chars+0x30>
 802c966:	6823      	ldr	r3, [r4, #0]
 802c968:	f013 0310 	ands.w	r3, r3, #16
 802c96c:	d105      	bne.n	802c97a <_scanf_chars+0xa2>
 802c96e:	68e2      	ldr	r2, [r4, #12]
 802c970:	3201      	adds	r2, #1
 802c972:	60e2      	str	r2, [r4, #12]
 802c974:	69a2      	ldr	r2, [r4, #24]
 802c976:	b102      	cbz	r2, 802c97a <_scanf_chars+0xa2>
 802c978:	7033      	strb	r3, [r6, #0]
 802c97a:	6923      	ldr	r3, [r4, #16]
 802c97c:	441f      	add	r7, r3
 802c97e:	6127      	str	r7, [r4, #16]
 802c980:	2000      	movs	r0, #0
 802c982:	e7cb      	b.n	802c91c <_scanf_chars+0x44>
 802c984:	08031241 	.word	0x08031241

0802c988 <_scanf_i>:
 802c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c98c:	4698      	mov	r8, r3
 802c98e:	4b74      	ldr	r3, [pc, #464]	; (802cb60 <_scanf_i+0x1d8>)
 802c990:	460c      	mov	r4, r1
 802c992:	4682      	mov	sl, r0
 802c994:	4616      	mov	r6, r2
 802c996:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802c99a:	b087      	sub	sp, #28
 802c99c:	ab03      	add	r3, sp, #12
 802c99e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802c9a2:	4b70      	ldr	r3, [pc, #448]	; (802cb64 <_scanf_i+0x1dc>)
 802c9a4:	69a1      	ldr	r1, [r4, #24]
 802c9a6:	4a70      	ldr	r2, [pc, #448]	; (802cb68 <_scanf_i+0x1e0>)
 802c9a8:	2903      	cmp	r1, #3
 802c9aa:	bf18      	it	ne
 802c9ac:	461a      	movne	r2, r3
 802c9ae:	68a3      	ldr	r3, [r4, #8]
 802c9b0:	9201      	str	r2, [sp, #4]
 802c9b2:	1e5a      	subs	r2, r3, #1
 802c9b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802c9b8:	bf88      	it	hi
 802c9ba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802c9be:	4627      	mov	r7, r4
 802c9c0:	bf82      	ittt	hi
 802c9c2:	eb03 0905 	addhi.w	r9, r3, r5
 802c9c6:	f240 135d 	movwhi	r3, #349	; 0x15d
 802c9ca:	60a3      	strhi	r3, [r4, #8]
 802c9cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 802c9d0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802c9d4:	bf98      	it	ls
 802c9d6:	f04f 0900 	movls.w	r9, #0
 802c9da:	6023      	str	r3, [r4, #0]
 802c9dc:	463d      	mov	r5, r7
 802c9de:	f04f 0b00 	mov.w	fp, #0
 802c9e2:	6831      	ldr	r1, [r6, #0]
 802c9e4:	ab03      	add	r3, sp, #12
 802c9e6:	7809      	ldrb	r1, [r1, #0]
 802c9e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802c9ec:	2202      	movs	r2, #2
 802c9ee:	f7d3 fbff 	bl	80001f0 <memchr>
 802c9f2:	b328      	cbz	r0, 802ca40 <_scanf_i+0xb8>
 802c9f4:	f1bb 0f01 	cmp.w	fp, #1
 802c9f8:	d159      	bne.n	802caae <_scanf_i+0x126>
 802c9fa:	6862      	ldr	r2, [r4, #4]
 802c9fc:	b92a      	cbnz	r2, 802ca0a <_scanf_i+0x82>
 802c9fe:	6822      	ldr	r2, [r4, #0]
 802ca00:	2308      	movs	r3, #8
 802ca02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ca06:	6063      	str	r3, [r4, #4]
 802ca08:	6022      	str	r2, [r4, #0]
 802ca0a:	6822      	ldr	r2, [r4, #0]
 802ca0c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802ca10:	6022      	str	r2, [r4, #0]
 802ca12:	68a2      	ldr	r2, [r4, #8]
 802ca14:	1e51      	subs	r1, r2, #1
 802ca16:	60a1      	str	r1, [r4, #8]
 802ca18:	b192      	cbz	r2, 802ca40 <_scanf_i+0xb8>
 802ca1a:	6832      	ldr	r2, [r6, #0]
 802ca1c:	1c51      	adds	r1, r2, #1
 802ca1e:	6031      	str	r1, [r6, #0]
 802ca20:	7812      	ldrb	r2, [r2, #0]
 802ca22:	f805 2b01 	strb.w	r2, [r5], #1
 802ca26:	6872      	ldr	r2, [r6, #4]
 802ca28:	3a01      	subs	r2, #1
 802ca2a:	2a00      	cmp	r2, #0
 802ca2c:	6072      	str	r2, [r6, #4]
 802ca2e:	dc07      	bgt.n	802ca40 <_scanf_i+0xb8>
 802ca30:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802ca34:	4631      	mov	r1, r6
 802ca36:	4650      	mov	r0, sl
 802ca38:	4790      	blx	r2
 802ca3a:	2800      	cmp	r0, #0
 802ca3c:	f040 8085 	bne.w	802cb4a <_scanf_i+0x1c2>
 802ca40:	f10b 0b01 	add.w	fp, fp, #1
 802ca44:	f1bb 0f03 	cmp.w	fp, #3
 802ca48:	d1cb      	bne.n	802c9e2 <_scanf_i+0x5a>
 802ca4a:	6863      	ldr	r3, [r4, #4]
 802ca4c:	b90b      	cbnz	r3, 802ca52 <_scanf_i+0xca>
 802ca4e:	230a      	movs	r3, #10
 802ca50:	6063      	str	r3, [r4, #4]
 802ca52:	6863      	ldr	r3, [r4, #4]
 802ca54:	4945      	ldr	r1, [pc, #276]	; (802cb6c <_scanf_i+0x1e4>)
 802ca56:	6960      	ldr	r0, [r4, #20]
 802ca58:	1ac9      	subs	r1, r1, r3
 802ca5a:	f000 f89b 	bl	802cb94 <__sccl>
 802ca5e:	f04f 0b00 	mov.w	fp, #0
 802ca62:	68a3      	ldr	r3, [r4, #8]
 802ca64:	6822      	ldr	r2, [r4, #0]
 802ca66:	2b00      	cmp	r3, #0
 802ca68:	d03d      	beq.n	802cae6 <_scanf_i+0x15e>
 802ca6a:	6831      	ldr	r1, [r6, #0]
 802ca6c:	6960      	ldr	r0, [r4, #20]
 802ca6e:	f891 c000 	ldrb.w	ip, [r1]
 802ca72:	f810 000c 	ldrb.w	r0, [r0, ip]
 802ca76:	2800      	cmp	r0, #0
 802ca78:	d035      	beq.n	802cae6 <_scanf_i+0x15e>
 802ca7a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802ca7e:	d124      	bne.n	802caca <_scanf_i+0x142>
 802ca80:	0510      	lsls	r0, r2, #20
 802ca82:	d522      	bpl.n	802caca <_scanf_i+0x142>
 802ca84:	f10b 0b01 	add.w	fp, fp, #1
 802ca88:	f1b9 0f00 	cmp.w	r9, #0
 802ca8c:	d003      	beq.n	802ca96 <_scanf_i+0x10e>
 802ca8e:	3301      	adds	r3, #1
 802ca90:	f109 39ff 	add.w	r9, r9, #4294967295
 802ca94:	60a3      	str	r3, [r4, #8]
 802ca96:	6873      	ldr	r3, [r6, #4]
 802ca98:	3b01      	subs	r3, #1
 802ca9a:	2b00      	cmp	r3, #0
 802ca9c:	6073      	str	r3, [r6, #4]
 802ca9e:	dd1b      	ble.n	802cad8 <_scanf_i+0x150>
 802caa0:	6833      	ldr	r3, [r6, #0]
 802caa2:	3301      	adds	r3, #1
 802caa4:	6033      	str	r3, [r6, #0]
 802caa6:	68a3      	ldr	r3, [r4, #8]
 802caa8:	3b01      	subs	r3, #1
 802caaa:	60a3      	str	r3, [r4, #8]
 802caac:	e7d9      	b.n	802ca62 <_scanf_i+0xda>
 802caae:	f1bb 0f02 	cmp.w	fp, #2
 802cab2:	d1ae      	bne.n	802ca12 <_scanf_i+0x8a>
 802cab4:	6822      	ldr	r2, [r4, #0]
 802cab6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802caba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802cabe:	d1bf      	bne.n	802ca40 <_scanf_i+0xb8>
 802cac0:	2310      	movs	r3, #16
 802cac2:	6063      	str	r3, [r4, #4]
 802cac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802cac8:	e7a2      	b.n	802ca10 <_scanf_i+0x88>
 802caca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802cace:	6022      	str	r2, [r4, #0]
 802cad0:	780b      	ldrb	r3, [r1, #0]
 802cad2:	f805 3b01 	strb.w	r3, [r5], #1
 802cad6:	e7de      	b.n	802ca96 <_scanf_i+0x10e>
 802cad8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802cadc:	4631      	mov	r1, r6
 802cade:	4650      	mov	r0, sl
 802cae0:	4798      	blx	r3
 802cae2:	2800      	cmp	r0, #0
 802cae4:	d0df      	beq.n	802caa6 <_scanf_i+0x11e>
 802cae6:	6823      	ldr	r3, [r4, #0]
 802cae8:	05d9      	lsls	r1, r3, #23
 802caea:	d50d      	bpl.n	802cb08 <_scanf_i+0x180>
 802caec:	42bd      	cmp	r5, r7
 802caee:	d909      	bls.n	802cb04 <_scanf_i+0x17c>
 802caf0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802caf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802caf8:	4632      	mov	r2, r6
 802cafa:	4650      	mov	r0, sl
 802cafc:	4798      	blx	r3
 802cafe:	f105 39ff 	add.w	r9, r5, #4294967295
 802cb02:	464d      	mov	r5, r9
 802cb04:	42bd      	cmp	r5, r7
 802cb06:	d028      	beq.n	802cb5a <_scanf_i+0x1d2>
 802cb08:	6822      	ldr	r2, [r4, #0]
 802cb0a:	f012 0210 	ands.w	r2, r2, #16
 802cb0e:	d113      	bne.n	802cb38 <_scanf_i+0x1b0>
 802cb10:	702a      	strb	r2, [r5, #0]
 802cb12:	6863      	ldr	r3, [r4, #4]
 802cb14:	9e01      	ldr	r6, [sp, #4]
 802cb16:	4639      	mov	r1, r7
 802cb18:	4650      	mov	r0, sl
 802cb1a:	47b0      	blx	r6
 802cb1c:	f8d8 3000 	ldr.w	r3, [r8]
 802cb20:	6821      	ldr	r1, [r4, #0]
 802cb22:	1d1a      	adds	r2, r3, #4
 802cb24:	f8c8 2000 	str.w	r2, [r8]
 802cb28:	f011 0f20 	tst.w	r1, #32
 802cb2c:	681b      	ldr	r3, [r3, #0]
 802cb2e:	d00f      	beq.n	802cb50 <_scanf_i+0x1c8>
 802cb30:	6018      	str	r0, [r3, #0]
 802cb32:	68e3      	ldr	r3, [r4, #12]
 802cb34:	3301      	adds	r3, #1
 802cb36:	60e3      	str	r3, [r4, #12]
 802cb38:	1bed      	subs	r5, r5, r7
 802cb3a:	44ab      	add	fp, r5
 802cb3c:	6925      	ldr	r5, [r4, #16]
 802cb3e:	445d      	add	r5, fp
 802cb40:	6125      	str	r5, [r4, #16]
 802cb42:	2000      	movs	r0, #0
 802cb44:	b007      	add	sp, #28
 802cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cb4a:	f04f 0b00 	mov.w	fp, #0
 802cb4e:	e7ca      	b.n	802cae6 <_scanf_i+0x15e>
 802cb50:	07ca      	lsls	r2, r1, #31
 802cb52:	bf4c      	ite	mi
 802cb54:	8018      	strhmi	r0, [r3, #0]
 802cb56:	6018      	strpl	r0, [r3, #0]
 802cb58:	e7eb      	b.n	802cb32 <_scanf_i+0x1aa>
 802cb5a:	2001      	movs	r0, #1
 802cb5c:	e7f2      	b.n	802cb44 <_scanf_i+0x1bc>
 802cb5e:	bf00      	nop
 802cb60:	0802e03c 	.word	0x0802e03c
 802cb64:	0802cd01 	.word	0x0802cd01
 802cb68:	0802a669 	.word	0x0802a669
 802cb6c:	0803166d 	.word	0x0803166d

0802cb70 <_read_r>:
 802cb70:	b538      	push	{r3, r4, r5, lr}
 802cb72:	4d07      	ldr	r5, [pc, #28]	; (802cb90 <_read_r+0x20>)
 802cb74:	4604      	mov	r4, r0
 802cb76:	4608      	mov	r0, r1
 802cb78:	4611      	mov	r1, r2
 802cb7a:	2200      	movs	r2, #0
 802cb7c:	602a      	str	r2, [r5, #0]
 802cb7e:	461a      	mov	r2, r3
 802cb80:	f7d8 f95e 	bl	8004e40 <_read>
 802cb84:	1c43      	adds	r3, r0, #1
 802cb86:	d102      	bne.n	802cb8e <_read_r+0x1e>
 802cb88:	682b      	ldr	r3, [r5, #0]
 802cb8a:	b103      	cbz	r3, 802cb8e <_read_r+0x1e>
 802cb8c:	6023      	str	r3, [r4, #0]
 802cb8e:	bd38      	pop	{r3, r4, r5, pc}
 802cb90:	2000c650 	.word	0x2000c650

0802cb94 <__sccl>:
 802cb94:	b570      	push	{r4, r5, r6, lr}
 802cb96:	780b      	ldrb	r3, [r1, #0]
 802cb98:	4604      	mov	r4, r0
 802cb9a:	2b5e      	cmp	r3, #94	; 0x5e
 802cb9c:	bf0b      	itete	eq
 802cb9e:	784b      	ldrbeq	r3, [r1, #1]
 802cba0:	1c48      	addne	r0, r1, #1
 802cba2:	1c88      	addeq	r0, r1, #2
 802cba4:	2200      	movne	r2, #0
 802cba6:	bf08      	it	eq
 802cba8:	2201      	moveq	r2, #1
 802cbaa:	1e61      	subs	r1, r4, #1
 802cbac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802cbb0:	f801 2f01 	strb.w	r2, [r1, #1]!
 802cbb4:	42a9      	cmp	r1, r5
 802cbb6:	d1fb      	bne.n	802cbb0 <__sccl+0x1c>
 802cbb8:	b90b      	cbnz	r3, 802cbbe <__sccl+0x2a>
 802cbba:	3801      	subs	r0, #1
 802cbbc:	bd70      	pop	{r4, r5, r6, pc}
 802cbbe:	f082 0101 	eor.w	r1, r2, #1
 802cbc2:	54e1      	strb	r1, [r4, r3]
 802cbc4:	1c42      	adds	r2, r0, #1
 802cbc6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802cbca:	2d2d      	cmp	r5, #45	; 0x2d
 802cbcc:	f102 36ff 	add.w	r6, r2, #4294967295
 802cbd0:	4610      	mov	r0, r2
 802cbd2:	d006      	beq.n	802cbe2 <__sccl+0x4e>
 802cbd4:	2d5d      	cmp	r5, #93	; 0x5d
 802cbd6:	d0f1      	beq.n	802cbbc <__sccl+0x28>
 802cbd8:	b90d      	cbnz	r5, 802cbde <__sccl+0x4a>
 802cbda:	4630      	mov	r0, r6
 802cbdc:	e7ee      	b.n	802cbbc <__sccl+0x28>
 802cbde:	462b      	mov	r3, r5
 802cbe0:	e7ef      	b.n	802cbc2 <__sccl+0x2e>
 802cbe2:	7816      	ldrb	r6, [r2, #0]
 802cbe4:	2e5d      	cmp	r6, #93	; 0x5d
 802cbe6:	d0fa      	beq.n	802cbde <__sccl+0x4a>
 802cbe8:	42b3      	cmp	r3, r6
 802cbea:	dcf8      	bgt.n	802cbde <__sccl+0x4a>
 802cbec:	4618      	mov	r0, r3
 802cbee:	3001      	adds	r0, #1
 802cbf0:	4286      	cmp	r6, r0
 802cbf2:	5421      	strb	r1, [r4, r0]
 802cbf4:	dcfb      	bgt.n	802cbee <__sccl+0x5a>
 802cbf6:	43d8      	mvns	r0, r3
 802cbf8:	4430      	add	r0, r6
 802cbfa:	1c5d      	adds	r5, r3, #1
 802cbfc:	42b3      	cmp	r3, r6
 802cbfe:	bfa8      	it	ge
 802cc00:	2000      	movge	r0, #0
 802cc02:	182b      	adds	r3, r5, r0
 802cc04:	3202      	adds	r2, #2
 802cc06:	e7de      	b.n	802cbc6 <__sccl+0x32>

0802cc08 <_strtoul_l.isra.0>:
 802cc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802cc0c:	4e3b      	ldr	r6, [pc, #236]	; (802ccfc <_strtoul_l.isra.0+0xf4>)
 802cc0e:	4686      	mov	lr, r0
 802cc10:	468c      	mov	ip, r1
 802cc12:	4660      	mov	r0, ip
 802cc14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 802cc18:	5da5      	ldrb	r5, [r4, r6]
 802cc1a:	f015 0508 	ands.w	r5, r5, #8
 802cc1e:	d1f8      	bne.n	802cc12 <_strtoul_l.isra.0+0xa>
 802cc20:	2c2d      	cmp	r4, #45	; 0x2d
 802cc22:	d134      	bne.n	802cc8e <_strtoul_l.isra.0+0x86>
 802cc24:	f89c 4000 	ldrb.w	r4, [ip]
 802cc28:	f04f 0801 	mov.w	r8, #1
 802cc2c:	f100 0c02 	add.w	ip, r0, #2
 802cc30:	2b00      	cmp	r3, #0
 802cc32:	d05e      	beq.n	802ccf2 <_strtoul_l.isra.0+0xea>
 802cc34:	2b10      	cmp	r3, #16
 802cc36:	d10c      	bne.n	802cc52 <_strtoul_l.isra.0+0x4a>
 802cc38:	2c30      	cmp	r4, #48	; 0x30
 802cc3a:	d10a      	bne.n	802cc52 <_strtoul_l.isra.0+0x4a>
 802cc3c:	f89c 0000 	ldrb.w	r0, [ip]
 802cc40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802cc44:	2858      	cmp	r0, #88	; 0x58
 802cc46:	d14f      	bne.n	802cce8 <_strtoul_l.isra.0+0xe0>
 802cc48:	f89c 4001 	ldrb.w	r4, [ip, #1]
 802cc4c:	2310      	movs	r3, #16
 802cc4e:	f10c 0c02 	add.w	ip, ip, #2
 802cc52:	f04f 37ff 	mov.w	r7, #4294967295
 802cc56:	2500      	movs	r5, #0
 802cc58:	fbb7 f7f3 	udiv	r7, r7, r3
 802cc5c:	fb03 f907 	mul.w	r9, r3, r7
 802cc60:	ea6f 0909 	mvn.w	r9, r9
 802cc64:	4628      	mov	r0, r5
 802cc66:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802cc6a:	2e09      	cmp	r6, #9
 802cc6c:	d818      	bhi.n	802cca0 <_strtoul_l.isra.0+0x98>
 802cc6e:	4634      	mov	r4, r6
 802cc70:	42a3      	cmp	r3, r4
 802cc72:	dd24      	ble.n	802ccbe <_strtoul_l.isra.0+0xb6>
 802cc74:	2d00      	cmp	r5, #0
 802cc76:	db1f      	blt.n	802ccb8 <_strtoul_l.isra.0+0xb0>
 802cc78:	4287      	cmp	r7, r0
 802cc7a:	d31d      	bcc.n	802ccb8 <_strtoul_l.isra.0+0xb0>
 802cc7c:	d101      	bne.n	802cc82 <_strtoul_l.isra.0+0x7a>
 802cc7e:	45a1      	cmp	r9, r4
 802cc80:	db1a      	blt.n	802ccb8 <_strtoul_l.isra.0+0xb0>
 802cc82:	fb00 4003 	mla	r0, r0, r3, r4
 802cc86:	2501      	movs	r5, #1
 802cc88:	f81c 4b01 	ldrb.w	r4, [ip], #1
 802cc8c:	e7eb      	b.n	802cc66 <_strtoul_l.isra.0+0x5e>
 802cc8e:	2c2b      	cmp	r4, #43	; 0x2b
 802cc90:	bf08      	it	eq
 802cc92:	f89c 4000 	ldrbeq.w	r4, [ip]
 802cc96:	46a8      	mov	r8, r5
 802cc98:	bf08      	it	eq
 802cc9a:	f100 0c02 	addeq.w	ip, r0, #2
 802cc9e:	e7c7      	b.n	802cc30 <_strtoul_l.isra.0+0x28>
 802cca0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 802cca4:	2e19      	cmp	r6, #25
 802cca6:	d801      	bhi.n	802ccac <_strtoul_l.isra.0+0xa4>
 802cca8:	3c37      	subs	r4, #55	; 0x37
 802ccaa:	e7e1      	b.n	802cc70 <_strtoul_l.isra.0+0x68>
 802ccac:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 802ccb0:	2e19      	cmp	r6, #25
 802ccb2:	d804      	bhi.n	802ccbe <_strtoul_l.isra.0+0xb6>
 802ccb4:	3c57      	subs	r4, #87	; 0x57
 802ccb6:	e7db      	b.n	802cc70 <_strtoul_l.isra.0+0x68>
 802ccb8:	f04f 35ff 	mov.w	r5, #4294967295
 802ccbc:	e7e4      	b.n	802cc88 <_strtoul_l.isra.0+0x80>
 802ccbe:	2d00      	cmp	r5, #0
 802ccc0:	da07      	bge.n	802ccd2 <_strtoul_l.isra.0+0xca>
 802ccc2:	2322      	movs	r3, #34	; 0x22
 802ccc4:	f8ce 3000 	str.w	r3, [lr]
 802ccc8:	f04f 30ff 	mov.w	r0, #4294967295
 802cccc:	b942      	cbnz	r2, 802cce0 <_strtoul_l.isra.0+0xd8>
 802ccce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ccd2:	f1b8 0f00 	cmp.w	r8, #0
 802ccd6:	d000      	beq.n	802ccda <_strtoul_l.isra.0+0xd2>
 802ccd8:	4240      	negs	r0, r0
 802ccda:	2a00      	cmp	r2, #0
 802ccdc:	d0f7      	beq.n	802ccce <_strtoul_l.isra.0+0xc6>
 802ccde:	b10d      	cbz	r5, 802cce4 <_strtoul_l.isra.0+0xdc>
 802cce0:	f10c 31ff 	add.w	r1, ip, #4294967295
 802cce4:	6011      	str	r1, [r2, #0]
 802cce6:	e7f2      	b.n	802ccce <_strtoul_l.isra.0+0xc6>
 802cce8:	2430      	movs	r4, #48	; 0x30
 802ccea:	2b00      	cmp	r3, #0
 802ccec:	d1b1      	bne.n	802cc52 <_strtoul_l.isra.0+0x4a>
 802ccee:	2308      	movs	r3, #8
 802ccf0:	e7af      	b.n	802cc52 <_strtoul_l.isra.0+0x4a>
 802ccf2:	2c30      	cmp	r4, #48	; 0x30
 802ccf4:	d0a2      	beq.n	802cc3c <_strtoul_l.isra.0+0x34>
 802ccf6:	230a      	movs	r3, #10
 802ccf8:	e7ab      	b.n	802cc52 <_strtoul_l.isra.0+0x4a>
 802ccfa:	bf00      	nop
 802ccfc:	08031241 	.word	0x08031241

0802cd00 <_strtoul_r>:
 802cd00:	f7ff bf82 	b.w	802cc08 <_strtoul_l.isra.0>

0802cd04 <__submore>:
 802cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cd08:	460c      	mov	r4, r1
 802cd0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802cd0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802cd10:	4299      	cmp	r1, r3
 802cd12:	d11d      	bne.n	802cd50 <__submore+0x4c>
 802cd14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802cd18:	f7fc fc68 	bl	80295ec <_malloc_r>
 802cd1c:	b918      	cbnz	r0, 802cd26 <__submore+0x22>
 802cd1e:	f04f 30ff 	mov.w	r0, #4294967295
 802cd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cd26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802cd2a:	63a3      	str	r3, [r4, #56]	; 0x38
 802cd2c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802cd30:	6360      	str	r0, [r4, #52]	; 0x34
 802cd32:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802cd36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802cd3a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802cd3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802cd42:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802cd46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802cd4a:	6020      	str	r0, [r4, #0]
 802cd4c:	2000      	movs	r0, #0
 802cd4e:	e7e8      	b.n	802cd22 <__submore+0x1e>
 802cd50:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802cd52:	0077      	lsls	r7, r6, #1
 802cd54:	463a      	mov	r2, r7
 802cd56:	f7ff fa6c 	bl	802c232 <_realloc_r>
 802cd5a:	4605      	mov	r5, r0
 802cd5c:	2800      	cmp	r0, #0
 802cd5e:	d0de      	beq.n	802cd1e <__submore+0x1a>
 802cd60:	eb00 0806 	add.w	r8, r0, r6
 802cd64:	4601      	mov	r1, r0
 802cd66:	4632      	mov	r2, r6
 802cd68:	4640      	mov	r0, r8
 802cd6a:	f7fc fbbf 	bl	80294ec <memcpy>
 802cd6e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802cd72:	f8c4 8000 	str.w	r8, [r4]
 802cd76:	e7e9      	b.n	802cd4c <__submore+0x48>

0802cd78 <__ascii_wctomb>:
 802cd78:	b149      	cbz	r1, 802cd8e <__ascii_wctomb+0x16>
 802cd7a:	2aff      	cmp	r2, #255	; 0xff
 802cd7c:	bf85      	ittet	hi
 802cd7e:	238a      	movhi	r3, #138	; 0x8a
 802cd80:	6003      	strhi	r3, [r0, #0]
 802cd82:	700a      	strbls	r2, [r1, #0]
 802cd84:	f04f 30ff 	movhi.w	r0, #4294967295
 802cd88:	bf98      	it	ls
 802cd8a:	2001      	movls	r0, #1
 802cd8c:	4770      	bx	lr
 802cd8e:	4608      	mov	r0, r1
 802cd90:	4770      	bx	lr
	...

0802cd94 <_fstat_r>:
 802cd94:	b538      	push	{r3, r4, r5, lr}
 802cd96:	4d07      	ldr	r5, [pc, #28]	; (802cdb4 <_fstat_r+0x20>)
 802cd98:	2300      	movs	r3, #0
 802cd9a:	4604      	mov	r4, r0
 802cd9c:	4608      	mov	r0, r1
 802cd9e:	4611      	mov	r1, r2
 802cda0:	602b      	str	r3, [r5, #0]
 802cda2:	f7d8 f892 	bl	8004eca <_fstat>
 802cda6:	1c43      	adds	r3, r0, #1
 802cda8:	d102      	bne.n	802cdb0 <_fstat_r+0x1c>
 802cdaa:	682b      	ldr	r3, [r5, #0]
 802cdac:	b103      	cbz	r3, 802cdb0 <_fstat_r+0x1c>
 802cdae:	6023      	str	r3, [r4, #0]
 802cdb0:	bd38      	pop	{r3, r4, r5, pc}
 802cdb2:	bf00      	nop
 802cdb4:	2000c650 	.word	0x2000c650

0802cdb8 <_isatty_r>:
 802cdb8:	b538      	push	{r3, r4, r5, lr}
 802cdba:	4d06      	ldr	r5, [pc, #24]	; (802cdd4 <_isatty_r+0x1c>)
 802cdbc:	2300      	movs	r3, #0
 802cdbe:	4604      	mov	r4, r0
 802cdc0:	4608      	mov	r0, r1
 802cdc2:	602b      	str	r3, [r5, #0]
 802cdc4:	f7d8 f891 	bl	8004eea <_isatty>
 802cdc8:	1c43      	adds	r3, r0, #1
 802cdca:	d102      	bne.n	802cdd2 <_isatty_r+0x1a>
 802cdcc:	682b      	ldr	r3, [r5, #0]
 802cdce:	b103      	cbz	r3, 802cdd2 <_isatty_r+0x1a>
 802cdd0:	6023      	str	r3, [r4, #0]
 802cdd2:	bd38      	pop	{r3, r4, r5, pc}
 802cdd4:	2000c650 	.word	0x2000c650

0802cdd8 <_malloc_usable_size_r>:
 802cdd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802cddc:	1f18      	subs	r0, r3, #4
 802cdde:	2b00      	cmp	r3, #0
 802cde0:	bfbc      	itt	lt
 802cde2:	580b      	ldrlt	r3, [r1, r0]
 802cde4:	18c0      	addlt	r0, r0, r3
 802cde6:	4770      	bx	lr

0802cde8 <_init>:
 802cde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cdea:	bf00      	nop
 802cdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cdee:	bc08      	pop	{r3}
 802cdf0:	469e      	mov	lr, r3
 802cdf2:	4770      	bx	lr

0802cdf4 <_fini>:
 802cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cdf6:	bf00      	nop
 802cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cdfa:	bc08      	pop	{r3}
 802cdfc:	469e      	mov	lr, r3
 802cdfe:	4770      	bx	lr
